<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="R15_Account_Get" resourceRoot="${projectDir}" soapui-version="4.6.1" defaultScriptLanguage="Groovy" activeEnvironment="Default" id="1d80de66-5d90-4714-bad7-60212440209e" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="E:\DECE API\STS\Builds\R3\106.2.3\Reports106\STSAPI_Payload_NodeOId_TCs_R3"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/opt/dece/soapUIProjects/LP/Reports</con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account" type="rest" id="8252ba06-b20f-4a82-a0b6-fd7f3523ede0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="ed70a636-717d-4786-b6de-deabd446719b"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403 503</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountCreate" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="AccountGET" method="GET" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 303 200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500 401</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGET_BasicAuth" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="AccountGET_SAML" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username/><con:password/><con:domain/><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Account" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="bda852c0-5ccd-41d2-911c-bdec0459e462"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="AccountGet" method="GET" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 401 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:Account</con:element></con:representation><con:request name="AccountGet" mediaType="application/xml" sslKeystore="500500.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request><con:request name="AccountGet_BasicAuth" mediaType="application/xml" sslKeystore="500580.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="AB1E09D1A009474DE0401F0A07995BBC" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountDelete" method="DELETE" id="3dd5e135-f342-47db-9631-1bec111dba45"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" sslKeystore="80080010.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountUpdate" method="PUT" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountUpdate" mediaType="application/xml" sslKeystore="80080010.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountGet_POST" method="POST" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 401 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500 405</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGet" mediaType="application/xml" sslKeystore="500500.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountGet_UPDATE" method="PUT" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 401 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountGet" mediaType="application/xml" sslKeystore="500500.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountGet_HEAD" method="HEAD" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 401 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>303</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGet" mediaType="application/xml" sslKeystore="500500.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountGet_OPTIONS" method="OPTIONS" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 401 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500 405</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountGet" mediaType="application/xml" sslKeystore="500500.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="FirstUserCreate" type="rest" id="63e68881-a234-4670-82d0-16b5421c30a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="FirstUserCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="9ed9c404-b207-4c25-a786-7bd711105b44"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="UserAPI" path="/{UserID}" id="8c72fe92-42e8-4bcc-bfc3-29cb8a3ca9cb"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="User_StatusUpdate" path="/ResourceStatus/Current/Update" id="b0f04600-c6bc-42f8-b382-bdb9ef258eee"><con:settings/><con:parameters/><con:method name="UserStatusUpdate" method="PUT" id="5e4818b9-48a0-429e-aa1a-3379298d12be"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ResourceStatus</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>303</con:status><con:params/></con:representation><con:request name="UserStatusUpdate" mediaType="application/xml" postQueryString="false" id="ae263fb2-2f71-4002-b6e4-7831863b5d6f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERID}"/>
</con:parameters></con:request></con:method></con:resource><con:method name="UserGet" method="GET" id="55de7616-71c0-4cac-bade-e9aa4166e711"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:User</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserList" path="/List" id="16a08242-2ac7-42a8-b9c6-ca954b9794d4"><con:settings/><con:parameters/><con:method name="UserList" method="GET" id="e58e8f42-4a16-498a-86e7-a405a0125794"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:UserList</con:element></con:representation><con:request name="UserList" mediaType="application/xml" id="869ab87f-d5fa-4e59-8a29-1bca986023a1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:method name="AccountUserCreate" method="POST" id="557bc5f3-c2ce-4146-81fc-71cdc6358536"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404 403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503 502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400 500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountUserCreate" mediaType="application/xml" postQueryString="false" id="54c781b4-bf2d-4e55-ab6c-fc7337e96457" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>NewnameShikha</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserDelete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" id="b4da2587-c2fe-45c4-aa0b-7bfdda8db2c0"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>${#TestCase#NODE_ACCOUNT_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_ACCOUNT_ID}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>${#TestCase#NODE_USER_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_USER_ID}</con:default></con:parameter></con:parameters><con:method name="DeleteUser" method="DELETE" id="02c9752d-c22c-4713-874a-3f6c2b982142"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="0f18fdda-5e02-4f21-8def-a3f312f61ac8"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AddNewUser" type="rest" id="785934cf-6e29-492d-9dd8-504d1aeb0b28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#HostName}</con:endpoint></con:endpoints><con:resource name="AddUser" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="a8f8ca6d-db1b-4090-9ffc-68be2d519618"><con:settings/><con:parameters/><con:resource name="UserAPI" path="/{UserID}" id="20cfed44-6bef-4e69-8937-8a0ed4466e50"><con:settings/><con:parameters><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE" id="ec0bb443-5d9b-4e69-b1d5-c6cf6535c7e4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserDelete" mediaType="application/xml" sslKeystore="80080010.pem" id="d0bc938e-dbab-4193-8cc9-85cb4f10c8bf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:${#Project#NODEUSERID1}"/>
</con:parameters></con:request></con:method><con:method name="UserGet" method="GET" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 400 405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml" sslKeystore="80080010.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserUpdate" method="PUT" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:default></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 503</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserUpdate" mediaType="application/xml" sslKeystore="500500.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="AddUser" method="POST" id="c8e33bf9-7e9a-4fc7-a85d-b9258d44e3b4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddUser" mediaType="application/xml" postQueryString="false" sslKeystore="80080010.pem" id="8f456815-cfce-46c5-9b39-907b23b9d134"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="PolicyCreate" type="rest" basePath="" definitionUrl="" id="6c3d536c-c34c-4909-b68e-c56202e901a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyCreate_UserPolicy" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="8ea94816-f6ab-4fdb-a7cf-e216079a2d87"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>NodeUserId</con:name><con:value>${#TestProject#NodeUserId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeUserId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:request name="PolicyCreateSinglePolicyPost" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="UserPolicyGET" method="GET" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyGET" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="UserPolicy_DELETE" method="DELETE" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyDELETE" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="PolicyCreate_AccountPolicy" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="8ea94816-f6ab-4fdb-a7cf-e216079a2d87"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyCreateSinglePolicyPost" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="AccountPolicyGET" method="GET" id="c23d9652-8201-4a6d-a343-8eaeb0193004"><con:settings/><con:parameters/><con:request name="AccountPolicyGET" mediaType="application/xml" id="846a1ca0-681d-46b1-a5d8-0a63053da965"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PolicyClass" value="List" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountPolicyDELETE" method="DELETE" id="33e2e7d9-2b5b-406b-ba40-cad2d4922d0a"><con:settings/><con:parameters/><con:request name="AccountPolicyDELETE" mediaType="application/xml" id="7926fdfc-6744-494b-ad3f-86dbd869e045"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PolicyClass" value="List" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Rights Token" type="rest" id="2cc5edf0-44c3-45c0-af0b-d6e19735bdd5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="Rights Token Get_List" path="${#TestCase#endPoint}" id="80183adb-1c5a-4de7-9d84-191f16c47def"><con:settings/><con:parameters/><con:method name="Rights Token Get" method="GET" id="8b4cec3d-fe23-4572-9b38-8f6059da115f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:RightsTokenList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:RightsToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="dc5964a7-d54c-453b-85c8-f1cc8f5c4976"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Rights Token Create" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{RIGHTSTOKEN}/RightsToken" id="483f410c-4aec-4f56-bdb8-b53566c9bb97"><con:settings/><con:parameters><con:parameter><con:name>RIGHTSTOKEN</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Rights Token Create" method="POST" id="1c20f275-4760-4c4b-994f-d981d038615c"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="0565a9cc-8569-46e9-a479-f8aacc70fa3f"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Stream" type="rest" basePath="" definitionUrl="" id="233e54e8-cd77-4d4d-8f1e-6d240a4b070f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="StreamView" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream/{STREAM}" id="0931ace2-e7f3-4c79-968d-a04d73600c30"><con:settings/><con:parameters><con:parameter><con:name>STREAM</con:name><con:value>${#Project#urnstream}1234</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnstream}1234</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="9683ed0f-6cc9-4f65-847b-0f131541e354"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="bcfd0ffb-67ca-4ab7-94f1-27b7e0a4af61" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream" id="cf353486-e4bd-4e29-9fa0-16678ce3ed16"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="8e9894cd-2bd1-4e02-ab04-37036dd75fc6"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="f8992888-776a-4588-8ff0-130c8c626196"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeTest" type="rest" id="6ba05ee5-e87a-41e2-93b7-5fac7723d364" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeTest" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" id="d3ab43df-328b-4e09-8562-58a80596481d"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="449e438d-5c8b-4814-8ea3-5b23b2d9c7fc"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="cfd0be42-a0ab-4e51-972d-c4a67c9d1208"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMerge" type="rest" id="38577162-173b-4e3b-b7a4-7084681116dd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMerge" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" id="6ecab418-a971-4402-baea-c83b2ded7efc"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:value>RetiredAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RetiredAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4659148b-17e0-4ad5-a68e-924d516aa757"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="acbfb94a-f132-4a9c-8d15-8b85ecc78c8c" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 Assertion=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"/>
  &lt;con:entry key="Authorization" value="SAML2 Assertion=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"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2012/12/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842651EB198EA24E0401F0A07993565</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842781AAA4A1E6FE0401F0A0799569A</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842651EB188EA24E0401F0A07993565"/>
  <con:entry key="RetiredAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842781AAA3B1E6FE0401F0A0799569A"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeUndo" type="rest" id="216cdb32-edc4-42ff-940d-0a24ddc5b6ef" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeUndo" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Undo" id="a3a07d2e-db6c-4d70-a443-af62d5a50a00"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4995638c-d575-4d0f-a861-2a267308a8d9"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="9f81ce2b-c5b6-493d-9b1f-7c101faacf30"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserResourceStatusUpdate" type="rest" id="3c0ff9bd-188e-4595-ac97-ec945cbf1b34" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="UserResourceStatusUpdate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="a72ea2ab-ce4e-47cc-b28d-787420d41eae"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UserResourceStatusUpdate" method="PUT" id="bae01694-be77-463a-bcef-02134d4e45fb"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ResourceStatus</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="d9791dad-3957-43a7-9916-acc98d6cfcfe"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountResourceStatusUpdate" type="rest" id="d2b48757-d9d7-48b6-99e2-5ffaec2a0276" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountResourceStatusUpdate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/ResourceStatus/Current/Update" id="087a86a9-8ddc-4222-aa5e-8ea5f58f3b44"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ResourceStatusUpdate" method="PUT" id="a3720389-3d1d-49ca-8d11-1e6c7977a6b6"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="c5de7daa-09fc-46a7-9439-7290f79b45c1"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" id="2b399c77-329a-43cb-9c65-b90e43e27bf5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="STSCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" id="c9f3de54-1283-4f02-b8ea-7030652e5a47"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>tokentype</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>tokentype</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value>audience</con:value><con:style>QUERY</con:style><con:default>audience</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST" id="dd8dec87-e935-415f-91f4-ef072cb2b292"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:Credentials</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8eccae92-53c1-462c-ad88-7bb2ab6bc7a9"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" id="f7ffc3a2-890e-4d43-8f2a-582eb82ffd58"><con:settings/><con:parameters><con:parameter><con:name>assertionUUID</con:name><con:value>assertionUUID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>assertionUUID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="STSGet" method="GET" id="5edddbc8-bc7c-4b0d-9fa5-394b1f0932ed"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="198a8863-08df-42da-87ef-91fde7f4ac06"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Users" type="rest" id="a6b47e2a-6ec0-4d51-b70d-0fe2c39c89bb" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="UserCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="6abea313-2ae4-47a2-919b-8639b056a406"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST" id="22790dc9-f087-4d6b-8978-8ee7e6e5feac"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="aff24390-0479-473a-9b57-a08afc5cc4b7"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserGet" path="rest/${Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" id="01c41851-b1a7-4127-914c-05f1b1a625d6"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserGet" method="GET" id="92c030af-0ac7-4174-8453-94f6ff1b243c"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="46083e56-5c6f-4481-9c0a-5ccd55d9b1b5"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserUpdate" path="rest/${Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" id="c050c9c4-c157-4876-98ca-eb88fd076897"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserUpdate" method="PUT" id="503e1641-389f-43b9-a04e-39adeeff15cb"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8c4de049-fe81-4441-983b-b6c82114b741"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserDelete" path="rest/${Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" id="4314b275-2cc6-4662-95d4-c8af507855a6"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE" id="bd0ca0c4-9525-43b9-90ca-e9d09cb7fbff"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="6961de71-6c81-490c-94f4-2f29f24b3231"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="CommonTestSteps" disabled="true" id="6deffdf6-8888-4ac0-bba9-62ac3f5a0a8b"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate API" searchProperties="true" id="11a715f3-fabc-4fee-900a-f24ebd6d9c5a"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="9ce61892-9d8a-4055-b161-e19938292410"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("accountname",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);

tC.setPropertyValue("ResponseType","SUCCESS");

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="4dc8aec7-2e8e-4eef-9a55-46dedaad9403"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);
def callTS = tP.getTestSuiteByName(callTSname);

tP.setPropertyValue("Country",callTS.getPropertyValue("Country"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));



tC.setPropertyValue("AccountDisplayName",callTC.getPropertyValue("AccountDisplayName"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

//Setting New variables for Account User Create
tC.setPropertyValue("AccountDisplayName",callTC.getPropertyValue("AccountDisplayName"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tP.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("User_Country",callTC.getPropertyValue("User_Country"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Generate AccountName" id="b8ba87db-df08-4f36-8c88-c580bb3ec25b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue("AccountName","accname_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="1671024d-d72f-4387-92d2-ba0ce6079396"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import soapUIUtils.soapUIUtils;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def certPath = groovyUtils.projectPath

//Set fileKeyStorePath value 
//log.info "certPath: "+certPath;
//tP.setPropertyValue("certPath",""+certPath);

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="63a3307b-6106-4786-9cd4-e176efd0bf16"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="" sslKeystore="RET_concat.pem" timeout="100000"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account
    xmlns="${#Project#coordinatorSchema}">
    <DisplayName>${#Project#DisplayName}</DisplayName>
    <Country>${#TestCase#Country}</Country>
    <UserList>
        <User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}"
            xmlns="${#Project#coordinatorSchema}"
            xmlns:ns2="http://www.movielabs.com/md"
            xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"
            xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
            <Name>
                <GivenName>${#TestCase#GivenName}</GivenName>
                <SurName>${#TestCase#SurName}</SurName>
            </Name>
            <ContactInfo>
                <PrimaryEmail>
                    <Value>${#TestCase#PrimaryEmail}</Value>
                    <ConfirmationEndpoint>confirmed</ConfirmationEndpoint>
                </PrimaryEmail>
                <AlternateEmail>
                    <Value>${#TestCase#AlternateEmail}</Value>
                </AlternateEmail>
                <Address>
                    <PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
                    <PostalCode>${#TestCase#PostalCode}</PostalCode>
                    <Locality>${#TestCase#Locality}</Locality>
                    <StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
                    <Country>${#TestCase#Country}</Country>
                </Address>
                <TelephoneNumber>
                    <Value>${#TestCase#TelephoneNumber}</Value>
                </TelephoneNumber>
                <MobileTelephoneNumber>
                    <Value>${#TestCase#MobileTelephoneNumber}</Value>
                </MobileTelephoneNumber>
            </ContactInfo>
            <Languages>
                <Language>${#TestCase#Language1}</Language>
            </Languages>
            <!-- <DateOfBirth> depricated </DateOfBirth> --> 	${#TestCase#LegalGuardian} 	
            <Credentials>
                <Username>${#TestCase#UserName}</Username>
                <Password ${#Project#RandomPwdFlag}>${#TestCase#password}</Password>
            </Credentials>
            <UserRecoveryTokens>
                <RecoveryItem>
                    <QuestionID>${#TestCase#QuestionID1}</QuestionID>
                    <QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
                </RecoveryItem>
                <RecoveryItem>
                    <QuestionID>${#TestCase#QuestionID2}</QuestionID>
                    <QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
                </RecoveryItem>
            </UserRecoveryTokens> 	${#TestCase#ResourceStatus} 
        </User>
    </UserList>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="947149be-7bb0-4a3f-9591-1927886d48ad"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="23303af8-41d1-41dc-8fef-fb959f9c4a2f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Validate Response" id="bd82d430-2a93-49e7-b2a1-7b84f0809636"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;


      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO"){
                                
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
          int lastColon = urlStr.lastIndexOf(':');
	     int lastSlash = urlStr.lastIndexOf('/');
	     accountid     = urlStr.substring(lastColon + 1);
	     def node_Account = urlStr.substring(lastSlash + 1);

          tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
                    
          tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);                        
          tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);                                                   
          
      } else {
            assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
            int lastColon = urlStr.lastIndexOf('%3A');
            int lastSlash = urlStr.lastIndexOf('/');
            accountid     = urlStr.substring(lastColon + 3);
            def node_Account = urlStr.substring(lastSlash + 1);

            tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
            
            tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);
		  tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);
      }

} else {
      	assert context.expand( '${#TestCase#httpLocation}') == "";
}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId to the Calling Test Case" id="35d38137-3ff3-47da-9602-9bed11652bbf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("accountname",tC.getPropertyValue("accountname"));
callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
</script></con:config></con:testStep><con:properties><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:17ADB78F7ED85561E0533D991F0A2947/User/urn:dece:userid:org:dece:17ADB78F7ED95561E0533D991F0A2947</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_Firsrt_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\ALL_CODES\Git\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>accountname</con:name><con:value>accname_20150604_015533</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:0E2AEFE2FC963F28E05307991F0AA175</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>User_Country</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value>accountget_firstuser20150604_1433406333842</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>accountget_firstuser20150604_1433406333842</con:value></con:property><con:property><con:name>SurName</con:name><con:value>accountget_firstuser20150604_1433406333842</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value/></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>AccountDisplayName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b8ba87db-df08-4f36-8c88-c580bb3ec25b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ce61892-9d8a-4055-b161-e19938292410</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c50a4409-da80-4892-a2c3-07a22e674bd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd13479c-f25a-495b-8c94-31e5557a93a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountStatusUpdate API" searchProperties="true" id="51ed92e6-c568-4115-881a-88771404b0de"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2842594e-4ff8-47cb-afd9-7d9447bd34b7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1c828cc6-c718-4458-8285-8f3412120ef1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="aec46fe2-046b-4208-9b99-b3f8610a7a8d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountResourceStatusUpdate" id="e434e6ab-627f-454e-a457-6101a23db2bf"><con:settings/><con:config service="AccountResourceStatusUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/ResourceStatus/Current/Update" methodName="ResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore="dececs_concat.pem" id="312591a1-6469-492a-ad63-a2dbaf9dcc87"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bef51ec6-85bf-456b-9ec3-670fd87002cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="518795a7-9465-4ca9-aaa5-d30618461158"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
log.info "errorRespType"+errorRespType;

def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
//String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus   = "HTTP/1.1 303 See Other";
		XMLbodynull        = true;
		processXMLFlag  = false;
		httpLocationHeader = true;
		
	break;

	case "INVALID_STATUS_UPDATE":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;

		case "INVALID_STATUS_UPDATE_ON_USER":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource. - Status requested cannot be applied on the user";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;


	
	case "API_NOT_AUTH":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	//errorReason = "API call not authorized";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NULL_BODY":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "text/xml";
		XMLbodynull        = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "XML_PARSE_ERROR":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorReasonFlag = false;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		//errorReason = "User ID does not match security token";
		errorReason = "The member’s user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;

	
	case "USER_INACTIVE":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	//errorReason = "Requesting User ID Not Specified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		//errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "The requesting member does not have permission to perform this action."
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		//errorReason = "Request Account ID not match";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	case "NO_MNG_USER_CNST":

	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;
	case "TOU_NOT_ACCEPTED":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The account status cannot be modified. - First User has to accept TOU to move the Account to active status";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusCannotBeModified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusCannotBeModified";
	break;

     case "ACCT_INACTIVE":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		//errorReason = "The identified account is not active.";
		errorID     = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

     case "SAME_CURRENT_STATUS":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		//errorReason = "Resource is already in the status requested";
		errorReason = "The resource is already in the requested status.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
     break;

     case "MTHD_NOT_ALLOWED":
     log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		errorReason = "Resource is already in the status requested";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
log.info 'Expected: '+expectHTTPstatus
log.info 'Actual: '+context.expand( '${#TestCase#httpStatus}' )
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	//def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	//assert b.getPath().matches("$errorHost/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;

	    if(errorReasonFlag)
	    {
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;
	    }
		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
} 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.7. Account Status Changed through Resource Update: Account Unlocked [Your UltraViolet account has been unlocked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 303 See Other</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\UsersAPIs\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>status</con:name><con:value>active</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate API" searchProperties="true" id="32279977-861a-426e-81a7-71cea06f5005"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2df40bdd-6cc9-44f1-90c3-1a4151e7cfd7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ETag",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e3a33296-6687-4004-98ad-43216c8953e0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserUpdate"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
			</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="61a1894e-5bca-4a1f-acbe-c5e726a3a6b9"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="c1c25c09-87d7-4c13-a6f4-1abb82fc51b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate" id="1b78c8af-d076-49a8-89ad-96aa23408bda"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<!-- <DateOfBirth> depricated </DateOfBirth> -->
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
<!--		<Password>${#TestCase#password}</Password>-->
	</Credentials>
<!--	${#TestCase#ResourceStatus}-->
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="41ca1f7d-5625-4f51-8ca4-25567c822ce4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="f2bf8bc6-5e0d-41ba-b6c2-bfdc1e394e92"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "USER_PRIVILEGE_CANNOT_BE_CHANGED":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UserPrivilegeCannotBeChanged";
	errorReason ="The member's permission level cannot be changed.";
	errorLink   ="$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeCannotBeChanged";
	break;

	case "NOT_ALLOWED_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateUserInformation";
	errorReason = "The requesting member cannot update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserInformation"
	break;

	case "REQUESTOR_PRIVILEGE_INSUFFICIENT_TO_UPDATE_USER_CLASS":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID :org:dece:RequestorPrivilegeInsufficientToUpdateUserClass";
	errorReason = "The requesting member does not have permission to change the member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToUpdateUserClass"
	break;

	case "COUNTRY_CANNOT_BE_CHANGED_ONCE_SET":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:CountryCannotBeChangedOnceSet";
	errorReason = "The country cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CountryCannotBeChangedOnceSet"
	break;

	case "UNAUTH_CLG_CHANGE":
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UnauthorizedCLGChangeInRequest";
	errorReason = "The connected legal guardian (CLG) change request is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UnauthorizedCLGChangeInRequest";
	break;
	
	case "UNAUTH_NODE_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:NodeUnauthorizedToUpdateUserInformation";
	errorReason = "The node is not authorized to update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation"
	break;

	
	case "REQUESTOR_NOT_ALLOWED_TO_UPDATE_OTHER_USERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

	case "INVALID_STATUS":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "FULL_ACCESS_USER_MUST_BE_18_OR_OLDER":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:A full-access member must be 18 or older";
	errorReason = "A full-access member must be 18 or older.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;

	case "LAST_FULL_ACCESS_USER_CANNOT_BE_DEMOTED_TO_STANDARD_OR_BASIC_PRIVILGE":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege";
	errorReason = "The permission level of the last remaining full-access member in an account cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege"
	break;


	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "DOB_NOT_EDITABLE":
	XMLbodynull     = false;
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID  =  "urn:dece:errorid:org:dece:DateOfBirthNotEditable";
	errorReason = "A member's date of birth cannot be changed.";
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
     errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#DateOfBirthNotEditable" ;
	break;



	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NOT_ALLOWED_TO_UPDATE_ACS_LEVEL":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorid:org:dece:RequestorNotAllowedToUpdateUserAccessLevel";
	errorReason = "The requesting member cannot update a member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserAccessLevel"
   break;


	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "NOT_ALLOWED_TO_UPDATE_OTHERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
/*
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		//assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		//assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	}
} </script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>UNAUTH_NODE_TO_UPDATE_INFO</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:NodeUnauthorizedToUpdateUserInformation">
      <Reason Language="en">The node is not authorized to update member information.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">848</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02012_UserUpdate_FUNC_CHILD_Update_CHILD_Access 400 Bad Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_GeoProfile_CS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19E24F0C476894EE0401F0A05992542</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-08-19</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>UserName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E40D520098B5CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E26875D79D093C60E0401F0A05996273</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E40D520099C8CC89E0401F0A079901AE"</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-03</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-08-16</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Get_API" searchProperties="true" id="cacb2fcd-1bef-4e8b-ad7e-32941fd262fd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="13ed78eb-2ef5-49c2-8928-b781b8b5af4c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="2da08880-9621-4c99-bb72-a05db9926419"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep.name]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet" id="0a35dbf2-9159-44f6-ad92-92198b59d2b6"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet" mediaType="application/xml" sslKeystore="RET_2_concat.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="648c8b18-139e-414a-9886-48bfa4f700e2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

tC.setPropertyValue("ETag", ETag);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="46d94cac-1e0c-439c-a664-6dcacbd493b4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseTypeAccountGet}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		//XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;


	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//  -- Comment for cache issue


//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
	log.info "myXML  "+ myXML;
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	else {
		//assert myXML.Account.size() == 1;
		assert myXML.DisplayName.size() == 1;
		assert myXML.Country.size() == 1;
		assert myXML.RightsLockerID.size() == 1;
// Removed the Stream Count validation as part of the COORD - 2288 Fix - Kalyan Ineni 11/14/2014		
//		assert myXML.ActiveStreamCount == 0;
//		assert myXML.AvailableStreams == 12;
		assert myXML.UserList.size() == 1;
		assert myXML.UserList.UserReference.size().toString() > 0;
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.@CreatedBy.size() == 1;
		assert myXML.ResourceStatus.Current.@CreationDate.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;

	     if(context.expand( '${#TestCase#CS}') == 'Y')
	     {
	     	log.info "CustomerSupport"
	       assert myXML.ResourceStatus.History.size() == 1;
	     }
	}
} 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return_ETag_to_Calling_TestCase" id="3c193123-be70-4eea-988c-07e25df3eee6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("ETag",tC.getPropertyValue("ETag"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Account AccountID="urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED" xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>ucr5_accname_20150604_034757</DisplayName>
   <Country>US</Country>
   <RightsLockerID>urn:dece:rightslockerid:org:dece:17AF38AAF30C61C7E05305991F0A7EED</RightsLockerID>
   <UserList>
      <UserReference>urn:dece:userid:org:dece:17AF38AAF30461C7E05305991F0A7EED</UserReference>
      <UserReference>urn:dece:userid:org:dece:17AF38AAF35A61C7E05305991F0A7EED</UserReference>
   </UserList>
   <ResourceStatus>
      <Current CreationDate="2015-06-04T10:14:34.021Z" CreatedBy="urn:dece:org:org:dece:RET_2" ModificationDate="2015-06-04T10:14:45.664Z" ModifiedBy="urn:dece:org:org:dece:RET_2">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping Account Status to active</Description>
      </Current>
   </ResourceStatus>
</Account>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_03002_AccountGet_FUNC_NonCS_User_Access_Standard_200_OK_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountGet_FUNC_NonCS_P1</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130618_082841</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZtU+o6EP4rTP3olLTltR1hhoN4RdGjgBz1ixPSbYm0KTZpAX/9SQpUQPBy7xeY3W52n33Jk73gOAwsp8U5xIJGrLAIA8adTNvQkpg5EeaUOwyHwB1BnEHrrudYRcPBmyNaoXvZ0N7qpXG17GFbrxhuXS+XqqaObajpRrUGtfrY9mqmJ005T6DLuMBMNDTLMCvSQDfKQ9NwzLJTKRUtu/qqFUYQc+lbmhQNbQ1qwRvaRIiZg9B8Pi/OS8Uo9pFlGCZ6vusNyARCrDUvVhllgeLm2p4UXSAQBKRIohBdoB2bC5c7A+ozLJIY1rHcY7EMZNhI2ric+mdafhbcLvOiTGxjFjFKcEA/sarPHYhJ5BZagR/FVEzCo0mYhnKsw4LoxCyzMw3tQjvR0Q7CmGOdT7C59tUHD2JgBApP/W5DOzuta9nRYYwZ96I45Lvif8MDLIUgmoGr801aa2inOzxQqeYFEKfLSJBwmsK9GtYZJsDX3QRyuqvCQwweXfQolwO64Aod2oa3J66qcUl94OL/NGirOSsnIxwk0Pyz8FHNR0t6fXNHAHlX/rtf7j6VS/5TIwOwbZwp8tauxL2hzIdodeKx/lhyZ+EfeLkZmebw3A577/R6+nGdkIfyc0889zrWjX3nkvuH8/GyH0TDkKRkOWi3e1evUed2NH4QvbQ3X56fx2WvXRe/zkcwfS3fVv9xl4vH6WffLJ3fvI5dXrPSj2n4clVbWk/d6i3zOh3/Je22pk9j08YfC282qtxbQzR/Hz6Q4C4euvVP28Ot9BV5NqrOSSNPZwv/rm5z5wfJ+B2I2IhqDLqXhSvZJSx+JjOloa7uZabOTJEPF8CE1lSnFHc4iaQ76jqyhyvZrLWuSvWW/Km0qma71jEqJaNi2+aV0ap1Opcbklmh2IPYjphHVSxFuaux+RkgCR0OzIVYT6NEMh3XfvB4iQUudFlfXoKIcRhGkp7NmTkl8ziY2FPLNE1vQQO3YpLq1NYK95H4zX7HLU9AvEvKpR1S7gOhMwqKudVgcznZXMhifOA0EYFZTHGRQSK5PVY061jlegVxGs4CUFBRGLlJAMXZZJaVBvHVv6VjwjNtvzN8s7ILdzS1/W+bKkgblyoDrrL5BbKTcOB9KW9SOZ5ydTvljftW4lJ1t2RJRUzJCsnup69JUSOSj4nKqT14sza4c/PTjx84i36AhfYrkodyU7oVePN+y5dAckdz09EPXPwoJmmaZD2sGYaFYukeqRohKQyAJJLdlsNoCgzlXtBJT0kOfC94rt+FmIgJGwgsIJRDV8jEE3aHAXC1O3TldVmcupjshJSlE7AQh3TtQO49CvGPqxFxiLKT6gf5N49i96tjB3xtxZF5ytVBUOYrST0jyyOTQSLplkoCjOJt54ccHAq+q8yLnGMRcqDGiYDjXwqK2RoaJiRKmOheaplim20znGI5A+fL6JubjNDzDY/++4qn02wECMi9kNPMv3qoHXUFmL/F2Ough0nbKP1E2rvomt/U3zVbddqf8eZf</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\Certs\QALP2/RET_2_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>ResponseTypeAccountGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"17AF5FD8E6E34D7AE05307991F0A7CC5:91A789D"</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E763CEDB3CA1FFCEE0401F0A07991BDA</con:value></con:property><con:property><con:name>CS</con:name><con:value>N</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete_API" searchProperties="true" id="50689f7a-271a-48af-ac58-51a00dcf25e1"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cf3b865a-29ea-477d-b95b-c43f031f13b6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="efdeccdb-6452-4757-8742-168412fcf27b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep.name]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" id="7dfbf775-9a67-431b-bdda-786ea95cc0e0"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" sslKeystore="dececs_concat.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="IF-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="e33b673a-0ef4-4681-bc6f-abfbbf10e33c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="aa74adfe-6f1a-4eb3-8891-56556b47f6c0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseTypeAccountDelete}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) 
{
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
     

     
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="994b0b7c-056a-4649-b6ae-cf79663574ee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def responseTypeAccountDelete = context.expand( '${#TestCase#ResponseTypeAccountDelete}' )
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:token_rejected">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E8C6CD5926943BF7E0401F0A05991D7F</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">670</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZdc9o6EH3vr/A4jx3jDwzYnsCMgdA4TQgF0qZ5uSPkNSixZWLJfOTXX8nEDlCSm94nj9ar3bO7R0c6ZyiJLc9nDDJOUqoE/bb6T2SFUWTXbc2xkKvZTUCaM3Mdrdms12emO7MaZktVAsZyCCjjiPK2ahlmXTMNzWxMTdOzLK9h1uqu86AqPyFjIrRwqRmqskliyrwibVvNM+qliBHmUZQA8zj2Jv7NtSc8PVRiUjvnO5RFwqyz4Hzp6TquhYAhjnENp4l+rh/4nIfMm5A5RTzP4DVnyNrq6971el1b12tpNtctwzB0w9WFT8jI/EztfCk3QxjQKN2te4imlGAUkxckQd0AX6Sh4sfzNCN8kbwT2tRNQ4bWYIM1bNr0TNXfEhToPhnpAGTGkMYWyCyDjSGCDCgG5W4ctNWzz01wt3eaIcqiNEvY0frvIAFdQZwuIdRYWVmJ7vMRT7Srcw7YCyiOc0ZWMJQ0WSIMTBllEJHNNWGCfCFTivErG1YyDPDfjORc38cpYOsnOtMnc2D8/8xrf1a7KD9RnENn4vYD4+HeTxbd+Pb29+Uv6zpuPdy35vOLdgFh33kHqhr16/qYqBWvXjcFQRYNppeNRrB96a5m973tL8GeIBn1r+6vBl9zY0Ef47E9Nu511wFiOS/DxvD74133xl7Ho3D6DY97veHX/MrZwBd9uHoZcAC8XnXn3fzZuKTXo9l48iOJk28vjWb3MQ/8Ga3/vpnZ221z0IrZuvfyVB89PDTcyeZq9GThzYr8iJ7uoi8wTL9d9vlgccOM39vw2URO+62m/RoOjaUcTPLZI2BeLiU1gr4yEPNC/GNpkRYSalHh6i2lPjEOlKsduUvKipcL8SGhJ4a5W184vWav33Ctpu/Uu4PWhWEb5sDwjYbrmv3WoNSfHYojiL2URkTmkgq748/HAHHiMaAhZNoqzfECmPpBxD7iSAnoWByMlDKYpkLBfcvyzXqvN+j6XbNlObbpuAJu1zD9fr9r9FVlmPJbepv5EYfsUL3tA/UeAyZLAlLiJc+ZIDrjoiXPaJXz2KytUI1CLi6BTOqwZ9lOQ2ckWcYgAetJGuYx1JaLZdEgne2+loYwK6zji2lx/t4t7/hf2QnhExLpwGQtXRDThBPXkF0W8n7Brf2Cy/B+HhJ5zERbeUbwDsnhrze2SJpUVBEVlZArz2PDQVT9uKAqUbgiuOJ7dUkLjRcq0CnH8Yxqz7V8tcqLAbSkwmUivG7qRkufAM6FTG2n6RNQvQqhf+qGqFAfZa7sh/hyvqATjjgkgi5KsfzE82ACTD4PAkH3zWffHgcpRd84bPgpWy8WrwiJ+MOHBvaw9BPmkfis0yx8G9eJWHt5RJ3iTcAJncuVvA+275ACpyIsEQKWZvvBTwU4lfzQWDW5wsIFm2Y5h/f/KFKZ2irCOM0pD6QCCMO+WhY4+XYJ3pvTH2EKRX69Yjfs3Sv2/uZ6InQrQWrlS/7bWSMFXTCIXYwUWNrqRrwWRXI631PnV4CnBdq1PxLow0o6f5j/tOz19Pg8dP4F</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/dececs_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00018_AccountGET_PERM_API_Invocation_from_a_DECE_CS_P0</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountGet_PERM</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:E8C6CD5926943BF7E0401F0A05991D7F</con:value></con:property><con:property><con:name>ResponseTypeAccountDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_DB_Validations" searchProperties="true" id="1cc8c7f1-8717-461e-801a-f31149324c32"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="43c5dbf9-3574-4373-9d3f-f1b49a7247c5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("user_oid",null);
tC.setPropertyValue("account_oid",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="c50fe2d3-1534-4f7d-94a8-bf12161b0236"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserUpdate"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_ACCOUNT_USER_Table" id="01831dcd-e7f2-4900-9668-eaaf97116e9b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("IsMinor","");

def dbHost = context.expand( '${#Project#targetSystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

def BirthDate = null;
def myXML1 = null;
def finalbday = null;

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

Result = b.userGetRow(userID);

myXML1 = new XmlSlurper().parseText(Result);

log.info "Actual Rows ==  " + myXML1.ResultSet.Row.size();
		
 if(context.expand( '${#TestCase#ResponseType}')=='SUCCESS')
     {
        assert  myXML1.ResultSet.Row.size() == 1;
       	
       // assert myXML1.ResultSet.Row.STATUS == 'pending';
        assert myXML1.ResultSet.Row.PRIVILEGE == context.expand( '${#TestCase#Privilege}' );
        assert myXML1.ResultSet.Row.USERNAME == context.expand( '${#TestCase#UserName}' ) ;
        assert myXML1.ResultSet.Row.GIVEN_NAME == context.expand( '${#TestCase#GivenName}' ) ;
        assert myXML1.ResultSet.Row.SURNAME == context.expand( '${#TestCase#SurName}' ) ;
        assert myXML1.ResultSet.Row.PRIMARY_EMAIL == context.expand( '${#TestCase#PrimaryEmail}' ) ;
        assert myXML1.ResultSet.Row.TELEPHONE == context.expand( '${#TestCase#TelephoneNumber}' ) ;
        assert myXML1.ResultSet.Row.MOBILE_TELEPHONE == context.expand( '${#TestCase#MobileTelephoneNumber}' ) ;

        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#CHILD_DOB_XML}' ))
        {

        	 log.info "I am CHILD";
        	 
           BirthDate = context.expand( '${#Project#CHILD_DOB_XML}' );
           assert myXML1.ResultSet.Row.AGE_CLASS == 'CHILD';

           tC.setPropertyValue("IsMinor","true");
           
         //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
         //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;        
        } 
       
        else
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#YOUTH_DOB_XML}' ))
        {
        	log.info "I am YOUTH";
        	
          BirthDate = context.expand( '${#Project#YOUTH_DOB_XML}' );
          assert myXML1.ResultSet.Row.AGE_CLASS == 'YOUTH';

          tC.setPropertyValue("IsMinor","true");

                    
        //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
        //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;

         } 
        else
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#ADULT_DOB_XML}' ))
        {

        	log.info "I am ADULT";
        	
          BirthDate = context.expand( '${#Project#ADULT_DOB_XML}' );
          
          assert myXML1.ResultSet.Row.AGE_CLASS == 'ADULT';

          tC.setPropertyValue("IsMinor","false");
          
        /* if(context.expand( '${#TestCase#attested}' ) == 'true')
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
          }
          else
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME != 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME != 'null' ;	
          }
          */ 
        } 

          // Retrieving Birth Date in proper format
 /******************************************************************************************************/
          
         bdaystring = myXML1.ResultSet.Row.BIRTH_DATE.toString();

         int lastspace = bdaystring.lastIndexOf(' ');

         finalbday = bdaystring.substring(0,lastspace);
          
         log.info "Birth Day:  " + finalbday;
       
        assert finalbday == BirthDate;

/******************************************************************************************************/

        assert myXML1.ResultSet.Row.COUNTRY == context.expand( '${#Project#GeoProfile}' );

        if(context.expand( '${#TestCase#attested}' ) == 'true')
        {
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_DATE != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ENTY != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ID != null ;
        }  

      log.info "User Validations Passed";
               
   }// end if for success response check
  else
  {
  	assert  myXML1.ResultSet.Row.size() == 0;
  	log.info "No Validation Required";
  }
  

   
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_NODE_USER_Table" id="646f252a-1208-41ee-b592-29898615c1ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def dbHost = context.expand( '${#Project#targetSystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );
def nodeid =context.expand('${#TestCase#nodeid}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c=  new dbUtils.dbNode(log,dbHost);
//log.info b.accountGetfromNodeAccountId(accID);

String sql = """select to_char(rawtohex(NODE_OID)) NODE_OID from NODE_USER where USER_OID = '$userID'""";

log.info sql;

results = a.SelectFromDB(sql,dbHost);

log.info results;

/*
*  If zero length, no need to continue;
*/
 assert results.length() > 0;

  def myXML = new XmlSlurper().parseText(results);
  
  log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";


if (context.expand( '${#TestCase#ResponseType}' ) == 'SUCCESS')
{
	assert myXML.ResultSet.Row.size() > 0;


	if(nodeid=="dece:cs"|| nodeid=="coord:cs" || nodeid=="portal" || nodeid=="portal:cs")
     {  
       assert myXML.ResultSet.Row.size() == 4;  
       //assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 
       log.info "DECE Node User Validation Passed";     
     }
     else
     { 
       assert myXML.ResultSet.Row.size() == 5;
      // assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' );    
      // assert myXML.ResultSet.Row[1].NODE_OID == "10"; 
       log.info "3rd Party Node User Validation Passed";    
     }
	
}
else
{
	assert myXML.ResultSet.Row.size() == 0;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_LEGAL_GUARDIAN_Table" id="c2556cd7-c040-4e74-899c-dd36e9895fad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if(context.expand( '${#TestCase#IsMinor}' )=="true")
{
def dbHost = context.expand( '${#Project#targetSystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

  a = new dbUtils.dbUtils(log,dbHost);
  b = new dbUtils.dbUser(log,dbHost);

  String sql = """select ATTESTATION_STATUS from USER_LEGAL_GUARDIAN where USER_OID ='$userID'""";
  results = a.SelectFromDB(sql,dbHost);

  /*
  *  If zero length, no need to continue;
  */
   assert results.length() > 0;

   def myXML = new XmlSlurper().parseText(results);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;
	
   assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  

   log.info "Legal Guardian Validation Passed";	
}
else
{
	log.info "No Legal Guardian Validation Required";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_Policies" id="14df3c78-1881-4452-ae4b-ee45fc2dba4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if(context.expand( '${#TestCase#IsMinor}' )=="true")
{
def dbHost = context.expand( '${#Project#targetSystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

  a = new dbUtils.dbUtils(log,dbHost);
  b = new dbUtils.dbUser(log,dbHost);

  String sql = """select POLICY_CLASS,STATUS from POLICY P, POLICY_RELATIONSHIP PR where PR.POLICY_ACTOR = '"""+b.userGetfromNodeUserId(userID)+"""'
  and P.POLICY_OID = PR.POLICY_OID""";

  results = a.SelectFromDB(sql,dbHost);

  /*
  *  If zero length, no need to continue;
  */
   assert results.length() > 0;

   def myXML = new XmlSlurper().parseText(results);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;
	
   assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  

   log.info "Legal Guardian Validation Passed";	
}
else
{
	log.info "No Legal Guardian Validation Required";
}
</script></con:config></con:testStep><con:properties><con:property><con:name>IsMinor</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00004_UserUpdate_FUNC_CLG_Update_CHILD_DOB_TO_YOUTH_AGE</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_GeoProfile</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>Username</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>DOB_NOT_EDITABLE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE3CF68DF2A8CD783E0401F0A07994C97</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E3CF68DF2A8CD783E0401F0A07994C97</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid1</con:name><con:value>E2A349A2ABBCCB1DE0401F0A059926E1</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E3CF68DF2A8DD783E0401F0A07994C97</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E3CF692D5BE44697E0401F0A05993AD3</con:value></con:property><con:property><con:name>attested</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate API" searchProperties="true" id="0559683a-89a8-4543-9672-06581fc3aece"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="57a6b4c1-0694-446e-8f36-05e83c7ce9d8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("user_oid1",null);
tC.setPropertyValue("account_oid",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("ResponseType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d1c7a146-8d82-464f-a13c-88e5647b362d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid1",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="6bfca67d-bde1-48a1-ac3c-4f55e0fb1152"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");             
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="d83a7aa0-a338-4337-bd80-8a6555265525"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="0bddecd5-3dd5-46cb-98f9-531d8470ab22"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="aab8ec9a-8cff-464f-b18c-8b486a4797ee"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#Request_XML}</con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Copy of User_Create" id="6afcd2ee-d125-48d3-86d9-0b8f90dcad31" disabled="true"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Copy of User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="2abf2393-ce0f-441d-971f-702ed3d9b454"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}"
	xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"
	xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<!-- <DateOfBirth> depricated </DateOfBirth> -->
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	${#TestCase#ResourceStatus}
</User>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="0d5f80a7-2de4-498f-ae54-f37855d409a6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="81aa2acc-00f2-4213-83b4-8d8b8a3892bf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
def primaryEmail = context.expand( '${#TestCase#PrimaryEmail}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/

if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
		expectHTTPconnection = "close";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
		expectHTTPconnection = "close";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
		expectHTTPconnection = "close";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
		errorReason = "First User must be 18 years or older";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first user in a household account must be a full-access user.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;

	case "INVALID_PASSWORD":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The password is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid. - " + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
		expectHTTPconnection = "close";
	break;
	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);


// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO"){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info errorLink;
		log.info myXML.Error.ErrorLink.toString()
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID" id="634c2e6f-087e-4579-9cce-60d8b6645b9e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {  	
  		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                 String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName").toLowerCase());
		                 String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName").toLowerCase())
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                 tC.setPropertyValue("ACCOUNT_OID", a);
		                }
		          catch(Throwable e) {
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		     		     }
				}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the Username and NodeUserId to the Calling Test Case" id="36b6711f-6cce-40c3-b9aa-ddc166e106d4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL1"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("user_oid1",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Account_Create_Firsrt_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>UserName</con:name><con:value>accountget_firstuser20150203_1422948300712</con:value></con:property><con:property><con:name>GivenName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SurName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1996-02-08</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E2AF005E34C3EA4E05307991F0A0DE6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0E2AF005E34C3EA4E05307991F0A0DE6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E2AEFE2FC963F28E05307991F0AA175</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E2AEFE2FC963F28E05307991F0AA175</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>account_oid</con:name><con:value>0E2AEFE2FC973F28E05307991F0AA175</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:0E2AEFE2FC963F28E05307991F0AA175/User/urn:dece:userid:org:dece:0E2AF005E34C3EA4E05307991F0A0DE6</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1996-02-08</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:0E2AF005E34C3EA4E05307991F0A0DE6</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>0E2AF005E34D3EA4E05307991F0A0DE6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6afcd2ee-d125-48d3-86d9-0b8f90dcad31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate API" searchProperties="true" id="30aefa36-5265-4855-8432-a953e41b8771"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cc7ab515-dee1-4301-a271-69c0066d67df"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);

tC.setPropertyValue("Country",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");

//def request_XML_Buffer = context.expand( '${#Project#Request_XML_Buffer}' )

//tP.setPropertyValue("Request_XML",request_XML_Buffer);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="815bff3b-842a-4070-86bb-cece5b19c7a8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));


tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="f23d9bb0-0bd1-4723-928b-a9c1d99c147f"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
	{
		tP.setPropertyValue("GeoProfile","US");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="CA")
	{
		tP.setPropertyValue("GeoProfile","CA");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="GB")
	{
		tP.setPropertyValue("GeoProfile","GB");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AU")
	{
		tP.setPropertyValue("GeoProfile","AU");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="NZ")
	{
		tP.setPropertyValue("GeoProfile","NZ");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="IE")
	{
		tP.setPropertyValue("GeoProfile","IE");             
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AT")
	{
		tP.setPropertyValue("GeoProfile","AT");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="DE")
	{
		tP.setPropertyValue("GeoProfile","DE");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="CH")
	{
		tP.setPropertyValue("GeoProfile","CH");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="FR")
	{
		tP.setPropertyValue("GeoProfile","FR");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("CHILD_MAX_AGE","17");
	}


	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
		log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("MeetsAgeOfMajority","true");
	break;

	case "YOUTH":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
		log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("MeetsAgeOfMajority","false");
	break;

	case "CHILD":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
		log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("MeetsAgeOfMajority","false");
	break;

	default:
		log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="5aec259f-6efc-4047-958a-f404549b66a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="bdbb05a4-3195-40a4-a273-e98edb919cda"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_2_concat.pem" id="e47fe2c9-5f60-44db-8704-e78a70dc5b4e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#Request_XML}
</con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bc996057-be4c-4bee-a9ac-43bd22a866c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="b31e8838-e244-4a70-b23e-27ecedeb39ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

          case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO")
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID" id="95f3189f-715e-4cef-bc91-14a1b4138b68"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName").toLowerCase());
		                //String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName").toLowerCase());
		
		                 assert u.length() > 0;
		                 //assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                //tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="419e9428-03d9-4db9-8ef2-4eaee630ffe1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_API</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>UserName</con:name><con:value>AcountDelete_20150604_1433413092260</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>AcountDelete_20150604_1433413092260</con:value></con:property><con:property><con:name>SurName</con:name><con:value>AcountDelete_20150604_1433413092260</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value/></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1996-06-08</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa2.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED/User/urn:dece:userid:org:dece:17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTM/HM6UvQJGOMIOCyhH1aNGjfnFCuoVIm5QmQTi//iYFKiB4ufcLzG43u8++5MmecpTErt/mHDJBGC3Nk5hyP9c2DZlRnyFOuE9RAtwX2A/aN33fLds+Wh8xSr1O03hzhrUoQmFkek4FzKqL6uYwwnUzgsbQjcIIOSeuMuVcQo9ygahoGq7t1EzbM+3qwLF9p+pX3XLVrb8apSfIuPKtTMq2sQI1501jLETqW9bHx0f5o1Jm2chybduxnm/6AR5DgozW6TKjPFDWWtnjcggY4hiXMUusU2vL5jTkfkBGFAmZwSpWeCiWbdkNS9mEnIx+GMVZCHs0Yrl4jiijBKOY/EW6PjcgxiwsteMRy4gYJweTcGzt2IQ5NrFTpT8MaxvakY62EGYcmXyMnJWvB4ggA4qh9PjQaxo/jutafnSQIcojliV8W/xveIDOIGYphCZfp7WCdrzDPZVqnQL2exTHkpMZ3OphTREGvuom4ONdlX5nEJF5n3A1oHOu0Vmb8HbEZTU6ZARc/J8GbTRn6eQJxRJa42fxfMk476XQja/ofXfoDJ487twuWDMHsGmcK4rWLsWdoSyGaHni7ummPvAcR0wiUbV/TRey8YTr7Hn67KCbRXD7Z3R5df3T8d5PhowGz0m3Npukj+2xDM4yt/Jnga7aZ6PAc3H0cl65vL9fdBoeiHvr+sG+mATT+8Y4QZXX+tyxzl4uerPF610/uJtUbtqXj6/kV9dL6gs7eJmmP2fy7n6SvDauP0j/isWy5w7sfkpG+KpyxaJh55o3i3Q28G/r1nc+kMN3wGIt6jHodUoXqktIfE9mWkNCM8pN/VSTDxdAhdHSpzR3+FLRHQl91cOl7NTbF5WTtvqxq55zXu/atYpdazScC7td73Y7a5JZotiBeM5oRHQsTbnLsfkeIE58DjSEzJwxqZiOG9947CCBSj36oC4BoxwGTNOzl5K5l0y8Exlyr+a9g5zK4cwzSrdM3NG7rB0JyLYpubJFyQ+ASUpA87Yea67mmgtViimaSRE75RkqU5CK2TNNsr5bPalZnCRpDBqolbBQxlBOx2leGIsv/10TYZ5rH7qDNze/bgcT2/22roGyCYk24DqbM1B9hD2vS2WdyuGUvc2U1+7bMiT6ZqmCiozgJZLtT59zogekGBKd03nw5q5xF+bHH99z1voGlrVbkSJUOCMbgdevt3oHFHO01h2dovK0LGczmfewbtuulSn3lq6RpYQAsFTcthiwCVCr8GId9ZAUwHeCF/ptiFKMaSCQgEQNXSkXj9gcAuB6c+ipyzI/di3ZCqlKJ2Au9unOY7X1aMTfLkbYx9pOqX+rvw+WhZ8d2+NrI47KUy0OgtCRlvQjsjgwGZgpt0TRH8s2ne9zsC/4trIocoFFqIEaSgGHv5Q0rzUNhDGTVPQ6Rq7Y5Nocp1ik4H8afXGT03mx35F/X/BMko8ABrUVcpL718+0r68AHW3w9SroAcqufEfZ2+haX9RfNRt12p3x1j8=</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1996-06-08</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\Certs\QALP2/RET_2_concat.pem</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>17AF38AAF35B61C7E05305991F0A7EED</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f23d9bb0-0bd1-4723-928b-a9c1d99c147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Child_UserCreate API" searchProperties="true" id="590b402e-4d94-4c2b-a26d-a4d3267a4ef0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f27028f3-2af9-46ac-a1de-e4256a56b696"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d5b51071-2ee3-4d2b-9d9f-bc6a6ac92aee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="50763b73-9049-4b58-a596-22b9c44d28ce"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
	{
		tP.setPropertyValue("GeoProfile","US");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="CA")
	{
		tP.setPropertyValue("GeoProfile","CA");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="GB")
	{
		tP.setPropertyValue("GeoProfile","GB");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AU")
	{
		tP.setPropertyValue("GeoProfile","AU");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="NZ")
	{
		tP.setPropertyValue("GeoProfile","NZ");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="IE")
	{
		tP.setPropertyValue("GeoProfile","IE");             
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AT")
	{
		tP.setPropertyValue("GeoProfile","AT");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="DE")
	{
		tP.setPropertyValue("GeoProfile","DE");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="CH")
	{
		tP.setPropertyValue("GeoProfile","CH");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="FR")
	{
		tP.setPropertyValue("GeoProfile","FR");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("CHILD_MAX_AGE","17");
	}


	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
		log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
		log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
		log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "AdultPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "ADULTMinus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHPlus":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob); 
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHMinus":   	
	   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("CHILD_DOB_XML",dob); 
	break;

	case "ADULTToday":	 
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "YOUTHToday":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob); 
	break;

	default:
		log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="e60197f4-457a-471d-9c07-8c2288d7ab27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="de24c3ce-5f05-4e09-b55f-cc972dd6ed20"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="e175d2eb-0c0a-4ad3-8614-2e70a81eaf96"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<!-- <DateOfBirth> depricated </DateOfBirth> -->
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	${#TestCase#ResourceStatus}
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="03a76851-c6af-43f8-9a56-27b1c0fbd654"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="db9995f9-2d03-4edc-a7b5-1a27806f9df4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

          case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO")
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID" id="6560a526-a158-4680-bb3e-7becdd8e8e22"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName").toLowerCase());
		                String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName").toLowerCase());
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="3cb92131-dcff-4db9-b779-7d67fa6de2d7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));

//callTC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
//callTC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL2"));
//callTC.setPropertyValue("UserName2",tC.getPropertyValue("UserName"));
//callTC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true" id="2b0912aa-5f74-432f-b079-69e9e921e8a9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO"){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E5A158E8FAED7930E0401F0A0599188B</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E5A158BFEF210675E0401F0A07992D42/User/urn:dece:userid:org:dece:E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5A158BFEF210675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E5A158BFEF210675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E5A158E8FAED7930E0401F0A0599188B</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E56665ABC808DB00E0401F0A07993371</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_GeoProfile</con:value></con:property><con:property><con:name>StandardUserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00033_UserCreate_AUTH_Creator_ADULT_Full_New_CHILD_Standard_201_CREATED_P1</con:value></con:property><con:property><con:name>UC_RequestBody_Mandatory</con:name><con:value/></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5A158BFF59D0675E0401F0A07992D42</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f23d9bb0-0bd1-4723-928b-a9c1d99c147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet" searchProperties="true" id="18d6dbdf-5594-4023-8f59-664e83628798"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="40b51506-e7ed-484f-9cef-144c355c10b8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="0e921030-fc0e-4088-8519-d2ea05acede9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("UserGetResponseType"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="8dac2685-8684-45a7-9383-18906924bc23"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGET" id="9edfc5bd-e710-4adb-a343-f24a81968540"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGET" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="5be437dd-519a-4ddb-9991-82608accc06d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGET');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="a34e05a2-007f-4659-9d23-4e5f076e5223"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                //errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 

//
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_14015 - STSCreate - Portal:CS - unamepasswd - User created by node RTL - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>4_STS Create - Node Role - CREATED_BY_NODE_OID</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC2F5A7DCFDE454AE0401F0A0799394E</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserStatusUpdate API" searchProperties="true" id="19cc486a-a16d-4ec8-86ef-9f451f07ebed"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="46e67ffd-7362-4e1c-a502-21e353b9227c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="277c6a80-14fb-4da5-bd51-3f2ccc23180d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="11565952-3245-4993-9a90-b45b77daa42f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserResourceStatusUpdate" id="aa2ec204-f680-47ad-98fb-51d2d96fbf59"><con:settings/><con:config service="UserResourceStatusUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" methodName="UserResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore="" id="2f6ba7f7-d899-4cc8-a734-833e78c74cf4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="367744f1-376f-4646-9264-0e788eced0b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="e8904455-2076-49b1-9371-9836b5d0c1cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                //errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 

//
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.15. User Status Changed through Resource Update: User Locked [Your UltraViolet membership has been locked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>859</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:InvocationPathHasNonEncodedParameters">
      <Reason Language="en">The parameters in the invocation path must be escape-encoded.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DF7C3C9C94E2F31EE0401F0A07992917/User/urn:dece:userid:org:dece:DF7C3E49DCFC8E50E0401F0A05995F38/ResourceStatus/Current/Update</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#InvocationPathHasNonEncodedParameters</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>status</con:name><con:value>blocked</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_API" searchProperties="true" id="3ad94f34-6a5c-418b-b8f8-a203cab10bc0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a41d2cef-51b0-46b7-b40c-1d6923e3263d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e0e1fe9a-79d7-42ce-8931-9ee2304fe307"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserDelete"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));

			</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="dc69f304-d0b1-4059-89ba-47e13860aae8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserDelete" id="f64f1781-9c0e-4af0-98c4-96319bba32ff"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="DeleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserDelete" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="iscportalcs1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="1e9ae371-1bd0-4759-940c-81391e47aabd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserDelete');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="fc5935eb-e5d0-495a-bb33-6346b3b9fdb4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

     
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true" id="ffb7d87f-5213-4536-a1b4-773bf47f9502"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                //errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 

//
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00038_UserDelete_FUNC_CS_Basic_Delete_Full_200_OK_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_Access_Portal_CS</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/iscportalcs1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF8026914382E445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF802691433EE445E0401F0A05996AFB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E52C7B2598AE766FE0401F0A079940DB:4917B200"</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FullUserUpdate API" searchProperties="true" id="7862a908-a45a-4b81-bc0e-801e8e24856e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e8e7711f-eb52-4a17-984b-8a6a0236e395"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="fc0f6904-5506-463b-adf0-9309f4db6c7a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="15098d07-3e28-4bd9-8ce6-eddc712c561b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="02239d7c-1ce6-4d58-9ae0-6470a8e1e472"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate" id="a1716223-f6c8-4dc3-856d-e8679a537744"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="3af7e03a-0317-48f5-92bd-e35a465a120e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5d887a92-965a-45ab-ab45-7daaea74c225"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                //errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 

//
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.21. User Email Address Changed by Another User [Your UltraViolet email address has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-06-24</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>UserName</con:name><con:value>fullusername_20130619_072217</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CLGTransfer" searchProperties="true" id="9d562b4c-2b21-4e4b-9dee-ea86ba8721ce"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b6c59ddd-f128-45cc-acc1-fcb9c7601c10"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d2122245-f595-48c8-b54c-ea78d0db3f52"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
tC.setPropertyValue("FULL_NODE_USER_ID", callTC.getPropertyValue("FULL_NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="7060fe95-13b3-41ca-a150-3f0edc3adc54"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="20e9cc33-a9bd-4521-aef3-430d62debf4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("CLGTransfer");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="CLGTransfer" id="f04ef3e0-3f34-4fd7-b08e-576d088813e1"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CLGTransfer" mediaType="application/xml" sslKeystore="dececs_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:standard" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
      <LegalGuardian Status="urn:dece:type:status:active">urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
      <LegalGuardian Status="urn:dece:type:status:pending">urn:dece:userid:org:dece:${#TestCase#FULL_NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="2479ab41-1198-444b-88a0-f69cfd793c9b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('CLGTransfer');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5db4b6fe-99bc-4dbd-b846-0fe097588a46"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                //errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 

//
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                //assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.31. CLG Change Completed [The legal guardianship setting for an underage UltraViolet member has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33KwzPo2EziANGd0cUgoqKIzi93MCiGJRJikm//hbauu3e3fvuc1/ESrIyVw5krXrFuueyHYAximIn8Muy+Fb5D982aNjQ27V9q8nUOJ5u1PZGE9ZgnWk1aYZrtPZ8pSxjnCDZx7Hux28VlmbqNbpZY3iVYTsc36HZlwbd2lXKKxRhYpqovNCVcu65Pu5c3b5VksjvBDp2cMfXPYQ7MewsgTLuEM2OfsdUeX+9obw6jN7tOA47FAVfDASR68IXGHjUK/VJ59XAnaVj+XqcROjDp4HfKh97syx7yeovQWRRLE3TFM1TRMfAjvVP5b1034wM2TeD27qr+4HvQN11LnoBSkGxHRhl4FpB5MS294NphmLownQN5SR9DOf/U6F+Obii+0tLn0BGWK9hW2fuxhbIRBHyISprC/mt8s/fVfC2V410H5tB5OEv638HCfkpcoMQGTV8j+yO7u8tfpOu91cEO7IP3QQ7KZoUbRLqEOHyLEKmk48dTJrPwOVr+cs5vncYgv+mJK/UM04Cm/omM6JjIRz/P/V6rtXNykp3E/TuyUIGD9To4Kz6m0G+mqqebMHQTBfa2xXCs/IN1KPUH+uvjfroq49Nvom2vBb6zqSrVJdSHc0uDNI0rX5m3KQXKs4md7e0H3PrFhsf061Nj05NdcP1VtrQmgB5jf3LxN/3N6JrlpSumc+r9TNX5UO6MWvSeDWecOP2KbCs4WXsJXbT32/8wclh2E2uL0/Was7tq+yskWvnoRtjmZ1Jl53tO5RZUvdOmrZlLrT9qDU1jzjevv2K6TmGIq4ROl+DLP5vGjQv6rH+WHSLSWGSzzNG74osd6titwtQ1wKZLABLFsYXMBGs48k+On0+owUw13pABGdlATLR2oqr+XwkZcZq5e5Wcq8nKAsuG4CtWCIvRClfibvNkNbXu3DL9ujdUhCMzSLY14ehMThmAxtOFFXJJqp8Vg5SPlElen2VWTlZX5SDwkxVrV5aHwReWUiZmF09ilJmT3brRbjV+AxepLkCuD5gNKlrKwPVWzGwvrDhQRor4HiVC7bSXa2UXFLBrCRYkxWJTe32diH0jHDvufaT8QExrhr91Xnfd5PdRTooXanfXZ76S3lfF+fSECy22n69OurrXlqCgwnY3z06DUffBJm1a2fifDscBTvZTuEEzCVBmAOSLhoocn8Igr4AFA44+aV7EJpB1+hl1JDFpSrv9pubs3PaYL1PuzrTbjPb8bo5OzVFya/uRsn+YCv2pjetjpZGqvExf9nitJo2dYeBeWjON9IgHuXmYL4s7WdivoGDqmENKffC9yKlNQTR5Wy7irWI180pPu8d01wLmynntkxXqS9C0zXDM66qwfwY0U0B1Vlqe05HcQlYigBA/6AdhLkitIukGnI23yqCDnpSnIDLgY1H7Oo0HKQu3NZBkI/W08PxozCGmEkClc0l0lZSqS0CoyjCYKlJvQPQBMuKBEvqCXMogvlWHmVbki9tQJS/5rF3zaMlCUCq70CTH5TqGs3H03jJceDsC5rf423llK+Npke3TkgaLychlyl4Yvq7dXBUPCfSomSpjUaTcb5Xk/7xQGaVSS9HaX1XktJjCJzJSLWPYiDqs3C7jcOqDyMYy6GnyPllusOHtrP36GG1wQgzWoQtVvP2mdbXpd0ospbMaLDwZ/UWX8KJeR541UM7W1fVZTNsGV3fFM9nahet6AAEPX7ROBk5yx5tLRs3M3MIjnudneQuL5x5abRTYbaYj9ZLr9ooNdLx2KMvKsVNwmm27GecNCfzxBDUgYrDyNkmbSuPpr7BbvW4me7oVdMJ3SPPJkeVC+sryyPFmqVG2FJmpTm3gTvPaoVwSC2oFEgtcyz3z/uLfgm9KbwN0K/T4SG8zQ/qebJ8Gj130rEk3YpgfF8WB5AslnvkVNDjPxOYQuIYNfOq2gkLFoRj5MeV92JXQV46CaE4jtEhR8ZtLfbaLEcLosSKTbHLSxLN0UyPBnSD51tCu3FnOTcUXyB2A990Cl8Fj7udUn8GCL0ORr6BoloaJNBGuPIHi0W+yrK/IMdv4GOkBoQnggYjtQHgu5LQYKVGlxPaXIsWabrBsW0SS6U8CeKpP42AGaPoM0dsfOKICwSd0EEFkSxOU0yOUxyTlJz0NIld5iXVX3yUEKoZFWyvw3LtBoUdL3RRAZjyAiNx0Utoh9cEUfj2ZGs6xFdpkV2Irwf9jxF+fXdPBtExnEIBF+EIiBQU/cZ3253GPZafY24/x3w3DxLDKc5zktk4cuANyedXvxqm6JRHt1x/IL7Dfmh/FXyyTH0N6uHMSB34aPvHjYAQSkI53u9VOekvp5ckTZNrHVoFnYqIeYqh6Ca1RDAhnOisBkfkUw8T1F/R0QfqL54f8s/4ktj2lzH5pD3SNeXr8i/uIkuEi7uITLo+/9uLzieXJG8xyuPvZF2XXFkKxH+81cAOLPSIeEYeWRAZv8r1ja0nPyTOYoY5vlWsCvJ5/qExYEDMOmSOBdGz8e8MfOf8s/CR5AeWmHTTPonRz2/KxYB6q+gQBokfy2LlKngemlec8TlEnV9Kv5m50r8PPp/jH/n8Rhkvyfjy9MpD1/nfyjXn2i4QkV3YuWJ5q+Tkakqc+9bTkP4A+P2c7vJ/mtOfI3n/Tfy75CmnX7+H9/8C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-06-22</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>UserName</con:name><con:value>standardusername_20130619_062045</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>DF8240BDE2D6DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>FULL_NODE_USER_ID</con:name><con:value>DF82425275645BDBE0401F0A079960F2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateTOU_API" searchProperties="true" id="16c677b6-f520-424c-859c-233d39f17e8a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f245ec71-a809-4a70-848c-36b8eb1bb550"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO")
{
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:TermsOfUse");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:TermsOfUse", "UTF-8"));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set_TOU_Policy_Resource" id="5af93d4f-e64a-4fe7-a508-e478c1c3ce6d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="aa874b4b-0aa5-41ba-933b-be696ac3d33a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="aa640512-7782-42ad-b469-536a81c03732"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_2_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
    <dece:Resource>${#Project#Policy_TOU}</dece:Resource>
    <dece:RequestingEntity>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="b2aa4e66-efd9-4533-8e23-d5191b75b3e3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_TOU');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="844d6c80-e576-4d3d-95e2-868bce023ff2">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa2.q.uvvu.com/rest/2015/02/Account/URN:DECE:ACCOUNTID:ORG:DECE:17AF38AAF30361C7E05305991F0A7EED/User/URN:DECE:USERID:ORG:DECE:17AF38AAF35A61C7E05305991F0A7EED/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\Certs\QALP2/RET_2_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTP3olLTltR1hhoN4RdGjgBz1ixPSbYm0KTZpAX/9SQpUQPBy7xeY3W52n33Jk73gOAwsp8U5xIJGrLAIA8adTNvQkpg5EeaUOwyHwB1BnEHrrudYRcPBmyNaoXvZ0N7qpXG17GFbrxhuXS+XqqaObajpRrUGtfrY9mqmJ005T6DLuMBMNDTLMCvSQDfKQ9NwzLJTKRUtu/qqFUYQc+lbmhQNbQ1qwRvaRIiZg9B8Pi/OS8Uo9pFlGCZ6vusNyARCrDUvVhllgeLm2p4UXSAQBKRIohBdoB2bC5c7A+ozLJIY1rHcY7EMZNhI2ric+mdafhbcLvOiTGxjFjFKcEA/sarPHYhJ5BZagR/FVEzCo0mYhnKsw4LoxCyzMw3tQjvR0Q7CmGOdT7C59tUHD2JgBApP/W5DOzuta9nRYYwZ96I45Lvif8MDLIUgmoGr801aa2inOzxQqeYFEKfLSJBwmsK9GtYZJsDX3QRyuqvCQwweXfQolwO64Aod2oa3J66qcUl94OL/NGirOSsnIxwk0Pyz8FHNR0t6fXNHAHlX/rtf7j6VS/5TIwOwbZwp8tauxL2hzIdodeKx/lhyZ+EfeLkZmebw3A577/R6+nGdkIfyc0889zrWjX3nkvuH8/GyH0TDkKRkOWi3e1evUed2NH4QvbQ3X56fx2WvXRe/zkcwfS3fVv9xl4vH6WffLJ3fvI5dXrPSj2n4clVbWk/d6i3zOh3/Je22pk9j08YfC282qtxbQzR/Hz6Q4C4euvVP28Ot9BV5NqrOSSNPZwv/rm5z5wfJ+B2I2IhqDLqXhSvZJSx+JjOloa7uZabOTJEPF8CE1lSnFHc4iaQ76jqyhyvZrLWuSvWW/Km0qma71jEqJaNi2+aV0ap1Opcbklmh2IPYjphHVSxFuaux+RkgCR0OzIVYT6NEMh3XfvB4iQUudFlfXoKIcRhGkp7NmTkl8ziY2FPLNE1vQQO3YpLq1NYK95H4zX7HLU9AvEvKpR1S7gOhMwqKudVgcznZXMhifOA0EYFZTHGRQSK5PVY061jlegVxGs4CUFBRGLlJAMXZZJaVBvHVv6VjwjNtvzN8s7ILdzS1/W+bKkgblyoDrrL5BbKTcOB9KW9SOZ5ydTvljftW4lJ1t2RJRUzJCsnup69JUSOSj4nKqT14sza4c/PTjx84i36AhfYrkodyU7oVePN+y5dAckdz09EPXPwoJmmaZD2sGYaFYukeqRohKQyAJJLdlsNoCgzlXtBJT0kOfC94rt+FmIgJGwgsIJRDV8jEE3aHAXC1O3TldVmcupjshJSlE7AQh3TtQO49CvGPqxFxiLKT6gf5N49i96tjB3xtxZF5ytVBUOYrST0jyyOTQSLplkoCjOJt54ccHAq+q8yLnGMRcqDGiYDjXwqK2RoaJiRKmOheaplim20znGI5A+fL6JubjNDzDY/++4qn02wECMi9kNPMv3qoHXUFmL/F2Ough0nbKP1E2rvomt/U3zVbddqf8eZf</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5af93d4f-e64a-4fe7-a508-e478c1c3ce6d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateCLGAttestation" searchProperties="true" id="69fd4170-842f-452d-b5ba-2a3dcb222763"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="50376d6d-121f-49b7-a38e-5003f16c248f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO")
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:CLGAttestation");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:CLGAttestation", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="6f62f720-8990-433e-b87f-e5bfb4b7fa27" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

//tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:CLGAttestation");


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="53731713-82f6-4689-b18d-e2d614c0f00a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_CLGAttestation" id="e1f50a3a-0e4f-4409-85f8-0e805d506f11"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_CLGAttestation" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CHILD}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="9d9dbe4a-7055-4988-8e66-537efed92ca4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_CLGAttestation');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="6ac2bd45-adeb-4c9a-8295-932d1e7e4a30">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>tName</con:name><con:value>Child_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Child_User_Create_API</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E48705C62976FCB4E0401F0A079971D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1/User/urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA/Policy/urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/iscportal1_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E486FC50804D1AE5E0401F0A05991EF2</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E2E22E83505CC024E0401F0A0599357E</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E6432D13CD199C26E0401F0A0799607F</con:value></con:property><con:property><con:name>CHILD_NODE_USER_ID</con:name><con:value>E2E25B1DF5BEDD19E0401F0A07991448</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD</con:name><con:value>E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMAC" searchProperties="true" id="7d85ebf5-2378-47de-9c73-bcc3be05c78c"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d4371971-21ff-4a90-a0e0-37d68d88fa6b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1de7ab16-bf7b-4512-ae11-1599f01163bd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageAccountConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="4285855e-3060-462c-b83f-1d458ec03956"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MAC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MAC" id="cbeadbfd-394a-4b1c-9e9a-4c96b103c67e"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MAC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#TestCase#NODE_ACCOUNT_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="bf51df31-427c-436d-aab8-95c2f091660b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MAC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="9df4ad07-5eae-44d6-bbbf-fa0607afb8ef">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11018 - STSCreate - retailer - unamepasswd - Different users on save account share same node accountID - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>1_STS Create Tokentype unamepasswd - Payload</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DC428B882C31FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>829</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DC428B882C23FB8CE0401F0A07996D53/Policy/urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\STSAPI_Projects\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeTestRequest" searchProperties="true" id="1ed1186f-c5dd-457e-8f01-8a0cc98d07bb"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeTest API" id="e55544f2-194d-400f-9b20-0f2f08c38bf1"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
if (testProject.getPropertyValue("versionMinor")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("RetiredAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("versionMinor")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status",CallingTCase.getPropertyValue("user1Status");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("mergeUser1"));
testCase.setPropertyValue("user2Status",CallingTCase.getPropertyValue("user2Status");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("mergeUser2"));
testCase.setPropertyValue("user3Status",CallingTCase.getPropertyValue("user3Status");
testCase.setPropertyValue("mergeUser3",CallingTCase.getPropertyValue("mergeUser3"));
testCase.setPropertyValue("user4Status",CallingTCase.getPropertyValue("user4Status");
testCase.setPropertyValue("mergeUser4",CallingTCase.getPropertyValue("mergeUser4"));
testCase.setPropertyValue("user5Status",CallingTCase.getPropertyValue("user5Status");
testCase.setPropertyValue("mergeUser5",CallingTCase.getPropertyValue("mergeUser5"));
testCase.setPropertyValue("user6Status",CallingTCase.getPropertyValue("user6Status");
testCase.setPropertyValue("mergeUser6",CallingTCase.getPropertyValue("mergeUser6"));

//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("RetiredAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMergeTest_API").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeTest",CallingTCase.getPropertyValue("expectErrTypeAccountMergeTest"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeTest_API" id="ff916405-df6f-46b9-a011-a6689d00989e">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeTest_API");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeTest_API" id="ed28c5b3-0007-40cc-849a-38beaea556d6"><con:settings/><con:config service="AccountMergeTest" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeTest_API" mediaType="application/xml" postQueryString="false" accept="" id="2230c65c-6977-4711-a8d2-22315189c804"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#RetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="26183098-d0ae-4f26-b4bb-e416676cf6a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeTest_API');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="d8f0ba87-2757-4ec7-ac6d-427210632ea1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>SurvivingAccountID</con:name><con:value/></con:property><con:property><con:name>RetiredAccountID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet" searchProperties="true" id="23d09377-9e3c-47e0-92cd-8d7e2ed8d6fd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3f9a5121-1ba4-4ce7-9098-b2a7278fb180"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("policyCLASS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="21cf2586-d1ed-4fdc-832a-472a816d6528"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
      if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO")
      {
	
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			log.info ""+URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8");
			tC.setPropertyValue("policyClass",URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8"));
	}
	else
	{
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("policyClass","urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"));
			}

tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyGetResponseType"));


if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}




</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="eaa96ed5-3cca-4156-8a09-c54bea8b60f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Get" id="10fe7e27-0ca1-4b5b-900d-075f1886f604"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="UserPolicyGET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Get" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#policyClass}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="3764bed9-292d-4b3e-8638-5dd84e1225de">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Policy Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);


 </script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="3bb99271-32ca-4459-9ddc-4ca05ee135c6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
                def myXML = new XmlSlurper().parseText(XMLbody);

                xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
}

log.info "xmlPolicyClass [$xmlPolicyClass] - tcPolicyClass[$tcPolicyClass]";
                                
if (httpStatus == "HTTP/1.1 200 OK" || xmlPolicyClass == tcPolicyClass) {
                policyWasFound = "true";
                def PolicyID = context.expand( '${#TestCase#XMLbody#declare namespace ns1=\'http://www.decellc.org/schema/2012/12/coordinator\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
                log.info "================="+PolicyID
                tC.setPropertyValue("PolicyID",PolicyID);
}


tC.setPropertyValue("policyExists", policyWasFound);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return policyId" id="db2d7a86-6720-4405-a764-6b8d396ae082"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));

</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_ 20008 - SAMLExchange - retailer - saml2 - FORBIDDEN - Active full user - with deleted ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create and SAML Exchange - FUNC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>837</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6">
      <PolicyClass>urn:dece:type:policy:UserLinkConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D</Resource>
      <RequestingEntity>urn:dece:org:org:dece:7600</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D" CreationDate="2013-03-19T05:14:46.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>952</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate" searchProperties="true" id="16f91eb6-d036-4044-a104-3416700f4139"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9ecbac18-bd7a-4df2-b9d2-c9fb4bc9817c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("userStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="dc3fbb0f-7f56-43ad-b37a-35c38bae3724"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyDeleteResponseType"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
				tC.setPropertyValue("PolicyID",URLEncoder.encode(""+callTC.getPropertyValue("PolicyID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("PolicyID",""+callTC.getPropertyValue("PolicyID"));
			}
			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="98cfc05d-90a4-4012-b47d-f1f449632e22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Update");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Update" id="fb4ef185-64fb-4374-8300-43409b18034e"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Update" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#userStatus}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>Ganji</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>testing@uvvutesting.biz</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>rajuganji@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#Project#password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="b23cb4e2-2bd7-421f-91f3-9470fd51d912"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Update');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="cd84f76e-b48f-43aa-8526-34731eaf10da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("NODE_USER_ID",userid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" disabled="true" id="c3f3c863-6773-4ad7-883e-f4966c2bcb43"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("SecondUserName",tC.getPropertyValue("SecondUserName"));
callTC.setPropertyValue("password",tP.getPropertyValue("password"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_70082 - STSCreate - llasp - unamepasswd - for the user who updated to Standard from Basic</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create Tokentype usernamepassword - Linked LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D82F859216DC97E2E0401F0A05996483</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property><con:property><con:name>userStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete" searchProperties="true" id="853b66b1-2855-4d93-8f16-0c0514cd932e"><con:settings/><con:testStep type="groovy" name="Set Pem" id="6a0df690-63bf-4b9c-ae59-c6c2ff9420bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Delete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Delete" id="1ada6391-4467-46ac-b5a9-f8d47363030a"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="AccountPolicyDELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Delete" mediaType="application/xml" id="7926fdfc-6744-494b-ad3f-86dbd869e045" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#TestCase#POLICY_ID}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="17df3acf-9f74-4983-9c2c-7ca80c9272ea">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('Policy Delete');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
log.info contentLocation;
log.info connection[0];
log.info contentType[0];
log.info contentLength[0];

tC.setPropertyValue("status",status[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
//tC.setPropertyValue("contentLocation", contentLocation[0]);

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="3d442766-d852-4dda-8d00-1ca77ae70830">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = true;
		doContentLocaton  = false;
		dobodyXML = false;
		
	break;
	case "FORBIDDEN":
	default:
		errorReason = "assertion_not_found";
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorLink = "https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
/*if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
} */</script></con:config>
      </con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00011_US_UserGet_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Get_GeoProfile</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>765</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AD8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E6170EEF63CD2F20E0401F0A05994E39</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
    <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
        <Reason Language="en">The policy was not found.</Reason>
        <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E6170EEF63CD2F20E0401F0A05994E39/Policy/urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</OriginalRequest>
        <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="9eefa1a9-efcc-493d-a73f-76683cebfde6"><con:settings/><con:testStep type="groovy" name="Set Pem" id="6512c4b0-42ef-4467-b104-ffa33eace57b"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#nodeid}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set Pem" disabled="true" id="e67f8294-fae8-473e-af1e-f2345ab28bc8"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET_2</con:value></con:property><con:property><con:name>tName</con:name><con:value>Account_Get_API</con:value></con:property><con:property><con:name>sName</con:name><con:value>CommonTestSteps</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\Certs\QALP2/RET_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" id="e2c4e4ac-425a-4711-bf15-1e0925e0b8a1"><con:settings/><con:testStep type="groovy" name="Rename Test Cases from external" id="bf86a2d2-4144-4811-a43f-1013547ebc99"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "STS Create Tokentype unamepasswd - Portal:CS";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\raju.ganji\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

	newTestCaseName = br.readLine();
	log.info "Input Test Case Name: "+newTestCaseName;
	
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		targetTestCase.name = newTestCaseName;	
	//}

}</script></con:config></con:testStep><con:testStep type="groovy" name="Rename Test Cases internal" id="4380f443-dbba-469e-a609-36e3fa51657a"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "STS Tokentype DeviceAuthToken - Device Role";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		//targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace("Copy of ", "");	
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeRequest" searchProperties="true" id="789968d3-8176-4b31-8f47-431e3011758b"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMerge API" id="80d70818-b5a8-4794-8ce0-8d82f461f03e"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("sName");
def callTCasename = testCase.getPropertyValue("tName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
if (testProject.getPropertyValue("versionMinor")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"),"UTF-8"));
}
else if (testProject.getPropertyValue("versionMinor")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status","active");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("survive_assertionUserIdFULL"));
testCase.setPropertyValue("user2Status","active");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("retire_assertionUserIdFULL"));

testCase.setPropertyValue("survive_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("survive_assert"));
testCase.setPropertyValue("retire_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("retire_assert"));
//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMerge",CallingTCase.getPropertyValue("expectErrTypeAccountMerge"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMerge_API" id="476e4efc-f319-4609-aa59-39cb705eb97a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountMerge");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMerge" id="5112a73a-602e-4296-8f8b-3bf52b94d139"><con:settings/><con:config service="AccountMerge" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMerge" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept="" id="fcbfc77d-0634-42a6-9f42-f23bad01f6e2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#retire_assert}"/>
  &lt;con:entry key="Authorization" value="${#TestCase#survive_assert}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2012/12/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user1Status}">${#TestCase#mergeUser1}</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user2Status}">${#TestCase#mergeUser2}</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#encodedSurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#encodedRetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="8b0dbffb-cde9-43ff-b2ab-4d8ab9a34c14"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMerge');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="1d6adba7-5667-4993-a3d5-c0da8990549f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMerge}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.40. Account Merged Notice [Your UltraViolet account has been merged with another UltraViolet account]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SurvivingAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>RetiredAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedSurvivingAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedRetiredAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D828E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D88AE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>expectErrTypeAccountMerge</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>survive_assert</con:name><con:value>SAML2 assertion=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</con:value></con:property><con:property><con:name>retire_assert</con:name><con:value>SAML2 assertion=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</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeUndoRequest" searchProperties="true" id="bb7e7d8b-e8e3-4dc9-9073-6b2a9c8ac469"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeUndo API" id="979f1903-1ef6-4a21-b7ed-3c829bec85dc"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
if (testProject.getPropertyValue("versionMinor")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("versionMinor")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
}


//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMerge").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeUndo",CallingTCase.getPropertyValue("expectErrTypeAccountMergeUndo"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeUndo_API" id="9d27ef5d-226b-4710-91da-6a452b364641">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeUndo");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeUndo" id="ff86e280-8efc-438f-a0f8-c455f69b9e1e"><con:settings/><con:config service="AccountMergeUndo" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Undo" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeUndo" mediaType="application/xml" postQueryString="false" id="5012dcf9-b3d9-4010-b85a-2be95cb4de5c"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="355f30c0-6988-4a19-b98d-00eb17001332"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeUndo');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="7b43b087-c6b1-41fa-9958-b3af8215ddd8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;
	case "FORBIDDEN_SURVIVING_ACCOUNT_HAS_BEEN_MODIFIED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:SurvivingAccountHasBeenModified";
		errorReason = "Changes have been made to the Surviving Account since the Merge happened";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SurvivingAccountHasBeenModified";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>424ec930-ca02-4bff-8ed5-51aa458ee303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_nodes" searchProperties="true" id="3217055c-57f5-4f6b-8986-5c97d330161d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7b00abc6-17e9-4793-8beb-c38a75a236da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="a0a81299-e499-4d96-8fe3-ee9125bfe1ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="afad6394-18c1-41f0-834e-d5fd2a0de724"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="8c721406-10ad-4003-9fcd-4043b3af0f90"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="4ed4c6fb-f157-4d76-90cf-c2111034e717">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="7065e381-9693-46c0-afa3-f3f540ed93ee">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_nodes" searchProperties="true" id="02e196fd-6a33-458f-a779-20bdcb8f65f6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4a1fa38b-4b5a-43bc-b4ac-c8b2cd422c62"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="78a51972-e97c-4fcc-a444-ae8c86a62bc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="45db53d0-e287-4b60-a809-f9e6735e4f2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC" id="a34ac438-f9e9-46e6-aa72-085a95955c04"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="517a95b3-ce83-437a-827d-5e49fdb10fa1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                              contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="6a93b9aa-b6dc-4adf-983f-0d78466e7a19">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageUserConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2eeb936-13ad-4f02-a213-128d8a600f31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS_API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="96fdea5e-3165-42ad-86cd-31f66cb06840">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="89035e54-011b-4e78-8314-3066b20a7451">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("audience",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);

tC.setPropertyValue("expectErrType","SUCCESS");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d336e59f-097a-4d6b-a0ab-dad12dc87fd3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

//tP.setPropertyValue("audience",callTS.getPropertyValue("audience"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));


if( tP.getPropertyValue("URLEncode").toUpperCase()=="YES" &amp;&amp; tP.getPropertyValue("audiene") != null )
{
	log.info("Inside if loop");
	log.info("Audienc in TP : '" + tP.getPropertyValue("audience")+"'" );
	log.info("Audienc in TC : '" + tC.getPropertyValue("audience")  +"'" );
	tC.setPropertyValue("audience",tP.getPropertyValue("audience"));
	log.info("Change Audienc in TC : '" + tC.getPropertyValue("audience")  +"'" );
}
else
{
	if(tP.getPropertyValue("audience")!=null){
		log.info("Inside else loop");
	log.info("Audienc in TP : '" + tP.getPropertyValue("audience")+"'" );
	log.info("Audienc in TC : '" + tC.getPropertyValue("audience")  +"'" );
	tC.setPropertyValue("audience",URLEncoder.encode(tP.getPropertyValue("audience"), "UTF-8"));
	log.info("Change Audienc in TC : '" + tC.getPropertyValue("audience")  +"'" );
}
}


if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO")
{
	tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
}
else
{
	tC.setPropertyValue("tokentype",URLEncoder.encode(tP.getPropertyValue("urntokenType_userpassword"), "UTF-8"));
}


	</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Establish pem" id="94b59c95-ff72-47e3-9fd0-fd8d7afd897f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="POST - STS" id="ce52285d-9dc0-4384-aaf1-5960e49fc5b6"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_2_concat.pem" id="e7970c36-07d4-478d-bcc9-b5e0e7361f55"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#TestCase#audience}"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="a978a785-c50d-4c04-8a92-bdc972ecdc01">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

/*
 *if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
  
	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" disabled="true" id="7a36644e-867e-4ef2-bd53-c316b0b0b1f3">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="db516161-86e4-476d-bf56-7f98e27247fe">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = true;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection
log.info "doConnectionClose=="+doConnectionClose;
if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
log.info "doContentLocaton=="+doContentLocaton;
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	log.info "Path=="+b.getPath();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	//assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
	}
}</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case" id="ba4dda14-1235-40f0-b44e-e25b1b8a9ca3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS" id="9af2df1d-af07-4b39-9527-92dcc32d9120"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="RET_2_concat.pem" accept="" id="1333f880-d213-4b90-a831-0076bf6006f6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="41aec0e4-8f1c-46d0-af53-1a19c010eab9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
log.info  "startAssert: "+startAssert;

if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body" id="2040850c-ee49-4935-86e9-5f2505a43f76">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("SAML",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
	tC.setPropertyValue("NODE_USER_ID",null);
	tC.setPropertyValue("NODE_USER_ID_FULL",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			//tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
			//tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("NODE_ACCOUNT_ID",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("NODE_USER_ID",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());
			
			if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO")
			{
                    tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
				tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
        	     } 
        	     else 
        	     {
				tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(accountId.toString()));
				tC.setPropertyValue("NODE_USER_ID_FULL",URLEncoder.encode(userId.toString()));        	     	
		     }
	} 
	else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="61cabfc0-62e4-4f84-9578-d6b1043bb8f5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		//assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="3e70141a-7836-4057-9fa3-549155a21767">
        <con:settings/>
        <con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");


String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);
// finally, URL encode it
tC.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="e74a6738-775c-40c0-afb6-0b3f1707439b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctID = tC.getPropertyValue("NODE_ACCOUNT_ID");
String userID = tC.getPropertyValue("NODE_USER_ID");

callTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
//callTC.setPropertyValue("SAML_USER1",tC.getPropertyValue("SAML"));

if (acctID != null &amp;&amp; acctID.length() > 0) {
	
	callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID1",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
	//callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
	//callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>assertId</con:name><con:value>_83b64fa9-50d8-4361-a9e7-067e78b9f71f</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2015-06-04T10:14:43.296Z</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2015-06-04T10:14:43.296Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2015-06-04T16:14:53.296Z</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_83b64fa9-50d8-4361-a9e7-067e78b9f71f</con:value></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value>_732606f9-3702-470e-9ecf-2bbb514a18ba</con:value></con:property><con:property><con:name>audience</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn%3Adece%3Aorg%3Aorg%3Adece%3ARET_CS_2</con:value></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml; charset=UTF-8</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\Certs\QALP2/RET_2_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTP3olLTltR1hhoN4RdGjgBz1ixPSbYm0KTZpAX/9SQpUQPBy7xeY3W52n33Jk73gOAwsp8U5xIJGrLAIA8adTNvQkpg5EeaUOwyHwB1BnEHrrudYRcPBmyNaoXvZ0N7qpXG17GFbrxhuXS+XqqaObajpRrUGtfrY9mqmJ005T6DLuMBMNDTLMCvSQDfKQ9NwzLJTKRUtu/qqFUYQc+lbmhQNbQ1qwRvaRIiZg9B8Pi/OS8Uo9pFlGCZ6vusNyARCrDUvVhllgeLm2p4UXSAQBKRIohBdoB2bC5c7A+ozLJIY1rHcY7EMZNhI2ric+mdafhbcLvOiTGxjFjFKcEA/sarPHYhJ5BZagR/FVEzCo0mYhnKsw4LoxCyzMw3tQjvR0Q7CmGOdT7C59tUHD2JgBApP/W5DOzuta9nRYYwZ96I45Lvif8MDLIUgmoGr801aa2inOzxQqeYFEKfLSJBwmsK9GtYZJsDX3QRyuqvCQwweXfQolwO64Aod2oa3J66qcUl94OL/NGirOSsnIxwk0Pyz8FHNR0t6fXNHAHlX/rtf7j6VS/5TIwOwbZwp8tauxL2hzIdodeKx/lhyZ+EfeLkZmebw3A577/R6+nGdkIfyc0889zrWjX3nkvuH8/GyH0TDkKRkOWi3e1evUed2NH4QvbQ3X56fx2WvXRe/zkcwfS3fVv9xl4vH6WffLJ3fvI5dXrPSj2n4clVbWk/d6i3zOh3/Je22pk9j08YfC282qtxbQzR/Hz6Q4C4euvVP28Ot9BV5NqrOSSNPZwv/rm5z5wfJ+B2I2IhqDLqXhSvZJSx+JjOloa7uZabOTJEPF8CE1lSnFHc4iaQ76jqyhyvZrLWuSvWW/Km0qma71jEqJaNi2+aV0ap1Opcbklmh2IPYjphHVSxFuaux+RkgCR0OzIVYT6NEMh3XfvB4iQUudFlfXoKIcRhGkp7NmTkl8ziY2FPLNE1vQQO3YpLq1NYK95H4zX7HLU9AvEvKpR1S7gOhMwqKudVgcznZXMhifOA0EYFZTHGRQSK5PVY061jlegVxGs4CUFBRGLlJAMXZZJaVBvHVv6VjwjNtvzN8s7ILdzS1/W+bKkgblyoDrrL5BbKTcOB9KW9SOZ5ydTvljftW4lJ1t2RJRUzJCsnup69JUSOSj4nKqT14sza4c/PTjx84i36AhfYrkodyU7oVePN+y5dAckdz09EPXPwoJmmaZD2sGYaFYukeqRohKQyAJJLdlsNoCgzlXtBJT0kOfC94rt+FmIgJGwgsIJRDV8jEE3aHAXC1O3TldVmcupjshJSlE7AQh3TtQO49CvGPqxFxiLKT6gf5N49i96tjB3xtxZF5ytVBUOYrST0jyyOTQSLplkoCjOJt54ccHAq+q8yLnGMRcqDGiYDjXwqK2RoaJiRKmOheaplim20znGI5A+fL6JubjNDzDY/++4qn02wECMi9kNPMv3qoHXUFmL/F2Ough0nbKP1E2rvomt/U3zVbddqf8eZf</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_API</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>tName</con:name><con:value>User_Create_STS_Policies</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>AcountDelete_20150604_1433413092260</con:value></con:property><con:property><con:name>username1</con:name><con:value>firstuser20130726_035156</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_83b64fa9-50d8-4361-a9e7-067e78b9f71f" IssueInstant="2015-06-04T10:14:53.296Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_83b64fa9-50d8-4361-a9e7-067e78b9f71f"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>Wxg/7g/yiHJMce/fFgjg4IU43gU=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>Q8Q3dpmWeYJV11T+9mLjiHkqHucP4XLtXLE2J9MdcNP+byRloTmcvcySCCLFZoEKVbPtLvLwy++r4fC8tB+VekZ4K6GdyxQkzR13+JZbds72vqkmYF7y2UI6KnfEEgYvIAkUb19aqxfpV5N2T/wjTPclMrTd8z9faAvZ/f9/6wc=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:17AF38AAF35A61C7E05305991F0A7EED</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_1p1kcwrlh9k2111fxild51c6k9" NotOnOrAfter="2015-06-04T13:14:53.296Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET_2"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-06-04T10:14:43.296Z" NotOnOrAfter="2015-06-04T16:14:53.296Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET_CS_2</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET_2</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/rest/2015/02/SecurityToken/Assertion/_83b64fa9-50d8-4361-a9e7-067e78b9f71f</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-06-04T10:14:53.296Z" SessionIndex="_83b64fa9-50d8-4361-a9e7-067e78b9f71f"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Notification DB Validation" searchProperties="true" id="e6d93400-ec29-487d-845d-0269783271b0"><con:settings/><con:testStep type="groovy" name="User_Notification DB Validation" id="36a03322-c94f-4c44-9b0d-8ed3193a4a59"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int cnt = 0;

	String emailAddress = tP.getPropertyValue("PrimaryEmailAddress").toString();
	String username = callTC.getPropertyValue("UserName").toString();
	String emailEvent = callTC.getPropertyValue("emailEvent").toString();
	
	String sql = """Select * FROM EMAIL_NOTIFICATION WHERE EMAIL_ADDRESS='$emailAddress' and EMAIL_DISPATCH_STATUS = 'Y' and EMAIL_NOTIFICATION_EVENT='$emailEvent' and USER_OID=(SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME='$username')""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;

		}
	finally {
		def results   = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info results;
	
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		
		}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.2. Account Create: Email Address Confirmed [Your UltraViolet account has been created]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet_API" searchProperties="true" id="a9371951-a0d7-4374-b477-39820ba727c5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="34eab9ef-094b-4ea5-b816-16bad8f3019a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="ab184205-d3f8-4833-a390-e2590f4dff15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="3475aa35-aee4-44f3-bc56-b7358d0abca8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

//tC.setPropertyValue("ETagPrior",tC.getPropertyValue("ETag"));
tC.setPropertyValue("ETag", ETag);

//log.info "ETagPrior: " + tC.getPropertyValue("ETagPrior")+", ETag: "+ tC.getPropertyValue("ETag");
//assert tC.getPropertyValue("ETagPrior")!= tC.getPropertyValue("ETag");
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="621e6c79-25ba-4fc8-86b5-0fa7a2e3401f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseTypeUserGet}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO")
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	}
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}


if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

	} 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT

   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');

    // Following Fields returned for Everyone
    // Contact Info shwon only for CLG or Self or Portal:CS or DECE:CS or COORD:CS - kalyan 05092013
    if ( (RequestorType == "Other")  || (RequestorType == "CS") )
    {
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
            
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
    else
    {
    	    assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
  /*      
         def a = myXML.DisplayImage.DisplayImageURL;
         log.info a ;
		//def b = a.toURL();
		//log.info b;
		 log.info "Response_DisplayImageURL: "+a.getPath();
         assert  a.matches("https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=[0-9,A-F]*");
        log.info "here";
*/
        
         assert myXML.ContactInfo.size() == 1;
         assert myXML.ContactInfo.Address.size() == 1;
         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
         assert myXML.ContactInfo.Address.Locality.size() == 1;
         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
         assert myXML.ContactInfo.Address.Country.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
         if ((RequestorType == "CS") || (RequestorType == "SPLCS"))
         {
           assert myXML.ResourceStatus.History.size() > 0; 	
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0; 	
         }

   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels

   if(Requestee == "CHILD")
    {

    	  this.log.info "Getting CHILD details";
    	  
  	 if((RequestorType == "CLG") || (RequestorType == "Self") || (RequestorType == "SPLCS"))
  	 {
  	   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
         assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
  	 }
  	 else
  	  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
  	   

         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************

         //firstmask = usernamestring.indexOf('u');
        lastmask = usernamestring.length();
        
     log.info firstmask;
 		 log.info  lastmask;
        usernamestring = usernamestring.substring(1,lastmask-1);
        //usernamestring = "••••••";
   log.info usernamestring;
//        assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
         assert usernamestring == "••••••";

       //*************Verifying Masking of CHILD GivenName details ******************
          
        //firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.length();

         givennamestring = givennamestring.substring(1,lastmask-1);

       // assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
        assert givennamestring == "••••••";

         //*************Verifying Masking of CHILD SurName details ******************
          
       // firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.length();

         surnamestring = surnamestring.substring(1,lastmask-1);

       //assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";     
      assert surnamestring == "••••••";        
    }
  	 if ((RequestorType == "CS") || (RequestorType == "SPLCS"))
          {
             this.log.info "Getting CHILD CLG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else
             if(myXML.LegalGuardian.size() == 2)     	
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)     	
                {
            	   this.log.info "Getting CHILD Active CLG details for NonCS";
            	 
           	   assert myXML.LegalGuardian.size() == 1;   
           	   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
               }
           else
               {
            	 this.log.info "Getting CHILD Pending CLG details for NonCS";
           	 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "SPLCS"))
    {
    	       	  
    	    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")	
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else if(myXML.LegalGuardian.size() == 2)     	
             {
           	 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
           else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }      	
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";	
           //assert myxml.LegalGuardian.size() == 0; 	
		assert myXML.LegalGuardian.size() == 0; 	
        }
    }  
     else 
    {   
    	    this.log.info "BAU geting other's details";
    	    
    	    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH")	
          {
            if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
          else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }	
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 	
          }      	
    }       
    
  }	// end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:testStep type="groovy" name="Return_ETag_to_Calling_TestCase" id="948ce4c9-000a-48f8-8ed9-6e9a5983276c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("ETag",tC.getPropertyValue("ETag"));</script></con:config></con:testStep><con:properties><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E641652A31FC5318E0401F0A05993F57:F41796B9"</con:value></con:property><con:property><con:name>ETagPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>3531</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/dececs_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E6193ACEE6A11BFFE0401F0A05995B7C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E6193ACEE7D81BFFE0401F0A05995B7C</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5F850C559F9CD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6193ACEE7D81BFFE0401F0A05995B7C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5F850C559F9CD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>RequestorClass</con:name><con:value>FAU</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>ResponseTypeUserGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>sName</con:name><con:value>04.Functional_UserGet_SPLCS_P2</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_40040_UserGet_FUNC_SPLCS_Get_AccStatus_Mergedeleted_SPLCS_P2</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E603BD56DDEEF0CEE0401F0A07990E43</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5F850C559FACD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:basic" UserID="urn:dece:userid:org:dece:E6193ACEE7D81BFFE0401F0A05995B7C" xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>usercreate20130911_030350</GivenName>
      <SurName>usercreate20130911_030350</SurName>
   </Name>
   <DisplayImage>
      <DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E6193ACEE7DC1BFFE0401F0A05995B7C</DisplayImageURL>
   </DisplayImage>
   <ContactInfo>
      <PrimaryEmail verificationEntity="urn:dece:org:org:dece:RET" verificationDateTime="2013-09-11T09:31:03.103Z" VerificationStatus="urn:dece:type:status:success" verified="true" ID="Coordinator">
         <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>Coordinator</ConfirmationEndpoint>
      </PrimaryEmail>
      <AlternateEmail Notify="false" VerificationStatus="urn:dece:type:status:pending">
         <Value>testing@uvvutesting.biz</Value>
      </AlternateEmail>
      <Address>
         <PostalAddress>46000 Center Oak Plaza</PostalAddress>
         <PostalCode>20166</PostalCode>
         <Locality>Sterling</Locality>
         <StateOrProvince>VA</StateOrProvince>
         <Country>US</Country>
      </Address>
      <TelephoneNumber>
         <Value>+1.703598741</Value>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.703598742</Value>
      </MobileTelephoneNumber>
   </ContactInfo>
   <Languages>
      <Language primary="true">en-us</Language>
      <Language primary="false">en</Language>
   </Languages>
   <!-- <DateOfBirth> depricated </DateOfBirth> -->
   <LegalGuardian Status="urn:dece:type:status:active">urn:dece:userid:org:dece:E6193ACEE6FF1BFFE0401F0A05995B7C</LegalGuardian>
   <Credentials>
      <Username>usercreate20130911_030350</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-09-11T09:30:53.000Z" ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-09-11T09:31:03.108Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping User Status to active</Description>
      </Current>
      <History>
         <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-09-11T09:31:00.871Z">
            <Value>urn:dece:type:status:pending</Value>
            <Description>Flipping User Status to pending</Description>
         </Prior>
         <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-09-11T09:30:53.011Z">
            <Value>urn:dece:type:status:blocked:tou</Value>
            <Description>User Created</Description>
         </Prior>
      </History>
   </ResourceStatus>
</User>]]></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c734ae7-5af5-42b8-9df0-6dd308e44f7c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_API" searchProperties="true" id="b842e70d-a8b1-44af-91c2-44516599f032"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="215d4672-2e57-480a-a80e-d258d7b50dad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO")
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:ManageUserConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="7b7db62c-25c3-45a6-a22a-220baead7507"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC" id="6e6a3bde-d58f-4514-a0db-b9f3983a4e4a"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_2_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="1581bd9a-2a13-43f9-abd7-d15ee95c3374">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="58771ea9-69a8-4296-aa24-2a8104397ca9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZtU+o6EP4rTP3olLTltR1hhoN4RdGjgBz1ixPSbYm0KTZpAX/9SQpUQPBy7xeY3W52n33Jk73gOAwsp8U5xIJGrLAIA8adTNvQkpg5EeaUOwyHwB1BnEHrrudYRcPBmyNaoXvZ0N7qpXG17GFbrxhuXS+XqqaObajpRrUGtfrY9mqmJ005T6DLuMBMNDTLMCvSQDfKQ9NwzLJTKRUtu/qqFUYQc+lbmhQNbQ1qwRvaRIiZg9B8Pi/OS8Uo9pFlGCZ6vusNyARCrDUvVhllgeLm2p4UXSAQBKRIohBdoB2bC5c7A+ozLJIY1rHcY7EMZNhI2ric+mdafhbcLvOiTGxjFjFKcEA/sarPHYhJ5BZagR/FVEzCo0mYhnKsw4LoxCyzMw3tQjvR0Q7CmGOdT7C59tUHD2JgBApP/W5DOzuta9nRYYwZ96I45Lvif8MDLIUgmoGr801aa2inOzxQqeYFEKfLSJBwmsK9GtYZJsDX3QRyuqvCQwweXfQolwO64Aod2oa3J66qcUl94OL/NGirOSsnIxwk0Pyz8FHNR0t6fXNHAHlX/rtf7j6VS/5TIwOwbZwp8tauxL2hzIdodeKx/lhyZ+EfeLkZmebw3A577/R6+nGdkIfyc0889zrWjX3nkvuH8/GyH0TDkKRkOWi3e1evUed2NH4QvbQ3X56fx2WvXRe/zkcwfS3fVv9xl4vH6WffLJ3fvI5dXrPSj2n4clVbWk/d6i3zOh3/Je22pk9j08YfC282qtxbQzR/Hz6Q4C4euvVP28Ot9BV5NqrOSSNPZwv/rm5z5wfJ+B2I2IhqDLqXhSvZJSx+JjOloa7uZabOTJEPF8CE1lSnFHc4iaQ76jqyhyvZrLWuSvWW/Km0qma71jEqJaNi2+aV0ap1Opcbklmh2IPYjphHVSxFuaux+RkgCR0OzIVYT6NEMh3XfvB4iQUudFlfXoKIcRhGkp7NmTkl8ziY2FPLNE1vQQO3YpLq1NYK95H4zX7HLU9AvEvKpR1S7gOhMwqKudVgcznZXMhifOA0EYFZTHGRQSK5PVY061jlegVxGs4CUFBRGLlJAMXZZJaVBvHVv6VjwjNtvzN8s7ILdzS1/W+bKkgblyoDrrL5BbKTcOB9KW9SOZ5ydTvljftW4lJ1t2RJRUzJCsnup69JUSOSj4nKqT14sza4c/PTjx84i36AhfYrkodyU7oVePN+y5dAckdz09EPXPwoJmmaZD2sGYaFYukeqRohKQyAJJLdlsNoCgzlXtBJT0kOfC94rt+FmIgJGwgsIJRDV8jEE3aHAXC1O3TldVmcupjshJSlE7AQh3TtQO49CvGPqxFxiLKT6gf5N49i96tjB3xtxZF5ytVBUOYrST0jyyOTQSLplkoCjOJt54ccHAq+q8yLnGMRcqDGiYDjXwqK2RoaJiRKmOheaplim20znGI5A+fL6JubjNDzDY/++4qn02wECMi9kNPMv3qoHXUFmL/F2Ough0nbKP1E2rvomt/U3zVbddqf8eZf</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa2.q.uvvu.com/rest/2015/02/Account/URN:DECE:ACCOUNTID:ORG:DECE:17AF38AAF30361C7E05305991F0A7EED/User/URN:DECE:USERID:ORG:DECE:17AF38AAF35A61C7E05305991F0A7EED/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\Certs\QALP2/RET_2_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_API" searchProperties="true" id="700e149b-ee46-4a91-8f84-916ec3bfa37e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="78845ba2-8601-4f71-87d9-d285f6650912"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO")
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:UserLinkConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="ceac24ad-0e3f-4bd8-af8d-5c003d89a19c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="d5c2eb02-3b4f-4a08-9f5d-ce1a78c4dba0"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="0426fe4f-882b-4ea7-bfbd-4124b6413d7e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="7b8c1483-c541-4f08-aab9-041228f45d0f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E26A4604E0EC0139E0401F0A05990BBB</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E26A4604E0EC0139E0401F0A05990BBB/User/urn:dece:userid:org:dece:E26A4604E1520139E0401F0A05990BBB/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/DECE/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE26A4604E0EC0139E0401F0A05990BBB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43c5dbf9-3574-4373-9d3f-f1b49a7247c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateGeoPrivacyAssent" searchProperties="true" id="1a42b403-fac9-4e9b-beba-08428b612d51"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="584480d5-e621-4b91-826d-e5a22d8a067f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if (tP.getPropertyValue("URLEncode").toUpperCase()=="NO")
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:GeoPrivacyAssent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:GeoPrivacyAssent", "UTF-8"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="b362db47-5a20-4722-a929-195f2edc4c9f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateGeoPrivacyAssent" id="bf3cd8d9-3dda-4fe1-923c-6bcb85102ee9"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateGeoPrivacyAssent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="a6e60891-93be-4a57-891b-4d0e499de53a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateGeoPrivacyAssent');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="fe2c0a6c-2712-49f0-9c07-b0bafe8efedf">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc7LMEr73V1h+l5YBBFGsJFWsrrgBbjencBgQZZNh019/BhONyZu8J9+psgqn6el+eqHnmWdk+l6zyyME48QNg+pAeqn9p0XZnRbkOo0dDZkG06HbDdNu2g2aBiRtUZ2WbcJadYBQCgcBSswgeak1SYpukFyDonWK6tL413liSXZbqy5hjLBprPJE1qqF7wWoe3X7UkvjoBuayEXdwPQh6iagq/HquIs1u+YNU+31+Q3l1WH8uk+SqEsQ4MmCAHoeeAKhTzwTn3SeLdTVXCcwkzSG7z4t9FJ735vn+VNOP4WxQzRJkiRIjsA6FnKdf2qvldtmaA0CO3xbi2YQBi4wPfdilqBUmOxDq8p7Thi7yd7/wTRFUGRpugEL0AAUE/xTIz4cXNH90tInkDEyG2hvUjdjC2jDGAYAVo3F4KX2z+8q+LZXj80A2WHsoy/rfwcJBhn0wghaDXSL7Ibu9xa/SdfrMwTdQQC8FLkZnJRtEpkAouoshrZbjF2Em89C1Wv5qwW6dRgE/6Ykz8QjTgyb+CYzkutAlPw/9Xqs1ZuVpeml8DWGgkcvx0fOPIadwDr0nTYrM+11vWe8XCE8Kr+Bupf6ff21Ue999b4pkzmZB5p4KGZLCNvcWOdc0W/FhX9smgddssYm59bjE8f2xpFNOFPTzF2xfdHksZHl24O7dE+GN9oudVKpGJa/zE0YNElxbgejdmIriQfBsi4QGUdq65XuNS8xSXeOljijVN3KzojQDLZoZZp3tlMxT2bjcaC0hSSqqEdmMSv8szUT16uJsfLjzstHTI8xlHGN4PkaZPl/3SI5yUzM+0IsJ4WNP88EvqqDgViXRJGHosPnA4F3BsL4wk8E53jaH90el5MCPzcUXuLP6oLPJWcjLefzkZxby6W3XQ4URVAXTN7nN1IFv5DkYilt10PSXG2jTVMht5ogWOtFuKOHkdU/5v09mKi6mk/0wVk9yMVEl8nVVeYUeH1RDyo11Q26sjoInLqQcym/epTkfD/ZrhbRxuBycJHnKs/0eMqQxb3a1/0lBejFHhzkscofr3Jhr4rLpVrIOj+rCM5kiWPTRWUbAd+Kdr63fzDex8Z1q7c873peur3IB1WUe6J26mmDHS3N5SG/2Bi71fJorpSsAvoTfnfz6LZccx3mzraTS/PNcBRuB/sMTPi5LAhzHqeL5NVBb8iHPYFXGd4tLuJBYEPRUnJi2ESVOuf12PXZPa2R2SM9k+p0qM14xc5OrCQH9e0o3R326n6tTOsjzcoMLuEuG5TVM9Z0KVBE9nwt95NRYffnWmU3k4o16NctZ0h4F06J1faQjy/nvac6i2TFTtF559r2SlhPGa9teyq9iGzPjs6orofzY0yyAqSbxOacjZIK76gCz/cOxkGYq0KnTKo1yOcbVTB5RU5S/nJoJqPm8jTsZx7Y0HxYjFbTw/G9MJaUywKRz2XcVnKlI/FWWYS+ZsjKgTcEx4kFR1aEOZD4+WYwyjc4X0YfK3/No3LNoyMLvExveZbrV2iD5JJpojEMfw4EI1C4vXoqVhbrk+0TlMfaJGJyFU3sYLsKj6rvxkacasZoNBkXOz3tHQ94VtmkNsrobUXOjhHvTkb6/iiFkjmLNpskqgcgBskg8tVBcZlu0aHj7nxyWG9RwoyUQLtp+Lvc6JnydhQ7GjXqL4IZ3eYqKLXPfb9+6OSruq6xUdsSA1s6n4ltvCRDPlS4RetkFc3mcW/kYza3h/xxZzYnhccJZ04ebXWQL+ajlebXW5VWNh775EUnmEk0zbVezsjzeZ22BL2voyh2N2nHKeJpYDU3ZsJmW3LJupF35JrpUWcieun4uFizzIra6qwyZ9Zg6zvtCAyJBZHxctseD3rn3cW8RP4UvA3Qr9PhLnybH8TjZPk0em6kQ8PdCkFyW5YH0ECqKvhUMJO/E5hS4loN+6rajUoWhBIYJLXXcldJXroppjiu1cVHxttaZhm6KVG0KFEcJzZZmWRISiF5ss1xLNlWbiznDcUXiGIY2G7pq+Rxb6fU3wECv4tgYMG4kYUp2ENU+4vFMl/VQbDAx28YIKiHmCfKtEQxrESSvNJqSzSvKBwtCgzNtHmyo7TYWnUSJtNgGvN2AuPPHJH5xBEXELiRC0siWZ6mCB+nKMEpOZlZmnjUU2Y+BTDFVDMu2V63yXRaBHL9yIMlYMIPrdSDT9E+uiaIQG/PZsME6Cp1EYjCODE96nrY/xjl13e3hGAdyy0VUBmSAHFR4Tect3mL5+e4249x38zzqeWWZzrObhK74A3J51cfTVN2y71jPgK7Ib9v+Cr4ZJz4Gtfdn5W54N7994sB5pWYebzeinMyn05PaZal13K0S1YVY/MERZBtQoMgxdTorIdHGBB3E8SvWOkd9RfPd/lnfGmyD7QEf9k+bp7qdfmLK4kGUXklGeDmL3573/nkEuctgUXynUz08M2lRPzXyw3oglIPi2f4kYex9VGub2w9+MFxlqPMDZxyVXLQ8w+9AUJs1sXjLIwfjX9n4Dvnn4X3JN+xJLibdmkCf35TLefUS80EIEyDZCDVroLH2XnFmZwj2P1Q+sPMlQW+0/oC/Ujr1+pYw1PMN2t3Xfd/Kzfca7sAfKHF+lcsL7UC31Cx88B5mNXvAP8Y1wwlsyRDCYzEPI5rhpM+PslPkbz+If5T8pDTr9/D638B</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4DAFF5120AEA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1/User/urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA/Policy/urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:/certs/iscportal1_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4DAFF51203BA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>E6432D13CD199C26E0401F0A0799607F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f62f720-8990-433e-b87f-e5bfb4b7fa27</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_UserStatus" searchProperties="true" id="8b84599f-9011-4a1a-a266-93bd146fbbc4"><con:settings/><con:testStep type="groovy" name="Update_User_Status" id="89ea8073-43b0-413c-be9e-23e7e1586b7f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def status = context.expand( '${#TestCase#Status}' )
def userID = context.expand( '${#TestCase#User_OID}' )


def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);

String sql = """update ACCOUNT_USER set STATUS = '$status' where USER_OID = hextoraw('$userID')""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);
</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>pending</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">00FE35CDB908379EE05307991F0A9FE6</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_06007_AccountGet_FUNC_Portal:CS_User_Status_as_Pending_200_OK_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>Account_Get_PortalCS_P1</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_AccStatus" searchProperties="true" id="80487ede-aacb-4a03-9614-e48d276255d6"><con:settings/><con:testStep type="groovy" name="Update_AccStatus" id="8fa8c609-1d19-4270-8788-687034e7a859"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def status = context.expand( '${#TestCase#Status}' )
def accountID = context.expand( '${#TestCase#account_oid}' )

log.info "account Oid :  " + accountID;

def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);


String sql = """update ACCOUNT set STATUS = '$status' where ACCOUNT_OID = hextoraw('$accountID')""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);
</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>archived</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CE5F7E37A4E05307991F0A2173</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_06014_AccountGet_FUNC_Portal:CS_Account_Status_as_Archived_200_OK_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>Account_Get_PortalCS_P1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_Policy_Status" searchProperties="true" id="0fe6ceb2-bf24-4dc3-a614-abc94dd19143"><con:settings/><con:testStep type="groovy" name="Update_Policy_Status" id="f0e80ecd-5515-441d-b52f-589542815928"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def status = context.expand( '${#TestCase#Status}' )
def userID = context.expand( '${#TestCase#User_OID}' )
def Policy = context.expand( '${#TestCase#Policy}' )
def userName = context.expand( '${#TestCase#UserName}' )

def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);


String sql = """update policy set status = '$status' 
		where policy_oid in 
		(select policy_oid from policy_relationship where policy_actor 
				in ((select user_oid from account_user where lower(username) = lower('$userName')), 
				(select account_oid from account_user where lower(username) = lower('$userName')))) 
		and policy_class = '$Policy'""";


//String sql = """update policy set status = '$status'  
//			where policy_oid in 
//			(select policy_oid from policy_relationship where policy_actor 
//				in ((select user_oid from account_user where lower(username) = lower('$userName')), 
//				(select account_oid from account_user where lower(username) = lower('$userName')))) and policy_class='$Policy'""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);

</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">00FDFAE81BB2450AE05307991F0AFA42</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_06018_AccountGet_FUNC_Portal:CS_NoManageAccountConsentPolicy_200_OK_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>Account_Get_PortalCS_P1</con:value></con:property><con:property><con:name>Policy</con:name><con:value>105</con:value></con:property><con:property><con:name>UserName</con:name><con:value>accountget_firstuser20140819_1408463130320</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RenameTCs" searchProperties="true" id="9dedc8c4-1bc7-4f3d-90f8-76fc1c3bb757"><con:settings/><con:testStep type="groovy" name="Rename" id="d3663aca-7eb8-443b-a986-2d81307d5a76"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "07.User_Get_GeoProfile_Portal";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\rshrivastava\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{               
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

                newTestCaseName = br.readLine();
                log.info "Input Test Case Name: "+newTestCaseName;
                
                                targetTestCase.setFailOnError(true);
                                targetTestCase.name = newTestCaseName;    
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_Responses" id="e2ef2188-45e8-4193-86c8-78d3a2732120"><con:settings/><con:config><script>import java.io.*;

//def commonTestStep = "User_Delete_API";

def testCase  = testRunner.getTestCase();
def TSList = testRunner.testCase.testSuite.project.getTestSuiteList();
def TSCount = testRunner.testCase.testSuite.project.getTestSuiteCount();

//def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
//def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();


log.info "TS List:"+TSList[0].name;

//log.info "TCCount:"+TCCount;

for(k in (0..TSCount-1))
      {
            def testSuite = TSList[k].name;
            def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList(); 
            def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();
            log.info "TestSuite  " + testSuite +"  TCCount:"+TCCount;
            log.info "TSList[k].disabled " + TSList[k].disabled 
            
            if ((TSList[k].disabled).toString() != "true")
            {                              
                  for(i in (0..TCCount-1))                                                                  
				{                                                                                         
                  	try {
                        		def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
						def targetStep = targetTestCase.getTestStepByName(commonTestStep);
						log.info  testSuite + " " + targetTestCase.name+" "+targetStep.getPropertyValue("ResponseType");         
                  		}
                  	catch(Throwable e) {
                        log.info "Exception : " + e;
                        }                                                                              
                   }                              
            }
      }
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_DB_Validation" searchProperties="true" id="04c62a5f-b87c-4edf-81e6-67cf45583012"><con:settings/><con:testStep type="groovy" name="SAML_HISTORY_STATUS_Validate" id="a0620ce5-5336-43ee-aa9d-a49fbb701e62"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' )
def status = context.expand( '${#TestCase#Status}' )

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseTypeUserDelete",callTC.getPropertyValue("ResponseTypeUserDelete"));

def responseType = tC.getPropertyValue("ResponseTypeUserDelete");

log.info "Response Type is:  ----> "+ responseType;


if (responseType == "SUCCESS")
	{              
		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);

			String sql = """select accUsr.status USER_STATUS, usrHstry.status USER_HISTORY_STATUS, 
			usrSAMLAssrt.status USER_SAML_STATUS, usrHstry.DESCRIPTION 
			FROM ACCOUNT_USER accUsr INNER JOIN USER_STATUS_HISTORY usrHstry
			ON accUsr.user_oid = '$userID' and usrHstry.status='deleted'
			and accUsr.user_oid = usrHstry.user_oid INNER JOIN NODE_USER ndUsr
			ON accUsr.user_oid=ndUsr.user_oid INNER JOIN node_user_saml_assertion usrSAMLAssrt
			ON ndUsr.row_oid = usrSAMLAssrt.node_user_id""";
			
			log.info sql;
			
			results = a.SelectFromDB(sql,dbHost);

		//b.dbConnClose();
		assert results.length() > 0;
		log.info "results" + results;
		
		def myXML = new XmlSlurper().parseText(results);   
		def i = 0;

		for (i;i&lt;=myXML.ResultSet.Row.size()-1;i++)
			{  
				if (myXML != null) 
				{
					log.info "User Status from ACCOUNT_USER table is -----      " + myXML.ResultSet.Row.USER_STATUS[0].text();
					assert myXML.ResultSet.Row.USER_STATUS[0].text() == context.expand( '${#TestCase#Status}' );

					if(context.expand( '${#TestCase#Status}')=='deleted')
						{
							assert myXML.ResultSet.Row.DESCRIPTION[0].text() == "User Deleted" ;
							assert myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							log.info "Description from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.DESCRIPTION[0].text();
							log.info "User status from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text();
							log.info "SAML status from NODE_USER_SAML_ASSERTION is -----" + myXML.ResultSet.Row.USER_SAML_STATUS[0].text();                                                   
						}
					else
					{
						assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == "active" ;
					}
					log.info "User DB Validations Passed"; 
				}
				
				else 
				{
					assert XMLbody == "";
				}          
			}
	}
else
	{
		log.info "DB Validations skipped due to non SUCCESS scenario";
	}

</script></con:config></con:testStep><con:properties><con:property><con:name>dbxmlresponse</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91160</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E52C7ACD89FD834FE0401F0A07991922</con:value></con:property><con:property><con:name>dbxmlresponse_rowOID</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
    <Row rowNumber='2'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00038_UserDelete_FUNC_CS_Basic_Delete_Full_200_OK_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_Access_Portal_CS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_User_CLG_Details" searchProperties="true" id="d2b2d499-5c24-479e-9969-404560acf0db"><con:settings/><con:testStep type="groovy" name="Update_User_CLG_Details" id="092d897d-5a1b-434e-b3d0-90fdb21bd08c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );

def nodeuserID = context.expand('${#TestCase#UserID}' );
def clguserID = context.expand('${#TestCase#CLGUserID}' );


a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

//log.info b.userGetfromNodeUserId(nodeuserID);

if(context.expand( '${#TestCase#Action}' ) == "addclg")
{
sql = """DECLARE
BEGIN
insert into USER_LEGAL_GUARDIAN values(sys_guid(),
'$nodeuserID',
'$clguserID',
'"""+context.expand('${#TestCase#CLGAttestationStatus}' )+"""',
sysdate,
null,
null);
commit;
END;""";
}
else
if(context.expand( '${#TestCase#Action}' ) == "removeclg")
{
sql = """delete from USER_LEGAL_GUARDIAN where USER_OID = '$nodeuserID'""";
}

a.dbConnExecuteUpdate(sql,dbHost);

</script></con:config></con:testStep><con:properties><con:property><con:name>Action</con:name><con:value>addclg</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>UserID</con:name><con:value>E4890111840E60DCE0401F0A05993DE1</con:value></con:property><con:property><con:name>CLGAttestationStatus</con:name><con:value>pending</con:value></con:property><con:property><con:name>CLGUserID</con:name><con:value>E488FA3B9A214958E0401F0A05993DE5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91162</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00002_US_UserDelete_FUNC_Pending_CLG_Delete_Self_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_GeoProfile</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_DB_Validation" searchProperties="true" id="c4b23f47-43c5-4476-ac81-eaa1b66c5619"><con:settings/><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d7765da1-c221-46a8-b0ee-4ada2ad4098a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

tC.setPropertyValue("ADULT_DOB_XML",callTC.getPropertyValue("ADULT_DOB_XML"));
tC.setPropertyValue("YOUTH_DOB_XML",callTC.getPropertyValue("YOUTH_DOB_XML"));
tC.setPropertyValue("CHILD_DOB_XML",callTC.getPropertyValue("CHILD_DOB_XML"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("ResponseTypeUserCreate",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("GeoProfile",callTC.getPropertyValue("GeoProfile"));
tC.setPropertyValue("role",callTS.getPropertyValue("role"));

tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_ACCOUNT_USER_Table" id="88f3d83f-4381-4a06-958f-b95673d0a3fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

tC.setPropertyValue("IsMinor","");
tC.setPropertyValue("Requestee","");

def dbHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");

def BirthDate = context.expand( '${#TestCase#DateOfBirth}' );
def myXML1 = null;
def finalbday = null;

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

			
log.info "Response Type is:  ----> "+ responseType;

def cHILD_DOB_XML = context.expand( '${#TestCase#CHILD_DOB_XML}' )
def aDULT_DOB_XML = context.expand( '${#TestCase#ADULT_DOB_XML}' )
def yOUTH_DOB_XML = context.expand( '${#TestCase#YOUTH_DOB_XML}' )

def dateOfBirth = context.expand( '${#TestCase#DateOfBirth}' )
def privilege = context.expand( '${#TestCase#Privilege}' )


if (responseType == "SUCCESS")
     {
		Result = b.userGetRow(userID);
	
		log.info "Result Set:   " + Result		
		myXML1 = new XmlSlurper().parseText(Result);		
		log.info "Actual Rows ==  " + myXML1.ResultSet.Row.size();
		
		assert myXML1.ResultSet.Row.size() == 1;       	
		assert myXML1.ResultSet.Row.STATUS == 'blocked:tou';
		log.info "privelege ;; " + myXML1.ResultSet.Row.PRIVILEGE;
		assert myXML1.ResultSet.Row.PRIVILEGE == tC.getPropertyValue("Privilege");
		assert myXML1.ResultSet.Row.USERNAME == tC.getPropertyValue("UserName");
		assert myXML1.ResultSet.Row.GIVEN_NAME == tC.getPropertyValue("GivenName");
		assert myXML1.ResultSet.Row.SURNAME == tC.getPropertyValue("SurName") ;
		assert myXML1.ResultSet.Row.PRIMARY_EMAIL == tC.getPropertyValue("PrimaryEmail") ;
		assert myXML1.ResultSet.Row.TELEPHONE == tC.getPropertyValue("TelephoneNumber") ;
		assert myXML1.ResultSet.Row.MOBILE_TELEPHONE == tC.getPropertyValue("MobileTelephoneNumber") ;

        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#CHILD_DOB_XML}' ))
        { 
			log.info "I am CHILD";
			tC.setPropertyValue("Requestee","CHILD");
			
			BirthDate = tC.getPropertyValue("CHILD_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'CHILD';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;        
        } 
		else 
		if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#YOUTH_DOB_XML}' ))
        {
			log.info "I am YOUTH";
			tC.setPropertyValue("Requestee","YOUTH");
			
			BirthDate = tC.getPropertyValue("YOUTH_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'YOUTH';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
         } 
        else 
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#ADULT_DOB_XML}' ))
        {
			log.info "I am ADULT";
			tC.setPropertyValue("Requestee","ADULT");
			
			BirthDate = tC.getPropertyValue("ADULT_DOB_XML");
			
			assert myXML1.ResultSet.Row.AGE_CLASS == 'ADULT';
			
			tC.setPropertyValue("IsMinor","false");
  /*        
         if(context.expand( '${#TestCase#attested}' ) == 'true')
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
          }
          else
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME != 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME != 'null' ;	
          }
   */        
        } 

          // Retrieving Birth Date in proper format
 /******************************************************************************************************/
          
         bdaystring = myXML1.ResultSet.Row.BIRTH_DATE.toString();

         int lastspace = bdaystring.lastIndexOf(' ');

         finalbday = bdaystring.substring(0,lastspace);
          
         log.info "Birth Day:  " + finalbday;
       
        assert finalbday == BirthDate;

/******************************************************************************************************/

        assert myXML1.ResultSet.Row.COUNTRY == context.expand( '${#Project#GeoProfile}');

        if(context.expand( '${#TestCase#attested}' ) == 'true')
        {
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_DATE != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ENTY != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ID != null ;
        }  

      log.info "User ACCOUNT_USER table Validations Passed";
               
   }// end if for success response check
  else
  { 
  	assert  myXML1.ResultSet.Row.size() == 0;
  	log.info "No Validation Required";
  	testRunner.gotoStepByName("End_Of_DB_Validations");
  }
  
   
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_NODE_USER_Table" id="49705387-620b-49cb-a9bc-0928f1079024"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def geoProfile = context.expand( '${#Project#GeoProfile}' )


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

def role = tC.getPropertyValue("role");

log.info "Role : --- " + role;

//log.info b.accountGetfromNodeAccountId(accID);

String sql = """select to_char(rawtohex(NODE_OID)) NODE_OID from NODE_USER where USER_OID = hextoraw('$userID')""";

log.info sql;

results = a.SelectFromDB(sql,dbHost);

//log.info results;

/*
*  If zero length, no need to continue;
*/
  assert results.length() > 0;

  def myXML = new XmlSlurper().parseText(results);
  
  log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";


if (responseType == "SUCCESS")
{
	assert myXML.ResultSet.Row.size() > 0;

// Modified to comply with Generic Portal
//    if(context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:dece:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:coordinator:customersupport')

	if( role ==  'urn:dece:role:dece:customersupport' || role == 'urn:dece:role:coordinator:customersupport')
     { 	
       assert myXML.ResultSet.Row.size() == 4;	 
       //assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 
       log.info "DECE Node User Validation Passed";	    
     }
     else
     { 
       assert myXML.ResultSet.Row.size() > 4;
      // assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 		 
      // assert myXML.ResultSet.Row[1].NODE_OID == "10"; 
       log.info "3rd Party Node User Validation Passed";    
     }
	
}
else
{
	assert myXML.ResultSet.Row.size() == 0;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_Policies" id="482c9984-194b-4b02-886e-06be0089e7c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def geoProfile = context.expand( '${#Project#GeoProfile}' )


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

def role = tC.getPropertyValue("role");

		String sql = """select POLICY_CLASS,STATUS,RESOURCE_ID from POLICY P,POLICY_RELATIONSHIP PR,POLICY_RESOURCE PRE where PR.POLICY_ACTOR = hextoraw('$userID')
		and P.POLICY_OID = PR.POLICY_OID and PR.POLICY_OID = PRE.POLICY_OID(+) ORDER BY POLICY_CLASS""";


		this.log.info "Query is:  " + sql;
		results = a.SelectFromDB(sql,dbHost);
		
		log.info "Policies Results : " + results;
		/*
		*  If zero length, no need to continue;
		*/
		assert results.length() > 0;
		
		def myXML = new XmlSlurper().parseText(results);
		
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		
		assert myXML.ResultSet.Row.size() > 0;

		//if( (context.expand( '${#TestCase#IsMinor}')=="true") &amp;&amp; (context.expand( '${#Project#AgeClass}')=="YOUTH") ) 

		if (context.expand( '${#TestCase#IsMinor}')=="true") 
			{
				if((geoProfile == "US")|| (geoProfile == "CA"))
					{
						assert myXML.ResultSet.Row[0].POLICY_CLASS == "302";  
						//      assert myXML.ResultSet.Row[0].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
						assert myXML.ResultSet.Row[0].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
					}
				else if ((geoProfile == "GB") || (geoProfile == "AU") || (geoProfile == "NZ") || (geoProfile == "IE") || (geoProfile == "AT") || (geoProfile == "CH") || (geoProfile == "DE") || (geoProfile == "FR"))
					{
						assert myXML.ResultSet.Row[0].POLICY_CLASS == "300"; 

						assert myXML.ResultSet.Row[1].POLICY_CLASS == "302";  
						//      assert myXML.ResultSet.Row[1].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
						assert myXML.ResultSet.Row[1].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
					} 
			} 
		else
			{
				assert myXML.ResultSet.Row[0].POLICY_CLASS == "304";
			}


log.info "Policy Validation Passed";	


</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_LEGAL_GUARDIAN_Table" id="69330bd7-d073-40bf-a7af-04bbf8e0e165"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if ((context.expand( '${#TestCase#IsMinor}' )=="true") &amp;&amp; context.expand( '${#Testcase#Requestee}')=="CHILD")
	{
	  	def dbHost = context.expand( '${#Project#targetSystem}' );
		def userID = context.expand( '${#TestCase#User_OID}' );
	  	def node_OID = context.expand( '${#Project#Node_OID}' );

		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);
		
		String sql = """select ATTESTATION_STATUS from USER_LEGAL_GUARDIAN where USER_OID = hextoraw('$userID')""";
		
		results = a.SelectFromDB(sql,dbHost);
		
		/*
		*  If zero length, no need to continue;
		*/
		assert results.length() > 0;
		
		def myXML = new XmlSlurper().parseText(results);
		
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		
		assert myXML.ResultSet.Row.size() > 0;
		
		assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  
		
		log.info "Legal Guardian Validation Passed";	
	}
else
	{
		log.info "No Legal Guardian Validation Required";
	}
</script></con:config></con:testStep><con:testStep type="groovy" name="End_Of_DB_Validations" id="418d894c-0d5e-41ce-af71-087c1cf97b82"><con:settings/><con:config><script>

log.info "DB Validations Complete";</script></con:config></con:testStep><con:properties><con:property><con:name>ADULT_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>attested</con:name><con:value/></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2002-09-08</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>IsMinor</con:name><con:value>true</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E60068AEF0205738E0401F0A07990D3F</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90508</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>Role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_GeoProfile</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Status</con:name><con:value>FAIL</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00021_UserCreate_AUTH_Creator_ADULT_Full_New_YOUTH_Standard_201_CREATED_P1</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E60068AEF0215738E0401F0A07990D3F</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1999-09-14</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>GeoProfile</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters><con:breakPoints><con:testStepId>d7765da1-c221-46a8-b0ee-4ada2ad4098a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>418d894c-0d5e-41ce-af71-087c1cf97b82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete_DB_Validation" searchProperties="true" id="48b71661-ccd2-4642-af3b-32fe9e8abc9f"><con:settings/><con:testStep type="groovy" name="Verify_User_DB_Details" id="142255c0-283c-4c33-b8e9-5f6a22d944a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();

def dbHost = context.expand( '${#Project#targetsystem}');
def accID = context.expand( '${#TestCase#ACCOUNT_OID}' )

def aCCOUNT_STATUS = context.expand( '${#TestCase#ACCOUNT_STATUS}' )
def uSER_SAML_STATUS = context.expand( '${#TestCase#USER_SAML_STATUS}' )
def uSER_STATUS = context.expand( '${#TestCase#USER_STATUS}' )

def Result;
def myXML;
a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbAccount(log,dbHost);
c = new dbUtils.dbUser(log,dbHost);

	 	
	 	String sql = """Select to_char(rawtohex(accusr.user_oid)) user_oid, accusr.status USER_STATUS,acc.status ACCNT_STATUS,
	 					to_char(rawtohex(ndusr.node_user_id)) node_user_id, to_char(rawtohex(ndusr.node_oid)) node_oid,nusa.status NUSA_STATUS 
	 					from account acc INNER JOIN account_user accusr 
	 					ON 
	 					acc.account_oid=hextoraw('$accID') 
	 					and accusr.status&lt;>'deleted' 
	 					and acc.account_oid=accusr.account_oid  
	 					INNER JOIN node_user ndusr 
	 					ON 
	 					ndusr.node_user_saml_uuid is not null 
	 					and accusr.user_oid=ndusr.user_oid  
	 					LEFT OUTER JOIN  node_user_saml_assertion nusa 
	 					ON  
	 					ndusr.node_user_saml_uuid=nusa.node_user_saml_uuid""";

	log.info "SQL Query : " + sql;
		Result = a.SelectFromDB(sql,dbHost);
		log.info "Result  : " + Result
	 	myXML = new XmlSlurper().parseText(Result);
	
	 	log.info "Results  "+  myXML;
	 	def count = myXML.ResultSet.Row.size();
	 	def i = 0;
	 	for (i; i&lt;=count-1;i++)
	 	{ 
	 		log.info "loop " + i
	 		assert myXML.ResultSet.Row[i].USER_STATUS.toString() == context.expand('${#TestCase#USER_STATUS}');
	 		assert myXML.ResultSet.Row[i].ACCNT_STATUS.toString() == context.expand('${#TestCase#ACCOUNT_STATUS}');
	 		assert myXML.ResultSet.Row[i].NUSA_STATUS.toString() == context.expand('${#TestCase#USER_SAML_STATUS}');		 		
	 	}

  log.info "User Validations Passed";


</script></con:config></con:testStep><con:properties><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E8C6CD5926953BF7E0401F0A05991D7F</con:value></con:property><con:property><con:name>ACCOUNT_STATUS</con:name><con:value>deleted</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>AccountGet_PERM</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00018_AccountGET_PERM_API_Invocation_from_a_DECE_CS_P0</con:value></con:property><con:property><con:name>USER_SAML_STATUS</con:name><con:value>deleted</con:value></con:property><con:property><con:name>USER_STATUS</con:name><con:value>active</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>142255c0-283c-4c33-b8e9-5f6a22d944a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Update_API" searchProperties="true" id="08b87d9f-37db-48c4-8cbe-802139af2bc0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="246d2659-9e5c-43be-9eff-d74ded2d7ff5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeAccountUpdate"));
</script></con:config></con:testStep><con:testStep type="groovy" name="SET PEM" id="e03c0ed0-26db-4a15-ad70-c8df1e410a0c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep.name]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountUpdate" id="3bf4a2b3-5182-4f73-b6ea-9c73ed5272df"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountUpdate" mediaType="application/xml" sslKeystore="dececs_concat.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#eTag}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#TestCase#AccountDisplayName}</DisplayName>
<Country>${#TestCase#Country}</Country>
${#TestCase#ResourceStatus}
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="dab2a637-4b7f-49ba-b4dc-0c932894c919"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="57ff0b2c-185c-46f0-84cd-616e61b4324b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = false;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The country code is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "The member's user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACC_ID_INVALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountIDNotValid";
		errorReason = "The account ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIDNotValid";
	break;

	case "CANNOT_UPDATE_COUNTRY":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CountryCannotBeChangedOnceSet";
		errorReason = "The country cannot be changed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CountryCannotBeChangedOnceSet";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";		
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;


     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;	

     case "STS_UPDT_NOT_ALLWD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;


	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
//if (XMLbodynull) {
//	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
//} else {
//	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
//}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
	/*else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
	
	}*/
} 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>E6BDE72E56ADA402E0401F0A05991956</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">670</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//dececs_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00006_AccountUpdate_FUNC_NonCS_Account_Status_notActive_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>Account_Update_DECECS_P1</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc5s6EH3vr2DoYwcjbGwME3vGXzRu4qa1ndwkL3cUsdi6F4SDBCb59ZVwILbr5Kb3idGy2j27e3SkM47jqOkNOIdU0IRp03FP/zts2fDg2JYRdpBj2G7QMlwEoYHtdtAMms2HFgS6NuU8gynjAjPR05vIahkWMpC7RF0Pdbxmp+F0Ove6dgMpl6GlSwPpWhFHjHtl2p6epcxLMKfcYzgG7gniLQazS096erjCpPfPdijLhGl/LcTGM03SCIBAFJEGSWLzzDzwOQu4t6ArhkWWwkvOgPf0l73b7baxbTWSdGU2EUImck3pE3C6+qz3P1WbIZiyMNmtR5gljBIc0WesQM1ArJNAG0SrJKViHb8R2jItpEIbUBCDWDb7rJuvCUp0H4x0ADLl2OBrbFXB5hBCCoyAdj2f9vTPH5vgbu8yxYyHSRrzo/WfQQKWQ5RsIDB4VVmF7uMRT7SrfwbEmzISZZzm8F3RZIMJcO1HCiEtLimX5Au4Vo5fK3jFMCB/MpIzcx+nhG2e6MyYroCL/zOv/VntotzgKIN+Hi/iZ+6ezy5858vDQ2zffWfWaDw/H173Sgj7zjtQ9ahf1sdErXn1suk6CO2frSfnrvX1NrxxCoCrOL6Z5M/d/PYO429N924+Mml49SWzV48dJobia3DvFO2BnX9lT0HzZ2fiXBTXK7a0PpHbmyLYiM2wC9G543YYQf7zxB2bYXA1Qtb5/bfZbB0t0Wq2HDqh6Fxe3a9I8vyU+4iFs0dxbft3X+xZ2Ionk09/Xfiz1ii7HPPzx617t10Us95rTfs1HBorOVhkD/8AEdVSUWM61nw5LyzelxZloYERlq7eRukTF8CE3le7lKx4mRQfGnhymLv1pGsP212361iuPx6ORhNkI8tHA9R2XRuN/Ep/diiOII4SFlKVSynsjj/vAySxx4EFkBp5kpE1cP2diGMssDZlc3kwEsZhmUgFH45a/gBNrKaDkNMdtBDyfcvu2h3Hcbq+L3X4eyKu2FU6CAWkB+ptWQfqPQdCNxSUxCuec0l0LmRLHnGeichq5LjBIJOXQKp02Gva3bbJabyJQAE24yTIImhs1puyQSbffZsGJry0zifL8vy9Wd7xv6oT0iegyoGrWoYgpwknriGrKuTtgu39gqvwgyyg6pjJtoqUkh2Sw1+vbFE0qakiK6og157HhoOo5nFBdaIgp6Tme31JS42XKtCvxvGIG4+NLM+zcgCOUrhUhjctEznmAkgmZeppmfwLzKxDmB+6IWrUR5lr+yG+TKzZQmABsaSLVi4/8DxYAFfPg6mke/HRt8dBStk3AYU4ZRtF8hWhEL/70CAeUX7S/EN+tkn6WvipWHt5ZJ3yTSAoW6mVug+e3iAFSWRYKgUsSfeDnwpwKvmhsW5yjUVINj1kAt7+oyll6umYkCRjYjrWS8O+WpY4xdMGvFen38KUivxyxRb8zSv2dna5kLoVY732pf/tbNCSLgTkLk5LLD29kK9FmZyt9tT5BeCxQNt+u4vGyB233fG+QFudUadu4EEl/d/Mv1v2enp8Hvq/AA==</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E84B4F580D09D59DE0401F0A059916C6</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:token_rejected">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E84B4F580D09D59DE0401F0A059916C6</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>AccountDisplayName</con:name><con:value>accname_20131009_040625</con:value></con:property><con:property><con:name>eTag</con:name><con:value>"E77C7AE4D2E86A9AE0401F0A07991A4A:C2E55E8"</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E763CB6F92EFB57BE0401F0A05995250</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4c267fcb-f9a3-4c2a-b8ba-ac05705d407d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Update_DB_Validation" searchProperties="true" id="630fb090-b5de-4865-be32-7dfd3edee538"><con:settings/><con:testStep type="groovy" name="Verify_Account_DB_Details" id="c3c0f19a-dee7-40a4-905d-eb8503f49037"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();

def dbHost = context.expand( '${#Project#targetSystem}') ;
def userName = context.expand( '${#TestCase#Username}' ) 
def rowcount = context.expand( '${#TestCase#Rowcount}' );


def Result;
def myXML;
a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbAccount(log,dbHost);
c = new dbUtils.dbUser(log,dbHost);

	 	log.info "SQL Query " 
	 	String sql = """select A.STATUS,to_char(rawtohex(A.ACCOUNT_OID)) ACCOUNT_OID,
			A.DISPLAY_NAME DISPLAY_NAME,to_char(rawtohex(B.HISTORY_OID)) HISTORY_OID
			from ACCOUNT A, ACCOUNT_STATUS_HISTORY B
			where A.ACCOUNT_OID = (select account_oid from account_user where username = lower('$userName')) 
			and B.HISTORY_OID = (select max(HISTORY_OID) from ACCOUNT_STATUS_HISTORY 
			where A.ACCOUNT_OID = (select account_oid from account_user where username = lower('$userName')))""";
				
		Result = a.SelectFromDB(sql,dbHost);
		log.info "Result  : " + Result
	 	myXML = new XmlSlurper().parseText(Result);
	
	 	log.info "Results  "+  myXML;
	 	def count = myXML.ResultSet.Row.size();
	 	log.info "RowCount is  " + count;
		assert (myXML.ResultSet.Row.size().toString() == rowcount);

 		assert myXML.ResultSet.Row.STATUS.text() == context.expand( '${#TestCase#ACCOUNT_STATUS}' );
	     assert myXML.ResultSet.Row.ACCOUNT_OID.text() == context.expand( '${#TestCase#account_oid}' );
	     assert myXML.ResultSet.Row.DISPLAY_NAME.text() == context.expand( '${#TestCase#DisplayName}');	 		

		log.info " Account DB Validations Completed";




</script></con:config></con:testStep><con:properties><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E84B4F580D0AD59DE0401F0A059916C6</con:value></con:property><con:property><con:name>ACCOUNT_STATUS</con:name><con:value>deleted</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Account_Update_DECECS_P1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00006_AccountUpdate_FUNC_NonCS_Account_Status_notActive_P2</con:value></con:property><con:property><con:name>USER_SAML_STATUS</con:name><con:value>deleted</con:value></con:property><con:property><con:name>USER_STATUS</con:name><con:value>active</con:value></con:property><con:property><con:name>Username</con:name><con:value>AccountUpdate_firstuser20131009_1381305985800</con:value></con:property><con:property><con:name>DisplayName</con:name><con:value>accname_20131009_040625</con:value></con:property><con:property><con:name>Rowcount</con:name><con:value>1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>142255c0-283c-4c33-b8e9-5f6a22d944a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountUserCreate_API" searchProperties="true" id="b2d23ec3-50b5-49e3-865d-407012668038"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("accountname",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("user_oid1",null);
tC.setPropertyValue("account_oid",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("ResponseType",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("AccountDisplayName",callTC.getPropertyValue("AccountDisplayName"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tP.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("User_Country",callTC.getPropertyValue("User_Country"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));




</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
 tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

  else
if(tP.getPropertyValue("Country")=="LU")
{
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

else
if(tP.getPropertyValue("Country")=="BE")
{
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}

else
if(tP.getPropertyValue("Country")=="NL")
{
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob);
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Generate AccountName"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def today= new Date().format( 'yyyyMMdd_hhmms' );

tP.setPropertyValue("DisplayName","ucr5_accname_"+today);

def myTS = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountUserCreate_API").getTestStepByName("Setting constants based on Geo Profile");

log.info" myTS "+ myTS.name;

myTS.setDisabled(false);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountUserCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountUserCreate"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountUserCreate" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="RET_2_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account
    xmlns="${#Project#coordinatorSchema}">
    <DisplayName>${#Project#DisplayName}</DisplayName>
    <Country>${#TestCase#Country}</Country>
    <UserList>
        <User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}"
            xmlns="${#Project#coordinatorSchema}"
            xmlns:ns2="http://www.movielabs.com/md"
            xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"
            xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
            <Name>
                <GivenName>${#TestCase#GivenName}</GivenName>
                <SurName>${#TestCase#SurName}</SurName>
            </Name>
            <ContactInfo>
                <PrimaryEmail>
                    <Value>${#TestCase#PrimaryEmail}</Value>
                    <ConfirmationEndpoint>confirmed</ConfirmationEndpoint>
                </PrimaryEmail>
                <AlternateEmail>
                    <Value>${#TestCase#AlternateEmail}</Value>
                </AlternateEmail>
                <Address>
                    <PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
                    <PostalCode>${#TestCase#PostalCode}</PostalCode>
                    <Locality>${#TestCase#Locality}</Locality>
                    <StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
                    <Country>${#TestCase#Country}</Country>
                </Address>
                <TelephoneNumber>
                    <Value>${#TestCase#TelephoneNumber}</Value>
                </TelephoneNumber>
                <MobileTelephoneNumber>
                    <Value>${#TestCase#MobileTelephoneNumber}</Value>
                </MobileTelephoneNumber>
            </ContactInfo>
            <Languages>
                <Language>${#TestCase#Language1}</Language>
            </Languages>
            <!-- <DateOfBirth> depricated </DateOfBirth> --> 	${#TestCase#LegalGuardian} 	
            <Credentials>
                <Username>${#TestCase#UserName}</Username>
                <Password ${#Project#RandomPwdFlag}>${#TestCase#password}</Password>
            </Credentials>
            <UserRecoveryTokens>
                <RecoveryItem>
                    <QuestionID>${#TestCase#QuestionID1}</QuestionID>
                    <QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
                </RecoveryItem>
                <RecoveryItem>
                    <QuestionID>${#TestCase#QuestionID2}</QuestionID>
                    <QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
                </RecoveryItem>
            </UserRecoveryTokens> 	${#TestCase#ResourceStatus} 
        </User>
    </UserList>
</Account>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountUserCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def coordinatorSchema = context.expand( '${#Project#coordinatorSchema}' )

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
def primaryEmail = context.expand( '${#TestCase#PrimaryEmail}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = context.expand( '${#Project#expectHTTPcontenttype}' );
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
		expectHTTPconnection = "close";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
		expectHTTPconnection = "close";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
		expectHTTPconnection = "close";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
		errorReason = "The first member must be 18 years or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;

	case "INVALID_PASSWORD":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The password is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		//errorReason = "The primary email address is not valid. - "+ tC.getPropertyValue("PrimaryEmail");
		errorReason = "The primary email address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_PRIMARY_EMAIL2":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid. - "+ tC.getPropertyValue("PrimaryEmail");
		//errorReason = "The primary email address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
		expectHTTPconnection = "close";
	break;
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		//errorReason = "The telephone number is not valid.";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#TestCase#TelephoneNumber}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
		expectHTTPconnection = "close";
	break;

	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
		expectHTTPconnection = "close";
	break;

	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tC.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tC.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
			expectHTTPconnection = "close";
	break;	

	case "SaxParserException":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	     log.info "###############";
		//errorReason = "cvc-complex-type.2.4.a: Invalid content was found starting with element 'Value'. One of '{\"http://www.decellc.org/schema/2013/10/coordinator\":Address, \"http://www.decellc.org/schema/2013/10/coordinator\":TelephoneNumber, \"http://www.decellc.org/schema/2013/10/coordinator\":MobileTelephoneNumber}' is expected.";
		
		errorReason = "cvc-complex-type.2.4.e: 'Value' can occur a maximum of '5' times in the current sequence. This limit was exceeded. At this point one of '{\"$coordinatorSchema\":Address, \"$coordinatorSchema\":TelephoneNumber, \"$coordinatorSchema\":MobileTelephoneNumber}' is expected.";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
		expectHTTPconnection = "close";
	break;

	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
		expectHTTPconnection = "close";
	break;

	case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
		expectHTTPconnection = "close";
	break;

	case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

     case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
		expectHTTPconnection = "close";
	break;

	 case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
		expectHTTPconnection = "close";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
		expectHTTPconnection = "close";
	break;

	case "UserElement_Not_Present":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "cvc-complex-type.2.4.a: Invalid content was found starting with element 'Password'. One of '{\"$coordinatorSchema\":Username}' is expected.";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
		expectHTTPconnection = "close";
	break;
	case "UserListCannotHaveMoreThanOneUser":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "UserList can not have more than one user set in the request.";
		errorID     = "urn:dece:errorid:org:dece:UserListCannotHaveMoreThanOneUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserListCannotHaveMoreThanOneUser";
	
	break;
	case "Account_UserCountry_NotValid":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The country is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserCountryNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserCountryNotValid";
		expectHTTPconnection = "close";
	break;
	case "Account_UserAddress_NotValid":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The address is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
		expectHTTPconnection = "close";
	break;
	case "Invalid_Language":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The language is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
		expectHTTPconnection = "close";
	break;
	case "Invalid_Telephone_Number":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The mobile telephone number is not valid. - "+ context.expand('${#TestCase#MobileTelephoneNumber}');
		errorID     = "urn:dece:errorid:org:dece:AccountUserMobilePhoneNumberNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserMobilePhoneNumberNotValid";
		expectHTTPconnection = "close";
	break;
	case "SignName_Already_Registered":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The sign-in name already exists.";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
		expectHTTPconnection = "close";
	break;
	case "Primary_Language_Not_Valid":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The primary language is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
		expectHTTPconnection = "close";
	break;
	case "Security_Question_Duplicate":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The security question is a duplicate.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityQuestionDuplicated";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityQuestionDuplicated";
		expectHTTPconnection = "close";
	break;
	case "Security_QuestionID_Not_Valid":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The security question is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityQuestionIDNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityQuestionIDNotValid";
		expectHTTPconnection = "close";
	break;
	case "Account_User_Valid_BirthDate_Required":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The date of birth is required.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserValidBirthDateRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserValidBirthDateRequired";
		expectHTTPconnection = "close";
	break;
	case "Display_Name_Null":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The display name is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
		expectHTTPconnection = "close";
	break;
	case "Account_Country_User_Country_NotValid":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The country code is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
		expectHTTPconnection = "close";
	break;

}


log.info "errorReason@########## " + errorReason;
tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);


// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	////assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

      if (tP.getPropertyValue("URLEncode") == "NO"){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
 	 def arrayString = urlStr.split("Account/");
      log.info "string=="+arrayString[1];
      arrayString= arrayString[1].split("/User/");
      log.info "Node_User_ID=="+arrayString[1]
      log.info "Node_Account_ID=="+arrayString[0]

       int lastColon = arrayString[1].lastIndexOf(':');
       accountid     = arrayString[0].substring(lastColon+4);
       userid     = arrayString[1].substring(lastColon +4);
       def node_User = arrayString[1];    
       def node_Account = arrayString[0];
       
         	log.info "userid:  " +userid; 
         	log.info "node_User: "+node_User;
		log.info "accountid:  " +accountid; 
         	log.info "node_Account: "+node_Account;
                                        
         
         tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
         tC.setPropertyValue("NODE_USER_ID",userid);

	    tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);
         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
                                           
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");

      def arrayString = urlStr.split("Account/");
      log.info "string=="+arrayString[1];
      arrayString= arrayString[1].split("/User/");
      log.info "Node_User_ID=="+arrayString[1]
      log.info "Node_Account_ID=="+arrayString[0]

       int lastColon = arrayString[1].lastIndexOf(':');
       accountid     = arrayString[0].substring(lastColon + 3);
       userid     = arrayString[1].substring(lastColon + 3);
       def node_User = arrayString[1];
       def node_Account = arrayString[0];
       
          log.info "userid:  " +userid; 
          log.info "node_User: "+node_User;
		log.info "accountid:  " +accountid; 
         	log.info "node_Account: "+node_Account;
                                
         tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
         tC.setPropertyValue("NODE_USER_ID",userid);

	    tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);
         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
//		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info errorReason;
		this.log.info myXML.Error.Reason.toString() ;
		
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info errorLink;
		log.info myXML.Error.ErrorLink.toString()
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {  	
  		def dBHost = context.expand( '${#Project#targetsystem}' )

  		log.info "dBHost==>" + dBHost
  		
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		         		  def uname=tC.getPropertyValue("UserName").toLowerCase();
		         		  String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                 //String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
					  String a = dbUser.userGetAccountOIDbyUsername(uname)
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                 tP.setPropertyValue("account_oid", a);
		                 
		              }
		          catch(Throwable e) {
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		     		     }
				}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the Username and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML", tP.getPropertyValue("Request_XML_Buffer"));


callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL1"));

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script"><con:settings/><con:config><script>def step = testRunner.testCase.getTestStepByName("AccountUserCreate");

step.setPropertyValue("Encoding","UTF-8");</script></con:config></con:testStep><con:properties><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>2000-04-06</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid</con:name><con:value>17AF38AAF30D61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>User_Country</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>UserName</con:name><con:value>accountget_firstuser20150604_1433413077479</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_Firsrt_User_Create_STS_Policies</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>SurName</con:name><con:value>accountget_firstuser20150604_1433413077479</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID</con:name><con:value>1200</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:17AF38AAF30461C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:17AF38AAF30461C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F38AAF30461C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\Certs\QALP2/RET_2_concat.pem</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa2.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED/User/urn:dece:userid:org:dece:17AF38AAF30461C7E05305991F0A7EED</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>accountget_firstuser20150604_1433413077479</con:value></con:property><con:property><con:name>FirstFullUsername</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>DisplayName</con:name><con:value>dantulurieswaravenkatasatyanarayasuryasubhramanyajaganadhasaibashkarapraveenvarmajgdlghdlghdflghfdghdfjkghdfkjghdfjkghdfkghdfkghdfkghdfghdfkghdfkjghdfjkghdfjkghfdkhgjkdfhgjkdfhgfkdhgdfkghkdfhgkdfjghdfjkghdfjkghdfjkhjkhkjhfghdfkjkdfjghjkdfhgjkfdghfjkdjjjkff</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value/></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1996-06-08</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value/></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-08-09</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1996-06-08</con:value></con:property><con:property><con:name>account_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountDisplayName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6afcd2ee-d125-48d3-86d9-0b8f90dcad31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46be0a51-c956-4d1b-a875-7645d2176393</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4f5cc529-d448-4897-93a1-f2eaa1f5e99d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite Utility Test Cases" id="29e8cdd4-b32f-4148-ae3a-ef0e02b4df6a" disabled="true">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    
    
    
    
    
    
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true" id="3e631592-a3e8-42be-94c5-e4f208a401a8">
      <con:settings/>
      <con:testStep type="groovy" name="Rename Test Cases" id="c49f417a-5c75-482d-99fc-deabcf5c4952">
        <con:settings/>
        <con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "User_Get_GeoProfile";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Documents and Settings\\praveen.dantuluri\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{               
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

                newTestCaseName = br.readLine();
                log.info "Input Test Case Name: "+newTestCaseName;
                
                                targetTestCase.setFailOnError(true);
                                targetTestCase.name = newTestCaseName;    
}
</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true" id="63df2d8e-8a58-4955-be8e-c4eccb9b3ba4">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="6d43ab82-0256-41cb-944c-980322b1d977">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS Tokentype urn:dece:type:tokentype:saml2 Test Cases"; 

def oldString = """STS API - SecurityTokenExchange Invoked to Coordinator URL""";
def newString = """STS API - Invoked to Coordinator URL""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "-- Call STS SAML Token Exchange") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					stepScript = testStepList[j].getScript();
					stepScript = stepScript.replace(oldString, newString);

					/*
					*  Delete a step
					*/
					//targetTestStep.delete();

					/*
					*  Replaces step's script completely
					*/
					//stepScript = """""";
					targetTestStep.setScript(stepScript);		
				}
				
				//targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true" id="88abec67-0cfd-4158-ab1e-3dcbf6d69df0">
      <con:settings/>
      <con:testStep type="groovy" name="Set a Property" id="4aae0d70-4938-4154-a8b0-c9815b6cbb6e">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Holder for new sts";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "synced";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>FUNC_USER_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyName</con:name>
          <con:value>NumberOfPolicyRequestingEntities</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyValue</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Step for all Testcases in a Suite" searchProperties="true" disabled="true" id="99c778cf-bd1a-4293-b34d-53339dcae326">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="6fa579e3-343b-4c71-a90d-3e3530823dbd">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS Tokentype urn:dece:type:tokentype:DeviceAuthToken"; 
def stepName  = "Establish Stage for STS invocation as a Device";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename a Step" searchProperties="true" disabled="true" id="0e62a367-0dda-4249-af02-f64c612938a3">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="fad1a6f8-dba2-4686-8508-367c21c245f7">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS GET Node Role Type Test Cases"; 
def stepName  = "Call STS";
def stepNewName  = "Call STS GET - DeviceAuthToken";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Renaming Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestStep.name = stepNewName;
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="First_User_Create" disabled="true" id="1f6319fc-0958-44bc-a18f-e63653a0e8af"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Create_Firsrt_User_Create_STS_Policies" searchProperties="true" id="bf6be7d4-9561-4c60-9314-ec69bcea736d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f05e0c99-e0d5-45df-a3a3-69bdd405b626"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tS.getPropertyValue("nodeid"));




</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for First User Create" id="c45904a4-762a-4f06-974b-cc91555d52f3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "accountget_firstuser"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account User Create" id="16607a01-08f1-45c1-8587-cd696ca23e57"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountUserCreate_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create" id="823f71e5-447b-47c2-93ce-59ce6e6e5939" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API for First User" id="e295461c-81ad-43d9-8829-d547e6a8d66b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU" id="19645da3-f439-428e-b225-bd218007a1b9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC" id="919b68d1-fc2e-485e-8681-3867fe9cb1f2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20150203_125458</con:value></con:property><con:property><con:name>account_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1b5ffadf-613e-42a7-bfc7-fe9b2fdfa182</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_1b5ffadf-613e-42a7-bfc7-fe9b2fdfa182</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:iscportalcs1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1996-06-08</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value/></con:property><con:property><con:name>GivenName</con:name><con:value>accountget_firstuser20150604_1433413077479</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>17AF38AAF30461C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>17AF38AAF30461C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:17AF38AAF30461C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:17AF38AAF30461C7E05305991F0A7EED</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTM/HM6UvQJGOMIOCyhH1aNGjfnFCuoVIm5QmQTi//iYFKiB4ufcLzG43u8++5MmecpTErt/mHDJBGC3Nk5hyP9c2DZlRnyFOuE9RAtwX2A/aN33fLds+Wh8xSr1O03hzhrUoQmFkek4FzKqL6uYwwnUzgsbQjcIIOSeuMuVcQo9ygahoGq7t1EzbM+3qwLF9p+pX3XLVrb8apSfIuPKtTMq2sQI1501jLETqW9bHx0f5o1Jm2chybduxnm/6AR5DgozW6TKjPFDWWtnjcggY4hiXMUusU2vL5jTkfkBGFAmZwSpWeCiWbdkNS9mEnIx+GMVZCHs0Yrl4jiijBKOY/EW6PjcgxiwsteMRy4gYJweTcGzt2IQ5NrFTpT8MaxvakY62EGYcmXyMnJWvB4ggA4qh9PjQaxo/jutafnSQIcojliV8W/xveIDOIGYphCZfp7WCdrzDPZVqnQL2exTHkpMZ3OphTREGvuom4ONdlX5nEJF5n3A1oHOu0Vmb8HbEZTU6ZARc/J8GbTRn6eQJxRJa42fxfMk476XQja/ofXfoDJ487twuWDMHsGmcK4rWLsWdoSyGaHni7ummPvAcR0wiUbV/TRey8YTr7Hn67KCbRXD7Z3R5df3T8d5PhowGz0m3Npukj+2xDM4yt/Jnga7aZ6PAc3H0cl65vL9fdBoeiHvr+sG+mATT+8Y4QZXX+tyxzl4uerPF610/uJtUbtqXj6/kV9dL6gs7eJmmP2fy7n6SvDauP0j/isWy5w7sfkpG+KpyxaJh55o3i3Q28G/r1nc+kMN3wGIt6jHodUoXqktIfE9mWkNCM8pN/VSTDxdAhdHSpzR3+FLRHQl91cOl7NTbF5WTtvqxq55zXu/atYpdazScC7td73Y7a5JZotiBeM5oRHQsTbnLsfkeIE58DjSEzJwxqZiOG9947CCBSj36oC4BoxwGTNOzl5K5l0y8Exlyr+a9g5zK4cwzSrdM3NG7rB0JyLYpubJFyQ+ASUpA87Yea67mmgtViimaSRE75RkqU5CK2TNNsr5bPalZnCRpDBqolbBQxlBOx2leGIsv/10TYZ5rH7qDNze/bgcT2/22roGyCYk24DqbM1B9hD2vS2WdyuGUvc2U1+7bMiT6ZqmCiozgJZLtT59zogekGBKd03nw5q5xF+bHH99z1voGlrVbkSJUOCMbgdevt3oHFHO01h2dovK0LGczmfewbtuulSn3lq6RpYQAsFTcthiwCVCr8GId9ZAUwHeCF/ptiFKMaSCQgEQNXSkXj9gcAuB6c+ipyzI/di3ZCqlKJ2Au9unOY7X1aMTfLkbYx9pOqX+rvw+WhZ8d2+NrI47KUy0OgtCRlvQjsjgwGZgpt0TRH8s2ne9zsC/4trIocoFFqIEaSgGHv5Q0rzUNhDGTVPQ6Rq7Y5Nocp1ik4H8afXGT03mx35F/X/BMko8ABrUVcpL718+0r68AHW3w9SroAcqufEfZ2+haX9RfNRt12p3x1j8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTM/HM6UvQJGOMIOCyhH1aNGjfnFCuoVIm5QmQTi//iYFKiB4ufcLzG43u8++5MmecpTErt/mHDJBGC3Nk5hyP9c2DZlRnyFOuE9RAtwX2A/aN33fLds+Wh8xSr1O03hzhrUoQmFkek4FzKqL6uYwwnUzgsbQjcIIOSeuMuVcQo9ygahoGq7t1EzbM+3qwLF9p+pX3XLVrb8apSfIuPKtTMq2sQI1501jLETqW9bHx0f5o1Jm2chybduxnm/6AR5DgozW6TKjPFDWWtnjcggY4hiXMUusU2vL5jTkfkBGFAmZwSpWeCiWbdkNS9mEnIx+GMVZCHs0Yrl4jiijBKOY/EW6PjcgxiwsteMRy4gYJweTcGzt2IQ5NrFTpT8MaxvakY62EGYcmXyMnJWvB4ggA4qh9PjQaxo/jutafnSQIcojliV8W/xveIDOIGYphCZfp7WCdrzDPZVqnQL2exTHkpMZ3OphTREGvuom4ONdlX5nEJF5n3A1oHOu0Vmb8HbEZTU6ZARc/J8GbTRn6eQJxRJa42fxfMk476XQja/ofXfoDJ487twuWDMHsGmcK4rWLsWdoSyGaHni7ummPvAcR0wiUbV/TRey8YTr7Hn67KCbRXD7Z3R5df3T8d5PhowGz0m3Npukj+2xDM4yt/Jnga7aZ6PAc3H0cl65vL9fdBoeiHvr+sG+mATT+8Y4QZXX+tyxzl4uerPF610/uJtUbtqXj6/kV9dL6gs7eJmmP2fy7n6SvDauP0j/isWy5w7sfkpG+KpyxaJh55o3i3Q28G/r1nc+kMN3wGIt6jHodUoXqktIfE9mWkNCM8pN/VSTDxdAhdHSpzR3+FLRHQl91cOl7NTbF5WTtvqxq55zXu/atYpdazScC7td73Y7a5JZotiBeM5oRHQsTbnLsfkeIE58DjSEzJwxqZiOG9947CCBSj36oC4BoxwGTNOzl5K5l0y8Exlyr+a9g5zK4cwzSrdM3NG7rB0JyLYpubJFyQ+ASUpA87Yea67mmgtViimaSRE75RkqU5CK2TNNsr5bPalZnCRpDBqolbBQxlBOx2leGIsv/10TYZ5rH7qDNze/bgcT2/22roGyCYk24DqbM1B9hD2vS2WdyuGUvc2U1+7bMiT6ZqmCiozgJZLtT59zogekGBKd03nw5q5xF+bHH99z1voGlrVbkSJUOCMbgdevt3oHFHO01h2dovK0LGczmfewbtuulSn3lq6RpYQAsFTcthiwCVCr8GId9ZAUwHeCF/ptiFKMaSCQgEQNXSkXj9gcAuB6c+ipyzI/di3ZCqlKJ2Au9unOY7X1aMTfLkbYx9pOqX+rvw+WhZ8d2+NrI47KUy0OgtCRlvQjsjgwGZgpt0TRH8s2ne9zsC/4trIocoFFqIEaSgGHv5Q0rzUNhDGTVPQ6Rq7Y5Nocp1ik4H8afXGT03mx35F/X/BMko8ABrUVcpL718+0r68AHW3w9SroAcqufEfZ2+haX9RfNRt12p3x1j8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>accountget_firstuser20150604_1433413077479</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>accountget_firstuser20150604_1433413077479</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>0E2AF005E34D3EA4E05307991F0A0DE6</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>17AF38AAF30D61C7E05305991F0A7EED</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c45904a4-762a-4f06-974b-cc91555d52f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_03002_AccountGet_FUNC_NonCS_User_Access_Standard_200_OK_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountGet_FUNC_NonCS_P1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E603091B0B6BE1E4E0401F0A05995622</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E603091B0B6BE1E4E0401F0A05995622</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E6030B86105B021EE0401F0A07992E9E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E6030B86105B021EE0401F0A07992E9E</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:iscportalcs1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="User_Create_API" disabled="true" id="af2da472-8a82-46f5-b112-a2e5a332757e"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_STS_Policies" searchProperties="true" id="d4a22e7e-29ae-4d26-b76c-def0e45086de"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="27d7ed5d-3471-474a-90b0-bd0d0ce61dc1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ResponseType",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e4457366-ffe3-4c20-9707-5fb5d033e5ab"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def uname= "AcountDelete_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");

tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));

tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));




</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create" id="ea48f77a-a776-4eae-99c2-cf9a7f69137a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
//
//tC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));
//tC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
//tC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API" id="f51ca961-b6c3-4f21-b308-7facc85fc443">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tP.setPropertyValue("audience",tS.getPropertyValue("audience"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

//myTC.setPropertyValue("audience",tS.getPropertyValue("audience"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


//tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
//tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
//tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU" id="0cc3e8e9-082c-4485-bb24-4458d1821ca9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC" id="ab10bd11-03da-4e8c-8786-c9b290cc4dde"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>UserName</con:name><con:value>AcountDelete_20150604_1433413092260</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTP3olLTltR1hhoN4RdGjgBz1ixPSbYm0KTZpAX/9SQpUQPBy7xeY3W52n33Jk73gOAwsp8U5xIJGrLAIA8adTNvQkpg5EeaUOwyHwB1BnEHrrudYRcPBmyNaoXvZ0N7qpXG17GFbrxhuXS+XqqaObajpRrUGtfrY9mqmJ005T6DLuMBMNDTLMCvSQDfKQ9NwzLJTKRUtu/qqFUYQc+lbmhQNbQ1qwRvaRIiZg9B8Pi/OS8Uo9pFlGCZ6vusNyARCrDUvVhllgeLm2p4UXSAQBKRIohBdoB2bC5c7A+ozLJIY1rHcY7EMZNhI2ric+mdafhbcLvOiTGxjFjFKcEA/sarPHYhJ5BZagR/FVEzCo0mYhnKsw4LoxCyzMw3tQjvR0Q7CmGOdT7C59tUHD2JgBApP/W5DOzuta9nRYYwZ96I45Lvif8MDLIUgmoGr801aa2inOzxQqeYFEKfLSJBwmsK9GtYZJsDX3QRyuqvCQwweXfQolwO64Aod2oa3J66qcUl94OL/NGirOSsnIxwk0Pyz8FHNR0t6fXNHAHlX/rtf7j6VS/5TIwOwbZwp8tauxL2hzIdodeKx/lhyZ+EfeLkZmebw3A577/R6+nGdkIfyc0889zrWjX3nkvuH8/GyH0TDkKRkOWi3e1evUed2NH4QvbQ3X56fx2WvXRe/zkcwfS3fVv9xl4vH6WffLJ3fvI5dXrPSj2n4clVbWk/d6i3zOh3/Je22pk9j08YfC282qtxbQzR/Hz6Q4C4euvVP28Ot9BV5NqrOSSNPZwv/rm5z5wfJ+B2I2IhqDLqXhSvZJSx+JjOloa7uZabOTJEPF8CE1lSnFHc4iaQ76jqyhyvZrLWuSvWW/Km0qma71jEqJaNi2+aV0ap1Opcbklmh2IPYjphHVSxFuaux+RkgCR0OzIVYT6NEMh3XfvB4iQUudFlfXoKIcRhGkp7NmTkl8ziY2FPLNE1vQQO3YpLq1NYK95H4zX7HLU9AvEvKpR1S7gOhMwqKudVgcznZXMhifOA0EYFZTHGRQSK5PVY061jlegVxGs4CUFBRGLlJAMXZZJaVBvHVv6VjwjNtvzN8s7ILdzS1/W+bKkgblyoDrrL5BbKTcOB9KW9SOZ5ydTvljftW4lJ1t2RJRUzJCsnup69JUSOSj4nKqT14sza4c/PTjx84i36AhfYrkodyU7oVePN+y5dAckdz09EPXPwoJmmaZD2sGYaFYukeqRohKQyAJJLdlsNoCgzlXtBJT0kOfC94rt+FmIgJGwgsIJRDV8jEE3aHAXC1O3TldVmcupjshJSlE7AQh3TtQO49CvGPqxFxiLKT6gf5N49i96tjB3xtxZF5ytVBUOYrST0jyyOTQSLplkoCjOJt54ccHAq+q8yLnGMRcqDGiYDjXwqK2RoaJiRKmOheaplim20znGI5A+fL6JubjNDzDY/++4qn02wECMi9kNPMv3qoHXUFmL/F2Ough0nbKP1E2rvomt/U3zVbddqf8eZf</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>GivenName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SurName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Country</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DateOfBirth</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1996-06-08</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid</con:name><con:value>17AF38AAF35B61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>account_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1996-06-08</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_83b64fa9-50d8-4361-a9e7-067e78b9f71f</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_83b64fa9-50d8-4361-a9e7-067e78b9f71f</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_03002_AccountGet_FUNC_NonCS_User_Access_Standard_200_OK_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountGet_FUNC_NonCS_P1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>27d7ed5d-3471-474a-90b0-bd0d0ce61dc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e4457366-ffe3-4c20-9707-5fb5d033e5ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02006_AccountDelete_FUNC_NonCS_Deleting_an_account_when_user_is_Full_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>02.Functional_UserGet_NonCS_P1</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Child_User_Create_API" disabled="true" id="660303d6-0c73-4c55-955b-388662c7fec4"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Child_User_Create_STS_Policies" searchProperties="true" id="d28a0c5d-89e3-4133-8e7a-f724774172a5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="02ebec61-d7d8-4608-bd31-7bb33827bce1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);


tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("CLG_NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ResponseType",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="56c3cd99-6982-4ede-9835-046e8ee5e7cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tS.getPropertyValue("sName");
def callTCname = tS.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call User Create" id="f30b54d2-40eb-40e7-8401-cd05ba38c823"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
//
//tC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));
//tC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
//tC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - CLGAttestation for Child User" id="2f6b5e6a-f14e-4f6e-8fea-8db066daf2f2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateCLGAttestation")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("NODE_ACCOUNT_ID", tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("CLG_NODE_USER_ID", tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CHILD", tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("NODE_USER_ID_FULL", tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU for Child User" id="0ac33380-ad9e-4708-a4ca-90399db993bc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - GeoPrivacyAssent for Child User" id="e8e1901d-f2cf-46f5-9a82-13938b6ef14b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateGeoPrivacyAssent")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));



//myTC.setPropertyValue("tName",tC.getName());
//myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC for Child User" id="02e5c9d9-10c4-454b-9d25-27d65356729f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API" id="c5295d99-5448-463a-a7c7-16da5cdfeac0">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

//tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
//tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
//tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-18</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_9070c791-13ba-4b2d-8113-8b66698dcc9c</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_9070c791-13ba-4b2d-8113-8b66698dcc9c</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-16</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E6432D13CD199C26E0401F0A0799607F</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-16</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E5F8A903DB8B8399E0401F0A07992F13:DC7DFFA6"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130913_05055</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E5F89A132C6625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E56B6CBBFC218D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130913_05055</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20130913_05055</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>firstuser20130903_114248</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20130903_114310</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>seconduser20130902_104922</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E6432442DEBAEDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E5F89A132C6725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E56B6CBBFC228D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-17</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>27d7ed5d-3471-474a-90b0-bd0d0ce61dc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e4457366-ffe3-4c20-9707-5fb5d033e5ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c5295d99-5448-463a-a7c7-16da5cdfeac0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_70045_UserGet_Portal_FUNC_CHILD_SAU_Get_ADULT_FAU_200_OK_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>07.User_Get_GeoProfile_Portal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:iscportalcs1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="SetupScripts" id="9b6a1fbb-461c-489b-ab77-fa08543f7f36"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup_P1" searchProperties="true" id="1936fce2-caa7-48ff-9f9f-7152b5623f55"><con:settings/><con:testStep type="groovy" name="Set ENV Properties" id="eeaf7f8d-39e7-4786-ad05-41ef047f243b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info("Set Environment properties!!!");
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath
log.info("Project Path : '" + projectPath + "'");

def eNV = context.expand( '${#Project#ENV}' )
log.info("Environment: '" + eNV+ "'");

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");


def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));
log.info("Load property file : '" + propertiesPath + "/" + eNV +"project.properties"+ "'");
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema" id="3b08cd49-c286-4895-8c5c-2623f0d23811"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");

def v2 = context.expand( '${#Project#versionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="datasource" name="Country" id="d6e76f93-04af-4231-8a28-3683f72d63b5"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup" id="eb2eadca-dab0-434a-868f-d023e2885969"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="6876b085-0c5e-465d-bf4f-c3a3d2dbe59a" disabled="true"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Prioritize" id="8bdb25b1-29da-4d79-96c7-385eda6abc89"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.*;
import com.eviware.soapui.impl.wsdl.teststeps.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def enablePriorityScript = context.expand( '${#Project#enablePriorityScript}' )

def executionPriority = context.expand('${#Project#disablePriority}');
def priority = context.expand('${#Project#disablePriority}').split(",");
def coords = context.expand('${#Project#coords}').split(",");//COORD-1000,COORD-2010
//log.info("Inside setUp for project '" + tP.getName() + "'");
def suiteList = tP.getTestSuiteList();
if(enablePriorityScript=='true')
{
log.info '----------------------------------------';

	tP.getTestSuiteList().each
		{	thisSuite->
				if( !thisSuite.isDisabled())
				{
					thisSuite.getTestCaseList().each
					{tCase->
						tCase.setDisabled(false); 		//Enabled everything
						//log.info '@@@@ ENABLING '+ thisSuite.getName() +' :: ' + tCase.getName();
						
							for (def prior : priority)
							{
								if (prior!='' &amp;&amp; tCase.getName().toUpperCase().contains(prior))
								{
									tCase.setDisabled(true); 	//Enable needed Priority
									log.info '!!!! Disabling'+ thisSuite.getName() +' :: ' + tCase.getName();
									break;
								}
							}
							coords.each //coord
							{ 
								if (tCase.getName().toUpperCase().contains(it))
								{
									tCase.setDisabled(true);		//Disable COORD issues
									log.info it+'#### Disabling COORD'+ thisSuite.getName() +' :: ' + tCase.getName();
									return true;
								}
							}
						
					}
				}
		}
	
	log.info "Disabled TCs with below Priorities : " ;
	priority.each{log.info it;}
	log.info "Disabled TCs with below COORDs: " ;
	coords.each{log.info it;}
	log.info '----------------------------------------';
}</script></con:config></con:testStep><con:testStep type="groovy" name="Flaky_Disabler" id="241348e3-0830-41ef-bbf7-3dc3ee45f81f"><con:settings/><con:config><script>//Project Level Variable name – FLAKYSELECTOR.
//Possible Values – all, only_flaky, without_flaky
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tc_condition  = context.expand( '${#Project#FLAKYSELECTOR}' ).toString();

tP.getTestSuiteList().each
{
      if(!it.getName().toLowerCase().contains("setup") &amp;&amp; !it.isDisabled())
       {
                it.getTestCaseList().each
         {
		   if(tc_condition.toLowerCase()=="all")
			{
                 	it.setDisabled(false);
                }
             else if(tc_condition.toLowerCase()=="only_flaky")
               {
                  if(it.getName().toLowerCase().contains("flaky"))
                 		it.setDisabled(false);  
                  else
                         it.setDisabled(true);
                }
             	else
             	{
                   if(it.getName().toLowerCase().contains("flaky"))
                                           it.setDisabled(true);  
                   else
                         it.setDisabled(false); 
              	}
           }
        }
}

</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140811</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="AccountGet_FUNC_NonCS_P1" id="4e448139-e0bd-4b38-930f-efc2c5135eba"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03001_AccountGet_FUNC_NonCS_User_Access_Basic_200_OK_P1" searchProperties="true" id="6196eb18-d20e-4da4-bc8a-59b6a194812d"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="0b3d756d-4cb2-4091-9fda-75cac2d6a50e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="3f3079ea-2e6e-4352-a9c4-ec99db82a112"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult BAU" id="53bdaeb7-b1a6-433f-8387-3ca02c272e31"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


tC.setPropertyValue("LegalGuardian","");

//required for Child user Create

//tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FAU1"));
//tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Adult BAU Create" id="b85ad346-1825-4fca-a43f-8f523d114f2d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )

log.info country;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

myTC.setPropertyValue("Country",country);
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="56de219c-659e-462b-a372-e38129e282e8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"17AF5FD8E69F4D7AE05307991F0A7CC5:91A789D"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>17AF38AAF28961C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:17AF38AAF28961C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>17AF38AAF28A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>17AF38AAF2E061C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:17AF38AAF28A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:17AF38AAF2E061C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VyvdxynhjdQWqDIRcJ5AFc0kmLykhN0aJLYMlA8nXj2TAAQIMM0+ubre6Ty866iuGotC0HcYg4SSmhVUUUmZn2oaSJtSOESPMpigCZnNse06/Z5tF3UbbI0rB7TSUN930J+Oqb6n6WLfUUgVX1LFRw6pRHRulCUDJskxhylgKLmUcUd5QTN0oq3pF1UtDQ7cNy7YqRV2vvyqFESRM+BYmRV3ZgFqxhjLlfGZr2nK5LC6tYpwEmqnrhvbS73l4ChFSmlfrjLJASXNjj4s+YAhDXMRxpF1pezZXPrM9ElDE0wQ2sfxTsXRNr2vCxmck+KXkZ8F36STOxDaiMSUYheQLyfr0gU9jv+CEQZwQPo1OJmHo0rEKK6xio0R/Kdo+tAsd7SFMGFLZFBkbXwOYQAIUQ+HPwG0ovy7rWnZ0mCDKJnESsX3xv+EBuoAwnoGvsm1aG2iXOzxSqeYVYNulOEwZWcC9HNYZwsA23QR8uavCYwITsuoRJgZ0xSQ6bRfegbiuRocEwPj/adBOc9ZORihMoRl4BLoPY+f14b7VHrgvy8XI9L5idPPIGhmAXeNMkbd2LR4MZT5E6xMfk473V6sFxs0fpz2vuKza/6LO8231IRro08HoJvTvzFLQnk/n4/pji/u9p+en/lMpdIej+tjzB3+/8Ghk9KF19zvGd2Hw5c3vw3IwsEjntf1U+q2lPp7Mu+X+9Ttudz9eb1gt0N6nrtUbPPfqFTxCpWn4RRJr9HRfxx3sQKDfftBSmz/yySqef3aNW39pMb3WyNPZwb+v2955Lx2/A+ZbUY6B2yl0RZcQP09mUkN8dZKZ2jNJPowD5UpTnpLcYaeC7ohvix6uZaPqdK2a43TNmlMx2tVrvWzp5Xrd6OpO9fq6syWZNYoDiO2YToiMJSl3PTbnAeLIZkB9SNRFnAqmY8oZjx3EUcGlA3EJYspgGAt6NoLyuz8OEF6yim99VipsXq9GFporhfuYP9CHxJlwSPY52drj5AFgMiMgiVvONRODzbioxRwtUh4axQUqUkgFtSeSZW2zVCtrjESzECRSLYr9NITibDrLKqOx9ddUEWaZdnA9fDOz+3Yys8N/2yIIG59IAyazaYFoJBx5XsxtKqdTruymvHXvpD6RV0tUlCcEr5Hs//oeFDkh+ZTInNrem7nFnZtffvzIWe0MLO2wInkof0F2Am+fb/EQCOpobjs6R8V5MV0s0qyHVV03tUS412SNNCF4gFNBbp/D+AOolnvRLnpJcuAHwXP9PsSUT6nHEYdIDF0hEy9YHTxgcnVwxW1ZXbqX7IUUpeOw4sd07VCsPRLx2c0I21jaCfWj+CzjxP/u2BFfO3FEnmJz4IQGUpKvyOeJycCxcEsE/8XJrvNjDo4F31fmRc6xcDFQ45TD6T8FSWwNBWEcp5S7HSVT7JJthpN/zsD+NvrhJuPzfMEj/77hqSQbAQxiLWQk8y/faVteARrsEPYm6AnOrp/j7H10zR/qn5qdOh3OePMf</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VyvdxynhjdQWqDIRcJ5AFc0kmLykhN0aJLYMlA8nXj2TAAQIMM0+ubre6Ty866iuGotC0HcYg4SSmhVUUUmZn2oaSJtSOESPMpigCZnNse06/Z5tF3UbbI0rB7TSUN930J+Oqb6n6WLfUUgVX1LFRw6pRHRulCUDJskxhylgKLmUcUd5QTN0oq3pF1UtDQ7cNy7YqRV2vvyqFESRM+BYmRV3ZgFqxhjLlfGZr2nK5LC6tYpwEmqnrhvbS73l4ChFSmlfrjLJASXNjj4s+YAhDXMRxpF1pezZXPrM9ElDE0wQ2sfxTsXRNr2vCxmck+KXkZ8F36STOxDaiMSUYheQLyfr0gU9jv+CEQZwQPo1OJmHo0rEKK6xio0R/Kdo+tAsd7SFMGFLZFBkbXwOYQAIUQ+HPwG0ovy7rWnZ0mCDKJnESsX3xv+EBuoAwnoGvsm1aG2iXOzxSqeYVYNulOEwZWcC9HNYZwsA23QR8uavCYwITsuoRJgZ0xSQ6bRfegbiuRocEwPj/adBOc9ZORihMoRl4BLoPY+f14b7VHrgvy8XI9L5idPPIGhmAXeNMkbd2LR4MZT5E6xMfk473V6sFxs0fpz2vuKza/6LO8231IRro08HoJvTvzFLQnk/n4/pji/u9p+en/lMpdIej+tjzB3+/8Ghk9KF19zvGd2Hw5c3vw3IwsEjntf1U+q2lPp7Mu+X+9Ttudz9eb1gt0N6nrtUbPPfqFTxCpWn4RRJr9HRfxx3sQKDfftBSmz/yySqef3aNW39pMb3WyNPZwb+v2955Lx2/A+ZbUY6B2yl0RZcQP09mUkN8dZKZ2jNJPowD5UpTnpLcYaeC7ohvix6uZaPqdK2a43TNmlMx2tVrvWzp5Xrd6OpO9fq6syWZNYoDiO2YToiMJSl3PTbnAeLIZkB9SNRFnAqmY8oZjx3EUcGlA3EJYspgGAt6NoLyuz8OEF6yim99VipsXq9GFporhfuYP9CHxJlwSPY52drj5AFgMiMgiVvONRODzbioxRwtUh4axQUqUkgFtSeSZW2zVCtrjESzECRSLYr9NITibDrLKqOx9ddUEWaZdnA9fDOz+3Yys8N/2yIIG59IAyazaYFoJBx5XsxtKqdTruymvHXvpD6RV0tUlCcEr5Hs//oeFDkh+ZTInNrem7nFnZtffvzIWe0MLO2wInkof0F2Am+fb/EQCOpobjs6R8V5MV0s0qyHVV03tUS412SNNCF4gFNBbp/D+AOolnvRLnpJcuAHwXP9PsSUT6nHEYdIDF0hEy9YHTxgcnVwxW1ZXbqX7IUUpeOw4sd07VCsPRLx2c0I21jaCfWj+CzjxP/u2BFfO3FEnmJz4IQGUpKvyOeJycCxcEsE/8XJrvNjDo4F31fmRc6xcDFQ45TD6T8FSWwNBWEcp5S7HSVT7JJthpN/zsD+NvrhJuPzfMEj/77hqSQbAQxiLWQk8y/faVteARrsEPYm6AnOrp/j7H10zR/qn5qdOh3OePMf</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc/I4DP0rTPq4E5wEaCFTmKFcvg1taQu9v3SMI8BtYkPsBMqvXztAChRYdp8yUmTp6OJjXQocBo5bFwIiSTnLzcOACTfVVo04Yi7HggqX4RCEK4nbr9/euE7ecvH6iJHzmlXjA8rlomM7vlmyraJZrFjn5oCQilm0nBL451D2CShTIWLwmJCYyarhWHbJVIZW8dG2XLvgFsv5Yrn0buSeIRLKtzLJW8YK1FxUjbGUExeh2WyWnxXyPBohx7Js9Hp70ydjCLFRu1xmlAaKait7kveBQBCQPOEhukRbNpe+cPt0xLCMI1jF8g/FspBVQcrGF3R0ZmRnwffYkKdiAzPOKMEBXWBdn1uQY+7n6sGIR1SOw4NJ2JZ2bMKcmMQusjMDbUM70dEWwkhgU4yxvfLVgyFEwAjknnpe1Tg7rWvp0ccIMzHkUSi2xf+GB1gCAZ+Ab4p1WitopzvcU6naJRDXYySIBU2gq4d1ggmIVTeBnO4qdx/BkM5vqFADOhcaHdqEtyMuq9GkIxDy/zRoozlLJ884iKF2+zzqzLtR6yGZosWgVEgerr32m08nXVFNAWwap4qstUtxZyizIVqeaC3enuPyX29Wt/vek30c9GYvT/YMvvts+DCMEzbo/WkX+kn00nitfI7v+BDevOurVvDVQMOrHgpf6APY3W7jejGQX+PIk2x8VR6WgAb00xl0/25A5/NP8D79Ko+mnQKS1r30Bu3OInm6n3ulMKx0ymPbSeZtlcML78TBLLnqNtDd4mXh1/2kE0ZWMC+8vvJyNUtnA/+2bn3n+/HgE4hci3oMvGaurbqE5XEy0xrqm8PU1J1o8hESmDRq+pTmDjdWdEd9V/VwKdsX9XahXK+3nZZ1bjcuWlapYJUqFbtt1S9areaaZJYodiA2OBtSHUtT7nJsjgMkoSuA+RCZCY8V0wnjiMcmljjnsZ66BJwJeOSKnu3xYAaTxWJwIQfTyohPrUnIIRhJI9fl8o7dRfWhhGibkwtbnNwDQicUNHHruRZqsIVUtZjiJJaBnU9wnkGsqD3SLOs66hQSNJwEoJGikPtxAPnJeJJWBonl1zExEam213r8cNL7djCz3X/rIigbn2oDobO5AtVI2PO8FNapHE75fDPltft67FN9tVRFZUTJEsn2r59B0ROSTYnOqdH/cNa4M/PTj+85i47AQrsVyUL5Cd0IvH6+1UOgqKO27ugU56f5OEnitIcXluWgSLlHukZICX0gsSK370f+BQxlXtBJL0kGfCd4pt+GGMsx60ssIVRDl0vFE1aHPgi9OnjqtsxP3Uu2QqrSSZjLfbpGoNYejfjoZkRcou2U+l59Zjzyfzq2x9dGHJWn2hwkZSMt6Vfk+8BkEK7cUsV/PNp0vs/BvuDbyqzIGRapBmoQSzj8J6eJrWpgQnjMpNc0UsUm2aY45fcE3B+jX25SPs8WPPrvG55J0xHQy6SyT/3rd9rVV4CNNgh7FXQ/Z5crxzh7G13tl/q3ZqNOuzNe+wc=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AccountDelete_user20130918_1379459446852</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20150604_1433413011962</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20150604_1433413027450</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>0E2AF005E34D3EA4E05307991F0A0DE6</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>17AF38AAF2E161C7E05305991F0A7EED</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03002_AccountGet_FUNC_NonCS_User_Access_Standard_200_OK_P1" searchProperties="true" id="e6fbde8e-3153-4f93-9db4-5aeda03e47b1"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="33ce5154-0d30-40ca-897b-60c8212a96ea"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="b589f21a-dc58-489d-92cb-627718948342"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult SAU" id="97f9fb2c-080c-4760-969b-ee71089b566b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


tC.setPropertyValue("LegalGuardian","");

//required for Child user Create

//tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FAU1"));
//tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Adult SAU Create" id="8dde7bc8-fa95-4b84-9349-25ecc1ab3af5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )

log.info country;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");

myTC.setPropertyValue("Country",country);
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="4605551d-0158-494b-a58b-48a61a3e318a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"17AF5FD8E6E34D7AE05307991F0A7CC5:91A789D"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:17AF38AAF30361C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>17AF38AAF30461C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:17AF38AAF30461C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:17AF38AAF35A61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTM/HM6UvQJGOMIOCyhH1aNGjfnFCuoVIm5QmQTi//iYFKiB4ufcLzG43u8++5MmecpTErt/mHDJBGC3Nk5hyP9c2DZlRnyFOuE9RAtwX2A/aN33fLds+Wh8xSr1O03hzhrUoQmFkek4FzKqL6uYwwnUzgsbQjcIIOSeuMuVcQo9ygahoGq7t1EzbM+3qwLF9p+pX3XLVrb8apSfIuPKtTMq2sQI1501jLETqW9bHx0f5o1Jm2chybduxnm/6AR5DgozW6TKjPFDWWtnjcggY4hiXMUusU2vL5jTkfkBGFAmZwSpWeCiWbdkNS9mEnIx+GMVZCHs0Yrl4jiijBKOY/EW6PjcgxiwsteMRy4gYJweTcGzt2IQ5NrFTpT8MaxvakY62EGYcmXyMnJWvB4ggA4qh9PjQaxo/jutafnSQIcojliV8W/xveIDOIGYphCZfp7WCdrzDPZVqnQL2exTHkpMZ3OphTREGvuom4ONdlX5nEJF5n3A1oHOu0Vmb8HbEZTU6ZARc/J8GbTRn6eQJxRJa42fxfMk476XQja/ofXfoDJ487twuWDMHsGmcK4rWLsWdoSyGaHni7ummPvAcR0wiUbV/TRey8YTr7Hn67KCbRXD7Z3R5df3T8d5PhowGz0m3Npukj+2xDM4yt/Jnga7aZ6PAc3H0cl65vL9fdBoeiHvr+sG+mATT+8Y4QZXX+tyxzl4uerPF610/uJtUbtqXj6/kV9dL6gs7eJmmP2fy7n6SvDauP0j/isWy5w7sfkpG+KpyxaJh55o3i3Q28G/r1nc+kMN3wGIt6jHodUoXqktIfE9mWkNCM8pN/VSTDxdAhdHSpzR3+FLRHQl91cOl7NTbF5WTtvqxq55zXu/atYpdazScC7td73Y7a5JZotiBeM5oRHQsTbnLsfkeIE58DjSEzJwxqZiOG9947CCBSj36oC4BoxwGTNOzl5K5l0y8Exlyr+a9g5zK4cwzSrdM3NG7rB0JyLYpubJFyQ+ASUpA87Yea67mmgtViimaSRE75RkqU5CK2TNNsr5bPalZnCRpDBqolbBQxlBOx2leGIsv/10TYZ5rH7qDNze/bgcT2/22roGyCYk24DqbM1B9hD2vS2WdyuGUvc2U1+7bMiT6ZqmCiozgJZLtT59zogekGBKd03nw5q5xF+bHH99z1voGlrVbkSJUOCMbgdevt3oHFHO01h2dovK0LGczmfewbtuulSn3lq6RpYQAsFTcthiwCVCr8GId9ZAUwHeCF/ptiFKMaSCQgEQNXSkXj9gcAuB6c+ipyzI/di3ZCqlKJ2Au9unOY7X1aMTfLkbYx9pOqX+rvw+WhZ8d2+NrI47KUy0OgtCRlvQjsjgwGZgpt0TRH8s2ne9zsC/4trIocoFFqIEaSgGHv5Q0rzUNhDGTVPQ6Rq7Y5Nocp1ik4H8afXGT03mx35F/X/BMko8ABrUVcpL718+0r68AHW3w9SroAcqufEfZ2+haX9RfNRt12p3x1j8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTM/HM6UvQJGOMIOCyhH1aNGjfnFCuoVIm5QmQTi//iYFKiB4ufcLzG43u8++5MmecpTErt/mHDJBGC3Nk5hyP9c2DZlRnyFOuE9RAtwX2A/aN33fLds+Wh8xSr1O03hzhrUoQmFkek4FzKqL6uYwwnUzgsbQjcIIOSeuMuVcQo9ygahoGq7t1EzbM+3qwLF9p+pX3XLVrb8apSfIuPKtTMq2sQI1501jLETqW9bHx0f5o1Jm2chybduxnm/6AR5DgozW6TKjPFDWWtnjcggY4hiXMUusU2vL5jTkfkBGFAmZwSpWeCiWbdkNS9mEnIx+GMVZCHs0Yrl4jiijBKOY/EW6PjcgxiwsteMRy4gYJweTcGzt2IQ5NrFTpT8MaxvakY62EGYcmXyMnJWvB4ggA4qh9PjQaxo/jutafnSQIcojliV8W/xveIDOIGYphCZfp7WCdrzDPZVqnQL2exTHkpMZ3OphTREGvuom4ONdlX5nEJF5n3A1oHOu0Vmb8HbEZTU6ZARc/J8GbTRn6eQJxRJa42fxfMk476XQja/ofXfoDJ487twuWDMHsGmcK4rWLsWdoSyGaHni7ummPvAcR0wiUbV/TRey8YTr7Hn67KCbRXD7Z3R5df3T8d5PhowGz0m3Npukj+2xDM4yt/Jnga7aZ6PAc3H0cl65vL9fdBoeiHvr+sG+mATT+8Y4QZXX+tyxzl4uerPF610/uJtUbtqXj6/kV9dL6gs7eJmmP2fy7n6SvDauP0j/isWy5w7sfkpG+KpyxaJh55o3i3Q28G/r1nc+kMN3wGIt6jHodUoXqktIfE9mWkNCM8pN/VSTDxdAhdHSpzR3+FLRHQl91cOl7NTbF5WTtvqxq55zXu/atYpdazScC7td73Y7a5JZotiBeM5oRHQsTbnLsfkeIE58DjSEzJwxqZiOG9947CCBSj36oC4BoxwGTNOzl5K5l0y8Exlyr+a9g5zK4cwzSrdM3NG7rB0JyLYpubJFyQ+ASUpA87Yea67mmgtViimaSRE75RkqU5CK2TNNsr5bPalZnCRpDBqolbBQxlBOx2leGIsv/10TYZ5rH7qDNze/bgcT2/22roGyCYk24DqbM1B9hD2vS2WdyuGUvc2U1+7bMiT6ZqmCiozgJZLtT59zogekGBKd03nw5q5xF+bHH99z1voGlrVbkSJUOCMbgdevt3oHFHO01h2dovK0LGczmfewbtuulSn3lq6RpYQAsFTcthiwCVCr8GId9ZAUwHeCF/ptiFKMaSCQgEQNXSkXj9gcAuB6c+ipyzI/di3ZCqlKJ2Au9unOY7X1aMTfLkbYx9pOqX+rvw+WhZ8d2+NrI47KUy0OgtCRlvQjsjgwGZgpt0TRH8s2ne9zsC/4trIocoFFqIEaSgGHv5Q0rzUNhDGTVPQ6Rq7Y5Nocp1ik4H8afXGT03mx35F/X/BMko8ABrUVcpL718+0r68AHW3w9SroAcqufEfZ2+haX9RfNRt12p3x1j8=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTP3olLTltR1hhoN4RdGjgBz1ixPSbYm0KTZpAX/9SQpUQPBy7xeY3W52n33Jk73gOAwsp8U5xIJGrLAIA8adTNvQkpg5EeaUOwyHwB1BnEHrrudYRcPBmyNaoXvZ0N7qpXG17GFbrxhuXS+XqqaObajpRrUGtfrY9mqmJ005T6DLuMBMNDTLMCvSQDfKQ9NwzLJTKRUtu/qqFUYQc+lbmhQNbQ1qwRvaRIiZg9B8Pi/OS8Uo9pFlGCZ6vusNyARCrDUvVhllgeLm2p4UXSAQBKRIohBdoB2bC5c7A+ozLJIY1rHcY7EMZNhI2ric+mdafhbcLvOiTGxjFjFKcEA/sarPHYhJ5BZagR/FVEzCo0mYhnKsw4LoxCyzMw3tQjvR0Q7CmGOdT7C59tUHD2JgBApP/W5DOzuta9nRYYwZ96I45Lvif8MDLIUgmoGr801aa2inOzxQqeYFEKfLSJBwmsK9GtYZJsDX3QRyuqvCQwweXfQolwO64Aod2oa3J66qcUl94OL/NGirOSsnIxwk0Pyz8FHNR0t6fXNHAHlX/rtf7j6VS/5TIwOwbZwp8tauxL2hzIdodeKx/lhyZ+EfeLkZmebw3A577/R6+nGdkIfyc0889zrWjX3nkvuH8/GyH0TDkKRkOWi3e1evUed2NH4QvbQ3X56fx2WvXRe/zkcwfS3fVv9xl4vH6WffLJ3fvI5dXrPSj2n4clVbWk/d6i3zOh3/Je22pk9j08YfC282qtxbQzR/Hz6Q4C4euvVP28Ot9BV5NqrOSSNPZwv/rm5z5wfJ+B2I2IhqDLqXhSvZJSx+JjOloa7uZabOTJEPF8CE1lSnFHc4iaQ76jqyhyvZrLWuSvWW/Km0qma71jEqJaNi2+aV0ap1Opcbklmh2IPYjphHVSxFuaux+RkgCR0OzIVYT6NEMh3XfvB4iQUudFlfXoKIcRhGkp7NmTkl8ziY2FPLNE1vQQO3YpLq1NYK95H4zX7HLU9AvEvKpR1S7gOhMwqKudVgcznZXMhifOA0EYFZTHGRQSK5PVY061jlegVxGs4CUFBRGLlJAMXZZJaVBvHVv6VjwjNtvzN8s7ILdzS1/W+bKkgblyoDrrL5BbKTcOB9KW9SOZ5ydTvljftW4lJ1t2RJRUzJCsnup69JUSOSj4nKqT14sza4c/PTjx84i36AhfYrkodyU7oVePN+y5dAckdz09EPXPwoJmmaZD2sGYaFYukeqRohKQyAJJLdlsNoCgzlXtBJT0kOfC94rt+FmIgJGwgsIJRDV8jEE3aHAXC1O3TldVmcupjshJSlE7AQh3TtQO49CvGPqxFxiLKT6gf5N49i96tjB3xtxZF5ytVBUOYrST0jyyOTQSLplkoCjOJt54ccHAq+q8yLnGMRcqDGiYDjXwqK2RoaJiRKmOheaplim20znGI5A+fL6JubjNDzDY/++4qn02wECMi9kNPMv3qoHXUFmL/F2Ough0nbKP1E2rvomt/U3zVbddqf8eZf</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AccountDelete_user20130918_1379459446852</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20150604_1433413077479</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20150604_1433413092260</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>0E2AF005E34D3EA4E05307991F0A0DE6</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>17AF38AAF35B61C7E05305991F0A7EED</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03004_AccountGet_FUNC_NonCS_Account_Status_as_Deleted_P1" searchProperties="true" id="d80be5a6-1dad-4ccd-bfec-3cd514f5ea23"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="e41c90a5-0d77-4177-a14e-39b9682ffafc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="0dbf26ed-ff0b-4ecc-ba4d-23b724522221"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="6661d48f-e960-4b89-83a4-e82eb4305009"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","deleted");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="bf43c489-ee9d-4bd3-9f47-52bb6ad43dc0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeAccountGet","ACCT_INACTIVE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35BF54396B96E05305991F0A65D7</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35BF54386B96E05305991F0A65D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35BF54386B96E05305991F0A65D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B48AF66B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B48AF66B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyj6uQBBIgUUEKhe7SbXe33NrTl8o4A7ibOMF2uP36Y4eGAqU97JGQkCfjmW8u/mYuOYqjsh9wDkyQhGrddkN/9mr1WrXiWYYdlj3DCSt1o16rO4bn4rFTh9Culh1d63KeQZdygaho6GXLdgyrbtjewHZ9p+JbTsmxak+6NgLGpWmpUrJ0bRVHlPu524aeMeoniBPuUxQD9wX2+8HdrS81fVRg0puXW5S5Q9acCZH6polLIWCIIlzCSWxemgc6lyH3+2RKkcgYvPoMeUN/vbtcLkvLSilhU7NsWZZpeabUCTmZftGbF8VlCLt0kmzPV4gmlGAUkQ1SoO5AzJJQC6JpwoiYxR+Ytk3bUqYNWGED2w79optvDnJ0Z1o6AMk4MvgM2YWxHkyAAcWgDXvdhv7lvApu7w4YonySsJgfnf8OEtAFREkKocGLyAp051s8ka7mJWC/S3GUcbKAn6pNUoSBa78ZTMjqlnDZfCHX8vJrKy5/pOgywH9TlktzH6uEbp7ITptMgYv/U7P9em2tjFCUQROXJzebr5NRv8ODRe3WGWCvLtw/ta/fh40cwr7yFtSu3K/n42bd9dbrpWHtadQeZJj98v4ZWpX05kf/wX3p/XFuAHshepj369R0V/etBzokS9eKSdqaVwfx7An4w7dw1B3PkmXA0vX6IbjIrGBGYd6r3Tj963u+slm8YfQe7sYmXY7sh999/him3oAy6GxW5eG30eB+yb3eGE1S8vj0MniKEbenne/TsXsxYY9Pg82LSC3xNY2Hw80maLzFtB/DobCghH42fgEsiqNqj25bu5b1QuJzelESEhqTXNVPFUdxAVToTXVLUYufSQIioS+LuT1b1nWn4racenBdrbZqQcdyK5brefa1FXQ6lVbBQVsURxCvEjohypdi2W3/fA4Qxz4HGgIzFkmGZ8D1Tyy2kUBal/bk40goh0EiWXxa9dzldFFN8cazq5WX5XodzaNZRejaz0T8or9YMBHADqm7fkDdPcAkJaD4XTU4lx3OhczFHC0yEdmlBSpRyOQEYIqE/bJTd01O4jQChdSMkzCLoJTO0jwzJt/+lw2EeS7tdQb5w/swruNvRQqkTkiUAlextECWEd7NoLLvFoF8GHDZ3g+4MB9kIVHvS+ZTMIK3SA4/vbWJ6o9dj8iInq/6z3aBe6d+9vX3N81PQJnH+dg5Chdkz20xTOV8kOzRLKo5R6V5KVsssrx+NcWMTJo3JUHaZh9wJultPUj+ADV3JsyzpssO9ZHnnfwQXyZmtC+QgFh2m5Yfz1gt+sDVatGVz2R17t5y4FLmTcBKnJJdRXIDUYg/XVKwj5WeFP+Wf8uEhW/lOmFrz4+MU+4TgtCpOqk5sv6gKXAizRJJfAnbN37KwCnnh8JdkndYhOymcSbg4y+aYrSGjjBOMiq6bT0X7LNsjlOsU/DflN6ZyZn8dTSv+Iej+fHuti/5Lkb6Tpf8t7JB8nbBoKsNIMfS0Fdy05TO6XSP1V8BniD2a9ep1Kstr7pP7FW3Xdsl8CCS5jvxe8leTo/fQ/Nf</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408462983497</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B48AF76B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8571d0c8-94eb-4e2c-b352-88b9ae26e7f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03008_AccountGet_FUNC_NonCS_Account_Status_as_Pending_P1" searchProperties="true" id="01cdf04e-97c2-40eb-9b9d-2ef3c6cc401e"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="8490883d-cf13-42cc-974e-25df858f7a34"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="08a6b947-6c4f-4fa4-b437-d28190c36d98"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="e606e246-0e77-4407-96b0-8623b4d80843"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","pending");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="8ffbf570-adcd-4d53-9307-fc060d3748bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeAccountGet","ACCT_INACTIVE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CC80E337A2E05307991F0A444C</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CC80E237A2E05307991F0A444C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CC80E237A2E05307991F0A444C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B48B2D6B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B48B2D6B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZc+I4EH6fX+HyPKaMD8zlClSZI7uQY7KYZIa8TMlyG0Rs2bFkjvz6lUxMgJAss1VUUWq3ur8+9HVfMhRHluMyBhknCVWG/bb62/KboWm3LM3ANV+za6iuIbPpa74dWla9icx6w1eVIWM5DCnjiPK2ahmmrRlNzWxNzJpjVx2zWmnVGk+q8ggZE6aFSsVQlXUcUeYUbttqnlEnQYwwh6IYmMOx47m3N47QdFCJSe1cblEWDrPOnPPU0XVcCQBDFOEKTmL9Uj/QuQyY45EZRTzP4M1nwNrq293ValVZVStJNtMtwzB0o6ULnYCR2Xe18628DMGQhsn23EM0oQSjiLwiCeoW+DwJFDeaJRnh8/gT06ZuGtK0BmusYdOm31X93UGB7kxLByAzhjQ2R2ZpbAwhZEAxKA/jYVv9fl4Ft3cnGaIsTLKYHZ3/DBLQJURJCoHGyshKdOdbPJGuziVgZ0hxlDOyhDvZJinCwJT7DEKyviFMNF/AlKL8ypqJHym7DPCflOVS38cqoOsnstMnM2D8/9Rsv15bK48oyqEze9Rb89dg7t7CtVFzffYK4XXYWm0epu0Cwr7yFtSu3G/n42bd9dbbpasLe/OUh/eT3H34tfgZLn6ar42uYXjDCKLly0Vvc42GKbei56frRRf5bs0cPS289OYiqA0WPHb/WUX3VrRe+j3vW96dZsAeVhd6dNd3x8nU87vTO330uBmPpm5wP1v206d65mO9jpoGv656Y2zOVq3RlT99SifZ8+DxL78xHy1WKPqW673H0YDbf0ejv+7MRtUi0/Z7TPsxHApLSvByfwGYl0fZHsO+ciXqhfjX9CIlJNDCQtVJJUcxDpSrHXlLUouTCwIigSOKuT0bxtWgWuvaza7Vr3cb7sCoVY1aq2VeGe5gUO2WHLRFcQSxl9CQSF+SZbf98zVAHDsMaACZtkxyPAemfmGxjzhShnQsHkdCGUwSweJ4ic3nesyyZjUzF3Xc4DXj2SALW1XuEv6D/sjckEN2SN3NA+oeAyYpAcnvssGZ6HDGRS5e0DLnkVlZogqFXEyATJKwY9nNms5InEYgkepxEuQRVNJ5WmRGZ9t/S0OYFdLxYFI8vE/jOv5WpkDoBEQqMBlLF0QZ4cQMMspAPg3YMvcDLs27eUDk+xL55BnBWySHn97bRPbHrkdERL973m+zxL1TP/v6x5v6F6D043zsHAVLsue2HKZiPgj26JTVfEGVl0q+XOZF/RqSGcXj5rogSFP3AOeC3jaT5BmovjOhnzVddqiPPO/kh/hyPqceRxxi0W1KcTxjtfCAydViKJ7J+ty95cClyBuHNT8l60ViA5GIv1xSsIOlnhDfi79VkgXv5Tpha8+PiFPsE5zQmTzJObL5pClwIswSQXxJtm/8lIFTzg+FuyTvsHDRTX7O4fMvimS0toowTnLKh321EOyzbIGTb1Jw3pU+mCmY/G00r9mno/nX7Y0n+C5G6k6X/LeyRop2waDKDaDA0lbXYtMUzulsj9XfAH4k9l6vaQysasO1CmJvbIndtu3eLoEHkXQ+iD9K9nJ6/B46/wI=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408462993134</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B48B2E6B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8571d0c8-94eb-4e2c-b352-88b9ae26e7f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03015_AccountGet_FUNC_NonCS_User_Status_as_Deleted_P1_UV-340" searchProperties="true" id="c94348a2-5469-40f4-a121-f3b327e71989"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="788f526f-a742-4693-a707-a074df0497e1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="61962bb9-055d-4a4c-93a2-697f04108072"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set User Status" id="b0981df8-c469-4b2f-bda4-e8f20a4ca82a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","deleted");
myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="321602c4-ea75-4174-9c33-ba36c89f9090"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeAccountGet","USER_INACTIVE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CCD46E37A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CCD46D37A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CCD46D37A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35BF549B6B96E05305991F0A65D7</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35BF549B6B96E05305991F0A65D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH7vr4jSx6OQK7cIkLi10OVWoO3ZvlTGGYLb4EDsAN1fv3YgFCh0OVtVQp6MZ765+JspMTQPLLfKGESchFRpN8rqG8LFPPIAtFzB8jQHOVOtkHNAKzj5Qt5wLJy1saq0GYuhTRlHlJdVyzAdzShoZnFsZl3Hdu1cplg0X1XlGSImTAuVjKEqm3lAmZu4LatxRN0QMcJciubAXI7dUbXbcYWmi1JMaqW0RZk4jCozzheuruOMBxiCAGdwONdL+pFOyWPuiPgU8TiCnU+PldXd3fV6nVnbmTDydcswDN0o6kLHY8S/VSs36WXw2nQabs91RENKMArIP0iC6gKfhZ5SDfwwInw2v2Da1E1DmtZggzVsOvRW1b8cJOiutHQEMmJIYzNkpsaGMIUIKAbladguq7fXVXB7dxwhyqZhNGcn5z+DBHQFQbgAT2NpZCm66y2eSVelBNhtUxzEjKygJ9tkgTAwZRDBlGw6hInm85iSlF/ZMPFP0i4D/CdlKemHWAV0/Ux2GsQHxv9PzQ7rtbXyjIIYKgVbf8zlraFOBuG9F3csmnu/+8yv9RiXEwiHyltQ+3LvzqfNuu+t3SU62PRrLW/aK/YsTB9mYyF+mb0MZ4MgaL1Gduv1t4UecUywaWft1mbxazImq1oH+s8WnVrrdrMeFWuN+/dfRnAzGHJr1WwZ9wi3HnBh3Hj1i1375cnS7dHT8vEDb4yP2QvgZv/5wcFVvzd+fa7nQtw18/X7aBPh9+r7slefBXV/ePNXv/vUbmLkt8Z/5xbL7EfHKH/FdBjDsTClhFE8eQfM06Nsj3ZDuRP1QvxnepES4mnTRNVdSI5iHChXK/KWpBY3FgREPFcUc3s2jLumna3dZZ1iLVcr5ppG1jayguTujGou28inHLRFcQKxHtIpkb4ky27752eAeO4yoB5E2iqM8QyY+oPFBuJIadOheBwhZTAOBYs7k4lPJkWfrfPcZNgwPopssV5nHVXphbxP+1F1yiE6pu7CEXUPAZMFAcnvssGZ6HDGRS6WaBXzwMysUIZCLCZAJEnYtZxCVmdkvghAItXnoRcHkFnMFklmdLb9tTSEWSIdNsfJw7sY1+m3NAVCxyNSgclYaiDKCGdmkJUGcjFgyzwMODVfjT0i35fIJ48I3iI5/vTVJrI/9j0iInqrj97MFPde/err32/qP4DST/Oxd+StyIHbdJiK+SDYo5JWc4kyy0y8WsVJ/fKSGSNhXhcEaeojwLGgt89x+AFU35vQr5oue9QnnvfyY3wxn9ERRxzmotuU5HjFajECJleLtngmm2v3liOXIm8cNvycrB6IDUQi/nFJwS6WekI8ED/rMPK+ynXG1oEfEafYJzihvjzJOfJ5oSlwKMwSQXxhdGj8nIFzzo+F+yTvsXDRTZOYw+UvimS0soowDmPK2w01ERyybIKTfy7A/VL6ZiZh8t1o3rCLo/l3tzMSfDdH6l6X/LeyRpJ2waDKDSDBUlY3YtMUzql/wOo7gN+JvV5vOLmGna8WEmLPb4m9Jv72CTyKpPJN/F1ykNPT91D5Fw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463016211</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35BF549C6B96E05305991F0A65D7</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3ad5bf81-3611-411d-81e3-00842abd1951</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03016_AccountGet_FUNC_NonCS_User_Status_as_Other_P1_UV-340" searchProperties="true" id="2d73261d-52f6-4fed-b4d1-9dedf508de2e"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="068b2950-fcae-4f50-8f25-8a8d89413e16"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="517740c4-291c-41ef-8fb9-6667292455cf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set User Status" id="3ad5bf81-3611-411d-81e3-00842abd1951"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","other");
myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="3a6c9282-d9aa-479b-8f1c-93e8905ced5d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeAccountGet","USER_INACTIVE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35B47728379AE05307991F0A9CE0</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35B47727379AE05307991F0A9CE0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35B47727379AE05307991F0A9CE0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B42BF53798E05307991F0A5105</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B42BF53798E05307991F0A5105</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7Pr/C4jx3jCyZgT2AGAulxm1sx0CYvGSEvoGDLRJLB9NcfycQECMmhZ5IZRuvV7rcXfbsXHCWx47c5ByZISrWg29SfrJr8A88z3Fp9bLgOYGMc1Syj5lbrjnt+bp03sK4FnGcQUC4QFU3dsWzXsBqG7Q3smu9WfdeqOK73qGsjYFyalioVS9fyJKbcL9w29YxRP0WccJ+iBLgvsB+2b659qemjEpPeutigLByy1kyIhW+auBIBhjjGFZwm5oW5p3MRcT8kU4pExuDVZ8Sb+uvd1WpVWVUrKZuajmVZpuWZUifiZPpFb52VlyEK6CTdnC8RTSnBKCZ/kAJ1A2KWRlo7nqaMiFnygWnbtC1l2oAcG9h26RfdfHNQoDvR0h5IxpHBZ8gujfVhAgwoBm3YD5r6l9MquLk7YIjyScoSfnD+O0hAlxCnC4gMXkZWojvd4pF0tS4A+wHFccbJEm5VmywQBq7dM5iQ/Jpw2XwR14ryazmX/6TsMsB/U5YLcxerhG4eyU6XTIGL/1Oz3XptrIxQnEFrHs1+1ifuMPplnecizv+MosnvW/hxP5w2Cwi7yhtQ23K/ng+bddtbr5eYTczRwx3pxN2vqPuTtj1nHOYP87wfOp3HUdRAk8bwx3nYxbHZoevvU/N2kmbff5m/0d1l7yZbT+feeeJ963emydl4aeG8M7+eL+/tOv+K141Gffxd/Fg4QbubPF7PprfBqDEMl6u1GDyn7W/D/njosIfh6O42qvdZfxTduTj7czO+752x5/AeV4NB1/vVzzv/9CBtNN9i2o1hX1hSQpiNnwGL8qjaI+hqV7JeSHxOL0pCImNSqPoLxVFcABV6S91S1OJnkoBI5Mtibs6WddWr1jqu07mqVeteo2fVqlbd8+wrq12zrVrJQRsUBxAvUzohypdi2U3/fA4QJz4HGgEzlmmGZ8D1Tyx2kUBaQPvycaSUwyCVLG5Hzx5+tjyXxpFlv6waE3DmDq45TNduU3FH71h7IoDtc3djj7v7gMmCgCJ41eFctjgXMhkvaJmJ2K4sUYVCJkcAUyzsO26jZnKSLGJQUM0kjbIYKovZokiNyTe/joEwL6T93qB4eR8GdvitzIHUiYhS4CqWDsg6wpEhVC0D+TBgx94NuDTfziKiHphMqGAEb5Dsf3rrE9Ug2yaRET1dhk92iXurfvL19zfNT0CZh/nYOoqWZMdtOU3lgJD00Sqr+YIqL5VsucyK+tUVNTJp3pQMaZsh4Ezy23qQzoGaWxPmSeNli/rA81a+jy8TMxoKJCCR3aYVxxN2ixC42i0C+U7yUxeXPZcybwJycUx2GcsVRCH+dEvBPlZ6Unwvf1Ypi97KdcTWjh8Zp1woBKFTdVKDZP1BU+BUmiWS+VK2a/yYgWPO94XbJG+xCNlN40zAx180RWlNHWGcZlQEXb0Q7NJsgVOsF+C/Kb0zU1D562zO+Yez+ffNdSgJL0H6Vpf8t7JBinbBoKsVoMDS1HO5akrndLpD668AjzF7ve7UJbO3d5ndu+xZ2wTuRdJ6J34v2cnp4Xto/Qs=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463019415</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B42BF63798E05307991F0A5105</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3ad5bf81-3611-411d-81e3-00842abd1951</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03017_AccountGet_FUNC_NonCS_User_Access_Full_P1" searchProperties="true" id="0143f79c-748a-4ad5-a943-612de464645b"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="0cf511cb-410b-4843-b27a-ba8e24a7c4b2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="3ffb0dcd-e402-4b2b-b013-ab64b9b59176"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="96d1896e-894d-4c09-81a8-1c63c45accb9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CDB89A379EE05307991F0A9FE6</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"00FE35C6F7096B92E05305991F0A81AF:6FA29BAE"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CDB899379EE05307991F0A9FE6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CDB899379EE05307991F0A9FE6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B3DF4D6B78E05305991F0ABA86</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B3DF4D6B78E05305991F0ABA86</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx3jGzd7AjMQQus0oTRQ0vSlI+QF1NgylmQw+fWVTEyAkBx6ZphhtF7tfnvRt3vBURw5fodzYIIkVAt6Lf23ZTu2h5p1A3vN0Ki6Xt1ogoeNqV1tumA5qOZNdS3gPIOAcoGoaOmOZVcNq2nY3tiu+VVX/ip11/2laxNgXJqWKhVL1/I4otwv3Lb0jFE/QZxwn6IYuC+wP+rc3vhS00clJr19sUVZOGTthRBL3zRxJQQMUYQrOInNC/NA5yLk/ojMKRIZg2efIW/pz3fX63Vl7VYSNjcdy7JMyzOlTsjJ/KPe/lBehjCgs2R7vkQ0oQSjiDwhBeoWxCIJtU40TxgRi/gN07ZpW8q0ATk2sF2lH3XzxUGB7kxLByAZRwZfILs0dgczYEAxaD/ugpb+8bwKbu+OGaJ8lrCYH53/DRLQFUTJEkKDl5GV6M63eCJd7QvAfkBxlHGygoFqkyXCwLUhgxnJbwiXzRdyrSi/lnP5I2WXAf6XslyY+1gldPNEdnpkDlz8n5rt12trZYKiDNqb5WpjfkLrQY01B1n8yfsyrA+f/iTj9KFVQNhX3oLalfv5fNysu956vjR/fHBqg8W8M+vTbHT/+fY+z7PEufa+5rQxcZbXn+ub6+9Pm+GPq+qjyRvfU0wInt1XNz+nf9Lg3pnez59cG32NUvrhBga11LlOxQ1riPAB0BpgJMTiy6h7J4JfYtzzrCqtTgc3k+F68ok730c264TXIvoaPnR7uT0kcQ8zGoed5odZf/WQ/px088dvn/vcnTzRoPUS034Mh8KSEkbZ9A9gUR5VewQ9rS/rhcT79KIkJDRmhaq/VBzFBVCht9UtRS1+JgmIhL4s5vZsWf0rt9Z1e/1qr95tNK+smmvVPM/uW51up1kvOWiL4gjiZUJnRPlSLLvtn/cB4tjnQENgxirJ8AK4/o7FHhJIC+idfBwJ5TBOJItnJK3X6+skda3UZjGs06d8xRvhQtcGifhGv7HOTAA7pO7mAXXfASZLAorfVYNz2eFcyFykaJWJyK6sUIVCJicAUyTsO9VmzeQkXkagkJpxEmYRVJaLZZEZk2//HQNhXkjvrsbFw3szruNvZQqkTkiUAlexdEGWEU7MILcM5M2AHXs/4NJ8JwuJel8yn4IRvEVy+OmlTVR/7HpERvT7cvTbLnHv1M++/vqm+Q4o8zgfO0fhiuy5LYepnA+SPdplNVNUSSvZapUV9WsoZmTSvCkJ0jZHgDNJb5tx8gjU3Jkwz5ouO9RHnnfyQ3yZWNCRQAJi2W1acTxjtRgBV6tFIJ9Jfu7ecuBS5k1ALk7JLiO5gSjE7y4p2MdKT4qH8m+dsPClXCds7fmRccp9QhA6Vyc1RzZvNAVOpFkiiS9h+8ZPGTjl/FC4S/IOi5DdNM0EvP1FU4zW0hHGSUZF0NMLwT7LFjjFZgn+i9IrMwWTP4/mnL85mn/e3owk38VI3+mS/1Y2SNEuGHS1ARRYWnouN03pnM73WP0Z4Gtiv+x1m57nNryrgtgbW2L3+lc7Yj+MpP1K/Fqyl9Pj99D+Cw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463022669</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B3DF4E6B78E05305991F0ABA86</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03018_AccountGet_FUNC_NonPortal_NoManageAccountConsentPolicy_P1" searchProperties="true" id="26b115c9-a627-4a1e-8862-b6236fa8b28e"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="fc963034-7917-447b-9870-5f12eaa5fc46"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="604af840-c9f3-40cc-b458-8eb2c19b2383"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update MAC Policy" id="e05ea227-4fdd-412b-9436-bb0204decd45"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_Policy_Status")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","deleted");
myTC.setPropertyValue("Policy","105");
myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("UserName",tC.getPropertyValue("UserName1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="91b3ca05-ca53-4fa0-b46d-071acbc26493"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","NO_MNG_ACC_CNST");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35B48B806B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35B48B7F6B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35B48B7F6B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35BE9EE26B84E05305991F0AFAB5</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35BE9EE26B84E05305991F0AFAB5</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyo4gWSBqCBx3WVLCwLa7ulLZZwJcZs4EDtc+uuPHRoKlPawR0JCnoxnvrn4m7nmOAqLboNzSASNmdZr1/Tnou9U7KlNDLvogGFPfWxUwLYMs0zAxKbn+X5Z13qcp9BjXGAmanrRtGzDrBhWdWI5rl1y7XLBLNlPuvYACZempUrB1LV1FDLuZm5repowN8accpfhCLgriDtu3PZdqeniHJNev96izBwm9UCIuYsQKXhAIAxJgcQRukYHOtced8d0xrBIE3j36fGa/n53tVoVVqVCnMxQ0TRNZFaR1PE4nV3q9Yv8Mng95sfbcwuzmFGCQ/qGFahbEEHsaY1wFidUBNEXpi1kmcq0AWtiEMtmlzr6cJChO9PSAciEY4MH2MqNjcCHBBgB7X7Uq+mX51Vwe3eSYMb9OIn40fnvIAFbQhjPwTN4HlmO7nyLJ9JVvwbi9hgJU06XcKfaZI4JcG2YgE/Xfcpl83lcy8qvrbn80bzLgPxNWa7RPlYJHZ3ITpvOgIv/U7P9em2tPOAwhfrVwLkKntZVtHgoIycctFdvC7M1IklAahmEfeUtqF2538/HzbrrrfdLm/iPdzMR6MEf9J8W7WHLmZRurC7IlDVJ1Zr8vpreTKNBuzKxx9FKzJKHahwsGy/cfkocNPh131kj+kpXvPnP7UUajO82uCce+XDTT1vtl6j1c/n7LpphehVMXm30g47Ww82qX3FWP+/t0t3UHAZNVr4abu4W0H2BYvBG2/P+1cB/uOhsYOS30tljdfbYGprBL69X+4hpP4ZDYU4J43T6AkTkR9UevbbWlfXC4nt6URLqGX6m6s4VR3EBTOh1dUtRi5tKAqKeK4u5PZtmt1Nymp1qp1P80azYHdMpmU61anXNRrfRdHIO2qI4gtiKmU+VL8Wy2/75HiCJXA7Mg8RYxikJgOvfWGxjgbUeG8nHETMOk1iy+Jy+lkrYnIoqLhbForwsE/pSDkNdu4vFgA2Shi8gOWTuygFzj4DQOQVF76q/uWxwLmQqFniZitAqLHGBQSoHQKI42C3aFQdxGs1DUEBRFHtpCIV5MM8Sg/j2v2hgwjPpqDPJ3t2XYR1/yzMgdTyqFLiKpQmyinBiBJXyQL4MuGjtB5ybb6QeVc9LplMklGyRHH766BLVHrsWkRE9t8bPVo57p3729c830Teg0HE+do68Jd1zm89SOR4kedTzai5wYVFIl8s0q19ZEWMizSPJjxYaA0klu20m8SswtDOBzhouO9RHnnfyQ3ypCNhYYAGR7DYtO56xWYyBq82iJ1/J+ty15cClzJuAtTgla4VyAVGIv91RiEuUnhQP5d8qTryPcp2wtedHxinXCUHZTJ3UGNl80RQklmap5L042Td+ysAp54fCXZJ3WITspmkq4OsvmiK0mo4JiVMmem09E+yTbIZTbObgfih9MpMR+ftkXvMvJ/Of2/5Y0l2E9Z0u/W9lg2btQkBXC0CGpaav5aIpnbPZHqm/AzzB63alWe7+aJYb+7ze6ZSauwQeRFL/JP4s2cvp8Xuo/ws=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463026093</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35BE9EE36B84E05305991F0AFAB5</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="AccountGet_FUNC_CS_P2" id="22b1be1a-c122-422a-9c12-38c0037b153d"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03001_AccountGet_FUNC_CS_User_Access_Basic_200_OK_P2" searchProperties="true" id="e28f00b0-426d-4aab-a513-3e93c1e0e279"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="5c5a190c-eaf1-42e0-8cc6-109055c42c9e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="8cb8128e-bb17-4525-b989-141a36d0584c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )


log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult BAU" id="0be5c7af-4773-465b-a5d0-41a64406c2d3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


tC.setPropertyValue("LegalGuardian","");

//required for Child user Create

//tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FAU1"));
//tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Adult BAU Create" id="9a8641e5-a9f6-4f9a-8881-202c73d01a65"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )

log.info country;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");


def myTS = tP.getTestSuiteByName("User_Create_API")



myTC.setPropertyValue("Country",country);
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Retailer_CS" id="76a91f21-0c08-45b5-b2f6-84e1a7c549bc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="ab628a1f-cf19-4492-9adb-a8f001acc242"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>FC67139599057959E0401F0A0599624E</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FC67139599557959E0401F0A0599624E:E8E5CDB7"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC67139599047959E0401F0A0599624E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC67139599047959E0401F0A0599624E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC671437BEE68932E0401F0A05996246</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FC671392D75D36D9E0401F0A0599624C</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC671437BEE68932E0401F0A05996246</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FC671392D75D36D9E0401F0A0599624C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb+o6EH7vr4jSxypkIWwRILGVUgrlAF1fKtdxwG3iBNth+/XHDoQCpb2cKyEhT8Yz3yz+ZsoMBL7l1BhDlOOQKJ1mRX2zSkbOgjbUPDOb1eysbWkAoJxme6YBc+9FI2+/q0qHsRh1COOA8IpqGaatGXnNssZGzrENxy5mzKz9qiqPiDJhWqhkDFVZBj5hTuK2osaUOCFgmDkEBIg5HDqjWu/OEZoOSDGp1fIGZeKQVqecR46uw4yLIPJ9mIFhoJf1A52yy5wRnhDAY4q2Pl1WUbd3F4tFZpHNhHSiW4Zh6EZJFzouw5NLtXqRXkZuh3jh5twAJCQYAh+vgQTVQ3waukrNn4QU82nwg2lTNw1pWkNLqEHTJpeq/uUgQXempQOQlAGNTYGZGhsiD1FEIFIehp2KenleBTd3xxQQ5oU0YEfnf4OEyBz5YYRcjaWRpejOt3giXdUygk6HQD9meI76sk0iABFTBhR5eHmHmWg+lylJ+ZUlEz+cdhmC/1KWsr6PVUDXT2SniSeI8f9Ts/16baw8Aj9G1ZV1279qT3hj0sn5dkMvrUbPA9AVh1olgbCvvAG1K/f2fNysu97aXlp3h2vDfW4/LbsUxl2317dnr+3Z7fqBDQa0df1RH129fHbgDe7PZt38mnqP60+jOPozx837+hOlfwb3L7l525w1mxfP43pxcbN09aVb72X1GuULe52z9Ido1YOjKHqCL93B47B983SVj7uf7GNl9u9e5wF4uZvWImMGHl89LzcuvIRt+4I9Btak1CrU6q3moPnQzt3ala+Y9mM4FKaUMIrfPxDk6VG2R6epXIt6Af47vUgJdjUvUXUiyVGMI8LVqrwlqcWJBQFh1xHF3JyvG/mCaWcL9VYrXyxlrZZhG+a1UTNypVLesvMpB21QHEFshMTD0pdk2U3//A4QBg5DxEVUm4cxnCKm/mKxCThQOmQoHkdIGBqHgsXZB8h+RgFfLb25mf9cFycuz87iwoeq9EN+T+5pzeOIHlJ38YC6hwjiCCPJ77LBmehwxkUuZmAec9/MzEGGoFhMACpJ2LHsYk5nOIh8JJHqQejGPspE0yjJjM42/4KLIEukw9Y4eXg/xnX8LU2B0HGxVGAyljoSZUQnZlA2DeTHgE1zP+DUfC12sXxfIp+cYrhBcvjpq01kf+x6RET01hi9mSnunfrZ17/f1H8BpR/nY+fIneM9t+kwFfNBsEc1reYMZGaZeD6Pk/oVJDNSYV4XBGnqIwRjQW+rcfiJiL4zoZ81XXaojzzv5If4Yj4lIw44CkS3KcnxjNVihJhcLTrimSzP3VsOXIq8cbTkp2QNX2wgEvGvSwp0oNQT4oH4W4TU/SrXCVt7fkScYp/gmEzkSc6R1Q9NAUNhFgviC+m+8VMGTjk/FO6SvMPCRTe9xxz9/EWRjFZRAYRhTHinqSaCfZZNcPJVhJwvpW9mEibfjuYl+3E0P/fuRoLvAqDudPF/K2s4aReIVLkBJFgq6lJsmsI5meyx+hbgN2LPlgSNG3ZB/B0Re2uXwINIqt/E3yV7OT1+D9W/</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb+o6EH7vr4jSxypkIWwRILGVUgrlAF1fKtdxwG3iBNth+/XHDoQCpb2cKyEhT8Yz3yz+ZsoMBL7l1BhDlOOQKJ1mRX2zSkbOgjbUPDOb1eysbWkAoJxme6YBc+9FI2+/q0qHsRh1COOA8IpqGaatGXnNssZGzrENxy5mzKz9qiqPiDJhWqhkDFVZBj5hTuK2osaUOCFgmDkEBIg5HDqjWu/OEZoOSDGp1fIGZeKQVqecR46uw4yLIPJ9mIFhoJf1A52yy5wRnhDAY4q2Pl1WUbd3F4tFZpHNhHSiW4Zh6EZJFzouw5NLtXqRXkZuh3jh5twAJCQYAh+vgQTVQ3waukrNn4QU82nwg2lTNw1pWkNLqEHTJpeq/uUgQXempQOQlAGNTYGZGhsiD1FEIFIehp2KenleBTd3xxQQ5oU0YEfnf4OEyBz5YYRcjaWRpejOt3giXdUygk6HQD9meI76sk0iABFTBhR5eHmHmWg+lylJ+ZUlEz+cdhmC/1KWsr6PVUDXT2SniSeI8f9Ts/16baw8Aj9G1ZV1279qT3hj0sn5dkMvrUbPA9AVh1olgbCvvAG1K/f2fNysu97aXlp3h2vDfW4/LbsUxl2317dnr+3Z7fqBDQa0df1RH129fHbgDe7PZt38mnqP60+jOPozx837+hOlfwb3L7l525w1mxfP43pxcbN09aVb72X1GuULe52z9Ido1YOjKHqCL93B47B983SVj7uf7GNl9u9e5wF4uZvWImMGHl89LzcuvIRt+4I9Btak1CrU6q3moPnQzt3ala+Y9mM4FKaUMIrfPxDk6VG2R6epXIt6Af47vUgJdjUvUXUiyVGMI8LVqrwlqcWJBQFh1xHF3JyvG/mCaWcL9VYrXyxlrZZhG+a1UTNypVLesvMpB21QHEFshMTD0pdk2U3//A4QBg5DxEVUm4cxnCKm/mKxCThQOmQoHkdIGBqHgsXZB8h+RgFfLb25mf9cFycuz87iwoeq9EN+T+5pzeOIHlJ38YC6hwjiCCPJ77LBmehwxkUuZmAec9/MzEGGoFhMACpJ2LHsYk5nOIh8JJHqQejGPspE0yjJjM42/4KLIEukw9Y4eXg/xnX8LU2B0HGxVGAyljoSZUQnZlA2DeTHgE1zP+DUfC12sXxfIp+cYrhBcvjpq01kf+x6RET01hi9mSnunfrZ17/f1H8BpR/nY+fIneM9t+kwFfNBsEc1reYMZGaZeD6Pk/oVJDNSYV4XBGnqIwRjQW+rcfiJiL4zoZ81XXaojzzv5If4Yj4lIw44CkS3KcnxjNVihJhcLTrimSzP3VsOXIq8cbTkp2QNX2wgEvGvSwp0oNQT4oH4W4TU/SrXCVt7fkScYp/gmEzkSc6R1Q9NAUNhFgviC+m+8VMGTjk/FO6SvMPCRTe9xxz9/EWRjFZRAYRhTHinqSaCfZZNcPJVhJwvpW9mEibfjuYl+3E0P/fuRoLvAqDudPF/K2s4aReIVLkBJFgq6lJsmsI5meyx+hbgN2LPlgSNG3ZB/B0Re2uXwINIqt/E3yV7OT1+D9W/</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3vV0TpYxWSQLhFBYlCL6H0AmHvs9uXynUmwSU4aWxTytcfOzQUKO1hHwkJeTKeWXPxmjllaBaX3Q5jkHGSUM3rtfQnQM/ouYocI2xC03DKjcBoVuoNIwxqqFqzoNJolHXNY0yARxlHlLf0smU7hlUzyuWxVXUdy63apYpTedS135AxaVqqlCxdW8xiytzcbUsXGXUTxAhzKZoBczl2/c7NwJWaLiow6e3TFcrcYdaecJ66polLAWCIY1zCycw8Nbd0TgPm+iSiiIsMPnwGrKV/3H17eyu9VUpJFplly7JMq2lKnYCR6FhvHxWXIfBomKzOXUQTSjCKyRIpUDfAJ0mgdeIoyQifzL4xbZu2pUwbsMAGth16rJufDnJ0B1raApkxZLAJsgtjIwghA4pB+zXyWvrxYRVc3R1niLIwyWZs5/x3kIDOIU5SCAxWRFagO9zinnS1TwG7HsWxYGQOt6pNUoSBafcZhGQxIEw2X8C0vPzagskfKboM8N+U5dTcxCqhm3uy0yMRMP5/arZZr5WV3ygW0J6EYZKcjM4j8f4y79AaTbBZxlf0QrBWDmFTeQVqXe6P826zrnvr45KfnVSrfbNyF+Ea7g8fpjVyychz5CPr+U992I/6ywZ7MAf98XWaRl3vCvhNpz/170fWdYqX54/jcfXtTiynIhJHnvOPc9tphpVg4FXPb/zbS46Wtcrj2dK66w2BvIzu0hc0tBuzx7PF66j6a+IHdNkX8fBaVLq17sX0Hd0PHk7qg5P60eVVbVA/Q+xkOLy1JyOEx9PWZ0ybMWwLC0rwxfMLYF4cVXt4Pe1C1gvxn+lFSUhghLmqmyqOYhwo19vqlqIWV0gCIoEri7k6X3RrdbvSLPfq1V6l1mueW45lX1gdq9ps1spOt+CgFYodiN2EhkT5Uiy76p+fAeKZy4AGkBnzROAJMP0Hiz3EkebRkXwcCWUwTiSLTybvUycKiQhEmAYNXE+yeWxxpmu3Cb+jd1kn5JBtM3dji7lHgElKQNG76m8mG5xxmYpXNBc8tktzVKIg5ADIFAe7ZadRNRmZpTEooOYsCUQMpXSS5okx2eq/bCDMcunofJy/u2/D2v1WZEDqBEQpMBXLGcgqwp4R5BSBfBuwbW8GXJjviICo5yXTyTOCV0i2P312iWqPdYvIiJ66/pNd4F6rH3z9603zB1Dmbj7WjoI52XBbzFI5HiR5tItqvqLSa0nM5yKvX10RYybNm5IfbdMHLCS7vY+TKVBzbcI8aLisUe94Xsu38Qk+oT5HHGay27T8eMBm4QNTm4UnX8ni0LVly6XMG4cF3yfrxnIBUYh/3FGwi5WeFN/Lv7ckCz7LtcfWhh8Zp1wnOKGROqkx8v5NU+BEmiWS95Js0/g+A/ucbwvXSV5j4bKbngWH779oitBaOsI4EZR7PT0XbJJsjpO/p+B+Kn0xkxP5x2ResG8n85+bgS/pbob0tS75b2WD5O2CQVcLQI6lpS/koimd02iD1D8A7uF1yeKWU5d/O7x+vk7gViTtL+Kvko2c7r6H9r8=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AccountDelete_user20130918_1379459446852</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415647277</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20140622_1403415650556</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC671437BEE78932E0401F0A05996246</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>FC671392D75E36D9E0401F0A0599624C</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b44627d5-7732-472b-b74e-aeac81a3f1ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03002_AccountGet_FUNC_CS_User_Access_Standard_200_OK_P2" searchProperties="true" id="eaadda5d-aae7-4822-9a1d-786a85ed6904"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="4bd7e690-e107-4c8c-a275-14b0093b2c15"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="d05a22db-a7e7-4871-a9e4-9ccfbb2fd637"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

//def audience = context.expand( '${#TestSuite#audience}' )
//tP.setPropertyValue("audience",tS.getPropertyValue("audience"));

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult SAU" id="c5851b26-ea9e-424d-8262-0caf7c5836ae"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


tC.setPropertyValue("LegalGuardian","");

//required for Child user Create

//tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FAU1"));
//tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Adult SAU Create" id="bc43e58a-b654-4403-85f6-8129b3a59b3e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )

log.info country;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");


def myTS = tP.getTestSuiteByName("User_Create_API")


myTC.setPropertyValue("Country",country);
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Retailer_CS" id="dfab5fa4-66ba-4dd3-b47d-e9496a9cef82"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="c63f612e-da80-43e7-8d92-f3f37b6270e7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>FC67142C49321339E0401F0A05996248</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FC6713980212C771E0401F0A05994595:8EC4DEA1"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC67142C49311339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC67142C49311339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC671395995A7959E0401F0A0599624E</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FC671437BF4C8932E0401F0A05996246</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC671395995A7959E0401F0A0599624E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FC671437BF4C8932E0401F0A05996246</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyj0chF25JVJC4dZvdlvYU2u32pTLOBFyCDbEDaX/92oFQoLSHPRIS8mQ8883F38w5R7PY8VucQyIIo1rQbejP9XINHBS6Rh2Vy0YFjZDhWi4YTtW23JENOPQ8XQs4TyGgXCAqGrpj2RXDqhmOM7SqfsXyq9WS41WfdO0BEi5NS5WSpWvZLKbcz9029DShPkOccJ+iGXBfYH/Qur7ypaaPCkx683yNMneYNCdCzH3TxKUQMMQxLmE2M8/NPZ3zkPsDMqZIpAlsfIa8oW/urlar0qpcYsnYdCzLMi3PlDohJ+NvevOsuAxhQCO2PncQZZRgFJM3pEBdg5iwUGvFY5YQMZl9Yto2bUuZNiDDBrYr9JtuvjvI0Z1oaQ9kwpHBJ8gujN1BBAlQDNr9XdDQv51WwfXdYYIoj1gy4wfnv4MEdAkxm0No8CKyAt3pFo+kq3kO2A8ojlNOltBXbTJHGLh2m0BEsivCZfOFXMvLr2Vc/kjRZYD/pizn5i5WCd08kp0uGQMX/6dmu/VaW3lAcQrNH3DRSrIA1ZzkPu49xqTt/Ki6rw9Bp9fIIewqr0Fty705Hzbrtrc2l0a/ovAG/X68rH2/hLeR9bAw2Qq9hu3F9cVy2AlriyWbUOK2vF7/V9bt9yieX87bt78698t+Uh20v1u/a1c9O2KXnbN/PDtEtz9Hi6eRt+rcoHsUs6xm3vSvI7j4HY77qQWrS2j3O9lLN2m5s357WocrYcHL089J9v2HFaWD8iJI58N/zwbuU/SYVp7ct2lLjKc2dqeN95h2Y9gXFpQwSEcvgEVxVO0RdLULWS8kvqYXJSGhEeWq/lxxFBdAhd5UtxS1+KkkIBL6spjr80WnVrfLXtXzqq26/OtZFcu+sFqWlNScSq/goDWKA4gdRiOifCmWXffP1wDxzOdAQ0iMJUvxBLj+hcUuEkgL6J18HIxyGDLJ4ou3LLbhrf6SVmzseJG9ihxvupjqWp+JG3qTtCIByT5zu3vMfQeYzAkoelf9zWWDcyFTsUDLVMR2aYlKFFI5ABLFwb5TcasmJ7N5DAqoOWNhGkNpPpnniTH5+t8xEOa59K43zN/dp2EdfisyIHVCohS4iqUNsopwZARVikA+Ddi2dwMuzLfSkKjnJdMpEoLXSPY/vXeJao9ti8iInjuDZ7vAvVU/+frHm+YXoMzDfGwdhUuy47aYpXI8SPJoFtVcoNKilC6XaV6/uiLGRJo3JT/a5gBwKtntdcimQM2tCfOk4bJFfeB5K9/Hl4oJHQgkYCa7TcuPJ2wWA+BqswjkK8lOXVv2XMq8CcjEMVknlguIQvzljoJ9rPSk+Fb+rVgSvpfriK0dPzJOuU4IQsfqpMbI6ydNgZk0SyTvsWTX+DEDx5zvC7dJ3mIRsptGqYDPv2iK0Bo6wpilVARdPRfskmyOU7zOwX9X+mAmJ/LNZM74p5P58fpqIOluhvStLvlvZYPk7YJBVwtAjqWhZ3LRlM7peIfUNwA/8HrF6VS8sm2Xy4e87m4TuBdJ84P4o2Qnp4fvofkH</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4iyj0chF25JVJC4dZvdlvYU2u32pTLOBFyCDbEDaX/92oFQoLSHPRIS8mQ8883F38w5R7PY8VucQyIIo1rQbejP9XINHBS6Rh2Vy0YFjZDhWi4YTtW23JENOPQ8XQs4TyGgXCAqGrpj2RXDqhmOM7SqfsXyq9WS41WfdO0BEi5NS5WSpWvZLKbcz9029DShPkOccJ+iGXBfYH/Qur7ypaaPCkx683yNMneYNCdCzH3TxKUQMMQxLmE2M8/NPZ3zkPsDMqZIpAlsfIa8oW/urlar0qpcYsnYdCzLMi3PlDohJ+NvevOsuAxhQCO2PncQZZRgFJM3pEBdg5iwUGvFY5YQMZl9Yto2bUuZNiDDBrYr9JtuvjvI0Z1oaQ9kwpHBJ8gujN1BBAlQDNr9XdDQv51WwfXdYYIoj1gy4wfnv4MEdAkxm0No8CKyAt3pFo+kq3kO2A8ojlNOltBXbTJHGLh2m0BEsivCZfOFXMvLr2Vc/kjRZYD/pizn5i5WCd08kp0uGQMX/6dmu/VaW3lAcQrNH3DRSrIA1ZzkPu49xqTt/Ki6rw9Bp9fIIewqr0Fty705Hzbrtrc2l0a/ovAG/X68rH2/hLeR9bAw2Qq9hu3F9cVy2AlriyWbUOK2vF7/V9bt9yieX87bt78698t+Uh20v1u/a1c9O2KXnbN/PDtEtz9Hi6eRt+rcoHsUs6xm3vSvI7j4HY77qQWrS2j3O9lLN2m5s357WocrYcHL089J9v2HFaWD8iJI58N/zwbuU/SYVp7ct2lLjKc2dqeN95h2Y9gXFpQwSEcvgEVxVO0RdLULWS8kvqYXJSGhEeWq/lxxFBdAhd5UtxS1+KkkIBL6spjr80WnVrfLXtXzqq26/OtZFcu+sFqWlNScSq/goDWKA4gdRiOifCmWXffP1wDxzOdAQ0iMJUvxBLj+hcUuEkgL6J18HIxyGDLJ4ou3LLbhrf6SVmzseJG9ihxvupjqWp+JG3qTtCIByT5zu3vMfQeYzAkoelf9zWWDcyFTsUDLVMR2aYlKFFI5ABLFwb5TcasmJ7N5DAqoOWNhGkNpPpnniTH5+t8xEOa59K43zN/dp2EdfisyIHVCohS4iqUNsopwZARVikA+Ddi2dwMuzLfSkKjnJdMpEoLXSPY/vXeJao9ti8iInjuDZ7vAvVU/+frHm+YXoMzDfGwdhUuy47aYpXI8SPJoFtVcoNKilC6XaV6/uiLGRJo3JT/a5gBwKtntdcimQM2tCfOk4bJFfeB5K9/Hl4oJHQgkYCa7TcuPJ2wWA+BqswjkK8lOXVv2XMq8CcjEMVknlguIQvzljoJ9rPSk+Fb+rVgSvpfriK0dPzJOuU4IQsfqpMbI6ydNgZk0SyTvsWTX+DEDx5zvC7dJ3mIRsptGqYDPv2iK0Bo6wpilVARdPRfskmyOU7zOwX9X+mAmJ/LNZM74p5P58fpqIOluhvStLvlvZYPk7YJBVwtAjqWhZ3LRlM7peIfUNwA/8HrF6VS8sm2Xy4e87m4TuBdJ84P4o2Qnp4fvofkH</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1VwblwSFSQKW0q3pbtAL6cvK9c24G3iBNsJ0F9/7NBQoLSHPRIS8mQ8883M588+EzCO3LAtBOGSJszod5vmb8/zHKdeDSzs1BuWH8CaFTh4YjmBj2sNB1U9VDeNvhAZ6TMhIZNN07Ud37JrluuO7Wro22G1Ual7wZNp3BMuVGjlUrFNYxlHTIRF2qaZcRYmUFARMhgTEUoUjto316HyDGGJyWydrVEWCXlrJmUaAoAqmCASRaiCkhicgR2fMyzCEZ0yKDNO3nJi0TTf9i4Wi8rCqyR8ClzbtoEdAOWDBZ2emq2TcjPBfTZJ1usOZAmjCEb0FWpQN0TOEmy0o2nCqZzFn4R2gGPr0BZZIgs5Pjs1wXuCAt2RkXZAcgEtMYNOGWxIJoQThohxN+w3zdPjJrjeO+aQiUnCY7G3/jtIhOUkSlKCLVFWVqI7PuKBdrXOCAr7DEWZoDkZaJqkEBFh/ORkQpfXVCjyYWEU4zeWQv1oyTKC/mYsZ2Abq4IODnSnS6dEyP8zs+15raPcwygjLaftfptmw4eZfxv3xGswtjvV8fw+WOTtZgFh23kNajPut/U+WTfcetv0PHjNSG7Hvg173YeX64AvV92XHs/w5Xl/fheBPJsDcTX8xUadeCDx4ze+uoe9x/zpF56fT1cBUluesisQg8XJQDzagwueP6e154mTNxa/sic3XaX4n77bg8s5Cwajl7w38ybxD/bT83/czMaXw3nvz9XD3WMj8liyvL65XGJwdeef1PnV+W16uWLRxWWtfn3+kH9vvte0XcOusZSEUfb8hyBZLjU9+l3jQs0Lyq/lRVsotiaFa5hqjRKSMGm29C4tLWGmBIjiUA1zvb7o1OqO79XPL/xOI/Dc77ZvOxd2264GQc31a6UGrVHsQewkbEJ1Lq2ya/58DRDFoSAME27lSYZmRJhfROxCCY0+G6rDkTBBxolScScRuZfgqpwFjZkDHTeiSRTX0mhlGoNE3rJb3p5Iwne1u7Gj3UOCaEqJFnjNcKEoLqRqxhzmmYycSg4rjGTqCuBahUPXb1SBoHEaEQ0VxAnOIlJJZ2nRGiDW/64FkSisw+/j4uR9Wtj+t7IHygdT7SB0LedEzZEcuIT8spBPC3ac7YLL8O0MU33AVEMlp2iNZPfTO080QTYkURX97ox+OyXujfvR2z/uBF+AAvv92CTCOd1KW96m6oJQ8tEqpzmHlXkly/OsmF9dSyNX4YFSSAeMCMqUvq3GyQthYBMCHHW9bFDvZd7Yd/FlcsZGEkoSK7YZxfKIt8WICP226Ktzsjz24bKTUvVNkqU8ZOtE6gmiEX/5SkEh0n7K/FP9LRKO38d1INZWHlWnelBIyqZ6pS+S1SekQIkKS5XyJXw7+KEAh5LvGjdN3mCRik3PmSSffzG0pDVNiFCSMdnvmoVhW2YLnHKVkvDd6UOYQsrf7ual+PRufry5HinBi6G58aX/7WzRgi6ImPoJUGBpmkv11FTJ2XRL1t8AflR2t+MHij+eF+wpe2PTwJ1KWh/MHy1bPd0/D61/AQ==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AccountDelete_user20130918_1379459446852</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415654349</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20140622_1403415657926</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC671395995B7959E0401F0A0599624E</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>FC671437BF4D8932E0401F0A05996246</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5da56a8d-11f7-4984-99b2-aa2ad88ae0d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e195b081-7276-40fb-8077-075dee783c29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03017_AccountGet_FUNC_CS_User_Access_Full_200_OK_P2" searchProperties="true" id="3ccf5204-c236-492e-8a00-43274628d815"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="e24a475a-f736-4359-ad7c-55766fa2fc2b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="36675219-dfd1-4535-b992-efd9d10e4275"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Retailer_CS" id="b0cd655a-b71b-4728-ac63-7b046aa4149d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="4a1cd0e1-036f-4fcd-b70a-0a0c08daf793"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>FC6713E65469E8B3E0401F0A0599624A</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FC671392D7EF36D9E0401F0A0599624C:300C0EC3"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC6713E65468E8B3E0401F0A0599624A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC6713E65468E8B3E0401F0A0599624A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC671392D7B436D9E0401F0A0599624C</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E84B3543D1AE867EE0401F0A07997C1E</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC671392D7B436D9E0401F0A0599624C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E84B3543D1AE867EE0401F0A07997C1E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdU+I8FL73V3Tq5U5p2lKgHWCmUlyrKAyIrt44IQ0l2qbYpID++k2KRUD0Zd+rTk7Px3M+8pw0GUxi0/UYwxknKVUCv6U+WdOpXTVspE0mdlWrWghrDoJQc4zQATVjUq+BhqoEjOU4oIxDyluqCQxLM4AGnFtQd23btexKrWE9qsodzphwLVQqQFVWSUyZW4RtqXlG3RQywlwKE8xcjtyRd91zhaYLS0xqu7lGWQTM2jPO566uo0qIEY5jVEFpojf1HZ1myNwRiSjkeYY/YoaspX7YLpfLytKqpFmkmwAAHTi60AkZiU7V9klpjMOATtP1uQNpSgmCMXmHEtQ15rM0VLw4SjPCZ8k3rg3dANK1hldIQ0aVnqr6Z4AC3ZGedkBmDGpsBo3S2RBPcYYpwsp4GLTU0+M6uLa9zSBl0zRL2N753yBhusBxOsehxsrMSnTHezxQrnYTIzegKM4ZWeAbOSZziDBTBhmeklWPMDF8IVOK9isrVk4YRv/Skqa+jVPA1g9UxicRZvz/9Gu7V2svdzDOcfv64X40e73oT5PgvfsIgsfB5fPl1dvZLHloFRC2ldegNq3+OO8P6mauPowi36n27gfQc+7yx0H3PR3w8fD5+n5ee1lkEx55JvJ7fv6cC6O7gd9h70u9H8Y3Z797fj+aAuvq6td7Pwkff/f6J9C7G3aeL6KHyegqejivd8Cft2x8Z/YaEN3EUf91qUfzYDL2XnqvTmjds2s6mV2MvMukZ4DxzDbHqzqm/nA2Guon/YcXFNmpCXq/kvu8yqY2an3mtJ3DrrCkg1E+ecaIl0c5GoGvnIt+Qf4ztUgJCbVpoerOJT8xjilX29JK0oqbC/IhoSuauT53G9Uzq+qArm3Vfc+ud0EVGOfAA3XHqXdMUPLPGsUexE5Kp0TGkgy7np+fAaLEZZiGONMWaY5mmKk/ePQhh0pAh+JipJTh21QweNfodv0z0PAadvesZp8D2/BMxzh3LM8WwOuqcpPyPu1n3pTjbIe9DbDD3kOMyJxgSfFyzpkYdMZFSV7hIuexUVnACsW5WAKZ5GHXrDZsnZFkHmMJWE/SMI9xZT6bFwXS2fprahCxQjrs3hb379v09v+VlRA6IZEKTOZyhkU38YE1ZJaJfJ+wtZ1w6d7LQyKvmSgrzwhaI9n99Tktckw2oyIyeuqMnowS90b9aPOvlvoPoPT9emwChQuyFbbcp2JFCBJpl918hZXXSr5Y5EX/6pIgM+FeN3RQ10cY5YLl3m7TF0z1jQv9qAWzQb0XeSPfxZfzGR1xyHEipk0pjke8LkaYyddFIG7L6tiny05IUTeOV/yQrBOLR4hE/OM7BblI6gnxQHyWaRZ+tuuAr604Ik/xpOCERvIk18nbN0OBUuGWCP5Ls23nhxwcCr4r3BR5g4WLaZrkHH//R5HE1lIhQmlOeeCrhWCbbAuc/G2O3U+lL24KQv/Y0Cv27Yb+c90bCdpLoLrRJf+trJFiXBAWVowUWFrqSjw2RXAabZH7B8Av/G5XLd+omY1avbvL70Z3U8CdTNpfxF8lWzXdvw/tvw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZrU/I6EP7ur+jUj0xJC6VAR5hBir5V8ULRI35xYhog2Ca1Sbn4609SLAJeDu+ZYYbJdrP77CXP7gmHcVRxO5zjVBBGNd9r6c8OalaRgysGDOuOYeNq1WhaoWXUrXG9iayXmmk2dc3nPMM+5QJS0dIrpmUbpmNUKkOz5tqWa1bLpll90rUHnHJpWqqUTV1bxhHlbu62pWcpdRnkhLsUxpi7ArlBp3/lSk0XFpj09skaZe4wbU+FSFwAUDnECEcRKiMWgxOwo3MScjcgEwpFluIPnyFv6R93F4tFeVEts3QCKqZpArMJpE7IyeRYbx8Vl3Ho0zFbn7uQMkoQjMg7VKD6WExZqHWiCUuJmMY/mLaAZSrTBl4iA1k2PdbBp4Mc3YGWdkCmHBp8Cq3C2ACPcYopwtr9wG/px4dVcH13mELKxyyN+d757yBhOscRS3Bo8CKyAt3hFr9JV/sEI9enKMo4meNr1SYJRJhrtykek+UV4bL5Qq7l5deWXP5I0WUY/U1ZTsA2VgkdfJMdj0wwF/+nZtv1Wlt5gFGG2yMx+8dZoJv3+iDwzkel++iCZPdV3gOjVg5hW3kNalPuj/N+s2566+PS0nz9E1ueNeKVwH7sXy8bT7XJkM8X/I6IXlpC8X1j2LkOg+mbSN69hNbxaHV9e3rpObwy5N7dy+WyNjsdXIKec/R4bV/WfDvpAwfcvo8a2RX707lI0ixwVqXuw503uxwh4M2ClT0rlZ7ic3hOo1U3Kj2+PU1Lo9uXmVNr/glKzSGcH91UGt5Ff7CYrHozRG8fqO+3PmPajmFXWFBCkL3MMBLFUbWH72lnsl5Q/E4vSkJCY5yruoniKC4wFXpb3VLU4maSgEjoymKuz2ddp25VmxWvfmpXHa/ZM23TOjM7Zq3ZdCp2t+CgNYo9iF1Gx0T5Uiy77p/fAaLY5ZiGODXmLENTzPVfLHpQQM2nA/k4GOV4yCSL03dRnZMZWTiv4xerKdg4mmWM1XXtmokbepN2xgKnu8zd2GHuAUYkIVjRu+pvLhucC5mKNzjPRGSV57BMcSYHQKo42K3YjRrgJE4irICCmIVZhMvJNMkTA/j6X5IS4rl00Bvm7+7HsPa/FRmQOiFRClzFcoplFfGXEWS6tSKQHwO2rO2AC/OdLCTqecl0ipSgNZLdT59dotpj0yIyoudu8GwVuDfqB1//ehP8Agrs52PjKJyTLbfFLJXjQZJHu6jmGyy/lbP5PMvrV1fEmErzQPKjBQKMMsluqyF7xRRsTICDhssG9Z7njXwXXyamNBBQ4Fh2m5YfD9gsAszVZuHLV7I8dG3ZcSnzJvBSfCfrRnIBUYh/3VGQi5SeFN/KvwVLw89yfWNry4+MU64TgtCJOqkxsvqhKRCTZonkPZZuG//OwHfOd4WbJG+wCNlNL5nAP3/RFKG1dIgQy6jwPT0XbJNsjlOsEux+Kn0xkxP5x2Re8h8n82P/KpB0F0N9o0v+W9kgebsgrKsFIMfS0pdy0ZTO6WSL1D8AfuX1nlOznUavcVrd4/XOJoE7kbS/iL9KtnK6/x7a/wI=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+JKEH7fX5GKj1shFwKBlFAFBDUKugK64svWMGlgNJnBzATC+fVnEgwCooc9T6np9OXry3w95xxFoeW2OIdYEEYV32uof0xsVSZTe6LZjmlptoltrYYcrCEUmHWnVi9PJkhVfM4T8CkXiIqGahlmWTMNzaiPDMetVNxyrWTVKs+q8ggxl66lSslQlTQKKXfzsA01ianLECfcpSgC7grsDlv9nis1XVRgUpvnG5R5wLg5F2Lh6jouBYAhDHEJs0g/1/d0zgPuDsmMIpHE8B4z4A313Xa1WpVW5RKLZ7plGIZu1HWpE3AyO1ObPwpjCHw6ZZtzB1FGCUYh+QdloPog5ixQWuGMxUTMoy9cm7ppZK41SLGGTZueqfpHgBzdiZ72QMYcaXyOzMLZAKYQA8WgPAz8hnp2Wgc3tqMYUT5lccQPzn8HCegSQraAQONFZgW60z0eKVfzHLDrUxwmnCzhNhuTBcLAlV8xTEnaI1wOX8CVvP1KyosJA/w3LTnXd3FK2PqRynhkBlz8n37t9mrj5RGFCTRnych6ZT/rT3b/GqqXz/31E621446/bDVyCLvKG1DbVr+fDwd1O1fvRitzuKYmqk/vf/9Ow8GN16n0Lvx2/za8qE6sYbv71qMv7OpxtOjcBMO6X+9PXj1H/32d9sYPV7OK9Xo/qNO1165e//xx+RpZ7ei657wOBm931UXl2YeUXkTz9P6hc23B47yD+qYxGT+Nx+PyjUivfrYvx883lI+v2+vkIlzdPr4YL2bSfRv9sNlzf7q+W/r3mPgsnHqwanzktJvDvrCgg2EyeQEsimM2Gr6nXMh+IfE9tWQSEmjTXNVdZPzEBVChNjOrjFbcRJIPCVzZzM25W7Pb5Ypd9sxWt1Z1ul3DNswLo2U49brTMbsF/2xQHEDsMDolWayMYTfz8z1AHLkcaACxtmQJngNXv/HoIYEUnw7kxWCUw4hJBndqFatseF7ZbtvlWrXitI1Wze5YZtszO5ZTVpVbJu7oXdyaCoj32Ns09th7AJgsCGQUn805l4POhSzJG1omIjRLS1SikMglEGc87Fp2raJzEi1CyADrEQuSEEqL+SIvkM43X0tDmOfSQXeU378v0zv8V1RC6gQkU+BZLm2Q3YQja8gqEvk64fJuwoX7VhKQ7JrJsoqY4A2S/V8f05KNyXZUZEZ/OsM/ZoF7q36y+WdL/RtQ+mE9toGCJdkJW+xTuSIkiTSLbr6h0lspWS6TvH9ORpCxdK+buuHoQ8CJZLn1iL0C1bcu9JMWzBb1QeStfB9fIuZ0KJCASE6bkh9PeF0MgWevC1/elvTUp8teSFk3Aak4JuuE8hGSIf72nYJdnOlJ8S/5WbE4+GjXEV87cWSe8kkhCJ1lp2ydrL8YCsykWyL5j8W7zo85OBZ8X7gt8haLkNM0SQR8/UfJiK2hIoxZQoXvqblgl2xznGK9APdD6ZObnNDfN3TKv9zQT/3eUNJehNStLvlvZY3k44JBWnGSY2moqXxsyuB0tkPu7wCP83vV+o7f9zNpfhJ/luzU9PA+NP8F</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AccountDelete_user20130918_1379459446852</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415661880</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20131009_1381305337201</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC671392D7B536D9E0401F0A0599624C</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E84B3543D1AF867EE0401F0A07997C1E</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5da56a8d-11f7-4984-99b2-aa2ad88ae0d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03016_AccountGet_FUNC_CS_User_Status_Not_Active_200_OK_P2" searchProperties="true" id="473a4039-a81e-4478-9ec9-0463223926db"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="datasource" name="User_Status" id="66502145-9405-43ad-af43-01890ae4cb86"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">forcedeleted&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">suspended&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">pending&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">other&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">blocked&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">blocked:tou&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">deleted&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Status</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="17a7c4f3-f377-44c4-a0ed-1d67803216d4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="239d6cb5-e886-4c24-86c4-f73410d49d8e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update User Status" id="8d23ddf6-55b8-456c-bfc6-f7f040581bae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def status = context.expand( '${User_Status#Status}' )

myTC.setPropertyValue("Status",status);
myTC.setPropertyValue("USER_OID",tC.getPropertyValue("USER_OID1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Retailer_CS" id="01b8689e-8b1f-4ff8-8dbb-18817346de1b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="d4c48c67-669c-4e03-917d-676f15d21653"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="6b7e0170-4f29-4f17-a7cd-1facdff64722"><con:settings/><con:config><dataSourceStep>User_Status</dataSourceStep><targetStep>Establish Test Case Properties</targetStep></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>FC671437C0208932E0401F0A05996246</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FC67143816C35EAFE0401F0A05996254:24140C9"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC671437C01F8932E0401F0A05996246</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC671437C01F8932E0401F0A05996246</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC671437C02B8932E0401F0A05996246</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC671437C02B8932E0401F0A05996246</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZrU/I6EP7ur+jUj07pFYQOMIOAnvqqKOD1ixPSFKJtUpu0IL/+JIUiIHB4zwwzTLab3WcveXbrDESh5bYYQwnHlChep6G+B0HZdoCDNLtsBpoT2L5Ws4OqZpu1am1UM6FfdlTFYyxFHmEcEN5QLcN0NKOiWdbQKLuO6dpWqVatvqnKE0qYMC1USoaqzKKQMDd321DThLgUMMxcAiLEXA7dQev2xhWaLigwqc36AmXuMGlOOI9dXYclH0EUhrAEaaTX9Q2dus/cAR4TwNMELX36rKEu706n09LULtFkrFuGYehGTRc6PsPjU7V5UlxGvkcCuji3AaEEQxDiOZCgbhGfUF9phWOaYD6J9pg2ddOQpjU0gxo0HXKq6j8OcnRHWtoAmTCgsQkwC2N9FKAEEYiUx77XUE+Pq+Di7jABhAU0idjW+e8gIZKhkMbI11gRWYHueIs70tWsI+h6BIYpwxm6k20SA4iYcp+gAM9uMBPN5zMlL78yY+KHiy5D8G/KUtfXsQro+o7sdPAYMf5/arZer4WVJxCmqBl0rL5Nr2bhMGq/dsLh4KFj9rMo7mHWyCGsKy9Arcq9PG8366q3lpfS7vDy9dXPzvvGm0efu9f9q4BM2IhR/eWsCh9vL/loCJx5q33en95FgdPtz9lddRI+jUEwe/n+89Gjtm6fQf16ePKSgmm3R+Fru33j3Wfdh8+57V9c8H/A2PM88+K5ctbzRvPE+TPF1xU/nrDwgXqT8ujs7QO3Xx66g6/np9H31dXdY3ryNqpMW+Yr/6rNrEnrXp+NvcZPTOsxbAoLShikow8EeXGU7eF1lEtRL8AP04uUYF8LclU3lhzFOCJcbcpbklrcVBAQ9l1RzMX5sl05Nx37vG1YF9WabXUNxzAvjZZRrtUqllMpOGiBYgtim5IAS1+SZRf9cxggjFyGiI8SLaMpnCCmHrDYARwoHumLx0EJQ0MqWLxsmtUPgxpOWrPn6dyIYYazT7uqKneU90gvaQUcJZvMXd1g7j6COMZI0rvsbyYanHGRii+QpTw0SxkoEZSKAZBIDnYtp1rWGY7iEEmgekT9NESleBLnidHZ4t/SAGS5tN8d5u9ub1jb34oMCB0fSwUmY7lAoopoxwiyikD2Bmya6wEX5lupj+XzEunkCYYLJJuffrpEtseqRURE7+3Bu1ngXqkfff33Tf0AKH07HytHfobX3BazVIwHQR7NoppfoPRVSrMszet3LokxEeZ1wY+mPkAwFez2PaSfiOgrE/pRw2WFesvzSr6JL+UTMuCAo0h0m5Ifj9gsBojJzcITr2R27Nqy4VLkjaMZ3yVrh2IBkYgP7ijQhVJPiO/F35Qm/k+5dtha8yPiFOsEx2QsT3KMfO9pCkiFWSx4jybrxncZ2OV8U7hK8goLF900Sjna/0WRhNZQAYQ0JdzrqLlgnWRznPw7Ru6P0i8zOZEvJ/OM7Z3ML7c3A0F3EVBXuvi/lTWctwtEqlwAciwNdSYWTeGcjNdIfQlwN6+bl4d4fTOS5i/xb8laTrffQ/Nf</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415691836</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC671437C02C8932E0401F0A05996246</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99c61175-ca6e-4fe9-95b0-5f3d02f2072d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c263e60-96bd-4c9c-9c64-ad6f469cfc89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce1f47c6-8e3d-4c44-9320-d57e0cc4e097</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91fbcd9f-2e93-4771-8e59-1e4d7858798e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab628a1f-cf19-4492-9adb-a8f001acc242</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c63f612e-da80-43e7-8d92-f3f37b6270e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d4c48c67-669c-4e03-917d-676f15d21653</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03008_AccountGet_FUNC_CS_Account_Status_as_Pending_200_OK_P2" searchProperties="true" id="863988ee-3a6d-41b9-80ca-7f13e7474c3c"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="243e3241-766f-46de-bb58-16a007bf0929"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="148efebb-89df-4065-ac38-51fb3eb2453e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="50d6f91e-5dab-45af-8976-2d5d0354f164"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","pending");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Retailer_CS" id="878768ab-4a21-47d2-a562-5fe757e98876"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="53c16674-06cd-47ce-9aa7-08df5d3461cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>FC6713980347C771E0401F0A05994595</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"FC67143817325EAFE0401F0A05996254:47D7F8D3"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC6713980346C771E0401F0A05994595</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC6713980346C771E0401F0A05994595</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC671438170D5EAFE0401F0A05996254</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC671438170D5EAFE0401F0A05996254</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chCblBVJC4tNt0e6HAXujLynWG4G1i09gB2l+/dmgoUNrDHgkJeTKe+ebib+aEoyythx3OIReEUS3qt/TfgR+7sV2PDSuwfMONXc9AEPuGY3susoK65/j3uhZxXkBEuUBUtPS6ZbuG1K7Xx5YXunboujWrGdzp2g/IuTQtVWqWrq2ylPKwdNvSi5yGDHHCQ4oy4KHA4ahzdRlKzRBVmPT2yRpl6TBvz4SYh6aJazFgSFNcwywzT8wdnZOYhyOSUCSKHF58xrylv9xdLpe1pVNjeWLWLcsyraYpdWJOks96+1N1GeKITtn63EOUUYJRSp6RAnUFYsZirZMmLCdilr1j2jZtS5k2YIUNbLv0s26+OijRHWlpB2TOkcFnyK6MDWEKOVAM2vdh1NI/H1fB9d1xjiifsjzje+d/gwR0ASmbQ2zwKrIK3fEWD6SrfQI4jChOC04WcK3aZI4wcG2Qw5SsLgmXzRdzrSy/tuLyR6ouA/wvZTkxt7FK6OaB7PRJAlz8n5pt12tt5QdKC2hfLn9OAv5rFeHFg7MaOI1p/6H3NPnS+Rm1SgjbymtQm3K/nPebddNbL5cGo7w3XPbcZTToPFtNuOtf3N49w90867L+YgLjnF/x8QR/6Z06yzi5jp6annOT+BPr24N30WB+EZx3Bz08I79mn75edq9WdFA8nw+yx5vlc+Pr5K5zP3xw+9af0V1SH3WD7vdrszvsukP/+4WXO/zm/lbEPhqOhh0/QpPbs/n4W/PP/Av7BFdJ78f5eIA7yyCFc+emz1uvMW3HsCusKGFU3P8BLKqjao+or53JeiHxMb0oCYmNaakazhVHcQFU6G11S1FLWEgCInEoi7k+n/X8wHadhh1Yfe+0c3ZquZZ9ZnUsr9n0655bcdAaxR7EHqNTonwpll33z8cAcRZyoDHkxoIVeAZc/8BiHwmkRXQoHwejHMZMsridNHJixzwh9oLZGBOR+xZaEZTq2jUTN/Qm70wF5Lvc3djh7iFgMiegCF51OJctzoVMxiNaFCK1awtUo1DIEZArFg7rbsMzOcnmKSioZsbiIoXafDYvU2Py9X/dQJiX0uHpuHx57wa2/63KgdSJiVLgKpYuyDrCgSHkVIG8G7Btbwdcme8UMVEPTCZU5ASvkex+eu0T1SCbJpER/e6NftsV7o360dff3jQ/AGXu52PjKF6QLbfVNJUDQtJHu6rmI6o91orFoijrFyhqzKV5UzKkbY4AF5LfnsbsAai5MWEeNV42qPc8b+S7+AoxoyOBBGSy27TyeMRuMQKudotIvpPVsYvLjkuZNwErcUjWS+UKohB/uKXgECs9KR7IvyXL49dyHbC15UfGKRcKQWiiTmqQPL3TFJhJs0QyH8u3jR8ycMj5rnCT5A0WIbvpvhDw/hdNUVpLRxizgoqor5eCbZotcYqnOYSvSm/MlFT+MptX/N3Z/OvqciQJL0P6Rpf8t7JBynbBoKsVoMTS0ldy1ZTOabJF6y8A3zC702xYjuv3gsDeZnbXa3qbBO5E0n4jfivZyun+e2j/BQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415703133</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC671438170E5EAFE0401F0A05996254</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03007_AccountGet_FUNC_CS_Account_Status_as_Other_403_Forbidden_P2" searchProperties="true" id="6059bd2a-9ce8-476d-9418-1543216db740"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="5dd1fd01-d6ba-42e1-b747-02b6b20a58ea"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="29c31274-aada-4565-b5eb-058515280cfe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="ca3f2236-53d4-4cad-b94c-3a85b5bde1b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","other");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Retailer_CS" id="82d4b09f-07a2-4912-baa3-9a0df0a8b0d6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="d4130567-4a25-48a7-9358-00eff229b294"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SPL_CS_ALLOWED_ACCT");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>FC6713E6041F17EBE0401F0A05996256</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC6713E6041E17EBE0401F0A05996256</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC6713E6041E17EBE0401F0A05996256</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6713E6042A17EBE0401F0A05996256</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6713E6042A17EBE0401F0A05996256</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH6uQOIRLooJEgXbThd6g3Z6+rIwzEHeDA7GT0P76Y4eGAqU97JGQkCfjmW8u/mZOOZ5HttfhHBJBY6b5vZb+e9pwA5dUXcOqg2M4ruUarj21DGSD3bQdPK01kK75nKfgMy4wEy3dtpAj9Q3bHls1z0Ge06w4jeaTrj1AwqVpqVKxdG01jxj3CrctPU2YF2NOucfwHLgniDfqDAee1PRwiUlvn65RFg6TdijEwjNNUgmAQBSRConn5qm5o3MacG9EZwyLNIE3nwFv6W938zyv5NVKnMxM27Is03JNqRNwOvuut7+VlyHw2TRen7uYxYwSHNFXrEANQYRxoHWiWZxQEc4/MY1MZCnTBqyIQZDDvuvmu4MC3ZGWdkAmHBs8xKg0dgdTSIAR0O7v/Jb+/bgKru+OE8z4NE7mfO/8d5CAZRDFCwgMXkZWojve4oF0tU+BeD4jUcppBleqTRaYANduEpjS1YBy2XwB14ryaysuf7TsMiB/U5ZTcxurhG4eyE6PzoCL/1Oz7XqtrTzgKIV2J4R08Pxr/FTLo2qYXI+HMsRw8JyFeauAsK28BrUp99t5v1k3vfV26b75j39ynufuYJANxyh0/ItJ9uvhdvqjFzWjHwl+fRqS3p0Tvt7m8/Ckf3FhB5fo9snMB71fV8xMF7dmY3jJh9nk8VvA3D+8X7tgD9XwMjp3F8vLsJYCHZKH7nBys8xXyFnejNyf9GR5G9/75906Yi+PXQG3k1c0mL1eds+W1xMzuumffYtFgMK4/ly9Nh9en+HZ+nnfeo9pO4ZdYUkJo3TyDESUR9Uefk87l/XC4mt6URIaGNNC1VsojuICmNDb6paiFi+VBEQDTxZzfZaRNFC1X7ccu4Ma/bO+5Vjo3OpYNdet27V6yUFrFHsQuzGbUuVLsey6f74GSOYeBxZAYmRxSkLg+hcWe1hgzWd38nHEjMM4liyOFiyHBkR5vfbnBbmUJVltWUtRdaJrV7G4ZtdJZyog2eXu5g533wGhCwqK4FWHc9niXMhkLHGWighVMlxhkMoRkCgW9mynWTM5nS8iUFDNeRykEVQW4aJIjcnX/7aBCS+kd/1x8fI+DWz/W5kDqRNQpcBVLGcg6wgHhlC1DOTTgBHaDrg030kDqh6YTKhIKFkj2f303ieqQTZNIiP63R39RiXujfrR1z/eNL8AZe7nY+MoyOiW23KaygEh6aNdVnOJK8tKmmVpUb+GosZEmjclQyJzBCSV/PYyjv8AMzcmzKPGywb1nueNfBdfKkI2EljAXHabVhyP2C1GwNVu4ct3sjp2cdlxKfMmYCUOybqRXEEU4i+3FOIRpSfFN/Ivj5PgvVwHbG35kXHKhUJQNlMnNUhePmkKEkuzVDJfnGwbP2TgkPNd4SbJGyxCdtMkFfD5F01RWkvHhMQpE35PLwTbNFvgFC8L8N6VPpgpqPxtNq/4p7P5cTgYScKbY32jS/9b2aBFuxDQ1QpQYGnpK7lqSudstkXrbwAPMzvqf8Xsu5G0P4g/SrZyuv8e2v8C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415707666</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6713E6042B17EBE0401F0A05996256</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03004_AccountGet_FUNC_CS_Account_Status_as_Deleted_200_OK_P2" searchProperties="true" id="90457764-4561-4f49-b577-df90106296cf"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="4662cfa3-e4a6-4a83-b6a4-061a38fe7aa9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="71c57886-88a5-4791-a016-2c7a8c25cb19"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="ce56a230-25bd-4b73-988d-deccd5e6cf69"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","deleted");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Retailer_CS" id="2d237646-248b-4ece-bca9-dcde0195c1e8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="a7a6acc8-c43c-4e3e-bccf-33cd413d918b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>FC67143817A25EAFE0401F0A05996254</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"FC67139803F7C771E0401F0A05994595:4A020510"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC67143817A15EAFE0401F0A05996254</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC67143817A15EAFE0401F0A05996254</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC67143817AD5EAFE0401F0A05996254</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC67143817AD5EAFE0401F0A05996254</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chlyYFooJEoRfa0q6A9rT7snLtCbib2GnsBMqvP3ZoKFDoYY+EhDwZz3xz8TdzIlASe2FHCMgk5czo91rmb2iSRr3hE6sePDuWD8/YakSBY6Hjpu9GHo4CfGwafSFy6DMhEZMt03Nc33KOLc8bO0Hou2FQr/m+98s0HiATyrRSqTmmMU9iJsLSbcvMMxZyJKgIGUpAhBKHo87gJlSaIaowme2TJcrSYdaeSpmGto1rBDDEMa5hntgn9obOCRHhiE4YknkG7z6JaJnvd2ezWW12VOPZxPYcx7Gdpq10iKCT72b7W3UZSJ9FfHnuIsYZxSimC6RBDUBOOTE68YRnVE6TPaZd23W0aQvm2MKuz76b9oeDEt2BljZAZgJZYorcytgQIsiAYTDuh/2W+f2wCi7vjjPERMSzRGyd/w4SsAJingKxRBVZhe5wizvS1T4BHPYZjnNBC7jVbZIiDML4mUFE5zdUqOYjwijLb8yF+tGqywD/TVlO7HWsCrq9Izs9OgEh/0/N1uu1tPKA4hzaSb447710Fw/j2dkrTybPL0d3D84F7aedVglhXXkJalXu9/N2s6566/3SOHfuFySIiB938t51ZL/UCXcHfx6744uYvY0eX+PLoHHbuLr/87goaH2WkUV6HY1OXy5Y3Dz6cesl/B+G57OL+O6bnf66mTQpKfhseH3ZO7/CnHBn0hmdpoOZMxuOnxo/nGLwevaEf6T1YuBe9+9O354ScpXMm55/NBwORfTk+ZeFI75Bcksf7/PeffP5ctQ5GgSL+9ZHTOsxbAorShjlzy+AZXXU7dHvGeeqXkh+TS9aQokVlaphqjlKSGDSbOtbmlrCXBEQJaEq5vJ83j2uu/5Rw613esFZ5/zM8R333Ok4QbN57AV+xUFLFFsQu5xFVPvSLLvsn68B4iQUwAhkVsFzPAVhfmGxhyQy+myoHgdnAsZcsbib4ZnvOFB43rxwjxupQws/YLKhWPiWyzt2l3UiCdkmdzc2uHsImKYUNMHrDheqxYVUyXhFRS5jt1agGoNcjYBMs3Do+Y3AFjRJY9BQ7YSTPIZaOk3L1Nhi+e9ZCItSOjwbly9vb2Db36ocKB1CtYLQsZyCqiPsGEJ+FcjegF13PeDKfCcnVD8wlVCZUbxEsvnpo090g6yaREX0uzv67Va4V+oHX/980/4ClL2dj5UjUtA1t9U0VQNC0Ue7quYrqr3W8qLIy/rVNTVmyrytGNK1R4BzxW9vY/4HmL0yYR80Xlaotzyv5Jv4cjllI4kkJKrbjPJ4wG4xAqF3i756J/NDF5cNlypvEuZyl6wbqxVEI/5yS8Eh1npK/FP9zXhGPsq1w9aaHxWnWigkZRN90oPkbU9TYK7MUsV8PFs3vsvALuebwlWSV1ik6qbnXML+L4amtJaJMOY5k/2eWQrWabbEKd9SCD+UPpkpqfx9Ns/F3tn8OLgZKcJLkLnSpf+tbNGyXTCYegUosbTMuVo1lXM2WaP1d4B7mN39itk3I2l/En+WrOV0+z20/wU=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVfXkuq6En3nKyj2I8U4EkzNTJUcAAMmmfxyyshyACec4euPDAMbZs/sO+c+gVqt7tXBraXXSHMdug2iCIWx7XtlWXyr/EM2aKizFFPjds16jUVQq7VYg6ohrlFvci1GJxFbKctRlCDZi2LNi98qNIn1Sa5GNecU265TbbL+wjTq20p5icIIm8YqL2SlnLuOF7Uvbt8qSei1fS2yo7anuShqx7CtAmXYxppt7Yap8v56RXlxGL5bcRy0CQK+6Agix4Ev0HeJV+JJ51WP2qptelqchOjDpx69VT7OZln2kjEvfmgSNEmSBMkRWEePbPNX5b10O4x02TP861rQPN+zoebYZ60ApaDY8vUycEw/tGPL/cY0RVBkYbqGcliDFOv9qhC/HVzQ/dDSE8gw0mqRpVE3YzNkoBB5EJUXM/mt8utnFbyenYeaFxl+6Eaf1v8NEvJS5PgB0mvRLbIbup9b/CJd768ItmUPOklkp2hUtEmgQRSVJyEy7HxoR7j59Kh8KX85j24dhuB/Kckr8YgTwya+yIxomyiK/596PdbqamWpOQl6t1o5HPSthDa6q5lY7x/5xenITBciD94uEB6Vr6Dupf5Yf27Ue199HBL9lDzxOW+ezbE9GgHmJLnmJB2hqX6Y1VOKRzonpKtO0NnO2ON5HBPQW4TqMXUpLrGo40A7o6aZLSiaVUtwMvaXwt53/Qmot4bjMNcFnqRGLY2RW0sbTlhgu9XZpo9kWo9nyi7s0rwn9A122jMEjRKWFHkKd/Oqu9mWCD9pVM0GMfa31WadDSzPfPsd02MMRVwDdLoEWfxf10lO1GLtvhCKSWHgzzNG74osC1VREAASTJDJPDBlfngGI948HK2D3eUykgfTRQeI4KTMQCaaG3E5nQ6kTF8une1S7nR4ZcZmPbARS3hDlPKluF33SW21DTZ0h9yqPK+vZ/6O6Qd675D1LDhS5ko2mssnZS/lo7lEri4yM8frs7JXqPF8wZRWe55TZlImZhePopRZo+1qFmwWXAbP0lQBbBdQC0mwlN7cXVKQmVlwLw0VcLjIeUsRlksll+ZgUuLN0RLHNhc62wC6erBzHevBeA8bn+vd5WnXdZLtWdorgtQV1GNXlXeMOJX6YLZZ7FbLg7bqpCXYG4HdzaNdt7W1n5nbViZON/2Bv5WtFI7AVOL5KcDpIoEid/vA7/JAwQXPz8Keb/iC3smIPh2VqpzTbaxP9nEdaV3S0ahWi9oMV43JsSFKXnU7SHZ7S7HWnXF1oOrpgou58yZKq2lDsymYB8Z0LfXiQW70pmppNxHzNexVdbNPOGeuEyrNPgjPJ8tRzFm8aoyj0842jBW/HrNO03AUZhYYjhGcourcnx5CssEjhiY2p3QQl4Cp8AB094s9P1X4VpFUXc6mG4XXQEeKE3De0/GAXh77vdSBGwb4+WA13h8+CqOLmcQT2VTCbSWVWiLQiyL01IXU2YMFb5ohb0odfgpFMN3Ig2yD87XoYeXPeexc8mhKPJCYLWhwvRKzILl4HKssC04ev/A6nKUc85XecMnmEUlDdRSwmRKNDG+78g+Ka4eLMFEXg8FomO/mSfewx7PKINVBymxLUnoIgD0azK2D6IvaJNhs4qDqwRDGcuAqcn4eb6N9y965ZL9ap/gJKcImvXB32aKrSdtBaKrUoDfzJkyTK0WJceq51X0rW1XnaiNo6oJniKcTsQ2XpA/8DjerH/Wcpg/WIhs2MqMPDjuNHuUOx584abCdw2w2HaxUt1ov1dPh0CXPc4IdBeNM7WasNJ1WGZ2f9+ZRENqbpGXm4djT6Y0WN9ItuWzYgXPg6OQwZwNmabq4WJNUD5rKpDRl13Drms0A9okZkQKpaQzl7ml31s6BO4bXAfp5OtyF1/lBPE6Wp9FzIx0q7lYE49uyuIBksdzBt4IW/53AFBJbrxkX1XZQsKAoRl5ceS9OFeSlnWCKY+ttfGVc11KDazQ69UaLFZpA6rASyZJUhwRkneNIttW4sZwrik8QBd8z7MJXweOut9TfAUK3HSFPR2Et9RNooajyF4tFvsqyN8PXr+9FaO5jntjqNCSOYzmaYZtNhmuRDC1QVAu3DckKlMRVyiM/HnvjEBgxCp85YvOJI84QtAMbFUSyuE0jfJ1GMU7JUUuT2KFeUu3FQwmmmmHB9to026oTke0GDioAE66vJw56CazgkiAiuv7SNQ1GF+lMmv8jq8Llpv82xM97t2xgHd0uFKIiHh7hiqI/CC/Zrt+C+TZomnwM+mYeJLpdXOg4tXFowyuS563fHVO0yr1dcFQ3yHfNz4Inq8TngO6O9NSG956/Pwcwm8R84/1WkqP2cnxJ0jS5FKFZcKkQmycogmwSKoIJJkSnuX9AHnE3QfyIi95Rf/J8lz/jS2LLU2P8Pbu4ZcqX5Q8eIiqKioeIjFs+/+kr58klzluM8vgrmeDg90qB+K9PGtiGhR4WT/BP5of673J9YevBD46zGGC2ZxargnmevmkK6GOzNh5ifvho/CsDXzl/Ft6TfMcS427aJTH6fqdcTKe3igahn3ixLFYugseJecEZnwLU/q30h5kL9/sg83n0LZlfK0MVzy5Xq9x17f+tXLMv7QIRPhXZFyxvlRy/S7Fzz3yY0B8AvxjSPMe3yBZNc89DmmPuCXyK5P0P8Z+Sh5x+/h7e/wU=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415716794</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC67143817AE5EAFE0401F0A05996254</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03018_AccountGet_FUNC_CS_NoManageAccountConsentPolicy200_OK__P2" searchProperties="true" id="b7193d47-9ea3-4d8f-979c-efd8b412f07d"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="78fd1a55-1f51-4641-b538-735dd5da82f5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="9ed2c67b-c949-4c8c-9424-e546f9eeee94"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update MAC Policy" id="6f0683cc-f0aa-4bf3-bd4b-a2dc893e2b08"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_Policy_Status")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","deleted");
myTC.setPropertyValue("Policy","105");
myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Retailer_CS" id="8178ab0f-04bb-4aa1-bdf7-8aebd40a8ef8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="9697cd5b-8051-4d72-a1ec-5eb35e0e4911"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>FC67142C4B231339E0401F0A05996248</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FC671392D84336D9E0401F0A0599624C:F6C9A4EC"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC67142C4B221339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC67142C4B221339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC67142C4B2E1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC67142C4B2E1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuq6En3nKyj2I0U8MJpKUiVjGwyYyWZ8OWVkeQBPWJ7g649MAptkJ/vm3CdQq9W9enBr6Rnrnst2AcYoip3AL8vCS+UfRLfqOmzAGtsxG7VGxzBqHU5v1zgE60yDZli9qVfKMsYJkn0c6378UmFppl6juRrT1phGt0l3G+2nVpPZVcorFGFimqg80ZVy7rk+7l7dvlSSyO8GOnZw19c9hLsx7KpAGXeJZle/Yaq8Pr+hvDqMXu04DrsUBZ8MBJHrwicYeNQz9UHn2cBd1bF8PU4i9O7TwC+V97NZlj1l9acgsiiWpmmK5iiiY2DH+lV5Ld0OI0P2zeBt3dP9wHeg7joXvQCloNgOjDJwrSByYtv7xjRDMXRhuoZyWINMw/9VoX47uKL7oaUPICOs17CtMzdjC2SiCPkQlZcL+aXy62cVfDurRbqPzSDy8Kf1f4OE/BS5QYiMGr5FdkP3c4tfpOv1GcGu7EM3wU6KJkWbhDpEuDyLkOnkYweT5jNw+Vr+co5vHYbgfynJM/WIk8CmvsiM4FgIx/9PvR5r9WZlpbsJerUYWvA3KqWIUtVbz9YiC4bT6fnE042XK4RH5TdQ91K/rz836r2v3g9dxpe0NT4N2alKj4YdwEKt2hK3dKjZuu1JSgiC4coMLpch6RLB8Zo5OJ2nHdnYyGPbE4f6aZDK6wm0mwEu0Sa9hb3UwlZ7JYcjESnHYMq218ESdc5ImvbxIZc6/enpGNStU7CTD8P6xFZH64wKpsfmqKOyk3PWaHHDVCpt1GGfb8GwHch1VZrpUm/58jumxxiKuEbofA2y+L9p0pygx/p90SsmhUk+zxi9KrLcqwq9HkA9C2QyDyyZH1/AhLeOJ/vo9LmM5sF8KQEBnJUFyARrK6zm85GYGauVu1vJksQri0Y2AFuhRDYEMV8Ju82Q1te7cMtK9E7leWOzCPb1YWgMjtnAhhNFU7KJJp+Vg5hPNJFeX2VWTtYX5aAwU21ZL60PPKcsxEzIrh4FMbMnu/Ui3C65DF7EuQIafcAsxZ6tDDRvxcD6woYHcayA41XO20pvtVJyUQOzEm9NViQ2rSftQugZ4d5z7QfjA2JcM/qr877vJruLeFB6Yr+nnvqqvK8Lc3EIFtvlfr066mspLcHBBOxvHp2mo2+CzNp1MmG+HY5IGe0UTsBc5Pk5IOmigSL3hyDo80BpACe/9A58K+gZUkYNWVyqcm6/tTk7pw3W+7SrM50Osx2vW7NTSxD96m6U7A+2Ym+kaXWkGumSi7nLFqfVtKU7DMxDc74RB/EoNwdztbSfCfkGDqqGNaTcCydFSnsIosvZdhVrEa9bU3zeO6a55jfThts2XaW+CE3XDM+4qgXzY0S3eFRnqe05HcUlYCk8AP3D8sDPFb5TJNWQs/lW4XUgiXECLgc2HrGr03CQunBbB0E+Wk8Px/fCGEIm8lQ2F0lbiaWOAIyiCAN1KUoHsOQtK+ItUeLnUADzrTzKtiRfywFR/pxH6ZpHS+SBWN+BFjco1Zc0F09jtdEAZ59f+hJnK6d8bbQ8un1C4lidhI1MwRPT362Do+I50TJK1OVoNBnney3pHw9kVpm0Okrru5KYHkPgTEaafRQCQZ+F220cVn0YwVgOPUXOL9MdPnScvUcPq02Gn9ECbLNLb58t+7q4G0WWyowGC39Wb3MlnJjngVc9dLJ1VVNbYdvo+aZwPlO7aEUHIJC4RfNk5Cx7tJfZuJWZQ3Dc6+wkdzn+zImjnQazxXy0Vr1qs9RMx2OPvmhUYxJOM7WfNcT5vFo3eG2g4TBytknHyqOpb7BbPW6lO3rVckL3yLHJUWuE9ZXlkWLNUiNsK7PSvLGBO89qh3BILagUiG1zLPfP+4t+Cb0pfBugn6fDXfg2P6jHyfJh9NxIh0q6FcH4tiwuIFkoS+RW0OO/E5hC4hg186raDQsWhGPkx5XX4lRBXroJoTiO0SVXxttabHGtltTkOV4CHZblRJrc1RIN6CbH0Q2ufmM5byg+QewFvukUvgoe93ZL/R0g9LoY+QaKammQQBvhyl8sFvkqy/6CXL+Bj5EWEJ4oNTsczdebTI+hm7TYbgkdQRDYZrsnSR2p06yUJ0E89acRMGMUfeSI7Q8ccYGgEzqoIJLFbYrJdYpjkpKTniaxyzyl+pOPEkI1o4LtddlGp0lhxwtdVACmvMBIXPQU2uE1QRR++2VrOsRX6ULU/pHV3vWm/zbEz3u3bBAdwykUcBEPj0hF0ReEt34L5tugWfox6Jt5kBhOcaGT1MaRA9+QfNz63TFFq9zbpYiqp/7D3HDf1X98/M+T1F9AUZ/zcXdkpM6D2xtzJ2SU0JXXW0VP+tPpKUnT5FrDdkHFImKeYii6TakIJoRPnbXgiHzqboL6EZW9o/7k+S7/iC+JbV+NyTjwSMeVr8sfvGNUhIt3jEy+mPynj6QPLkneYpTHX8l6LnnuFIj/+iKCXVjoEfGM/GRBZPwu1xe2HvyQOIv55/hWsSqI6/mbpoABMeuQGRhEj8a/MvCV84/Ce5LvWGLSTfskRt/vlIvh9lLRIQwSP5aFylXwOHCvOONziLq/lf4wc6WO72+BHH/7FtgoY5WMPk+v3HWd/61cc67tAhE5hZ0rlpdKTp61xLlvPQz4d4Bfz/gO/bcZ/zGS1z/Ef0oecvr5e3j9Fw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH7vr4jSx1VwEq6JChIt0OUUaE+hl+1LZRxDTBMbbCfQ/vq1Q0OBFpazEhLyZDzzzcXfzIWAceT6TSEwl4RRo9uqm68uwp5XrGLLtZFtlaDjWLBUG1vFGi4GQaUyKXsT0+gKkeAuFRJSWTdd2ylZdsVy3ZFd9kuub1cLnuO9mMYj5kKZVioF2zRWcUSFn7mtmwmnPoOCCJ/CGAtfIn/Y7Pd8penDHJPZuFijzBzyRijl3AcAFQKMcBShAmIxuAA7OheB8IdkSqFMOP70GYi6+Xl3uVwWlsUC41Pg2rYNbA8onUCQ6bnZOMsv46BLJ2x9voKUUYJgRD6gBtXHMmSB0YymjBMZxgdMO8CxtWkLr5CFnBI9N8GXgwzdiZZ2QHIBLRFCJzd2jyeYY4qw8XDfrZvnp1VwfXfEIRUTxmOxd/4zSJimOGJzHFgijyxHd7rFH9LVuMDI71IUJYKkeKDbZA4RFsYdxxOy6hGhmi8QRlZ+YyXUj+RdhtGflOUCbGNV0MEP2WmRKRby/9Rsu15rK48wSnCjvRinU9FpPvSmyU14PRwveiU4frj2ms16BmFbeQ1qU+7P836zbnrr89LTzcsgBH0UxV3QDu7onVt94bWnj2Laev41ZekNGTLeaYcV/theSTTolb2+c/0Y/yr3+r97w3dUnb+I9JL883dxcRbK62LLHaXgadbvcIGXd0s5u3zwxMfDE+t/vPEn2ancP/6GMayF6LkzmEfDQfGv3lMbvLWqwaA1Krdn/XGFOs/Omd26qbq14vi2QsBidFn2QLf+FdN2DLvCnBKGyXiGkcyPuj26LaOj6gXlcXrREhJYk0zVn2uOEhJTaTb0LU0tfqIIiAS+Kub63LmqVJ2Se1W6dNtOsei17ZLtdOymXfa8iluq5Ry0RrEH8YrRCdG+NMuu++c4QBT7AtMAcytlCQqxMI9YbEEJjS69V4+DUYFHTLF4aRYFSYm7b+M0+nCrs4WzmLBZmJjGgMlbesubE4n5LnPXdpj7HiMyJ1jTu+5voRpcSJWKBUwTGTmFFBYoTtQA4JqDfZWCMhAknkdYAwUxC5IIF+bhPEsMEOt/14JIZNL79ih7dwfD2v+WZ0DpBEQrCB3LJVZVxN9GkOOX80AOBuw42wHn5ptJQPTzUumUnKA1kt1PX12i22PTIiqi16vhq5Pj3qiffP37TXAEFNjPx8ZRkJItt/ksVeNBkUcjr+YCFhaFJE2TrH5VTYxcmQeKHx0wxChR7PY+Ym+Ygo0JcNJw2aDe87yR7+JLZEiHEkocq24zsuMJm8UQC71ZdNUrWZ26tuy4VHmTeCV/kl1FagHRiI/uKMhHWk+J79TfkvHgq1w/2Nryo+JU64QkdKpPeoy8H2gKxJRZoniP8W3jPxn4yfmucJPkDRapummcSHz4i6EJrW5ChFhCZbdlZoJtks1wyvc59r+UvpnJiPxzMq/Ewcn83O8NFd3F0Nzokv9WtkjWLgibegHIsNTNlVo0lXM63SL1T4AHeN09xuu7kTS+ib9LtnK6/x4a/wI=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415726853</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC67142C4B2F1339E0401F0A05996248</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b948c6c1-8581-4ed1-b753-d988b4da9c10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="Account_Get_Portal_P1" id="9914986c-5e2f-4e6d-a9a8-097a74ddeaeb"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_05002_AccountGet_FUNC_Portal_User_Status_as_Deleted_403_Forbidden_P1_UV-340" searchProperties="true" id="c32ebd66-604d-4574-954a-472a8a9812fd"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="2ab3d289-9e43-4ee2-a3bf-e45ef0802387"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="8ba47b2e-4565-4a4b-9348-b191cf365ccd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def audience = context.expand( '${#TestSuite#audience}' )
tP.setPropertyValue("audience",audience);

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update User Status" id="0084f333-b51a-40f4-9fce-086468c60db9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","deleted");
myTC.setPropertyValue("USER_OID",tC.getPropertyValue("USER_OID1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="0d5c7c9e-66a5-4ec1-b1aa-cc4fe210fbea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeAccountGet","USER_INACTIVE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FDFAE81B3E450AE05307991F0AFA42</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FDFAE81B3D450AE05307991F0AFA42</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FDFAE81B3D450AE05307991F0AFA42</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35BF54C46B96E05305991F0A65D7</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35BF54C46B96E05305991F0A65D7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxGlj6uQBBIuUUGiXGbD9MI2tNPOy8pxTsCdxIHYgZRfP3ZoUqC0266EhHxy/J3vXPzZ5wzFUd3pMwYpJwlV3GFX/de2OnVoN0FrtZuWZmHU0vzQx1poNny7VQ+NhtlRFZexDFzKOKK8q9YN09KMtmZ2ZqbtWA3Htmr1pvlLVe4hZQJauNQMVcnjiDKnCNtVs5Q6CWKEORTFwByOHa9/dekITweVnNTe+Y5lETDtLThfOrqOawFgiCJcw0msn+sHPucBczwyp4hnKbzEDFhXfdm72Wxqm0YtSed63TAM3ejowidgZH6m9r6VmyFwaZjs1gNEE0owisgWSVJXwBdJoPSjeZISvojfgTZ105DQGuRYw6ZFz1T9NUDB7pNIByRThjS2QGYJdgshpEAxKHe3blc9+1wHd3tnKaIsTNKYHa2/RgnoGqJkCYHGysxKdp9HPFGu3jlgx6U4yhhZw7UckyXCwJRpCiHJLwkTwxcwpWi/kjPxI+WUAf5KW871fa6Cun6iOkMyB8b/T8/2+7VDuUdRBr0HHGSTx3Y+s26nF4PG3XAdbW5dL7LiebegsO+8I1W1+2V9PKzVbL1s2o5tf3qP7Enz7i7T71c/B1HHu1rHq/zGezQH/zxdBqG7vX5omf1tYzbZmNcjezVMA/ju5ebzMn70gqfsb59P9cnVNxT8ZJGNyI3bNkbu0Nr+2oynlzeLxiPaRD+e3eeHwWTkse94tgj12e+1tZ0ledTI2n4+C9sX/mZiofZk9tcC3T984zxBab0ZjJ78H5w2xs3rx+5rTvs5HBpLSfAy/wkwL5dyPNyhMhb9QvxjeZEWEmhh4eospUYxDpSrPblLSouTCQEigSOauVsbxnjUsC/GtjWwmhed5siwG4bd6Zhjo9+0h61Sg3YsjigOEhoSGUuq7G5+PiaIY4cBDSDV1kmGF8DUDxCHiCPFpbficCSUwSwRKm76PDBif4P9NK6bxgqakDdX4cKKVOU64Tf0Ju2HHNJD7W4faPctYLIkIAVeTjgTI864KMYKrTMembU1qlHIxBWQShV26lbb1hmJlxFIqnqcBFkEteViWZRGZ7v/uoYwK6yE4WWSchSZxQF8N7/jb2UphE9ApAOTKV2AaCecuIusMp93866b+3mX8P0sIPKcibrylOAdk8NPr+Mi56SalSoxzMySe7XlixAnAPQP+OnHpaniBWuyF728X8WVIQSlV/Z3hWqrWrZeZ0VHW1IsUwGvC800dQ9wJhTveZb8BqpXEPqnLpyK9VHkyn7IL+ML6nHEIRbzpxTLT7w2PGDyteGKk5N/9ilzEFLUjUPOT9kGkXiUSMYfvluwg6WfME/F3yZJg9d2ncDaiyPyFE8MTuhcruTV8vzObOBEwBKhhUm6D34K4FTwQ2NV5IoLF9PkZxze/6JIkeuqCOMko9wdqoVhX3gLnvx5Cc6r0xuYQtxfbuucvXtbP1xdekICY6RWvuS/nTVSjAsGVT4KCi5dNRePTxGczveE/oXgkdYPx/1R27xoDC3b6Bda39pp/bhv1asCHmTSe2N+a9mr6fF56P0B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463033388</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35BF54C56B96E05305991F0A65D7</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99c61175-ca6e-4fe9-95b0-5f3d02f2072d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c263e60-96bd-4c9c-9c64-ad6f469cfc89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce1f47c6-8e3d-4c44-9320-d57e0cc4e097</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91fbcd9f-2e93-4771-8e59-1e4d7858798e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab628a1f-cf19-4492-9adb-a8f001acc242</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c63f612e-da80-43e7-8d92-f3f37b6270e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d4c48c67-669c-4e03-917d-676f15d21653</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_05009_AccountGet_FUNC_Portal_Account_Status_as_Pending_403_Forbidden_P1" searchProperties="true" id="be1e5471-184d-42c0-9be3-df6fc54af938"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="7d6dd9e5-f103-44e0-8d51-fdabc17d5923"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="3fb3deb3-789e-4493-8c1b-4f3315f438a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="feb87946-4e48-44a4-8901-00d9f2a3c0cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","pending");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Retailer_CS" disabled="true" id="c05d62a0-30ce-4fb2-becb-38e4043a21eb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="9303c80c-66f2-493b-8ad0-a0a9690d7aa9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeAccountGet","ACCT_INACTIVE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CC6B4E6B80E05305991F0A0CC0</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CC6B4D6B80E05305991F0A0CC0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CC6B4D6B80E05305991F0A0CC0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35CC816E37A2E05307991F0A444C</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35CC816E37A2E05307991F0A444C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuq6En3nKyj2I0U8MJpKUiVjGwyYyWZ8OWVkeQBPWJ7g649MAptkJ/vm3CdQq9W9enBr6Rnrnst2AcYoip3AL8vCS+UfRLfqOmzAGtsxG7VGxzBqHU5v1zgE60yDZli9qVfKMsYJkn0c6378UmFppl6juRrT1phGt0l3G+2nVpPZVcorFGFimqg80ZVy7rk+7l7dvlSSyO8GOnZw19c9hLsx7KpAGXeJZle/Yaq8Pr+hvDqMXu04DrsUBZ8MBJHrwicYeNQz9UHn2cBd1bF8PU4i9O7TwC+V97NZlj1l9acgsiiWpmmK5iiiY2DH+lV5Ld0OI0P2zeBt3dP9wHeg7joXvQCloNgOjDJwrSByYtv7xjRDMXRhuoZyWINMw/9VoX47uKL7oaUPICOs17CtMzdjC2SiCPkQlZcL+aXy62cVfDurRbqPzSDy8Kf1f4OE/BS5QYiMGr5FdkP3c4tfpOv1GcGu7EM3wU6KJkWbhDpEuDyLkOnkYweT5jNw+Vr+co5vHYbgfynJM/WIk8CmvsiM4FgIx/9PvR5r9WZlpbsJerUYWvA3KqWIUtVbz9YiC4bT6fnE042XK4RH5TdQ91K/rz836r2v3g9dxpe0NT4N2alKj4YdwEKt2hK3dKjZuu1JSgiC4coMLpch6RLB8Zo5OJ2nHdnYyGPbE4f6aZDK6wm0mwEu0Sa9hb3UwlZ7JYcjESnHYMq218ESdc5ImvbxIZc6/enpGNStU7CTD8P6xFZH64wKpsfmqKOyk3PWaHHDVCpt1GGfb8GwHch1VZrpUm/58jumxxiKuEbofA2y+L9p0pygx/p90SsmhUk+zxi9KrLcqwq9HkA9C2QyDyyZH1/AhLeOJ/vo9LmM5sF8KQEBnJUFyARrK6zm85GYGauVu1vJksQri0Y2AFuhRDYEMV8Ju82Q1te7cMtK9E7leWOzCPb1YWgMjtnAhhNFU7KJJp+Vg5hPNJFeX2VWTtYX5aAwU21ZL60PPKcsxEzIrh4FMbMnu/Ui3C65DF7EuQIafcAsxZ6tDDRvxcD6woYHcayA41XO20pvtVJyUQOzEm9NViQ2rSftQugZ4d5z7QfjA2JcM/qr877vJruLeFB6Yr+nnvqqvK8Lc3EIFtvlfr066mspLcHBBOxvHp2mo2+CzNp1MmG+HY5IGe0UTsBc5Pk5IOmigSL3hyDo80BpACe/9A58K+gZUkYNWVyqcm6/tTk7pw3W+7SrM50Osx2vW7NTSxD96m6U7A+2Ym+kaXWkGumSi7nLFqfVtKU7DMxDc74RB/EoNwdztbSfCfkGDqqGNaTcCydFSnsIosvZdhVrEa9bU3zeO6a55jfThts2XaW+CE3XDM+4qgXzY0S3eFRnqe05HcUlYCk8AP3D8sDPFb5TJNWQs/lW4XUgiXECLgc2HrGr03CQunBbB0E+Wk8Px/fCGEIm8lQ2F0lbiaWOAIyiCAN1KUoHsOQtK+ItUeLnUADzrTzKtiRfywFR/pxH6ZpHS+SBWN+BFjco1Zc0F09jtdEAZ59f+hJnK6d8bbQ8un1C4lidhI1MwRPT362Do+I50TJK1OVoNBnney3pHw9kVpm0Okrru5KYHkPgTEaafRQCQZ+F220cVn0YwVgOPUXOL9MdPnScvUcPq02Gn9ECbLNLb58t+7q4G0WWyowGC39Wb3MlnJjngVc9dLJ1VVNbYdvo+aZwPlO7aEUHIJC4RfNk5Cx7tJfZuJWZQ3Dc6+wkdzn+zImjnQazxXy0Vr1qs9RMx2OPvmhUYxJOM7WfNcT5vFo3eG2g4TBytknHyqOpb7BbPW6lO3rVckL3yLHJUWuE9ZXlkWLNUiNsK7PSvLGBO89qh3BILagUiG1zLPfP+4t+Cb0pfBugn6fDXfg2P6jHyfJh9NxIh0q6FcH4tiwuIFkoS+RW0OO/E5hC4hg186raDQsWhGPkx5XX4lRBXroJoTiO0SVXxttabHGtltTkOV4CHZblRJrc1RIN6CbH0Q2ufmM5byg+QewFvukUvgoe93ZL/R0g9LoY+QaKammQQBvhyl8sFvkqy/6CXL+Bj5EWEJ4oNTsczdebTI+hm7TYbgkdQRDYZrsnSR2p06yUJ0E89acRMGMUfeSI7Q8ccYGgEzqoIJLFbYrJdYpjkpKTniaxyzyl+pOPEkI1o4LtddlGp0lhxwtdVACmvMBIXPQU2uE1QRR++2VrOsRX6ULU/pHV3vWm/zbEz3u3bBAdwykUcBEPj0hF0ReEt34L5tugWfox6Jt5kBhOcaGT1MaRA9+QfNz63TFFq9zbpYiqp/7D3HDf1X98/M+T1F9AUZ/zcXdkpM6D2xtzJ2SU0JXXW0VP+tPpKUnT5FrDdkHFImKeYii6TakIJoRPnbXgiHzqboL6EZW9o/7k+S7/iC+JbV+NyTjwSMeVr8sfvGNUhIt3jEy+mPynj6QPLkneYpTHX8l6LnnuFIj/+iKCXVjoEfGM/GRBZPwu1xe2HvyQOIv55/hWsSqI6/mbpoABMeuQGRhEj8a/MvCV84/Ce5LvWGLSTfskRt/vlIvh9lLRIQwSP5aFylXwOHCvOONziLq/lf4wc6WO72+BHH/7FtgoY5WMPk+v3HWd/61cc67tAhE5hZ0rlpdKTp61xLlvPQz4d4Bfz/gO/bcZ/zGS1z/Ef0oecvr5e3j9Fw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHkchFxIIUUGilLbsQDsDtN3py8o4B3CbOBfbQPvr1w5NCpR225WQkE+Ov/Odiz/7hKE4coIuY5BzklBtcNbW/6mjphM2ZzPDt1rIcGchGMiez4w6OHbD85yZV3d1bcCYgAFlHFHe1h3Ldg3LN+zW1PYC1w1st+Y0nXtdu4WcSWjpUrN0bRNHlAVF2LYuchokiBEWUBQDCzgOJt3RMJCeASo56Z2TLcsiYN5Zcp4GpolrIWCIIlzDSWyemHs+JyELJmRBERc5vMQMWVt/2bter2vrei3JF6ZjWZZptUzpEzKy+K53vpWbIRzQebJd9xBNKMEoIs9IkRoBXyah1o0WSU74Mn4H2jZtS0EbsMEGtl36XTdfAxTsPom0RzJnyGBLZJdgY5hDDhSDdjMetPXvn+vgdu80R5TNkzxmB+uvUQK6gihJITRYmVnJ7vOIR8rVOQEcDCiOBCMruFJjkiIMTPuVw5xshoTJ4QuZVrRf2zD5I+WUAf5KW07MXa6SunmkOmdkAYz/n57t9muLcosiAZ0fvX40cdLk2g8f7hoOSruXPy6mE9Ef/24XFHadt6Sqdr+sD4e1mq2XTZer5a1DLlur4eSx37tb3F6Ln2LQsn7PHkK/ix5msZ/dJI1J5uDxaH35jNnw6uefC3696GYTAvi+OSWeeLgSomt/+6vbW//O7k/DaPwILXoVm+zp+c8dzob0it7eTH3Xdy9O70dpuKBZ04t66PSxz63lowgfR95Flq3v5q2VZ5vLEfuWDgT2/2TDa4+O0djvj85v2q857eawbywlYSJmD4B5uVTjMTjTzmW/EP9YXpSFhMa8cA1SpVGMA+V6R+1S0hIIKUAkDGQzt2vLOu/XvV7Ptxv9erPr9C2vbjVbLfvc6rqu2ys1aMvigGIvoXOiYimV3c7PxwRxHDCgIeTGKhF4CUz/APEMcaQN6FgejoQymCZSxaNFg4KdYmeePcS+jerUo3Uk6rp2lfBrep135xzyfeX295R7DJikBJS8q/lmcsAZl6XI0ErwyK6tUI2CkBdArjQ4cFzfMxmJ0wgUUTNOQhFBLV2mRWFMtv13DIRZYSUMp0nOUWQXx+/d7A6/lYWQPiFRDkyldAqymXDkJrLKfN7N27F38y7huyIk6pTJqvKc4C2T/U+vw6KmpJqUKjHM7JJ7teWLEEcAzA/4mYelqeKFK7ITvbxd5YUh5aRT9jdDtawmVitRdLSppDKX8KZUTNucABZS756mySNQs4IwP3XdVKwPIlf2fX6CL+mEIw6xnD+tWH7irTEBpt4aA3luNp99yOyFlHXjsOHHbL1IPkkU4w9fLTjAyk+af8m/dZKHr+06grUTR+YpHxic0IVaqYvl6Z3ZwImEJVIJk3wX/BjAseD7xqrIFRcup2kmOLz/RVMS19YRxomgfHCmF4Zd2S148qcUglenNzCFtL/c1Rv27l3992g4kQIYI73yJf/tbJBiXDDo6klQcGnrG/n0lMHpYkfmXwgeU/rGqXvWOPWtQum9rdJbvZ5VFXAvk84b81vLTk0Pz0PnXw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463053436</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35CC816F37A2E05307991F0A444C</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_05013_AccountGet_FUNC_Portal_Account_Status_as_Deleted_403_FORBIDDEN_P1" searchProperties="true" id="0f19ee20-57f0-4e69-b586-b81a582281ea"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="5d3fc0b0-4214-4eb9-8b55-38d273175e52"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="d5d958b5-3a85-425e-b569-14196ec4d68d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="0c43543e-6eec-4bce-92fe-4ecd67b9f4d5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","deleted");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Retailer_CS" disabled="true" id="93361b27-744f-4493-88cc-d6fb3a77ab17"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="3b32e721-0a34-457b-b1ca-1b2fc226fb52"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeAccountGet","ACCT_INACTIVE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CCB9D437A6E05307991F0A9C25</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CCB9D337A6E05307991F0A9C25</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CCB9D337A6E05307991F0A9C25</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B42C5D3798E05307991F0A5105</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B42C5D3798E05307991F0A5105</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I4FH3vr4gyj6uQTwpEBSlAW1IBLaWttvOycpwb8DTYaexAmF+/TmhSoLTbWQkJ+eb63HM/fOwLjlax5XqcQyoIo4o/7Kr/2OB0ArtjaUHLBs1xOm0NRdDWnPNzw261wiAAQ1V8zjPwKReIiq5qGaajGW3N7DyYTddxXMtqtBzzp6o8QcoltHRpyF35KqbcLcN21SylLkOccJeiFXBXYHfuTcau9HRRxUntXexYlgHT3lKIxNV13AgBQxzjBmYr/UI/8LkIuTsnC4pElsJbzJB31be9m82msbEbLF3olmEYutHRpU/IyeKH2jurNkPo04jt1gNEGSUYxeQ3KkhNQCxZqHjxgqVELFefQJu6aRTQGuRYw6ZDf6j6e4CS3TeRDkimHGl8icwK7B4iSIFiUB7v/a7643sd3O19SBHlEUtX/Gj9Z5SAriFmCYQarzKr2H0f8US5eheAXZ/iOONkDdNiTBKEgSt3KUQkHxMuhy/kStl+JefyR6opA/wnbbnQ97lK6vqJ6gzJArj4Pz3b79cO5QnFGfT4ZHP9c2s5g403zCaXw2gwHVzrs9t+67lbUth33pGq2/22Ph7WerbeNt3kpnWX/0II6EvSz+3RInwcx9NwfpNGpvcwy9l2ky7Wi2GbbxfXMbszRxHlxFzePvenzXE78KxZdJ35Lfvy/OyG0jy9HI2TnN69jETQGhrXt9F5th0h4jF7KZzpYrYdP82Nx+nMNzf0atbX6ej+Mvh93fkreB6uHpuTVH8OvHbz7Dn2KYxmBC3vrm4mzauRN+m+57Sfw6GxkoR5FvwCLKplMR7+ULmS/ULia3kpLCTUotLVTQqN4gKoUHvFrkJa3EwKEAld2czd2jCuLu1m37EGzaHd6rQvjaZttDod88rwmqbRrDRox+KI4oDRiBSxCpXdzc/XBPHK5UBDSLU1y/ASuPoF4hAJpPj0Xh4ORjk8MKni5mtiLc3gPAteHMPMaNKMOgiF7DdVlSkTt/Q29SIB6aF2tw+0+x4wSQgUAl9MOJcjzoUsxitaZyI2G2vUoJDJKyAtVNi1nHZT52SVxFBQ1VcszGJoJMukLI3Od/+WhjAvrYTjhKUCxWZ5AD/N7/hbVQrpE5LCgRcp9UG2E07cRWaVz6d5W+Z+3hW8l4WkOGeyriIleMfk8NP7uBRzUs9KnRjmZsW93vKHECcA9C/46celqeOFa7IXvbpf5ZUhBaVX9fcVNV4b2XqdlR1tFWKZSnhdaqapzwFnUvG2D+wFqF5D6N+6cGrWR5Fr+yG/TCzpXCABKzl/Srn8xmtjDrx4bfjy5OTffcochJR1E5CLU7ZBLB8lBeMv3y3YxYWfNN/Jvw1Lw/d2ncDaiyPzlE8MQeiiWBVXy/aT2cBMwhKphSzdBz8FcCr4obEucs1FyGkKMgGff1EKkeuqCGOWUeEP1dKwL7wlT7FNwH13+gBTivvbbZ3zT2/rvyfjuZTAFVJrX/LfzhopxwWDWjwKSi5dNZePTxmcLvaE/o3gR60fDPqdoW23vPN9re8MrFrrDzPpfTB/tOzV9Pg89P4F</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463061984</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B42C5E3798E05307991F0A5105</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_05015_AccountGet_FUNC_Portal_User_Access_Basic_200_OK_P1" searchProperties="true" id="cab0186f-7d74-416f-bffe-8c8cfaa6c36c"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="1e80aa70-a8cc-4976-b944-bebd19779a61"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="de5904d1-6083-4179-b2fd-caf03dda436a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )


log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult BAU" id="c97b9b8c-c90a-4ffc-a602-23fbf0c8c765"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


tC.setPropertyValue("LegalGuardian","");

//required for Child user Create

//tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FAU1"));
//tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Adult BAU Create" id="9c71f63a-97c9-4b16-852e-8ec97aaa6402"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )

log.info country;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");


def myTS = tP.getTestSuiteByName("User_Create_API")



myTC.setPropertyValue("Country",country);
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Retailer_CS" disabled="true" id="07449bda-94a2-4abe-b11f-e1032fc7f9ff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="a7a839e2-d762-4f1a-b219-fee6ab82fea0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35BF54F96B96E05305991F0A65D7</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"00FE35BF55026B96E05305991F0A65D7:E38EEA77"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35BF54F86B96E05305991F0A65D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35BF54F86B96E05305991F0A65D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B56AA86B7EE05305991F0ACDC7</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>00FE35B48BCF6B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B56AA86B7EE05305991F0ACDC7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:00FE35B48BCF6B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxFlHkchCSEFooJEC2wzU1oGaLfty8qxb8Bt4kDsQJhfv3ZoUmBot7MSEvLN9bnnfvjY5xzFUd3rcQ6poAnT/H5H/4c4LtRDNzBaTrNpNIKAGO1mWDfaIZwFDmoT7DR0zec8A59xgZjo6HXLbhhWy7DbM9v1Gg2v3qo1reaTrt1DyiW0dKlZupbHEeNeEbajZynzEsQp9xiKgXsCe9Pe6NqTnh4qOend8x3LImDaXQix9EwT1whgiCJcw0lsnpsHPueEe1M6Z0hkKbzGJLyjv+7dbDa1jVNL0rlZtyzLtNqm9CGczr/q3S/lZiA+C5Pd+hKxhFGMIvoLKVIjEIuEaL1onqRULOJ3oG3TthS0ATk2sN1gX3XzLUDB7pNIByRTjgy+QHYJNoEQUmAYtLuJ39G/fq6Du72zFDEeJmnMj9Z/RgnYGqJkCcTgZWYlu88jnihX9xyw5zMcZZyu4UaNyRJh4No4hZDm15TL4SNcK9qv5Vz+aDllgP+kLefmPldJ3TxRnT6dAxf/p2f7/dqh3KMog+41Ws5XmeNsn4YI1yfWNvkR883dYpQNOgWFfecdqardr+vjYa1m63VTEKBxfmU9fG/eO7+i2yDYhnk8ur/L/UFKv4er2+dR6xtuDC7cufUoHiYPL/FPfw5oYnHnkQSM0O04ICunT3385Y74z+3Z7MqZ0W+snSWPN+Eq7V88rZ4a+XCWo3SEHid/jyfjx8gdzohp9V7GdPMc/4wDgpe9NMqu4PYbdfJZ8teXKzza8G1W38J0HF/N/AwGnbec9nM4NJaSMM2CZ8CiXKrx8PvaUPYLiY/lRVkoMcLC1VsqjeICmNC7apeSFi+TAkSJJ5u5W1vWcOC4F+5Zr9c6u2gOBpbrWG67bQ+t3mX/sllq0I7FEcXLhIVUxVIqu5ufjwni2OPACKTGOsnwArj+AWIfCaT5bCIPR8I4zBKp4vbGeWlsSH1BqXBtsVkEv/LF9vkFL3TtJhG37DbthQLSQ+1uHWj3BDBdUlACryacyxHnQhZjhdaZiOzaGtUYZPIKSJUKe/VGyzU5jZcRKKpmnJAsgtpysSxKY/Ldf91AmBdWyvEySQWK7OIAvpvf8beyFNKHUOXAVUoXINsJJ+4iu8zn3bzr9n7eJXwvI1SdM1lXkVK8Y3L46W1c1JxUs1Ilhrldcq+2/CHECQDzA37mcWmqeGRN96KX96u8MqSgdMv+rlBtVcvW66zoaFOJZSrhTamZtjkFnEnF286SF2BmBWF+6sKpWB9FruyH/DKxYFOBBMRy/rRi+YnXxhS4em348uTkn33KHISUdROQi1O2y0g+ShTjD98t2MPKT5rH8m+TpOStXSew9uLIPOUTQ1A2Vyt1tWzfmQ2cSFgqtTBJ98FPAZwKfmisilxxEXKagkzA+180JXIdHWGcZEz4fb0w7AtvwVNsl+C9Of0GU4j7622d83dv64fR9VRKYIz0ypf+t7NBi3HBoKtHQcGlo+fy8SmDs/me0L8SPKH1Q7cxlFrfPtvX+jO3X2n9YSbd38y/W/Zqenweuv8C</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxFlHkchCSEFooJEC2wzU1oGaLfty8qxb8Bt4kDsQJhfv3ZoUmBot7MSEvLN9bnnfvjY5xzFUd3rcQ6poAnT/H5H/4c4LtRDNzBaTrNpNIKAGO1mWDfaIZwFDmoT7DR0zec8A59xgZjo6HXLbhhWy7DbM9v1Gg2v3qo1reaTrt1DyiW0dKlZupbHEeNeEbajZynzEsQp9xiKgXsCe9Pe6NqTnh4qOend8x3LImDaXQix9EwT1whgiCJcw0lsnpsHPueEe1M6Z0hkKbzGJLyjv+7dbDa1jVNL0rlZtyzLtNqm9CGczr/q3S/lZiA+C5Pd+hKxhFGMIvoLKVIjEIuEaL1onqRULOJ3oG3TthS0ATk2sN1gX3XzLUDB7pNIByRTjgy+QHYJNoEQUmAYtLuJ39G/fq6Du72zFDEeJmnMj9Z/RgnYGqJkCcTgZWYlu88jnihX9xyw5zMcZZyu4UaNyRJh4No4hZDm15TL4SNcK9qv5Vz+aDllgP+kLefmPldJ3TxRnT6dAxf/p2f7/dqh3KMog+41Ws5XmeNsn4YI1yfWNvkR883dYpQNOgWFfecdqardr+vjYa1m63VTEKBxfmU9fG/eO7+i2yDYhnk8ur/L/UFKv4er2+dR6xtuDC7cufUoHiYPL/FPfw5oYnHnkQSM0O04ICunT3385Y74z+3Z7MqZ0W+snSWPN+Eq7V88rZ4a+XCWo3SEHid/jyfjx8gdzohp9V7GdPMc/4wDgpe9NMqu4PYbdfJZ8teXKzza8G1W38J0HF/N/AwGnbec9nM4NJaSMM2CZ8CiXKrx8PvaUPYLiY/lRVkoMcLC1VsqjeICmNC7apeSFi+TAkSJJ5u5W1vWcOC4F+5Zr9c6u2gOBpbrWG67bQ+t3mX/sllq0I7FEcXLhIVUxVIqu5ufjwni2OPACKTGOsnwArj+AWIfCaT5bCIPR8I4zBKp4vbGeWlsSH1BqXBtsVkEv/LF9vkFL3TtJhG37DbthQLSQ+1uHWj3BDBdUlACryacyxHnQhZjhdaZiOzaGtUYZPIKSJUKe/VGyzU5jZcRKKpmnJAsgtpysSxKY/Ldf91AmBdWyvEySQWK7OIAvpvf8beyFNKHUOXAVUoXINsJJ+4iu8zn3bzr9n7eJXwvI1SdM1lXkVK8Y3L46W1c1JxUs1Ilhrldcq+2/CHECQDzA37mcWmqeGRN96KX96u8MqSgdMv+rlBtVcvW66zoaFOJZSrhTamZtjkFnEnF286SF2BmBWF+6sKpWB9FruyH/DKxYFOBBMRy/rRi+YnXxhS4em348uTkn33KHISUdROQi1O2y0g+ShTjD98t2MPKT5rH8m+TpOStXSew9uLIPOUTQ1A2Vyt1tWzfmQ2cSFgqtTBJ98FPAZwKfmisilxxEXKagkzA+180JXIdHWGcZEz4fb0w7AtvwVNsl+C9Of0GU4j7622d83dv64fR9VRKYIz0ypf+t7NBi3HBoKtHQcGlo+fy8SmDs/me0L8SPKH1Q7cxlFrfPtvX+jO3X2n9YSbd38y/W/Zqenweuv8C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0Tp41FIwrWJChL3w6E3SmE6vIyMswFzEpvGDoTz9WMHkgKFTjsSEvLO9tprX7zsW44CP+/WOYdQEEa1Xquq/1MAa1b2ZlPDKVvYKBZvSgbysGVApTKFiuPgUnmqaz3OI+hRLhAVVT1v2UXDujFs58UuucWiW7BylUpxomtjCLmEli45S9fiwKfcTcJW9SikLkOccJeiALgrsDus39+50tNFKSe9drtjmQQMawshVq5p4pwHGHwf5zALzFvzyOfW4+6QzCkSUQj7mB6v6vu9m80mtynkWDg385ZlmZZjSh+Pk/m1XrtKN4PXozO2WzcRZZRg5JM/SJG6B7Fgnlb35ywkYhFcgLZN21LQBsTYwHaRXuvme4CE3ReRjkiGHBl8gewU7BlmEALFoI2ee1X9+msd3O19CRHlMxYG/GT9PUpA1+CzFXgGTzNL2X0d8Uy5areA3R7FfsTJGh7UmKwQBq49hTAj8R3hcvg8riXt12IufySdMsDfacutechVUjfPVKdF5sDF/+nZYb92KGPkR1BjAuz2SyH/bFXm/brtLzeTyf2Lc7d2RtWEwqHzjlTW7v36dFiz2dpv4o/342jwutn6424n6P71o+sBr0/ip2Z5zOf92cN0NPDsTuw3oT34tRaB+dRsdfOv3nza+dnt5gd/Fwq2vyj/tqL61Vs/HJFu6ZFawY9Rv4cqq4FoDe47v+DZI1E/dgZ9+tpl1mTrFO5e5w9hoeXQxnhcRrYYb3lhAz/bZIZGkcfiq7un/tRsrkQ3apQeJr1xsV+svud0mMOxMZWEYTRdAhbpUo1Hr6V1ZL+Q+FxelIV4xixxdVdKo7gAKvSa2qWkxY2kABHPlc3crS2r0y6UGsWbRrNTblTqbatUsEqOY3esertdaKQatGNxQrHJ6IyoWEpld/PzOUEcuByoB6GxZhFeANc/QWwhgbQefZaHg1EOL0yqeMy22/V2uZzFy7wdxtFyvSAEnOlS1x6YeKSPYX0mIDyW7psj6X4GTFYElL6rAedywrmQtXhD60j4dm6NchQieQOESoTdvNQZk5Ng5YNiagbMi3zIrRarpDIm3/3nDYR5YiUcr1gokG8n5+9ieqff0kpIH48oB65SaoDsJpy5ivJpPhfzztuHeafw9cgj6pjJsoqQ4B2T40/v06LGJBuVLDHM7ZR7tuWbEGcAzE/4maelyeJ5a3IQPb1e5Y0h9aSW9vcN5d5y0XodJR2tKK0MJbwpJdM2h4AjKXjbF/YbqJlBmF+6bzLWJ5Ez+zG/SCzoUCABgZw/LVl+4bExBK4eGz15cOKvvmSOQsq6CYjFOVvTl28SxfjTZwt2sfKT5if5t2Gh996uM1gHcWSe8oUhCJ2rlbpZthdmAzMJS6QUsvAQ/BzAueDHxqzIGRchp2kaCbj8RVMaV9URxiyiotfSE8Oh7iY8xXYF7rvTB5hE2/eXdcwvXtav93dDqYAB0jNf8t/OBknGBYOu3gQJl6oey7enDE7nBzq/J3hG6julYuem3HDKh1JfLrUqWQGPMql9MH+0HNT09DzU/gU=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AccountDelete_user20130918_1379459446852</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463067867</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20140819_1408463069965</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B56AA96B7EE05305991F0ACDC7</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>00FE35B48BD06B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b44627d5-7732-472b-b74e-aeac81a3f1ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_05016_AccountGet_FUNC_Portal_User_Access_Standard_200_OK_P1" searchProperties="true" id="fe1f47f5-5f46-419e-a5fd-adda86fadf98"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="e527647c-cde8-496d-9881-eda20666d36c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="5250bdd9-9416-482b-90a6-bc6c9cb0bed4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult SAU" id="9b479e37-5f03-42f5-8ee0-4acd6c44d13b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


tC.setPropertyValue("LegalGuardian","");

//required for Child user Create

//tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FAU1"));
//tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Adult SAU Create" id="2689e955-295e-4ab0-8bed-f34522541a89"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )

log.info country;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");


def myTS = tP.getTestSuiteByName("User_Create_API")


myTC.setPropertyValue("Country",country);
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Retailer_CS" disabled="true" id="391ff443-e692-4a3d-be65-659677cddba6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="016a9bf8-c4e1-4425-8369-c276f8ada654"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CC81A237A2E05307991F0A444C</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"00FE35B48BE46B7AE05305991F0AEE3B:D0E43D76"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CC81A137A2E05307991F0A444C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CC81A137A2E05307991F0A444C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B3DF8A6B78E05305991F0ABA86</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>00FE35BEDA9E6B8AE05305991F0ABD1F</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B3DF8A6B78E05305991F0ABA86</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:00FE35BEDA9E6B8AE05305991F0ABD1F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6o4FP7eX8FwP95BXhVhqjOodS+72rrF+9J+2YnhqLEQKAlo76/fgIWqtd12Z5xxcjh5znNe8iSXDMWR4XqMQcZJQiV/1JP/QR3b0HTdVnQHGYplOaB0TWehdMzFwtDbtqO1O7LkM5aDTxlHlPdkscFStK7YMtfbrmW5ptlqm517WfoBGRPQwqWlydIujihzq7A9Oc+omyBGmEtRDMzl2A286cQVni6qOcn9yz3LKmDWX3OeuqqKWyFgiCLcwkmsXqpHPpchcwOyoojnGTzHDFlPft673W5bW7OVZCvV0DRN1RxV+ISMrL7I/Yt6M4Q+XSb79RDRhBKMIvIblaSmwNdJKHnRKskIX8dvQOuqrpXQCuywgnWLfpHVlwAVuw8iHZHMGFLYGuk12C0sIQOKQfp+6/fkLx/r4H7vPEOULZMsZifrz1ECWkCUpBAqrM6sZvdxxDPl6l8Cdn2Ko5yRAq7LMUkRBibNMliS3YQwMXwhk6r2SzsmfqSeMsCfaculeshVUFfPVGdEVsD4/+nZYb/2KD9QlEMf/PXPOV+vSJJ/m0J0/3d2xZbxZjyCVa+icOi8J9W0+3l9OqzNbD1vWqy3mXk1SeP76w6dXNPBX7g7Q92BVww3xkPxmHQCezUOJnGej4LZ9HbhPRjm17w79U3nxi7C9Y3zh3WXBXmCvAvV3OjfJ/dFp+393JCnFRndJH8OBk6e3m1Vc7627+L7x+5m8KAH9mw12Tj2/cyIHItYuo2n3w3/SvvGqEphXvy+GMNXFYxOdjebBPbU+zXMt72XnA5zODbWkhDkiw1gXi/L8fBH0lj0C/H35aW0kFBZVq5uWmoU40C53C93ldLi5kKASOiKZu7Xmja+MtsDczTuep2B3b3S2qbWdhx9rHkDr9upNWjP4oTiMKFLUsYqVXY/P+8TxLHLgIaQKUWS4zUw+R3EEeJI8umtOBwJZTBPhIrr0WLrWGGUhpSm+oO5KDJxNiz7kcrSdcJv6E3mLTlkx9rdPdLuW8AkJVAKfDnhTIw446IYj6jIeaS3CtSikIsrICtV2DWsbltlJE4jKKmqcRLmEbTSdVqVRmX7f0NBmFVWwnCaZBxFenUA38zv9FtdCuETktKBlSkNQLQTztxFRp3Pm3kb+mHeNbyXh6Q8Z6KuPCN4z+T408u4lHPSzEqTGGZ6zb3Z8kmIMwDqO/zU09I08cKCHESv71dxZQhB6df9fUStx1ZeFHnVUbsUy0zAq0IzdTUAnAvFe5onD0DVBkL90IXTsD6J3NiP+eV8TQOOOMRi/qRq+YHXRgCsfG344uTsPvqUOQop6sZhx8/ZhpF4lJSM3323YBeXfsI8E3/bJAtf2nUG6yCOyFM8MTihq3JVXi1Pb8wGTgQsEVqYZIfg5wDOBT82NkVuuHAxTYucw9tfpFLkejLCOMkp90dyZTgU3oonf0rBfXF6BVOJ+/NtvWNv3ta/ppNASGCM5MaX/LezQqpxwSCXj4KKS0/eicenCE5XB0L/TPC11g+HXd3TTdszKq2391pvWdawKeBRJv1X5teWg5qenof+vw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtc6o4FP7eX8FwP95BXhVhqjOodS+72rrF+9J+2YnhqLEQKAlo76/fgIWqtd12Z5xxcjh5znNe8iSXDMWR4XqMQcZJQiV/1JP/QR3b0HTdVnQHGYplOaB0TWehdMzFwtDbtqO1O7LkM5aDTxlHlPdkscFStK7YMtfbrmW5ptlqm517WfoBGRPQwqWlydIujihzq7A9Oc+omyBGmEtRDMzl2A286cQVni6qOcn9yz3LKmDWX3OeuqqKWyFgiCLcwkmsXqpHPpchcwOyoojnGTzHDFlPft673W5bW7OVZCvV0DRN1RxV+ISMrL7I/Yt6M4Q+XSb79RDRhBKMIvIblaSmwNdJKHnRKskIX8dvQOuqrpXQCuywgnWLfpHVlwAVuw8iHZHMGFLYGuk12C0sIQOKQfp+6/fkLx/r4H7vPEOULZMsZifrz1ECWkCUpBAqrM6sZvdxxDPl6l8Cdn2Ko5yRAq7LMUkRBibNMliS3YQwMXwhk6r2SzsmfqSeMsCfaculeshVUFfPVGdEVsD4/+nZYb/2KD9QlEMf/PXPOV+vSJJ/m0J0/3d2xZbxZjyCVa+icOi8J9W0+3l9OqzNbD1vWqy3mXk1SeP76w6dXNPBX7g7Q92BVww3xkPxmHQCezUOJnGej4LZ9HbhPRjm17w79U3nxi7C9Y3zh3WXBXmCvAvV3OjfJ/dFp+393JCnFRndJH8OBk6e3m1Vc7627+L7x+5m8KAH9mw12Tj2/cyIHItYuo2n3w3/SvvGqEphXvy+GMNXFYxOdjebBPbU+zXMt72XnA5zODbWkhDkiw1gXi/L8fBH0lj0C/H35aW0kFBZVq5uWmoU40C53C93ldLi5kKASOiKZu7Xmja+MtsDczTuep2B3b3S2qbWdhx9rHkDr9upNWjP4oTiMKFLUsYqVXY/P+8TxLHLgIaQKUWS4zUw+R3EEeJI8umtOBwJZTBPhIrr0WLrWGGUhpSm+oO5KDJxNiz7kcrSdcJv6E3mLTlkx9rdPdLuW8AkJVAKfDnhTIw446IYj6jIeaS3CtSikIsrICtV2DWsbltlJE4jKKmqcRLmEbTSdVqVRmX7f0NBmFVWwnCaZBxFenUA38zv9FtdCuETktKBlSkNQLQTztxFRp3Pm3kb+mHeNbyXh6Q8Z6KuPCN4z+T408u4lHPSzEqTGGZ6zb3Z8kmIMwDqO/zU09I08cKCHESv71dxZQhB6df9fUStx1ZeFHnVUbsUy0zAq0IzdTUAnAvFe5onD0DVBkL90IXTsD6J3NiP+eV8TQOOOMRi/qRq+YHXRgCsfG344uTsPvqUOQop6sZhx8/ZhpF4lJSM3323YBeXfsI8E3/bJAtf2nUG6yCOyFM8MTihq3JVXi1Pb8wGTgQsEVqYZIfg5wDOBT82NkVuuHAxTYucw9tfpFLkejLCOMkp90dyZTgU3oonf0rBfXF6BVOJ+/NtvWNv3ta/ppNASGCM5MaX/LezQqpxwSCXj4KKS0/eicenCE5XB0L/TPC11g+HXd3TTdszKq2391pvWdawKeBRJv1X5teWg5qenof+vw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3Tqo1N6odw6wgw3tW7whpe9eTkT0gXk0KY1SQH99TsptgKiR8+MI5PVlW9965IvOeUoCh2vzTkwQWKq+b2m/k+9MXGqQT0w7HIVGa7ruEY9cGvyH5oCtqyJG4Cu+Zyn4FMuEBVN3bFs17Dqht24tyue63rlSqlWK4917REYl9DSpWTp2joKKfeysE09ZdSLESfcoygC7gnsjdrDgSc9PZRz0lunG5ZZQNaaC5F4polLAWAIQ1zCcWSemjs+pwH3RmRGkUgZvMUMeFN/27tarUqrcilmM9OxLMu0Gqb0CTiZHeuto3wzBD6dxpt1F9GYEoxC8ooUqSGIeRxo7XAWMyLm0SfQtmlbCtqANTaw7dJj3XwPkLH7JtIOScaRwefIzsHuYAoMKAbt4c5v6sff6+Bm7z1DlE9jFvG99c8oAV1CGCcQGDzPLGf3fcQD5WqdAvZ8isOUkyVcqTFJEAau3TCYkvWAcDl8Adey9mtrLv9IPmWAf9KWU3Obq6RuHqhOj8yAi//Ts+1+bVAeUZhC63Kxwt1xf9ElBEe1xm0c9U/WrnXhoGEzo7DtvCFVtPttvT+sxWy9bRrNangx6CwGT8/V6+p59/XmxWdsTEK7fjkmVd9J2PJhXK49JzWXPM0WoX/rp9M/6yUKr4KylcyfxpF1TkcPg97gqD3i9PY1gfbQ+TUc3MFj/+yssvrjIuhc+FHkW+PuFXntPHQXtauozm4urlNnfY1/w4T11vGFs7zlD+epw++fHh+OBv7k6WRxfnIS3j4Pf91enl/1m+85beewa8wlYZRO/gUs8qUaD7+nncl+IfG1vCgLCYxp5uolSqO4ACr0ltqlpMVLpQCRwJPN3Kwt66xfrnT6vXajX+3U232rUrYqjYZ9ZrU7Pfss16ANiz2K3ZhOiYqlVHYzP18TxJHHgQbAjGWc4jlw/QvEHhJI8+mdPBwx5XAfSxXHCzvCdsBZyqppWJ3UI3CriRXp2lUsruk1a08FsF3lru8o9x1gkhBQ8q7mm8sB50KW4hktUxHapSUqUUjlBcCUBnuOW6+YnERJCIqoGcVBGkIpmSdZYUy++XUMhHlmJRwnMRMotLPj92l2+9/yQkifgCgHrlLqgGwmHLiJnDyfT/N27O28c/h2GhB1ymRVBSN4w2T30/uwqCkpJqVIDHM7515s+SHEAQDzC37mfmmKeMGSbEXPb1d5YUg5aeX9fUal51K6XKZZR2tKKpmEN6Vi2uYIcCr17uU+XgA1CwjzW9dNwXovcmHf5ZeKOR0JJCCS86dly2+8NUbA1VvDl+dm/d2HzE5IWTcBa3HI1g3lk0Qx/vLVgj2s/KT5Rv6sYha8t+sA1lYcmad8YAhCZ2qlLpaXT2YDxxKWSCWM2Tb4IYBDwXeNRZELLkJO0yQV8PkXTUlcU0cYxykVfk/PDNuym/EULwl4704fYDJpf7ur1/zTu/r3cDCSAhghvfAl/+1skGxcsHypSv+MS1Nfy6enDE5nWzL/RvCj0ne7dbttl2ttJ1P62kbpXdftFgXcyaT1wfzRslXT/fPQ+gs=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AccountDelete_user20130918_1379459446852</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463072720</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20140819_1408463074769</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B3DF8B6B78E05305991F0ABA86</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>00FE35BEDA9F6B8AE05305991F0ABD1F</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5da56a8d-11f7-4984-99b2-aa2ad88ae0d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e195b081-7276-40fb-8077-075dee783c29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_05017_AccountGet_FUNC_Portal_User_Access_Full_200_OK_P1" searchProperties="true" id="037cfd81-4f6b-4132-91a9-f2c35faa8205"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="38abac02-de83-4281-95f5-2f53e95cc3f5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="e5a398aa-b17b-4c35-ab75-6bdfc96102d1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Retailer_CS" disabled="true" id="727118ee-ca75-43f9-b044-f7a7e2e26d23"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="cd77272f-e1c2-4638-908b-fb80b6fb19ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35BF55096B96E05305991F0A65D7</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"00FE35B4F2FB379CE05307991F0A189A:CD8B262E"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35BF55086B96E05305991F0A65D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35BF55086B96E05305991F0A65D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B3DFA16B78E05305991F0ABA86</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E84B3543D1AE867EE0401F0A07997C1E</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B3DFA16B78E05305991F0ABA86</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E84B3543D1AE867EE0401F0A07997C1E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdU+I8FL73V3Tq5U5p2lKgHWCmUlyrKAyIrt44IQ0l2qbYpID++k2KRUD0Zd+rTk7Px3M+8pw0GUxi0/UYwxknKVUCv6U+WdOpXTVspE0mdlWrWghrDoJQc4zQATVjUq+BhqoEjOU4oIxDyluqCQxLM4AGnFtQd23btexKrWE9qsodzphwLVQqQFVWSUyZW4RtqXlG3RQywlwKE8xcjtyRd91zhaYLS0xqu7lGWQTM2jPO566uo0qIEY5jVEFpojf1HZ1myNwRiSjkeYY/YoaspX7YLpfLytKqpFmkmwAAHTi60AkZiU7V9klpjMOATtP1uQNpSgmCMXmHEtQ15rM0VLw4SjPCZ8k3rg3dANK1hldIQ0aVnqr6Z4AC3ZGedkBmDGpsBo3S2RBPcYYpwsp4GLTU0+M6uLa9zSBl0zRL2N753yBhusBxOsehxsrMSnTHezxQrnYTIzegKM4ZWeAbOSZziDBTBhmeklWPMDF8IVOK9isrVk4YRv/Skqa+jVPA1g9UxicRZvz/9Gu7V2svdzDOcfv64X40e73oT5PgvfsIgsfB5fPl1dvZLHloFRC2ldegNq3+OO8P6mauPowi36n27gfQc+7yx0H3PR3w8fD5+n5ee1lkEx55JvJ7fv6cC6O7gd9h70u9H8Y3Z797fj+aAuvq6td7Pwkff/f6J9C7G3aeL6KHyegqejivd8Cft2x8Z/YaEN3EUf91qUfzYDL2XnqvTmjds2s6mV2MvMukZ4DxzDbHqzqm/nA2Guon/YcXFNmpCXq/kvu8yqY2an3mtJ3DrrCkg1E+ecaIl0c5GoGvnIt+Qf4ztUgJCbVpoerOJT8xjilX29JK0oqbC/IhoSuauT53G9Uzq+qArm3Vfc+ud0EVGOfAA3XHqXdMUPLPGsUexE5Kp0TGkgy7np+fAaLEZZiGONMWaY5mmKk/ePQhh0pAh+JipJTh21QweNfodv0z0PAadvesZp8D2/BMxzh3LM8WwOuqcpPyPu1n3pTjbIe9DbDD3kOMyJxgSfFyzpkYdMZFSV7hIuexUVnACsW5WAKZ5GHXrDZsnZFkHmMJWE/SMI9xZT6bFwXS2fprahCxQjrs3hb379v09v+VlRA6IZEKTOZyhkU38YE1ZJaJfJ+wtZ1w6d7LQyKvmSgrzwhaI9n99Tktckw2oyIyeuqMnowS90b9aPOvlvoPoPT9emwChQuyFbbcp2JFCBJpl918hZXXSr5Y5EX/6pIgM+FeN3RQ10cY5YLl3m7TF0z1jQv9qAWzQb0XeSPfxZfzGR1xyHEipk0pjke8LkaYyddFIG7L6tiny05IUTeOV/yQrBOLR4hE/OM7BblI6gnxQHyWaRZ+tuuAr604Ik/xpOCERvIk18nbN0OBUuGWCP5Ls23nhxwcCr4r3BR5g4WLaZrkHH//R5HE1lIhQmlOeeCrhWCbbAuc/G2O3U+lL24KQv/Y0Cv27Yb+c90bCdpLoLrRJf+trJFiXBAWVowUWFrqSjw2RXAabZH7B8Av/G5XLd+omY1avbvL70Z3U8CdTNpfxF8lWzXdvw/tvw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxGlj6PgBAiEqCBBgSqz/Rqg7bYvK+OYYJrYIXZCmF+/dmhSoLTbroSEfHN97rkfPvY5h1FYd/uc40QQRjVv2NX/qZsWsizYMOrtdt1otua24WBsGmjh21YTz1Fjbuuax3mKPcoFpKKryz1Nw3QMqzOzbLfZdBtOrdFpP+vaA064hJYuNVPX8iik3C3CdvU0oS6DnHCXwghzVyB32r++cqWnC0tOeu98x7IImPSWQsQuAKjmY4TDENUQi8A5OPA597k7JQGFIk3wa0yfd/XXvZvNprZp1FgSgLppmsDsAOnjcxKc6b0f5Wbse3TBdusLSBklCIbkD1SkrrFYMl/rhwFLiFhGH0BbwDIVtIFzZCCrSc908BagYPdFpAOSCYcGX0KrBJvgBU4wRVi7n3hd/exrHdztnSWQ8gVLIn60/h4lTDMcshj7Bi8zK9l9HfFEuXrnGLkeRWHKSYZv1JjEEGGu3SV4QfIrwuXw+Vwr2q/lXP5IOWUYfact52Cfq6QOTlRnSALMxf/p2X6/digPMExxz4wjx7rNbDPl9NG8bN7Z88agE8+eL1m3oLDvvCNVtft1fTys1Wy9bgr6D3+a1zhzzDZobx/5S7Kair8C4jx12DqN+/lodBHn4n7bulr/ivrRXStwonF9BQYvLXs2nqLtelSnq99PeTD4AZy7a2pNG0u+CcxO8vLkXT0+QY9sbqzRerG6b43ZBDVHj83pw/r5brail3HytJnknnW7McF21N6YA+EFTxc/V/6P6PbXYiYewXL78/fEb+cL7nXfctrP4dBYSsI0na8wEuVSjYc31MayX1B8Li/KQnxjUbi6sdIoLjAVek/tUtLiplKAiO/KZu7WpjkeNexBYzjuW61B2xmZdsO0Ox1rbPYHfadVatCOxRHFC0YXRMVSKrubn88JosjlmPo4MTKWoiXm+ieIQyig5tGJPByMcjxjUsUtniXZdt6BDZg1RbDNZYgXtCWZrt0wcUtvk/5C4ORQup0D6Z5gRGKClb6rAedywrmQtVjDLBWhVctgjeJU3gCJEmG33nRswEkUh1gxBRHz0xDX4mVcVAbw3X/dgIgXVsJRzBIBQ6s4fx+md/ytrIT08Yly4CqlAZbdxCeuonqZz4d51639vEv4fuoTdcxkWUVC0I7J4ae3aVFjUo1KlRjiVsm92vJNiBMA4BN+4Lg0VTw/I3vRy+tV3hhST3plf9ewtq6lWZYWHW0rrUwkPJCSaYEpRqkUvO2MvWAKKgjwpfumYn0UubIf8kvFkk4FFDiS86cVyy88NqaYq8eGJw9O/tWXzEFIWTeBc3HKdhHKN4li/OmzBblI+UnznfzbsMR/a9cJrL04Mk/5whCEBmqlbpbtB7OBmIQlUgpZsg9+CuBU8ENjVeSKi5DTNE8F/viLpjSuq0OEWEqFN9QLw77uFjzFNsbum9M7mELbXy/rnH94Wf99fTWVChhBvfIl/+1skGJcENbVm6Dg0tVz+faUwWmwp/OvBE9I/di2Tac16LT2pb5lD9tVAQ8y6b0zv7fs1fT4PPT+BQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+JKEH7fX5GKj1shFwKBlFAFBDUKugK64svWMGlgNJnBzATC+fVnEgwCooc9T6np9OXry3w95xxFoeW2OIdYEEYV32uof0xsVSZTe6LZjmlptoltrYYcrCEUmHWnVi9PJkhVfM4T8CkXiIqGahlmWTMNzaiPDMetVNxyrWTVKs+q8ggxl66lSslQlTQKKXfzsA01ianLECfcpSgC7grsDlv9nis1XVRgUpvnG5R5wLg5F2Lh6jouBYAhDHEJs0g/1/d0zgPuDsmMIpHE8B4z4A313Xa1WpVW5RKLZ7plGIZu1HWpE3AyO1ObPwpjCHw6ZZtzB1FGCUYh+QdloPog5ixQWuGMxUTMoy9cm7ppZK41SLGGTZueqfpHgBzdiZ72QMYcaXyOzMLZAKYQA8WgPAz8hnp2Wgc3tqMYUT5lccQPzn8HCegSQraAQONFZgW60z0eKVfzHLDrUxwmnCzhNhuTBcLAlV8xTEnaI1wOX8CVvP1KyosJA/w3LTnXd3FK2PqRynhkBlz8n37t9mrj5RGFCTRnych6ZT/rT3b/GqqXz/31E621446/bDVyCLvKG1DbVr+fDwd1O1fvRitzuKYmqk/vf/9Ow8GN16n0Lvx2/za8qE6sYbv71qMv7OpxtOjcBMO6X+9PXj1H/32d9sYPV7OK9Xo/qNO1165e//xx+RpZ7ei657wOBm931UXl2YeUXkTz9P6hc23B47yD+qYxGT+Nx+PyjUivfrYvx883lI+v2+vkIlzdPr4YL2bSfRv9sNlzf7q+W/r3mPgsnHqwanzktJvDvrCgg2EyeQEsimM2Gr6nXMh+IfE9tWQSEmjTXNVdZPzEBVChNjOrjFbcRJIPCVzZzM25W7Pb5Ypd9sxWt1Z1ul3DNswLo2U49brTMbsF/2xQHEDsMDolWayMYTfz8z1AHLkcaACxtmQJngNXv/HoIYEUnw7kxWCUw4hJBndqFatseF7ZbtvlWrXitI1Wze5YZtszO5ZTVpVbJu7oXdyaCoj32Ns09th7AJgsCGQUn805l4POhSzJG1omIjRLS1SikMglEGc87Fp2raJzEi1CyADrEQuSEEqL+SIvkM43X0tDmOfSQXeU378v0zv8V1RC6gQkU+BZLm2Q3YQja8gqEvk64fJuwoX7VhKQ7JrJsoqY4A2S/V8f05KNyXZUZEZ/OsM/ZoF7q36y+WdL/RtQ+mE9toGCJdkJW+xTuSIkiTSLbr6h0lspWS6TvH9ORpCxdK+buuHoQ8CJZLn1iL0C1bcu9JMWzBb1QeStfB9fIuZ0KJCASE6bkh9PeF0MgWevC1/elvTUp8teSFk3Aak4JuuE8hGSIf72nYJdnOlJ8S/5WbE4+GjXEV87cWSe8kkhCJ1lp2ydrL8YCsykWyL5j8W7zo85OBZ8X7gt8haLkNM0SQR8/UfJiK2hIoxZQoXvqblgl2xznGK9APdD6ZObnNDfN3TKv9zQT/3eUNJehNStLvlvZY3k44JBWnGSY2moqXxsyuB0tkPu7wCP83vV+o7f9zNpfhJ/luzU9PA+NP8F</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AccountDelete_user20130918_1379459446852</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463077451</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20131009_1381305337201</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B3DFA26B78E05305991F0ABA86</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E84B3543D1AF867EE0401F0A07997C1E</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5da56a8d-11f7-4984-99b2-aa2ad88ae0d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_05018_AccountGet_FUNC_Portal_NoManageAccountConsentPolicy_403_Forbidden_P1" searchProperties="true" id="6cdc8cbb-134b-4854-a8d8-0c88573a8c69"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="60e4a5f9-3504-47f0-be7d-ad8040702c78"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="074cc340-1aa1-4487-9264-181c212238a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update MAC Policy" id="2c841e87-185c-4a39-a042-e0ef7b948492"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_Policy_Status")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","deleted");
myTC.setPropertyValue("Policy","105");
myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("UserName",tC.getPropertyValue("Username1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="06c2d01f-8199-40ad-ab55-6b00ed4dc26b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CC81B137A2E05307991F0A444C</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"00FE35CE5F5837A4E05307991F0A2173:4AD10294"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CC81B037A2E05307991F0A444C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CC81B037A2E05307991F0A444C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35CC6B6F6B80E05305991F0A0CC0</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35CC6B6F6B80E05305991F0A0CC0</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdU+o6FH33V3Tqo1PaQvnqADOIoigognKPvtyJSWijbVKTFNFff5JiKyB49c4ww2R3Z+21P7KSlgBxVPa7QmAuCaPG4KRt/lvDrochrltuA9UsD3nQAlVQtyAElblbdxuPj1XTGAiR4gEVElDZNsuO61lOw3Kbt27V9zzfc0uVavPBNGaYCwWtXEqOaSzjiAo/C9s2U059BgQRPgUxFr6E/rQ7GvrK0wc5J7PTWrHMAvJOKGXi2zYsIcUximAJsthu2Rs+LST8KQkokCnHHzGRaJsfe19fX0uvlRLjgV12HMd2mrbyQYIEh2bnIN+M0YDO2WrdA5RRAkFE3oEmNcIyZMjoRgHjRIbxHmjXdh0NbeEltKDr0UPT/gyQsfsh0gZJLoAlQuDmYBM8xxxTiI27yaBtHv6sg6u9txxQMWc8Flvr31HCdIEjlmBkiTyznN3PEXeUq9PC0B9QGKWCLPCVHpMEQCyMMcdzshwSoYYPCSNrv7EU6kfyKcPwN21p2etcFXV7R3VOSICF/D89W+/XCmUGohR3AI/OqueDP8mtMxMXb6ejp6OgevRwHSHWziisO69IFe3+WG8PazFbH5vi58VEosfZ8/3lEIn6O/dE9+J07lakA/oXBM9gz4bxhI0n4yDqziSo31zehXYi2f2cPchoNlqc9ae14dE/z+cHaFzzxoPwxQvvzhFE8JWN2WiJnr0nm10f9ysP/Gb2LsNr+dRoPlwMb9L7cAaPT87qjzX37ii4ugkvX3p4kUbDhB6Q2ah/uniYL0MUn82DavdKtD9zWs9h05hLwjR9fMJQ5ks9HoMTo6/6BeT38qItBFnzzNVPtEYJiak0O3qXlhY/VQJEkK+auVo7Tv+0Uu31ase1fu244Zw61YpTbTbdvtN1ej0n16AViy2KPUbnRMfSKruan+8JwtgXmCLMrQVLYYiF+Q3iCZDAGNCJOhyMCnzLlIpXYYiADN4rDkdRJRT1RvO9nATINK6YvKbXvDuXmG8qd2NDuScYkoRgLe96voUacCFVKV7AIpWRW1qAEsWpugC41mC/7DWqtiBxEmFN1I4ZSiNcSsIkK4wtVv9lC0CRWYmACeMSRG52/PZmt/0tL4TyQUQ7CJ3SMVbNxDtuokqez968y+563jl8N0VEnzJVVckJXDHZ/PQ5LHpKikkpEoPCzbkXW34JsQPA/oafvV2aIh5akLXo+e2qLgwlJ528vy+g9FJKF4s062hdSyVX8LZSTNeeYpgqvXu7Zc+Y2gWE/aPrpmC9Fbmwb/JLZUinEkgcq/kzsuUP3hpTLPRbY6DOzfKnD5mNkKpuEi/lLlsvUk8SzfjbVwv0ofZT5rH6e2UcfbZrB9ZaHJWnemBIQgO90hfL257ZgEzBEqWEjK+D7wLYFXzTWBS54CLVND2mEu//YmiJa5sAQpZSOTgxM8O67GY85VuC/U+nLzCZtH/c1Uux967+MxpOlQDGwCx8yX87WyQbF4hN/STIuLTNpXp6quA0WJP5D4K7lL7hHjuVerecKX19pfSe5/WKAm5k0vli/mpZq+n2eej8BQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463080504</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35CC6B706B80E05305991F0A0CC0</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b948c6c1-8581-4ed1-b753-d988b4da9c10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>role</con:name><con:value>nodeIdportal</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdportalCS</con:value></con:property></con:properties><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="Account_Get_PortalCS_P1" id="249ba49c-45c7-49c1-9318-24970e42d552"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06015_AccountGet_FUNC_Portal:CS_User_Access_Basic_200_OK_P1" searchProperties="true" id="11bcfcb1-37d7-4b78-af60-a52140a61d75"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="df3777ba-4892-452e-90cd-2d6180f02118"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="df4857cd-c07d-485a-a8de-e31594feade9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )


log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult BAU" disabled="true" id="4bd8eb03-9159-44ad-8280-0e70752dda33"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


tC.setPropertyValue("LegalGuardian","");

//required for Child user Create

//tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FAU1"));
//tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Adult BAU Create" disabled="true" id="d53f1fab-d7ef-483c-834e-263ad311bf9e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )

log.info country;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");


def myTS = tP.getTestSuiteByName("User_Create_API")

tP.setPropertyValue("audience",tS.getPropertyValue("audience"));


myTC.setPropertyValue("Country",country);
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" disabled="true" id="53cfcd20-63cd-4d9b-b6aa-42689ba3ec49"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" disabled="true" id="6ac0fe71-1b19-489e-9e72-914ebc8c1efe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>02B20F6F17B34988E05307991F0A5F9E</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FAA05BFD6FF1A890E0401F0A07996E1D:5711D686"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B20F6F17B24988E05307991F0A5F9E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B20F6F17B24988E05307991F0A5F9E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B20FC18CB74D7BE05307991F0A7355</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FAF58ADBF315904FE0401F0A079932B2</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B20FC18CB74D7BE05307991F0A7355</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FAF58ADBF315904FE0401F0A079932B2</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbvT/I6FP7+/hXL/GjGNthwW4BkgChGFEF91S83pStQ3dqxdgP562873AQEr96EhPTs9DnP+dGnbTAQhVXPZwwlHFOi9LtN9R+nPpnYk8DVHMeua9Z0amnAmlY1x57UQN1ybadmqkqfsRT1CeOA8KZaNUxLM+qaYd8btldzvapdcWrVF1V5RAkT0MKlYqjKKgoJ8/KwTTVNiEcBw8wjIELM49Ab+4NrT3h6oOCkthoblnnApDXnPPZ0HVYCBFEYwgqkkd7Qd3waAfPGeEYATxP0ETNgTfVj73K5rCxrFZrM9KphGLrh6sInYHh2orb+FJtR0CdTull3AKEEQxDiNZCkBojPaaD44YwmmM+jI9CmbhoSWkMrqEHTIieq/hkgZ/dDpB2SCQMamwOzABuhKUoQgUh5GPWb6snPOrjZe58AwqY0idje+neUEMlQSGMUaKzIrGD3c8QD5Wo1EPT6BIYpwxm6kWMSA4iYMkzQFK+uMRPDFzAlb7+yYuKHiylD8DdtaejbXAV1/UB1uniGGP8/Pdvu1wblEYQpaqGbzkgHl72Lea9nQ3DJ3PV6kK2im8FDM6ew7bwhVbb7Y70/rOVsfWwaRMwf18O70cjohovu++w9Mrh5PQyYHT2fP/P7V/9pcQomi9qTPzEwx6vsisdnfrx8A2OM44vsfo1rdDDqX97+qV9cPnZmDsAPF/OExnfVwHfOjVt/9ABfg5fTi7/rFN0+1tqT5fplqk8m7ixkdvtsMozmy9Nxls7pCx330eCqlmV/7oZdPoRsPXv5e4WXtefBgjU/c9rOYddYSMI4nbwiyIulHI9+V+mJfgH+vbxICw60ae7qxVKjGEeEqy25S0qLlwoBwoEnmrlZ99qm0en1uqbvnvldp35uWIbZM3zjzHXNznm70KANiz2KHUqmWMaSKruZn+8JwshjiAQo0TKawjli6jeIXcCB0icjcTgoYeieChU3Se3tNXReLTZbRmbC3am1shbLBbRV5YbyW3Kb+FOOkl3tdna0e4QgjjGSAi8nnIkRZ1wUYwGylIdmJQMVglJxBSRShb2q5dg6w1EcIklVj2iQhqgSz+O8NDrb/Fc1AFluxQzGNOEgNPMDeDS//W9FKYRPgKUDkym1kWgnOnAXmUU+R/M2ze28C3g/DbA8Z6KuPMFww2T30+e4yDkpZ6VMDDKz4F5u+SXEAQD9G376fmnKeEGGt6IX96u4MoSgtIr+LkBlUUmzLM07eibFMhHwutBMUx8jmArFe7+nb4joJYT+owunZL0XubTv8kv5nIw54CgS86fkyx+8NsaIyddGX5yc1U+fMjshRd04WvFDtk4oHiWS8bfvFuhB6SfMQ/G3pEnw2a4DWFtxRJ7iicExmcmVvFrej8wGpAIWCy2kyTb4IYBDwXeNZZFLLlxM0yTl6PgXRYpcUwUQ0pTwflfNDdvCm/Pk7zHyPp2+wOTi/nFbr9jR2/ppcD0WEhgBtfTF/+2s4XxcIFLloyDn0lRX4vEpgpPZltB/ENzX+q7Rttpu3bF9wyq13nbdum31ygLuZNL6Yv5q2arp/nlo/Qs=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FP4rTH10StOWa0eY4apsEVRQzvblTEgXEGxTaNIC/vqdFKiA6GGfp05WV771rUu+5IZj37OcGucQChqwzNr3GHcSa0WLQuYEmFPuMOwDdwRxBrWHrmNlkYP3W7RMp1nR/s27BWTZ5YKewxbRcwghvVQ0c7ptmvkCsaAEritdOY+gw7jATFQ0C0kHVNZNNERFx7Yd084WrPyblnmFkEts6ZJF2o7Umle0mRALxzBWq1V2ZWeDcGpYCJnGPw/dAZmBj7XqzTajJFBY3fmTrAsEPI9kSeAbN8aRz43LnQGdMiyiEHax3O9iIQOVDenjcjq90tK94HbYJEiWDcwCRgn26AdW9XkAMQvcTM2bBiEVM//bJEykgHVYE52YOXalGcfULgQ6YhhyrPMZNndYzzCBEBiBzMtzp6JdXda1ZOswxIxPgtDnx8u/4wMsBi9YgKvzfVo7apcDnqlU9QaI02HEiziNoaeGdYEJ8F03gVwOlXkMYULXXcrlgK65Ymcc0jtZbqvRpFPg4v806KA5W5BX7EVQvfXGg+XdfNSlft3uGc2a12+OvILBG6iSEDh0Tgxpa7fLk6FMh2i7A/9ufcTout+v93/VHx8aY+t6DObjUzwY9X7Z7ysy3pTHvykr9lAXj1zRnHXv79DELT62avXWEk82Tx8QzIvjaFCYXucmzfw8rvWiwqQBy97Tgo3a7x9vYvVGCpSZufZrEzb3w9xL/37cs5ZoVcb26PrXgNVfn5qt+/H89qVFBu7t09gvd91Ve/lM+PDlbu26velDJU3ngP+xbX/mB9F4DkTsl2oMOs1MW3YJi5/FTFmoq08SV2ehxIcLYEKrql1KO5xIyh11HdnD7RpZdQu1G2apUS/mmsV6C+VtVCyXzTaqFe18fi8yWxYnFBsBm1AVS0nudmx+Jkh8hwNzIdTjIJJKx7UfEJtY4EyHPctDEDAOw0DK8zxmaF4gIpysWMyKa8st8BkPN1qmF4g+64e1iYDwSJJNdCTJz0DogoLSbTXWXM41F7IUSxxHwjOzMc4yiKSyh0pkHStXyhuc+gsPFFHDD9zIg+xitkgKY/Dt19Ix4YmVcrIIQoG95DwY32Z3+m9fCOnjUuXAVUp1kM2EM1cM2ufzfd72Yd57+FrkUnW8ZFVFSMmWyfGvz2FRU5JOSpoY4eaee7rlLyHOABg/8DNOS5PGc2N6EH1/l8tbQepIdd/fJc4us1EcR0lHiwjZRijhDSmbpjEAEkmZ2wyDd2BGCmFcdKekrE8ip/ZjfpGYsYHAAnw5f5lkecEjYgBcPSI68tysL32hHIWUdROwFudsDU8+gBTjH99IxCHKT5of5WcVhJ+Jn8M6iCPzlG8IQdlUrdR9svlmNkggYalUwiA8BD8HcC74sTEtcspFyGkaRwK+/5NRElfRMCFBxESnqSWGQ9lNeIrNApxPpy8wibKnTz363289nSYjQEA+EDlN8NWN7aj5Z9MD6d4F/arehbZZrFu5cql0qN75drmVFuWIXfWL+avloE6nM179Aw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+j0fHSgL7S8dIQZEKtV0aOgHP1yJ6QLRNukNimgv/4mxVZA9HruDDNMtpvdZ3efPMkRR3Fke13OIRWEUS3ot/V/QrdesyY1u2K6Tr3imHazghoTuXQaqNmagouaoa4FnGcQUC4QFW3dNi2nYtbllpHperWWZzerttN41LV7SLkMLV2qpq6t4ohyL0/b1rOUegxxwj2KYuCewN6wO7j0pKeHCkx652iNMk+YduZCJJ5h4GoIGKIIVzGLjSNjy+co5N6QzCgSWQrvOUPe1t/3LpfL6rJWZenMsE3TNMyWIX1CTma/9M5BsRnCgE7Zen2MKKMEo4i8IQVqAGLOQq0bzVhKxDz+IrRlWKYKXYEVrmDLob904yNBju6HkbZAphxV+BxZRbBbmEIKFIN2dxu09V8/m+B67yhFlE9ZGvOd9d9BArqAiCUQVnhRWYHu5xH3tKtzBNgLKI4yThZwpWiSIAxc+53ClKwuCZfkC7mWj19bcfkjBcsA/81YjoxNrBK6sac7fTIDLv7PzDbntY5yj6IMOqi7vHkC/nSGfXZlOP7NaRBkZ24ymz60cwibzmtQ5bjf17tkLbn1vomNjZebJUzNGbo5HBrxpZ+l9ujxEiXnF+c9Njb71vziceyLh77Vf2PxSTLrHV/ej08HidUj58fnQXZTOznPOOWTg8Hd7VV4GvbOxNno7BXR0XVv9VgfL6KEHNeufev17Xoyvclah7wWX6/+nMb9lgXpoNFcXgwy+/XuwU67k4vJb3tRfzoQZ/jJdw7r2Liz++Ox/ZLy9kdNmzVsGwtJGGaTJ8CiWCp6BH3Nl/NC4nt5URYSVqa5q5cojeICqNA7apeSFi+TAkRCTw5zvfa7vtvs9nt+zXJbpuOfmI5p+WbXbLRaNbtnFxq0RrED8ZjRKVG5lMqu+fM9QBx7HGgIaWXBMjwHrn8TsY8E0gJ6Kw8HoxxGTKp4/PzcnK9eLKiFLn92BYR2g7FlS9eumLim12l3KiDdVu7mlnLfAiYJASXvit9cEpwL2YoXtMhEZFUXqEohkxdAqjTYs52ma3ASJxEooEbMwiyCajJP8sYYfP1vVxDmuZVwnLBUoMjKj9+X1e1+KxohfUKiHLgqqQdymLDnJrKKer6s27I26y7Cd7OQqFMmuypSgtdItj99kEWxpGTKR2EF8nLDrmEruLFbV5kvXBBcsr68rqXaSy3oFMN5QdWXarZYZPk4GkrnUhnekHJnGUPAmRSr1xF7BmqUIYwf3RUl6p3MpX0bXybmdCiQgFiSR8uXP3goDIGrh0IgSb/66StkK6Xsm4CV2Gc7juR7QiH+9smBPaz8pPm3/Fuy9KPwfbE28sg65etAEDpTK3UrvH7BDcxkWCJljKWbwfcF2Jd821g2ucQiJJsmmYCvv2hKn9o6wphlVAR9PTdsamaOU7wm4H04fQqT6/L7RbviX160fwaXQ6leMdJLX/LfzhWS0wWDru7zHEtbX8l3o0xOZxsa/Q5wS6Z7ltk3e06vVW+6XdMpZdpttequ45cN3Kqk88n82bLR093z0PkX</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AccountDelete_user20130918_1379459446852</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410334428590</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20140605_1401946767575</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B20FC18CB84D7BE05307991F0A7355</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>FAF58ADBF316904FE0401F0A079932B2</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b44627d5-7732-472b-b74e-aeac81a3f1ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_05016_AccountGet_FUNC_Portal:CS_User_Access_Standard_200_OK_P1" searchProperties="true" id="500f95c6-66a7-4d9f-b367-b3ec713c3dac"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="0a4b3a65-c75b-415f-aeaa-1e0d0e90744a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="639ab3fa-b680-4ade-854c-498e2b47d044"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult SAU" id="612f08a2-d3f8-4fd5-bf2b-3d049dea0d15"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


tC.setPropertyValue("LegalGuardian","");

//required for Child user Create

//tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FAU1"));
//tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Adult SAU Create" id="c70c4f3d-ad49-4447-b1d5-ab0b88a9be1d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )

log.info country;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");


def myTS = tP.getTestSuiteByName("User_Create_API")


myTC.setPropertyValue("Country",country);
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="7eaccae8-5437-4195-b21f-793df9d539f9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="65990f55-da71-4933-8111-7bcbacd83b97"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>02B2117B821D2CA4E05305991E0A62CB</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"00FE35B56AE86B7EE05305991F0ACDC7:D0281F5"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B2117B821C2CA4E05305991E0A62CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B2117B821C2CA4E05305991E0A62CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B211BCDD2D2C22E05305991E0ACC79</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>00FE35C6F7356B92E05305991F0A81AF</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B211BCDD2D2C22E05305991E0ACC79</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:00FE35C6F7356B92E05305991F0A81AF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMr4CwRWoApNMPBNCAiRD5mVLlhtQxpaNJRuSr1/JgAMEssw+udRunT590ZGuGIpC0+kwBiknMa2sopAyp7C2lCylTowYYQ5FETCHY2fU6d85ZlV30HaLUvF6LeUfowm+bmNbNeq+rdqNmq6iS7+h2oaJfMMya77ZFK6MZeBRxhHlLcXUDVvVm6qhj/WGY1mOXas2LfO3UnmGlAls4VLVlQ2pFWspc84TR9OWy2V1aVXjdKaZum5ok/7dCM8hQkr7ap1REShtb/xxNQAMYYirOI60K23P5ypgzojMKOJZCptYwalYuqY3NeETMDK7UMq9EHh0GhdLF9GYEoxC8o5kffrA53FQ6YSzOCV8Hp1MwtAlsAorrGLDpheKtk/tTKA9hilDKpsjY4M1hCmkQDFUnoZeS7k4r2vF1nGKKJvGacT2l3/HB2gOYZxAoLJtWhtq5wMeqVT7CrDjURxmjORwL4c1QRjYppuAz4eqPKQwJas7wsSArphkp+3SO1iuq9EjM2D8/zRopzlrkGcUZtD+xgeT7rg7/zm70e75AGlG52eO7pJBdNkqCOw6F4aytevlwVCWQ7TeAa8oudVfLp8Wt7Xrl4cfgdm4nT02h65vGXTl9fup9TR8NJedybfXt9/NZujNa0/ZxDXyfJyurOZz//tQv0wiK3D/DMNbd8nriyROxu+rRdC/dydaNrmZJotnz3/pPVrdwLUe+8xv+Dj8MXh+nf1YwWzok5mNH2ky+J7X7156NffOioIkMIfoV3/iYWvcR2D92qR7wH/ftj3zo8x/Bcy3SzkGXq9yI7qE+NdiJi0kUKeFq5NI8WEcKFfacpfUDicTckcCR/RwvdbNrmkYXbfXM3uma5rXes3Sa82mca13XLfR3IrMmsUBRTemUyJjScldj83XBHHkMKABpGoeZ0LpmPIFYg9xVPHoUByCmDIYx0KeSd2c2o2MpdM6MrI8sfz33AbLEvJ9H/MBHaSdKYd0T5MNfU+Th4BJQkAKt5xrJgabcVGLBcozHhrVHFUpZELaU6myjmlf1jRGoiQEyVSL4iALoZrMk6IyGlt/TRVhVlgJw0mcchQWB0I7md7hv20lhE9ApAOTKXVBdBOO3DHWNp/TeVu7eW/hO1lA5PkSZeUpwWsm+78+pkWOSTkqZWKYGVvu5Za/hDgCoH3BTzssTRkvyMlO9O1lLq4FISTtbX8XqLqoZnmeFR1t6LqlpQJeE7ppaCPAmdC5t3H8B6hWQmhnXSol64PIpX2fX8bndMQRh0jMX6VYnvGKGAGTrwhPHJzVuU+UvZCibhxW/JjNDcULSDL+8pGEHSz9hPlBfJZxGny06wjWThyRp3hEcEJnciUvlLcTs4FjAUuEFMbpLvgxgGPB941lkUsuXEyTn3E4/aciNa6lIIzjjHKvpxSGXd0tePK3BJwPp08whbSXbz3y3489lRQjgEG8EBkp8OWV7cj5p7Md7d4E/Szfje6labim27F35btuut2yKHvs2p/Mny07dTqc8fa/</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMr4CwRWoApNMPBNCAiRD5mVLlhtQxpaNJRuSr1/JgAMEssw+udRunT590ZGuGIpC0+kwBiknMa2sopAyp7C2lCylTowYYQ5FETCHY2fU6d85ZlV30HaLUvF6LeUfowm+bmNbNeq+rdqNmq6iS7+h2oaJfMMya77ZFK6MZeBRxhHlLcXUDVvVm6qhj/WGY1mOXas2LfO3UnmGlAls4VLVlQ2pFWspc84TR9OWy2V1aVXjdKaZum5ok/7dCM8hQkr7ap1REShtb/xxNQAMYYirOI60K23P5ypgzojMKOJZCptYwalYuqY3NeETMDK7UMq9EHh0GhdLF9GYEoxC8o5kffrA53FQ6YSzOCV8Hp1MwtAlsAorrGLDpheKtk/tTKA9hilDKpsjY4M1hCmkQDFUnoZeS7k4r2vF1nGKKJvGacT2l3/HB2gOYZxAoLJtWhtq5wMeqVT7CrDjURxmjORwL4c1QRjYppuAz4eqPKQwJas7wsSArphkp+3SO1iuq9EjM2D8/zRopzlrkGcUZtD+xgeT7rg7/zm70e75AGlG52eO7pJBdNkqCOw6F4aytevlwVCWQ7TeAa8oudVfLp8Wt7Xrl4cfgdm4nT02h65vGXTl9fup9TR8NJedybfXt9/NZujNa0/ZxDXyfJyurOZz//tQv0wiK3D/DMNbd8nriyROxu+rRdC/dydaNrmZJotnz3/pPVrdwLUe+8xv+Dj8MXh+nf1YwWzok5mNH2ky+J7X7156NffOioIkMIfoV3/iYWvcR2D92qR7wH/ftj3zo8x/Bcy3SzkGXq9yI7qE+NdiJi0kUKeFq5NI8WEcKFfacpfUDicTckcCR/RwvdbNrmkYXbfXM3uma5rXes3Sa82mca13XLfR3IrMmsUBRTemUyJjScldj83XBHHkMKABpGoeZ0LpmPIFYg9xVPHoUByCmDIYx0KeSd2c2o2MpdM6MrI8sfz33AbLEvJ9H/MBHaSdKYd0T5MNfU+Th4BJQkAKt5xrJgabcVGLBcozHhrVHFUpZELaU6myjmlf1jRGoiQEyVSL4iALoZrMk6IyGlt/TRVhVlgJw0mcchQWB0I7md7hv20lhE9ApAOTKXVBdBOO3DHWNp/TeVu7eW/hO1lA5PkSZeUpwWsm+78+pkWOSTkqZWKYGVvu5Za/hDgCoH3BTzssTRkvyMlO9O1lLq4FISTtbX8XqLqoZnmeFR1t6LqlpQJeE7ppaCPAmdC5t3H8B6hWQmhnXSol64PIpX2fX8bndMQRh0jMX6VYnvGKGAGTrwhPHJzVuU+UvZCibhxW/JjNDcULSDL+8pGEHSz9hPlBfJZxGny06wjWThyRp3hEcEJnciUvlLcTs4FjAUuEFMbpLvgxgGPB941lkUsuXEyTn3E4/aciNa6lIIzjjHKvpxSGXd0tePK3BJwPp08whbSXbz3y3489lRQjgEG8EBkp8OWV7cj5p7Md7d4E/Szfje6labim27F35btuut2yKHvs2p/Mny07dTqc8fa/</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbbuo4FH3vV0Tp41HIlVsESFxP6bSlpzCl7cvIOBviNjhp7HD7+rFDkwKFDh0JCXlne+21L152jaF5YLlNxiDmJKRKv1NX/wEDm+WKMdUcVCpqTrVqa8izsVaqTstTB8qWA0VV6TOWQJ8yjiivq5ZhOppR0czqyCy6juM61YJll19U5RFiJqCFS8FQldU8oMxNw9bVJKZuiBhhLkVzYC7H7rB5e+MKTxdlnNRGbcsyDRg3fM4jV9dxwQMMQYALOJzrNX3Pp+Yxd0hmFPEkho+YHqurH3uXy2VhaRfCeKZbhmHoRlUXPh4js0u1cZFtBq9Pp+F23UY0pASjgGyQJHUL3A89pRnMwphwf34C2tRNQ0JrsMIaNh16qeqfAVJ2ZyLtkYwZ0piPzAzsAaYQA8Wg/P3Qr6uX53Vwu3cUI8qmYTxnB+ufUQK6gCCMwNNYllnG7nzEI+Vq1AC7fYqDhJEF3MkxiRAGptzHMCWrG8LE8HlMSduvrJj4kWzKAP+kLTV9l6ugrh+pTofMgPH/07Pdfm1RHlGQQAMbLcS47ffbL0+r50mnZd77yyC87i1n9ZTCrvOWVN7uj/XhsOaz9bGJVt7uFhv0Pni5ecPo9+PrDSku6fCl1fM7vjew/VG1zePprDW/3TwP/4yf15MBQ9NSz2ao2wwfTafi3cWgl69t44JE/V/B2Fy9vXRv1tdj/XbYujefiqXN6vUq+atZ3uBepxVd2cF770/JuhvcboJ2NYmd1tvA3Kw7wWA8Gf8qXVVf/crw4rceRO3R8tHpLdaj+8pYxK5/5rSbw74xk4RhMnkFzLOlHI9+R+mJfiH+vbxIC/G0aerqRlKjGAfK1YbcJaXFTYQAEc8VzdyuDaPXtYvtUq9sF0utqtU1irZRrFbNntGsmM1epkFbFgcU2yGdEhlLqux2fr4niOcuA+pBrC3CBPvA1G8QO4gjpU8fxOEIKYNRKFQ8WXmTjb+xN2gGpmVBebZ+L1aspaUqdyEf0EHcnHKI96W7sifdD4BJREDquxxwJiaccVGLd7RIeGAWFqhAIRE3QCxF2LWcSlFnZB4FIJnq89BLAihEfpRWRmfbf0tDmKVWwnAUxhwFZnr+TqZ3+C2rhPDxiHRgMqUWiG7CkavIzvI5mbdl7uadwTcTj8hjJsrKY4K3TPY/fU6LHJN8VPLEMDMz7vmWH0IcAdC/4acfliaP5y3ITvTsehU3htCTRtbfd1R4LySLRZJ2tCy1MhbwupBMUx8CToTgrUfhG1A9h9DPum9y1geRc/s+v4T7dMgRh7mYPyVdnvHYGAKTj42+ODirc18yeyFF3Tis+DFbOxBvEsn422cLdrH0E+Z78bcMY++zXUewduKIPMULgxM6kyt5s6xPzAYOBSwRUhjGu+DHAI4F3zfmRc65cDFNk4TD6S+K1Li6ijAOE8r7HTU17OpuypOvI3A/nb7ApNr+cVmv2MnL+un2ZigUcI7U3Jf8t7NG0nHBoMo3Qcqlrq7E21MEp7Mdnf8g+FXqW8VSs9MttcrdXalvd9rlvIB7mTS+mL9admp6eB4a/wI=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AccountDelete_user20130918_1379459446852</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410334462562</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20140819_1408463088042</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B211BCDD2E2C22E05305991E0ACC79</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>00FE35C6F7366B92E05305991F0A81AF</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5da56a8d-11f7-4984-99b2-aa2ad88ae0d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e195b081-7276-40fb-8077-075dee783c29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_05017_AccountGet_FUNC_Portal:CSl_User_Access_Full_200_OK_P1" searchProperties="true" id="4319a9f5-3f9a-4feb-9e08-af783cf1bb08"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="0922aae7-abc5-4a75-a06c-81716d52137f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="5ec39e67-1681-426b-88d3-ac68515a5bc5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="6052ffe8-b378-4b3e-aed4-75e8d9eb20e9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="d50d909a-4c0e-4f6e-bee8-99893e8ca75e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CCD4C337A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"00FE35CDB8F1379EE05307991F0A9FE6:FD72D1A3"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CCD4C237A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CCD4C237A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B50FBF6B7CE05305991F0A6AA3</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E84B3543D1AE867EE0401F0A07997C1E</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B50FBF6B7CE05305991F0A6AA3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E84B3543D1AE867EE0401F0A07997C1E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdU+I8FL73V3Tq5U5p2lKgHWCmUlyrKAyIrt44IQ0l2qbYpID++k2KRUD0Zd+rTk7Px3M+8pw0GUxi0/UYwxknKVUCv6U+WdOpXTVspE0mdlWrWghrDoJQc4zQATVjUq+BhqoEjOU4oIxDyluqCQxLM4AGnFtQd23btexKrWE9qsodzphwLVQqQFVWSUyZW4RtqXlG3RQywlwKE8xcjtyRd91zhaYLS0xqu7lGWQTM2jPO566uo0qIEY5jVEFpojf1HZ1myNwRiSjkeYY/YoaspX7YLpfLytKqpFmkmwAAHTi60AkZiU7V9klpjMOATtP1uQNpSgmCMXmHEtQ15rM0VLw4SjPCZ8k3rg3dANK1hldIQ0aVnqr6Z4AC3ZGedkBmDGpsBo3S2RBPcYYpwsp4GLTU0+M6uLa9zSBl0zRL2N753yBhusBxOsehxsrMSnTHezxQrnYTIzegKM4ZWeAbOSZziDBTBhmeklWPMDF8IVOK9isrVk4YRv/Skqa+jVPA1g9UxicRZvz/9Gu7V2svdzDOcfv64X40e73oT5PgvfsIgsfB5fPl1dvZLHloFRC2ldegNq3+OO8P6mauPowi36n27gfQc+7yx0H3PR3w8fD5+n5ee1lkEx55JvJ7fv6cC6O7gd9h70u9H8Y3Z797fj+aAuvq6td7Pwkff/f6J9C7G3aeL6KHyegqejivd8Cft2x8Z/YaEN3EUf91qUfzYDL2XnqvTmjds2s6mV2MvMukZ4DxzDbHqzqm/nA2Guon/YcXFNmpCXq/kvu8yqY2an3mtJ3DrrCkg1E+ecaIl0c5GoGvnIt+Qf4ztUgJCbVpoerOJT8xjilX29JK0oqbC/IhoSuauT53G9Uzq+qArm3Vfc+ud0EVGOfAA3XHqXdMUPLPGsUexE5Kp0TGkgy7np+fAaLEZZiGONMWaY5mmKk/ePQhh0pAh+JipJTh21QweNfodv0z0PAadvesZp8D2/BMxzh3LM8WwOuqcpPyPu1n3pTjbIe9DbDD3kOMyJxgSfFyzpkYdMZFSV7hIuexUVnACsW5WAKZ5GHXrDZsnZFkHmMJWE/SMI9xZT6bFwXS2fprahCxQjrs3hb379v09v+VlRA6IZEKTOZyhkU38YE1ZJaJfJ+wtZ1w6d7LQyKvmSgrzwhaI9n99Tktckw2oyIyeuqMnowS90b9aPOvlvoPoPT9emwChQuyFbbcp2JFCBJpl918hZXXSr5Y5EX/6pIgM+FeN3RQ10cY5YLl3m7TF0z1jQv9qAWzQb0XeSPfxZfzGR1xyHEipk0pjke8LkaYyddFIG7L6tiny05IUTeOV/yQrBOLR4hE/OM7BblI6gnxQHyWaRZ+tuuAr604Ik/xpOCERvIk18nbN0OBUuGWCP5Ls23nhxwcCr4r3BR5g4WLaZrkHH//R5HE1lIhQmlOeeCrhWCbbAuc/G2O3U+lL24KQv/Y0Cv27Yb+c90bCdpLoLrRJf+trJFiXBAWVowUWFrqSjw2RXAabZH7B8Av/G5XLd+omY1avbvL70Z3U8CdTNpfxF8lWzXdvw/tvw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU9s4FH7vr/C4jx3Ht4QkHpKZXMjWFCjEKdv2ZUeRjx2BLRlLdgK/fiUHmyQEli7DTEbHR9/5zkWfdMpRmjjeiHPIBWFU86cD/R/HWXb6DnYMy7XBaCPHMpauExn9tnUSYhfboXuiaz7nBfiUC0TFQHcsu21YPcPuL+yO1257Hafl2vZvXbuFnEto6dKydG2TJpR7VdiBXuTUY4gT7lGUAvcE9oLR5YUnPT1Uc9KHp1uWVcB8uBIi80wTt0LAkCS4hVlqnpp7Pqch9wISUySKHJ5jhnygP+9dr9ettdtieWw6lmWZVt+UPiEn8Wd9+KneDKFPI7ZdTxBllGCUkCekSF2CWLFQGyUxy4lYpW9A26ZtKWgDNtjAdpt+1s2XABW7DyLtkcw5MvgK2TXYHCLIgWLQfsz9gf75Yx3c7l3kiPKI5Sk/WP8ZJaAlJCyD0OB1ZjW7jyMeKdfwFLDnU5wUnJRwpcYkQxi4dp1DRDYXhMvhC7lWtV/bcPlP6ikD/CdtOTV3uUrq5pHqTEkMXPyfnu32a4tyi5ICht34Nphc+rQt8Dmxrid8YZ2v3PAqZjeDisKu85ZU0+7n9eGwNrP1vGkc/G3/OOt8oeVl9/ZXOhNRchcHybz89v2RfvlGyZevN+vYyS0onXHSL+5YdPbzmkw2Beed/O5rOY3dmX+3Ntu/55/SUdg9/01RPH84M524g+jNbBzfRPFTcL66f7qF2+4Nmy6hFzw8kkm7tzhBM977+RRuRguf3z+h+DqaP93/6v5Vdj49/Lq4pIusF/DxMrvoZ7PwZvCS024O+8ZaEoJieQdY1Es1Hv5Um8l+IfG+vCgLCY2ocvUypVFcABX6UO1S0uIVUoBI6MlmbteWNTtzO+OONRvPTsbdyZnVca1Ov2/PrNHJaOTWGrRlcUBxwmhEVCylstv5eZ8gTj0ONITcKFmBV8D1dxCnSCDNp3N5OBjlsGBSxaHfz8WdmzL6mNsuJhGxsvuCLR1du2LiO/2ejyIB+b509/akew6YZASUvqsB53LCuZC1eEBlIRK7VaIWhULeALkSYc9p9zomJ2mWgGJqpiwsEmhlq6yqjMm3v46BMK+shOOM5QIldnX+3kzv8FtdCekTEuXAVUpjkN2EI1dRu87nzbwdezfvGn5UhEQdM1lWkRO8ZbL/6WVa1Jg0o9Ikhrldc2+2/CHEEQDzHX7mYWmaeGFJdqLX16u8MaSeDOv+PqDWQ6soy6LqaFdpZS7hTSmZthkALqTgPS7YPVCzgTA/dN80rA8iN/Z9foVY0UAgAamcP61afuCxEQBXjw1fHpzNR18yeyFl3QRsxDHbJJFvEsX43WcL9rDyk+Zr+bNmefjSriNYO3FknvKFIQiN1UrdLI9vzAZmEpZIKWT5LvgxgGPB941NkRsuQk7TshDw9hdNadxARxizggp/qleGXd2teIrHDLwXp1cwlbY/X9Yb/uZl/fPyIpAKmCK98SX/7WyQalww6OpNUHEZ6Bv59pTBabyj888EX0v9ZDJtTxy3O+pVUt/dSv1Y/jUF3Mtk+Mr82rJT08PzMPwX</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbU+JKEH7fX5GKj1shFwKBlFAFBDUKugK64svWMGlgNJnBzATC+fVnEgwCooc9T6np9OXry3w95xxFoeW2OIdYEEYV32uof0xsVSZTe6LZjmlptoltrYYcrCEUmHWnVi9PJkhVfM4T8CkXiIqGahlmWTMNzaiPDMetVNxyrWTVKs+q8ggxl66lSslQlTQKKXfzsA01ianLECfcpSgC7grsDlv9nis1XVRgUpvnG5R5wLg5F2Lh6jouBYAhDHEJs0g/1/d0zgPuDsmMIpHE8B4z4A313Xa1WpVW5RKLZ7plGIZu1HWpE3AyO1ObPwpjCHw6ZZtzB1FGCUYh+QdloPog5ixQWuGMxUTMoy9cm7ppZK41SLGGTZueqfpHgBzdiZ72QMYcaXyOzMLZAKYQA8WgPAz8hnp2Wgc3tqMYUT5lccQPzn8HCegSQraAQONFZgW60z0eKVfzHLDrUxwmnCzhNhuTBcLAlV8xTEnaI1wOX8CVvP1KyosJA/w3LTnXd3FK2PqRynhkBlz8n37t9mrj5RGFCTRnych6ZT/rT3b/GqqXz/31E621446/bDVyCLvKG1DbVr+fDwd1O1fvRitzuKYmqk/vf/9Ow8GN16n0Lvx2/za8qE6sYbv71qMv7OpxtOjcBMO6X+9PXj1H/32d9sYPV7OK9Xo/qNO1165e//xx+RpZ7ei657wOBm931UXl2YeUXkTz9P6hc23B47yD+qYxGT+Nx+PyjUivfrYvx883lI+v2+vkIlzdPr4YL2bSfRv9sNlzf7q+W/r3mPgsnHqwanzktJvDvrCgg2EyeQEsimM2Gr6nXMh+IfE9tWQSEmjTXNVdZPzEBVChNjOrjFbcRJIPCVzZzM25W7Pb5Ypd9sxWt1Z1ul3DNswLo2U49brTMbsF/2xQHEDsMDolWayMYTfz8z1AHLkcaACxtmQJngNXv/HoIYEUnw7kxWCUw4hJBndqFatseF7ZbtvlWrXitI1Wze5YZtszO5ZTVpVbJu7oXdyaCoj32Ns09th7AJgsCGQUn805l4POhSzJG1omIjRLS1SikMglEGc87Fp2raJzEi1CyADrEQuSEEqL+SIvkM43X0tDmOfSQXeU378v0zv8V1RC6gQkU+BZLm2Q3YQja8gqEvk64fJuwoX7VhKQ7JrJsoqY4A2S/V8f05KNyXZUZEZ/OsM/ZoF7q36y+WdL/RtQ+mE9toGCJdkJW+xTuSIkiTSLbr6h0lspWS6TvH9ORpCxdK+buuHoQ8CJZLn1iL0C1bcu9JMWzBb1QeStfB9fIuZ0KJCASE6bkh9PeF0MgWevC1/elvTUp8teSFk3Aak4JuuE8hGSIf72nYJdnOlJ8S/5WbE4+GjXEV87cWSe8kkhCJ1lp2ydrL8YCsykWyL5j8W7zo85OBZ8X7gt8haLkNM0SQR8/UfJiK2hIoxZQoXvqblgl2xznGK9APdD6ZObnNDfN3TKv9zQT/3eUNJehNStLvlvZY3k44JBWnGSY2moqXxsyuB0tkPu7wCP83vV+o7f9zNpfhJ/luzU9PA+NP8F</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AccountDelete_user20130918_1379459446852</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463091478</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20131009_1381305337201</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B50FC06B7CE05305991F0A6AA3</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E84B3543D1AF867EE0401F0A07997C1E</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5da56a8d-11f7-4984-99b2-aa2ad88ae0d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06001_AccountGet_FUNC_Portal:CS_User_Status_as_Other_200_OK_P1" searchProperties="true" id="89dbceab-dcab-4af9-bb1b-5acf02f5c074"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="ceb1cff4-47b9-45bf-8c34-06c8734fc039"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="75639e78-d1c1-41c2-99ed-8af6337c4e73"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def audience = context.expand( '${#TestSuite#audience}' )
tP.setPropertyValue("audience",audience);

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update User Status" id="a2923b86-4f78-42ee-ab55-65d84f8e4560"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","other");
myTC.setPropertyValue("USER_OID",tC.getPropertyValue("USER_OID1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Portal_CS" id="ce2364ec-af9c-4baa-9342-743393c43cd2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="9491ebb2-546b-4be0-8fe0-b50045671bfb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35BE9F336B84E05305991F0AFAB5</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"00FE35BA28AE37A0E05307991F0A50EB:4F0BB18C"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35BE9F326B84E05305991F0AFAB5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35BE9F326B84E05305991F0AFAB5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B50FD56B7CE05305991F0A6AA3</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B50FD56B7CE05305991F0A6AA3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I4FH2fXxGlj6OQBEIbooLEZze0hW6h3c68rFznAh4SO8ROgP76sUOTAqXdzkpIyDfX55774WNfchSFVa/NOSSCMKr5vab+b9W1a3ZQC4zG7KJuOM+2Y7i45hjnFw1Uc2euW2/UdM3nPAWfcoGoaOpVS3pZrmE3pnbdcxyv7lTcC+unrj1CwiW0dKlYuraJQsq9PGxTTxPqMcQJ9yiKgHsCe5P27Y0nPT1UcNJblzuWecCktRAi9kwTVwLAEIa4gllkXpoHPpcB9yZkTpFIE3iNGfCm/rp3vV5X1rUKS+Zm1bIs02qY0ifgZH6mt74VmyHw6Yzt1l1EGSUYheQFKVK3IBYs0NrhnCVELKIPoG3TthS0ARtsYNuhZ7r5FiBn90WkA5IJRwZfILsAu4cZJEAxaA/3flM/+1oHd3unCaJ8xpKIH63/jBLQDEIWQ2DwIrOC3dcRT5SrdQnY8ykOU04yGKkxiREGrt0lMCObG8Ll8AVcy9uvbbj8kWLKAP9JWy7Nfa6SunmiOj0yBy7+T8/2+7VDeURhCi3n6aEzroqu24cr7vefre0dyoj593hgNXMK+847UmW7X9fHw1rO1usmmPwcTsePq77pz/DViM+evk8SPsyi8fQ5OF//deUPL4a4/09vUm2PliL+Psm6Tn96PYD5NOq65tNwSYd30TppA/mGnfmgTd1uN8xGzpavrFHPH7kv/st6NZ5w5lrp9ebHbHvzOL6tJS/XD+RHtog235dd5+rHo7NFV7+c+47ZeFo0WPhtBfHtwxMiN71kVZvPgyuXNd9y2s/h0FhIwiR9/gVYFEs1Hn5PG8h+IfG5vCgLCYxZ7urFSqO4ACr0ltqlpMVLpQCRwJPN3K0ta9Cv1Tt1a9Crn3cuun2rXrPqjYY9sNrn7Xat0KAdiyOKXUZnRMVSKrubn88J4sjjQANIjIyleAFc/wSxhwTSfHovDwejHKZMqri9bCxD5sRpvbrK7MgOXUw30dLanOvaiIkxHSftmYDkULvdA+2+B0xiAkrg1YRzOeJcyGKsUJaK0K5kqEIhlVdAolTYqzpu3eQkikNQVM2IBWkIlXgR56Ux+e6/aiDMcyvhOGaJQKGdH8AP8zv+VpRC+gREOXCVUgdkO+HEXeQU+XyYd9Xez7uAb6cBUedM1lUkBO+YHH56Gxc1J+WslIlhbhfcyy1/CHECwPyEn3lcmjJekJG96MX9Kq8MKSitor8rVFlV0ixL845eKLFMJLwpNdM2J4BTqXjbKVsCNUsI80sXTsn6KHJpP+SXigWdCCQgkvOn5csvvDYmwNVrw5cnZ/PVp8xBSFk3ARtxytYN5aNEMf703YI9rPyk+U7+rVkSvLXrBNZeHJmnfGIIQudqpa6W7QezgZmEJVILWbIPfgrgVPBDY1nkkouQ0/ScCvj4i6ZErqkjjFlKhd/Tc8O+8OY8xTYG783pHUwu7q+39YZ/eFs/3d5MpARGSC99yX87GyQfFwy6ehTkXJr6Rj4+ZXA63xP6V4IntL7fGNSq5x3X2df6QbtTLwt4kEnrnfm9Za+mx+eh9Rs=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463094128</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B50FD66B7CE05305991F0A6AA3</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99c61175-ca6e-4fe9-95b0-5f3d02f2072d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c263e60-96bd-4c9c-9c64-ad6f469cfc89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce1f47c6-8e3d-4c44-9320-d57e0cc4e097</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91fbcd9f-2e93-4771-8e59-1e4d7858798e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab628a1f-cf19-4492-9adb-a8f001acc242</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c63f612e-da80-43e7-8d92-f3f37b6270e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d4c48c67-669c-4e03-917d-676f15d21653</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06002_AccountGet_FUNC_Portal:CS_User_Status_as_Deleted_200_OK_P1" searchProperties="true" id="ff0966df-d336-4152-983c-4d6f69036d00"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="f9725b1e-a830-4c72-b0e4-593c2865771a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="5c242821-95b5-4f05-a367-ce99dcf32580"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def audience = context.expand( '${#TestSuite#audience}' )
tP.setPropertyValue("audience",audience);

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update User Status" id="edfa6722-8537-4cea-86c9-dd03ee8a3c3f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","deleted");
myTC.setPropertyValue("USER_OID",tC.getPropertyValue("USER_OID1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set node CS" id="0be4cf00-6dc9-442e-b876-6a9b234fb208"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="ae5522a1-4857-46bb-97d7-e32c4f4a3ee5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CC6BAD6B80E05305991F0A0CC0</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"00FE35B4F30E379CE05307991F0A189A:7E47E2D9"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CC6BAC6B80E05305991F0A0CC0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CC6BAC6B80E05305991F0A0CC0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B50FEB6B7CE05305991F0A6AA3</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B50FEB6B7CE05305991F0A6AA3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH7fv6JTH/eUtkALdIQZbioH3SqgHnk5E9MFRNsEk5Tbrz9JsRUQPXpmYDpZXfnWty79klOB4qgYNIUALgmjRq9TN/9xKiE8+aXQQiVwrHKp5lvVilOxHDesYK9ac9wqmEZPiAR6VEhEZd0sOm7ZcqqWWxu5XlAuB16l4JdrY9O4By4UtHIpOKaxiiMqgjRs3Uw4DRgSRAQUxSACiYNh8+oyUJ4ByjiZjdMtyzQgb8yknAe2jQshYIgiXMAstk/tPZ/TUARDMqVIJhzeYoaibr7tXS6XhWWpwPjULjqOYzs1W/mEgkxPzMavbDOEPTph23UbUUYJRhHZIE3qCuSMhUYzmjJO5Cz+BNq1XUdDW7DCFnbL9MS03wOk7L6JtEeSC2SJGXIzsAFMgAPFYNwNenXz5Hsd3O4dcUTFhPFYHKx/RgnoAiI2h9ASWWYZu+8jHilX4xRw0KM4SgRZwB89JnOEQRg3HCZkdUmEGr5QGGn7jZVQP5JNGeCftOXU3uWqqNtHqtMhUxDy//Rst19blHsUJdDgmzjyyr1RKy7hh/VfPQrd4viiVSOP03pKYdd5Sypv99v6cFjz2Xrb1IJYvvZvfl9tMBsP1499+hxf2Lfh9Xjqr90xPWdTUttcrR42s8rLRRKdi9pyPCol8V01Hice9bv+aPNSifiwOvgV+6g/7OP+cInbk7F7M+lO5UNFIT508eSqvUFJqbSh1YtR/3nRKVVwPFtVzwcDaD507rxofe/N1s94xH6vxwP/V/fudl3mtXDecT30fEsG94/195x2c9g3ZpIwTJ6eActsqcej1zHOVL+Q/FpetIWE1iR1DeZao4QEKs2G3qWlJUiUAJEwUM3crh3nrFvyWp56tPxWpd11vJLj1WrumdP0m81SpkFbFgcU24xOiI6lVXY7P18TxHEggIbArQVL8AyE+QViB0lk9OhAfRyMChgxpeLukji+iFxK5Lpcdlcbz+eYreSLafxh8ppe8+ZEAt+X7uqedA8AkzkBre96wIWacCFVLV7RIpGRW1igAoVEnQBci3BQLFc9W5B4HoFmascsTCIozGfztDK22D6LFsIitRKB54xLFLnp9/dpeofvskoon5BoB6FTaoHqJhw5ispZPp/mXXR3887gm0lI9Gemyio5wVsm+6/ep0WPST4qeWJYuBn3fMsPIY4A2F/wsw9Lk8cLF2Qnena8qhND6Ukj6+8rKrwWksUiSTta0VrJFbytJNO1h4ATJXjrEXsBaucQ9rfOm5z1QeTcvs8vkTM6lEhCrObPSJffuGwMQejLRk99OKvv3mT2Qqq6SVjJY7Z2pO4kmvGX1xYcYO2nzDfqsWQ8fG/XEaydOCpPdcOQhE71Sp8s609mAzMFS5QUMr4LfgzgWPB9Y17knItU0/SUSPj8jaE1rm4ijFlCZa9jpoZd3U15yvUcgnenDzCptr8d1ivx6WH999XlUClgjMzcl/y3s0XSccHqqqr8Uy51c6Xunio4ne7o/BvBj1LfbvutpvpXnV2pd9ptJy/gXiaND+aPlp2aHn4PjX8B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463096901</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B50FEC6B7CE05305991F0A6AA3</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99c61175-ca6e-4fe9-95b0-5f3d02f2072d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c263e60-96bd-4c9c-9c64-ad6f469cfc89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce1f47c6-8e3d-4c44-9320-d57e0cc4e097</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91fbcd9f-2e93-4771-8e59-1e4d7858798e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab628a1f-cf19-4492-9adb-a8f001acc242</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c63f612e-da80-43e7-8d92-f3f37b6270e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d4c48c67-669c-4e03-917d-676f15d21653</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06003_AccountGet_FUNC_Portal:CS_User_Status_as_BlockedEULA_200_OK_P1" searchProperties="true" id="f8cd1cea-5c60-427d-99f9-79593912ea0d"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="e7877544-7294-492f-ab10-4b208163684c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="1fb84193-965f-4735-99d3-692e893b01a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def audience = context.expand( '${#TestSuite#audience}' )
tP.setPropertyValue("audience",audience);

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update User Status" id="43692a05-2190-4909-a190-ac804d791e00"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","blocked:tou");
myTC.setPropertyValue("USER_OID",tC.getPropertyValue("USER_OID1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="b9f8097e-d7a3-49c4-8922-6656b9fb69ff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="fde21e52-82d1-4dd5-a440-866135cc046d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35BA28B537A0E05307991F0A50EB</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"00FE35B3DFC06B78E05305991F0ABA86:F0F9724B"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35BA28B437A0E05307991F0A50EB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35BA28B437A0E05307991F0A50EB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35CCD4D137A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35CCD4D137A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FH73V3TqowNtoWygI8xwc06ViwLqdr+cCekqRNsEmpTbr99JoRUQPXocZ5isrnzrW5d8yTVHYVBwGpxDJAijmtuu6f8WJ55dxn4lZ1XBz9kFVMghHyo5DFCpFieoVPWQrrmcx+BSLhAVNb1gWnbOVFvGVsmxS45p5u1S5Y+uPUHEJbR0yZu6tg4Dyp0kbE2PI+owxAl3KAqBOwI7o0av60hPB6Wc9Pr1jmUSMKrPhJg7hoHzHmAIApzHLDSujSOfa487IzKlSMQR7GN6vKbv965Wq/yqmGfR1CiYpmmYVUP6eJxML/X6RboZPJf6bLduIcoowSggW6RI9UDMmKc1gimLiJiFn0BbhmUq6ByscQ5bNr3UjfcACbtvIh2RjDjK8RmyUrAh+BABxaA9Dt2afvm9Du72jiNEuc+ikJ+sf0YJ6BICNgcvx9PMUnbfRzxTrvo1YMelOIg5WUJfjckcYeDafQQ+WXcJl8PncS1pv7bm8p+kUwb4J225Ng65SurGmeq0yRS4+D89O+zXDuUJBTHUn0fWK/P+vIh1YwQvzWV1tLEG95bf8ju1hMKh845U1u79+nRYs9nabxo8jYdXm058NTDxxmvcbcfd1+fFw/Cxb/Q3TetuOBnePrlvrcdVxfo9e8PPN53SU4eXB1F/cbXpXi2FuVm8LG4D2zQuhDuxr7Y28oIOm3gP/WG1MIViO5i5mzvciAqz7vZh3LgvtZtbUe79CvCDWN43S9T+JVeh0UNtEgQteLu9GcYXhSvRW1TH9i1pthfP6+CfQaf2ntNhDsfGVBJG8eQVsEiXajzctnYj+4XE1/KiLMTL+YmrM1caxQVQodfVLiUtTiwFiHiObOZubZo3nWKp1WrbbatYblQ6ZqlolqtV68ZsNOVfqkE7FicUW4z6RMVSKrubn68J4tDhQD2IcksW4xlw/QvENhJIc+lQHg5GOYyZVHErXKCt6ZPXeYUE8TKevXK0WVXYRtf6TAzoIGr4AqJj6a4cSfcQMJkTUPquBpzLCedC1mKBlrEIrPwS5SnE8gaIlAg7BbtSMjgJ5wEopkbIvDiA/Hw2Typj8N2v1CLMEyvheM4igQIrOX+fpnf6La2E9PGIcuAqpSbIbsKHq8h2Smk+n+ZdsA7zTuEbsUfUMZNlFRHBOybHn96nRY1JNipZYphbKfdsyw8hzgAYX/AzTkuTxfOW5CB6er3KG0PqST3t7wLlF/l4uYyTjpaVVkYS3pCSaRkjwLEUvM2YvQE1MgjjW/dNxvokcmY/5heLGR0JJCCU86cly288NkbA1WPDlQdn/d2XzFFIWTcBa3HO1grkm0Qx/vLZgh2s/KT5Xv6sWOS9t+sM1kEcmad8YQhCp2qlbpbNJ7OBmYQlUgpZdAh+DuBc8GNjVuSMi5DTNIkFfP5FUxpX0xHGLKbCbeuJ4VB3E55iMwfn3ekDTKLt+8t6zT+9rH/3uiOpgCHSM1/y3845kowLBl29CRIuNX0t354yOJ0e6Pye4EepbzYKlaYtpd48lPqS2cmk/jiT+gfzR8tBTU/PQ/0v</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463099690</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35CCD4D237A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99c61175-ca6e-4fe9-95b0-5f3d02f2072d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c263e60-96bd-4c9c-9c64-ad6f469cfc89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce1f47c6-8e3d-4c44-9320-d57e0cc4e097</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91fbcd9f-2e93-4771-8e59-1e4d7858798e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab628a1f-cf19-4492-9adb-a8f001acc242</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c63f612e-da80-43e7-8d92-f3f37b6270e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d4c48c67-669c-4e03-917d-676f15d21653</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06008_AccountGet_FUNC_Portal:CS_Account_Status_as_Suspended_200_OK_P1" searchProperties="true" id="086b74a9-914a-4feb-a8f2-936591e6d368"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="32c46fa3-d3df-437e-a8fd-1b83767a8628"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="0c2ec3a7-4d3c-448d-b9ab-cbd9f4077aaf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="298018e6-e280-4934-bcd6-d1324eb6b64f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","suspended");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="6ddbba22-5ac3-44a0-a9e7-49c4004392d3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="6c7d2009-3659-4842-bd92-ecf9eb04164f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35B4F315379CE05307991F0A189A</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"00FDFAE81B8B450AE05307991F0AFA42:D466448"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35B4F314379CE05307991F0A189A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35B4F314379CE05307991F0A189A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35CCD4E737A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35CCD4E737A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbTus4FH3nK6LweJTmTpqIVgqUMjlDCyJcz8vIOLuNIXVK7KSFrx87JaEthYFBSJV3ttde++JlHzI0y6wgZAwKTnKqRIOe+o8Htm+bhqcduMmB5vjI03x8gDTLtvABeN7EMjxViRgrIaKMI8p7qmWYjmZ0NdO/Mt3AcQPD7pi+80dVbqBgAlq4dAxVWc4yyoI6bE8tCxrkiBEWUDQDFnAcxOHoLBCeAWo4qf3DFcs6YNFPOZ8Huo47CWDIMtzB+Uw/1Dd8DhMWxGRKES8LeIuZsJ76tnexWHQWdicvprplGIZu+LrwSRiZ7qv9vWYzJBGd5Kv1MaI5JRhl5BVJUiPgaZ4oYTbNC8LT2SfQpm4aElqDJdaw6dB9VX8PULP7JtIGyYIhjaXIbMAuYQIFUAzK9WXUU/e/18HV3qsCUTbJixnbWv+MEtAKsnwOicaazBp230fcUa7+IeAgojgrGalgLMdkjjAw5aKACVmeESaGL2FK3X5lycQ/aaYM8E/acqivcxXU9R3VGZApMP5/erberxXKDcpK6A+mxvLZOjWz6a8Hp2vcwODUN1BizX5HvZrCuvOKVNvut/X2sLaz9baJ35qPqW9fxN79w8EipxkZ/9KfRvorS8thEp9l7pNzE97Y7HFwR/WJe3kUh8lkeevac/faLU+rEfqrm98bXTqI9ty7Zxgk3agcpl48uq3KP2M2OKoQ8S4yfXxuni5elzT7XfhP45Nh9/66DCfGeX5+cD9K6MiIrdR2WHd4XRGeRXslY3+PX6rpNHmM78MQFYj13nNaz2HT2EhCXD48AubNUo5HNFCGol+Ify0v0kISbVK7BnOpUYwD5Wpf7pLSEpRCgEgSiGau1oYxPLHd4+OBc+LZXtg9MVzb8HzfHBrhkfhrNGjFYovicU4nRMaSKruan68J4lnAgCZQaFVe4hSY+gXiAHGkRPRSHI6cMrjKhYovgaZk8pQ8uaZlpm7h24sHlyymTFXGOT+n50U44VBsSnd3Q7ovAZM5AanvcsCZmHDGRS2eUVXyzOxUqEOhFDdAIUU4sJyuqzMym2cgmeqzPCkz6MzTeV0Zna1+LQ1hVlsJw/O84Cgz6/P3aXrb35pKCJ+ESAcmUzoC0U34cBU5gdvk82nelrmedwMflgmRx0yUlRcEr5hsfnqfFjkm7ai0iWFmNtzbLT+E2AGgf8FP3y5NGy+pyFr05noVN4bQk37T32fUee6UVVXWHfWkVhYCXheSaeox4FII3stV/gRUbyH0b903LeutyK19k1/JUxpzxGEm5k+pl994bMTA5GMjEgdn+d2XzEZIUTcOS77LdpyJN4lk/OWzBQdY+gnzhfhZ5EXy3q4dWGtxRJ7ihcEJncqVvFlePpkNnAtYIqQwL9bBdwHsCr5pbIvccuFimh5KDp9/UaTG9VSEcV5SHg3U2rCuuzVP/jKH4N3pA0yt7W+X9ZJ9elnfjc5ioYAzpLa+5L+dNVKPCwZVvglqLj11Kd6eIjidrun8G8GPUn/kDG3TsT3/eF3qza4ftgXcyKT/wfzRslbT7fPQ/xc=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463102455</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35CCD4E837A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06009_AccountGet_FUNC_Portal:CS_Account_Status_as_Pending_200_OK_P1" searchProperties="true" id="6e4ee342-191e-4244-908e-a67c9bb1664b"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="2c86748c-9672-4cab-9f2b-f414f4871aca"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="c30e65c0-a6a6-42ac-81f6-883ac86b9e04"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="997d566a-d022-4ce0-91dc-06e6b7d12131"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","pending");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="39011d14-7743-4210-af67-7c905247673f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="bb997e57-cf13-4bd8-839d-290330fbe213"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35BE9F4D6B84E05305991F0AFAB5</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"00FE35B56AFD6B7EE05305991F0ACDC7:3ED869DC"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35BE9F4C6B84E05305991F0AFAB5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35BE9F4C6B84E05305991F0AFAB5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35CCD4FD37A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35CCD4FD37A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3icx46xzT2ewAzXE9MEEiAt7csZVZaNgi0ZSTaXr69kYgcIyUlPJjOMtrfWXvuiJd1wEIVlp8M5YgJTorn9lv5vza8D4FcqBkB136g2LGCAhm8b9rU0gjpAVdDQNZfzBLmEC0BESy9bdtWwmtJnbtecas2x6iW7Uf+la98R4xJaupQsXdtGIeFOFralJ4w4FHDMHQIixB0BnVnn/s6Rng7IOentmwPLLCBrL4WIHdOEJQ9BFIawBGlk3pgnPjced2Y4IEAkDL3E9HhLf9m72WxKm0qJssAsW5ZlWtem9PE4Dq709pd8M/Jc4tPDugcIJRiCEO+BInWPxJJ6WicMKMNiGb0DbZu2paANtIUGtKvkSjdfA2TsPol0QpJxYPAlsHOwKfIRQwQi7WnqtvSrz3XwsHfOAOE+ZRE/W/8dJURSFNIYeQbPM8vZfR7xQrnaNwg6LoFhwnGKxmpMYgAR1x4Y8vH2DnM5fB7XsvZrWy7/cT5lCP5NW27MY66SunmhOn0cIC7+T8+O+3VA+Q7CBLWbXrC6XSad3frHaM+m3aZZNbd8/ePBDloZhWPnA6mi3S/r82EtZutlU3e3Sx6/DiC4f/LAaBTWGhOfdYL1bX0x4fXuz9vhHZn6XX/ZXYs5SaJ5PJosxvV/RLgZ+vvxTx5t7e9P6ew5jOwvQWd1PXOJSfmgn4Kn3vN+NfpdicePlSmY8smy3uPurT25H4BgXmmMFov5ZPEw+pYu/W+PgT2523TG40HXJb/E3v/y4FpfR6vF8P52jh9YY2UuH1uvOR3ncGrMJWGW/H5GUORLNR5uXxvKfgHxsbwoC/YMP3N1YqVRXCAi9LbapaTFSaQAYc+RzTysLWs4qNR6vX512K80Os2BVatYjetre2h1uvIv16ADizOKPUp8rGIplT3Mz8cEYeRwRDzEjJQmcIm4/gFiHwiguWQqDwclHM2pVPFoxbc0Sp93vJ7a0d5+jvckpmWW6tqYigmZsI4vEDuV7uaJdE8RxDFGSt/VgHM54VzIWqxBmojQLqWgRFAibwCmRNgpV5s1k+MoDpFiakbUS0JUipdxVhmTH37LBoA8s2IOY8oECO3s/L2b3vm3vBLSx8PKgauUukh2E725iqpOLc/n3bzL9nHeOXwn8bA6ZrKsgmF4YHL66XVa1JgUo1IkBrmdcy+2/CXEBQDzA37meWmKeF6Kj6Ln16u8MaSetPP+rkFpXUrSNMk62lBaySS8KSXTNmcIJlLwdnO6QsQsIMxP3TcF67PIhf2UXyKWZCaAQJGcPy1bfuKxMUNcPTZceXC2n33JnISUdRNoKy7ZeqF8kyjGHz5boAOVnzQ/yJ8NZd5ruy5gHcWRecoXhsAkUCt1s+zemQ1IJSyWUkjZMfglgEvBT41FkQsuQk7T70Sg979oSuNaOoCQJkS4fT0zHOtuxlPsYuS8Or2BybT95bLe8ncv68X93UwqYAT0whf/t7OBs3GBSFdvgoxLS9/Kt6cMToIjnX8h+Fbqu4PrYbVX7zarmdTXDlI/7HRrRQFPMmm/Mb+1HNX0/Dy0/wA=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdbk6q6En73V1iuR8sBFEGsmakKFxUV71dedmEIiHKTgKC/fgcdXTprZp3Z50nT6XR/faHz5RUbnlttAoxRFDuBX1Tlt9I/sGbxNGfAikGzVoU1BLoiWAhVWM40eMusV2lGKBVVjBOk+jg2/PitRGS1Ci1UGHrGMM1ao1nnXlimqpeKCxRhYpqovNClYua5Pm5e3L6VkshvBgZ2cNM3PISbMWxOgdZvEs2mccNUen+9orw4jN63cRw2KQq+mAgi14UvMPCoV+pJ59XEzalj+0acROjDp4nfSh9n0zR9SWsvQWRTVZqmKVqgiI6JHftX6b1wO4xM1beC61oy/MB3oOE6ZyMHpaF4G5hF4NpB5MRb7xvTDMXQuekKymAFMqz/q0T9dnBB90NLTyAjbFTw1mBuxibIQhHyISrOJ+pb6dfPKng9O4sMH1tB5OFP6/8GCflH5AYhMiv4FtkN3c8tfpGu91cEm6oP3QQ7RzTI2yQ0IMLFUYQsJ+s7mDSfiYuX8hczfOswBP9LSV6pR5wENvVFZmTHRjj+f+r1WKurlYXhJujd3Az9NIrj2AyrDb5BeccumC5lmtHttwuER+UrqHupP9afG/XeVx+HgH6QAEWFHW+43wWCyLOzATQyqC43IyFgww6KDHleXfBhnwnP7GFSV5aOMRqMeQLMtI6Gmkq4fPYtY68VOlun7ojlyBsmPWdxpgd+bX5QyhvHX/P9APM06YFso8/XEh+zHD0x1Ho2yDY0lyJFreKyARJ1vOLHOsesCo59ED3KmdTrKdAXYuZt12+/Y3qMIY+rh06XIPP/qzotyEZs3BdSPiks8nnG6F1TVaksSxJAkg1SVQS2KvbPYCDa+8N277SFlBbBeN4CMjhpE5DK9lpejMc9JTUXC1dfqK2WqE3YtAPWcoFsyEq2kPVVlzaWeriutmh9KormahJsat3Q7OzTzhYOtJmWDmbqSdsp2WCm0MuLzM7I+qztNGY4m9cKy50oaBMlldOLR1lJtwN9OQnXcyGFZ2WsAbYNmLkibbXOzFswsDbZwp3S18D+Ihe3mrRYaJkyA6OCaA8WJLaZ1NJD6JnhxnO3D8Y7xPjMbC9Om7ab6Gdlp0lKW5oe2lN1U5PHShdM1vPNcrE3lq1jAXYGYHPzSEpsrILU1hupPF53e4Gubo9wAMaKKI4BSRcNNLXdBUFbBBoLnOws7UQukMxWSnWruFAW3Da3OjmHFTbatGswjQaz7i+50YGTFb+s95LNbqttV61huTc1j3MhFs5rfCwfOcNhYBZa45XSiXuZ1RlPC5uRnK1gp2zaXco9C61I47sgOp+2rmZP4iU3xKeNY1lLcTVkXd5ytdoktFwrPOHyLBjvI5oTUa1KrU/HXlwAtiYC0N7Nd+JYExt5Uk01Ha810QAtJU7AeVeNe9XFods5unBdA0HWWw53+4/CmHKqiFQ6VkhbKYWGDMy8CJ3pXGntwFy07Ui0lZY4hjIYr9Veuib5mneI8uc8ti55tBURKDUdcEKnUJvTQjyMpywLTr4491vCVjtkS5PzaP6AlP50ELKphgeWry+DveY50TxKpvNeb9DPNrOkvd+RWWXR096xpheU4z4EzqA32+7lQDZG4Xodh2UfRjBWQ09Ts/NQx7uGs/HobrnOiCNahnx17m3SedtQ9F5kT5leZ+KParxQwIl16njlXSNdlmdTLuRNybfk04nSowUdgKAlTOoHM6tW99t52udSqwv2G6M6yFxBPAlKT5/BdDLuLadeuV6oH/t9jz7PKHYQDtNpO2WV8bhcM8VZZ4bDyFknDTuLhr5ZXRsxd9TpBeeE7l6oJvsZG9YWtkeKNTqaIa+NCmN2BXXP5kPYpSbUESi81Vfbp83ZOIfeEF4H6OfpcBde5wf1OFmeRs+NdExJtyIY35b5BaTKxRa5FYz47wQmlzhmxbqoNsOcBeEY+XHpPT+Vk5dmQiiOYzbJlXFdKxzNKTItiVydkxotUaFZmmnRgOYFgZZ4+cZyrig+QZQC33JyXzmPu95SfwcIvSZGvomiyjFI4Bbh0l8s5vkqqv6EXL+Bj9EsIDyRVoSayHMyy9JyQ6ySvmbrXJ0XW4pYbzE8VyoOgnjoDyNgxSh65ojsE0ecIOiEDsqJZH6bYnKd4pik5GAck9hlXo7Gi48SQjWjnO01q2yjTmHHC12UA6a8wExc9BJuw0uCKHz9rVYMiC/SiTL7R51Kl5v+2xA/792yQXRMJ1fAeTwiIhVFXxBe9hbM90Hzj0HfzIPEdPILnaQ2jhx4RfK89btj8la5twuJ6gb5rvlZ8GSV+hzQ3ZF5dOC95+/PAcImCd94v5XkYLwcXpLjMbkUgc+5VETMUwxF89QUwYQQotMs2COfupugfsRF76g/eb7Ln/El8dafxuR79kjLFC/LHzxEpgjnDxGVtHz201fOk0uStxhl8VcyySXvlRzxX580sAlzPSIekZ80iMzf5frC1oMfEmc+wBzfzlc58zx90xQwIGYdMsSC6NH4Vwa+cv4svCf5jiUm3bRJYvT9TjGfTm8lA8Ig8WNVLl0EjxPzgjM+haj5W+kPMxfu90HmM/wtmV9p/SmZXZ5Ruus6/1u54lzaBSJyCjsXLG+ljLxLiXPffpjQHwD/GNKAURhRAIKkgE9DunVP4FMk73+I/5Q85PTz9/D+Lw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463105423</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35CCD4FE37A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06010_AccountGet_FUNC_Portal:CS_Account_Status_as_Other_200_OK_P1" searchProperties="true" id="30888ce0-c368-4939-bd30-bdbc9d10a43f"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="fdd96539-04bf-4062-95af-1fb8359cf606"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="92cad69b-27d4-495c-be15-40fafd5955c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="70e31791-3a05-46b4-b7fa-0564cf90f0c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","other");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="1a1fa81b-24b1-42cf-a295-8dd9759f8fa4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="34ca88db-d305-4b6d-91d2-b409a29ccc25"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CC6BC76B80E05305991F0A0CC0</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"00FE35CEC4DE6B94E05305991F0A1B73:5470306A"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CC6BC66B80E05305991F0A0CC0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CC6BC66B80E05305991F0A0CC0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35CCD51337A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35CCD51337A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6OQBAiXqCBxnZN2Oq2A0svLkXE2YJrYwXYg9OvHCU0KlPZ0TlUJeWd77bUvXvaFQGFQdjtCAJeEUc3rt/R/59VGvVqe1YwKOHWjWq5bRsOfV4xmE+plwHbNLiNd84SIwaNCIipbetmyq4bVMOzmxHbcquNazZLlOE+6NgUuFLRyKVm6loQBFW4WtqXHnLoMCSJcikIQrsTuuHP9y1WeLso56e2LPcssIG8vpYxc08QlHzAEAS5hFpoX5pHPhS/cMVlQJGMOrzF90dJf926329K2UmJ8YZYtyzKtpql8fEEW3/X2t3wz+B6ds/26hyijBKOAvKCU1DXIJfO1TrBgnMhl+AG0bdpWCm1Agg1sV+l33XwLkLH7ItIRSS6QIZbIzsFGMAcOFIN2N/Ja+vevdXC/d8IRFXPGQ3Gy/jtKQDcQsAh8Q+SZ5ey+jnimXO0LwK5HcRALsoHf6ZhECIPQbjnMSfKLCDV8vtCy9muJUP8knzLAf9OWC/OQq6JunqlOnyxAyP/Ts8N+7VGmKIihDT8vfwfjG8db3zts1N82CFyWX4LHf+4brYzCofOeVNHu1/XpsBaz9bqpa18Otlczs+6t67PAROunUXMd3Vn0piPR7WT92KklNp1Nh1f342D08HAfzl5mc9Z5fr6bUv5zFD/DAk1Xq9Wk8/KNRZXeoCOvZ09DMgl+JkHlMg7FeoMGhD/GP5KHW7S6mjafdjDweBNH4eZmOF3XzB+cx3eLx649S+5ni0mvam/Zt8HVIyZDedvtUmLXArK7H7TecjrM4diYS8I4nq0Ay3yZjofX14aqX0h+Li+phfjGPHN1o1SjhAQq9Xa6K5UWN1YCRHxXNXO/tqzhoOL0en3HrlTqncbAcipWvdm0h1anq/5yDdqzOKHYY3RO0lipyu7n53OCOHQFUB+4sWExXoLQP0HsI4k0j47U4WBUwIQpFd/5kZ9EzvO8kpCAr3aEsJcV2ix07TeTN/SGd+YS+LFyN46UewSYRARSeU/nW6gBF1KVYo02sQzs0gaVKMTqAuCpBrvlasMxBQmjAFKiZsj8OIBStIyywphi/1s2EBaZlQgcMS5RYGfH78PsTr/lhVA+PkkdRJpSF1Qz4d1NVHWdPJ8P8y7bh3nn8J3YJ+kpU1WVnOA9k+NPb8OSTkkxKUViWNg592LLX0KcATA/4WeelqaI52/IQfT8dlUXhpKTdt7fNSqtS/FmE2cdradSyRW8qRTTNseAY6V3uwl7BmoWEOaXrpuC9Unkwn7ML5ZLOpZIQqjmT8uWX3hrjEGkbw1PnZvkqw+Zo5CqbhISec7WC9STJGX86asFuzj1U+Zb9bNl3H9r1xmsgzgqT/XAkIQu0lV6sew+mA3MFCxRSsj4Ifg5gHPBj41FkQsuUk3TLJbw8RctlbiWjjBmMZVeX88Mh7Kb8ZS7CNw3p3cwmbS/3tWJ+PCufrj+NVYCGCK98CX/7WyQbFww6OmTIOPS0hP19FTB6eJA5l8JnlP6WrdXq3UbVqb0zl7prV7PKgp4lEn7nfm95aCmp+eh/Qc=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463108320</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35CCD51437A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06012_AccountGet_FUNC_Portal:CS_Account_Status_as_forcedeleted_200_OK_P1" searchProperties="true" id="448557ac-2268-4a05-a7af-7441c6d1c567"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="79e08516-d566-41e8-b83d-78e1137ceba9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="eea1d814-5dd3-4dc6-9401-1c92286bad49"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="10f36f3d-be51-4fe1-a184-06ed101889f8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","forcedeleted");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="83271bfe-6ce3-463d-b3eb-5c63c95fe7b3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="4fb24ba0-d70f-4b86-97b2-d39cab186647"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35B56B046B7EE05305991F0ACDC7</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"00FE35CE5F7737A4E05307991F0A2173:8E2A3FB8"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35B56B036B7EE05305991F0ACDC7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35B56B036B7EE05305991F0ACDC7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B4F324379CE05307991F0A189A</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B4F324379CE05307991F0A189A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+I6FP6+v6LT/bhT0pZCaUeYQUGXu76wol53v9wJadpG2wSbpIC//ibFVkD0unfGkcnpyXOe85InOeIwz9xwyDkuBGHUmIz65j9+24t8O4qswO11La8bQWuu/lsdL3LsOI68nu+axoRziSeUC0hF33Rtx7PsnuUEN04n9Dqh47Q6Xfu3adzhgito5dKyTWOVZ5SHVdi+KQsaMsgJDynMMQ8FCmfDi/NQeYaw5mQOjjYsq4DFIBViEQKAWhFGOMtQC7EcHIEdn6OIhzOSUChkgV9iRrxvvuxdLpetZbvFigS4tm0DOwDKJ+Ik+WoOvtSbcTShMdusTyBllCCYkWeoSV1gkbLIGGYJK4hI83egHeDYGtrCK2Qhx6NfTfAaoGL3SaQdkgWHFk+hU4Nd4xgXmCJs3F5P+ubXz3Vws/emgJTHrMj53vrPKGFa4owtcGTxOrOa3ecRD5RrcIRROKEok5yU+FKPyQIizI1pgWOyOidcDV/Ejar9xoqrP1JPGUZ/0pYjsM1VUQcHqjMiCebi//Rsu18blDuYSTw4v/2bXifzq5K5djE8e0yyO/TbG/a8APUrCtvOG1JNu1/W+8PazNbLpssLtALyWzJJxN1F+XA5xA/j8+/i9/CynEvv6vxhNR/dgWTmtU/PfkU//JvlU/fxWaJx/u1XVCZi2vNv5sV0/bPt/PrS7t364hnli7ScA/fsOB6LcXDsT1kApmPy6K/X6eyh25HtwmNZStNb/z7pTk7lzx+Bv/Sn3hD5eenK++e12/2SfgdxHJdT5/Gvi8D9eRbcJv3XnLZz2DXWkjCT8weMRL3U4zEZGaeqX1B8LC/aQiIrrlzDhdYoLjAV5kDv0tISSiVAJApVMzdr2z4dtzvH3mnb9dp+cDK2O23bDwLn1B46vWBYa9CGxR7FE0ZjomNpld3Mz8cEUR5yTCNcWCWTKMXc/ABxBAU0JvRaHQ5GOb5hSsWdZJVL/kzKXrJ8XmE7jb1MZl3TuGTiil4Vw1jgYle4ezvCfY0RWRCs1V2PN1fzzYWqxBMspcicVglbFEul/4WW4ND1eh3ASb7IsOYJchbJDLcW6aKqC+CbX9eCiFdWwtGCFQJmTnX63k1u/1tdB+UTEe3AdUrHWPUSH7iI7Dqfd/N2ne28a/ihjIg+ZKqooiBow2T30+us6CFpBqVJDHGn5t5s+UOIAwDgA35gvzRNvKgkW9Hry1XdF0pNBnV/n2DrqSXLUlYd9bVSFgoeKMF0wAwjqeRufcMeMQUNBPjUbdOw3ovc2Hf5SZHSmYAC52r+jGr5iafGDHP91JioY7P67DtmJ6Sqm8Arcch2kqkXiWb84aMFhUj7KfNU/SxZEb226wDWVhyVp3pfCEITvdL3yvqd2UBMwRIlhKzYBj8EcCj4rrEpcsNFqGmaS4Hf/2JoheubECEmqZiMzMqwrboVT7Fe4PDV6Q1MpewvV/WKv3tV31+cz5T+5dBsfMl/O1ukGheETf0iqLj0zZV6eargNNlS+ReCB4S+0z22291jf1wJfWcj9CejE78p4E4mgzfmt5atmu6fh8G/</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVfXkuq6En3nKyj2I8U4EkzNTJUcAAMmmfxyyshyACec4euPDAMbZs/sO+c+gVqt7tXBraXXSHMdug2iCIWx7XtlWXyr/EM2aKizFFPjds16jUVQq7VYg6ohrlFvci1GJxFbKctRlCDZi2LNi98qNIn1Sa5GNecU265TbbL+wjTq20p5icIIm8YqL2SlnLuOF7Uvbt8qSei1fS2yo7anuShqx7CtAmXYxppt7Yap8v56RXlxGL5bcRy0CQK+6Agix4Ev0HeJV+JJ51WP2qptelqchOjDpx69VT7OZln2kjEvfmgSNEmSBMkRWEePbPNX5b10O4x02TP861rQPN+zoebYZ60ApaDY8vUycEw/tGPL/cY0RVBkYbqGcliDFOv9qhC/HVzQ/dDSE8gw0mqRpVE3YzNkoBB5EJUXM/mt8utnFbyenYeaFxl+6Eaf1v8NEvJS5PgB0mvRLbIbup9b/CJd768ItmUPOklkp2hUtEmgQRSVJyEy7HxoR7j59Kh8KX85j24dhuB/Kckr8YgTwya+yIxomyiK/596PdbqamWpOQl6t1o5HPSthDa6q5lY7x/5xenITBciD94uEB6Vr6Dupf5Yf27Ue199HBL9lDzxOW+ezbE9GgHmJLnmJB2hqX6Y1VOKRzonpKtO0NnO2ON5HBPQW4TqMXUpLrGo40A7o6aZLSiaVUtwMvaXwt53/Qmot4bjMNcFnqRGLY2RW0sbTlhgu9XZpo9kWo9nyi7s0rwn9A122jMEjRKWFHkKd/Oqu9mWCD9pVM0GMfa31WadDSzPfPsd02MMRVwDdLoEWfxf10lO1GLtvhCKSWHgzzNG74osC1VREAASTJDJPDBlfngGI948HK2D3eUykgfTRQeI4KTMQCaaG3E5nQ6kTF8une1S7nR4ZcZmPbARS3hDlPKluF33SW21DTZ0h9yqPK+vZ/6O6Qd675D1LDhS5ko2mssnZS/lo7lEri4yM8frs7JXqPF8wZRWe55TZlImZhePopRZo+1qFmwWXAbP0lQBbBdQC0mwlN7cXVKQmVlwLw0VcLjIeUsRlksll+ZgUuLN0RLHNhc62wC6erBzHevBeA8bn+vd5WnXdZLtWdorgtQV1GNXlXeMOJX6YLZZ7FbLg7bqpCXYG4HdzaNdt7W1n5nbViZON/2Bv5WtFI7AVOL5KcDpIoEid/vA7/JAwQXPz8Keb/iC3smIPh2VqpzTbaxP9nEdaV3S0ahWi9oMV43JsSFKXnU7SHZ7S7HWnXF1oOrpgou58yZKq2lDsymYB8Z0LfXiQW70pmppNxHzNexVdbNPOGeuEyrNPgjPJ8tRzFm8aoyj0842jBW/HrNO03AUZhYYjhGcourcnx5CssEjhiY2p3QQl4Cp8AB094s9P1X4VpFUXc6mG4XXQEeKE3De0/GAXh77vdSBGwb4+WA13h8+CqOLmcQT2VTCbSWVWiLQiyL01IXU2YMFb5ohb0odfgpFMN3Ig2yD87XoYeXPeexc8mhKPJCYLWhwvRKzILl4HKssC04ev/A6nKUc85XecMnmEUlDdRSwmRKNDG+78g+Ka4eLMFEXg8FomO/mSfewx7PKINVBymxLUnoIgD0azK2D6IvaJNhs4qDqwRDGcuAqcn4eb6N9y965ZL9ap/gJKcImvXB32aKrSdtBaKrUoDfzJkyTK0WJceq51X0rW1XnaiNo6oJniKcTsQ2XpA/8DjerH/Wcpg/WIhs2MqMPDjuNHuUOx584abCdw2w2HaxUt1ov1dPh0CXPc4IdBeNM7WasNJ1WGZ2f9+ZRENqbpGXm4djT6Y0WN9ItuWzYgXPg6OQwZwNmabq4WJNUD5rKpDRl13Drms0A9okZkQKpaQzl7ml31s6BO4bXAfp5OtyF1/lBPE6Wp9FzIx0q7lYE49uyuIBksdzBt4IW/53AFBJbrxkX1XZQsKAoRl5ceS9OFeSlnWCKY+ttfGVc11KDazQ69UaLFZpA6rASyZJUhwRkneNIttW4sZwrik8QBd8z7MJXweOut9TfAUK3HSFPR2Et9RNooajyF4tFvsqyN8PXr+9FaO5jntjqNCSOYzmaYZtNhmuRDC1QVAu3DckKlMRVyiM/HnvjEBgxCp85YvOJI84QtAMbFUSyuE0jfJ1GMU7JUUuT2KFeUu3FQwmmmmHB9to026oTke0GDioAE66vJw56CazgkiAiuv7SNQ1GF+lMmv8jq8Llpv82xM97t2xgHd0uFKIiHh7hiqI/CC/Zrt+C+TZomnwM+mYeJLpdXOg4tXFowyuS563fHVO0yr1dcFQ3yHfNz4Inq8TngO6O9NSG956/Pwcwm8R84/1WkqP2cnxJ0jS5FKFZcKkQmycogmwSKoIJJkSnuX9AHnE3QfyIi95Rf/J8lz/jS2LLU2P8Pbu4ZcqX5Q8eIiqKioeIjFs+/+kr58klzluM8vgrmeDg90qB+K9PGtiGhR4WT/BP5of673J9YevBD46zGGC2ZxargnmevmkK6GOzNh5ifvho/CsDXzl/Ft6TfMcS427aJTH6fqdcTKe3igahn3ixLFYugseJecEZnwLU/q30h5kL9/sg83n0LZlfK0MVzy5Xq9x17f+tXLMv7QIRPhXZFyxvlRy/S7Fzz3yY0B8AvxjSPMe3yBZNc89DmmPuCXyK5P0P8Z+Sh5x+/h7e/wU=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463110870</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B4F325379CE05307991F0A189A</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06013_AccountGet_FUNC_Portal:CS_Account_Status_as_Deleted_200_OK_P1" searchProperties="true" id="a2be7fb8-e9f1-45a4-9822-a8b9b3d6d690"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="1b4ffb10-bfaf-4899-a11e-9fa603e8a206"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="c96848a6-d377-468e-9f93-84a7ebd10e87"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="ff35d6bc-53bd-4e86-ab05-0e5822be3fdc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","deleted");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="6dce3c84-9083-4671-acd9-7ea9ede8cf26"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="6394c747-0f9b-4fa8-bea2-57b51e8628d8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FDFAE81B9F450AE05307991F0AFA42</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"00FE35B3DFCC6B78E05305991F0ABA86:A0057C3C"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FDFAE81B9E450AE05307991F0AFA42</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FDFAE81B9E450AE05307991F0AFA42</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B4F33A379CE05307991F0A189A</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B4F33A379CE05307991F0A189A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH3PV7g8z8YW2FxcgSqus85CyITcX7aE3AZljGwsGZx8/UomdoAh2WSrqKLUbp0+fdGRzjlehVW3yzkkgkZM8wZt/Z9q02nMm6RhBEHQMOzmHBtzYjcNH5oO1OoNXK8jXfM4T8FjXGAm2nrVQrZhNQ3UukGOazsusis1y37StTtIuISWLhVL17JVyLibh23racLcCHPKXYZXwF1B3Fl3Mnalp4sLTnrnfMcyD5h0lkLErmmSig8EwpBUSLQyz80Dn3OfuzO6YFikCbzF9Hlbf9u73W4r21olShZm1bIs02qZ0sfndPFD75wVm8H3WBDt1n3MIkYJDukrVqQmIJaRr3XDRZRQsVx9AI1MZCloAzJiEGSzH7r5HiBn90WkA5IJxwZfYlSAXUMACTAC2u2119Z/fK2Du703CWY8iJIVP1p/jxKwDYRRDL7Bi8wKdl9HPFGuzjkQ12MkTDndwKUakxgT4NpVAgHNxpTL4fO5lrdfy7j80WLKgHynLefmPldJ3TxRnQFdABf/p2f7/dqh3OEwhU7Ke7fT0WLqXV75j7ZZvSfbBn/2psn4tp1T2HfekSrb/bY+HtZytt423QZrXuP3/brj4XAwvQwnY9T7HUyXD0+odjG+umeTq8XzoNedxBcPrfBxOnZ+rq30iVcfMzOY/syuXoPg5bIPaM3PTPIgYPIzGv3Cz3/NezGuO0hEU/PvIdo8PPJRNkLP/bVDLu3X8OJxQJazCN3dbCcX6P6VhAO8fepdW2sxydbV4VmMb7xfvHE3Rb1F/LIcDp6G7fec9nM4NBaSMEvnz0BEsVTj4Q20kewXFp/Li7JQ3whyVzdWGsUFMKF31C4lLW4qBYj6rmzmbm1Zo2HN6dmjWq1ba7T6Q8upWY1WC42sLmq2uoUG7VgcUexHLKAqllLZ3fx8TpCsXA7Mh8TYRClZAtc/QRxggTWPXcvDETEON5FUced102CLeoYpz7LXVSOkQT2Zw1zXLiMxZdOkGwhIDpW7eaDc10BoTEHJu5pvLgecC1mKNd6kIkSVDa4wSOUFkCgNdqt20zE5XcUhKKLmKvLTECrxMs4LY/Ldf9XAhOdWykkcJQKHKD9+H2Z3/K0ohPTxqXLgKqUeyGbCiZvIKvL5MO8q2s+7gO+mPlWnTFZVJJTsmBx+eh8WNSXlpJSJEY4K7uWWb0KcADA/4Wcel6aM52/oXvTidpUXhpSTTtHfNa6sK+lmk+YdbSipTCS8KRUTmTMgqdS7l5voNzCzhDC/dN2UrI8il/ZDfqlYspnAAlZy/rR8+YW3xgy4emt48txkX33IHISUdROQiVO2fiifJIrxp68W4hLlJ81X8m8bJf57u05g7cWRecoHhqBsoVbqYnn5YDZIJGGpVMIo2Qc/BXAq+KGxLHLJRchpmqcCPv6iKYlr65iQKGXCG+i5YV92c57iJQb33ekPmFza3+7qjH94Vz9MxjMpgCusl770v50Nmo8LAV09CXIubT2TT08ZnC32ZP6N4JHSD0bdYRP1WkPbsbr7Sj/q2tWygAeZdP4w/2nZq+nxeej8Cw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463113553</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B4F33B379CE05307991F0A189A</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06014_AccountGet_FUNC_Portal:CS_Account_Status_as_Archived_200_OK_P1" searchProperties="true" id="01001bd9-3ffe-4e3f-a665-54ba1b8b1d08"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="e59883e5-d6d2-46ac-bf2f-5ff4a4392a24"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="32ef67f4-5aa5-48a9-a7b3-e050531c9799"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="751d994b-8ab5-4185-b84d-19d4c75005fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","archived");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="ab996435-a069-49cd-ba7e-b6526398315a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="9bc59e8b-c5ea-4ed1-b980-0a93051c4cc6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CE5F7E37A4E05307991F0A2173</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"00FE35BEDAD56B8AE05305991F0ABD1F:535FF81B"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CE5F7D37A4E05307991F0A2173</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CE5F7D37A4E05307991F0A2173</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B48C056B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B48C056B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuI6FH2fr4gyj6OQhEBDooLEtcOUtlNg2oqXI+NswExip7bDZb7+2KGhQGlP50hIyDvba6998bIvBUrictgUArgkjBr9Tt38B0VuUPPAtaJaBFalgnwrmE6RdYEBHL9WC3wHm0ZfiAz6VEhEZd0sO27FcmqWG4zdaliphq5fcgJ/YhoPwIWCVi4lxzQ2SUxFmIetmxmnIUOCiJCiBEQocThq3gxC5RmigpPZuNyxzAPyxkLKNLRtXIoAQxzjEmaJfWkf+VxGIhyROUUy4/ASMxJ182Xver0urb0S43O77DiO7QS28okEmX81G1+KzRD16Yzt1m1EGSUYxeQP0qRuQC5YZDTjOeNELpJ3oF3bdTS0BRtsYbdCv5r2a4Cc3SeRjkhygSyxQG4BNoQZcKAYjF/Dft38+rkO7vaOOaJixngiTtZ/RwnoCmKWQmSJIrOC3ecRz5SrcQk47FMcZ4Ks4FaPSYowCOMnhxnZDIhQwxcJI2+/sRHqR4opA/w3bbm0D7kq6vaZ6nTIHIT8Pz077NcO5QHFGTS+t8oPrUE8nl2teo+VpJt9u2tPltf3PqvVcwqHzjtS+3a/rE+HdT9bL5smwz/bbYc9D5fx5L4KyS/RiqqDVq836Nb445A9/bmZfJ+k7aT/bfnUDjreZOLjUfTj2y29YndsOqbf1+LCqS7utt6X4MfdfPLYTkZyOQweVvh6Pb29utp6UbZuTjqOqLjdp4E7/MnGHTSya52HQTtoLre/00XHS/ztQDjRWvL762rlJvpy7z863Pk1f9pcrDObPnhJv/6a02EOx8ZCEkbZdAlYFks9Hv2O0VP9QvJjedEWElmz3DVMtUYJCVSaDb1LS0uYKQEiUaiauVs7Tq/rVVuVWtupXrT8Ztepek41CNye0+x2vVahQTsWJxTbjM6IjqVVdjc/HxPESSiARsCtFcvwAoT5AWIHSWT06VAdDkYFjJlS8dnU5+vU+b1cC9cNpnTuSTZLMI9N45bJO3rHmzMJ/Fi6a0fSPQRMUgJa3/WACzXhQqpaPKNVJmO3tEIlCpm6AbgW4bBcqVVtQZI0Bs3UTliUxVBKF2leGVvs/ssWwiK3EoFTxiWK3fz8vZve6beiEsonItpB6JRaoLoJZ64ip8jn3bzL7mHeBXwzi4g+ZqqskhO8Y3L86XVa9JjsR2WfGBZuwX2/5S8hzgDYH/CzT0uzjxetyEH04npVN4bSk0bR32dUei5lq1WWd9TXWskVvK0k07VHgDMleNsx+w3U3kPYn7pv9qxPIu/tx/wyuaAjiSQkav6MfPmJx8YIhH5s9NXB2Xz2JXMUUtVNwkaes7Vj9SbRjD98tuAQaz9l/qn+1oxHr+06g3UQR+WpXhiS0Lle6Ztl+85sYKZgiZJCxg/BzwGcC35s3Bd5z0WqaZpmEt7/YmiNq5sIY5ZR2e+YueFQd3OecptC+Or0BibX9pfLeiPevayfbgYjpYAJMve+5L+dLZKPCwZTvwlyLnVzo96eKjidH+j8C8G3Ut/uVnt+x/OblVzq/Z3Ul13f2xfwKJPGG/Nby0FNT89D418=</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463116283</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B48C066B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06004_AccountGet_FUNC_Portal:CS_User_Status_as_Blocked_200_OK_P1" searchProperties="true" id="758a50e3-8749-4326-94db-6fb4daff1443"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="0a725395-5f21-4b64-89cb-c2a71d1270c9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="27e0a12f-2133-4ced-8582-691f3994d98d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def audience = context.expand( '${#TestSuite#audience}' )
tP.setPropertyValue("audience",audience);

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update User Status" id="38268146-dc75-4f6d-b132-1264fecb7d55"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","blocked");
myTC.setPropertyValue("USER_OID",tC.getPropertyValue("USER_OID1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="d667376f-c804-44c4-801d-ef51d24549d7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="9cbd3961-7e5e-417a-b52a-9665e3a5739f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CEC4F26B94E05305991F0A1B73</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"00FE35B5100E6B7CE05305991F0A6AA3:AFFB87B9"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CEC4F16B94E05305991F0A1B73</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CEC4F16B94E05305991F0A1B73</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35B48C1B6B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35B48C1B6B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo4FH0/XxGlj1XIhVAgKkhcD5nplVB66MvIOA5xm9g0drj068cOTRoo7dCRkJB3ttde++JlXzIQR5bTYQwlHFOiuP2W+s+F71vNugU1qwaQZtd9U2ta1lwzbWDULqzAbgRAVVzGUuQSxgHhLdUyTFszGprZnJg1x645ZrPSNOtPqjJFCRPQwqViqMomjghzsrAtNU2IQwHDzCEgRszh0PE611eO8HRAzkltX+5YZgGTdsj50tF1WPERRFEEK5DG+qW+53PpM8fDCwJ4mqD3mD5rqe971+t1ZV2t0GShW4Zh6EZTFz4+w4sztf0r34x8lwR0t+4BQgmGIMJvQJK6RjykvtKJFjTBPIy/gDZ105DQGtpADZo2OVP1jwAZuxOR9kgmDGgsBGYONkYBShCBSHkYuy317LQO7vZOEkBYQJOYHax/RgmRFYroEvkayzPL2Z2OeKRc7UsEHZfAKGV4hW7kmCwBREy5S1CAN1eYieHzmZK1X9kw8cP5lCH4k7Zc6mWugrp+pDp9vECM/5+elfu1Q5mCKEVtl99POoBNa33jdkhunocj7wXOu9t0NGtlFMrOO1JFu9/Xh8NazNb7punAmgU38P7ptjcaTxd9eDNeTXmj0emNn4j78ESZUXu5efz7/M2vTtB8dVefVwdmSFfem6UPxnZvNlusXWPwyPHkl9n0piMYDNm19zh/8b36fMpjxq9Gv5te0G3Ys6RrhqPo6dWemptt3EkJ2fy5Pn/gj/q5G7rGfBC+hpvlEHSf739tfuuTEf4rfEuHfgf6s8WWtj5yKuewb8wlwUvnzwjyfCnHw+0rQ9EvwL+XF2nBvhZkrs5SahTjiHC1LXdJaXFSIUDYd0Qzd2vDGA6qta7d6Jndi269MzBqVaPWbJpDozMYVLu5Bu1YHFDsURJgGUuq7G5+vicIY4ch4qNEW9EUhoip3yD2AQeKS8bicFDC0IQKFV80Yd2/2NoRqkZv4Tw2Xu36OgSBqtxQfktuk07AUbKv3I095R4jiJcYSXmX883EgDMuSvEKVimPzMoKVAhKxQWQSA12LLtR0xmOlxGSRPWY+mmEKstwmRVGZ7t/SwOQZVbM4JImHERmdvy+zO7wW14I4eNj6cBkSl0kmomO3ERGns+XeVtmOe8cvpP6WJ4yUVWeYLhjsv/pY1jklBSTUiQGmZlzL7b8EOIIgP4NP/2wNEU8f4VL0fPbVVwYQk7aeX9fQeW1kq5WadbRupTKRMDrQjFN3UMwFXq3ndAXRPQCQj/puilYH0Qu7Pv8Uh4SjwOOYjF/SrY84a3hISbfGq44N5tTHzJ7IUXdONrwY7ZeJJ4kkvG3rxboQOknzHfib00T/6NdR7BKcUSe4oHBMVnIlbxYtl/MBqQCFgslpEkZ/BjAseD7xqLIBRcupmmecvT1F0VKXEsFENKUcLevZoay7GY8+XaJnA+nTzCZtL/f1Rv25V395/rKEwIYA7Xwxf/trOFsXCBS5ZMg49JSN+LpKYKTRUnm3wl+VvreoGcPzYtu0y4rvdmtV4sC7mXS/mT+bCnV9PA8tP8F</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463119183</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35B48C1C6B7AE05305991F0AEE3B</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99c61175-ca6e-4fe9-95b0-5f3d02f2072d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c263e60-96bd-4c9c-9c64-ad6f469cfc89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce1f47c6-8e3d-4c44-9320-d57e0cc4e097</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91fbcd9f-2e93-4771-8e59-1e4d7858798e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab628a1f-cf19-4492-9adb-a8f001acc242</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c63f612e-da80-43e7-8d92-f3f37b6270e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d4c48c67-669c-4e03-917d-676f15d21653</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06005_AccountGet_FUNC_Portal:CS_User_Status_as_Suspended_200_OK_P1" searchProperties="true" id="a54f9758-a066-49c8-945c-257f27b046d0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="6d69d199-b687-4bb5-8e71-c0f2ec978649"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="81c65e8b-aa9d-4434-a3df-34fe96b5d436"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def audience = context.expand( '${#TestSuite#audience}' )
tP.setPropertyValue("audience",audience);

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update User Status" id="51ce1729-2ba6-43c0-8687-fde85e0713ba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","suspended");
myTC.setPropertyValue("USER_OID",tC.getPropertyValue("USER_OID1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="9fee1853-4f19-4c50-a060-da9a18f58217"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="fe06638b-773c-4a4d-bfbf-ebe441c61866"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35BEDADC6B8AE05305991F0ABD1F</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"00FE35CCD53337A8E05307991F0ABBBB:7A77AD91"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35BEDADB6B8AE05305991F0ABD1F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35BEDADB6B8AE05305991F0ABD1F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35BA28CA37A0E05307991F0A50EB</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35BA28CA37A0E05307991F0A50EB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdU+o6FH33V3Tqo1P6AQXaEWaKgLfnqijoOcrLnZimEG3TkqQF/PU3KbYCglfvDDNMdnfWXvsjKzlnII4s12MMUY4Tovj9jvpPAMPAhtDUAgQdrdFsPGuO3QBa87kVtJ8D00CBqSo+YxnyCeOA8I5qGWZDM9qa6dybttuwXcuqNU1nqiq/EWUCWrjUDFVZxRFhbhG2o2aUuAlgmLkExIi5HLoT7/rKFZ4uKDmp3fMNyyIg7c45T11dhzXBDkURrMEk1s/1HZ/zgLkTPCOAZxS9xwxYR33fu1wua8t6LaEz3TIMQzccXfgEDM9O1e5JuRkFPgmTzfoCkIRgCCL8BiSpa8TnSaB40SyhmM/jI9CmbhoSWkMrqEGzQU5V/SNAwe6bSDskKQMamwOzBBujEFFEIFIexn5HPf1eBzd77ykgLExozPbWP6OESI6iJEWBxsrMSnbfRzxQru45gq5PYJQxnKMbOSYpgIgptxSFeHWFmRi+gClF+5UVEz9cThmCP2nLub7NVVDXD1Snj2eI8f/Ts+1+bVB+gyhD3fVsPL287A9g89fdX/zJcubeKB/zxZ8zr1NQ2HbekKra/b7eH9Zqtt43BaO70Du7Hcdh49G49ccP7ejtT36djM5e4/lNPvz7enXZfOWkpaeXk3odjHXbO4smj+uzNEYvvYvB3WwxDO+z1gMfnQzO2HTaBE4++3Vj28urp/WksViPObUarRfEYzDyIyI8p2HWptZweQXT6dtsZL3xoU6Xt5EZQ+LHweJ+MuQnomL9KXHI9Cl/e/MhjR2j85HTdg67xlISJtnzC4K8XMrx8PvKUPQL8K/lRVpwoIWFq5tKjWIcEa525S4pLW4mBAgHrmjmZm0Yw0Hd7nlW+8KrtzxjYNh1o+U45tDwbGPQKzVow2KP4kVCQixjSZXdzM/XBGHsMkQCRLU8yeAcMfULxD7gQPHJWByOhDB0nwgVZzDKwXI1azVWthnaSWvutPB86axV5SbhIzKiXsgR3ZXu9o50jxHEKUZS3+WAMzHhjItaLECe8cis5aBGUCZuACpF2LUabVtnOE4jJJnqcRJkEaql87SojM42/5YGICusmME0oRxEZnH+jqa3/62shPAJsHRgMqUeEt1EB64is8znaN6WuZ13Ce9lAZbHTJSVUww3THY/fUyLHJNqVKrEIDNL7tWWH0IcANC/4Kfvl6aKF+R4K3p5vYobQ+hJt+zvAtQWtSzPs6KjLamVVMDrQjJNfYJgJgRvfZ+8IqJXEPq37puK9V7kyr7LL+NzMuGAo1jMn1Isv/HYmCAmHxu+ODir775kdkKKunG04odsF5F4k0jGXz5boAulnzDfir9lQoOPdh3A2ooj8hQvDI7JTK7kzbI+MhswEbBYSGFCt8EPARwKvmusilxx4WKanjOOjn9RpMZ1VABhkhHu99XCsK27BU++TpH74fQJptD298t6xY5e1o/XVxOhgDFQK1/8384aLsYFIlW+CQouHXUl3p4iOJlt6fw7wQNSP+h7/V6z1/YKqbc3Ut/rm8OqgDuZdD+ZP1u2arp/Hrr/Ag==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463121841</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35BA28CB37A0E05307991F0A50EB</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99c61175-ca6e-4fe9-95b0-5f3d02f2072d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c263e60-96bd-4c9c-9c64-ad6f469cfc89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce1f47c6-8e3d-4c44-9320-d57e0cc4e097</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91fbcd9f-2e93-4771-8e59-1e4d7858798e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab628a1f-cf19-4492-9adb-a8f001acc242</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c63f612e-da80-43e7-8d92-f3f37b6270e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d4c48c67-669c-4e03-917d-676f15d21653</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06006_AccountGet_FUNC_Portal:CS_User_Status_as_forcedeleted_200_OK_P1" searchProperties="true" id="4ade54f5-98bb-4bfe-bccb-b82c1603096e"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="934fae1c-2f87-40d5-bf40-d073eceac3d5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="ac85270e-676b-49ac-a5a0-62b8d2e8653d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def audience = context.expand( '${#TestSuite#audience}' )
tP.setPropertyValue("audience",audience);

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update User Status" id="ec6035c6-40a0-431e-b4ca-0f268eb73dd5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","forcedeleted");
myTC.setPropertyValue("USER_OID",tC.getPropertyValue("USER_OID1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="3a0812b9-5297-4315-af43-55bab221b1c6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="54c4efd6-5928-4a4f-b42c-f233fbb5a7cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35B3DFDF6B78E05305991F0ABA86</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"00FE35C6F7656B92E05305991F0A81AF:92050745"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35B3DFDE6B78E05305991F0ABA86</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35B3DFDE6B78E05305991F0ABA86</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35BA28E037A0E05307991F0A50EB</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35BA28E037A0E05307991F0A50EB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3B5no0vYDCuQBWEsONsLgwOmUxetoTcBk2M7EgyOHz9SiZ2gCHZzFZRRandOn36oiOdcbRKHH/AOTBBUqoFo57+T8u2Udy0wIhiCxktu9k0ul7XNrpx123PwQMv9nQt4DyHgHKBqOjpjmW3DMsz7O6d7fot13fcRrPTftS1e2BcQkuXhqVrxSqh3C/D9vScUT9FnHCfohVwX2A/HFxf+dLTRxUnvX+2Y1kGZP2lEJlvmrgRAYYkwQ2crswz88DnLOJ+SBYUiZzBa8yI9/TXvZvNprFpNlK2MB3Lskyra0qfiJPFV73/pdoMUUDjdLc+RzSlBKOEbJEidQ1imUbaIFmkjIjl6h1o27QtBW1AgQ1st+hX3XwLULL7JNIBScaRwZfIrsCmEAMDikGbTYOe/vVzHdztvWOI8jhlK360/jNKQNeQpBlEBq8yq9h9HvFEufpngP2A4iTnZA03akwyhIFrEwYxKa4Il8MXca1sv1Zw+SPVlAH+k7acmftcJXXzRHVGZAFc/J+e7fdrh3KPkhz6f8Pzw+3U/rkdJZvvm4zN73+M0fxbNolnvZLCvvOOVN3u1/XxsNaz9bpp9GzN6M1mdRfZs6TwqJiE+Xr5EPHvT22HtCe3l1QEC5f9fFlvOsh274fbTfhUbB5Hv+TIh/FT6AZPwUsyds8nX86Hd92u4+Fba7D0psv0avoo2zIdDr6L2+zhcuFEibv1HieLm1G4XaIfjz9GDze/4vUwGM7R5czh13T6nF9Oxn/N0y/Db8VjsvDcKGSX3dl2hsNW7y2n/RwOjZUkhPn8F2BRLdV4BCNtLPuFxMfyoiwkMuLS1c+URnEBVOh9tUtJi59LASKRL5u5W1vW+KLpDgeOd2E1OwPrwnKbVqfbtcfWwLUuhpUG7VgcUTxPaUxULKWyu/n5mCBe+RxoBMxYpzleAtc/QBwhgbSATuXhSCmHu1SqOIrRtkBsnSeM2ZbD3HaH2+1m4eraTSpu6S0bxALYoXR7B9I9BUwyAkrf1YBzOeFcyFo8o3UuEruxRg0KubwBmBJh32l5rsnJKktAMTVXaZQn0MiWWVkZk+/+HQNhXloJx1nKBErs8vy9m97xt6oS0iciyoGrlIYguwknriK7yufdvB17P+8KfpBHRB0zWVbBCN4xOfz0Ni1qTOpRqRPD3K6411v+EOIEgPkBP/O4NHW8aE32olfXq7wxpJ70q/4+o8ZzI1+v87KjHaWVTMKbUjJtMwScS8F7uUufgJo1hPmp+6ZmfRS5th/yy8WShgIJWMn508rlJx4bIXD12AjkwSk++5I5CCnrJqAQp2zniXyTKMYfPluwj5WfNE/k3yZl0Vu7TmDtxZF5SrkVhC7USt0sL+/MBk4lLJFSmLJ98FMAp4IfGusi11yEnKZ5LuD9L5rSuJ6OME5zeXeM9NKwr7slT/GSgf/m9BtMqe2vl3XB372sH66vQqmAK6TXvuS/nQ1SjgsGXb0JSi49vZBvTxmcLvZ0/pXgCalvjsaji/aw45VS7+6kfjjw2nUBDzLp/2b+3bJX0+Pz0P8X</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463124610</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35BA28E137A0E05307991F0A50EB</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99c61175-ca6e-4fe9-95b0-5f3d02f2072d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c263e60-96bd-4c9c-9c64-ad6f469cfc89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce1f47c6-8e3d-4c44-9320-d57e0cc4e097</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91fbcd9f-2e93-4771-8e59-1e4d7858798e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab628a1f-cf19-4492-9adb-a8f001acc242</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c63f612e-da80-43e7-8d92-f3f37b6270e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d4c48c67-669c-4e03-917d-676f15d21653</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06007_AccountGet_FUNC_Portal:CS_User_Status_as_Pending_200_OK_P1" searchProperties="true" id="cf20fee1-c39e-4d87-9e4d-30437765f536"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="08634a5d-706f-46b3-ae6f-1a0d7dc87e6e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="f21133c3-f2d6-4ebe-b8fb-56560af51450"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def audience = context.expand( '${#TestSuite#audience}' )
tP.setPropertyValue("audience",audience);

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update User Status" id="8563d2fa-642a-48a2-a7ad-ff336222dfcf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","pending");
myTC.setPropertyValue("USER_OID",tC.getPropertyValue("USER_OID1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="97acd2dd-6b38-4ecb-8176-2bbdc3b06363"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="58a86d2c-0aae-4015-ac39-865e39622161"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35CCD53A37A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"00FE35B4F35A379CE05307991F0A189A:66C0239B"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CCD53937A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CCD53937A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35CDB907379EE05307991F0A9FE6</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35CDB907379EE05307991F0A9FE6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o4FH7vr/C4jzvGFy7GnsAMgVzchrQNaTbJy46QD6BiS2BJxsmvX8nEDlCSTTeTGUbHR9/5zkWfdMJRmnjhgHPIBGHUiEY9859Op9PsdDGy/KaLrRYKOhZqt3yr5bpxp+NA25vGphFxLiGiXCAqeqbnuC3L6VpucOu2w1Y79LoNzwkeTeMOMq6glUvDMY0iTSgPy7A9U2Y0ZIgTHlKUAg8FDieD8VWoPENUcTL7J1uWZcCsvxBiFdo2bsSAIUlwA7PUPrH3fE5iHk7InCIhM3iJGfOe+bJ3s9k0Ns0Gy+a25ziO7QS28ok5mX82+5+qzRBHdMa26yGijBKMEvKMNKkxiAWLjUEyZxkRi/QNaNd2HQ1tQYEt7LboZ9N+DVCy+yDSHsmMI4svkFuB3cAMMqAYjJ83Uc/8/LEObvfeZojyGctSfrD+M0pAc0jYCmKLV5lV7D6OeKRc/RPAYURxIjnJ4VqPyQph4Mb3DGakuCJcDV/MjbL9RsHVP6mmDPCftOXE3uWqqNtHqjMic+Di//Rst19blDuUSOjjWSCLfFC0bp7cdDLasCnQ8Z0/DSDqlRR2nbek6na/rA+HtZ6tl03f0SUp5INtN+VmefHcuvx76nTXhTO+/7E+tQc/bkaONx4Ol1dzWpxtlt4ZLB6vZu3H+d1TayGyhZ+vmzyatZ+wyz4NA3kbIQ+85d2o5TpF2hVfOU2jIpHTZ1dA8XiZDO87w3tHEnSdfxlf/hXnDxt7vl7+LMYr9wE9X190Hy4W8px9ul9+jTLfv/71zC+adP1r6LHea067OewbK0mYyOkvwKJa6vGIRsa56hcS78uLtpDYmpWu4UprFBdAhdnXu7S0hFIJEIlD1czt2nHOz5rt4eg0cPymH5ydOe2m4weBe+4MgvOzTqVBWxYHFIeMzoiOpVV2Oz/vE8RpyIHGkFk5k3gB3HwHcYQEMiJ6ow4HoxxumVJxN0tIIvN17jNRuNNVF5C/fJ7liJnGNRPf6LdsMBOQ7Wt3d0+7bwCTFQEt8HrCuRpxLlQx1iiXInEbOWpQkOoKyLQKh16r27Y5SVcJaKp2ymKZQGO1WJWlsfn217MQ5qWVcLximUCJWx7AN/M7/FaVQvnERDtwndIpqHbCkbvIrfJ5M2/P3c27gh/ImOhzpuoqMoK3TPY/vY6LnpN6VurEMHcr7vWWP4Q4AmC/w88+LE0dL87JTvTqflVXhhKUftXfNWqsGzLPZdlRX4tlpuBtpZmuPQEsleI93bIlULuGsD904dSsDyLX9n1+UizoRCABqZo/o1x+4LUxAa5fG5E6OcVHnzJ7IVXdlIiJY7Zhoh4lmvG77xYcYu2nzN/Vz4Zlr4kfw9qJo/JUTwxB6Fyv9NXy9MZsYKZgidJClu2CHwM4FnzfWBe55iLUNE2lgLe/GFrkeibCmEkqopFZGnaFt+QpnlYQvjr9BlOK+8ttXfA3b+v78dVESWCKzNqX/LezRcpxwWDqR0HJpWcW6vGpgtP5jtC/EDyi9cNRuxk0/UF3V+tP1V9dwL1M+r+Zf7fs1PTwPPT/BQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463127395</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35CDB908379EE05307991F0A9FE6</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99c61175-ca6e-4fe9-95b0-5f3d02f2072d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c263e60-96bd-4c9c-9c64-ad6f469cfc89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce1f47c6-8e3d-4c44-9320-d57e0cc4e097</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91fbcd9f-2e93-4771-8e59-1e4d7858798e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab628a1f-cf19-4492-9adb-a8f001acc242</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c63f612e-da80-43e7-8d92-f3f37b6270e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d4c48c67-669c-4e03-917d-676f15d21653</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_06018_AccountGet_FUNC_Portal:CS_NoManageAccountConsentPolicy_200_OK_P1" searchProperties="true" id="d471a967-7f43-4483-9267-1b82737e59b5"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="6496f717-885b-4ddc-a770-e71353af3131"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="acdfbdf2-0c7c-4e9c-950b-f927b1a89c5c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update MAC Policy" id="4b227e0b-f298-48a1-ab9d-f5aaa732eaa3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_Policy_Status")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","deleted");
myTC.setPropertyValue("Policy","105");
myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("UserName",tC.getPropertyValue("Username1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node CS" id="c72258af-9d5c-44d8-a518-cdcd7f0733e5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="a3878841-1b33-4845-98d2-02d48ecb38fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>00FE35B510216B7CE05305991F0A6AA3</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_043f976d-7680-4855-a008-a06c0343546a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"00FE35B42C9D3798E05307991F0A5105:6A4ADF2C"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35B510206B7CE05305991F0A6AA3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35B510206B7CE05305991F0A6AA3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FDFAE81BB1450AE05307991F0AFA42</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FDFAE81BB1450AE05307991F0AFA42</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E6966F5684C7AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU/I6FH33V3Tq4zelF1qEjjADAlqPt0MRLy9nYppCpE1qk5bqrz9JsRUQPXpmmGGyu7P22pes5JiBOLLcPmMo5ZgSxRt21X8CMwSWY4caQoal2ejI0oBtB1oHBC1gOuaTE1iq4jGWIY8wDgjvqpZh2prR1szO1HRc23GbZsNsth9VZYZSJqCFS8NQlSKOCHPLsF01S4lLAcPMJSBGzOXQ9fuXF67wdEHFSe0dr1mWAdPegvPE1XXYCBBEUQQbkMb6sb7lcxww18dzAniWoveYAeuq73tXq1Vj1WzQdK5bhmHoRkcXPgHD80O1d1BtRoFHQrpenwBCCYYgwm9AkrpEfEEDpR/NaYr5Iv4C2tRNQ0JrqIAaNG1yqOofAUp2P0TaIpkyoLEFMCuwCQpRighEyu3E66qHP+vgeu80BYSFNI3Zzvp3lBDJUUQTFGisyqxi93PEPeXqHSPoegRGGcM5upJjkgCImHKTohAXF5iJ4QuYUrZfKZj44WrKEPxNW471Ta6Cur6nOkM8R4z/n55t9muNMgNRhnrDdjHBncy5HI/Pw5Vd3BrO6UP6VxGyUbeksOm8JlW3+329O6z1bL1verwD9CxuP7RegDE7J6lJrojftvHF4mw2Pn9dLf3X5nDaH563vNM/1yzvtMbG2+iucPzpbDF+XkxgJ7dOnblxcR0f3MbsKex4LxPdePD9ifd8m4zPbq58PDsbJO0wWt4tn73VJOKJfW8+HfF7u+D33nP7ZjS7GoAr3pkkb0WEO0k0mR78bZydGTf0z9vd43B5Qyeji2X3I6fNHLaNlST42dMzgrxayvHwhspY9Avw7+VFWnCghaWrm0iNYhwRrvbkLiktbiYECAeuaOZ6bRjj4bg/apuDgWk7Rn9kOE3jqNMxx0Z/3LetSoPWLHYonlASYhlLqux6fr4nCGOXIRKgVMtpBheIqd8gDgEHikcm4nBQwtCUChU3W7zdjBCmuWWQFcjZsoiI+Zw/qcoV5dfkOu2HHKXb0t3eku4JgjjBSOq7HHAmJpxxUYsXkGc8Mhs5aBCUiRsglSLsWnbb0RmOkwhJpnpMgyxCjWSRlJXR2fpfaBFkpRUzmNCUg8gsz9+X6e1+qyohfAIsHZhMaYBEN9Geq8iq8vkyb8vczLuC72cBlsdMlJWnGK6ZbH/6mBY5JvWo1IlBZlbc6y2/hNgDoH/DT98tTR0vyPFG9Op6FTeG0JNe1d8X0HhpZHmelR09klqZCnhdSKap+whmQvBep3SJiF5D6D+6b2rWO5Fr+za/jC+IzwFHsZg/pVz+4LHhIyYfG544OMVPXzJbIUXdOCr4PttJJN4kkvG3zxboQuknzDfib0XT4KNde7A24og8xQuDYzKXK3mzvH4xG5AKWCykkKab4PsA9gXfNtZFrrlwMU1PGUdff1GkxnVVACHNCPeGamnY1N2SJ39NkPvh9Amm1Pb3y7pgX17W95cXvlDAGKi1L/5vZw2X4wKRKt8EJZeuWoi3pwhO5hs6/05wR+pHTWfgmIZltAZHJ6XUO2upb/X7zbqAW5n0Ppk/WzZqunseev8C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>AcountDelete_20130916_1379281926451</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463130320</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FDFAE81BB2450AE05307991F0AFA42</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b948c6c1-8581-4ed1-b753-d988b4da9c10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>role</con:name><con:value>nodeIdportal</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdportalCS}</con:value></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdportalCS</con:value></con:property></con:properties><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="Account_Get_SPLCS_P2" id="ab2b6851-4566-4c9b-8f25-17b24e35aaac"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03001_AccountGet_FUNC_SPLCS_User_Access_Basic_200_OK_P2" searchProperties="true" id="8dced46e-5985-4b7c-adf9-5ddcf3c24528"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="d3c5f2ae-2d7e-4213-9fa8-9a32229c0e54"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
//tP.setPropertyValue("audience",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="7cd6c166-2e67-4380-909d-c1fcdb7fa2ce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )


log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult BAU" id="edd95672-ff37-4527-a7a5-ab34c26b1b16"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


tC.setPropertyValue("LegalGuardian","");

//required for Child user Create

//tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FAU1"));
//tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Adult BAU Create" id="739c8611-5f3c-49b6-901e-29848db9893d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )

log.info country;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");


def myTS = tP.getTestSuiteByName("User_Create_API")



myTC.setPropertyValue("Country",country);
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node DECE_CS" id="f05719d1-e992-49ce-b92f-5b0306bebfeb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API with DECE_customersupport" id="78bd9501-1745-4aa7-92e6-101b1476962e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID2",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL2",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID3",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL3",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="83a8887f-9355-4af1-acf4-da31f0e822ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>07C80FD0F07D0564E05307991F0A0E5D</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_44f2a861-b9f0-4ece-b20f-9d342967bcbf</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_44f2a861-b9f0-4ece-b20f-9d342967bcbf</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FC67142C4DFC1339E0401F0A05996248:B5AF5867"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>07C80FD0F0790564E05307991F0A0E5D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:07C80FD0F0790564E05307991F0A0E5D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>07C80FF6E285056EE05307991F0A24CE</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>07C80FF6E288056EE05307991F0A24CE</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>07C80FD53F0B0566E05307991F0A042E</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">07C80FF6E285056EE05307991F0A24CE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:07C80FF6E285056EE05307991F0A24CE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:07C80FF6E288056EE05307991F0A24CE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:07C80FD53F0B0566E05307991F0A042E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:07C80FF6E285056EE05307991F0A24CE</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlM+QY2F1egigmw6wwhCRACedkSsmxEbAksGZN8/UgGHExClt0nl9qt7tPdR0e6YSAKy06bMRRzTElpG4WEOZm1qSQxcShgmDkERIg5HDqj9n3fKWuGAw5blJLbaSr/WJZfBvWqqc4bvqFaCCJ1XjZ8teFVrHKjWpvDuS9cGUuQSxgHhDeVsmFaqmmqpjU2DMe2nLKlVSzzVSlNUMxEbOGiGcoe1JY1lQXnK0fX0zTV0opG40AvG4apT+/7I7hAEVBaN7uKskRxa+8PNU8ACkOoQRrpN3rB58ZjzggHBPAkRvtc3rlchm40dOHjMRxcKfle5LnEp9nyFhBKMAQh/gCyP/eIL6hXaocBjTFfRGeLMA0ZWEVbqELTIleKXoR2YaACwpgBlS2AuY81RD6KEYGo9Dx0m8rVZVPLto5jQJhP44gVl/8NDyIbFNIV8lR2KGsP7fKA33SqdYOg4xIYJgxv0ECSdQUgYvtpInh5qNJjjHy87WMmCLplEp1+DO9kuetGBweI8f8zoKPh7IJMQJigVs2eVOFLNe3MJymere99+7bDn9ojbt43MwDHzpkhH+1ueULKnES7HaNyFPhoNH28Hs90C/jrSYdcN95oXO1tF4CvP3qNSdR+YxU6W0fT6fyDWa7J39MX1rMfevi5MpstVgZLg5e7+tNq4g7wYlyzr73hbze8c9fb+V/m7HFIB/3BfdfqdsavKSE9+Azc6cMyqDemKXy9C14Xs6X+6+N59MDYo12tJPrfGFuDLf/dWw6jfv+pM7h7pM28nCP8RdvhzI+S+RJBflhKGridUk9MCfCfxUxasKf6mauzkuLDOCJcacldUjucRMgd9hwxw93aqN3WjV6v2i3XbcOudruGXTFqjYbZM9pl67Z7EJkdihOIt5T4WOaSkrujzc8AYeQwRDwUqxuaCKVjyg8RO4CDkkuG4hBQwtCYCnluVGFQfY+WICaBafppsKxtbXuJU6U0oPyBPMRtn6O4qMmVgiYPEcQrjKRwS14zQWzGRS/WYJPw0NQ2QCMoEdIeS5UV++q2znC0CpFEqkfUS0KkrRarrDM6233LKoAss2ZthbsTd7a203+HNggfD0sHJuv5hcQo0TcXjHko5kzR9slFdAjfTjwsD5foKY8x3CEp/vqkiuRIzpN9VQfYufepoRBZPy0qT+ZtMMwJn1/bQs3F+W8dxrIG2lpLNpskG0RN6lwswutC7kx9hGAi5Ol9TN8Q0fMQ+kV3QY76JHNuL+JL+IKMOOAoErQpZcsLLv8RYvLydwXft5e+LAopRd842vLvbLeheLhIxD++baADpZ8wP4pPSmPvc1zfxDrKI+oUdz/HJJAreQ+8nyEGpCIsFgpG4+Pg3wX4LnnRmDc5x8IFm+YJR+f/lKQ0NRUAIU0IdztKZjiWywwnf18h59PpS5hMkfMnGv73N5qKMwpAJB52DGfx5U3rSP6T4Ehy90m/qm7H6AmpFaprHauu0bU7eVMK6FpfzF8tR3065XjrDw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMr5gCLgCVcRAhUyADIaQ5CUl5AY0GAksmUu+fiUDDpeQZfcJut3qPn3RUd9xNAttt8o5RIIwmlnPQsrdRFvW4oi6DHHCXYpmwF2BXb/aenLtrOmi/REt06yVtY+CYzklKyjpI3Nk6U6ALL2YC3K6U0IIF22z5OTz0pTzGJqUC0RFWbNNy9EtS7ecnmm6ecc1raxdLLxrmReIuPQtTbKmtgO15mVtIsTcNYzVapVd5bIsGhu2aVrGa+vJxxOYIa1yt80oCRRVdvY4GwCGMMRZzGbGnXFkcxdw1ydjikQcwS5WcCmWaZglQ9oEnIxvtPQsBE06YonoIcoowSgkn0jVpwViwoJMNRyziIjJ7GISlqkc67DGOrYceqMZx9CudHSEMOJI5xNk7Xx1YQQRUAyZfrdZ1m6u61pytBchykcsmvFj8b/hAbqEkM0h0Pk+rR206x1+U6nKHWC3SXEYc7KEthrWOcLAd90EfL2rzHMEI7J+IlwO6JordMYhvBNxW40aGQMX/6dBB83ZOnlBYQyV7qow3QhUqg/ptPqX3Tagm2/fT4Ln+2Y5AXBonCjS1m7Fk6FMh2h7YsEfWovn3/P1r8ErfWQst+nXjUWule/137HvNNYoHuQ3dq3z9t6OGv2R44We9+gXBsP3ddzq+rQ27M8bf0Kv7cUe7vjcmpSGnWpr5bx5q5dPp5Dr/H59WveL1kNj+EneB4N287VmG29Vf5q3RWQ9WH5cGI0DKJT+2NNBlz02p5/ol1UMn/ODUnuZG29qrxPfWezSPcF/rNvfeT8e/gUs9qIag2Yt05BdQuJnMlMaEuijxNSdK/LhAqjQKuqU4g43lnRHAlf2cCubt17RbDQKdbtYNPOFet3M58zbUslqmFXb8ep7ktmiOIHoMToiKpai3O3Y/AwQz1wONIBIX7JYMh3XfvBYQwJlmrQrLwGjHHpM0jO2YSNm4OQC2yS3ZGIxQSAOx1qmzUSHdqLqSEB0TMm5I0ruAiZzAoq31VhzOddcyFIs0DIWoZVdoiyFWDJ7pEjWtZ1i3uBkNg9BATVmLIhDyM4n86QwBt/+2jrCPNF2673ksl1M6/TbvgLSJiDKgKtc7kF2Ec7eFpnLPpHLCRcOE967r8YBUfdKllNEBG+RHH/6mhI1HumIyIw+PP/D2uNOza8+fn7S+AGUcVqPNFCwJAdh9y+3fAMka1T23Vyg7CIbL5dx0r9bxY6RdG9IkrQMH3AsSW3TY1OgRurCuOoFSVGfRE71x/hiMaG+QAJmctoyiXjFyuADVytDU96S9bX7yFFIWTcBa/GdzgvluqMQ/7gRYRcrO6l+lj8rFgVf7frG10EcmafcGAShYyWp12NzYSgwk26J5D0WHTr/zsF3wY+VaZFTLEJO0zAWcPlLRhFaWUMYs5iKZk1LFIckm+AUmzm4X0ZnbhIeTxc78u+bnU6SEcAg10FOEv/qfXbV/NPxAVHvgp5zdc1syD+Sq51Drjbr+VpalCN0lTP1ueagTqczXvkH</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlM+QY2F1egigmw6wwhCRACedkSsmxEbAksGZN8/UgGHExClt0nl9qt7tPdR0e6YSAKy06bMRRzTElpG4WEOZm1qSQxcShgmDkERIg5HDqj9n3fKWuGAw5blJLbaSr/WJZfBvWqqc4bvqFaCCJ1XjZ8teFVrHKjWpvDuS9cGUuQSxgHhDeVsmFaqmmqpjU2DMe2nLKlVSzzVSlNUMxEbOGiGcoe1JY1lQXnK0fX0zTV0opG40AvG4apT+/7I7hAEVBaN7uKskRxa+8PNU8ACkOoQRrpN3rB58ZjzggHBPAkRvtc3rlchm40dOHjMRxcKfle5LnEp9nyFhBKMAQh/gCyP/eIL6hXaocBjTFfRGeLMA0ZWEVbqELTIleKXoR2YaACwpgBlS2AuY81RD6KEYGo9Dx0m8rVZVPLto5jQJhP44gVl/8NDyIbFNIV8lR2KGsP7fKA33SqdYOg4xIYJgxv0ECSdQUgYvtpInh5qNJjjHy87WMmCLplEp1+DO9kuetGBweI8f8zoKPh7IJMQJigVs2eVOFLNe3MJymere99+7bDn9ojbt43MwDHzpkhH+1ueULKnES7HaNyFPhoNH28Hs90C/jrSYdcN95oXO1tF4CvP3qNSdR+YxU6W0fT6fyDWa7J39MX1rMfevi5MpstVgZLg5e7+tNq4g7wYlyzr73hbze8c9fb+V/m7HFIB/3BfdfqdsavKSE9+Azc6cMyqDemKXy9C14Xs6X+6+N59MDYo12tJPrfGFuDLf/dWw6jfv+pM7h7pM28nCP8RdvhzI+S+RJBflhKGridUk9MCfCfxUxasKf6mauzkuLDOCJcacldUjucRMgd9hwxw93aqN3WjV6v2i3XbcOudruGXTFqjYbZM9pl67Z7EJkdihOIt5T4WOaSkrujzc8AYeQwRDwUqxuaCKVjyg8RO4CDkkuG4hBQwtCYCnluVGFQfY+WICaBafppsKxtbXuJU6U0oPyBPMRtn6O4qMmVgiYPEcQrjKRwS14zQWzGRS/WYJPw0NQ2QCMoEdIeS5UV++q2znC0CpFEqkfUS0KkrRarrDM6233LKoAss2ZthbsTd7a203+HNggfD0sHJuv5hcQo0TcXjHko5kzR9slFdAjfTjwsD5foKY8x3CEp/vqkiuRIzpN9VQfYufepoRBZPy0qT+ZtMMwJn1/bQs3F+W8dxrIG2lpLNpskG0RN6lwswutC7kx9hGAi5Ol9TN8Q0fMQ+kV3QY76JHNuL+JL+IKMOOAoErQpZcsLLv8RYvLydwXft5e+LAopRd842vLvbLeheLhIxD++baADpZ8wP4pPSmPvc1zfxDrKI+oUdz/HJJAreQ+8nyEGpCIsFgpG4+Pg3wX4LnnRmDc5x8IFm+YJR+f/lKQ0NRUAIU0IdztKZjiWywwnf18h59PpS5hMkfMnGv73N5qKMwpAJB52DGfx5U3rSP6T4Ehy90m/qm7H6AmpFaprHauu0bU7eVMK6FpfzF8tR3065XjrDw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbfc6I6FH7fv4JhH3eQIFIKU53BX/e6q3a3urbry50YgsZCoCQg9q+/CRaqru3t3hedHE7O+c45X77khsEobLoeYzjlJKbKqN9W/4EQt8CVsdKMFlhpLWxfaSvDAVqAHICA1bJXK0NVRoxleEQZh5S31SYwTA04mgnmhumapmvYjevr1lJVFjhlIrRwaQBVKaKQMrdM21azlLoxZIS5FEaYuRy5M28ydoWnCytMaufmgLJMmHY2nCeurqOGjxEOQ9RAcaTf6Cc+Nz5zZ2RNIc9S/JLTZ231Ze9ut2vszEacrvUmAEAHji58fEbWn9XOp2oz9kc0iA/rHqQxJQiG5BlKUBPMN7GveOE6TgnfRG+ENnQDyNAaLpCGjBb9rOqvCUp0H4x0AjJlUGMbaFTB7nCAU0wRVn7ejdrq549N8LB3nkLKgjiN2Nn6zyBhmuMwTrCvsaqyCt3HI15oV+cGI3dEUZgxkuOppEkCEWbK9xQHpBgTJsjnM6Ucv1KwimEY/clIbvRjnAK2fqEzfbLGjP+feR3P6hBlAcMMdx5b9073/sGcYicM4HCOvqKxPn6ez5qsXUI4dj6Aqkf9sj4nas2rl03fbMtLH8x+wB0rMr8tp2C7fPgybu7302Lo6/D5cf+rN42T7mKftYYBvNqG5q7IyASvnUXcW/6k1mAz+EaDYUI+cTO3yOSp4Pch8GdLL7/7miyDCI1vl3erWy/8i+UbP8/tL/CXKWRhu6LrH0XSHJt5eGtZ03mcZGNMn4a/flrPn74vFktjsf7qX2+cR29rOrNJ+7Wm4xpOjZUczLLVFiNeLSU1Rn1lKOYF+fvSIi3E14LS1U2kPjGOKVc7cpeUFTcT4kN8VwzzsB7YV2avaxvdgeV1Lbs7AC1gDIEHLMexmhao9OeA4gxiL6YBkbmkwh748z5AFLkMUx+nWh5naIOZ+k7EPuRQGdE7cTBiyvA8FgpemH8/X9OtvX/8+2G9/JFtd8ywJ/eTRiaiBkQwRlWmMb+lt6kXcJye6vfViX7fYUQSgqXIS6YzQXXGRVOeYJ7x0GjksEFxJq6BVCqx22xdWzojURJiCVmPYj8LcSPZJGWLdHb4b2oQsdIq+4tYeQjfrPH8W9UO4eMT6cBkOV0sRoov3EWgquVCzQbQgHF2Z1Xhvcwn8qyJ3vKUoAOS00+vlJFcqflS/iBWwa69zw0nkfXzoupkfk5QTfz6thZiL+SgU03lCTaeGlmeZ+UcbCl1qQivGzqw9RlGmdCr/Tx+xFSvQ+gfuipq1GeZa/spvoxv6IxDjiPBGqVcfuCdMMNMvhNGgqHFRx8hJylF3zgu+CVbLxTPCYn43RcHcpH0E+bv4m8Xp/7ruC7EOsoj6hSPA07oWq7kxbB/gxgoFmGJULI4PQ5+KcCl5KfGusk1Fi7YtMo4fvuLIiWqrUKE4ozyUV8tDceyWeLk+wS7r06/hSml+eWuLdibd+3DZDwTAhZBtfYl/+2skZIuCItdjJRY2mohno0iOV0fyfQLwFOltnu2N2gN+n37ynO8WqltxzG8llc38KSSzm/m3y1HPT0/D51/AQ==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>accountget_firstuser20141114_1415926489590</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20141114_1415926489590</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20141114_1415926509262</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>07C80FF6E289056EE05307991F0A24CE</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>07C80FD53F0C0566E05307991F0A042E</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>NODE_ACCOUNT_ID2</con:name><con:value>07C80FD0F0790564E05307991F0A0E5D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL2</con:name><con:value>urn:dece:accountid:org:dece:07C80FD0F0790564E05307991F0A0E5D</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b44627d5-7732-472b-b74e-aeac81a3f1ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78bd9501-1745-4aa7-92e6-101b1476962e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>83a8887f-9355-4af1-acf4-da31f0e822ad</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03002_AccountGet_FUNC_SPLCS_User_Access_Standard_200_OK_P2" searchProperties="true" id="8c54c7b9-364d-4589-874d-168432253eb6"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="05473610-6eb9-4e99-9011-56d1d1aed87b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="cedfcf08-2215-4242-b7cd-72ac6a540578"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult SAU" id="9a2cb265-6948-4ab8-80f5-4ff66bdfea6a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


tC.setPropertyValue("LegalGuardian","");

//required for Child user Create

//tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID_FAU1"));
//tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Adult SAU Create" id="68d6fe9d-f5b8-41fa-853b-a77eabd8b77a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )

log.info country;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");


def myTS = tP.getTestSuiteByName("User_Create_API")


myTC.setPropertyValue("Country",country);
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;


tC.setPropertyValue("SAML_USER2",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node DECE_CS" id="59dc7201-8655-4b3c-8729-3acb51a063bb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API with DECE_customersupport" id="8c11e7ca-2b56-4a03-aa40-eeee7485d570"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID2",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL2",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID3",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL3",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="0aeaad44-c7da-4490-865f-fd684c9af5a2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>FC67142C4E011339E0401F0A05996248</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_ec2da919-134f-497e-956b-9720aa71720a</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_ec2da919-134f-497e-956b-9720aa71720a</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FC6714381CEA5EAFE0401F0A05996254:5436B2EC"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC67142C4DFD1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC67142C4DFD1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>FC67139613F2EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC67139613F5EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FC6713988906640FE0401F0A05996252</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC67139613F2EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:FC67139613F2EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC67139613F5EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FC6713988906640FE0401F0A05996252</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:FC67139613F2EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGljyjkArQkKkgUSpfeC5zS5eXIdQZimtjUdrjsr187kBTo5XSPFCnyZDzzzcyXzz4VKIm9oCUEcEkYNXqdhvkvYC9EvutbbqU6sar+CVh+7fjZ8k88B6ETV79MoydECj0qJKKyYXqOW7WcY8vzhk4tqNYCxy27dWdsGo/AhQqtXMqOaaySmIogS9swU04DhgQRAUUJiEDiYNC6uQ6UZ4ByTGbzdIMyS8ibkZTzwLZxOQQMcYzLmCX2qb3ncxqKYECmFMmUwzZnKBrmdu9yuSwvK2XGp7bnOI7t+LbyCQWZHpnNH/lmCHt0wjbrNqKMEoxi8htpUDcgIxYarXjKOJFR8klo13YdHdqCFbawW6VHpv2WIEP3zUh7ILlAloiQmwfrwwQ4UAzGP/1ewzz63gQ3e4ccUTFhPBEH67+DBHQBMZtDaIm8shzd9yN+0K7mKeCgR3GcCrKAW02TOcIgjHsOE7K6JkKRLxRGNn5jJdRDcpYB/puxnNq7WBV0+4PudMgUhPw/M9ud1ybKI4pTaOLh7BZd13mbVRbt6OHs2iUsSkvpHC8bGYRd5w2oYtzb9SFZC25tN92Ob3vr0ln/yaUiWqbkuj6+qQ1m5/Qcy9H52X0yolM2pFNYhYOevXIm9uzsko4uOgPXWYWt21p6/2tUu6QdkfR/jEcnF6RbirrH3tjpyNI6Yvc++MPfT5dPQxatRy+lh37rYsAIxmPOf05Ld+1FXA9tP76a/Kouzmz7ajR97N71L+9+TMZ3/PHqshSjtP5Kfs4uOg+Nt5p2a9g35pIwSJ9ngGW+1PTodYyumheSX8uLtpDQmmSuwVxrlJBApdnUu7S0BKkSIBIGapibdbd9fOJW/GO30vXOu/X2uVN13K7Tcmq+f+zVnFyDNigOILYZnRCdS6vshj9fA8RJIICGwK0FS3EEwvwiYgdJZPRoX/0cjAoYskzFK567ns3mbBKHKv4SwpeXcM1N45bJO3rHWxMJfF+563vK3QdM5gS0vGt+C0VwIVUrXtEilbFbXqAyhVQdAFxrcOBV6zVbkGQegwZqJyxMYyjPo3nWGFts3p6FsMisWVexyP69T0s7/JZ3QfmERDsIXc8ZqEnCu2OoGtTyYj4punJwXOXhW2lI9C+mWio5wRsk+5/emKIpUtBkW1UOu/A+NOxFtg+LKpKFC4ILvhcHtdJ5pQLNfCyvqPxaTheLNBvEiVY4rsLbSuhcewA4VTK1HrIXoHYRwv7WKVGgPshc2PfxpTKiA4kkJIo2Rrb8xhVhAEJfEXqK7qvv3j/2Uqq+SVjJj2ztWN0kNOIvLxs4wNpPme/Va8l4+DauD2Lt5FF1qnuBJHSqV/o8WH9CDMxUWKIEjPHd4B8F+Cj5vrFocoFFKjY9pxI+/2JoZWqYCGOWUtnrmJlhVy0znHI9h+DN6V2YTJG3R+xKfHrEPt1cD5RuJcgsfMl/O1skowsGU5/kGZaGuVI3RpWcTnfUeQvwnUBXvXa10+24lYq/L9DVetHAvUqa78zvLTs9Pfwfmn8A</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGljyjkArQkKkgUSpfeC5zS5eXIdQZimtjUdrjsr187kBTo5XSPFCnyZDzzzcyXzz4VKIm9oCUEcEkYNXqdhvkvYC9EvutbbqU6sar+CVh+7fjZ8k88B6ETV79MoydECj0qJKKyYXqOW7WcY8vzhk4tqNYCxy27dWdsGo/AhQqtXMqOaaySmIogS9swU04DhgQRAUUJiEDiYNC6uQ6UZ4ByTGbzdIMyS8ibkZTzwLZxOQQMcYzLmCX2qb3ncxqKYECmFMmUwzZnKBrmdu9yuSwvK2XGp7bnOI7t+LbyCQWZHpnNH/lmCHt0wjbrNqKMEoxi8htpUDcgIxYarXjKOJFR8klo13YdHdqCFbawW6VHpv2WIEP3zUh7ILlAloiQmwfrwwQ4UAzGP/1ewzz63gQ3e4ccUTFhPBEH67+DBHQBMZtDaIm8shzd9yN+0K7mKeCgR3GcCrKAW02TOcIgjHsOE7K6JkKRLxRGNn5jJdRDcpYB/puxnNq7WBV0+4PudMgUhPw/M9ud1ybKI4pTaOLh7BZd13mbVRbt6OHs2iUsSkvpHC8bGYRd5w2oYtzb9SFZC25tN92Ob3vr0ln/yaUiWqbkuj6+qQ1m5/Qcy9H52X0yolM2pFNYhYOevXIm9uzsko4uOgPXWYWt21p6/2tUu6QdkfR/jEcnF6RbirrH3tjpyNI6Yvc++MPfT5dPQxatRy+lh37rYsAIxmPOf05Ld+1FXA9tP76a/Kouzmz7ajR97N71L+9+TMZ3/PHqshSjtP5Kfs4uOg+Nt5p2a9g35pIwSJ9ngGW+1PTodYyumheSX8uLtpDQmmSuwVxrlJBApdnUu7S0BKkSIBIGapibdbd9fOJW/GO30vXOu/X2uVN13K7Tcmq+f+zVnFyDNigOILYZnRCdS6vshj9fA8RJIICGwK0FS3EEwvwiYgdJZPRoX/0cjAoYskzFK567ns3mbBKHKv4SwpeXcM1N45bJO3rHWxMJfF+563vK3QdM5gS0vGt+C0VwIVUrXtEilbFbXqAyhVQdAFxrcOBV6zVbkGQegwZqJyxMYyjPo3nWGFts3p6FsMisWVexyP69T0s7/JZ3QfmERDsIXc8ZqEnCu2OoGtTyYj4punJwXOXhW2lI9C+mWio5wRsk+5/emKIpUtBkW1UOu/A+NOxFtg+LKpKFC4ILvhcHtdJ5pQLNfCyvqPxaTheLNBvEiVY4rsLbSuhcewA4VTK1HrIXoHYRwv7WKVGgPshc2PfxpTKiA4kkJIo2Rrb8xhVhAEJfEXqK7qvv3j/2Uqq+SVjJj2ztWN0kNOIvLxs4wNpPme/Va8l4+DauD2Lt5FF1qnuBJHSqV/o8WH9CDMxUWKIEjPHd4B8F+Cj5vrFocoFFKjY9pxI+/2JoZWqYCGOWUtnrmJlhVy0znHI9h+DN6V2YTJG3R+xKfHrEPt1cD5RuJcgsfMl/O1skowsGU5/kGZaGuVI3RpWcTnfUeQvwnUBXvXa10+24lYq/L9DVetHAvUqa78zvLTs9Pfwfmn8A</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb/I4EH3vr4jSxyrkQrhFgESh7McWegHa7fZlZZwBXBIbYgfS/vq1A0mBQrffSkjIk/GZMxcfu85RGDhei3OIBGFU63Ua+j9+dTKZODXX8MsV23Adq2JUqyVsIChNyna5Zk2rtq71OI+hR7lAVDR0x7JdwyobjjO2Sp7reqVawS05r7r2DBGX0NKlYOlaEgaUe2nYhh5H1GOIE+5RFAL3BPZGrUHfk54eyjjpzfqWZRowas6FWHqmiQs+YAgCXMAsNOvmgU/d596IzCgScQS7mD5v6Lu9m82msCkWWDQzHcuyTKtmSh+fk9ml3rzINoPfo1O2XbcRZZRgFJAPpEgNQMyZr7WCGYuImIdnoG3TthS0AQk2sO3SS938DJCy+yHSAcmII4PPkZ2BDWEKEVAM2tOw19Avf9bB7d5xhCifsijkR+vfowR0DQFbgm/wLLOM3c8RT5SrWQfs9SgOYk7WcKfGZIkwcO0hgilJ+oTL4fO5lrZfS7j8kWzKAP9OW+rmPldJ3TxRnQ6ZARf/p2f7/dqiPKMghiZ0bpN15a+AojKJ7/uExoyEzzfP8DBopBT2nbek8nbv1sfDms/WbtO9Sza8cnvd8mEYb94G1gD35+7Vx2QSUPfPpOe8dFY3HUrHT9aVsxgU48XjBPd/kbeqc/PqfswXS/KAZ+bd9dB6uSix55d54MzE49tizQgx36/Dq779FCaj++nt+pYM/u4GIuEb2hVmxezTR7PjvPb9O7ywa91Z8Y9NUAkXv35Nu373YrapiavO02t3djto96fz5Jk1PnPaz+HQmEnCKJ68ARbZUo1Hr6N1Zb+Q+F5elIX4xjR19ZZKo7gAKvSm2qWkxYulABHfk83crrtteZiKtWq1ZpXLrtW9sVzL7lotq1SrlZ2Sk2nQlsURxTajU6JiKZXdzs/3BHHocaA+RMaaxXgOXP8GsYME0np0KA8HoxzGTKp4ZYkIdfxJuFqubExX1ZJVEtUaEbp2x8Q9vY9aUwHRoXRXD6R7CJgsCSh9VwPO5YRzIWuxQutYBHZhjQoUYnkDREqEPcetlkxOwmUAiqkZMj8OoLCcL9PKmHz77xgI89Q6vBmnB+9sXsffshJIH58oB65yuQbZRjhxB7lZImcTtu39hDP4VuwTdb5kPUVE8JbJ4afPMVHzkc+IzCijnHseGw5QzeOE8kD+muB80PMbWgq8PP7NrB0rVFgV4vU6ThtQUdIWSXhTKpxtjgDHUp/ex2wB1MwhzB9dDznro8i5/ZBfLOZ0JJCAUI6Lli5/8DYYAVdvg56c8+SnD4+DkLJuAhJxytYO5BNCMf72lYE9rPyk+UH+bVjkf7brBNZeHJmnfBAIQmdqpS6C9zNDgZmEJVK5WLQPfgrgVPBDY17knIuQ0zSJBZz/oilJaugIYxZT0evoqWFfJlOe4n0J3qfTF5hUind3a8LP3q0vg/5IClaI9NyX/LezQdJxwaCrKzzl0tAT+VSUwelsT5Z3BL8os+u03RsJWSzWDpXZreYFPMik+cX81bJX0+Pz0PwX</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbcuI4EH2fr3A5j1vGNubqClQBJinvhITBTG4vW4rcBgVbAkvmMl+/kokdYEg2sy9Qare6T3cfHemSoySuuj3OIRWEUc33Ovo/ThS12i9VxwDUiIxay46MFxyBEVpRA9eqEbw02rrmc56BT7lAVHT0qmU7htU2HGtqO65Tc2tWxapVn3XtHlIuQ0uXiqVr2ySm3M3TdvQspS5DnHCXogS4K7Ab9EY3rvR0UYFJ717uUeYJ0+5ciKVrmrgSAoY4xhXMEvPSPPK5DLkbkBlFIkvhLWfIO/rb3s1mU9k4FZbOzKplWabVNqVPyMnsQu9+KzZD6NOI7dcDRBklGMXkF1KgRiDmLNR68YylRMyTD0Lbpm2p0AZssYHtGr3QzfcEObovRjoCmXJk8Dmyi2ATiCAFikH7OfE7+sXXJrjfO00R5RFLE36y/jNIQNcQsyWEBi8qK9B9PeKZdnUvAbs+xXHGyRpuFU2WCAPXxilEZHtDuCRfyLV8/NqWFwwD/CcjuTQPcUrY5pnOeGQGXPyfeR3Oah/lHsUZdE32cN1y6izaDHfTMbz+mG+FSVoOI7iTQzh03oMqR/22PiVqyau3Tdvm7tobedb9T/zjr9pmuKmSp9u/g9dlffU6Ta5ajxAM+4vo+yQZ+3Hj6mE3zryne8rGs2mzEWWrhya6enod1VfBkn27ia4fbhd40Vgsrnz0c73CN47faD1nz9z2nqg15z++8zs2mgdp1VssGoP1iCae1wa4tXEwM+1x83rTeFwIcPrfyLIONz3MRhFMzLg/m/T8zntNhzUcGws5CLKXV8CiWCpq+J52JeeFxOfSoiwkNKLc1V0qfeICqNC7apeSFTeT4kNCVw5zvx42G86g37QHtjfs15v9oVWz7CurZ9Xb7Xq1bhX6s0dxAnHAaERULqWwe/58DhAnLgcaQmqsWYbnwPVPInpIIM2nE3kwGOUwZVLBw8dhYzdr3WUwFc93qc1buzgweqNKJqNGRDJG126ZuKN3aS8SkB7rd+NIvyeAyZKAEnnFdC6pzoVsygqtMxHblTWqUMjkNZAqJXartVbd5CRZxqAgmwkLsxgqy/kyb5HJ9/9VA2GeW1V/Mc8P4Yc1nn4r2iF9QqIcuCqnD3KkcOYucopaztRsW4Zln9xZRfheFhJ11mRvRUrwHsnxp3fKKK6UfMl/MC9gl96nhqPI5mlRZbJwTXBJ/PK2lmIv5aBbTGWFKqtKtl5n+RyaSupSGd60TatpBoAzqVe7KVsANcsQ5peuihL1SebSfowvE3MaCCQgkazR8uUX3gkBcPVO8CVDt199hByllH0TsBXnbINYPicU4k9fHNjFyk+ax/Jvw9LwfVxnYh3kkXXKx4EgdKZW6mLYfUAMzGRYIpWMpYfBzwU4l/zYWDa5xCIkm14yAR9/0ZREdXSEMcuo8D09NxzKZo5T7Jbgvjv9FiaX5re7dss/vGsfRzeBFLAE6aUv+W9ng+R0wSB3cZJj6ehb+WyUyensQKbfAJ5X6oH3mVIfV9L9zfy75aCnp+eh+y8=</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>accountget_firstuser20140622_1403415895469</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415895469</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20140622_1403415898528</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC67139613F6EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>FC6713988907640FE0401F0A05996252</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>NODE_ACCOUNT_ID2</con:name><con:value>FC67142C4DFD1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL2</con:name><con:value>urn:dece:accountid:org:dece:FC67142C4DFD1339E0401F0A05996248</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5da56a8d-11f7-4984-99b2-aa2ad88ae0d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c11e7ca-2b56-4a03-aa40-eeee7485d570</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0aeaad44-c7da-4490-865f-fd684c9af5a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03004_AccountGet_FUNC_SPLCS_Account_Status_as_Deleted_200_OK_P2" searchProperties="true" id="bfaa9474-fd6e-4580-a5ed-e914b1703de3"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="8e54c507-f344-4a6f-bed0-29a3aff6f0ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="a52fdb1f-9017-4123-9f0f-2ddfbcaab9e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node DECE_CS" id="fb8dfc60-2c67-496e-9351-d85c95e4a4cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API with DECE_customersupport" id="6380ae8b-5f4e-4164-9879-8c78db3e2dc2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID2",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL2",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="82156055-ad50-43ea-8723-8e44f8512cdf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","deleted");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="1c70602d-9470-4b51-a4e8-5bfb8c7bd7ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

myTC.setPropertyValue("CS",tS.getPropertyValue("CustomerSupport"));
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>FC67142C4E421339E0401F0A05996248</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_90852a42-37fe-45a0-bcd0-b03e42894b69</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_90852a42-37fe-45a0-bcd0-b03e42894b69</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FC671437C4BE8932E0401F0A05996246:DE5D1401"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC67142C4E3E1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC67142C4E3E1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>FC6713E659AEE8B3E0401F0A0599624A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6713E659B1E8B3E0401F0A0599624A</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FC6713E659AEE8B3E0401F0A0599624A</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:FC6713E659AEE8B3E0401F0A0599624A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6713E659B1E8B3E0401F0A0599624A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FC6713E659AEE8B3E0401F0A0599624A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx3jCzYxnsAM4dI4zYUGkrZ5OSPkBZTYkrFkIPn1RzLYAUJy0jPD4NF6tfvt7udPOuUoiZ2gwzlkgjCqhb2W/k/T8j0HuY5RP5mC4XrIMiY4kn9WHVzHb7qTRlPXQs5zCCkXiIqW7li2a1gNw3HGlhe4XmA7tUbTf9C1e8i4DC1dapaurZOY8qBI29LzjAYMccIDihLggcDBqHN1GUjPAJWY9PbpBmWRMGvPhUgD08S1CDDEMa5hlpin5p7PacSDEZlRJPIMtjkj3tK3e1erVW1Vr7FsZjqWZZlW05Q+ESezr3r7S7kZopBO2WbdRZRRglFMXpACdQViziKtE89YRsQ8eSe0bdqWCm3AGhvYdulX3XxNUKD7ZKQ9kBlHBp8juwx2C1PIgGLQ7m7Dlv71cxPc7B1niPIpyxJ+sP47SECXELMUIoOXlZXoPh/xSLvap4CDkOI452QJ14omKcLAtWEGU7K+JFySL+JaMX5tzeWPlCwD/DdjOTV3sUro5pHu9MgMuPg/M9ud1ybKPYpzaE/OZ9fd8UUS+114SBvuWQO8ISV3Jpm1Cgi7zhtQ1bi360OyVtzabsp/M++nyUaji59RFMdTsz+9m46X/mrw+PSnMYKHTu/uOnzwxsOLX5bIvj1+765vkixb8Okf/O0HWfzoXfG7FwsmL/4XcyWeZr3x/H4+nHT/9OMwfRr0hqPR/GmAvJcZGSwGi9/Rt6gZR+Nbf5V2TT5Mh/X7Rt4IV+w8N1fM64Xgf186gy+XIFt4Ds2m+2s8XHT5CeWt15p2a9g3lpIwyiePgEW5VPQIe9pAzguJj+VFWUhkTAvXIFUaxQVQobfVLiUtQS4FiESBHOZmPeg2Tux6v+E1O/2+f1bvW65lD6yO5TWbDcftlBq0QXEAscvolKhcSmU3/PkYIE4CDjSCzFiyHM+B6x9E7CGBtJDeyo+DUQ5jJlXcxszmjo8ay3ld2I+REJ7l2vP40dG1ayZu6E3WmQrI9rXb39PuW8AkJaAEXjGcS4pzIZuxQMtcxHZtiWoUcnkEZEqFA8f1PZOTJI1BQTUTFuUx1NJ5WrTG5JunYyDMC2vRV8yLr+/d4g7flX2QPhFRDlzVcwZylnDkILLKYt4pun5wYJXhO3lE1EcmmyoygjdI9l+9ckWRpCLKtqoSduV9aNiLbB4WVSWLlgRXjK+Oaqn0Ugfa5VgWqLao5ctlXgziRGlcJsObUupscwQ4l0L1PGZPQM0qhPmpc6JCfZC5su/jy8WcjgQSkEjaaMXyE5eEEXB1SQgl4defvYHspZR9E7AWx2zdWN4lFOIPrxs4wMpPmofysWJZ9DquI7F28sg65c1AEDpTK3UiPL9DDMxkWCIljGW7wY8FOJZ831g1ucIiJJsmuYD332hKm1o6wpjlVIQ9vTDs6mWBUzynELw6vQlTaPL2kF3zdw/Z31eXI6lcCdIrX/LfzgYp6IJBV2d5gaWlr+WdUSansx193gJ8I9Gu03X79b5drzcPJNqvGrhXSfuN+a1lp6eH30P7Xw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx3jCzYxnsAM4dI4zYUGkrZ5OSPkBZTYkrFkIPn1RzLYAUJy0jPD4NF6tfvt7udPOuUoiZ2gwzlkgjCqhb2W/k/T8j0HuY5RP5mC4XrIMiY4kn9WHVzHb7qTRlPXQs5zCCkXiIqW7li2a1gNw3HGlhe4XmA7tUbTf9C1e8i4DC1dapaurZOY8qBI29LzjAYMccIDihLggcDBqHN1GUjPAJWY9PbpBmWRMGvPhUgD08S1CDDEMa5hlpin5p7PacSDEZlRJPIMtjkj3tK3e1erVW1Vr7FsZjqWZZlW05Q+ESezr3r7S7kZopBO2WbdRZRRglFMXpACdQViziKtE89YRsQ8eSe0bdqWCm3AGhvYdulX3XxNUKD7ZKQ9kBlHBp8juwx2C1PIgGLQ7m7Dlv71cxPc7B1niPIpyxJ+sP47SECXELMUIoOXlZXoPh/xSLvap4CDkOI452QJ14omKcLAtWEGU7K+JFySL+JaMX5tzeWPlCwD/DdjOTV3sUro5pHu9MgMuPg/M9ud1ybKPYpzaE/OZ9fd8UUS+114SBvuWQO8ISV3Jpm1Cgi7zhtQ1bi360OyVtzabsp/M++nyUaji59RFMdTsz+9m46X/mrw+PSnMYKHTu/uOnzwxsOLX5bIvj1+765vkixb8Okf/O0HWfzoXfG7FwsmL/4XcyWeZr3x/H4+nHT/9OMwfRr0hqPR/GmAvJcZGSwGi9/Rt6gZR+Nbf5V2TT5Mh/X7Rt4IV+w8N1fM64Xgf186gy+XIFt4Ds2m+2s8XHT5CeWt15p2a9g3lpIwyiePgEW5VPQIe9pAzguJj+VFWUhkTAvXIFUaxQVQobfVLiUtQS4FiESBHOZmPeg2Tux6v+E1O/2+f1bvW65lD6yO5TWbDcftlBq0QXEAscvolKhcSmU3/PkYIE4CDjSCzFiyHM+B6x9E7CGBtJDeyo+DUQ5jJlXcxszmjo8ay3ld2I+REJ7l2vP40dG1ayZu6E3WmQrI9rXb39PuW8AkJaAEXjGcS4pzIZuxQMtcxHZtiWoUcnkEZEqFA8f1PZOTJI1BQTUTFuUx1NJ5WrTG5JunYyDMC2vRV8yLr+/d4g7flX2QPhFRDlzVcwZylnDkILLKYt4pun5wYJXhO3lE1EcmmyoygjdI9l+9ckWRpCLKtqoSduV9aNiLbB4WVSWLlgRXjK+Oaqn0Ugfa5VgWqLao5ctlXgziRGlcJsObUupscwQ4l0L1PGZPQM0qhPmpc6JCfZC5su/jy8WcjgQSkEjaaMXyE5eEEXB1SQgl4defvYHspZR9E7AWx2zdWN4lFOIPrxs4wMpPmofysWJZ9DquI7F28sg65c1AEDpTK3UiPL9DDMxkWCIljGW7wY8FOJZ831g1ucIiJJsmuYD332hKm1o6wpjlVIQ9vTDs6mWBUzynELw6vQlTaPL2kF3zdw/Z31eXI6lcCdIrX/LfzgYp6IJBV2d5gaWlr+WdUSansx193gJ8I9Gu03X79b5drzcPJNqvGrhXSfuN+a1lp6eH30P7Xw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>accountget_firstuser20140622_1403415909486</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415909486</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6713E659B2E8B3E0401F0A0599624A</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>NODE_ACCOUNT_ID2</con:name><con:value>FC67142C4E3E1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL2</con:name><con:value>urn:dece:accountid:org:dece:FC67142C4E3E1339E0401F0A05996248</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3e547787-1c67-44f1-8222-075c64836e4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a5fcc0b1-d902-49c5-9c1e-4f4e14cd5ca5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c97ebf6-7638-48bc-b0fd-086f9da84a7a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03006_AccountGet_FUNC_SPLCS_Account_Status_as_Active_200_OK_P2" searchProperties="true" id="2cc3c445-0a53-432c-b8dc-4ad90139da2d"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="3c201d21-8c4a-4654-ab68-5acfbb9c2681"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="1b08c25e-db1a-438b-abf5-92fbfa171ffc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node DECE_CS" id="657c6230-fd1b-4861-b7f8-23fd49cbc494"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API with DECE_customersupport" id="7c973350-a1c0-44bb-8ac8-06f25ebeefa7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID2",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL2",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" disabled="true" id="f1f369f6-c5e5-4e1c-b1ce-97ac7e2c99f6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","other");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="f2defa18-4380-4b32-8a95-bb417f275c27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

myTC.setPropertyValue("CS",tS.getPropertyValue("CustomerSupport"));
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>07C82B58D4B74719E05307991F0A3805</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_d906a404-5306-4b77-991d-a57d21460db7</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_d906a404-5306-4b77-991d-a57d21460db7</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"07C82CBEC9E74B21E05307991F0A7A93:C6F2B1CD"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>07C82B58D4B34719E05307991F0A3805</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:07C82B58D4B34719E05307991F0A3805</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>07C82B5FFE5D471DE05307991F0A0FB3</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>07C82B5FFE60471DE05307991F0A0FB3</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>07C82B5FFE5D471DE05307991F0A0FB3</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:07C82B5FFE5D471DE05307991F0A0FB3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:07C82B5FFE60471DE05307991F0A0FB3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:07C82B5FFE5D471DE05307991F0A0FB3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EP0rKH1EIR8EAlFBolBauu2WBcq2fbkyzgBmEyfEDqT8+rUDpIRCL/dKSMiT8cyZmeNjXzPke6bTYgwiTgJaSHyPMie1NpQ4ok6AGGEORT4wh2Nn2Hp6dMyS7qD9FqXQ6zSUf9y6XkWWbqmVsl5VrYltq/W64aqoYrumYVV1d2ILV8Zi6FHGEeUNxdQNSzUM1bBGuuGIX6VaMuv1d6UwhoiJ2MKlpCs7UAlrKHPOQ0fT1ut1aV0uBdFMM3Xd0F6fHod4Dj5SmtfbitJEUXPnj0suYPA8XMKBr11rOZ9rlzlDMqOIxxHscrnncumaXteEj8vI7ErJ9oLbo9MgXbYRDSjByCMbJPvzBHweuIWWNwsiwuf+2SIMXQZWIcEqNix6pWh5aBcGyiGMGFLZHBm7WAOYQgQUQ+Fl0GsoV5dNLd06ihBl0yDyWX753/AAXYEXhOCqbF/WDtrlAU90qnkN2OlR7MWMrOCnJGuIMLDdNAFfHqrQj2BKkkfCBEETJtFph/COlttudMgMGP8/AzoYzjbIGHkxNKH7sKIv5j0j1v2f334doypoD+NqpbNupAAOnVNDNtrt8oiUGYm2O2IWtvqrtv2wdO/eZ73pZNh+TWpDbNyGv/R+9/3JTXqPA5/Hz3hoDnDFXsH65cfy6WHxY7Hpj8ZzGBivrVd/Yn1Mxhs3vBuNYrtF7uovm2D0uxfcdyuL4lt30tc38Z8arJbF+0cz0mrDyWJS9PzXZ32BogEq3nZ115wvism4Vn/79Ta7H001uzv9MIr2M0owGSHWyMo5wJ+37c/8MJ4sAPP9UtKg1yl0xZQQ/17MpIW46jR1dUIpPowD5UpT7pLa4cRC7ojriBlu17rdrpk3lW73ttKxbKNzq4sjZIvD09VbevemvBeZLYojiO2ATonMJSV3S5vvAWLfYUBdiNRVEAulY8o3ETuIo0KPDsQhCCiDUSDk2TKZXY2ZOA6Tue8vzdpmYZHyPFEKPwP+TJ+j1pRDlJdkKyfJA8AkJCB1W9KaCV4zLlqxRKuYe0ZphUoUYqHskRRZx7RqFY0RP/RAAtX8wI09KIXzMG2Mxrb/poowS61pV/H2wJ0t7fjbvgvCxyXSgcl6bkBMEk7cL9a+mDNFV47uoX34VuwSebZES3lE8BZJ/tMnUyRFMprsqtrDzryPDbnI2nFRWTJ3RXDG9+zWFmIujn9zP5YlKi1L8WoVp4OwpcxFIrwm1M7QhoBjoU4fo+APUC0LoV10FWSojzJn9jy+mM/pkCMOvqBNIV1ecPcPgcm7vyfonlz6sMilFH3jkPBTtrYn3i0S8bdPG+xg6SfMffG3DiL3c1wnYh3kEXWKq58TOpMreQ18nCEGDkRYIgQsiA6DnwpwKnnemDU5w8IFmyYxh/NfClKZGgrCOIgp73WU1HColilO/hGC8+n0JUwqyNkLjfz7E00lKQUwiHcdI2l8edE6kv90dqC4u6QnRLfWsW7KQnTrh6JbrumVrCk5dM0v5q+Wgz4dc7z5Fw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EP0rKH1EIR8EAlFBolBauu2WBcq2fbkyzgBmEyfEDqT8+rUDpIRCL/dKSMiT8cyZmeNjXzPke6bTYgwiTgJaSHyPMie1NpQ4ok6AGGEORT4wh2Nn2Hp6dMyS7qD9FqXQ6zSUf9y6XkWWbqmVsl5VrYltq/W64aqoYrumYVV1d2ILV8Zi6FHGEeUNxdQNSzUM1bBGuuGIX6VaMuv1d6UwhoiJ2MKlpCs7UAlrKHPOQ0fT1ut1aV0uBdFMM3Xd0F6fHod4Dj5SmtfbitJEUXPnj0suYPA8XMKBr11rOZ9rlzlDMqOIxxHscrnncumaXteEj8vI7ErJ9oLbo9MgXbYRDSjByCMbJPvzBHweuIWWNwsiwuf+2SIMXQZWIcEqNix6pWh5aBcGyiGMGFLZHBm7WAOYQgQUQ+Fl0GsoV5dNLd06ihBl0yDyWX753/AAXYEXhOCqbF/WDtrlAU90qnkN2OlR7MWMrOCnJGuIMLDdNAFfHqrQj2BKkkfCBEETJtFph/COlttudMgMGP8/AzoYzjbIGHkxNKH7sKIv5j0j1v2f334doypoD+NqpbNupAAOnVNDNtrt8oiUGYm2O2IWtvqrtv2wdO/eZ73pZNh+TWpDbNyGv/R+9/3JTXqPA5/Hz3hoDnDFXsH65cfy6WHxY7Hpj8ZzGBivrVd/Yn1Mxhs3vBuNYrtF7uovm2D0uxfcdyuL4lt30tc38Z8arJbF+0cz0mrDyWJS9PzXZ32BogEq3nZ115wvism4Vn/79Ta7H001uzv9MIr2M0owGSHWyMo5wJ+37c/8MJ4sAPP9UtKg1yl0xZQQ/17MpIW46jR1dUIpPowD5UpT7pLa4cRC7ojriBlu17rdrpk3lW73ttKxbKNzq4sjZIvD09VbevemvBeZLYojiO2ATonMJSV3S5vvAWLfYUBdiNRVEAulY8o3ETuIo0KPDsQhCCiDUSDk2TKZXY2ZOA6Tue8vzdpmYZHyPFEKPwP+TJ+j1pRDlJdkKyfJA8AkJCB1W9KaCV4zLlqxRKuYe0ZphUoUYqHskRRZx7RqFY0RP/RAAtX8wI09KIXzMG2Mxrb/poowS61pV/H2wJ0t7fjbvgvCxyXSgcl6bkBMEk7cL9a+mDNFV47uoX34VuwSebZES3lE8BZJ/tMnUyRFMprsqtrDzryPDbnI2nFRWTJ3RXDG9+zWFmIujn9zP5YlKi1L8WoVp4OwpcxFIrwm1M7QhoBjoU4fo+APUC0LoV10FWSojzJn9jy+mM/pkCMOvqBNIV1ecPcPgcm7vyfonlz6sMilFH3jkPBTtrYn3i0S8bdPG+xg6SfMffG3DiL3c1wnYh3kEXWKq58TOpMreQ18nCEGDkRYIgQsiA6DnwpwKnnemDU5w8IFmyYxh/NfClKZGgrCOIgp73WU1HColilO/hGC8+n0JUwqyNkLjfz7E00lKQUwiHcdI2l8edE6kv90dqC4u6QnRLfWsW7KQnTrh6JbrumVrCk5dM0v5q+Wgz4dc7z5Fw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVfXkuq6En3nKyj2I8U4EkzNTJUcAAMmmfxyyshyACec4euPDAMbZs/sO+c+gVqt7tXBraXXSHMdug2iCIWx7XtlWXyr/EM2aKizFFPjds16jUVQq7VYg6ohrlFvci1GJxFbKctRlCDZi2LNi98qNIn1Sa5GNecU265TbbL+wjTq20p5icIIm8YqL2SlnLuOF7Uvbt8qSei1fS2yo7anuShqx7CtAmXYxppt7Yap8v56RXlxGL5bcRy0CQK+6Agix4Ev0HeJV+JJ51WP2qptelqchOjDpx69VT7OZln2kjEvfmgSNEmSBMkRWEePbPNX5b10O4x02TP861rQPN+zoebYZ60ApaDY8vUycEw/tGPL/cY0RVBkYbqGcliDFOv9qhC/HVzQ/dDSE8gw0mqRpVE3YzNkoBB5EJUXM/mt8utnFbyenYeaFxl+6Eaf1v8NEvJS5PgB0mvRLbIbup9b/CJd768ItmUPOklkp2hUtEmgQRSVJyEy7HxoR7j59Kh8KX85j24dhuB/Kckr8YgTwya+yIxomyiK/596PdbqamWpOQl6t1o5HPSthDa6q5lY7x/5xenITBciD94uEB6Vr6Dupf5Yf27Ue199HBL9lDzxOW+ezbE9GgHmJLnmJB2hqX6Y1VOKRzonpKtO0NnO2ON5HBPQW4TqMXUpLrGo40A7o6aZLSiaVUtwMvaXwt53/Qmot4bjMNcFnqRGLY2RW0sbTlhgu9XZpo9kWo9nyi7s0rwn9A122jMEjRKWFHkKd/Oqu9mWCD9pVM0GMfa31WadDSzPfPsd02MMRVwDdLoEWfxf10lO1GLtvhCKSWHgzzNG74osC1VREAASTJDJPDBlfngGI948HK2D3eUykgfTRQeI4KTMQCaaG3E5nQ6kTF8une1S7nR4ZcZmPbARS3hDlPKluF33SW21DTZ0h9yqPK+vZ/6O6Qd675D1LDhS5ko2mssnZS/lo7lEri4yM8frs7JXqPF8wZRWe55TZlImZhePopRZo+1qFmwWXAbP0lQBbBdQC0mwlN7cXVKQmVlwLw0VcLjIeUsRlksll+ZgUuLN0RLHNhc62wC6erBzHevBeA8bn+vd5WnXdZLtWdorgtQV1GNXlXeMOJX6YLZZ7FbLg7bqpCXYG4HdzaNdt7W1n5nbViZON/2Bv5WtFI7AVOL5KcDpIoEid/vA7/JAwQXPz8Keb/iC3smIPh2VqpzTbaxP9nEdaV3S0ahWi9oMV43JsSFKXnU7SHZ7S7HWnXF1oOrpgou58yZKq2lDsymYB8Z0LfXiQW70pmppNxHzNexVdbNPOGeuEyrNPgjPJ8tRzFm8aoyj0842jBW/HrNO03AUZhYYjhGcourcnx5CssEjhiY2p3QQl4Cp8AB094s9P1X4VpFUXc6mG4XXQEeKE3De0/GAXh77vdSBGwb4+WA13h8+CqOLmcQT2VTCbSWVWiLQiyL01IXU2YMFb5ohb0odfgpFMN3Ig2yD87XoYeXPeexc8mhKPJCYLWhwvRKzILl4HKssC04ev/A6nKUc85XecMnmEUlDdRSwmRKNDG+78g+Ka4eLMFEXg8FomO/mSfewx7PKINVBymxLUnoIgD0azK2D6IvaJNhs4qDqwRDGcuAqcn4eb6N9y965ZL9ap/gJKcImvXB32aKrSdtBaKrUoDfzJkyTK0WJceq51X0rW1XnaiNo6oJniKcTsQ2XpA/8DjerH/Wcpg/WIhs2MqMPDjuNHuUOx584abCdw2w2HaxUt1ov1dPh0CXPc4IdBeNM7WasNJ1WGZ2f9+ZRENqbpGXm4djT6Y0WN9ItuWzYgXPg6OQwZwNmabq4WJNUD5rKpDRl13Drms0A9okZkQKpaQzl7ml31s6BO4bXAfp5OtyF1/lBPE6Wp9FzIx0q7lYE49uyuIBksdzBt4IW/53AFBJbrxkX1XZQsKAoRl5ceS9OFeSlnWCKY+ttfGVc11KDazQ69UaLFZpA6rASyZJUhwRkneNIttW4sZwrik8QBd8z7MJXweOut9TfAUK3HSFPR2Et9RNooajyF4tFvsqyN8PXr+9FaO5jntjqNCSOYzmaYZtNhmuRDC1QVAu3DckKlMRVyiM/HnvjEBgxCp85YvOJI84QtAMbFUSyuE0jfJ1GMU7JUUuT2KFeUu3FQwmmmmHB9to026oTke0GDioAE66vJw56CazgkiAiuv7SNQ1GF+lMmv8jq8Llpv82xM97t2xgHd0uFKIiHh7hiqI/CC/Zrt+C+TZomnwM+mYeJLpdXOg4tXFowyuS563fHVO0yr1dcFQ3yHfNz4Inq8TngO6O9NSG956/Pwcwm8R84/1WkqP2cnxJ0jS5FKFZcKkQmycogmwSKoIJJkSnuX9AHnE3QfyIi95Rf/J8lz/jS2LLU2P8Pbu4ZcqX5Q8eIiqKioeIjFs+/+kr58klzluM8vgrmeDg90qB+K9PGtiGhR4WT/BP5of673J9YevBD46zGGC2ZxargnmevmkK6GOzNh5ifvho/CsDXzl/Ft6TfMcS427aJTH6fqdcTKe3igahn3ixLFYugseJecEZnwLU/q30h5kL9/sg83n0LZlfK0MVzy5Xq9x17f+tXLMv7QIRPhXZFyxvlRy/S7Fzz3yY0B8AvxjSPMe3yBZNc89DmmPuCXyK5P0P8Z+Sh5x+/h7e/wU=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>accountget_firstuser20141114_1415926951932</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20141114_1415926951932</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>07C82B5FFE61471DE05307991F0A0FB3</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>NODE_ACCOUNT_ID2</con:name><con:value>07C82B58D4B34719E05307991F0A3805</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL2</con:name><con:value>urn:dece:accountid:org:dece:07C82B58D4B34719E05307991F0A3805</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3e547787-1c67-44f1-8222-075c64836e4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a5fcc0b1-d902-49c5-9c1e-4f4e14cd5ca5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c97ebf6-7638-48bc-b0fd-086f9da84a7a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03008_AccountGet_FUNC_SPLCS_Account_Status_as_Pending_200_OK_P2" searchProperties="true" id="b6f6f111-f8a7-4279-80b8-4e6d7b672b27"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="f3dfd26a-1b11-4c40-8bd8-788ed8df5cd0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="7fa0a848-3ef5-40ca-a817-e54a32592970"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node DECE_CS" id="b5298e97-6aa8-4f03-af2a-6d01c2f20804"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API with DECE_customersupport" id="cf71b8fc-caeb-48b3-a43c-b4bd96652941"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID2",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL2",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Status" id="f87f174f-1a23-4021-a9ed-a5298425570f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_AccStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Status","pending");
myTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="e346b7bf-f68e-4864-ad09-ce8259204a25"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

myTC.setPropertyValue("CS",tS.getPropertyValue("CustomerSupport"));
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>FC67139614F6EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_7296bae6-5e44-4cb6-aa67-7d1a58ea635c</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_7296bae6-5e44-4cb6-aa67-7d1a58ea635c</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FC6713961518EF8CE0401F0A05996250:B0B0DE73"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC67139614F2EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC67139614F2EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>FC67139808C4C771E0401F0A05994595</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC67139808C7C771E0401F0A05994595</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FC67139808C4C771E0401F0A05994595</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:FC67139808C4C771E0401F0A05994595</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC67139808C7C771E0401F0A05994595</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FC67139808C4C771E0401F0A05994595</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6uQDxI+ooLEQulmC9sK2m7ZlytjD+BusNPYAdpff+1AUqC0t3slJOTJeObMzPGxzwVaxl7YEQJSSTkzol7L/KfuNWtTBDUrAN+3fDytWQjV6laduChoAKpVA2wakRAZRExIxGTL9BzXt5ya5Xm3ThD6QVgNKvWq89s07iEVKrRyqTimsVnGTIR52paZpSzkSFARMrQEEUocjjvDQag8Q1RgMtvnW5R5wrS9kDIJbRtXCGCIY1zBfGmf2wc+50SEYzpnSGYp7HIS0TJ3e9frdWVdrfB0bnuO49hO01Y+RND5V7P9pdgMJGIzvl13EeOMYhTTF6RBDUEuODE68ZynVC6W74R2bdfRoS3YYAu7Pvtq2q8JcnSfjHQAMhXIEgvkFsFGMIMUGAbjbhS1zK+fm+B2722KmJjxdCmO1n8HCdgKYp4AsURRWYHu8xFPtKt9DjiMGI4zQVfwU9MkQRiEcZPCjG4GVCjyEWHk4zc2Qv1owTLAfzOWc3sfq4Jun+hOj85ByP8zs/15baPcoziDNlrMB7Nodlv1B87js++Q66Rz1luQF/eilUPYd96CKse9Wx+TteTWbpNcTa6i0RpXZ78JGU7iavr9vsnJjz/JYiN+ReoQsbPrydS7RfcPf1bTZHE5wqw5uCTZ4IpcraP1pN5Ivs0v/cuN+PI7uhsO4l92Mjnjl/HwDA+zm+dvnRf0M+v7d+sg603ohj+84M5V076xu8Pr+OopOMP9ejYn/cHibklH1xGpr6rVyRf8TC/R0Jb32eDi7Pvo6oXh1mtN+zUcGgtJGGfTR8CyWGp6RD2jr+aF5Mfyoi2UWLPcNUy0RgkJTJptvUtLS5gpAaIkVMPcrvvdWt2tNhtOo+t363X3wvEdt+90nKDZ9INmUGjQFsURxC5nM6pzaZXd8udjgHgZCmAEUmvFM7wAYX4QsYckMiI2UoeDMwG3XKm4JK7wkik02aPL/cf6auo501Sfjp9cXrPrtDOTkB4qd+NAuUeAaUJBy7vmt1AEF1K14gmtMhm7lRWqMMjUBZBqDQ49vxHYgi6TGDRQe8lJFkMlWSR5Y2yx/fcshEVuzbuKRX723i3t+FvRBeVDqHYQup5voCYJJ64hryjmnaKrR9dVEb6TEaqPmGqpTCneIjn89MoUTZGSJruqCtil97HhILJ9XFSZjKwoLvleXtRK55UKtIuxPKHKUyVbrbJ8EHWtcKkKbyuhc+0x4EzJ1PMt/wPMLkPYn7olStRHmUv7Ib5MLthYIglLRRsjX37iiTAGoZ8IkaL75rPvj4OUqm8SNvKUrRurl4RG/OFjA4dY+ynzjfpb85S8jutErL08qk71LpCUzfVK3wfP7xADcxWWKgHj6X7wUwFOJT80lk0usUjFpmkm4f0vhlamlokw5hmTUc/MDftqmeOUzwmEr05vwuSKvLtiN+LdK/ZhOBgr3Vois/Sl/+1s0ZwuGEx9k+dYWuZGvRhVcjbfU+cdwBMCXXP9vnfRb3T3BbrmBU7ZwINK2m/Mby17PT0+D+1/AQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6uQDxI+ooLEQulmC9sK2m7ZlytjD+BusNPYAdpff+1AUqC0t3slJOTJeObMzPGxzwVaxl7YEQJSSTkzol7L/KfuNWtTBDUrAN+3fDytWQjV6laduChoAKpVA2wakRAZRExIxGTL9BzXt5ya5Xm3ThD6QVgNKvWq89s07iEVKrRyqTimsVnGTIR52paZpSzkSFARMrQEEUocjjvDQag8Q1RgMtvnW5R5wrS9kDIJbRtXCGCIY1zBfGmf2wc+50SEYzpnSGYp7HIS0TJ3e9frdWVdrfB0bnuO49hO01Y+RND5V7P9pdgMJGIzvl13EeOMYhTTF6RBDUEuODE68ZynVC6W74R2bdfRoS3YYAu7Pvtq2q8JcnSfjHQAMhXIEgvkFsFGMIMUGAbjbhS1zK+fm+B2722KmJjxdCmO1n8HCdgKYp4AsURRWYHu8xFPtKt9DjiMGI4zQVfwU9MkQRiEcZPCjG4GVCjyEWHk4zc2Qv1owTLAfzOWc3sfq4Jun+hOj85ByP8zs/15baPcoziDNlrMB7Nodlv1B87js++Q66Rz1luQF/eilUPYd96CKse9Wx+TteTWbpNcTa6i0RpXZ78JGU7iavr9vsnJjz/JYiN+ReoQsbPrydS7RfcPf1bTZHE5wqw5uCTZ4IpcraP1pN5Ivs0v/cuN+PI7uhsO4l92Mjnjl/HwDA+zm+dvnRf0M+v7d+sg603ohj+84M5V076xu8Pr+OopOMP9ejYn/cHibklH1xGpr6rVyRf8TC/R0Jb32eDi7Pvo6oXh1mtN+zUcGgtJGGfTR8CyWGp6RD2jr+aF5Mfyoi2UWLPcNUy0RgkJTJptvUtLS5gpAaIkVMPcrvvdWt2tNhtOo+t363X3wvEdt+90nKDZ9INmUGjQFsURxC5nM6pzaZXd8udjgHgZCmAEUmvFM7wAYX4QsYckMiI2UoeDMwG3XKm4JK7wkik02aPL/cf6auo501Sfjp9cXrPrtDOTkB4qd+NAuUeAaUJBy7vmt1AEF1K14gmtMhm7lRWqMMjUBZBqDQ49vxHYgi6TGDRQe8lJFkMlWSR5Y2yx/fcshEVuzbuKRX723i3t+FvRBeVDqHYQup5voCYJJ64hryjmnaKrR9dVEb6TEaqPmGqpTCneIjn89MoUTZGSJruqCtil97HhILJ9XFSZjKwoLvleXtRK55UKtIuxPKHKUyVbrbJ8EHWtcKkKbyuhc+0x4EzJ1PMt/wPMLkPYn7olStRHmUv7Ib5MLthYIglLRRsjX37iiTAGoZ8IkaL75rPvj4OUqm8SNvKUrRurl4RG/OFjA4dY+ynzjfpb85S8jutErL08qk71LpCUzfVK3wfP7xADcxWWKgHj6X7wUwFOJT80lk0usUjFpmkm4f0vhlamlokw5hmTUc/MDftqmeOUzwmEr05vwuSKvLtiN+LdK/ZhOBgr3Vois/Sl/+1s0ZwuGEx9k+dYWuZGvRhVcjbfU+cdwBMCXXP9vnfRb3T3BbrmBU7ZwINK2m/Mby17PT0+D+1/AQ==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>accountget_firstuser20140622_1403415932151</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415932151</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC67139808C8C771E0401F0A05994595</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>NODE_ACCOUNT_ID2</con:name><con:value>FC67139614F2EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL2</con:name><con:value>urn:dece:accountid:org:dece:FC67139614F2EF8CE0401F0A05996250</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1b6f945-91db-4c15-9219-c46012fb0a77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cebd615b-d6b8-45a3-9877-e91c6c1c075e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d865d88b-2427-4777-b180-d9db3d841b2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d9983631-b1a7-47a4-842f-78cc3f2efe0e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039bb038-d262-404c-bbb9-1dbbe084f0d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53e21657-2911-4ad4-a8b5-fc4bba541055</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3e547787-1c67-44f1-8222-075c64836e4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a5fcc0b1-d902-49c5-9c1e-4f4e14cd5ca5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c97ebf6-7638-48bc-b0fd-086f9da84a7a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_03016_AccountGet_FUNC_SPLCS_User_not_Active_200_OK_P2" searchProperties="true" id="d1f9d79a-7dfc-40cd-8ee4-f82b0cb581fc"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\praveen.dantuluri\Desktop</con:setting></con:settings><con:testStep type="datasource" name="User_Status" id="a4a596c7-de44-47bb-95d4-cf1f9cd11e58"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">forcedeleted&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">suspended&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">pending&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">other&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">blocked&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">blocked:tou&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Status</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="c9d310c6-db7c-4a9f-92bd-bc74b6b9aa0b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));
tP.setPropertyValue("audience",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="5428dd0d-4afd-47bb-801f-23d03f0257e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());



def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node DECE_CS" id="08106bcb-b974-46dc-8367-3aa6dd965ed1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role_CS")));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API with DECE_customersupport" id="d7e8ab09-7302-4161-8ea2-4de35118ddd3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID2",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL2",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update User Status" id="1f1f8461-5360-4ba6-9e01-faf0c0d0dec4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def status = context.expand( '${User_Status#Status}' )

myTC.setPropertyValue("Status",status);
myTC.setPropertyValue("USER_OID",tC.getPropertyValue("user_oid1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="08d814d1-4922-4223-ab3b-f622dadac699"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

myTC.setPropertyValue("CS",tS.getPropertyValue("CustomerSupport"));
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="f1b340a9-fdfe-4a0c-bd04-90f1fc2f13e3"><con:settings/><con:config><dataSourceStep>User_Status</dataSourceStep><targetStep>Establish Test Case Properties</targetStep></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>FC671398099FC771E0401F0A05994595</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_681cdb7d-3deb-4676-976a-381fe3026373</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_681cdb7d-3deb-4676-976a-381fe3026373</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FC6714381E605EAFE0401F0A05996254:CFE867A0"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC671398099BC771E0401F0A05994595</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC671398099BC771E0401F0A05994595</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>FC67139615B7EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC67139615BAEF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FC67139615B7EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:FC67139615B7EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC67139615BAEF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:FC67139615B7EF8CE0401F0A05996250</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E606E1436C334EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+o4EH4/vyJKH6uQC5dABEhAS5veaEnb7Z6XlXEm4DbYaewA7a9fO5AUKO32rISEPBnPfDPz+bPbHM1jx+txDqkgjGr+SUf/p9G0cThxQ6MawsSoNdyG0XIbyKg27QiqltOoulVd8znPwKdcICo6umPZNcNqGI5zb9W9WsOz3UrTtX7r2iOkXIaWLhVL11bzmHIvT9vRs5R6DHHCPYrmwD2BvaB3feVJTw8VmPRue40yT5h2Z0IknmniSggY4hhXMJubbXPHpx1yLyBTikSWwiZnyDv6Zu9yuawsqxWWTk3HsizTapnSJ+RkeqR3fxWbIfRpxNbrAaKMEoxi8o4UqGsQMxZqvXjKUiJm8y9C26ZtqdAGrLCB7Ro90s2PBDm6H0baAZlyZPAZsotgY4ggBYpBexj7Hf3oZxNc771PEeURS+d8b/1nkIAuIGYJhAYvKivQ/TzigXZ124A9n+I442QBN4omCcLAtdsUIrK6IlySL+RaPn5txeWPFCwD/CdjaZvbWCV080B3TsgUuPg/M9ue1zrKI4oz6C4m7Lh1Fp/0xpi8th4ex3Z/Zq6ixKF+J4ew7bwGVY57s94na8mtzaZelLCL+l3j+PrOvnl/u5yNxJJkE/fpKj4TLxdP5xEJlv0ovF/6d8N3/+xxmD5kNqPvxAlWgOKbZFF9CabPlDv9X8tU2A/n0eTF+c0G55e3pji2qrPhxfOTf47JmT34axhYdiuL4qmVjkdXyyAdtUbVl5uzm4dr9NAnjD+jlR1Er1fXv55uL09rw/vLySTuod6zHzb/7nzUtF3DrrGQhCCbPAMWxVLRwz/RhnJeSHwvL8pCQiPKXb1EaRQXQIXeVbuUtHiZFCASenKY6/Vw0HDtaqth1/vu6bA5OLVqlj20ela91Wo4davQoDWKPYgDRiOicimVXfPne4B47nGgIaTGgmV4Blz/JuIJEkjz6VgeDkY53DOp4uJ9ksSvzmT5zGjVasYZqbuywKau3TAxoqO0FwlId5W7uaPcY8AkIaDkXfGbS4JzIVvxihaZiO3KAlUoZPICSJUGe06tWTc5mScxKKDmnIVZDJVkluSNMfn63zEQ5rk17yrm+dn7srT9b0UXpE9IlANX9fRBThIOXENWUcwXRVf3rqsifC8LiTpisqUiJXiNZPfTB1MURUqabKoqYJfe+4adyOZ+UWWycEFwyffyopY6L1WgW4zlFVVeK9likeWDcJXCpTK8KYXONgPAmZSpt3v2AtQsQ5g/uiVK1HuZS/suvkzMaCCQgLmkjZYvf/BECICrJ4Iv6b766ftjJ6Xsm4CVOGQbxPIloRB/+9jAHlZ+0nwr/5YsDT/GdSDWVh5Zp3wXCEKnaqXug7cviIGZDEukgLF0O/ihAIeS7xrLJpdYhGTTJBPw9RdNKVNHRxizjAr/RM8N22qZ4xRvCXgfTp/C5Iq8uWJX/Msr9un6KpC6NUd66Uv+29kgOV0w6Oomz7F09JV8McrkdLqlzhuABwS6abVa/YHr2tsCXau36mUDdyrpfjJ/tmz1dP88dP8F</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH4/vyJKH6uQC5dABEhAS5veaEnb7Z6XlXEm4DbYaewA7a9fO5AUKO32rISEPBnPfDPz+bPbHM1jx+txDqkgjGr+SUf/p9G0cThxQ6MawsSoNdyG0XIbyKg27QiqltOoulVd8znPwKdcICo6umPZNcNqGI5zb9W9WsOz3UrTtX7r2iOkXIaWLhVL11bzmHIvT9vRs5R6DHHCPYrmwD2BvaB3feVJTw8VmPRue40yT5h2Z0IknmniSggY4hhXMJubbXPHpx1yLyBTikSWwiZnyDv6Zu9yuawsqxWWTk3HsizTapnSJ+RkeqR3fxWbIfRpxNbrAaKMEoxi8o4UqGsQMxZqvXjKUiJm8y9C26ZtqdAGrLCB7Ro90s2PBDm6H0baAZlyZPAZsotgY4ggBYpBexj7Hf3oZxNc771PEeURS+d8b/1nkIAuIGYJhAYvKivQ/TzigXZ124A9n+I442QBN4omCcLAtdsUIrK6IlySL+RaPn5txeWPFCwD/CdjaZvbWCV080B3TsgUuPg/M9ue1zrKI4oz6C4m7Lh1Fp/0xpi8th4ex3Z/Zq6ixKF+J4ew7bwGVY57s94na8mtzaZelLCL+l3j+PrOvnl/u5yNxJJkE/fpKj4TLxdP5xEJlv0ovF/6d8N3/+xxmD5kNqPvxAlWgOKbZFF9CabPlDv9X8tU2A/n0eTF+c0G55e3pji2qrPhxfOTf47JmT34axhYdiuL4qmVjkdXyyAdtUbVl5uzm4dr9NAnjD+jlR1Er1fXv55uL09rw/vLySTuod6zHzb/7nzUtF3DrrGQhCCbPAMWxVLRwz/RhnJeSHwvL8pCQiPKXb1EaRQXQIXeVbuUtHiZFCASenKY6/Vw0HDtaqth1/vu6bA5OLVqlj20ela91Wo4davQoDWKPYgDRiOicimVXfPne4B47nGgIaTGgmV4Blz/JuIJEkjz6VgeDkY53DOp4uJ9ksSvzmT5zGjVasYZqbuywKau3TAxoqO0FwlId5W7uaPcY8AkIaDkXfGbS4JzIVvxihaZiO3KAlUoZPICSJUGe06tWTc5mScxKKDmnIVZDJVkluSNMfn63zEQ5rk17yrm+dn7srT9b0UXpE9IlANX9fRBThIOXENWUcwXRVf3rqsifC8LiTpisqUiJXiNZPfTB1MURUqabKoqYJfe+4adyOZ+UWWycEFwyffyopY6L1WgW4zlFVVeK9likeWDcJXCpTK8KYXONgPAmZSpt3v2AtQsQ5g/uiVK1HuZS/suvkzMaCCQgLmkjZYvf/BECICrJ4Iv6b766ftjJ6Xsm4CVOGQbxPIloRB/+9jAHlZ+0nwr/5YsDT/GdSDWVh5Zp3wXCEKnaqXug7cviIGZDEukgLF0O/ihAIeS7xrLJpdYhGTTJBPw9RdNKVNHRxizjAr/RM8N22qZ4xRvCXgfTp/C5Iq8uWJX/Msr9un6KpC6NUd66Uv+29kgOV0w6Oomz7F09JV8McrkdLqlzhuABwS6abVa/YHr2tsCXau36mUDdyrpfjJ/tmz1dP88dP8F</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdU6NKEH3fX0Hho0WAfEOZVLHiKpYfWRNX15dbw9AkozAkM0NEf/2dIYIhG73ufUlqmp7u091nzswRR2nSdj3OgQmSUS3wR/o/GOEQ4r5tAAxDozvsxUY4HPaNDmqH4RAcQENL1wLOcwgoF4iKkd627I5hOUbHmtkdt2O77XarPXAedO0XMC5DS5eW3FWkCeVumXak54y6GeKEuxSlwF2B3al3eeFKTxdVmPTx0QZlmZCNF0IsXdPErQgwJAlu4Sw1j8yGz1HE3SmZUyRyBm85Iz7S3/Y+Pz+3njutjM3NtmVZpuWY0ifiZH6gj79VmyEKaJxt1seIZpRglJBXpEBdglhkkeYl84wRsUg/CG2btqVCG1BgA9tdeqCb7wlKdF+M1ADJODL4AtlVsBuIgQHFoN3eBCP94GsT3OydMUR5nLGU76z/DhLQNSTZEiKDV5VV6L4ecU+7xkeA3YDiJOdkDVeKJkuEgWsTBjEpLgiX5Iu4Vo5fK3jFMMB/M5IjcxunhG3u6YxP5sDF/5nX9qw2UX6hJIcx2NPVMT7pntN5vxubwePLuqBzcbgsvFEJYdt5A6oe9dt6l6g1r942PfVsZtH87OmFhB3fvpu2/al9P3t9ZvzhOrqbnP98+N2n/hlJi7PhIJrckkWY2GlxOokn7fvbwr67OWOdIu3R5em3l9+r23trnp+t07tFfniV+OcMBavvV3Nr8Ts4j89XD9Q2rRAfZrPwx+NZElu33WjdOx+yTnTY472pD3fgsXDl3H0LJ/3L4uG1dz87vI+HHSc/vRy917RdQ9NYycE0Dx8Bi2qpqBH42g85LyQ+lxZlIZERl67uUukTF0CFPla7lKy4uRQfErlymJv1yaDf8Xs9x+naXd+x+idW17J/WJ41cBz7u9Ov9GeDYgficUZjonIphd3w53OAOHU50AiYsc5yvACufxLRRwJpAb2RByOjHGaZVPCpnz3mEWbBMLJPss7PMCAsT26WrVxGjYlkjK5dZeKaXjMvFsCa+t1v6PcNYLIkoEReMZ1LqnMhm7JC61wkdmuNWhRyeQ0wpcRuW6qNyUm6TEBBNtMsyhNoLRfLskUm3/y3DYR5aVX9xbw8hB/WuPutaof0iYhy4Kqc7yBHCnvuIruqZU/NtmVY9s6dVYX38oiosyZ7KxjBGyTNT++UUVyp+VL+YF7Brr13DY3I5m5RdbJoTXBN/Pq2lmIv5WBcTWWFWqtWvl7n5RwGSuqYDG/KEzkwp4BzqVcvs+wJqFmHML90VdSodzLX9ia+XCzoVCABqWSNVi6/8E6YAlfvhEAytPjqI6SRUvZNQCH22Y4T+ZxQiD99cWAXKz9pnsi/54xF7+PaE2srj6xTPg4EoXO1UhfDywfEwJkMS6SSZWw7+L4A+5I3jXWTayxCsinMBXz8RVMSNdIRxllOReDrpWFbNkuc4mUJ7rvTH2FKaX67awv+4V17f3kxlQKWIr32Jf/tbJCSLhjkLk5KLCO9kM9GmZzOt2T6DWBTqQfHA++ke+I73b7neA2l9rpe3cBGJeM/zH9atnq6ex7G/wI=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130916_03152</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>accountget_firstuser20140622_1403415972429</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415972429</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>AcountDelete_20130917_1379429630173</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>usercreate20130910_050856</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC67139615BBEF8CE0401F0A05996250</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E6966F5684C8AEF4E0401F0A05990486</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E606E1436C344EFFE0401F0A07997AA1</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>NODE_ACCOUNT_ID2</con:name><con:value>FC671398099BC771E0401F0A05994595</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL2</con:name><con:value>urn:dece:accountid:org:dece:FC671398099BC771E0401F0A05994595</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>99c61175-ca6e-4fe9-95b0-5f3d02f2072d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c263e60-96bd-4c9c-9c64-ad6f469cfc89</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce1f47c6-8e3d-4c44-9320-d57e0cc4e097</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a4a596c7-de44-47bb-95d4-cf1f9cd11e58</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d7e8ab09-7302-4161-8ea2-4de35118ddd3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1f1f8461-5360-4ba6-9e01-faf0c0d0dec4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08d814d1-4922-4223-ab3b-f622dadac699</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>audience</con:name><con:value/></con:property><con:property><con:name>role_CS</con:name><con:value>nodeIdDECECS</con:value></con:property><con:property><con:name>CustomerSupport</con:name><con:value>Y</con:value></con:property></con:properties><con:setupScript/><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="AccountGet_Method" id="f068a507-2550-4840-8d6a-0a3bf46a750b"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_01000_AccountGet_PYLD_Get_account_with_invalid_account_id_P1_UV-135" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9a6fed4e-9327-4444-8221-5cfac21b5f2b"><con:description> This case describes the scenario where a consumer wants to delete an Account which is active. In order to delete an account it requires Node ID,AccountID which is invalid  and UserID. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a50e0a88-8386-498f-8a41-81c056e11b21"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="bafba5c2-c766-4d4e-9d25-d2cced24e290"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Acc_ID_Data" id="e1e6d2f3-6e28-4c8f-8d76-4474db5aa08d"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">12345&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:accountid:org:dece:900103&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:accountid:org:dece:xyz&lt;/con:entry></row></con:configuration></con:dataSource><con:property>AccID</con:property><con:startRow/><con:endRow/><con:trimValues>false</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>true</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="22f24b94-da1f-4960-8480-8c2015ebf96d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def accID = context.expand( '${Acc_ID_Data#AccID}' )

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));

 if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("URLEncode"))
 {
 	myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(accID,"UTF-8"));
 }
else
{
	myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accID);
}

myTC.setPropertyValue("ResponseTypeAccountGet","ACC_NOT_MATCH_TOKEN");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Loop" id="ff6d8b56-453e-486a-a776-3f4daf324761"><con:settings/><con:config><dataSourceStep>Acc_ID_Data</dataSourceStep><targetStep>Call AccountGet</targetStep></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90182</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvNsfAFzcQWqCGYSdoEwGJJsXraE3AZNjASWDE6+fiUDDiYky+4LlNqt7tPdR0e64WgV2W6Hc4gFYbSUriLK3cza0pKYugxxwl2KVsBdgV2/Mxy4dtl00XGLVup7Le1vCCrzRtOa63Yof6qhWdebVTvQzUrdsZtNJ8ThXLpynkCfcoGoaGm2aTm6aekVc2pZrm26TqXcrDVetNIjxFzGli5lUzuASnlLWwqxdg1jt9uVd5UyixeGbZqW8Twc+HgJK6S1b/YVZYni9sEflwPAEEW4jNnKuDEKPjcBd32yoEgkMRxyBV/lMg2zaUifgJPFDy3fC0GfhixbdhFllGAUkXek+jMEsWRBqRMtWEzEcvVlEZapAuuQYh1bVfpDM4rQrgxUQBhzpPMlsg6xJhBCDBRDaTbpt7Qf100t2zqNEeUhi1e8uPxveIBuIWJrCHR+LOsA7fqAFzrVvgHs9imOEk62MFJkXSMM/DBNwNeHKo1jCEk6IFwSNOUKnXEK72y574ZHFsDF/xnQyXD2QR5RlEAbjwe0dtd7fhe/Nr5FgjfD3u1m5sbxeSsDcOqcGfLR7pdnpMxJtN+RiqRRDV4sv/7kvDOz88SnIp4+96az7Ug07ABGo9+NFzx/FmF1FI5FfTn7w+c7exSkw/7dcOmwZFB7w/0H4XnL+x2ZGj56Wtw3jMl4Op2sfhljMzVfn3YRa3bB6nriac5Hvc79eDZwZuvZkHiVZY8m3uNs92ccRt685s28iRWJx0Y4nnjpe83ZPKQ8vgv/auXlnOAv2o5n3k/mvwGL41LRoO+VfsopIfG9mCkLCfQwc3XXSny4ACq0ttqltMNNpNyRwJUz3K9Nz/M6tx3PbppmvVp3eqZTMZ1m0/ppdprN3u1RZPYoziB2GQ2JyqUkd0+b7wHilcuBBhDrW5ZIpePaNxE9JFCpTyfyEDDKYcqkPK/ZHDOwXylOAAQAfl0zp8KRVhox8UAf4k4oIC5KcrUgyRPAZE1A6baiNZe85kK2YoO2iYis8haVKSRS2WMlsq5dbTgGJ6t1BAqosWJBEkF5vVxnjTH4/t/WEeaZddKbZofty7LOvx07IH0Cohy4quUW5BThwt1SPRbydcH104KP4TtJQNS5ku0UMcF7JMVPHyxR9MgpIis6Qs49zw2FqMZ5QXmiYEtwzvP8tpYiLo99+ziODSpvysl2m2QDqCt5i2V4Q6qcZfiAE6lKb1P2CtTIQxhXXQE56rPMub2ILxFL6gskYCXpUsqWV9z5PnB15/clzdNrHxSFlLJvAlJxydaN5HtFIf72SYNdrPykeSz/diwOPsZ1IdZJHlmnvPIFoQu1UvL/9gUpMJNhiRQuFp8GvxTgUvKiMW9yjkVINs0TAV9/KSlFamkIY5ZQ0fe0zHCqkhlO8bYG98PpU5hMiPOXGfn3p5lOMgpgkO85TrL46oJ1Ff/p4kRpD0k/i+1t1a463Xq10TsVW9uu9fKmFNC1P5k/W076dM7x9j8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0DDDABB4245D748EE05305991F0A226E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0DDDABB4245C748EE05305991F0A226E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0DDDABB4245C748EE05305991F0A226E</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>0DDDABAD29007475E05305991F0A99EB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:0DDDABAD29007475E05305991F0A99EB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20150130_1422616973638</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>0DDDABAD29017475E05305991F0A99EB</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a50e0a88-8386-498f-8a41-81c056e11b21</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafba5c2-c766-4d4e-9d25-d2cced24e290</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22f24b94-da1f-4960-8480-8c2015ebf96d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_01001_AccountGet_PYLD_URN_CaseInsensitive_P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="99e7cd0d-4644-4a5b-8b3c-cec58bdf1cbc"><con:description> This case describes the scenario where a consumer wants to delete an Account which is active. In order to delete an account it requires Node ID,AccountID which is invalid  and UserID. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9e29f6b5-2107-48aa-b3ef-f3494a023a9f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="5ee0c970-03ea-4e90-bb2e-87aef8932b30"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountGet" id="3e3971a5-d80b-459a-a5b4-90221ea9cfb1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL","uRn:dECe:uSeRid:oRg:deCe:"+tC.getPropertyValue("NODE_ACCOUNT_ID1"));

myTC.setPropertyValue("ResponseTypeAccountGet","ACC_NOT_MATCH_TOKEN");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90182</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH2/vyJKH6uQDxI+IkCiFG5poe0C7Va8rIxjiNvEDrEDob9+7UBSoNDlroSEPBnPnJk5PnaDgTCw3DZjKOaYEqV/21T/sSyjUjbsqubMajXNnlcdDVRtoFXqtRkoGzMwg2VV6TOWoD5hHBDeVC3DtDWjolnWxHBcu+JaZsmo1aeq8opiJkILl5KhKmkYEOZmaZtqEhOXAoaZS0CImMuhO24PB67wdEGOSW01tiizhHHL5zxydR2WPARREMASpKHe0A98Gh5zx3hBAE9itMvpsaa627ter0vrconGC90yDEM36rrw8RheXKmtX/lm5PXJnG7XHUAowRAE+BNIUEPEfeop7WBBY8z98ExoUzcNGVpDKdSgaZMrVf9KkKG7MNIByJgBjfnAzION0BzFiECkvIz6TfXqsglu905iQNicxiE7Wv8ZJERWKKAR8jSWV5ajuzziiXa1Ggi6fQKDhOEVepQ0iQBETHmO0RynA8wE+TymZONXUiZ+OGcZgn8yloa+j1VA10905xYvEOP/Z2b789pGeQVBglpvj5u3ctR32Esa3fgb8qIPrV7sO7Nro5lB2HfegirGvVsfk7Xg1m4TcO5v3l8r/mc67WDKGNmMp+XhM0wf3lPLHk3nm/E4SG85NrqLbt3hL9f38994ORwM355o3dafepO/4HJo82Ga/Fqk5Wrn5o68bZae4d359YcPP3hq27OH6zqw58GM99hsOjLH769/0+40xIO7+QbatB04tl92jHBSsa/vNwPQXa9+1V8+u6/Rb6OTjkdmElbK/Y/mV037NRwac0kYJ7N3BHm+lPTo3yo9MS/Af5YXacGeNs9c3UhqFOOIcLUld0lpcRMhQNhzxTC3616nUjXtcs3sVm+cbrvXNWzD7Bltw6nXK5Zj5xq0RXEEsUPJHMtcUmW3/PkZIAxdhoiHYm1FE+gjpv4Q8RZwoPTJSBwOShiaUKHitTR2WCUxveoniw1jEVjUrCx9X1UeKX8iT3F7zlF8qNy1A+UeIYgjjKS8S34zQXDGRSuWYJXwwCytQImgRFwAsdRg17Jrjs5wGAVIAtVD6iUBKkV+lDVGZ9t/SwOQZdZRd5Kdu7NlHX/LOyB8PCwdmKzlBokpohNXkJkXcrZg09wvOA/fTjwsj5doJ48x3CI5/PTFEkmPgiKiohxy4XlsOIiqHxdUJPJWGBY8Ly5ooe/i9LfycSxBaVlKVqskG0BVKlsswutC4Ex9jGAi5GkzoR+I6EUI/aLboUB9lLmwH+JLuE/GHHAUCroo2fKCp8EYMfk06Auap5e+Ow5Sir5xlPJTtk4gXhAS8Y+PDOhC6SfMz+JvTWPva1wnYu3lEXWK9wDHZCFX8h7YnCEFpCIsFsJF4/3gpwKcSn5oLJpcYOGCTbOEo/NfFKlITRVASBPC+7dqZthXyQwn30TI/XL6FiZT4t3VmrKzV+vbcDAWehUCtfDF/+2s4YwuEKnyBs+wNNVUvBRFcrLYU+UdwO/CbHXsXqdqlsv1Q2G2a0UDDyppfTN/t+z19Pg8tP4F</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC67142C4FC81339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC67142C4FC71339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC67142C4FC71339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6714381E7B5EAFE0401F0A05996254</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6714381E7B5EAFE0401F0A05996254</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415980404</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6714381E7C5EAFE0401F0A05996254</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>267dc62f-6dd2-42f0-88cc-8f0902f3fae9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a50e0a88-8386-498f-8a41-81c056e11b21</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafba5c2-c766-4d4e-9d25-d2cced24e290</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22f24b94-da1f-4960-8480-8c2015ebf96d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_02001_AccountGet_MTHD_API_Invocation_with_Method_POST_405_Method_Not_Allowed_P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c9483172-3500-4022-a510-a278ce05c5a3"><con:description> This case describes the scenario where a consumer wants to delete an Account which is active. In order to delete an account it requires Node ID,AccountID which is invalid  and UserID. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9d729a77-6331-4c5a-a46c-f77008c9fb23"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="6cd2b33e-7a69-48a9-9b5f-def7cea7ea80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="66dc11f2-14b4-4f21-8e1a-adc1c229afba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import soapUIUtils.soapUIUtils;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def certPath = groovyUtils.projectPath

//Set fileKeyStorePath value 
//log.info "certPath: "+certPath;
//tP.setPropertyValue("certPath",""+certPath);

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountGet_POST");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet_POST" id="af0e0692-63a3-4a21-b078-d78cb46f4344"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountGet_POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet_POST" mediaType="application/xml" sslKeystore="RET_concat.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="87823ce5-5bcb-40b8-a92f-bb1c3a8dc662"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 1
for (n in hList) {
	if (n.value == "HTTP/1.1 405 Method Not Allowed") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90182</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3vV0Tp41HIhYRLVJAo0Dbd0Bv0tl+OjGOI28QOtsOlX7/t0KRAaU/3kZCQJ+OZNTPLyz7hIIkdv8M5YgJTogW9lv5vvdmEjUbdMjzPqRluWK8bwKlaBvBQswrq0K57SNcCzjMUEC4AES3dsWzXsGqG44wtz3drvuNW6lb1t649IMZlaOlSsXRtlcSE+3nalp4x4lPAMfcJSBD3BfRHneHAl54+KDDp7ZMNyjwha0dCpL5pwkqIIIpjWIE0MU/MHZ+TkPsjPCNAZAy95wx5S3/fu1wuK8tqhbKZ6ViWZVpNU/qEHM+O9fZRsRmFAZnSzboLCCUYghi/AQVqiEREQ60TzyjDIkq+CG2btqVCG2gFDWi75Fg3PxLk6H4YaQck48DgEbCLYHdoihgiEGn3d0FLP/7ZBDd7xwwQPqUs4Xvrv4OEyALFNEWhwYvKCnQ/j3igXe0TBP2AwDjjeIGuFE1SABHXbhia4tUAc0m+kGv5+LUVlz9csAzBvxnLibmNVUI3D3Snh2eIi/8zs+15baI8gDhDbdEk50/maLoa0sf+bFK7fTAHroBphPutHMK28wZUOe739T5ZS269b/oVrTv8dBwOBxe/g9MX645cPsBLNqvN39z1dS3tn16Mr7zrGz55Pr99aUQJuR1cPN43ZsPnF/ayZPbV+Zs9WD8+2Tedo8A6j59u141g+LqKLqPVdF199mb4Jg09wYLh2T/9Onv22M1gcF+1Vt4y/GWFzoVZ6zWzlNqTYZLR3vDNc5P68/wowleYwigVsPcQisug0QhaHzVt17BrLCRhlE1eEBTFUtEj6Glncl5AfC8vyoJDY5q7+qnSKC4QEXpb7VLS4mdSgHDoy2Fu1mfdWt12na57dtawq9Vm33It+8zqWF6zWXPcRqFBGxR7ELuUTLHKpVR2w5/vAcLE54iEiBkLmsEIcf2biD0ggBaQO3k4KOFoTKWKg1dAm28urtUWYjl7mzcX7oI7E6BrV1Rck2vWmQrEdpW7saPcdwjiFCMl74rfXBKcC9mKOVhkIrYrC1AhKJMXAFMaLPc1PJPjJI2RAmomNMxiVEmjNG+MyTf/jgEgz613/XF+7r4sa/9b0QHpE2LlwFUtp0hOER24guyikC8Ltu3tgovwnSzE6njJdgqG4QbJ7qcPlih6lBSRFRWQS899w05Uc7+gMlG4wLDkeXlBS32Xp79djGMOKvNKtlhk+QDqStmYDG9KgbPNEYKZlKf1mL4iYpYhzB/dDiXqvcylfRdfJiIyEkCgRNJFy5c/eBqMEFdPg0DSfPXTd8dOStk3gVbikK0byxeEQvztIwP6UPlJ8438W1IWfozrQKytPLJO+R4QmMzUSt0D6y9IAakMi6VwUbYd/FCAQ8l3jWWTSyxCsmmSCfT1F00pUksHENKMiKCn54ZtlcxxinWK/A+nT2FyJX6/Wlf8y6v1aTgYSb1KgF764v92NnBOFygfltI/x9LSV/KlKJOT2ZYqvwM8LMz97nfCvFtJ+5P5s2Wrp/vnof0H</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC67142C4FED1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC67142C4FEC1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC67142C4FEC1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC67142C4FF81339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC67142C4FF81339E0401F0A05996248</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415983991</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC67142C4FF91339E0401F0A05996248</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>267dc62f-6dd2-42f0-88cc-8f0902f3fae9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a50e0a88-8386-498f-8a41-81c056e11b21</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafba5c2-c766-4d4e-9d25-d2cced24e290</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22f24b94-da1f-4960-8480-8c2015ebf96d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_02002_AccountGet_MTHD_API_Invocation_with_Method_PUT_405_Method_Not_Allowed_P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="1f9aeee3-d24c-4248-a0ea-058c9867a1eb"><con:description> This case describes the scenario where a consumer wants to delete an Account which is active. In order to delete an account it requires Node ID,AccountID which is invalid  and UserID. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c054cb5f-41e4-42f9-bbdb-05659e23174c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="fe535bca-99fc-4859-8464-b10b7e35da06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="6bea1ba3-4374-4ec9-a90a-c12a2a2b128d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import soapUIUtils.soapUIUtils;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def certPath = groovyUtils.projectPath

//Set fileKeyStorePath value 
//log.info "certPath: "+certPath;
//tP.setPropertyValue("certPath",""+certPath);

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountGet_PUT");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet_PUT" id="70d18a10-5a68-4ed3-bd0a-83ddf4825aff"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet_PUT" mediaType="application/xml" sslKeystore="RET_concat.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="469b0188-c125-4345-ab58-539672d78dae"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 1
for (n in hList) {
	if (n.value == "HTTP/1.1 405 Method Not Allowed") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90182</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbRbuI6EH3vV0Tp4yo4CSFAVJAo0G1WLXSB0lVfrozjELeJTWOHQL/+2qFJgdLe7pWQkCfjmTMzx8e+4DCJba/HOU4FYVTzBx39H9tCaBE6llG3W7bh2OHCaDehbdTdptlsmJYLTUfXfM4z7FMuIBUd3TYtxzBdw7ZnZsNzXM9u1ey29ahrc5xyGVq61Exd2yQx5V6RtqNnKfUY5IR7FCaYewJ5097tjSc9PVhi0rsXO5RFwrQbCbHyAEC1ACMcx6iGWAIuwIHPRcC9KVlSKLIUv+UMeEd/25vneS2v11i6BLZpmsBsA+kTcLI817tn5WYc+DRku3UfUkYJgjF5hQrULRYRC7RevGQpEVHySWgLWKYKbeANMpDl0HMdvCco0H0z0gHIlEODR9Aqg01wiFNMEdbuJ35HP//eBHd7ZymkPGRpwo/WfwcJ0zWO2QoHBi8rK9F9P+KJdnUvMPJ8iuKMkzUeKZqsIMJcu0txSDY3hEvyBVwrxq9tuPyRkmUY/c1YLsA+VgkdnOjOgCwxF/9nZvvz2kWZwzjD3dFzk88G7rThpPY8F9c/r/qhffs4vhrlnQLCvvMOVDXut/UxWStuvW1aAxGOhajn5iv9Mcza40s6GzujX1F8+zO0F88Bt9cMNGaD+2gBnx9bM/PSZ+PcBzP3NZr2nntOOH+a/4jc+zt4lvEpArH9G1iQJqa7TW6niZNGw/yh2fiTk9G6Hm+zDevjfssfb3/N2fXL7+E1eGhzGOLrlj3pP6T2z2UyeFmxM1nlYt6bD+5ddzuKJzDDeee9pv0aDo2lJEyzxRNGolwqevgD7UrOC4qv5UVZSGCEhau3UhrFBaZC76pdSlq8TAoQCTw5zN36qu82rfrQNdv1K6s5vByajmldmT2z0W67dsMtNWiH4ghin9GQqFxKZXf8+RogSjyOaYBTY80yFGGufxFxAAXUfDqRh4NRjmdMqrgV8xfSDnOrxUPXIqj+FJl1K0kWUrtHTIzpOO2FAqeH2t060O4JRmRFsBJ4xXAuKc6FbMYLXGcitmprWKM4k1dAqlTYs51WA3CSrGKsoIKEBVmMa6toVbQG8N2/bUDEC+tkOCtO3qeFHX8reyB9AqIcuKrlEss54hOXkFUW8mnBlrVfcBm+lwVEHTDZUJEStENy+OmdJ4ogFUlkRSXkyvPYcBAVHBdUJQrWBFVMr65oqfDy/HfLcbzA2kstW6+zYgBNpW2pDA+kxFlgilEmBWo7Y8+YgioE+Nb9UKE+ylzZD/FlIqJTAQVOJF20YvmNx8EUc/U48CXRN999eRyklH0TeCNO2fqxfEMoxF8+M5CHlJ8038m/nKXB+7hOxNrLI+uULwJB6FKt1E2w/YQUiMmwREoXS/eDnwpwKvmhsWpyhUVINi0ygT//oilN6ugQIZZR4Q/0wrCvkwVOsV1h793pQ5hCi98u1w3/9HL9c3szlYqVQL3yJf/tbJCCLgjr6g4vsHT0jXwryuR0uafLbwA/SLNj9xumPbTq9fahNDutqoEHlXQ/mD9a9np6fB66/wI=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC67142C502F1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC67142C502E1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC67142C502E1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6713E6093F17EBE0401F0A05996256</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6713E6093F17EBE0401F0A05996256</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415987428</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6713E6094017EBE0401F0A05996256</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>267dc62f-6dd2-42f0-88cc-8f0902f3fae9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a50e0a88-8386-498f-8a41-81c056e11b21</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafba5c2-c766-4d4e-9d25-d2cced24e290</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22f24b94-da1f-4960-8480-8c2015ebf96d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_02003_AccountGet_MTHD_API_Invocation_with_Method_OPTIONS_405_Method_Not_Allowed_P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="42d0875c-d9aa-4c72-9033-5d80d5aaa362"><con:description> This case describes the scenario where a consumer wants to delete an Account which is active. In order to delete an account it requires Node ID,AccountID which is invalid  and UserID. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5bd01bc0-af8a-4bbd-bca3-786555d5de98"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="52030b60-5de9-4cb1-afc4-b81c81ded284"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="0dc97f0c-0499-4b59-9abf-11fa89d99d4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import soapUIUtils.soapUIUtils;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def certPath = groovyUtils.projectPath

//Set fileKeyStorePath value 
//log.info "certPath: "+certPath;
//tP.setPropertyValue("certPath",""+certPath);

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountGet_OPTIONS");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet_OPTIONS" id="5aa51d72-fea2-40c2-b58c-35f4be2cbbb0"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountGet_OPTIONS" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet_OPTIONS" mediaType="application/xml" sslKeystore="RET_concat.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="ab6a98ec-8e31-4989-b4e8-58ac71e842a2"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 1
for (n in hList) {
	if (n.value == "HTTP/1.1 405 Method Not Allowed") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90182</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH7vr4jSx1XIhQAlAiTKZZvTK5fSnr6sjOOA28QOsZ3S/vq1Q5MCpV3OSkjIk/HMNzOfP7vFQBw5XpcxlHJMieb32/o/LrRCuzlHRlhtnBkuqDeMphueGXZoWS4I5Tq0dM1nTCCfMA4Ib+uOZbuGVTccZ2rVPLfuVe1KrWk/6doMpUyGli4VuWsdR4R5edq2LlLiUcAw8wiIEfM49Cbd6ytPenqgwKR3WhuUecK0s+Q88UwTVgIEURTBCqSx2TJ3fFoB8yZ4QQAXKfrIGbC2/rH39fW18lqt0HRhOpZlmVbTlD4Bw4tTvXNSbEaBT0K6WfcAoQRDEOF3oEBdI76kgdaNFjTFfBl/E9o2bUuFNtAaGtB2yalufibI0R0ZaQdkyoDBlsAugo1RiFJEINLux35bPz1ugpu90xQQFtI0ZnvrP4OESIYimqDAYEVlBbrjIx5oV6eFoOcTGAmGM3SjaJIAiJh2l6IQr68wk+QLmJaPX1sz+cMFyxD8k7G0zG2sErp5oDt9vECM/5+Zbc9rE2UGIoE65+ThafQ05bA79lf99Sh8vlxM+e9sMjlr5xC2nTegynF/rPfJWnLrY9O5/9xouqOX2cuD65CpcId/m4vB+6QLRXyDXtyp/x4su8lfbs+fPl28CXwfvtyPXpfv74/B8HejCm6dKR1GN00ruz1hIBmxPlkMH1Y1O0izsIeTqzuaPUa9efaLnHcBm98jnAkB6rPaSISxbc+qE05FUru56N/M5pePiagO2Ci8PHkZXwBRze7JY3g+DgbL6RVtf9a0XcOusZCEiZg/I8iLpaKH39eGcl6A/ywvyoIDI8xdvURpFOOIcL2jdilp8YQUIBx4cpib9bBXb9jVQd1q1nt2Y3A+sFzLHlpdq9Zs1p1avdCgDYo9iD1KQqxyKZXd8OdngDD2GCIBSo2MCrhETP8hYh9woPlkLA8HJQxNqVRxuzZvxlWAndXzqmk367SxbIh5IwBQ124ovyW3aTfkKN3V7rMd7R4jiBOMlMArhjNJccZlM1YgEzyyKxmoECTkFZAqFfYc96xmMhwnEVJQzZgGIkKVZJnkrTHZ5t8xAGS5dTyY5ifv28L2vxU9kD4BVg5M1XKO5BzRgUvIKQr5tmDb3i64CN8VAVYHTDaUpxhukOx++uSJIkhJEllRAbn03DfsRDX3CyoTBRmGJdPLK1oqvDz/nWIcK1BZVUSWiXwADaVtqQxvSomzzQmCQgrU25S+IGKWIcyj7ocS9V7m0r6LT/AlmXDAUSzpouXLIx4HE8TU48CXRF8f+/LYSSn7xtGaH7L1IvmGUIh/fGZADyo/ab6Tf680DT7HdSDWVh5Zp3wRcEwWaqVugrdvSAGpDIuldNF0O/ihAIeS7xrLJpdYuGTTXHD0/RdNaVJbBxBSQbjf13PDtk7mOPlbgrxPpy9hci3+uFzX7NvL9fH6aiIVKwZ66Yv/29nAOV0g0tUdnmNp62v5VpTJyWJLlz8AfpFmt3pmD/pObdAd7kmzWzZwp5LOF/NXy1ZP989D518=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC6714381ED35EAFE0401F0A05996254</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC6714381ED25EAFE0401F0A05996254</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC6714381ED25EAFE0401F0A05996254</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6713E6096C17EBE0401F0A05996256</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6713E6096C17EBE0401F0A05996256</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415990998</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6713E6096D17EBE0401F0A05996256</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>267dc62f-6dd2-42f0-88cc-8f0902f3fae9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a50e0a88-8386-498f-8a41-81c056e11b21</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafba5c2-c766-4d4e-9d25-d2cced24e290</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22f24b94-da1f-4960-8480-8c2015ebf96d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_02004_AccountGet_MTHD_API_Invocation_with_Method_HEAD_200_OK_P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c0bc2140-9fdb-4c5b-ac42-f12a2edbed31"><con:description> This case describes the scenario where a consumer wants to delete an Account which is active. In order to delete an account it requires Node ID,AccountID which is invalid  and UserID. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2296283f-d20f-47f4-b84c-1e0138074b04"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="7615da07-1c57-4c62-831c-53652a4bedda"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="f46f61a1-57e7-4fd8-bdf4-d5a1844cbac6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import soapUIUtils.soapUIUtils;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def certPath = groovyUtils.projectPath

//Set fileKeyStorePath value 
//log.info "certPath: "+certPath;
//tP.setPropertyValue("certPath",""+certPath);

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountGet_HEAD");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet_HEAD" id="352661ae-c6b6-461c-bf8c-a88c827c9a2a"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountGet_HEAD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet_HEAD" mediaType="application/xml" sslKeystore="RET_concat.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML_USER1}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="651bb825-543e-4504-9974-f3424998eb0d"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 1
for (n in hList) {
	if (n.value == "HTTP/1.1 200 OK") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90182</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chFxIgUUGi9MZur0B3T/flyDgDuE3sEDsh9NevHZoUKO3pHgkJeTKe+Wbm82cfcRRHTtDnHFJBGNWGJ139X2jjpmVjz/Cspm244dQzOnbHMTBudqat0LHatq9rQ84zGFIuEBVd3bFs17BahuNMLC9wW0HTa/ie81vXfkLKZWjp0rB0rYgjyoMybVfPUhowxAkPKIqBBwIH4/7VZSA9A1Rh0ntHG5RlwrS3ECIJTBM3QsAQRbiBWWwemTs+RyEPxmROkchSeMkZ8q7+sne1WjVWzQZL56ZjWZZp+ab0CTmZf9V7X6rNEA7pjG3WA0QZJRhF5BkpUFcgFizU+tGcpUQs4ndC26ZtqdAGFNjAtku/6uZrghLdJyPtgEw5MvgC2VWwEcwgBYpBux8Nu/rXz01ws3eSIspnLI353vrvIAHNIWIJhAavKqvQfT7igXb1jgAHQ4qjjJMcrhVNEoSBa7cpzEhxSbgkX8i1cvxaweWPVCwD/DdjOTK3sUro5oHunJA5cPF/ZrY9r02UnyjKoPd7dJ656Tq7JIu7aOEml6ti+Tx3Lppup1tC2HbegKrH/bLeJ2vNrZdNx6fXyxvnYvp73fr1MFrb3+4ewL9bPzLO0cr7fjkYTvE9e26PXcc6T0/9JD4fmNc/LH7uuU+rO3qBrscy59U9HEdfnjv3I7+4v7kYdaww94uLR7HAt5Npy5t+b6/9mN0ssfnr9iJu3z80O0sYyCPpJP6PB6fZupp5x7NZNrp6OPs1PR/ZX/JJ2EnZzPvx7THJY2jlj3fd15q2a9g1VpIwzqaPgEW1VPQYnmhncl5IfCwvykJCY1a6BonSKC6ACr2ndilpCTIpQCQM5DA367NBq227zsCzvGO72fRPLdeyz6y+5fl+y3E7lQZtUOxBHDA6IyqXUtkNfz4GiOOAAw0hNXKW4QVw/YOIJ0ggbUhH8nAwymHCpIrbT9kTuGJqo2Lm5XMfgfBarWKZ6No1Ezf0Ju3PBKS70t3Zke4RYJIQUPquCM4lw7mQvViiPBOR3chRg0Imb4BUiXAge+CZnMRJBAqpGbMwi6CRLJKyMybf/DsGwry0jk4n5cF7t679b1ULpE9IlANXtRyDHCMcuIOcqpB3C7bt7YKr8P0sJOp8yX6KlOANkt1PrzRR/Kg5IiuqINee+4adqOZ+QXWiMCe4Jnp9Q0uBl0exV41jiRrLRpbnWTmAtpK2VIY3pcLZ5hhwJvVpPWFPQM06hPmp66FGvZe5tu/iy8SCjgUSEEu6aOXyE2+DMXD1NhhKnheffXjspJR9E1CIQ7ZBJJ8QCvGHrwwcYOUnzbfyb8XS8HVcB2Jt5ZF1ygeBIHSuVuoiWL9DCsxkWCKVi6XbwQ8FOJR811g3ucYiJJummYD3v2hKkro6wphlVAxP9NKwLZMlTrFOIHh1ehOmlOKXu7Xg796t/1xdjqVgxUivfcl/OxukpAsGXV3hJZauXsinokxO51uy/ALwjTI3/U7HP+u3XOtsV5k9p27gTiW9N+a3lq2e7p+H3h8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC67139889FB640FE0401F0A05996252</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC67139889FA640FE0401F0A05996252</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC67139889FA640FE0401F0A05996252</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC67142C505B1339E0401F0A05996248</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC67142C505B1339E0401F0A05996248</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403415995031</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC67142C505C1339E0401F0A05996248</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>267dc62f-6dd2-42f0-88cc-8f0902f3fae9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a50e0a88-8386-498f-8a41-81c056e11b21</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafba5c2-c766-4d4e-9d25-d2cced24e290</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22f24b94-da1f-4960-8480-8c2015ebf96d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_02005_AccountGet_MTHD_API_Invocation_with_Method_DELETE_200_OK_P2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ddb7481d-9332-449a-860a-32040594b928"><con:description> This case describes the scenario where a consumer wants to delete an Account which is active. In order to delete an account it requires Node ID,AccountID which is invalid  and UserID. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="36ed70f0-a944-446b-a828-e8136c67cdcf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="0b6e50f0-bf10-40ac-afe6-f6f22edcfad3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="29751869-9c41-40e8-8179-ef5e2fdbc4e1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import soapUIUtils.soapUIUtils;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def certPath = groovyUtils.projectPath

//Set fileKeyStorePath value 
//log.info "certPath: "+certPath;
//tP.setPropertyValue("certPath",""+certPath);

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountGet_DELETE");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet_DELETE" id="c480be89-2306-42f2-8466-86962957b6ff"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet_DELETE" mediaType="application/xml" sslKeystore="RET_concat.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML_USER1}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a6bdf3ae-aea4-4176-adff-c45bfe9d7c63"><con:configuration/></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90182</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj6uQhCRAooLEAu3Sry1f3XZfrowzAW+DncZOCvvrrx2aFCjt7V4JCXkynjkzc3zsU45WcT3ocg6pIIxqw35b/2feajoND7mGD6hpuOA1Dd9uuEZYDyM3cjzHdyxdG3KewZBygaho63XLdg2rYdTrU8sL3Ebg2jXXbv3StTtIuQwtXWpy13oVUx4Uadt6ltKAIU54QNEKeCBwMOleXwXSM0AlJr1zukVZJEw7SyGSwDRxLQQMcYxrmK3MU3PP5zTkwYQsKBJZCi85Q97WX/Y+Pz/Xnp0aSxdm3bIs0/JN6RNysjjRO1/KzRAOacS26x6ijBKMYvIHKVDXIJYs1LrxgqVELFfvhLZN21KhDVhjA9suPdHN1wQFuk9G2gOZcmTwJbLLYGOIIAWKQZuNh2395HMT3O6dpojyiKUrfrD+O0hAc4hZAqHBy8pKdJ+PeKRdnVPAwZDiOOMkhxtFkwRh4NptChFZXxEuyRdyrRi/tubyR0qWAf6bsZyau1gldPNId/pkAVz8n5ntzmsb5Q7FGXRmo/n60p4s7Mb5Dft22/Nmt44TDwdu1GoXEHadt6Cqcb+sD8lacetl0/ii5Uf9O8sfTa/yi3FuPV4vhxdzQJd9ODu/fRihr99jL4mSwc2DP3vw2HRxjvLlbGj/mt/V0+nP2f3l+feeY0Nj+aVXb47du/Pz+xv4ebdYtx5Ggx9X6dUfNH5sikHiRKG3aY5av0Xv99P37OJmNl88LnzyuBH2MuHh1xV9uG8409bIPQu/bNb5iE7m+Oef63lO3LPNL9Z+rWm3hn1jKQmTbP4bsCiXih7DvnYm54XEx/KiLCQ0osI1SJRGcQFU6B21S0lLkEkBImEgh7ldn/UaTdvxva5tO03f8weWa9lnVtfyfL9RdwelBm1RHEDsMRoRlUup7JY/HwPEq4ADDSE1cpbhJXD9g4h9JJA2pGN5OBjlMGVSxW2vaac2Z96SNhz7EbMmFf5zNndzXbth4gf9kXYjAem+drf2tHsMmCQElMArhnNJcS5kM55QnonYruWoRiGTV0CqVDiouy3P5GSVxKCgmisWZjHUkmVStMbk2/+6gTAvrOPBtDh57xZ2+K3sgfQJiXLgqpZvIOcIRy4hpyzk3YJte7fgMnw3C4k6YLKhIiV4i2T/0ytPFEEqksiKSsiV56FhL6p5WFCVKMwJrpheXdFS4eX575TjeEK1p1qW51kxgKbStlSGN6XE2eYEcCYFajNlj0DNKoT5qfuhQn2QubLv48vEkk4EErCSdNGK5SceBxPg6nEwlERff/blsZdS9k3AWhyz9WL5hlCIP3xm4AArP2m+lX/PLA1fx3Uk1k4eWad8EQhCF2qlboLNO6TATIYlUrpYuhv8WIBjyfeNVZMrLEKyaZ4JeP+LpjSprSOMWUbFsK8Xhl2dLHCKTQLBq9ObMIUWv1yua/7u5Xp/fTWRirVCeuVL/tvZIAVdMOjqDi+wtPW1fCvK5HSxo8svAI9Ls9X8SJr3K+m8Mb+17PT08Dx0/gU=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC671395A1087959E0401F0A0599624E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC671395A1077959E0401F0A0599624E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC671395A1077959E0401F0A0599624E</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC671395A1137959E0401F0A0599624E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC671395A1137959E0401F0A0599624E</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140622_1403416000191</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC671395A1147959E0401F0A0599624E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>267dc62f-6dd2-42f0-88cc-8f0902f3fae9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a50e0a88-8386-498f-8a41-81c056e11b21</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafba5c2-c766-4d4e-9d25-d2cced24e290</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22f24b94-da1f-4960-8480-8c2015ebf96d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_01029_AccountGet_PYLD_Unaccepted_Response Encoding_P1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="66f2dfcf-2348-4e6d-8f88-5d7feccd975e"><con:description> This case describes the scenario where a consumer wants to delete an Account which is active. In order to delete an account it requires Node ID,AccountID which is invalid  and UserID. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4f7c6da1-a2e4-4157-a023-43904e2d8c83"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="7901e2eb-6415-467f-aab5-737f03bd2451"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="94039c4c-fe7a-4d95-9f48-8b7817409261"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import soapUIUtils.soapUIUtils;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def certPath = groovyUtils.projectPath

//Set fileKeyStorePath value 
//log.info "certPath: "+certPath;
//tP.setPropertyValue("certPath",""+certPath);

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountGet_HEAD");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90182</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdU9s6EH3vr/C4jx3HH7Eb7CGZSUkAQ0NaEijwckeRN7HAlhxLzge//koONkkIXHoZZjJar3bP7h4d6ZijNHGCLueQC8KoFvba+j8enjQt15sauNnChgsWNo583zWQ6zsOdhB2pljXQs4LCCkXiIq27li2a1hHhu2PbS9wvaDZali286Brt5BzGVq6NCxdW6UJ5UGZtq0XOQ0Y4oQHFKXAA4GDUXfwM5CeAaow6Z3jDcoyYd6JhcgC08SNCDAkCW5glprH5o7PccSDEZlRJIocXnJGvK2/7F0ul41ls8HymelYlmVavil9Ik5mX/XOl2ozRCGdss36BFFGCUYJeUYK1ABEzCKtm8xYTkScvhPaNm1LhTZghQ1su/Srbr4mKNF9MtIOyJwjg8fIroJdwxRyoBi0m+uwrX/93AQ3e8c5onzK8pTvrf8OEtAFJCyDyOBVZRW6z0c80K7OMeAgpDgpOFnAlaJJhjBw7VcOU7L6SbgkX8S1cvzaist/UrEM8N+M5djcxiqhmwe60yMz4OL/zGx7XpsotygpoNM7m9/3xjds9sdFz4Bv4sd+b/L7d5xfP7VLCNvOG1D1uF/W+2StufWyidzOz4ur2S+XJ9kDH6weYgc9xH3XPG8NL/kAztHq1L+/u3jGF4OMnd1ORoPRqrceYj/G2eNla5Yu78218NPp08WXIfvmnjWHrfDsW/f7ujl6GCyfpkO8hsH8bsDvGNw9XOGRlxbZZWKxK2aH6cXssXhejcYDuPzjRRe9C3yZ3sTp7fQLmmSo74fndnrXhaW59B9/t19r2q5h11hJwqiYPAIW1VLRI+xpp3JeSHwsL8pCImNaugaZ0igugAq9o3YpaQkKKUAkCuQwN2vLOu03vZOTnud9b7a6R33La1ot37dPre4P+Vdp0AbFHsQTRqdE5VIqu+HPxwBxGnCgEeTGghU4Bq5/ELGHBNJCei0PB6McxkyquO0RvvDmrXyyaEX2k7dM7Oz7zBVNW9eumBjSYd6dCsh3tftoR7uvAZOMgBJ4xXAuKc6FbMYcLQqR2I0FalAo5BWQKxUOHPfIMzlJswQUVDNlUZFAI4uzsjUm3/w6BsK8tF73x+XJe7ew/W9VD6RPRJQDV7X8ADlHOHAJOVUh7xbs2NsFV+G7RUTUAZMNFTnBGyS7n155oghSk0RWVEGuPfcNO1HN/YLqRNGC4Jrp9RUtFV6e/041jjlqzBvFYlGUA2gpbctleFNKnG2OABdSoNZj9gTUrEOYn7ofatR7mWv7Lr5CxHQkkIBU0kUrl594HIyAq8dBKIm++uzLYyel7JuAlThkO0nkG0Ih/vCZgQOs/KT5l/xZsjx6HdeBWFt5ZJ3yRSAInamVugnW75ACMxmWSOli+XbwQwEOJd811k2usQjJpkkh4P0vmtKkto4wZgUVYU8vDds6WeIU6wyCV6c3YUotfrlcV/zdy/Vu8HMkFStFeu1L/tvZICVdMOjqDi+xtPWVfCvK5HS2pcsvAA9Ic9879X9IaXa3pdmxW826gTuVdN6Y31q2erp/Hjr/Ag==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE35CE5F9C37A4E05307991F0A2173</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE35CE5F9B37A4E05307991F0A2173</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE35CE5F9B37A4E05307991F0A2173</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE35CCD55637A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE35CCD55637A8E05307991F0ABBBB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140819_1408463136308</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE35CCD55737A8E05307991F0ABBBB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>267dc62f-6dd2-42f0-88cc-8f0902f3fae9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a50e0a88-8386-498f-8a41-81c056e11b21</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bafba5c2-c766-4d4e-9d25-d2cced24e290</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22f24b94-da1f-4960-8480-8c2015ebf96d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>US</con:value></con:property></con:properties><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="AccountGet_PERM" id="754cea64-66bd-4e07-bbf2-461e79f1d9da"><con:settings><con:setting id="GeneratableJUnitReport@Folder">C:\Users\ralluri\Desktop\New folder</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_AccountGET_PERM_API_Invocation_from_a_Retailer_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="402d9f35-8b83-4142-a1da-a37a85e3332f"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e01abe6b-f8a5-4a72-bbd6-949c51c10b6a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue(tS.getPropertyValue("role_CS")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="2a73530c-0528-4d61-bc95-a5b730f0e090"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="69ae378c-345a-4a67-a96d-db90e369af39"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuI6EP0VyvM4ZSwbbGJXoIolTshkm8BkMnlJKXIDSowEksz29Vcy4AGyXO59cnW71X160VGfSjxOvagpJQhFOSstximTUa6tW5lgEceSyojhMchIkajXvL6KvDKK8PaIVep26tYzrgFBYYLsCrwM7GoIxMYII/vkpBJCUBu4fhVrUykz6DKpMFN1y0Nu1Uah7aI+CiK/ElWDsoeCJ6v0AEJq39qkjKwNqIWsWyOlJpHjzOfz8rxS5mLoeAi5zuP1VY+MYIytxuk6ozyQaGzsSTkBAmlKyoSPnVNnz+Y0kVGPDhlWmYBNrOSzWMhBoaNtEkmH36ziLCRdNuC52MaMM0pwSlfY1Oca1IgnpWY65IKq0fjTJFxkHNuwIDZxq+yb5exDO9LRHkIhsS1H2N34uocBCGAESr/uu3Xr23Fdy4/2BWZywMVY7ov/DQ+wGaR8Aoktt2ltoB3v8INKNU6BRF1G0kzSGdyYYZ1gAnLTTSDHuyrdCRjQxRWVekAX0qBzduEdiOtqdOgQpPo/DdppztrJA04zaEy4eHvjPYZv8dhr/7qMO/NzGrd7NX5WzwHsGueKorVr8WAoiyFan3g8j/3p7PcDW82526/8+OO5K/XTe0X94bT1urhMGe51/QG7TR/my2U3bksPcYghmI1qzdsFhBeT5uP3kzB+alXSpTofhBcvK3S5up10vN+sdfP79XtFBq+roRgOrnnvly/eRFU1Z5mYXkH8NP1zP4wDiXFMf1y/VS/xanlxFndfA+/y8efd3Z+3acu78Pm1337apHuAf1+3vfO97OUViNqKZgy6nVKsu4TV12RmNDSxB7lpNDHkIxUwZTXMKcMdUabpjiaR7uFaRl7LPfFaHd8PUdCuBGfIryA/DN0z1KyGzeqWZNYoDiC2ORtQE8tQ7npsvgZIxpEEloCwZzzTTCetLzx2sMKlLrvXl4AzCX2u6dn1U4UXykWrAPsiTQStYpzMxItVuuHqlt2K5kCB2OfkcI+T74HQCQVD3GaupR5sqXQtpniWqdQtz3CZQaapXRiWjbzqie9IOp6kYJA6Y55kKZQno0leGUeuv56Nicy192f9/LZ9mtfhv20JtE1CjYE0ubRAtxE+eFwq20Q+Tdj1dhPeum9mCTUXS9dTCUrWSPZ//R0TMx/FjOiMntu9Z3eLuzA/+vj7k84XoJzDehSBkhndCbt9uvUjoGmjse3mFJen5Ww2y/L+1RCqOEK7dzRLuk4PSKZZbdnnb8CcwoVz1BNSoD6IXOj38WVqxHoKKxjraSvl4hE7Qw+k2Rm6+posjl1I9kLquilYqI907VTvOwbxlysRiYix0+o7/Zlzkfxt1we+duLoPPXKoCgbGsk8H8tPhoJw7ZZq4uNi1/lHDj4Kvq8silxgUXqaXjIFn/8pGUarW5gQnjHV7Vi5Ypdlc5xqOYHor9E7NzmRF5sd/ffVzqb5CBDQ+6CkuX/zQEdm/tlwh6k3Qd+Tde0sDgO3GruVnKxra7JutQKvKMoeusY79XvNTp0OZ7zxDw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B1827EF9624F13E05307991E0ABB62</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B1827EF9614F13E05307991E0ABB62</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B1827EF9614F13E05307991E0ABB62</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B182BD55906C36E05305991E0A49A4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B182BD55906C36E05305991E0A49A4</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332063685</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B182BD55916C36E05305991E0A49A4</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"02B1841C261153C5E05307991E0A902B:3EB7B17E"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_AccountGET_PERM_API_Invocation_from_a_Retailer_CS_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="926d7858-19b6-43d3-8e82-a6efbf0137b6"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d7c7b8a7-085e-4890-bc43-dfffd6279df0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="5a816287-6382-4c69-865b-2469551c5962"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to Retailer_customersupport" id="036baa39-df32-4c4b-ba98-c5c24256e1ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTLCS"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="e31c2cc1-e717-461a-b4eb-112405696b59"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGUvGBuwKVDkhFzYBssBkMvMyJeQGlNgysWQD8/UrGfAAuSy7T65ut7pPX3TUF4LEke0HQkAqWcIrqzjiwi+0LSNLuZ8QwYTPSQzCl9QfBb0H364in+yOGJVup2X8aiK3NoUJMZuTqWM6NYRMz3GxSSbEayKvgQkOlakQGXS5kITLlmEj7JjIMzEao7rvOr6NqzZyfxqVJ0iF8q1MqsjYglqJljGXcuFb1nK5rC5r1SSdWTZC2HruPYzoHGJitC82GRWB0vbWnlZDoBBFtEqT2LqwDmwuQuGP2IwTmaWwjRV+FgtZyLOUTSjY7Mwoz0LY5dOkEK8ITzijJGK/ia5PD+Q8CStBNEtSJufxp0lgpB2bsKImxQ4/M6xDaCc6OkCYCmKKOcFbX0OYQgqcQuXbsNsyzk7rWnF0nBIupkkai0Pxv+EBnkOULCA0xS6tLbTTHX5QqfYFUL/LaZQJlkNfD+uCUBDbbgI93VXlMYUpWz0woQZ0JTQ6ax/ekbipRofNQMj/06C95mycPJEog/ZvuwnOfLmqw2U/cQddWav3vNrtZQd/axUA9o0LRdnajXg0lOUQbU7Mnr+tnex2/Mq8u0f21HWup8GtJQdxdP+cD+b5MO4HjaSfnt+jvr2uez8akbOauuFj8L0+PL+Fu+vaG5Pf0RWZ9F/wy0t92bCu58vH+7v49Wbevx0Mhk/nnOIgm513G811mD9zZr/1x3+NZjxCP3t/25Pe/Okp7QX1Hw/sfvjWXODe4vkxT5uTdDQMxHrZCMBak226R/gPdbs7P8omL0DlTtRj0O1UblSXiPyazLSGhea0MPUXmnyEBC6Ntj6lucPPFN2x0Fc93MjIvsRNp+O59ZqLO7Z9rW4SangevkFBrRHUdySzQXEE8SrhU6ZjacrdjM3XAGnsC+AhpGaeZIrphPGFxw6RpNLlQ3UJEi5gnCh6xskKRF5vxA6g37gx8xyCGy81r6lIuZ/IAR+kwVRCekjK3gEpD4GyBQPN3HqwhZpsIVUx3kieyQhXc1LlkCluTzXN+rbTdC3B4kUEGqoVJ2EWQXUxXxSlscTma5uEikI7vB4X1+3TxI7/7WqgbEKmDYTO5RJUH+GD1wXvEvk0YWzvJ7xzH2Qh0zdLFVSmjG6QHP76Myd6QMohURn9uhr9wjvcpfnJx9+ftL4AZR3XowwU5mwv7O7tVq+A4o32rptvpPpWzfI8K/rXQKhmpcq9pWgSWyOgmaK19Th5BW6VLqyT3pAS9VHkUn+IL5NzPpJEQqymrVKIJywNIxB6aeiqe7I6dSM5CKnqJmElP9JdRWrh0Yi/3ImoT7WdUj+qzzJJ/yT+ka+9OCpPtTNIxmda0u/H+pOhoIlyyxTzJem+848cfBT8UFkWucQi1TRNMgmf/6loSmsZhNIk47LbMQrFPs0WOOV6Af4fo3duCiYvVzv277udyYoRoKAWQsEK//qF9vX889keVW+Dvmdrz3WvXGy7gVewtbtl6+uOWxblAF37nfq9Zq9OxzPe/gc=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B184955C5225A9E05305991F0A3ED5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B184955C5125A9E05305991F0A3ED5</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B184955C5125A9E05305991F0A3ED5</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B184D956351D22E05307991F0A37A6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B184D956351D22E05307991F0A37A6</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332098874</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B184D956361D22E05307991F0A37A6</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"02B186398B341FE6E05307991F0A7A15:F2CBDAB7"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fce024d2-ddf2-4b5c-bb39-ec0134d9ce81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_AccountGET_PERM_API_Invocation_from_a_Accessportal_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7e3b2c27-7936-4511-8cf8-6e8f97f41e46"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a8fff1b5-2a34-4948-9080-1505d471294e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdAccportal"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="8c3dab78-5f05-499c-80cc-4fd46c396c7a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to Accessportal" id="e7a83811-073c-4b9d-8ec5-8757a57959c7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportal"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_MUC_Policy_Create" id="0ee109be-e454-4ba9-a49a-e7fa5542e90d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="2c92d564-5520-435a-b209-4f774d7e5307"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VynlMGS/YGFyBKoclQ1YCJJPkZUrIDSixJceSWfL1VzLgAFmGmSdXt1vdpxcd9RlHcWT7AeeQCsJoaRlHlPu5tqFlKfUZ4oT7FMXAfYH9YXBz7dtl00fbI1qp125o/1StOphW1dU90xvrjltz9JoHoLsTt2rblYpT9arSlPMMepQLREVDs03L0c26bpkjs+q7ju965Ypnv2ilR0i59C1Nyqa2AbXkDW0mROIbxmKxKC8qZZZODds0LePp5nqIZxAjrXm2zigPlDY39rgcAoYowmXMYuPM2LM5C7k/JFOKRJbCJlb4UyzTMOuGtAk5mZ5oxVkIe3TCcrGFKKMEo4h8IFWfGxAzFpaCaMpSImbxj0lYpnKswxLr2HLoiWbsQzvS0R7ClCOdz5C18TWACaRAMZQeBr2GdnJc1/KjoxRRPmFpzPfF/4YH6BwilkCo821aG2jHO/ymUs0zwH6P4ijjZA63algThIFvugn4eFelfgoTsrwmXA7okit0xi68A3FdjTaZAhf/p0E7zVk7eURRBs3roV0LruKkH7Z5986xLwaMV3kQVO5wIwewa5writauxYOhLIZofWK26F9VrCd75tiDyfxvi64+kuWjCNznlm28Lp23fkquVovl5PL1pn45Ow2z2ji8yG5Prx/79D58GSwST7zcMOuv4GkxDcYiI+NahXQe3mphRNr2nLWMzjvtXqL7t9Xd/cUopp1JzXxOrz3MP+jQuVxdmUnGn69Og5H96rywvhNbxvuq8vzyMEmCuNUy+jfxmLsPjSKdHfz7uu2dH2bjV8BiK6ox6LVLXdklJH4nM6UhoT7JTf1EkQ8XQIXWVKcUd/iZpDsS+rKHa9m0z61atet1PavlVjtBx3QrplevWx0zMLut1pZk1igOILYYnRAVS1Huemx+B4hjnwMNIdXnLJNMx7VfPLaRQKUeHchLwCiHEZP0bNVI5DoegurciazZcgFxrb7ib8u5Vrpl4o7epcFEQLpPyvU9Uh4AJgkBxdxqsLmcbC5kMd7RPBORVZ6jMoVMcnuqaNa3nZprcBInESioRszCLIJyMkvy0hh8/bV1hHmuHXRG+XX7MbHDf9saSJuQKAOucjkH2Uf45nVxton8mLBl7ya8dR9kIVE3SxZUpASvkez/+pwTNSDFkAStVmc43KIujI87LMvx9aTxCyTjsBpFoHBOdsJuX275BkjWaG57+Y7K7+VsPs/y7nmmWTFS6d6QJGkZQ8CZJLXViL0BNQoXxlEvSIH6IHKh38eXiRkdCiQglrNWysUjVoYhcLUy9OQtWR67j+yFlHUTsBTf6VqRXHcU4l83IuxjZSfVfflZsDT8bNc3vnbiyDzlxiAInSpJvR6rH4YCM+mWSN5j6a7z7xx8F3xfWRS5wCLkNI0zAT//KSlCa2gIY5ZR0WtruWKXZHOcYpWA/2n0xU3O48ViR/59s9NJPgIY5DrISe5fvc++mn863SHqTdCvXH3u1oKg6lbN7i5X1yv1elGUPXTNL+qvmp06Hc548w8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B186B58AA7560FE05307991E0A9399</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B186B58AA6560FE05307991E0A9399</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B186B58AA6560FE05307991E0A9399</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B186F7F71C56EAE05307991E0A0FCC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B186F7F71C56EAE05307991E0A0FCC</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332134514</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B186F7F71D56EAE05307991E0A0FCC</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"02B188ADCB0757E8E05307991E0ADC34:763B6BD8"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c733a8b-6a88-4405-80d0-adeda415b8d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2c92d564-5520-435a-b209-4f774d7e5307</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_AccountGET_PERM_API_Invocation_from_a_LLASP_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b1ec8d15-ee81-43ff-a5a6-0e9b10bc20b9"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="15796cdd-963f-4c9a-9902-6c8b59cb6449"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASP"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="0d422568-bfc9-457e-97b0-c6b795ba6789"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to LLASP" id="bda823ac-c9dd-4e3c-b23d-858f59d71071"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASP"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="f5d392d7-edee-448a-93b7-cd995e4671e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="be1f4faf-8dab-4c87-8657-963e0dfd4253"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc+o2EP4rjPPYMb5gCPYEZiCEhoSEBBNyel46Ql5jJbYElmwgv76SCQ6QS2mfPLte7X570ae94CiJba/DOaSCMFpZJzHlXqFtaVlKPYY44R5FCXBPYM/v3A09u2p6aHdEqwx6Le3vMLTBaTYbuonB1R1zNtObYf1cnwXIxbYVmhCa0pTzDAaUC0RFS7NNy9FNV7fMidnw6nWv1qg26s3fWmUKKZe+pUlVntqCWvOWFgmx8AxjtVpVV7UqS+eGbZqW8etu6OMIEqS1L7YZFYHS9rs9rgaAIY5xFbPEuDAObC4C7vlkTpHIUniPFXwXyzRM15A2ASfzM608C8GAhqwQLxFllGAUkzek6nMHImJBpRPPWUpElHybhGUqxzqssY4th55pxiG0Ex0dIEw50nmErHdfYwghBYqh8jQetLSz07pWHJ2kiPKQpQk/FP8bHqA5xGwBgc53ab1DO93hF5VqXwD2BhTHGSc53KthXSAM/L2bgE93VXlIISTrIeFyQNdcoTP24R2J22r0yBy4+D8N2mvO1skUxRm0bzfc9aeiP3v0f4+vR/lTlJBuMHl+iFmrALBvXCjK1m7Fo6Esh2h74u762b51n+dXy+lyEzl3yZAN1hjVUn4Os/7Cdtlrv3GVjaabaWSlfzCjMVznm2Vvlq6f8sfX4WRqPkRm1FmvFoOm0yeoC043d29Jxx3dvzQE3FuPNVRbp6g3hj+fG+HtzOgEFumEaPPkDwM7vvG5fWOEz/HEmg6t66vAHP+17N/47vWYuGEjFmZj9Wv0+ua0ynT28B/qdnfez2YvgMVOVGMw6FX6sktI/ExmSkMCPSxMvYUiHy6ACq2tTinu8DJJdyTwZA+3sml3raZb79uudWn37PMrs14zz13X6psd+8pydySzRXEE8ZLRkKhYinK3Y/MzQJx4HGgAqZ6zTDId137w2EMCVQZ0LC8BoxwmTNJzzSQbK1w6JM/qVmC6L2/5slbDzUir3DMxoqO0EwpIDznZPeDkMWCyIKCIW801l4PNhazFEuWZiK1qjqoUMkntqWJZz3aadYOTZBGDQmokLMhiqC6iRVEZg2+/to4wL7Tjq0lx277N6/jfrgTSJiDKgKtcuiDbCF88LvYukW8Ttuz9hHfuO1lA1MWS9RQpwVskh78+xkTNRzkjw2HHf9iBLm1POyur8fmk8QMi47gYZaAgJ3thd++2fAEkZ7R3rVyi6rKa5XlWNO9ccWMq3RuSIi3DB5xJSttM2CtQo3RhnPR+lKiPIpf6Q3yZiKgvkIBEjlqlEE9YGHzgamEYyDuyPnUbOQgp6yZgLb7SXcZy2VGIf9yHsIeVnVQ/yM+KpcFHu77wtRdH5in3BUHoXEnq7dh8MxSYSbdEsh5L951/5eCr4IfKssglFiGnaZYJ+P5PRdFZS0MYs4yKQU8rFPsUW+AUmwV4H0af3BQsXq515N/3Op0UI4BBLoOcFP7V6+yp+afzPZp+D/qZqa3LhtNz7J5V22fqRtfplkU5QNf+pP6s2avT8Yy3/wE=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B1891C64D52D13E05307991F0A6B4B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B1891C64D42D13E05307991F0A6B4B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B1891C64D42D13E05307991F0A6B4B</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B1895F291C2D27E05307991F0A2E19</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B1895F291C2D27E05307991F0A2E19</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332174830</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B1895F291D2D27E05307991F0A2E19</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"02B18B0D18022E3AE05307991F0AFE4A:254005A8"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7d23d351-27b7-482a-a3c6-f1f207b7de6a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ae84c3c-a5ed-47fd-97c4-c47e7e6af130</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_AccountGET_PERM_API_Invocation_from_a_LLASP_CS_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fbf77de1-34a1-4444-a176-14713eee1bcc"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="01e07cfc-d466-4f8e-be22-426840f91ab6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="2c62b3b7-59e3-43b2-8437-5e005bad4fda"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to LLASPCS" id="7e28db18-6914-41e5-a1aa-3cd3528dd5f1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASPCS"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="434f797c-ad44-4ef2-b26a-5c9282700268"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="b30c5b61-d68b-4626-8c47-b30eca72c8f7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU/I6FP0rTH10SpNKgXaEmSI61oOogHh5cWq6gfi1aW1Sivz6LylQAS+Hc5462d1Ze+1LVnLK/Sg0HZdzSAWNWWURhYw7hbWlZSlzYp9T7jA/Au4I4gzd655jVpHjb7ZoFa/b0l5eUd226xbWgyYmeg2QpdvYBh01CKrXkNXAGEtXzjPwGBc+Ey3NRLimI1vHaITqjlV3cKOKarVnrTKGlEts6VJF2prUgre0mRCJYxh5nlfzk2qcTg0TIWw8XveGZAaRr7VPVxkVgdL22p9UAyAQhqRK4sg4NXZ8TgPuDOmU+SJLYR0r+CkWMpBtSJ+A0+mRVu6FwGOTuFie+SxmlPghXfqqPtcgZnFQccNpnFIxi35MAiMFrMOC6ATX2JFm7FI7EGiHYcp9nc98vMYawARSYAQq9wOvpR0d1rVi6yj1GZ/EacR3l/+ND7A5hHECgc43aa2pHQ74TaXap0Acj5Ew43QOfTWsiU+Ar7sJ5HCoym0KE7roUS4HdMEVO2Ob3t5yVY0unQIX/6dBW81ZgYz9MIP23WwUgmD9juVeXRjJ8QKPzwYWfczt61ZBYNu5MJStXS33hrIcotWO+/i4c28uX8lHvR8s6ws0WOLLgT1ymzFvPHXHl8HDzfPCI/b9O3Xfms/2U7D459ybPdz0pv5bbicXs/l59kFw5/HPcXxzd4E6l68PjcB8H2S9k+PHWf82oGzZN8zx8eLqJoSxjUWP3V125sHYS59G7vIkX5qkkd/37UuvP+n3r7jr4eS12Ty+vJu9wRMa5s/8wSWtMp0t/ru2zZkfZq9vQMRmqcbA61YuZJd88buYKQsN9Enh6iRKfLgAJrS22qW0w8mk3NHAkT1crZHZwc3OmVm/QKbluugcWSeoYdv4HLk1q3u+EZkViz2KZzGbUBVLSe5qbH4nSCKHAwsg1edxJpWOa78gdn3hVzw2kIcgZhxGsZTnWoJyFtrREpF50MjzDHDSjCZapR+LG3aTuhMB6a4i2zuKPABCEwpKttVUcznWXMhKvPvzTIS4OverDDIp7KnSWMesNS2D0ygJQfE0ojjIQqgms6Soi8FXX1P3CS+sg/NRcdZ+zGr/36YA0iegyoGrXDogmwjfXC1ok8iPCWNzO+ENvJsFVB0rWU2RUrJisvvrc0jUdJQT0uu5w9uXs+EL3jAvNxwGIEvydafxCy1jvyJloGBOt8Jurm55CUjZaG/6+e5X36vZfJ4VHWwgdGKkEt6QKomNIZBMqtrHKP4DzCghjIOukJL1XuTSvssvEzM2FL6ASM5bpVge8GYYAldvBk8ek8WhD5KdkLJuAhbiO9tZKN87ivGvTyLiEOUnzbfyk8dp8Nmub7C24sg85ZNBUDZVK3V9fPwwFCSWsFQKX5xug38H8F3wXWNZ5JKLkNP0mgn4+U9FKVpL8wmJMya8rlYYtlW24Ck+EnA+nb7AFEJevuzovz/tdFqMAAH5HuS0wFcXtKPmn023lHod9KtYN7HlNrpyWDqFWFsrsTZr1kVZlB127S/mr5atOu3PePsv</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B18B815A7E044BE05305991E0A245F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B18B815A7D044BE05305991E0A245F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B18B815A7D044BE05305991E0A245F</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B18BC26F025AA0E05307991E0A45DE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B18BC26F025AA0E05307991E0A45DE</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332214797</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B18BC26F035AA0E05307991E0A45DE</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"02B18D58B43A5BFDE05307991E0A0D7B:B39DD4D7"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7d23d351-27b7-482a-a3c6-f1f207b7de6a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ae84c3c-a5ed-47fd-97c4-c47e7e6af130</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_AccountGET_PERM_API_Invocation_from_a_DLASP_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="84243bf1-06b6-42a7-b9b9-723541e404e0"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="192fe1b7-26d6-4a00-9c8d-0bd3d6693afc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="86677b41-97af-4661-9bff-4c531c81195e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to DLASP" id="b487c59a-9419-4ba3-bc3b-6eb44bca319f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASP"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="98f3a820-95af-4535-9546-6ecf6669ff19"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="55486914-f46e-4bc1-a436-3d0a9f667a65"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbtbuo4EH0VlP5chTgJoUlUkChQkZbSLnS79/bPyjiGmCZ2Gjsk3Ke/doAU6MeyKyGhmYxnznz4eK44TGLL73GOM0EYbZRJTLlfaTtanlGfQU64T2GCuS+QP+vdj32rCXy4P6I1gkFH+8dznLntAVu3QXiptyx7rnvuoqWHnh06eNEyLdSWppznOKBcQCo6mgXMlg483QRPoO076tcEjv2iNZ5xxqVvadIE2g5UyTtaJETqG0ZRFM3CbrJsaVgAmMaP+/EMRTiBWvdqm1EVKOvu7FEzxAjHMWoilhhXxpHNVcj9GVlSKPIM72KFX8UCBvAMaRNysrzQ6rM4DOiCVWIfUkYJgjH5BVV97rGIWNjoxUuWERElXyZhAuVYxyXSkdmiF5pxDO1MR0cIMw51HkFz52uKFzjDFOHGX9Ogo12c17Xq6FMGKV+wLOHH4n/Dg+kaxyzFoc73ae2gne/wk0p1rzDyA4rinJM1nqhhTSHCfNdNjM531XjM8IKUY8LlgJZcoTMO4Z2I22oMyBJz8X8adNCcrZNnGOe4238Jps/EvczjIppcp+TVyn6sbieT4u6+UwE4NK4UdWu34slQ1kO0PRFAdzSer0T8xyK9NtAzCAkm87fnt9FmlSZO33LTx7JwX0qHDYPXkFnPj3b0Y1GUDxDcOEmUWnfxor0B6H60Did9a2QPb43c+fk0eVn126vSLs1hfFfM4ObPPrgrpzd4BN7EYxE/pMPNeDIejNDw8pfrGS9TAtyIb8aBh925mdy+jpIwWG/Wzujv6c/WzyXv1Okc4D/W7e/8LJ+vMBJ7UY1BMGjcyC5B8T2ZKQ0J9UVl6qeKfLjAVGhddUpxh59LuiOhL3u4lYF1bbpDMOy5oN0aXPeHkriA43nmDejZttfbk8wWxQnEPqMLomIpyt2OzfcAUeJzTEOc6WuWS6bj2jceB1DARkCn8hIwyvETk/RsIhIR1nZbrEhLp11EThkVbnuVaY0JEw/0IestBM6OOdk74uQpRiQlWBG3mmsuB5sLWYs3uM5FbDbXsElxLqk9UyzrWy3XMThJ0hgrpEbCwjzGzTRKq8oYfPtv6RDxSjsdPlW37cu8Tr/tSyBtQqIMuMrlGss24k8el9Y+kS8TNq3DhPfue7m8HfJiyXqKjKAtkuNP72Oi5qOekcG4N3vcg65tzzsrq/HxpPENIuO0GHWgcE0Owu7fbfkCSM7o7lv5BptvzXy9zqvmXQJgG5l0b0iKNI0ZRrmktM0Te8XUqF0YZ70fNeqTyLX+GF8uIjoTUOBEjlqjEs9YGGaYq4UhkHekPHcbOQop6yZwKT7T9WO57CjE3+5DyEfKTqof5V/BsvC9XZ/4Oogj85T7giB0qST1dmy+GArEpFsiWY9lh84/c/BZ8GNlXeQai5DTNM8F/vpLQ9FZR4MIsZyKYKBVikOKrXCKTYr9d6MPbioWr9c68u97nU6qEUBYLoOcVP7V6+yr+afLA5reBf3A1IO+6w4Gl3bfax0y9aXtXtdFOULX/aD+qDmo0+mMd38D</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B18DC88DD83C94E05305991F0A738B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B18DC88DD73C94E05305991F0A738B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B18DC88DD73C94E05305991F0A738B</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B18E0EA8064DBCE05305991F0A339A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B18E0EA8064DBCE05305991F0A339A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332253313</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B18E0EA8074DBCE05305991F0A339A</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"02B18F391B8442A3E05307991F0AB72F:5AB49FE8"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7d23d351-27b7-482a-a3c6-f1f207b7de6a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ae84c3c-a5ed-47fd-97c4-c47e7e6af130</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_AccountGET_PERM_API_Invocation_from_a_DLASP_CS_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="af61ee17-ea04-4a5c-bf4f-7e50f341a41f"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a452c850-8231-4185-9b54-6b9dea017f5d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="e4afff38-6947-465b-ad8b-6f85ba4132dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to DLASPCS" id="052e1173-eeac-4f05-b0c0-60e0ec625ad3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASPCS"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUC Policy Create" id="c9e3fb54-8a6b-4ae3-b664-9fa037c2fed1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="a7b653cb-ff94-4420-b4ba-332af32dbdf3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtc6o6EP4rDv3YQQLCUZnqjBV7judoddSevnzpxLBIKgQlwdr++pugUrW213s/Mbtsdp99yZO94jiOLLfFOaSCJqy0jiPG3Vzb0LKUuQnmlLsMx8BdQdxxq99zrTJy8e6IVup6De25AqRWqTqOXrMcW7dR4Oh1wHXdnqIfdlAxqxXA0pTzDLqMC8xEQ7OQaeuorptogn64TtWt2GXHtJ+00l9IufQtTcpI24Ja84YWCrFwDeP19bX8Wikn6cywEDKNh35vTEKIsda82mSUB0qbW3tS9oFAFJEySWLjyjiwufK5O6YzhkWWwjaW/1UsZKC6IW18TmcXWnEW/C4LklxsY5YwSnBE37GqTx9EmPilVjRLUirC+MskTKQc67AmOjFtdqEZh9DOdHSAMOVY5yE2t75GEEAKjEDpbtRtaBfndS0/Okkx40GSxvxQ/G94gK0gShbg63yX1hba+Q5PVKp5BcTtMhJlnK7gVg3rAhPg224COd9VaZhCQNc9yuWArrlCZ+zDOxI31fDoDLj4Pw3aa87GyV8cZdD89fL29j4bP/iL6yxG0bzjtSG8H4ubod3IAewb54qitRvxaCiLIdqcuPXX4v6uQt9/P67m8c+lxxed8NdQzH2UOWg6uFyHCyOgnfdqB3oRcaoG+dEf+usJfpvE06E5/3M5qU8fZ6PLTnv5wJaPD089I7w2H9ovYujhn0+jp6flSxAhNugwQYP20y2BgZjcgx/Zs/70ps/Dh5f3m0o0Tx9rv404XFpL/87o02AQvTo16tB+8mfyGHqPjSKdPfyHut2dH2fTFyBiJ6ox6HqlG9klLL4nM6Whvh7kpu5CkQ8XwITWVKcUd7iZpDvqu7KHGxlZ12YdOdVWx+s4nZrVQU4FVet1s4NaplW73pHMBsURxHbCAqpiKcrdjM33AEnscmA+pPoqySTTce0bjx4WuNRlI3kJEsZhkkh6NtOFk9HaVPj1+SqDYOUgn2WzbK6VbhMxYIO0FQhIDzm5fsDJIyB0QUERt5prLgebC1mLJV5lIjLLK1xmkElqTxXLupZdcwxO40UECqkRJ34WQXkhJyuX+eZr6ZjwXDvqTPLb9mVex/92JZA2PlUGXOVyDbKNcOJxsXaJfJmwae0nvHPfynyqLpasp0gp2SA5/PUxJmo+ihnxeq3x8Lk9fjZ3yIsD5zmQJfl80vgGlnFckSKQv6J7YXePt3wGJHE0d/1c4vKynK1WWd7BKkIVI5XuDcmTpjEGkklee5skc2BG4cI46xEpUB9FLvSH+DIRsrHAAmI5b6VcPGNrGANXW0NXXpT1uSvJQUhZNwFrcUrXjuTGoxB/uxQRlyg7qR7Kz2uS+h/tOuFrL47MUy4NgrKZktQD8vbFUJBEuqWS+pJ03/kpB6eCHyqLIhdYhJymaSbg6z8lxWkNDROSZEx0PS1X7PNsjlO8LcD9MPrkJqfyYrej/77c6TQfAQJyI+Q096+eaFfNP5vtcfU26Ge6Nlstz6qituXldO1s6Npu3dhFUQ7QNT+pP2v26nQ8481/AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B1901AAD280C2DE05305991E0A4AF4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B1901AAD270C2DE05305991E0A4AF4</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B1901AAD270C2DE05305991E0A4AF4</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B19057AEDE5E82E05307991E0A128B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B19057AEDE5E82E05307991E0A128B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332291958</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B19057AEDF5E82E05307991E0A128B</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"02B1920535A45EF5E05307991E0ADA0F:6089CFC5"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7d23d351-27b7-482a-a3c6-f1f207b7de6a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ae84c3c-a5ed-47fd-97c4-c47e7e6af130</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_AccountGET_PERM_API_Invocation_from_a_Portal_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b5df9176-8818-4447-8303-8587c5018e54"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6c8e880d-5def-4752-a3c2-f57a2910265d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportal"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdportalcs"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="c1c9c446-d402-47eb-ba6e-ea1cdb343860"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="5b593735-11a9-4d6e-b456-b947da968489"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdU+o6FP0rTH08U9IWCqUjzICg9ggoguI5L3dimkK0TSEfgOfX36SVCohezn3qZHdn7bU/spJzDpPY8ducYyZISkubJKbcz6xNQzLqp5AT7lOYYO4L5I/bg77vlC0fbrcYpaDbNP4Jo7rr1au2WfUiy6xGHjI9VPfMqBFFUe25Znu2pVw5lzigXEAqmoZj2VXTapi2NbFqvuv5dqXsee5vo/SIGVfYyqWsduWkNrxpzIVY+ACs1+vyulJO2Qw4lmWDp0F/jOY4gUbrPM8oC8Ra7/6oHGKE4xiVUZqAc7Dncx5yf0xmFArJ8Hus8KtYFrAaQPmEnMzOjGIvDgMapdnyAtKUEgRj8gfq+gywmKdhqR3PUkbEPPkyCdvSwCbeIBPZVXpmgH1qJwLtMWQcmnwO7XesexxhhinCpYf7oGmcnda1bOuEQcqjlCV8f/l3fDBd4Thd4NDk27TeqZ0OeKRSrXOM/ICiWHKywkM9rAuIMH/vJkanQ5XuGI7Ipk+4GtAN1+zALr2DZV6NLplhLv5Pg3aak4M8wljiFpw81EadUa/edt+eRtFlj12N28lU3rBZMyOw65wZitbmy4OhLIYo3zElZJDK+3Xfaw/ZkwWm4pYRwnpXVhD1wmn7B6hSuY4V+2lA0urt5LI/eL25Alh0e/HGG1IZ9yvgzZMXP36Of9UepkH8MxzXBoPl7O7am9wvf151rx2wCO/uRs+XEbsmlf7o7pXdNqrXI2fmWXR4PX0c/KkPb65caePnC/Z78zpYjl7iyvpXIi+CzejpxunOItQs0tnhv2/bnvmxfH7BSGyXegyCbulSdQmK78VMW0hoRpmrv9DiwwWmwmjpXVo7fKnkjoS+6mG+tpyO3XA6bqfSdV275/Yst2LVGw370mpXvUZnKzI5iwOKFymNiI6lJTcfm+8JosTnmIaYmatUKqXjxjeIXShgKaD36hCklONJquT59QUm82T5UqFeaC9f2boWocpm5iKjNEzFLb1l7Uhgtq/JjT1NvseILAjWwq3nmqvB5kLVYglXUsR2eQXLFEsl7UyrrO9UPRdwkixirJmCJA1ljMuL+SKrDOD51zEh4pmVcLRImYBxdiDAl+kd/ttWQvmERDtwnVIHq27iI3eMtc3ny7xtZzfvLXxbhkSfL1VWwQjKmez/+pgWPSbFqBSJIW5vuRdb/hLiCAD4hh84LE0RL1yRnejby1xdC0pIWtv+LmF5WZarlcw6WteCyRQ8ULppgzFGUunc2yR9xRQUEOCkS6VgfRC5sO/zk2JOxwIKnKj5K2XLE14RY8z1KyJQB2dz6hNlL6Sqm8Abccx2EasXkGb87SMJ+Uj7KfOd+qxTFn606wjWThyVp3pECEJneqUvlLcvZgOlCpYoKUzZLvgxgGPB941FkQsuQk3TsxT46z8lrXFNAyKUSiqCrpEZdnU34yneFtj/cPoEk0l78dYj//3YM0k2AgirFyInGb6+sn09/3S2o93vQT/Ld92p1+r1Ws3O5dvN5btjtytFUfbYtT6ZP1t26nQ4461/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B1927276786615E05305991F0AB1A3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B1927276776615E05305991F0AB1A3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B1927276776615E05305991F0AB1A3</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B192B5B3D551E5E05307991F0A489B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B192B5B3D551E5E05307991F0A489B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332331679</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B192B5B3D651E5E05307991F0A489B</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"02B19409598A5216E05307991F0A714D:74E80E2F"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f3e3a451-590b-4a00-9472-919af99c8836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_AccountGET_PERM_API_Invocation_from_a_Portal_CS_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b0842be8-00d3-4f8e-9a82-195727cd71a7"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="22783ebb-296a-47bc-8505-548dae63503a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportal"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdportalcs"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="07ff346f-9b12-4c65-8e12-09d771d5557d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to Portal_customersupport" id="193ba9a1-98e7-4085-a8b4-d7c70b6f59e1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportalCS"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="6061a945-7096-4907-a379-69a3d4e4405b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VynlMGS/YEFyBKrbMcCEhAbLdlykhNyBiS44lY5KvH8mAAwQy3HkCtVunTy860jVHYWB7Dc4hFoTRwioMKPcya01LYuoxxAn3KAqBewJ7o8Zt37OLpoe2W7RCt13T/inblao7mZo6TNwr3cEY69UpTHQ0Me0pmICRY0lXzhPoUi4QFTXNNi1HN6u6ZY7NsudeeU6lWL6q/tYKTxBziS1diqa2IbXiNW0uROQZRpqmxbRUZPHMsE3TMl5u+yM8hxBp9et1RlmguL7xx0UfMAQBLmIWGtfGns+1z70RmVEkkhg2sfxTsUzDrBrSx+dkdqHle8Hv0inLli1EGSUYBeQTqfrcgpgzv9AIZiwmYh6eTMIyFbAOK6xjy6EXmrFP7UygPYYxRzqfI2uDNYQpxEAxFB6H3Zp2cV7Xsq3jGFE+ZXHI95d/xgfoEgIWga/zbVobaucDHqlU/Rqw16U4SDhZwp0a1ghh4JtuAj4fqnAfw5Ss+oTLAV1xxc7YpXewXFejTWbAxf9p0E5z1iBPKEigjoeVsP/ZtvsPbovcDuzK09PLwyXuXbZmtYzArnNmyFu7Xh4MZT5E6x0Tp/tWScLy86JETfbcScm4Fc77z/edy9Vt/8p8dJ2nVxp0Fk3zbbhozuettkVxbzH4fHuZPkQ8JYvh42heag7a05ve3+6ydO833n5FpWZn3G8aE6v3+lfV+T2J3F5Mn18eX16v3PLgEhIUD5szdgf8yR071nC0SJeVZetmxpDzi7w3P18r9gBH4xc3YS036TXTtJans8N/37Y986NksgAstks1Bt124UZ2CYmfxUxZiK9PM1cvUuLDBVCh1dUupR1eIuWO+J7s4Xpt2k2r6jRbbssuWW7Z6phuyXSrVfmn0bat9lZk1iwOKLYYnRIVS0nuemx+JohDjwP1IdaXLJFKx7UfENtIoEKXDuUhYJTDmEl5dqPlpzMPP1OHc2s1K68ih7DQSmOtcMfEgA7ixlRAvK/J1T1NHgImEQEl3GquuRxsLmQt3tEyEYFVXKIihURKe6xU1rOdK9fgJIwCUEyNkPlJAMVoHmWVMfj619YR5pmVcByxWKAgOxDGyfQOv20rIX18ohy4SqkJsptw5I4pbfM5mbdl7+a9hW8kPlHnS5ZVxASvmex/+poWNSb5qOSJYW5tuedb/hDiCIDxAz/jsDR5PH9JdqJvL3N5LUghqW/7+46K78VkuUyyjlZMs2TEEt6QumkZI8CJ1LmPMXsDauQQxlmXSs76IHJu3+eXiDkdCSQglPNXyJZnvCJGwNUroisPzurcJ8peSFk3AStxzNYK5AtIMf7xkYQ9rPyk+V7+pCz2v9p1BGsnjsxTPiIEoTO1UhfKx4nZwEzCEimFLN4FPwZwLPi+MS9yzkXIaZokAk5/KSiNq2kIY5ZQ0W1rmWFXdzOe4iMC78vpG0wm7flbj/z3Y08n2QhgkC9ETjJ8dWV7av7pbEe7N0G/y3elYjm2FO9mJZPvylq+3U7rJi/KHrv6N/N3y06dDme8/i8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B19477142661B7E05307991E0A5ECF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B19477142561B7E05307991E0A5ECF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B19477142561B7E05307991E0A5ECF</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B194BC5C231561E05305991E0AD21D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B194BC5C231561E05305991E0AD21D</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332365109</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B194BC5C241561E05305991E0AD21D</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"02B1961840CB6525E05307991E0AB144:77FC293C"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b387226b-bbdf-48e5-addd-e65b168eb0f8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_AccountGET_PERM_API_Invocation_from_a_DSP_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="83a040d2-45ba-40ee-8b1a-c591c8005843"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="09d60ca8-e633-4948-b62b-f56a705cb1f4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDSP"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="6fde53b9-1032-459c-b93e-824fa74c605d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to DSP" id="3894fca6-4828-4532-ba99-8bfe484e969e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSP"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API with DSP" id="e74c9dd7-87b0-4cfc-ad7b-dec6f4a1ec7a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID2",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL2",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_MUC_Policy_Create" disabled="true" id="0cdf4c2b-9f97-48e4-9165-c90e5956475e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="05e142c2-ebd3-457e-a874-0a9bb660a91e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","API_NOT_AUTH");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DSP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuI6EP0VynlMGa9srkAVWyaeEMjgwJC83FLkBpSxJbBklvn6kQx4gCyXe59care6T3cfHemGoziyvSbnkAjCaGETR5R7mbWupQn1GOKEexTFwD2BvaD50PPsoumhwxat4Hfq2j+2HSLXtS3ddsuh7prI0tHr1NGdUH7MajUsO6F05TwFn3KBqKhrtmm5ulnTLfPJLHulmmdbxVLFftEKY0i4jC1diqa2B7XhdW0uxMIzjPV6XVw7RZbMDNs0LWPy0AvwHGKkNW52FWWJksbeHxdDwBBFuIhZbNwYJz43IfcCMqNIpAnsc4Wf5TINs2ZIn5CT2ZWW74XQp1OWLduIMkowishvpPrzAGLOwkIzmrGEiHn8aRGWqQLrsME6tlx6pRmn0C4MdIIw4Ujnc2TtYw1hCglQDIXR0K9rV5dNLdv6lCDKpyyJ+enyv+EBuoKILSDU+aGsPbTLA37QqcYNYM+nOEo5WUFfkXWBMPD9NAFfHqrwmMCUbHqES4JuuEJnHMM7W+660SEz4OL/DOhoOLsgYxSl0BjBwrz+9ivpO/dPm2UZ7kfriCxpaTTp1jMAx86ZIR/tbnlGypxEux1+9cf6uxktf/6cBC9tt8Pjx9tk+as8fGyBMWLfk17lfrJ6GDw//zBHb00jSrf+/Da9ppNyuR+O2+vN+M6aP/cmwd34Rye1rt/s1hbBsNoLBsjqfasiY3DXHg/ugxZj6z7Z1qLUjd1FfPfA3M7AJ8gNX5LgLWr3J7cxmf3u11bm40u1i0ffOj0+Hvf97vcqc7oJr+flHOE/tR3OfJC+vgEWh6Wigd8p3MopIfG1mCkLCfVp5uotlPhwAVRoDbVLaYeXSrkjoSdnuFubdsuqlduO7VacstVpds2SY1ZqNevWbDYtp3UQmR2KM4htRqdE5VKSu6PN1wBx7HGgIST6iqVS6bj2RcQOEqjg06E8BIxyeGJSnq1VzGC2XcQuKr1aDt/AcivcNEqXWqHPxIAOkuZUQHIqyrUTUR4CJgsCSrkVsblkNheyGUu0SkVkFVeoSCGV2p4omfVst1oyOIkXESioRszCNILiYr7IWmPw3dfWEeaZddh9yo7bp4Wd/zv0QPqERDlwVUsL5Bzhg9vFOhTyacGWfVzwIXwzDYk6WbKhIiF4h+T011+eKILkJOkEjwfIuedlO2Uv3u80vsBjnLciTxSuyFHaw7UtLwApGY3DIJeouCymq1Waja5imo6RyPCGVEjLCACnUtG2T+wXUCMPYVx0feSozzLn9lN8qZjTQCABsSRaIVte8F4IgKv3gi+PyObSx8hJStk3ARvxka0dybeOQvzlcwh7WPlJ86P8rFnyt/CPYh3lkXXK54IgdKZW6urYfkIKzGRYIkWPJcfBPwrwUfJTY97kHIuQbHpNBXz+p6DUrK4hjFlKhd/RMsOxwmY4xXYB3l+nd2EyEc9fdeTfn3U6ySiAQb4FOcniq8vZU/ynsyOV3id9L9RVSelqpeLc2plQl/ZC3erW8qacoGu8M7+3HPXpnOONPw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B19687008873F2E05305991F0AABE9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B19687008773F2E05305991F0AABE9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B19687008773F2E05305991F0AABE9</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B196C3247361DAE05307991F0AA13B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B196C3247361DAE05307991F0AA13B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332399912</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B196C3247461DAE05307991F0AA13B</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:ACCESCS</con:value></con:property><con:property><con:name>UserName</con:name><con:value>accountget_firstuser20140910_1410332399912</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_88f01fd0-b3a4-4374-9d46-711b3853ebcf</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_88f01fd0-b3a4-4374-9d46-711b3853ebcf</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMr5xdQWqCIRZJiHJYDIkedkScttWYmRjyYbw9SsZcDAJWXafXGq3uk93Hx3pkqFFaNo9xiDhJKKV9SKkzM6tHSVNqB0hRphN0QKYzbHt9Ma3tlnVbbTfolRGg47yd6vl6Ybn6urcQjW1ZjVratutNdSmYcytVt2COfaEK2MpjCjjiPKOYupGTdXbqqFP9YZdb9tWs2rV9Rel8gcSJmILl6qu7ECtWUcJOI9tTVutVtWVVY0SXzN13dCexrcODmCBlO7ltqI8UdLd+eOqCxjCEFdxtNAutZLPpctsh/gU8TSBXS73VC5d09ua8HEZ8S+UYi+4I+pF+bKPaEQJRiHZINmfMfAgciu90I8SwoPFySIMXQZWYY1VbNTohaKVoZ0ZqIQwYUhlATJ2sSbgQQIUQ+VxMuooF+dNLd86TRBlXpQsWHn53/AAzSCMYnBVti9rB+38gF90qnsJ2B5RHKaMZHAnyRojDGw3TcDnh6o8JOCR9S1hgqBrJtFph/COlttuDIgPjP+fAR0MZxvkDwpT6LamP3CkbW5ffj8+o75fdw28mtz8HM68WicHcOicG4rRbpdHpCxItN0R38abx95g1GtOHZ//Ggc+y2YOX8Y/iJlunl/TOao1rezher7p6V62fNGGHPXexrRFaWa+PA+yxdWk/lQ33enkBWfuoJ1c3/kAa5/eeWHcns0er15vfj7+CgfLuj+bTe6Gb/2Qweqxwa0m+b1qOdmEo2kjMB14vuHh7Wv/1/Nq9XQ/HI6bvhGPH/5yQjxFwXOnKOcAf9m2P/NOOn8FzPdLSYPRoDIUU0L8ezGTFuKqXu5qx1J8GAfKla7cJbXDToXcEdcWM9yudfPKaDf6lika1TAGvWu9bunNdtsY6r2eYV3tRWaL4ghiP6Iekbmk5G5p8z1AvLAZUBcSNYtSoXRM+SbiAHFUGdGJOAQRZTCNhDwbQUDegmgTv/H6Cm8amze3pscNHCmVu4jf0/uk53FIyprcLmnyBDCJCUjhlrxmgtiMi14sUZby0KhmqEohFdKeSJW1zVqrrjGyiEOQSLVF5KYhVOMgzjujse3XVBFmuXXgPOSn7WRdx//2LRA+LpEOTNZyBWKM8MXlYu4LOVmwYR4WvA/fS10iD5boJ08I3iIp//qgieRHwRFR0R5y4XlsKEXVjgsqErkZwQXRi+taqLg49939OJaouqymWZbmA2hKfUtEeE3InKE5gFMhS+/T6A2oVoTQzroDCtRHmQt7GV/KA+pwxGEh6FLJl2dc+g4weemPBM/X574oSilF3zis+Ve2figeLBLxt28abGPpJ8wP4rOKEvdjXF/EOsgj6hR3PifUlyup/+8nSIEjEZYI5YqSw+BfBfgqedlYNLnAwgWb5imH038qUpI6CsI4SikfDZTccCiTOU7+HoP94fQpTK7ExdOM/PvbTCU5BTCIBx0jeXx5w9qS/9Q/kNpd0s9q2xKUbjWb1tDM1ba+U9ur63bRlBK67ifzZ8tBn4453v0H</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>02B196C3247361DAE05307991F0AA13B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:02B196C3247361DAE05307991F0AA13B</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMr5xdQWqCIRZJiHJYDIkedkScttWYmRjyYbw9SsZcDAJWXafXGq3uk93Hx3pkqFFaNo9xiDhJKKV9SKkzM6tHSVNqB0hRphN0QKYzbHt9Ma3tlnVbbTfolRGg47yd6vl6Ybn6urcQjW1ZjVratutNdSmYcytVt2COfaEK2MpjCjjiPKOYupGTdXbqqFP9YZdb9tWs2rV9Rel8gcSJmILl6qu7ECtWUcJOI9tTVutVtWVVY0SXzN13dCexrcODmCBlO7ltqI8UdLd+eOqCxjCEFdxtNAutZLPpctsh/gU8TSBXS73VC5d09ua8HEZ8S+UYi+4I+pF+bKPaEQJRiHZINmfMfAgciu90I8SwoPFySIMXQZWYY1VbNTohaKVoZ0ZqIQwYUhlATJ2sSbgQQIUQ+VxMuooF+dNLd86TRBlXpQsWHn53/AAzSCMYnBVti9rB+38gF90qnsJ2B5RHKaMZHAnyRojDGw3TcDnh6o8JOCR9S1hgqBrJtFph/COlttuDIgPjP+fAR0MZxvkDwpT6LamP3CkbW5ffj8+o75fdw28mtz8HM68WicHcOicG4rRbpdHpCxItN0R38abx95g1GtOHZ//Ggc+y2YOX8Y/iJlunl/TOao1rezher7p6V62fNGGHPXexrRFaWa+PA+yxdWk/lQ33enkBWfuoJ1c3/kAa5/eeWHcns0er15vfj7+CgfLuj+bTe6Gb/2Qweqxwa0m+b1qOdmEo2kjMB14vuHh7Wv/1/Nq9XQ/HI6bvhGPH/5yQjxFwXOnKOcAf9m2P/NOOn8FzPdLSYPRoDIUU0L8ezGTFuKqXu5qx1J8GAfKla7cJbXDToXcEdcWM9yudfPKaDf6lika1TAGvWu9bunNdtsY6r2eYV3tRWaL4ghiP6Iekbmk5G5p8z1AvLAZUBcSNYtSoXRM+SbiAHFUGdGJOAQRZTCNhDwbQUDegmgTv/H6Cm8amze3pscNHCmVu4jf0/uk53FIyprcLmnyBDCJCUjhlrxmgtiMi14sUZby0KhmqEohFdKeSJW1zVqrrjGyiEOQSLVF5KYhVOMgzjujse3XVBFmuXXgPOSn7WRdx//2LRA+LpEOTNZyBWKM8MXlYu4LOVmwYR4WvA/fS10iD5boJ08I3iIp//qgieRHwRFR0R5y4XlsKEXVjgsqErkZwQXRi+taqLg49939OJaouqymWZbmA2hKfUtEeE3InKE5gFMhS+/T6A2oVoTQzroDCtRHmQt7GV/KA+pwxGEh6FLJl2dc+g4weemPBM/X574oSilF3zis+Ve2figeLBLxt28abGPpJ8wP4rOKEvdjXF/EOsgj6hR3PifUlyup/+8nSIEjEZYI5YqSw+BfBfgqedlYNLnAwgWb5imH038qUpI6CsI4SikfDZTccCiTOU7+HoP94fQpTK7ExdOM/PvbTCU5BTCIBx0jeXx5w9qS/9Q/kNpd0s9q2xKUbjWb1tDM1ba+U9ur63bRlBK67ifzZ8tBn4453v0H</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID2</con:name><con:value>02B19687008773F2E05305991F0AABE9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL2</con:name><con:value>urn:dece:accountid:org:dece:02B19687008773F2E05305991F0AABE9</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>02B196C3247361DAE05307991F0AA13B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:02B196C3247361DAE05307991F0AA13B</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7d516612-dbeb-4f53-983b-44d22ad5e762</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6aeb25ba-a31f-4722-b23c-f548b5657eba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_AccountGET_PERM_API_Invocation_from_a_DSP_CS_403_FORBIDDEN_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="007be5ce-b5f2-4ee7-8d5e-8a8847857ad0"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9d733480-5af1-43f3-ba51-a4fb29b3b616"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDSPCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="12b2fa4a-c6e3-4acf-9d40-1673f70b9489"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to DSP_CS" id="14a8dc05-a7c6-4fb1-bffa-f62cb1caefad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSPCS"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API with DSP_CS" id="f3d370c0-0de4-401e-bfda-9e707c546d61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID2",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL2",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_MUC_Policy_Create" disabled="true" id="6b725eb4-a00d-49d9-b26c-621fd75b3d80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="f8ac45d1-61d6-40d4-9de0-13fc3f6483d0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("ResponseTypeAccountGet","API_NOT_AUTH");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VyvcxZSwvYXEFqggkXM8NSSaQ9SWlyMIosSWQZGPy9SMZcDBZhpknV7db3acXHfWJgEns+D0hMJeE0VqexFT4hbZjpJz6DAoifAoTLHyJ/HFvdOE7deDD7RGjFgw6xnPYaocY2Q3TbbjI9LAdmm0X2KaLpw3ctD3QRkiZCpHigAoJqewYDrA9E7RNG0xA0wfAB17dazhPRu0Oc6F8K5M6MDagctExZlLOfctaLpf1pVtnPLIcAGzrYXQxRjOcQKN7ss6oCMS7G3tUV9hwHKM6Yol1YlVsTkLhj0lEoUw53sQKv4sFLNC2lE0oSPTLKM/iMKBTVoh9SBklCMbkHer6jLCcsbDWiyPGiZwl3yZhA+3YxDkyke3RX4ZVhXagowpCLqApZtDe+LrBU8wxRbh2exN0jF+Hda04OuGQiinjiaiK/w0PphmO2RyHptimtYF2uMMvKtU9wcgPKIpTQTJ8qYd1DhEWm25idLir2jXHU5JfEKEGNBcanbULb09cV2NAIizk/2nQTnPWTu5gnOLuUf7ab9I/Vr4cj86bNzbiLP79eBEdnUWdAsCucaEoW7sW94ayHKL1iSFpLC9XjfvG+4MMsuQolGz85j6Eo/Hl/RWcRsPb4NJl9Hg6ePXA4wv0fjt51HuM5k5O/7ycz9PXIc/67DI/Gi4kh29nj2HWuiIecoOz+8XFO+01WYNPRkf5anh7jfs2DOHd01Pg9lreCt/1/2o9eMNkacej5rtMyXtuv9D8b2s0iVducDS4QtK5k1kwfAi9TpnODv6qbnvnx+nLK0ZyK+oxCAa1c9UlKH8mM60hoTktTP25Jh8hMZVGV5/S3OGniu5I6KsermXgnNrtttcCp8Bz3GbrDBy74Ljdts9Az245zpZk1ij2IPYZnRIdS1Puemx+BogSX2AaYm5mLFVMJ4wfPA6ghLWA3qhLwKjAE6boOWrki3kWc/42o/bsldr2ir2+Q2LULpm8ole8N5WYVyjZBhVKvsGIzAnWvK3HWqi5FlKVYgGzVMZ2PYN1ilPF7FyTrO94rWNLkGQeYw3USliYxrg+n82Lwlhi/XVMiEShvTmbFJft27T2/20roGxCog2EzuUUqy7i6tvS8I/b/vE2ke8TdncT3rrvpSHR90qVU3KC1kiqvz6mRI9HOSKD8fVzf/xsb3GX5ocdVwX5fNL6AZS1X48yUJiRnbDbl1u9AYo1uttuLmB9UU+zLC361wTAtbhybymStK0xRqkitdWEvWFqlS6sg16QEvVe5FJfxZfKGR1LKHGipq1WiAesDGMs9MoQqFuSH7qPVEKqukmcy690/VitOxrxjxsR8pG2U+pr9VkyHn606wtfO3FUnmpjkIRGWtKvx+qboUBMuSWK9xjfdf6Vg6+CV5VlkUssUk3TSyrx939qmtA6BkSIpVQGA6NQ7JJsgVOu5tj/MPrkpuDxcrEj/77ZmaQYAYTVOihI4V+/z76efxrtEPUm6GeuBs22c+o4oHW+y9WtU9Aoi1JB1/2k/qzZqdP+jHf/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B1990792B3208FE05305991E0A8B06</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B1990792B2208FE05305991E0A8B06</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B1990792B2208FE05305991E0A8B06</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B199480B042378E05305991E0A1822</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B199480B042378E05305991E0A1822</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332441808</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B199480B052378E05305991E0A1822</con:value></con:property><con:property><con:name>UserName</con:name><con:value>accountget_firstuser20140910_1410332441808</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_9df14f60-ea0c-4560-88bc-6f33c1ce440b</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_9df14f60-ea0c-4560-88bc-6f33c1ce440b</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYAss2SbArUAUhM8NCEhIz2UlepoTcNiK25FiyIfP1KxnwYHJZdp9A7Vb36e6jI10InMS21xcCMkk5a6yTmAmvtHaNPGMex4IKj+EEhCeJ5/evJ57dQh7ebTEao2HX+OUGodUOz1ATMCLN9qn61+nMSfMsdBxiEWi30Vy5CpHDiAmJmewaNrLaTeQ2LTRD5x5CnuW23NPzJ6PxAJlQsZVLCxlbUGvRNRZSpp5prlar1spp8SwybYQs8+f1xCcLSLDRu9hUVCbKelt/0gqAQByTFuGJeWHWfC4C4fk0YljmGWxzBR/lQiZyTeUTCBp9Maq9EIxYyMvlJWacUYJj+hvr/lyDXPCg0Y8jnlG5SD4swkI6cBPWpEmsNvtimHVoRwaqIcwEbooFtrax7iGEDBiBxo/7Udf4ctzUyq2zDDMR8iwR9eV/wwOsgJinEDTFrqwttOMDvtOp3gUQb8RInAtawI0ma4oJiO00gRwfqjHNIKTrCRWKoGuh0Zn78A6Wm24MaQRC/p8B7Q1nE+QBxzn0CAKn4z6hYTr7a26NLm+pPHH4krHVY7cEsO9cGqrRbpYHpKxItNnxaBezk8XDQl5Nf0I2+Pv7JGFLvLx9+XY+iMj322S4+jEeT+BOZGOfxSidplyGI9wZP+Qnfg4nd+Nx+27o0AGsc1yk7s3ZyezbdXbSjiedNHUd+3WZTldrf37jR477fdnG5DdKH93x8m4UF18B+8vwB5k/oeh5OgH5uLo7izh5mg/XUbEc3L0Gxe1pv3/FXqJuVc4e/rptd+b9fL4EIndLTYPRsPFVTQnLz8VMW2jQDEtXL9XiIyQwafT0Lq0dXq7kjgaemuFmjeyB5brtDhqgtu2cd67QqYNOXde6Qn2rY9s7kdmgOIB4yVlIdS4tuRvafA6QJJ4AFkDWLHiulE4Yn0QcYokbI3avDgFnAmZcybMFTFicS/L8PA8s7jgizJP4+WwVGY0bLm/ZbdYPJWQ1UbZQTZTvgdCUglZuTWyhmC2kasYLLnIZW60CtxjkStszLbOe3e6cmoImaQwaqpnwII+hlS7SsjWm2PzaTUxEaR3601+X/q/yPJgfVnf4bdcI5RNQ7SB0QQNQw4R3rhi0q+bjqp39qnfh+3lA9fFSXZUZJRsk9U9/yKJZUjFlV9YOd+V+aKiFNg+rqrIFBSUV56ubWwm6koDebjAvuPXSyosiL0dxjpBjZiq8qRTPMn0guVKo1xl/BmZWIcyjroMK9UHmyl7Hl8sF8yWWkCjiNMrlEfe/D0Lf/yNF+fWxj4taStU3CWv5nu0yVm8XjfjT5w3xiPZT5qn6WfEs+DOud2Lt5VF1qutfUhbplb4KXj9gBuEqLFUixrP94O8FeC953Vg1ucIiFZvmuYSPvzS0OnUNTAjPmRwNjdKwr5glTvmagvfH6U2YUpSrVxr992dak5YUIKDedoKW8fVl62n+s2hPdbdJ3wovOnftgW2jztd94e0M0FnVlBq63hvzW8tenw453vsH</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>02B199480B042378E05305991E0A1822</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:02B199480B042378E05305991E0A1822</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYAss2SbArUAUhM8NCEhIz2UlepoTcNiK25FiyIfP1KxnwYHJZdp9A7Vb36e6jI10InMS21xcCMkk5a6yTmAmvtHaNPGMex4IKj+EEhCeJ5/evJ57dQh7ebTEao2HX+OUGodUOz1ATMCLN9qn61+nMSfMsdBxiEWi30Vy5CpHDiAmJmewaNrLaTeQ2LTRD5x5CnuW23NPzJ6PxAJlQsZVLCxlbUGvRNRZSpp5prlar1spp8SwybYQs8+f1xCcLSLDRu9hUVCbKelt/0gqAQByTFuGJeWHWfC4C4fk0YljmGWxzBR/lQiZyTeUTCBp9Maq9EIxYyMvlJWacUYJj+hvr/lyDXPCg0Y8jnlG5SD4swkI6cBPWpEmsNvtimHVoRwaqIcwEbooFtrax7iGEDBiBxo/7Udf4ctzUyq2zDDMR8iwR9eV/wwOsgJinEDTFrqwttOMDvtOp3gUQb8RInAtawI0ma4oJiO00gRwfqjHNIKTrCRWKoGuh0Zn78A6Wm24MaQRC/p8B7Q1nE+QBxzn0CAKn4z6hYTr7a26NLm+pPHH4krHVY7cEsO9cGqrRbpYHpKxItNnxaBezk8XDQl5Nf0I2+Pv7JGFLvLx9+XY+iMj322S4+jEeT+BOZGOfxSidplyGI9wZP+Qnfg4nd+Nx+27o0AGsc1yk7s3ZyezbdXbSjiedNHUd+3WZTldrf37jR477fdnG5DdKH93x8m4UF18B+8vwB5k/oeh5OgH5uLo7izh5mg/XUbEc3L0Gxe1pv3/FXqJuVc4e/rptd+b9fL4EIndLTYPRsPFVTQnLz8VMW2jQDEtXL9XiIyQwafT0Lq0dXq7kjgaemuFmjeyB5brtDhqgtu2cd67QqYNOXde6Qn2rY9s7kdmgOIB4yVlIdS4tuRvafA6QJJ4AFkDWLHiulE4Yn0QcYokbI3avDgFnAmZcybMFTFicS/L8PA8s7jgizJP4+WwVGY0bLm/ZbdYPJWQ1UbZQTZTvgdCUglZuTWyhmC2kasYLLnIZW60CtxjkStszLbOe3e6cmoImaQwaqpnwII+hlS7SsjWm2PzaTUxEaR3601+X/q/yPJgfVnf4bdcI5RNQ7SB0QQNQw4R3rhi0q+bjqp39qnfh+3lA9fFSXZUZJRsk9U9/yKJZUjFlV9YOd+V+aKiFNg+rqrIFBSUV56ubWwm6koDebjAvuPXSyosiL0dxjpBjZiq8qRTPMn0guVKo1xl/BmZWIcyjroMK9UHmyl7Hl8sF8yWWkCjiNMrlEfe/D0Lf/yNF+fWxj4taStU3CWv5nu0yVm8XjfjT5w3xiPZT5qn6WfEs+DOud2Lt5VF1qutfUhbplb4KXj9gBuEqLFUixrP94O8FeC953Vg1ucIiFZvmuYSPvzS0OnUNTAjPmRwNjdKwr5glTvmagvfH6U2YUpSrVxr992dak5YUIKDedoKW8fVl62n+s2hPdbdJ3wovOnftgW2jztd94e0M0FnVlBq63hvzW8tenw453vsH</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID2</con:name><con:value>02B1990792B2208FE05305991E0A8B06</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL2</con:name><con:value>urn:dece:accountid:org:dece:02B1990792B2208FE05305991E0A8B06</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>02B199480B042378E05305991E0A1822</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:02B199480B042378E05305991E0A1822</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>763b357d-1b9e-4d0b-a5ab-092a4f37399b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>907d5a06-8940-4b3d-bc31-74fe49ffcfe7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_AccountGET_PERM_API_Invocation_from_a_COO_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4a48fda0-f4dc-4e6a-bfd0-25ef9d6588cf"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="eae2577f-786c-4a7f-ad92-245eec94bdc0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdCOO"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="2415dc24-9de7-4459-93e9-d9d532f7a6e7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to COO" id="d3afd574-c4b1-4f62-8218-4ff5d270eced"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCoo"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="c6274d7d-40e1-4b96-839f-cc5d27ca622c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>COO</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZc+I4EP4rlOdxylg2h4MrUGWuDDUJYYFkUnnZkuUGlNgSkWSO+fUrGfAAOZbdJ1e3W91fH/rU1xKniReEUoJQlLPSJk2YDHJt08oECziWVAYMpyADRYJJeHcbeGUU4MMRqzToNq2/oeG7sxnBtluL6na1Ugc7qkDNjn3XR1US1ZEfaVMpMxgwqTBTTctDbtVGDdtFU+QHyAtcr1xtuM9W6RGE1L61SRlZe1Ab2bQWSi0Dx1mv1+V1pczF3PEQcp2nu9sJWUCKrdb1LqM8kGjt7Uk5BgJJQsqEp861c2JzHctgQucMq0zAPlb8WSzkoIajbWJJ59+s4izEAzbjudjBjDNKcEJ/Y1OfO1ALHpfCZM4FVYv00yRcZBzbsCE2cavsm+WcQrvQ0QlCIbEtF9jd+xrDDAQwAqWH8aBpfbusa/nRqcBMzrhI5an43/AAW0HClxDb8pDWHtrlDj+oVOsaSDBgJMkkXcHQDOsSE5D7bgK53FVpJGBGN7dU6gHdSIPOOYZ3Ju6q0aVzkOr/NOioOTsnjzjJoPXzIXkddZ7GjdkwTBtq+voySl6cZ5HgsJkDODbOFUVrd+LZUBZDtDtB29vluDJKRTLAlbd42677+PtNiugoHPjqHiuE5wIL8iPB3/ujlcA/u7WH9eoZtbedfo9Pb+Y1Qda9KIle4sVvz30c3g3T7GFY67z28d0sqo+SsMfjq2l9VR9uX0fzh3tG3rzRyKN/hc+kPXl7zPyrxXMWoV/1yc1oMvjR7jWo/5S0f4vHuPur9kIXa8oiPm8W6RzhP9Ud7vwki16AqINoxmDQLfV1l7D6msyMhsb2LDcNloZ8pAKmrJY5ZbgjyDTd0TjQPdzJyGu7Iep5DdTvo0bV7aFaBfmNhttHYa0Xdg8ks0NxBrHD2YyaWIZyd2PzNUCSBhJYDMJe8UwznbS+8NjFCpcGbKwvAWcSplzTs7tBWZ3T2TYi6TqSrzBP4gVbo4VVGnJ1z+5FOFMgTjjZRSecPAZClxQMcZu5lnqwpdK1eMOrTCVueYXLDDJN7cKwbOBVr2qOpOkyAYPUSXmcJVBeLpZ5ZRy5+3o2JjLXjnvT/LZ9mtf5v0MJtE1MjYE0ubRBtxE+eFzQIZHPE64cJ3xwH2YxNRdL11MJSnZITn/9GRMzH8WMdO7vD5ALy8tO6lq8P+l8gcc5L0URKF7Ro7CHV1vzv2aM1qGRb7j8Vs5WqyxvnY9QxRHavaMJ0nUmQDJNaNspfwXmFC6ci16PAvVZ5EJ/ii9TCzZRWEGqB62UixesCxOQZl0Y6BuyuXQXOQmp66Zgoz7SdRK96hjEX25DJCDGTqtH+rPmIv7Trg98HcXReeptQVE2N5J5ObafDAXh2i3VnMfFsfOPHHwU/FRZFLnAovQ0RZmCz/+UDJk1LUwIz5gadK1ccUywOU61XULwx+idm5zDi6WO/vtWZ9N8BAjoVVDS3L95mwMz/2x+RNL7oO95+qpXv/Jrnuc1cp6u7Xi6W/frRVFO0LXeqd9rjup0PuOtfwA=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B1A08E68762229E05305991F0AD676</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B1A08E68752229E05305991F0AD676</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B1A08E68752229E05305991F0AD676</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B1A0E290FF0941E05307991F0A5EAD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B1A0E290FF0941E05307991F0A5EAD</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332568412</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B1A0E291000941E05307991F0A5EAD</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:ACCESCS</con:value></con:property><con:property><con:name>UserName</con:name><con:value>accountget_firstuser20140910_1410332568412</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"02B1A2527ACA25B7E05305991F0A008C:ABA0E68B"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8777c171-bb0f-4c7d-8196-aaa96b3700fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_AccountGET_PERM_API_Invocation_from_a_COO_CS_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="feba94a4-e5ef-45cc-849a-58647bb42b0a"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8f398ad5-218a-4a1e-874f-5d9587911403"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdCoordCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="5f5f55aa-a186-450f-9b15-8ed25a7f6203"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to COO_CS" id="fb25bf7c-69f5-47f3-b5ac-1da1bb5e38a7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCoordCS"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API with COO_CS" id="6d8d5eeb-ff45-475e-b6b2-b4be535445ba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID2",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL2",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_MUC_Policy_Create" disabled="true" id="15ced52c-496c-4159-a71e-2f53efdbac15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="c4807b07-cd6a-45a2-bba4-cf3ab9b03a42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtc6o6EP4rDv3YQQKoFaY641t7ONW+6Wl7zpc7MQRJCwFJwJdffxJUKlZ7vfcTk2Wz++zukye5ZjAMDLvDGE44iWhlGQaU2bm1paQJtSPICLMpDDGzObLHndHQNqrAhrstSsXpt5R/sOm6XqNuqNiyDLWGPFOd1i1XbbjgyrRw3aqjpnBlLMUOZRxS3lIMoNdUYKk6mIArGxh27arasBp/lMoLTpiILVyqQNmCWrKW4nMe25q2WCyqC7MaJTPNAEDX3kbDMfJxCJX29aaiPFHS3vqjqosRDgJURVGoXWsln2uX2WMyo5CnCd7mck/lAhqwNOHjMjK7UIq92HWoF+XLHqQRJQgGZA1lf0aY+5Fb6QSzKCHcD08WoQMZWMVLpCK9Ri8UrQztzEAlhAmDKvOhvo31jD2cYIpw5dez01IuzptavnWSQMq8KAlZefnf8GCa4SCKsauyXVlbaOcHPNKp9jVGtkNRkDKS4XtJ1hgizLbTxOj8UJXHBHtkOSRMEHTJJDptH97BctONPplhxv/PgPaGswnyAoMUt58+phnQycf9j7FFh5ddeLfsDtLQe7ydtXIA+865oRjtZnlAyoJEmx0z8PPjTdOCsHv7+udp5TjrIQqmL3cj+AI7OqKkoaPeh7/WJvPaKlv8nvDL+PFp7a7mhqFNH6Hfe3m4u6c3sfc0uhmn3dfhxIkIWrO7h8Hk9+17RuAloPevP/nr/H3gw6vxKnrujvTRdKp1vTqjPRS/d/o/PNdZeHGvCX6i4d1iuDLmXf/yTe/4ySB5ekrZavyrVZSzh79s2535cTp9x4jvlpIGTr9yI6YE+fdiJi3EVb3c1Y6l+DCOKVfacpfUDjsVckdcW8xwswZGV++YwGpY/Y7Z6PUHoG6CumXpA9C5uek3dyKzQXEAsRdRj8hcUnI3tPkeIApthqmLEzWLUqF0TPkmYh9yWHHoszgEEWV4Egl5TuqmuWg0DZjoTb22jjKzjtcg86FSuY/4A31IOh7HSUmTdVDS5GeMSEywFG7JayaIzbjoxRxmKQ/0agarFKdC2hOpsrZRa9Y1RsI4wBKpFkZuGuBq7Md5ZzS2+RoqRCy3Pg8m+Wk7Wdfhv10LhI9LpAOTtXSxGCM+crmYu0JOF2zuF7wL30ldIg+W6CdPCNogKf/6pInkR8ERUdEOcuF5aChF1Q4LKhK5GUEF0YvrWqi4OPft3TjmsDqvplmW5gO4AsDUEhFeEzKna2OMUiFLq0n0galWhNDOugMK1AeZC3sZX8p9OuaQ41DQpZIvz7j0x5jJS98RPF+e+6IopRR943jJj9l6gXiwSMTfvmmQjaSfMD+KzyJK3M9xHYm1l0fUKe58TuhMrqT+r06QAkUiLBHKFSX7wY8FOJa8bCyaXGDhgk3TlOPTfypSkloKRChKKXf6Sm7Yl8kcJ1/F2P50+hImV+LiaUb+/W2mkpwCCIsHHSN5fHnD2pL/dLYntdukX9TW6PXqoN83G/XmvtoOBma/aEoJXfuL+atlr0+HHG//BQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B1A2CC50DE3658E05305991E0AEE3D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B1A2CC50DB3658E05305991E0AEE3D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B1A2CC50DB3658E05305991E0AEE3D</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B1A30969DA36CDE05305991E0AFFD8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B1A30969DA36CDE05305991E0AFFD8</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332605567</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B1A30969DB36CDE05305991E0AFFD8</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:ACCESCS</con:value></con:property><con:property><con:name>UserName</con:name><con:value>accountget_firstuser20140910_1410332605567</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_50aa57e9-0ea7-4174-8300-1117d6a8f1ab</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_50aa57e9-0ea7-4174-8300-1117d6a8f1ab</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtd6o4EP4rHvpxDxKwqHCq5/jaa29be9V27/bLnhgCRCEgCYj99ZugUrEv6+4nTobJzDMzT57khsEwMOweYzjhJKK1PAwoswtrR0kTakeQEWZTGGJmc2TPew/3tlEHNjxuUWqTYUf52wQQmi1sqQDDlnqtt67VdgMAVdf1ltOEbVeHS+HKWIonlHFIeUcxgH6tAkvVwQK0bNCwgVE32+1XpfaCEyZiC5c6UA6gctZRfM5jW9O2221926hHiacZAOja74f7OfJxCJXuzb6iIlHSPfijuoMRDgJUR1Go3WgVnxuH2XPiUcjTBB9yOV/lAhqwNOHjMOJdKeVe7EyoGxXLAaQRJQgG5A3K/jxg7kdOrRd4UUK4H35ZhA5kYBXnSEX6Nb1StCq0CwNVECYMqsyH+iHWDLs4wRTh2vNs0lGuLptasXWRQMrcKAlZdfnf8GCa4SCKsaOyY1kHaJcH/KRT3RuM7AlFQcpIhh8lWWOIMDtME6PLQ9WeEuyS/J4wQdCcSXTaKbyz5b4bQ+Jhxv/PgE6Gsw/yAoMUd2+vU8tbmsv85c8gNX/8vHv9Ed86nG4y0CkAnDoXhnK0++UZKUsS7XdM3Za5CB4WbIdaMbh7+TV43Oax8TR6jdYIrt7SIBmt8ujZd1cPu9lipxuz3Lsdj+PRGqZW+7ePstl09vjHnZs3p3N26yTrnT+OF89mPl6PVj3e17LYn/Qjrx/At37jdjPdPr3hdjiC82Y29O/1WTpdcCP0zfRuu9B+vN5Pew1/Pda8W2u+cjl93cDFrztk/NUpyznBX7Udz/w8Xa4w4selpMFkWBuLKUH+vZhJC3FUt3C1Yyk+jGPKla7cJbXDToXcEccWM9yvgdHXew1gNa1hu9EcDEfAbADTsvQR6I3Hw/ZRZPYoziAOIuoSmUtK7p423wNEoc0wdXCiZlEqlI4p30QcQg5rEzoThyCiDC8iIc/6knhBtlkCL3GRo6+XLg0svjYspfYY8SmdJj2X46SiyTqoaPIMIxITLIVb8poJYjMuerGBWcoDvZ7BOsWpkPZEqqxtXLdNjZEwDrBEqoWRkwa4Hvtx0RmN7b+GChErrCiKEsdG+yP3ZXHn/459ED4OkQ5MFtTHYpb4ww1j2Oaxmg9Vm5/eRMfwvdQh8nSJpvKEoD2S6q93rkiSlEQ5lnXEXbqfGyqhtfOqymxORlBJ+fLiFnouFKB7HMwG1jf1NMvSYhQtABpaIsJrQvB0bY5RKgRqt4jWmGplCO2i26BEfZa5tFfxpdyncw45DgVxasXygut/jpm8/ieC8fmlb4tKStE3jnP+mW0QiKeLRPzt6wbZSPoJ85P4bMUI38f1SayTPKJOcftzQj25kjfB7jtmEKFhUXIa/LMAnyWvGssml1i4YNMy5fjrPzUpTh0FIhSllE+GSmE4FcwCJ9/F2H53+hCm0OTykUb+/ZWmkoICCIunHSNFfHnX2pL/1DsR3UPSD7prDAYmGPYbTbN9qrujUWNYNqWCrvvB/NFy0qdzjnf/AQ==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>02B1A30969D836CDE05305991E0AFFD8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:02B1A30969D836CDE05305991E0AFFD8</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZtd6o4EP4rHvpxDxKwqHCq5/jaa29be9V27/bLnhgCRCEgCYj99ZugUrEv6+4nTobJzDMzT57khsEwMOweYzjhJKK1PAwoswtrR0kTakeQEWZTGGJmc2TPew/3tlEHNjxuUWqTYUf52wQQmi1sqQDDlnqtt67VdgMAVdf1ltOEbVeHS+HKWIonlHFIeUcxgH6tAkvVwQK0bNCwgVE32+1XpfaCEyZiC5c6UA6gctZRfM5jW9O2221926hHiacZAOja74f7OfJxCJXuzb6iIlHSPfijuoMRDgJUR1Go3WgVnxuH2XPiUcjTBB9yOV/lAhqwNOHjMOJdKeVe7EyoGxXLAaQRJQgG5A3K/jxg7kdOrRd4UUK4H35ZhA5kYBXnSEX6Nb1StCq0CwNVECYMqsyH+iHWDLs4wRTh2vNs0lGuLptasXWRQMrcKAlZdfnf8GCa4SCKsaOyY1kHaJcH/KRT3RuM7AlFQcpIhh8lWWOIMDtME6PLQ9WeEuyS/J4wQdCcSXTaKbyz5b4bQ+Jhxv/PgE6Gsw/yAoMUd2+vU8tbmsv85c8gNX/8vHv9Ed86nG4y0CkAnDoXhnK0++UZKUsS7XdM3Za5CB4WbIdaMbh7+TV43Oax8TR6jdYIrt7SIBmt8ujZd1cPu9lipxuz3Lsdj+PRGqZW+7ePstl09vjHnZs3p3N26yTrnT+OF89mPl6PVj3e17LYn/Qjrx/At37jdjPdPr3hdjiC82Y29O/1WTpdcCP0zfRuu9B+vN5Pew1/Pda8W2u+cjl93cDFrztk/NUpyznBX7Udz/w8Xa4w4selpMFkWBuLKUH+vZhJC3FUt3C1Yyk+jGPKla7cJbXDToXcEccWM9yvgdHXew1gNa1hu9EcDEfAbADTsvQR6I3Hw/ZRZPYoziAOIuoSmUtK7p423wNEoc0wdXCiZlEqlI4p30QcQg5rEzoThyCiDC8iIc/6knhBtlkCL3GRo6+XLg0svjYspfYY8SmdJj2X46SiyTqoaPIMIxITLIVb8poJYjMuerGBWcoDvZ7BOsWpkPZEqqxtXLdNjZEwDrBEqoWRkwa4Hvtx0RmN7b+GChErrCiKEsdG+yP3ZXHn/459ED4OkQ5MFtTHYpb4ww1j2Oaxmg9Vm5/eRMfwvdQh8nSJpvKEoD2S6q93rkiSlEQ5lnXEXbqfGyqhtfOqymxORlBJ+fLiFnouFKB7HMwG1jf1NMvSYhQtABpaIsJrQvB0bY5RKgRqt4jWmGplCO2i26BEfZa5tFfxpdyncw45DgVxasXygut/jpm8/ieC8fmlb4tKStE3jnP+mW0QiKeLRPzt6wbZSPoJ85P4bMUI38f1SayTPKJOcftzQj25kjfB7jtmEKFhUXIa/LMAnyWvGssml1i4YNMy5fjrPzUpTh0FIhSllE+GSmE4FcwCJ9/F2H53+hCm0OTykUb+/ZWmkoICCIunHSNFfHnX2pL/1DsR3UPSD7prDAYmGPYbTbN9qrujUWNYNqWCrvvB/NFy0qdzjnf/AQ==</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID2</con:name><con:value>02B1A2CC50DB3658E05305991E0AEE3D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL2</con:name><con:value>urn:dece:accountid:org:dece:02B1A2CC50DB3658E05305991E0AEE3D</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>02B1A30969D836CDE05305991E0AFFD8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:02B1A30969D836CDE05305991E0AFFD8</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"00FE35B4F3CC379CE05307991F0A189A:1E3F3832"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_AccountGET_PERM_API_Invocation_from_a_DECE_200_OK_P0_Flaky" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fd4d89c0-34a5-4c76-904a-10f5af132573" disabled="true"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a001935f-083f-404c-b9e1-f82e2448875b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDECE"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="739bbfe9-4d2d-4a30-a32c-fa4992d46eb8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to DECE" id="fc9c4592-106c-49ae-a372-5f3674d95bc0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECE"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="bd7ea126-bc36-4741-b481-8c5e32643552"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

myTC.setPropertyValue("CS","N");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DECE</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuI6EP0VyvOYMpY3wK5AFcQkoYZsQDZebgm5AU1s2VgykHz9SCY4QJbLvU+ubre6Ty866lOO48jy25xDJmjCKus4YtwvtE0tz5ifYE65z3AM3BfEH7av+r5VRT7eHtEqvaCp/WNj0645dVf3JtZEdzD2dM8MkU5qlmk5xKlbIZKmnOfQY1xgJpqahUxHR55uohGq+8j2La+KTG+sVR4g49K3NKnKUxtQa97U5kKkvmGsVqvqyq4m2cywEDKNp6v+kMwhxlrrdJNREShrvduTaggEoohUSRIbp8aezWnI/SGdMSzyDN5jhd/FQgbyDGkTcjr7pZVnIeyxaVKIZ5gljBIc0Tes6nMFYp6ElXY0SzIq5vG3SZhIOdZhTXRiOuyXZuxDO9LRHsKMY53PsfnuawBTyIARqNwPek3t13FdK46OMsz4NMlivi/+NzzAlhAlKYQ636b1Du14h19UqnUKxO8xEuWcLuFaDWuKCfD3bgI53lXlNoMpXfcplwO65gqdsQvvQNxUI6Az4OL/NGinORsnDzjKoTX57QbCcQNYjH/D+Srr8uBqXJ/feZPnZgFg17hQlK3diAdDWQ7R5sRjat9gczY+uxu5jNy2Lx4Gzuhi3ndP0sih1Igd1lghm48fIZ1O0NA968LzuXcSXz9curVsbbDGY222ytOO92hcty/vGunJqBFevtl3eb9xld9fxUvnonteX/QHtfHrgL0Ek5c5TN9Eh10sB2HSuew3gpfxRXftRk+DwfiGkSnqQGiS7Mm6f6bk8j4f9y8e+X2zTGcH/75ue+eH+eQPELEV1Rj0gsq57BIWP5OZ0tBQnxamfqrIhwtgQmupU4o7/FzSHQ192cONjKyO2XYsz6wjx67Xal3k2sj1PLOL2p0ABVuS2aA4gHiWsClVsRTlbsbmZ4Ak9jmwEDJ9meSS6bj2g8cAC1zpsYG8BAnjMEoUPS/w/AUt5+YktWtgveI/YT3NPKpVrhNxw26y9lRAtkfJJtqj5AEQmlJQvK3Gmsu55kKWYoGXuYjM6hJXGeSS2TNFsr7lNFyD0ziNQAE14iTMI6im87QojME3X0vHhBfaQXdUXLZv0zr8t62AtAmpMuAqlw7ILsIXb4u5TeT7hO3dhLfu23lI1b2S5RQZJRsk+78+pkSNRzkiQfesu8Vcmh53VBbj80njB0DGYS3KQOGS7oTdvtqS/yVjtLadXODqopovl3nRuzpCtpFJ94YkSNMYAsklob2OkhdgRunCOOr1KFEfRC71+/hyMWdDgQXEctIqhXjEujAErtaFnrwh62N3kb2Qsm4C1uIr3VkkVx2F+MdtiPhE2Un1rfyskiz8aNcXvnbiyDzltiAomylJvRyv3wwFSaRbKjkvyXadf+Xgq+D7yrLIJRYhp2mSC/j+T0WRWVPDhCQ5E71AKxS7BFvgFK8p+B9Gn9wUHF4udfTftzqdFiNAQK6CnBb+1dvsq/lnsx2Sfg/6iaddx7E9x7XbjrPL01bXdcui7KFrfVJ/1uzU6XDGW38B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B1A54439463A44E05305991E0A2E55</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B1A54439453A44E05305991E0A2E55</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B1A54439453A44E05305991E0A2E55</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B1A42917043766E05305991E0ABD0D</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B1A42917043766E05305991E0ABD0D</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332646971</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B1A42917053766E05305991E0ABD0D</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:ACCESCS</con:value></con:property><con:property><con:name>UserName</con:name><con:value>accountget_firstuser20140910_1410332646971</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"02B1A6DCD80D3AD5E05305991E0ACF74:A2EDDED2"</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_e9e2d115-b7c1-41a2-a63c-c70d00fa1f7c</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_e9e2d115-b7c1-41a2-a63c-c70d00fa1f7c</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E8D9381FB9537D39E0401F0A07995B65</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E8D9381FB9537D39E0401F0A07995B65</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_AccountGET_PERM_API_Invocation_from_a_DECE_CS_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a42fb894-82d5-4449-87c0-d9ea0278e9e4"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="fca445d5-aaed-4633-8477-e8d6113ab16f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDECECS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="68118f73-5435-4dd1-85fe-5456fc581710"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to DECE_CS" id="d75a585e-1dbd-4f68-aae4-9c5a3a3373de"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
tP.setPropertyValue("audience","")
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API with DECE_CS" id="cbeaf3c3-aa56-41e7-bd12-f2d20928d545"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID2",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL2",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="17ac82fb-d6af-4f3f-9ffb-dd255f1c6be2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZrb+o4EP0rKP24CnnwClFBSgts00sfF2j3tl9WxpmA28RJbSdAf/3aAXIJfSy7EhLyZDxzZub42OccxZHtepwDEyShtXUcUe4W1p6WMeomiBPuUhQDdwV2p97N2LXrpov2W7SaP+hpfwfQ6ToADR0aVlNvhk6oOx3c1jvQbXXAtBF2bOnKeQY+5QJR0dNsU7qaXd0yZ2bHNZvyV+86jWet9giMy9jSpW5qO1Br3tOWQqSuYaxWq/qqUU/YwrBN0zJ+3YyneAkx0vrn24qKRKy/88f1ADBEEa7jJDbOjYrPecDdKVlQJDIGu1zBV7lMw+wa0ifgZHGmlXsh8GmYFMtLRBNKMIrIO1L9uQGxTIKaFy0SRsQy/rIIy1SBdVhjHVtNeqYZVWgnBqogZBzpfImsXawJhMCAYqg9TPyednba1IqtM4YoDxMW8+ryv+EBmkOUpBDofF/WDtrpAT/pVP8csOtTHGWc5HCryJoiDHw3TcCnh6rdMwjJeky4JOiaK3TGIbyj5bYbA7IALv7PgA6Gsw3yiKIM+my+HF6z9ubuvY2erl5WsfNjZXeuH8ar114B4NC5MJSj3S6PSFmSaLvjOrAsB9ajyM9g1L1YDMc/crZwvCv6Nm8+hi+GMUlHgXEB983ur9XdKMpf4f3PzTjGy9V6PkbB4un1IZhmk2fL9tPkJ/FeBrPN008UhqFvvbbtzlXwx3h2Ld6uh7HhpC3zYezdrH3v/nV2sXmYtG+Jkz9Cbk5u06ectR/vvcb981Xo34Q/Fg4ekvfZ6OXtr3n0hHtlOQf4q7b9mZ9m8xfAYr9UNPAHtZGcEhLfi5mykEAPC1c3VeLDBVCh9dUupR1uJuWOBK6c4XZt2heWJw9Pa3jZtZ3GaGi2Gman27VGpmc77dZeZLYojiBeJjQkKpeS3C1tvgeIY5cDDYDpeZJJpePaNxEHSKCaTyfyECSUwyyR8rxpRDTcMNwQzdhaOGErxog4q3yu1W4TcUfvmBcKYBVNtsyKJk8Ak5SAEm7Fay6JzYXsxRvKMxFZ9RzVKWRS2plSWdduOi2DkziNQCE14iTIIqiny7TojMG3/7aOMC+sk+GsOG1f1nX8bd8C6RMQ5cBVLRcgxwgfLpeG29oX8nXBjcOC9+G9LCDqYMl+CkbwFkn102+aKH6UHJEV7SGXnseGSlTjuKAyUZATXBK9vK6listz39+P4w3V3+pZnmfFADpK35gMb0iZs4wp4EzK0maWvAI1yhDGSXdAifooc2mv4svEkk4FEhBLutSK5QmX/hS4uvR9yfP1qS+KSkrZNwFr8ZntMpIPFoX42zcNdrHyk+Z7+bdKWPB7XJ/EOsgj65R3viB0oVZK/zdfkAInMiyRypWww+CfBfgsedVYNrnEIiSb5pmAr7/UlCT1NIRxklHhD7TCcCiTBU6xScH97fQhTKHE5dOM/PvbTCcFBTDIBx0nRXx1w7qK/3RxILW7pB/VtmUOOgPHtjrmodp6bbtbNqWCrv/B/NFy0Kdjjvf/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B1A750D7D92170E05307991F0AA629</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B1A750D7D52170E05307991F0AA629</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B1A750D7D52170E05307991F0AA629</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B1A7985EC9283FE05307991F0A2865</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B1A7985EC9283FE05307991F0A2865</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332681505</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B1A7985ECA283FE05307991F0A2865</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:ACCESCS</con:value></con:property><con:property><con:name>UserName</con:name><con:value>accountget_firstuser20140910_1410332681505</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_92ef1b62-3060-41f3-844a-46216cf6e87e</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_92ef1b62-3060-41f3-844a-46216cf6e87e</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMpaNwdgVqCIBNkyuExImk5ctRW5AxJZAkrnk61cy4AC5LLtPLrVb3ae7j450KnGaeFFLShCKclZapgmTUW5tWJlgEceSyojhFGSkSNRvXV9FXhlFeLvFKvXaDevv0IOh+1Lz7AqqIdt3hxW77vvY9mueWyPDGtQD0K5SZtBjUmGmGpaHXN9Goe2iBxREyI88txyg4NkqDUBIHVu7lJG1AbWUDWus1DRynMViUV5UylyMHA8h13m6vuqTMaTYap6uK8oTiebGn5RjIJAkpEx46pw6ez6nsYz6dMSwygRscsVf5UIOCh3tE0s6OrGKvRD32JDny3PMOKMEJ/QNm/5cgxrzuNRKRlxQNU6/LMJFJrANS2IT12cnlrMP7chAewiFxLYcY3cT6x6GIIARKD3e9xrWyXFTy7c+CMzkkItU7i//Gx5gc0j4FGJbbsvaQDs+4Cedap4CiXqMJJmkc7gxZJ1iAnIzTSDHhyrdCRjS5RWVmqBLadA5u/AOlututOkIpPo/A9oZzjrIACcZNMXbn0EoKsunyVU4casKdX6tRtNJ53LkN3IAu865oRjtenlAyoJE6x2zQVZpsdfbLFRh4Pnpj8vVL0wenx/PbrP+79XqgpIbdl25eJqEP9/a49kMOwxupj9nMG/x2sTxRbZEd0vv1Q8uVLU9HvSefnTvBWeP6Tg5//NcD+jCvan71wPnt5P2VX3cqb4MUNK6vPRXnfB1QOvI/+vlYvF06bYGdN55fu4+vQXnVdQ+k07n6qbbPRPCCfqTeqMoZwf/vm175vvZywSI2i4NDXrtUldPCavvxcxYaGwPc9doasRHKmDKappdRjuiTMsdjSM9w/UaeWduKwjr1c55zatXuh1UraAgDN0uann1WnUrMmsUBxDPORtSk8tI7po23wMkaSSBxSDsOc+00knrm4htrHCpx+71IeBMwgPX8kzqNc5jmLDlGwtU1eW1Cpu/zqlVuuHqlt2K1lCB2JNkF+1J8j0QOqVgdNvQWmpeS6VbMcPzTCVueY7LDDKt7MKIbOT59aojaTpNwAB1Uh5nCZSn42neGEeuv56NicyteVfJ+sB9Wdrhv20XtE9MjYM09ZyBniR8cr+422K+KNo9uIe24VtZTM3Z0i1VgpI1kv1f70wxFClosqlqC7vwPjTsRXYOiyqSxXNKCr4Xt7YWc338m9uxzHB5Vs7m8ywfRGBkTujwjlY71+kDybQ6rR74KzCnCOEcdRUUqA8yF/Z9fJkas77CClJNm1K+POLu74M0d39P03157MNiL6Xum4Kl+sx2nuh3i0H87dOGRMT4afOd/iy4iN/H9UmsnTy6Tn31K8pGZmWugdUXxCBch6VawLjYDf5ZgM+S7xuLJhdYlGbTS6bg6z8lo0wNCxPCM6Z6bSs37KpljlOtphC9O30Ikwty8UKj//5Es2lOAaJfg9o/j28u2sjwn412FHeT9KPo6lsiaFc9N0C7otuqeWHRlD10zQ/mj5adPh1yvPkP</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>02B1A7985EC6283FE05307991F0A2865</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:02B1A7985EC6283FE05307991F0A2865</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMpaNwdgVqCIBNkyuExImk5ctRW5AxJZAkrnk61cy4AC5LLtPLrVb3ae7j450KnGaeFFLShCKclZapgmTUW5tWJlgEceSyojhFGSkSNRvXV9FXhlFeLvFKvXaDevv0IOh+1Lz7AqqIdt3hxW77vvY9mueWyPDGtQD0K5SZtBjUmGmGpaHXN9Goe2iBxREyI88txyg4NkqDUBIHVu7lJG1AbWUDWus1DRynMViUV5UylyMHA8h13m6vuqTMaTYap6uK8oTiebGn5RjIJAkpEx46pw6ez6nsYz6dMSwygRscsVf5UIOCh3tE0s6OrGKvRD32JDny3PMOKMEJ/QNm/5cgxrzuNRKRlxQNU6/LMJFJrANS2IT12cnlrMP7chAewiFxLYcY3cT6x6GIIARKD3e9xrWyXFTy7c+CMzkkItU7i//Gx5gc0j4FGJbbsvaQDs+4Cedap4CiXqMJJmkc7gxZJ1iAnIzTSDHhyrdCRjS5RWVmqBLadA5u/AOlututOkIpPo/A9oZzjrIACcZNMXbn0EoKsunyVU4casKdX6tRtNJ53LkN3IAu865oRjtenlAyoJE6x2zQVZpsdfbLFRh4Pnpj8vVL0wenx/PbrP+79XqgpIbdl25eJqEP9/a49kMOwxupj9nMG/x2sTxRbZEd0vv1Q8uVLU9HvSefnTvBWeP6Tg5//NcD+jCvan71wPnt5P2VX3cqb4MUNK6vPRXnfB1QOvI/+vlYvF06bYGdN55fu4+vQXnVdQ+k07n6qbbPRPCCfqTeqMoZwf/vm175vvZywSI2i4NDXrtUldPCavvxcxYaGwPc9doasRHKmDKappdRjuiTMsdjSM9w/UaeWduKwjr1c55zatXuh1UraAgDN0uann1WnUrMmsUBxDPORtSk8tI7po23wMkaSSBxSDsOc+00knrm4htrHCpx+71IeBMwgPX8kzqNc5jmLDlGwtU1eW1Cpu/zqlVuuHqlt2K1lCB2JNkF+1J8j0QOqVgdNvQWmpeS6VbMcPzTCVueY7LDDKt7MKIbOT59aojaTpNwAB1Uh5nCZSn42neGEeuv56NicyteVfJ+sB9Wdrhv20XtE9MjYM09ZyBniR8cr+422K+KNo9uIe24VtZTM3Z0i1VgpI1kv1f70wxFClosqlqC7vwPjTsRXYOiyqSxXNKCr4Xt7YWc338m9uxzHB5Vs7m8ywfRGBkTujwjlY71+kDybQ6rR74KzCnCOEcdRUUqA8yF/Z9fJkas77CClJNm1K+POLu74M0d39P03157MNiL6Xum4Kl+sx2nuh3i0H87dOGRMT4afOd/iy4iN/H9UmsnTy6Tn31K8pGZmWugdUXxCBch6VawLjYDf5ZgM+S7xuLJhdYlGbTS6bg6z8lo0wNCxPCM6Z6bSs37KpljlOtphC9O30Ikwty8UKj//5Es2lOAaJfg9o/j28u2sjwn412FHeT9KPo6lsiaFc9N0C7otuqeWHRlD10zQ/mj5adPh1yvPkP</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID2</con:name><con:value>02B1A750D7D52170E05307991F0AA629</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL2</con:name><con:value>urn:dece:accountid:org:dece:02B1A750D7D52170E05307991F0AA629</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>02B1A7985EC6283FE05307991F0A2865</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:02B1A7985EC6283FE05307991F0A2865</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"00FE35BA295037A0E05307991F0A50EB:ACDE96A9"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1718504b-334c-4a9d-b694-cadc5c35c787</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_AccountGET_PERM_API_Invocation_from_a_Accessportal_CS_200_OK_P0" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b7b485dd-a49d-4123-8f95-91499290a3e2"><con:description> This case describes the scenario where a consumer goes to an online Retailer to delete an Account which is active. In order to delete an account it requires Node ID,AccountID and UserID.

This deletes an account.  The account is flagged that it is deleted without removing the data .  This is a reversible process.  Status is changed to &amp;quot;deleted&amp;quot;.  
This is performed on behalf of an authenticated Administrative User for the Account

Account deletion may be initiated only by a User on that Account with Full Access privileges. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9b3f4710-377d-40b5-af56-1ee3e7d75fd4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdAccportalCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call First_User_Create TestSuite" id="b01f7009-2d86-49f1-ba9c-e3bafeb36bdb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def country = context.expand( '${#TestSuite#Country}' )
def nodeid = context.expand( '${#TestCase#nodeid}' )

log.info country;

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",country);
myTS.setPropertyValue("nodeid",nodeid);
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;
def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_Firsrt_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("UserName",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID to AcessCS" id="d8e46b39-b024-4fd5-8d2e-12c649021c2e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportalCS"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API with AccessCS" id="abdfe5ed-2949-4950-ae19-d65fa284a873"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID2",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL2",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_MUC_Policy_Create" id="2b9dd987-cb2d-4453-8999-2ed0c25cdd5d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID2"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Get" id="45d5443c-548c-40b8-8fdd-3d3df6493938"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL2"));

myTC.setPropertyValue("CS","Y");
myTC.setPropertyValue("ResponseTypeAccountGet","SUCCESS");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>90179</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EP4rjPvYMb5BAU9gxuHSUkJIMKFJXs4o8hpUbAks2UB+fSUDLpDL4Zwnz65Xu99e9GmvOIoj2/U4h0QQRkubOKLczbVNLU2oyxAn3KUoBu4K7Pre8Ma1y6aLDke0Ur/T1P5phIGDzG9Yh5pV1SuohnTUgLr+Yr7UAFfNENca0pTzFPqUC0RFU7NNq6KbDd0yJ2bNNStupV6uOfazVppCwqVvaVI2tT2oDW9qcyGWrmGs1+vy2imzZGbYpmkZj8MbH88hRlrrapdRHihp7e1xOQAMUYTLmMXGlXFicxVw1yczikSawD5W8FEs0zAbhrQJOJl90YqzEPRpyHKxjSijBKOIvCJVnyGIOQtKXjRjCRHz+MMkLFM51mGDdWxV6BfNOIV2oaMThAlHOp8ja+9rDCEkQDGUHsb9pvblsq7lRycJojxkScxPxf+GB2gGEVtCoPNDWntolzt8p1KtK8Bun+Io5SSDWzWsS4SB77sJ+HJXpbsEQrK5IVwO6IYrdMYxvDNxV40OmQEX/6dBR83ZOZmiKIXWo/c8mt/fv/y4rX/rjY0Xp8fTDUnG0+/1Zg7g2DhXFK3diWdDWQzR7oT/ff7oTQdB9sArbb59vssWQ2eJM286vXf6w5WNnn8he/bY7y2yWzRwHPYV/8yi9eTmafsw+B3Xg8f5zw3/5Sx6X1fdtkWe753s+lcSjkJ/WOkOHro/bryB1VhVvEUSj/pOyoa/zU4wGNQ766UXs+7zw+twtGX8qVuvj55er++easA6YuWI+teH16nvQ7eGjMkTaxbpHOE/1R3uvJ++/AYsDqIag36n1JNdQuJzMlMaEuhhbuouFflwAVRoLXVKcYebSrojgSt7uJNN+9ryPKdbse2aY1rdrll1zFqjYfVMr9audg8ks0NxBrHNaEhULEW5u7H5HCCOXQ40gETPWCqZjmufeOwggUp9OpaXgFEOEybp2WL2LFksluvI2YoqD52E1VgjhFgr3TIxoqPECwUkJ5xsmSecPAZMlgQUcau55nKwuZC1WKEsFZFVzlCZQiqpPVEs69qVetXgJF5GoJAaMQvSCMrL+TKvjMF3X1tHmOfacXeS37YP8zr/dyiBtAmIMuAql2uQbYR3HhfnkMjHCTvHCR/ce2lA1MWS9RQJwTskp7/+jomaj2JGvHa767f9A+zC+rLTsh5vTxqfYDLOy1EECjJyFPbwcss3QLJG69DMFSqvymmWpXn7aoodE+nekCRpGT7gVJLadsIWQI3ChXHRC1KgPotc6E/xpWJOfYEExHLYSrl4wcrgA1crQ1/eks2l+8hJSFk3ARvxnq4dyXVHIf50I8IuVnZSfSc/a5YEf9v1jq+jODJPuTEIQmdKUq/H9oOhwEy6JZL3WHLs/D0H7wU/VRZFLrAIOU0vqYCP/5QUoTU1hDFLqeh3tFxxTLI5TrFdgvvX6I2bnMeLxY78+2ank3wEMMh1kJPcv3qfXTX/dHZE1Pugb7i60fO+WT2r0nB6OVdXd1zd8K69oign6Fpv1G81R3U6n/HWHw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>02B1A9FA61F2493FE05305991F0A9ABA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>02B1A9FA61F1493FE05305991F0A9ABA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:02B1A9FA61F1493FE05305991F0A9ABA</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>02B1AA3E4227301EE05307991F0A7C5E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:02B1AA3E4227301EE05307991F0A7C5E</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>accountget_firstuser20140910_1410332726348</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>02B1AA3E4228301EE05307991F0A7C5E</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:ACCESCS</con:value></con:property><con:property><con:name>UserName</con:name><con:value>accountget_firstuser20140910_1410332726348</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_af196c1e-a400-40ec-ae30-5bde8b7b75ee</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_af196c1e-a400-40ec-ae30-5bde8b7b75ee</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHquQhIRbVJBSaDtsbwxhukxfVsY5gNvEDrHDpb9+7UBSoLTbWQkJ+eT4O9+5+LPPOYqjqudzDqkgjGr9Xlv/B03tVh3bYCDXsgzXAmwgcCyjNgmhOWlMGjUAXetznkGfcoGoaOtVy3YNq2nYrZFd89y659QqVqP1pGuPkHIJLV0qlq6t44hyLw/b1rOUegxxwj2KYuCewF7g39160tNDBSe9c75lmQdMO3MhEs80cSUEDFGEK5jF5rl54HMeci8gM4pElsIuZsjb+m7varWqrJwKS2dm1bIs02qZ0ifkZPZd73wrNkPYp1O2XXcRZZRgFJFXpEjdgZizUPOjGUuJmMcfQNumbSloA9bYwLZLv+vmW4Cc3ReRDkimHBl8juwCbAhTSIFi0H4N+239+9c6uN07ShHlU5bG/Gj9Z5SALiFiCYQGLzIr2H0d8US5OueAvT7FUcbJEu7VmCQIA9cGKUzJ+pZwOXwh1/L2a2suf6SYMsB/0pZzc5+rpG6eqE6PzICL/9Oz/X5tUR5RlEHndXhX4zN0M3xasPvej3vqX79eIufsbHDXzinsO29Jle3erY+HtZyt3abxU+ZOyTh2RtPBL6dXty7Qc8T/bow3N+On8PfT9WY1Mrsb9+k+eDlzuvXBZsQzdH02aLSCXnd9tcJL67k1uZm9cOfb78AeVCc/zcWm6Y+TCabmA0O/g8fWg49mZ1eP8bO7ebj+wZ5vn80ZW/F1gl6bZi1dmFXRWw7TxK/eRi/h/Ob64frbYnk5Rpg75itSRf7rfv2z/ZbTfg6HxkISgmzyDFgUSzUe/Z52JaGQ+FxelIWExjR39RKlUVwAFXpH7VLS4mVSgEjoyWZu15Z1denUut1m1Xechl+9tGqOlLiWfWX5rut2Cw3asjii2GV0SlQspbLb+fmcII49DjSE1FiyDM+B658g9pBAWp8O5eFglMOISRVP6xg2bIOz17hhr9NpKxONhTtLE127Z+KBPqT+VEB6KN3NA+keAiYJAaXvasC5nHAuZC0WaJmJyK4sUYVCJm+AVImwV3WbNZOTOIlAMTVjFmYRVJJ5klfG5Nv/qiFbnlv9bvcy6Ab54fswt+NvRRmkT0iUA1f5XIBsJZy4h6pFMh8mXbX3ky7g/Swk6ozJmoqU4C2Tw09vo6JmpJyTXVYF7dL72HCAbB4nVQYLlwSXA1/e1FLopQx0irYsUGVRyZbLLG9EQ0lcKuFNqXS2GQDOpE5tRuwFqFlCmF+6JkrWR5FL+yG/TMxpIJCAWI6Nli+/8EYIgKs3Ql/O+/qrD5CDkLJuAtbilK0byaeEYvzpawN7WPlJ80D+rVgavrXrBNZeHJmnfBgIQmdqpS6EzQeDgZmEJVLBWLoPfgrgVPBDY1nkkouQ0zTJBHz8RVPS1NYRxiyjot/Tc8O+XOY8xSYB783pHUwuybs7ds0/vGPHd7eBFK4Y6aUv+W9ng+TjguULU/rnXNr6Wj4ZZXA625PnHcH3Cn1xVau1nPpFq54rdG2r0PVar1EW8CCTzjvze8teTY/PQ+df</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>00FE35CC82A337A2E05307991F0A444C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:00FE35CC82A337A2E05307991F0A444C</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHquQhIRbVJBSaDtsbwxhukxfVsY5gNvEDrHDpb9+7UBSoLTbWQkJ+eT4O9+5+LPPOYqjqudzDqkgjGr9Xlv/B03tVh3bYCDXsgzXAmwgcCyjNgmhOWlMGjUAXetznkGfcoGoaOtVy3YNq2nYrZFd89y659QqVqP1pGuPkHIJLV0qlq6t44hyLw/b1rOUegxxwj2KYuCewF7g39160tNDBSe9c75lmQdMO3MhEs80cSUEDFGEK5jF5rl54HMeci8gM4pElsIuZsjb+m7varWqrJwKS2dm1bIs02qZ0ifkZPZd73wrNkPYp1O2XXcRZZRgFJFXpEjdgZizUPOjGUuJmMcfQNumbSloA9bYwLZLv+vmW4Cc3ReRDkimHBl8juwCbAhTSIFi0H4N+239+9c6uN07ShHlU5bG/Gj9Z5SALiFiCYQGLzIr2H0d8US5OueAvT7FUcbJEu7VmCQIA9cGKUzJ+pZwOXwh1/L2a2suf6SYMsB/0pZzc5+rpG6eqE6PzICL/9Oz/X5tUR5RlEHndXhX4zN0M3xasPvej3vqX79eIufsbHDXzinsO29Jle3erY+HtZyt3abxU+ZOyTh2RtPBL6dXty7Qc8T/bow3N+On8PfT9WY1Mrsb9+k+eDlzuvXBZsQzdH02aLSCXnd9tcJL67k1uZm9cOfb78AeVCc/zcWm6Y+TCabmA0O/g8fWg49mZ1eP8bO7ebj+wZ5vn80ZW/F1gl6bZi1dmFXRWw7TxK/eRi/h/Ob64frbYnk5Rpg75itSRf7rfv2z/ZbTfg6HxkISgmzyDFgUSzUe/Z52JaGQ+FxelIWExjR39RKlUVwAFXpH7VLS4mVSgEjoyWZu15Z1denUut1m1Xechl+9tGqOlLiWfWX5rut2Cw3asjii2GV0SlQspbLb+fmcII49DjSE1FiyDM+B658g9pBAWp8O5eFglMOISRVP6xg2bIOz17hhr9NpKxONhTtLE127Z+KBPqT+VEB6KN3NA+keAiYJAaXvasC5nHAuZC0WaJmJyK4sUYVCJm+AVImwV3WbNZOTOIlAMTVjFmYRVJJ5klfG5Nv/qiFbnlv9bvcy6Ab54fswt+NvRRmkT0iUA1f5XIBsJZy4h6pFMh8mXbX3ky7g/Swk6ozJmoqU4C2Tw09vo6JmpJyTXVYF7dL72HCAbB4nVQYLlwSXA1/e1FLopQx0irYsUGVRyZbLLG9EQ0lcKuFNqXS2GQDOpE5tRuwFqFlCmF+6JkrWR5FL+yG/TMxpIJCAWI6Nli+/8EYIgKs3Ql/O+/qrD5CDkLJuAtbilK0byaeEYvzpawN7WPlJ80D+rVgavrXrBNZeHJmnfBgIQmdqpS6EzQeDgZmEJVLBWLoPfgrgVPBDY1nkkouQ0zTJBHz8RVPS1NYRxiyjot/Tc8O+XOY8xSYB783pHUwuybs7ds0/vGPHd7eBFK4Y6aUv+W9ng+TjguULU/rnXNr6Wj4ZZXA625PnHcH3Cn1xVau1nPpFq54rdG2r0PVar1EW8CCTzjvze8teTY/PQ+df</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID2</con:name><con:value>00FE35BF55936B96E05305991F0A65D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL2</con:name><con:value>urn:dece:accountid:org:dece:00FE35BF55936B96E05305991F0A65D7</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>00FE35CC82A337A2E05307991F0A444C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:00FE35CC82A337A2E05307991F0A444C</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"00FE35CE601437A4E05307991F0A2173:4941EA40"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>760e7ad9-ea07-4848-b172-46915ec752c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7986cf8-dc25-4c32-9617-6256d919eb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5be2fca7-4226-4ec4-b147-7da4a9d73f10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e5ce75-2fd6-47a1-851a-96e7c11a22fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>13012a96-d7b9-4f65-aa93-c029c21ce9cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7d516612-dbeb-4f53-983b-44d22ad5e762</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6aeb25ba-a31f-4722-b23c-f548b5657eba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property></con:properties><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="OVERRIDE">https://qa.p.uvvu.com:7001/${#TestCase#endPoint}</con:endpoint></con:endpointStrategy><con:requirements/><con:properties><con:property><con:name>YOUTH_MIN_AGE</con:name><con:value>13</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>yyyy-MM-dd</con:value></con:property><con:property><con:name>YOUTH_DOB</con:name><con:value>28-Jul-99</con:value></con:property><con:property><con:name>versionUrlEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>02</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>2015</con:value></con:property><con:property><con:name>V2</con:name><con:value>11</con:value></con:property><con:property><con:name>V1</con:name><con:value>1</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Username</con:name><con:value>user20130726_035217</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urntokenType_saml</con:name><con:value>urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>urntokenType_deviceauthtoken</con:name><con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_NZ</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_NL</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_LU</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_IE</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_GB</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_FR</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_DE</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_CH</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_CA</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_BE</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_AU</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_AT</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa2.c.uvvu.com</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa2.s.uvvu.com</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP2</con:value></con:property><con:property><con:name>targetPort_TOU</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>7002</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>7002</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa2.s.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa2.q.uvvu.com</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa2.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa2.d.uvvu.com</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa2.c.uvvu.com</con:value></con:property><con:property><con:name>targetHostB</con:name><con:value>qa2.b.uvvu.com</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa2.p.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa2.d.uvvu.com</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa2.d.uvvu.com</con:value></con:property><con:property><con:name>SurName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>Streams_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_178066866.txt</con:value></con:property><con:property><con:name>Streams_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:857081750</con:value></con:property><con:property><con:name>Streams_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_618356324.txt</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>../../GlobalScripts</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>../../GlobalScripts</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>Rights_CID</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_11.txt</con:value></con:property><con:property><con:name>Rights_APID</con:name><con:value>urn:dece:apid:file:SARVAJEET_CID_DONT_TOUCH_11.txt:AUDIO_Number_11</con:value></con:property><con:property><con:name>Rights_ALID</con:name><con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_11.txt</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>Request_XML_Buffer</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"><Name><GivenName>${#Project#UserName}</GivenName><SurName>${#Project#UserName}</SurName></Name><ContactInfo><PrimaryEmail><Value>${#Project#PrimaryEmail}</Value></PrimaryEmail><AlternateEmail><Value>${#Project#AlternateEmail}</Value></AlternateEmail><Address><PostalAddress>${#Project#PostalAddress}</PostalAddress><PostalCode>${#Project#PostalCode}</PostalCode><Locality>${#Project#Locality}</Locality><StateOrProvince>${#Project#StateOrProvince}</StateOrProvince><Country>${#Project#Country}</Country></Address><TelephoneNumber><Value>${#Project#TelephoneNumber}</Value></TelephoneNumber><MobileTelephoneNumber><Value>${#Project#MobileTelephoneNumber}</Value></MobileTelephoneNumber></ContactInfo><Languages><Language>${#Project#Language1}</Language></Languages><!-- <DateOfBirth> depricated </DateOfBirth> -->${#TestCase#LegalGuardian}<Credentials><Username>${#TestCase#UserName}</Username><Password>${#Project#password}</Password></Credentials><UserRecoveryTokens><RecoveryItem><QuestionID>${#Project#QuestionID1}</QuestionID><QuestionResponse>${#Project#QuestionResponse1}</QuestionResponse></RecoveryItem><RecoveryItem><QuestionID>${#Project#QuestionID2}</QuestionID><QuestionResponse>${#Project#QuestionResponse2}</QuestionResponse></RecoveryItem></UserRecoveryTokens></User>]]></con:value></con:property><con:property><con:name>Request_XML</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"><Name><GivenName>${#Project#UserName}</GivenName><SurName>${#Project#UserName}</SurName></Name><ContactInfo><PrimaryEmail><Value>${#Project#PrimaryEmail}</Value></PrimaryEmail><AlternateEmail><Value>${#Project#AlternateEmail}</Value></AlternateEmail><Address><PostalAddress>${#Project#PostalAddress}</PostalAddress><PostalCode>${#Project#PostalCode}</PostalCode><Locality>${#Project#Locality}</Locality><StateOrProvince>${#Project#StateOrProvince}</StateOrProvince><Country>${#Project#Country}</Country></Address><TelephoneNumber><Value>${#Project#TelephoneNumber}</Value></TelephoneNumber><MobileTelephoneNumber><Value>${#Project#MobileTelephoneNumber}</Value></MobileTelephoneNumber></ContactInfo><Languages><Language>${#Project#Language1}</Language></Languages><!-- <DateOfBirth> depricated </DateOfBirth> -->${#TestCase#LegalGuardian}<Credentials><Username>${#TestCase#UserName}</Username><Password>${#Project#password}</Password></Credentials><UserRecoveryTokens><RecoveryItem><QuestionID>${#Project#QuestionID1}</QuestionID><QuestionResponse>${#Project#QuestionResponse1}</QuestionResponse></RecoveryItem><RecoveryItem><QuestionID>${#Project#QuestionID2}</QuestionID><QuestionResponse>${#Project#QuestionResponse2}</QuestionResponse></RecoveryItem></UserRecoveryTokens></User>]]></con:value></con:property><con:property><con:name>RandomPwdFlag</con:name><con:value/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>Query_HostNameForProxy</con:name><con:value>https://uvqa-proxycache-elb-2009492071.us-west-2.elb.amazonaws.com:7001</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa2.q.uvvu.com</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa2.p.uvvu.com</con:value></con:property><con:property><con:name>projectPath</con:name><con:value>C:\Users\rshrivastava\Desktop</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>Policy_TOU</con:name><con:value>https://qa2.c.uvvu.com/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E528808A600535F3E0401F0A07996230</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E151F333D66812AFE0401F0A07996C63</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E528648B66BDACF7E0401F0A05994DAF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>nodeIdSPCLCS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS1</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL1</con:name><con:value>sriniretailer</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRetailerforDeviceAuthToken</con:name><con:value/></con:property><con:property><con:name>nodeIdportalCS2</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdportal2</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDECECS1</con:name><con:value>truststore-dece-cs</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESS_CS_2</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>NODEACCID</con:name><con:value>E1AF78725D9E6410E0401F0A07997B12</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>minUserName</con:name><con:value>6</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>maxUserName</con:name><con:value>64</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>Language2</con:name><con:value>de</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:@stdeqp-clu2-scan.va.neustar.com:2115/stdecqa.neustar.com</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>GeoProfile</con:name><con:value>US</con:value></con:property><con:property><con:name>Flaky_Disabled</con:name><con:value>true</con:value></con:property><con:property><con:name>FLAKYSELECTOR</con:name><con:value>without_flaky</con:value></con:property><con:property><con:name>expectHTTPcontenttype</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ExecutionPriority</con:name><con:value>P0,P1,P2,P3</con:value></con:property><con:property><con:name>eTag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP2</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP2</con:value></con:property><con:property><con:name>encodedUserID</con:name><con:value/></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>false</con:value></con:property><con:property><con:name>enableFlakyScript</con:name><con:value>false</con:value></con:property><con:property><con:name>DMR_CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>DMR_BID</con:name><con:value>urn:dece:bid:org:200002</con:value></con:property><con:property><con:name>DMR_APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>DMR_ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>DisplayName</con:name><con:value>ucr5_accname_20150604_034757</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value/></con:property><con:property><con:name>disablePriority</con:name><con:value>P3,CHILD,CLG</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa2.d.uvvu.com</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA2_APP</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp2db_23</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP2</con:value></con:property><con:property><con:name>DBHost</con:name><con:value>LP1</con:value></con:property><con:property><con:name>DateOfBirthXML</con:name><con:value>1999-07-19</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>coords</con:name><con:value>FALKY,COORD-10000,COORD-3034,COORD-2999,COORD-2509,COORD-627,UV-135,UV-340,Coord-2180</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>clusterNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>CHILD_MAX_AGE</con:name><con:value>12</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-08-15</con:value></con:property><con:property><con:name>CHILD_DOB</con:name><con:value>27-Jul-02</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>../../Certs/QALP2/</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>../../Certs/QALP2/</con:value></con:property><con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property><con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa2.b.uvvu.com</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_2</con:value></con:property><con:property><con:name>assertionUID</con:name><con:value>E19E3D2D6A904D06E0401F0A05994A7A</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>ADULT_MIN_AGE</con:name><con:value>18</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>ADULT_DOB</con:name><con:value>29-Jul-94</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>17AF38AAF30561C7E05305991F0A7EED</con:value></con:property></con:properties><con:afterLoadScript/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>if(testStepResult.getTestStep().config.type.toString() == "restrequest")
{
	byte [] tempByteArrRequest = testStepResult.getRawRequestData();
	String tempRequest = new String(tempByteArrRequest);

	log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Request>--------------------------------");
	log.info(tempRequest);
	log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Request>--------------------------------");

	byte [] tempByteArrResponse = testStepResult.getRawResponseData();
	String tempResponse = new String(tempByteArrResponse);


	log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
	log.info(tempResponse);
	log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
}</con:script></con:eventHandlers><con:eventHandlers type="TestSuiteRunListener.beforeTestCase" name="TestSuiteRunListener.beforeTestCase"><con:script>log.info("################################################################################");</con:script></con:eventHandlers><con:sensitiveInformation/></con:soapui-project>