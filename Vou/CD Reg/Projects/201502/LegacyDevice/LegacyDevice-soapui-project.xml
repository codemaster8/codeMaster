<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="R6LegacyDevice" resourceRoot="${projectDir}" soapui-version="4.6.1" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" scriptLibrary="" defaultScriptLanguage="Groovy" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="ProjectSettings@shadowPassword"/><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop/report</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="true"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Users\pgour\Desktop\ReportTestLauncher"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LegacyDeviceAdd_Retailer" type="rest" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="LegacyDeviceAdd" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice"><con:settings/><con:parameters/><con:method name="GET LegacyDeviceAdd" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:DigitalAsset</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405 404</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404 400</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Error</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401 404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="POST LegacyDeviceAdd" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 403 409 404 401</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 202 201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500 400 405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401 413 500 404 502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200 201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 409 401</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>503</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PUT LegacyDeviceAdd" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DELETE LegacyDeviceAdd" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404 400</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="HEAD LegacyDeviceAdd" method="HEAD"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="OPTION LegacyDeviceAdd" method="OPTIONS"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="LegacyDeviceDelete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}"><con:settings/><con:parameters/><con:method name="GET LegacyDeviceAdd" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:DigitalAsset</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405 404</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404 400</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Error</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401 404 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="POST LegacyDeviceAdd" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 202</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401 413</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PUT LegacyDeviceAdd" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 404 403 401</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404 400 500 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DELETE LegacyDeviceAdd" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404 400</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="HEAD LegacyDeviceAdd" method="HEAD"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="OPTION LegacyDeviceAdd" method="OPTIONS"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="LegacyDeviceUpdate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}"><con:settings/><con:parameters/><con:method name="GET LegacyDeviceAdd" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:DigitalAsset</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405 404</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404 400</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Error</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401 404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="POST LegacyDeviceAdd" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 202</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PUT LegacyDeviceAdd" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DELETE LegacyDeviceAdd" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="HEAD LegacyDeviceAdd" method="HEAD"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="OPTION LegacyDeviceAdd" method="OPTIONS"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="LegacyDeviceGet" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/Domain/${#Project#DomainID}/Device/${#TestCase#DeviceID}"><con:settings/><con:parameters/><con:method name="GET LegacyDeviceAdd" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:DigitalAsset</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405 404</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404 400 403 401</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Error</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401 404 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404 403 400 401</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Device</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="POST LegacyDeviceAdd" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 202</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401 413</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PUT LegacyDeviceAdd" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 404 403 401</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DELETE LegacyDeviceAdd" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="HEAD LegacyDeviceAdd" method="HEAD"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="OPTION LegacyDeviceAdd" method="OPTIONS"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account" type="rest" basePath="" definitionUrl="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>403 404 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 403 405 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="AccountGET" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201 303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>403 404 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 403 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="Account" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="AccountGet" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="AccountDelete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="AccountUpdate" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMerge" type="rest" basePath="" definitionUrl="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMerge" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:value>RetiredAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RetiredAccountID</con:default></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeTest" type="rest" basePath="" definitionUrl="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeTest" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeUndo" type="rest" basePath="" definitionUrl="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints/><con:resource name="AccountMergeUndo" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Undo"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountResourceStatusUpdate" type="rest" basePath="" definitionUrl="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountResourceStatusUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/ResourceStatus/Current/Update"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default></con:parameter></con:parameters><con:method name="ResourceStatusUpdate" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AddNewUser" type="rest" basePath="${#Project#HostName}" definitionUrl="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AddUser" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User"><con:settings/><con:parameters/><con:resource name="UserAPI" path="{UserID}"><con:settings/><con:parameters><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserGet" method="GET"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 404 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserUpdate" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:default></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:html</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:html</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:method name="AddUser" method="POST"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="FirstUserCreate" type="rest" basePath="" definitionUrl="C:\Users\pgour\Desktop\Wadl\FirstUserCreate_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/pgour/Desktop/Wadl/FirstUserCreate_1.wadl"><con:part><con:url>file:/C:/Users/pgour/Desktop/Wadl/FirstUserCreate_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="FirstUserCreate"/>
  <resources base="${#Project#Provision_HostName}">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="FirstUserCreate">
      <doc xml:lang="en" title="FirstUserCreate"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <resource path="{UserID}" id="UserAPI">
        <doc xml:lang="en" title="UserAPI"/>
        <param name="UserID" default="UserID" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <resource path="ResourceStatus/Current/Update" id="User_StatusUpdate">
          <doc xml:lang="en" title="User_StatusUpdate"/>
          <method name="PUT" id="UserStatusUpdate">
            <doc xml:lang="en" title="UserStatusUpdate"/>
            <request>
              <representation mediaType="application/xml" element="coor:ResourceStatus" xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator"/>
            </request>
            <response status="">
              <representation mediaType="application/xml" element="coor:ResourceStatus" xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator"/>
            </response>
            <response status="400 403">
              <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator"/>
            </response>
            <response status="303">
              <representation mediaType="application/xml"/>
            </response>
          </method>
        </resource>
        <method name="GET" id="UserGet">
          <doc xml:lang="en" title="UserGet"/>
          <request/>
          <response status="400 403">
            <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator"/>
          </response>
          <response status="200">
            <representation mediaType="application/xml" element="coor:User" xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator"/>
          </response>
          <response status="">
            <representation mediaType="application/xml"/>
          </response>
          <response status="404">
            <representation mediaType="text/html; charset=iso-8859-1" element="html"/>
          </response>
          <response status="0">
            <representation mediaType="" element="data"/>
          </response>
        </method>
      </resource>
      <resource path="List" id="UserList">
        <doc xml:lang="en" title="UserList"/>
        <method name="GET" id="UserList">
          <doc xml:lang="en" title="UserList"/>
          <request/>
          <response status="200">
            <representation mediaType="application/xml" element="dece:UserList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
        </method>
      </resource>
      <method name="POST" id="FirstUserCreate">
        <doc xml:lang="en" title="FirstUserCreate"/>
        <request>
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 403 404 500">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="403 404 502 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="400 404 405 500">
          <representation mediaType="text/xml"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="400">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" id="UserDelete">
      <doc xml:lang="en" title="UserDelete"/>
      <param name="AccountID" default="${#TestCase#NODE_ACCOUNT_ID}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="UserID" default="${#TestCase#NODE_USER_ID}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="DELETE" id="DeleteUser">
        <doc xml:lang="en" title="DeleteUser"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="412">
          <representation mediaType="text/html;charset=utf-8"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="FirstUserCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:resource name="UserAPI" path="{UserID}"><con:settings/><con:parameters><con:parameter><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default></con:parameter></con:parameters><con:resource name="User_StatusUpdate" path="ResourceStatus/Current/Update"><con:settings/><con:parameters/><con:method name="UserStatusUpdate" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ResourceStatus</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ResourceStatus</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:method name="UserGet" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:html</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserList" path="List"><con:settings/><con:parameters/><con:method name="UserList" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:UserList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:method name="FirstUserCreate" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>403 404 502 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 404 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserDelete" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>${#TestCase#NODE_ACCOUNT_ID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#NODE_ACCOUNT_ID}</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>${#TestCase#NODE_USER_ID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#NODE_USER_ID}</con:default></con:parameter></con:parameters><con:method name="DeleteUser" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="PolicyCreate" type="rest" basePath="" definitionUrl="C:\Users\pgour\Desktop\Wadl\PolicyCreate_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/pgour/Desktop/Wadl/PolicyCreate_1.wadl"><con:part><con:url>file:/C:/Users/pgour/Desktop/Wadl/PolicyCreate_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="PolicyCreate"/>
  <resources base="${#Project#Provision_HostName}">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="PolicyCreate_UserPolicy">
      <doc xml:lang="en" title="PolicyCreate_UserPolicy"/>
      <param name="NodeAccountId" default="${#TestProject#NodeAccountId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" default="${#TestProject#NodeUserId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" default="${#TestCase#PolicyClass}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateSinglePolicyPost">
        <doc xml:lang="en" title="PolicyCreateSinglePolicyPost"/>
        <request>
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="200 201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
        <response status="400">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
      <method name="GET" id="UserPolicyGET">
        <doc xml:lang="en" title="UserPolicyGET"/>
        <request/>
        <response status="">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="200 201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
      </method>
      <method name="DELETE" id="UserPolicy_DELETE">
        <doc xml:lang="en" title="UserPolicy_DELETE"/>
        <request/>
        <response status="">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="200 201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="PolicyCreate_AccountPolicy">
      <doc xml:lang="en" title="PolicyCreate_AccountPolicy"/>
      <param name="NodeAccountId" default="${#TestProject#NodeAccountId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" default="${#TestCase#PolicyClass}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateSinglePolicyPost">
        <doc xml:lang="en" title="PolicyCreateSinglePolicyPost"/>
        <request>
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="200 201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
      </method>
      <method name="GET" id="AccountPolicyGET">
        <doc xml:lang="en" title="AccountPolicyGET"/>
        <request/>
      </method>
      <method name="DELETE" id="AccountPolicyDELETE">
        <doc xml:lang="en" title="AccountPolicyDELETE"/>
        <request/>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="PolicyCreate_UserPolicy" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}"><con:settings/><con:parameters><con:parameter disableUrlEncoding="false"><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter disableUrlEncoding="false"><con:name>NodeUserId</con:name><con:value>${#TestProject#NodeUserId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeUserId}</con:default></con:parameter><con:parameter disableUrlEncoding="false"><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserPolicyGET" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserPolicy_DELETE" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreate_AccountPolicy" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="AccountPolicyGET" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="AccountPolicyDELETE" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Rights Token" type="rest" basePath="${#Project#Provision_HostName}" definitionUrl="C:\Users\pgour\Desktop\Wadl\Rights Token_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/pgour/Desktop/Wadl/Rights%20Token_1.wadl"><con:part><con:url>file:/C:/Users/pgour/Desktop/Wadl/Rights%20Token_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Rights Token"/>
  <resources base="${#Project#Provision_HostName}">
    <resource path="${#TestCase#endPoint}" id="Rights Token Get_List">
      <doc xml:lang="en" title="Rights Token Get_List"/>
      <method name="GET" id="Rights Token Get">
        <doc xml:lang="en" title="Rights Token Get"/>
        <request/>
        <response status="400 403 404">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="coor:RightsTokenList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{RIGHTSTOKEN}/RightsToken" id="Rights Token Create">
      <doc xml:lang="en" title="Rights Token Create"/>
      <param name="RIGHTSTOKEN" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="Rights Token Create">
        <doc xml:lang="en" title="Rights Token Create"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="Rights Token Get_List" path="${#TestCase#endPoint}"><con:settings/><con:parameters/><con:method name="Rights Token Get" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:RightsTokenList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="Rights Token Create" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{RIGHTSTOKEN}/RightsToken"><con:settings/><con:parameters><con:parameter><con:name>RIGHTSTOKEN</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="Rights Token Create" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Stream" type="rest" basePath="${#Project#Provision_HostName}" definitionUrl="C:\Users\pgour\Desktop\Wadl\Stream_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/pgour/Desktop/Wadl/Stream_1.wadl"><con:part><con:url>file:/C:/Users/pgour/Desktop/Wadl/Stream_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Stream"/>
  <resources base="${#Project#Provision_HostName}">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream/{STREAM}" id="StreamView">
      <doc xml:lang="en" title="StreamView"/>
      <param name="STREAM" default="${#Project#urnstream}1234" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ACCT" default="${#Project#urnaccount}${#TestCase#assertionAccountId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="GET">
        <doc xml:lang="en" title="GET"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml" element="urn:Response" xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol"/>
        </response>
        <response status="400 403 404">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="0 200">
          <representation mediaType="application/xml" element="dece:Stream" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream" id="StreamCreate">
      <doc xml:lang="en" title="StreamCreate"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="POST">
        <doc xml:lang="en" title="POST"/>
        <request>
          <representation mediaType="application/xml" element="urn:Response" xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="urn:Response" xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol"/>
          <representation mediaType="application/xml" element="urn:Response" xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol"/>
        </response>
        <response status="200">
          <representation mediaType="text/xml" element="urn:Response" xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="400">
          <representation mediaType="text/plain"/>
        </response>
        <response status="0 201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="StreamView" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream/{STREAM}"><con:settings/><con:parameters><con:parameter><con:name>STREAM</con:name><con:value>${#Project#urnstream}1234</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnstream}1234</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" basePath="" definitionUrl="C:\Users\pgour\Desktop\Wadl\STS_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/pgour/Desktop/Wadl/STS_1.wadl"><con:part><con:url>file:/C:/Users/pgour/Desktop/Wadl/STS_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="STS"/>
  <resources base="">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" id="STSCreate">
      <doc xml:lang="en" title="STSCreate"/>
      <param name="tokentype" default="tokentype" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="audience" default="audience" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="STSCreate">
        <doc xml:lang="en" title="STSCreate"/>
        <request>
          <representation mediaType="application/xml" element="proj:Credentials" xmlns:proj="${#Project#coordinatorSchema}"/>
        </request>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="proj:Credentials" xmlns:proj="${#Project#coordinatorSchema}"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="201">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" id="STSGet">
      <doc xml:lang="en" title="STSGet"/>
      <param name="assertionUUID" default="assertionUUID" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="STSGet">
        <doc xml:lang="en" title="STSGet"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="STSCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>tokentype</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>tokentype</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value>audience</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>audience</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}"><con:settings/><con:parameters><con:parameter><con:name>assertionUUID</con:name><con:value>assertionUUID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>assertionUUID</con:default></con:parameter></con:parameters><con:method name="STSGet" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserResourceStatusUpdate" type="rest" basePath="" definitionUrl="C:\Users\pgour\Desktop\Wadl\UserResourceStatusUpdate_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/pgour/Desktop/Wadl/UserResourceStatusUpdate_1.wadl"><con:part><con:url>file:/C:/Users/pgour/Desktop/Wadl/UserResourceStatusUpdate_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="UserResourceStatusUpdate"/>
  <resources base="">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="UserResourceStatusUpdate">
      <doc xml:lang="en" title="UserResourceStatusUpdate"/>
      <param name="AccountID" default="AccountID" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="UserID" default="UserID" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="PUT" id="UserResourceStatusUpdate">
        <doc xml:lang="en" title="UserResourceStatusUpdate"/>
        <request>
          <representation mediaType="application/xml" element="coor:ResourceStatus" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="400 403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:ResourceStatus" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="UserResourceStatusUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default></con:parameter></con:parameters><con:method name="UserResourceStatusUpdate" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ResourceStatus</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ResourceStatus</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Users" type="rest" basePath="${#Project#Provision_HostName}" definitionUrl="C:\Users\pgour\Desktop\Wadl\Users_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints/><con:resource name="UserCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserGet" path="rest/${Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserGet" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserUpdate" method="PUT"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserDelete" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="SetupScripts"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="ce2890e2-f83b-4571-b3c4-8fde6e9947bc"><con:settings/><con:testStep type="groovy" name="Set ENV Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(projectPath+"/project.properties"));
String line;
while ((line = reader.readLine()) != null)
                {
                                if (line.trim().length()==0) continue;
                                if (line.charAt(0)=='#') continue;

                                int delimPosition = line.indexOf("=");
                                String key = line.substring(0, delimPosition-0).trim();
                                String value = line.substring(delimPosition+1).trim();
                                propMap.put(key, value);
                }

propMap.each{ k, v -> tP.setPropertyValue(k,v)}


if (System.properties['os.name'].toLowerCase().contains('windows')) 
                {
                                log.info "it's Windows";
                                scriptLibrary = tP.getPropertyValue("scriptsPath_Windows");
                } 
else 
                {
                                log.info "it's not Windows"
                                scriptLibrary = tP.getPropertyValue("scriptsPath_Linux");
                }

log.info  " ScriptLibrary     ... " + scriptLibrary;

com.eviware.soapui.SoapUI.settings.setString( "Script Library", scriptLibrary);

log.info "updated_project_properties from properties file";

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");

def versionMinor = context.expand( '${#Project#versionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+versionMinor);

tP.setPropertyValue("coordinatorSchema",schema);
tP.setPropertyValue("Coordinator_Schema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="datasource" name="Country"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" disabled="true"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Policy Resource"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def policy_TOU = context.expand( '${#Project#Policy_TOU}' )


String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140811</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Set Environmet Properties" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change Environment Settings" searchProperties="true" id="827edb41-b797-4b0a-a93b-af2467c975f0"><con:settings/><con:testStep type="groovy" name="Set Coordinate Schema" id="a8f2b2da-76c5-4062-af32-3671b6b4b6db"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rest_api_version=tP.getPropertyValue("versionMinor");
log.info rest_api_version
if(rest_api_version=="06")
{
	tP.setPropertyValue("Coordinator_Schema","http://www.decellc.org/schema/2012/12/coordinator");
	//tP.setPropertyValue("versionMinor","06");
	tP.setPropertyValue("DomainID","urn%3Adece%3Adomainid%3Adece%3A1234");

}
else if(rest_api_version=="07")
{
	tP.setPropertyValue("Coordinator_Schema","http://www.decellc.org/schema/2013/06/coordinator");
	//tP.setPropertyValue("versionMinor","07");
	tP.setPropertyValue("DomainID","urn:dece:domainid:dece:1234");
}
else if(rest_api_version=="11")
{
	tP.setPropertyValue("Coordinator_Schema","http://www.decellc.org/schema/2013/10/coordinator");
	//tP.setPropertyValue("versionMinor",'11');
	tP.setPropertyValue("DomainID","urn:dece:domainid:dece:1234");
}
else if(rest_api_version=="21")
{
	tP.setPropertyValue("Coordinator_Schema","http://www.decellc.org/schema/2013/10/coordinator");
	//tP.setPropertyValue("versionMinor",'11');
	tP.setPropertyValue("DomainID","urn:dece:domainid:dece:1234");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Change Env Setting"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def env = context.expand( '${#Project#ENV}' )
log.info 'Env == '+env

if( tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
{
                tP.setPropertyValue("TOUUrl","qa.c.uvvu.com");
}
else
{
                tP.setPropertyValue("TOUUrl","qa.uvvu.com");
}

if (env == 'QALP1')
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7001");
tP.setPropertyValue("nodeIdRTL","RET");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("nodeIdDSP","DSP");
tP.setPropertyValue("nodeIdDSPCS","DSP_CS_1");
tP.setPropertyValue("nodeIdAccportal","ACCESS");
tP.setPropertyValue("nodeIdAccportalCS","ACCESCS");
tP.setPropertyValue("nodeIdDLASP","DLASP");
tP.setPropertyValue("nodeIdDLASPCS","DLASP_CS_1");
tP.setPropertyValue("nodeIdLLASP","LLASP");
tP.setPropertyValue("nodeIdLLASPCS","LLASP_CS_1");
tP.setPropertyValue("nodeIdDEV","DEV");
tP.setPropertyValue("nodeIdDEVCS","DEV_CS_1");
tP.setPropertyValue("nodeIdportal","iscportal1");
tP.setPropertyValue("nodeIdportalCS","iscportalcs1");
tP.setPropertyValue("nodeIdDECE","DECE");
tP.setPropertyValue("nodeIdDECECS","dece:cs");
tP.setPropertyValue("nodeIdCoo","COO");
tP.setPropertyValue("nodeIdCoordCS","coord:cs");
tP.setPropertyValue("nodeIdCON","CON");
tP.setPropertyValue("nodeIdCONCS","CON_CS_1");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7001");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7001");
tP.setPropertyValue("Batch_HostName","https://qa.b.uvvu.com:7001");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7001");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","7001");
tP.setPropertyValue("targetPortq","7001");
tP.setPropertyValue("targetSystem","LP1");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7001");
tP.setPropertyValue("JDBCConnStr","jdbc:oracle:thin:DEQA1_APP/lp1db_23@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com");
tP.setPropertyValue("DBUsername","DEQA1_APP");
tP.setPropertyValue("DBPassword","lp1db_23");
}
else if (env == "QALP2")
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7002");
tP.setPropertyValue("nodeIdRTL","RET");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("nodeIdDSP","DSP");
tP.setPropertyValue("nodeIdDSPCS","DSP_CS_1");
tP.setPropertyValue("nodeIdAccportal","ACCESS");
tP.setPropertyValue("nodeIdAccportalCS","ACCESCS");
tP.setPropertyValue("nodeIdDLASP","DLASP");
tP.setPropertyValue("nodeIdDLASPCS","DLASP_CS_1");
tP.setPropertyValue("nodeIdLLASP","LLASP");
tP.setPropertyValue("nodeIdLLASPCS","LLASP_CS_1");
tP.setPropertyValue("nodeIdDEV","DEV");
tP.setPropertyValue("nodeIdDEVCS","DEV_CS_1");
tP.setPropertyValue("nodeIdportal","iscportal1");
tP.setPropertyValue("nodeIdportalCS","iscportalcs1");
tP.setPropertyValue("nodeIdDECE","DECE");
tP.setPropertyValue("nodeIdDECECS","dece:cs");
tP.setPropertyValue("nodeIdCoo","COO");
tP.setPropertyValue("nodeIdCoordCS","coord:cs");
tP.setPropertyValue("nodeIdCON","CON");
tP.setPropertyValue("nodeIdCONCS","CON_CS_1");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7002");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7002");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7002");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","7002");
tP.setPropertyValue("targetPortq","7002");
tP.setPropertyValue("targetSystem","LP2");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7002");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7002");
tP.setPropertyValue("JDBCConnStr","jdbc:oracle:thin:DEQA2/dece2010@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com");
tP.setPropertyValue("DBUsername","deqa2");
tP.setPropertyValue("DBPassword","dece2010");
}
else if (env == "QALP3")
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7003");
tP.setPropertyValue("nodeIdRTL","RET");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("nodeIdDSP","DSP");
tP.setPropertyValue("nodeIdDSPCS","DSP_CS_1");
tP.setPropertyValue("nodeIdAccportal","ACCESS");
tP.setPropertyValue("nodeIdAccportalCS","ACCESCS");
tP.setPropertyValue("nodeIdDLASP","DLASP");
tP.setPropertyValue("nodeIdDLASPCS","DLASP_CS_1");
tP.setPropertyValue("nodeIdLLASP","LLASP");
tP.setPropertyValue("nodeIdLLASPCS","LLASP_CS_1");
tP.setPropertyValue("nodeIdDEV","DEV");
tP.setPropertyValue("nodeIdDEVCS","DEV_CS_1");
tP.setPropertyValue("nodeIdportal","iscportal1");
tP.setPropertyValue("nodeIdportalCS","iscportalcs1");
tP.setPropertyValue("nodeIdDECE","DECE");
tP.setPropertyValue("nodeIdDECECS","dece:cs");
tP.setPropertyValue("nodeIdCoo","COO");
tP.setPropertyValue("nodeIdCoordCS","coord:cs");
tP.setPropertyValue("nodeIdCON","CON");
tP.setPropertyValue("nodeIdCONCS","CON_CS_1");
tP.setPropertyValue("nodeIdCoordCS","coord:cs");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7003");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7003");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7003");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","7003");
tP.setPropertyValue("targetPortq","7003");
tP.setPropertyValue("targetSystem","LP3");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7003");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7003");
}
else if (env == "DEV")
{
tP.setPropertyValue("Device_HostName","https://lp2.dev.d.uvvu.com:8443");
tP.setPropertyValue("nodeIdRTL","ISC_RET");
tP.setPropertyValue("nodeIdRTLCS","ISC_RETCS");
tP.setPropertyValue("nodeIdDSP","ISC_DSP");
tP.setPropertyValue("nodeIdDSPCS","ISC_DSPCS");
tP.setPropertyValue("nodeIdAccportal","ISC_ACCESS");
tP.setPropertyValue("nodeIdAccportalCS","ISC_ACCESSCS");
tP.setPropertyValue("nodeIdDLASP","ISC_DLASP");
tP.setPropertyValue("nodeIdDLASPCS","ISC_DLASPCS");
tP.setPropertyValue("nodeIdLLASP","ISC_LLASP");
tP.setPropertyValue("nodeIdLLASPCS","ISC_LLASPCS");
tP.setPropertyValue("nodeIdDEV","ISC_DEVICE");
tP.setPropertyValue("nodeIdDEVCS","ISC_DEVICECS");
tP.setPropertyValue("nodeIdportal","ISC_PORTAL");
tP.setPropertyValue("nodeIdportalCS","ISC_PORTALCS");
tP.setPropertyValue("nodeIdDECE","ISC_DECE");
tP.setPropertyValue("nodeIdDECECS","ISC_DECECS");
tP.setPropertyValue("nodeIdCoo","ISC_COO");
tP.setPropertyValue("nodeIdCoordCS","ISC_COOCS");
tP.setPropertyValue("nodeIdCON","CON");
tP.setPropertyValue("nodeIdCONCS","CON_CS_1");
tP.setPropertyValue("Provision_HostName","https://lp2.dev.p.uvvu.com:8443");
tP.setPropertyValue("Query_HostName","https://lp2.dev.q.uvvu.com:8443");
tP.setPropertyValue("targerHostd","lp2.dev.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","lp2.dev.d.uvvu.com:8443");
tP.setPropertyValue("targetHost","lp2.dev.p.uvvu.com");
tP.setPropertyValue("targetHostq","lp2.dev.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","8443");
tP.setPropertyValue("targetPortq","8443");
tP.setPropertyValue("targetSystem","DEV");
tP.setPropertyValue("targetURL","lp2.dev.p.uvvu.com:8443");
tP.setPropertyValue("targetUrlSHost","lp2.dev.s.uvvu.com:8443");
tP.setPropertyValue("JDBCConnStr","jdbc:oracle:thin:DEVDECESR5/DEVDECESR5@10.31.153.15:2115/decdeversionMajor.neustar.com");
tP.setPropertyValue("DBUsername","DEVDECESR5");
tP.setPropertyValue("DBPassword","DEVDECESR5");
}
</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>a8f2b2da-76c5-4062-af32-3671b6b4b6db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:setupScript>def tS = runner.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("versionMajor",'1');
tP.setPropertyValue("versionMinor",'11');
def set_Coordinator_Schema_11 = context.expand( '${#Project#Set_Coordinator_Schema_11}' )
tP.setPropertyValue("Coordinator_Schema",set_Coordinator_Schema_11);
def md_schema_11 = context.expand( '${#Project#md_schema_11}' )
tP.setPropertyValue("md_schema",md_schema_11);</con:setupScript><con:tearDownScript>def tS = runner.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("versionMajor",'1');
tP.setPropertyValue("versionMinor",'11');
def set_Coordinator_Schema_11 = context.expand( '${#Project#Set_Coordinator_Schema_11}' )
tP.setPropertyValue("Coordinator_Schema",set_Coordinator_Schema_11);
def md_schema_11 = context.expand( '${#Project#md_schema_11}' )
tP.setPropertyValue("md_schema",md_schema_11);</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="CommonTestSteps" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate API" searchProperties="true" id="0f11d4f4-ebff-499e-83f5-81ad25ef4c7f"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Set Environment Properties" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def env = context.expand( '${#Project#ENV}' )
log.info 'Env == '+env

if (env == 'QALP1')
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7001");
tP.setPropertyValue("nodeIdDECECS","dece:cs");
tP.setPropertyValue("nodeIdRTL","2424");
//tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7001");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7001");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7001");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetPort","7001");
tP.setPropertyValue("targetPortq","7001");
tP.setPropertyValue("targetSystem","LP1");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7001");
tP.setPropertyValue("TOUUrl","qa.c.uvvu.com");
}
else if (env == "QALP2")
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7002");
//tP.setPropertyValue("nodeIdDECECS","DECE_CS");
tP.setPropertyValue("nodeIdRTL","2424");
//tP.setPropertyValue("nodeIdRTLCS","LP2_RET_CS_1");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7002");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7002");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7002");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetPort","7002");
tP.setPropertyValue("targetPortq","7002");
tP.setPropertyValue("targetSystem","LP2");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7002");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7002");
tP.setPropertyValue("TOUUrl","qa.c.uvvu.com");
}
else if (env == "QALP3")
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7003");
tP.setPropertyValue("nodeIdDECECS","DECE_CS");
tP.setPropertyValue("nodeIdRTL","loadtest_retailer");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7003");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7003");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7003");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetPort","7003");
tP.setPropertyValue("targetPortq","7003");
tP.setPropertyValue("targetSystem","LP3");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7003");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7003");
tP.setPropertyValue("TOUUrl","qa.uvvu.com");
}
else if (env == "DEV")
{
tP.setPropertyValue("Device_HostName","https://lp2.dev.d.uvvu.com:8443");
tP.setPropertyValue("nodeIdDECECS","truststore-dece-cs");
tP.setPropertyValue("nodeIdRTL","sriniretailer");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("Provision_HostName","https://lp2.dev.p.uvvu.com:8443");
tP.setPropertyValue("Query_HostName","https://lp2.dev.q.uvvu.com:8443");
tP.setPropertyValue("targerHostd","lp2.dev.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","lp2.dev.d.uvvu.com:8443");
tP.setPropertyValue("targetHost","lp2.dev.p.uvvu.com");
tP.setPropertyValue("targetHostq","lp2.dev.q.uvvu.com");
tP.setPropertyValue("targetPort","8443");
tP.setPropertyValue("targetPortq","8443");
tP.setPropertyValue("targetSystem","DEV");
tP.setPropertyValue("targetURL","lp2.dev.p.uvvu.com:8443");
tP.setPropertyValue("targetUrlSHost","lp2.dev.s.uvvu.com:8443");
tP.setPropertyValue("TOUUrl","lp3.dev.uvvu.com");
}





</script></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Policy Resource" disabled="true"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#DBHost}' )

def policy_TOU = context.expand( '${#Project#Policy_TOU}' )
def versionMinor = context.expand( '${#Project#versionMinor}' )

String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )
def targetPort = context.expand( '${#Project#targetPort}' )


def a = new dbUtils.dbUtils(log,dBHost);
                                                String sql = """select consent_version from CONSENT
                                                                where
                                                                consent_urn = 'urn:dece:type:policy:TermsOfUse'
                                                                and
                                                                COUNTRY = '$country'""";
                                                
                                                log.info sql;
                                                
                                                results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
                                assert results.length() > 0;
                                log.info "results" + results;
                
                                def myXML = new XmlSlurper().parseText(results);   

                                log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                
//log.info "versionMinor:"+versionMinor;
def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

       tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + ':' + targetPort + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("accountname",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);

tC.setPropertyValue("ResponseType","SUCCESS");

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);
def callTS = tP.getTestSuiteByName(callTSname);

tP.setPropertyValue("Country",callTS.getPropertyValue("Country"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

def b = tC.getPropertyValue("nodeid");

log.info b;</script></con:config></con:testStep><con:testStep type="groovy" name="Generate AccountName"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue("AccountName","accname_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set coordinatorSchema" disabled="true"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
if(tP.getPropertyValue("versionMinor") != "07")
{
	tP.setPropertyValue("coordinatorSchema","http://www.decellc.org/schema/2012/12/coordinator");
	log.info "Setting the coordinatorSchema value at project level: http://www.decellc.org/schema/2012/12/coordinator";
}
else
{
	tP.setPropertyValue("coordinatorSchema","http://www.decellc.org/schema/2013/06/coordinator");
	log.info "Setting the coordinatorSchema value at project level: http://www.decellc.org/schema/2013/06/coordinator";
}
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/11")
{
		tP.setPropertyValue("coordinatorSchema","http://www.decellc.org/schema/2013/10/coordinator");
	log.info "Setting the coordinatorSchema value at project level: http://www.decellc.org/schema/2013/10/coordinator";
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import soapUIUtils.soapUIUtils;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def certPath = groovyUtils.projectPath

//Set fileKeyStorePath value 
//log.info "certPath: "+certPath;
//tP.setPropertyValue("certPath",""+certPath);

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#Coordinator_Schema}"> 
<DisplayName>${#TestCase#AccountName}</DisplayName>
<Country>${#Project#Country}</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="947149be-7bb0-4a3f-9591-1927886d48ad"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Validate Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;

      //def a = context.expand( '${#TestCase#httpLocation}');
      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
                                
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
          int lastColon = urlStr.lastIndexOf(':');
	     int lastSlash = urlStr.lastIndexOf('/');
	     accountid     = urlStr.substring(lastColon + 1);
	     def node_Account = urlStr.substring(lastSlash + 1);

          tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
                    
          tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);                        
          tP.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);                                                   
          
      } else {
            assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
            int lastColon = urlStr.lastIndexOf('%3A');
            int lastSlash = urlStr.lastIndexOf('/');
            accountid     = urlStr.substring(lastColon + 3);
            def node_Account = urlStr.substring(lastSlash + 1);

            tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
            
            tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);
		  tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);
      }

} else {
      	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("accountname",tC.getPropertyValue("accountname"));
callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
</script></con:config></con:testStep><con:properties><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_Firsrt_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>accountname</con:name><con:value>accname_20141231_02231</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AEBC1A45FB130921DE0401F0A05996E16</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b8ba87db-df08-4f36-8c88-c580bb3ec25b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ce61892-9d8a-4055-b161-e19938292410</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c50a4409-da80-4892-a2c3-07a22e674bd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd13479c-f25a-495b-8c94-31e5557a93a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dbd205af-6a2e-447d-a1c5-eb49c82ff6e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>64613dd6-4244-4f8a-8186-0d4745fa0115</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountStatusUpdate API" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountResourceStatusUpdate"><con:settings/><con:config service="AccountResourceStatusUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/ResourceStatus/Current/Update" methodName="ResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore="dececs_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
log.info "errorRespType"+errorRespType;

def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
//String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus   = "HTTP/1.1 303 See Other";
		XMLbodynull        = true;
		processXMLFlag  = false;
		httpLocationHeader = true;
		
	break;

	case "INVALID_STATUS_UPDATE":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;

		case "INVALID_STATUS_UPDATE_ON_USER":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource. - Status requested cannot be applied on the user";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;


	
	case "API_NOT_AUTH":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	//errorReason = "API call not authorized";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NULL_BODY":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "text/xml";
		XMLbodynull        = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "XML_PARSE_ERROR":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorReasonFlag = false;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		//errorReason = "User ID does not match security token";
		errorReason = "The member’s user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;

	
	case "USER_INACTIVE":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	//errorReason = "Requesting User ID Not Specified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		//errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "The requesting member does not have permission to perform this action."
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		//errorReason = "Request Account ID not match";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	case "NO_MNG_USER_CNST":

	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;
	case "TOU_NOT_ACCEPTED":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The account status cannot be modified. - First User has to accept TOU to move the Account to active status";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusCannotBeModified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusCannotBeModified";
	break;

     case "ACCT_INACTIVE":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		//errorReason = "The identified account is not active.";
		errorID     = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

     case "SAME_CURRENT_STATUS":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		//errorReason = "Resource is already in the status requested";
		errorReason = "The resource is already in the requested status.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
     break;

     case "MTHD_NOT_ALLOWED":
     log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		errorReason = "Resource is already in the status requested";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
log.info 'Expected: '+expectHTTPstatus
log.info 'Actual: '+context.expand( '${#TestCase#httpStatus}' )
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	//def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	//assert b.getPath().matches("$errorHost/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;

	    if(errorReasonFlag)
	    {
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;
	    }
		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
} 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.7. Account Status Changed through Resource Update: Account Unlocked [Your UltraViolet account has been unlocked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 303 See Other</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6rKEn73versionMajorjuR8twUxQrSdUgoKh4A68vp2AYEOUmA4L++jOY6EqyknXWPi/iND3dX1/o+eYZm4HPdgHGKEm9KKyq0kvtP4KFOLbV5hqCzTuNpsWihmXxfKPVsRjIMBxtW0ytqmKcITXEqRmmLzWWZrgGzTdY3qD5LkN3Oe6JbQm7WnWFEkxME5UnulYtAj/E3Zvbl1qWhN3IxB7uhmaAcDeFXR1o4y7R7Jp3TLXX5zeUN4fJ6z5N4y5FwScbQeT78AlGAfVMfdJ5tnFX99zQTLMEvfu08UvtfW+e50859xQlLsXSNE3RAkV0bOy5/9ReK/fNyFZDJ3pb98wwCj1o+t7VLEFpKN1HdhX4bpR46T74wTRDMXRpuoEK2IBMM/ynRversionMajorycEP3l5Y+gUyw2cB7k7kbWyAHJSiEqLpcqC+1f/6ugm97jcQMsRMlAf6y/neQUHhGfhQju4Hvkd3R/b3Fb9L1+oxgVw2hn2HvjCZlm8QmRLg6S5DjFWMPk+azcfVW/mqB7x2G4L8pyTP1ESeBTX2TGclzEU7/n3p9rNWblZXpZ+h1tEGzc09SVoMITuGRNi5nvdhFvenh+HKD8FH5DdSj1O/rr4366Kv3TTBQ+tv6QKRaOdd3lmzfadWHQ784jK9+PwgKxvLb2mIWnXnR2iS2MMuRqjgzwwg3Np+dFOfoZs2Ddxz5/KASnizqNDD6So+eJkW+TXNJaXHHUNmitAiGkj4YnCYnOhDxfGLNZzo1MqOJdCkGzUiQfaUFZgatHZPdHoyjiiPPj+tkwTS13WmZCnqyd19+xfQxhjKuEbrcgiz/b1q0IJmp+Vj0yknhkM8zRa+aqvbqUq8HUM8FuSoCVxXHVzAR3eNpf/T6Qk6LYL5UgAQu2gLkkruVVvP5SM7t1crfrVRFEbVFMx+ArVQhLyS5WEm7zZA217t4yyr0ThdFe7OILG4Y24NjPtjDiWZo+cRQL9pBLiaGTK9vMrcg66t20JipseQq64MoaAs5l/KbR0nO95PdehFvl0IOr/JcA80+YJZyb68NjGDFQG6xhwd5rIHjTS7utd5qpRWyAWYV0Z2sSGxGT9nFMLBjK/D3H4wPiHHD7q8uVt/Pdlf5oPXkfk8/9XXV4qS5PASL7dJar47mWjlX4GACrLtHr+WZmyh3d51cmm+Ho2in7s9wAuayKM4BSRcNNLU/BFFfBFoTeMW1dxD5qGcrOTVkcaUu+H1+c/FOG2z2ad9kOh1mO17zsxMvyWF9N8qsw17bb5RpfaTb56WQCtctPtfPvOkxsIid+UYepKPCGcz1ijWTig0c1G13SPlXQUm09hAk18ve19xFuuan+GJ5jrMWN9Om33Z8jVvEju/EF1w3ovkxoXmRTEJqezmP0gpwNRGA/mF5EOea2CmTaqv5fKuJJlDkNAPXA5uO2NVpODj7cMuBqBitybf4XhhbymWRyucyaSu50pGAXRZhoC9l5QCWousmoisr4hxKYL5VR/mW5Gs5IMpf86jc8ujKIpC5HeCFQYVb0kI6TfVmE1xCcRkqwl47FWubD+j2CcljfRI3cw1PnHC3jo5a4CXLJNOXo9FkXFhG1j8eyKxyaH105nYV+XyMgTcZGfujFEnmLN5u07gewgSmahxoanGd7vCh41kBPay3GHFGS7DNLgMrX/ZNeTdKXJ0ZDRbhjGsLFZw5l0FQP3Tydd3Q+bht90JHulyoXbKiIxApwqJ1sguWPe6X+ZjPnSE4WiY7KXxBvAjyaGfAfDEfrfWg3qq0zuNxQF8NqjmJp7nez5vyfF7nbNEYGDhOvG3WcYtkGtrs1kz5845e8V7sHwU2OxrNmFu5ASnW7GzHbW1WmTc3cBe47RgOqQversionMajorBnLbGav9i3U1r3EwhW8D9Ot0eAjf5gf1cbJ8Gj130qGTbkUwvS/LA0iVqgo5Fcz0zwSmlHh2w7mpduOSBeEUhWnttdxVkpduRiiOZ3fJkfG2lmlaaHd6rKAApsPIkkw3aUahAd0SBLbN8XeW84biC8ReFDpe6avkcW+n1J8BwqCLUWijpHGOMrhHuPYHi2W+qmq4IMdvFGJkRIQnttgWEAEDOL7VYsgPL3O8rLAcxypKS2L4WnUSpdNwmgAnRclnjih84ogLBL3YQyWRLE9TTI5TnJKUnMxzlvrM09l8ClFGqGZSsr0u2+y0KOwFsY9KwFQQ2ZmPnuJ9fEsQhd+ebMOE+CYtswvx7aD/McKv7+7JIDq2VyrgMhwRkYKib/gue4/lx5gZ9mPMd/Mgs73yPCeZTRMPviH5/OpXw5Sd8uiW2w/Ed9gP7a+CT5apr0E9nNlnDz7a/nEjIISSUI7Xe1VO5tPpKTufs1sd2iWdSoh5iqFontIRzAgnuhjREYXUwwT1V3T0gfqL54f8M74s3Yd6Sj7pgHRN9bb8i7uIjnB5F1FJ1xd/e9H55JLkLUVF+p2s55MrS4n4j7ca2IWlHhHPyCOPEvtXub6x9cEPibOcYV7olquSfF5+aAwYEbMemWNR8tH4dwa+c/5Z+EjyA0tKusnKUvTzm2o5oF5qJoRRFqaqVLsJPg7NG870EqPuL6XfzNzo3zufL/CPfH6jjXUyvgKz9tD1/rdyw7u1C0RkF/ZuWF5qBbmaEueh+2FIvwP8bU4LLC01m5LcJMf4pznNyo8Efork9Tfx75IPOf36Pbz+Fw==</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\UsersAPIs\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>status</con:name><con:value>active</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate API" searchProperties="true" id="1d0e5f3a-b0ad-4ffa-acf0-b9d862e01af4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ETag",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserUpdate"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
			</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate"><con:settings/><con:config service="AddNewUser" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="AddUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
<!--		<Password>${#TestCase#password}</Password>-->
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
<!--	${#TestCase#ResourceStatus}-->
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "USER_PRIVILEGE_CANNOT_BE_CHANGED":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UserPrivilegeCannotBeChanged";
	errorReason ="The member's permission level cannot be changed.";
	errorLink   ="$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeCannotBeChanged";
	break;

	case "NOT_ALLOWED_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateUserInformation";
	errorReason = "The requesting member cannot update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserInformation"
	break;

	case "REQUESTOR_PRIVILEGE_INSUFFICIENT_TO_UPDATE_USER_CLASS":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID :org:dece:RequestorPrivilegeInsufficientToUpdateUserClass";
	errorReason = "The requesting member does not have permission to change the member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToUpdateUserClass"
	break;

	case "COUNTRY_CANNOT_BE_CHANGED_ONCE_SET":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:CountryCannotBeChangedOnceSet";
	errorReason = "The country cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CountryCannotBeChangedOnceSet"
	break;

	case "UNAUTH_CLG_CHANGE":
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UnauthorizedCLGChangeInRequest";
	errorReason = "The connected legal guardian (CLG) change request is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UnauthorizedCLGChangeInRequest";
	break;
	
	case "UNAUTH_NODE_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:NodeUnauthorizedToUpdateUserInformation";
	errorReason = "The node is not authorized to update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation"
	break;

	
	case "REQUESTOR_NOT_ALLOWED_TO_UPDATE_OTHER_USERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

	case "INVALID_STATUS":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "FULL_ACCESS_USER_MUST_BE_18_OR_OLDER":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:A full-access member must be 18 or older";
	errorReason = "A full-access member must be 18 or older.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;

	case "LAST_FULL_ACCESS_USER_CANNOT_BE_DEMOTED_TO_STANDARD_OR_BASIC_PRIVILGE":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege";
	errorReason = "The permission level of the last remaining full-access member in an account cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege"
	break;


	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "DOB_NOT_EDITABLE":
	XMLbodynull     = false;
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID  =  "urn:dece:errorid:org:dece:DateOfBirthNotEditable";
	errorReason = "A member's date of birth cannot be changed.";
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
     errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#DateOfBirthNotEditable" ;
	break;



	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NOT_ALLOWED_TO_UPDATE_ACS_LEVEL":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorid:org:dece:RequestorNotAllowedToUpdateUserAccessLevel";
	errorReason = "The requesting member cannot update a member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserAccessLevel"
   break;


	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "NOT_ALLOWED_TO_UPDATE_OTHERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
/*
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		//assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		//assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	}
} </script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>UNAUTH_NODE_TO_UPDATE_INFO</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/versionMajor.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:NodeUnauthorizedToUpdateUserInformation">
      <Reason Language="en">The node is not authorized to update member information.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">848</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02012_UserUpdate_FUNC_CHILD_Update_CHILD_Access 400 Bad Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_GeoProfile_CS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuq6En3nKyj2I0U8YMCmklTJExgwk834csrI8gCe8IANX39kCOwkO9k35z6B2q3u1YNaS8+J4Xt0FyQJilM3DKqK+FL7Z9eyOgzsmI32rtlqMDTHNrgWQzaQ1WQY2GQsps3WqkqSZEgJktQI0pcaTVLNBsk2qLZOsl261aXZJ6rNbWvVJYoTbBqrPJG1auF7QdK9un2pZXHQDY3ETbqB4aOkm8KuBtRRF2t2jTum2uvzDeXVYfzqpGnUJQj4ZCKIPA8+wdAnnokPOs9m0tVcOzDSLEZvPs3kpfa2N8/zp7z5FMY2QZMkSZAcgXXMxLV/1V4r983IVAIrvK0FIwgDFxqeezFKUCpKndCsAs8OYzd1/G9MUwRFlqYbqIANSDHBrxrx28EV3Q8tfQAZJ0YjcQzqbmyOLBSjAKLqYq681H79rIK3vXpsBIkVxn7yaf3fIKHghLwwQmYjuUd2R/dzi1+k6/UZwa4SQC9L3BMal20SGRAl1WmMLLcYuQluPjOpXstfLZJ7hyH4X0ryTLzHiWETX2RGdG2UpP9Pvd7X6mZlaXgZemWjzhCq4+mOnCC2SfaPUtPTIsPqWYeXK4T3yjdQj1K/rT836qOv3jZ5gxMrpAdLFk6UU8wtskhXG2FLG5dLDlnHWmiiTnnDneaZIeTSlRppNtnq+EMJjSaivrWV0bA1PNvkHLEVZ7/RWSdb0bvj7qixeS84K/OWIcHxcdKr99cpNQWjQpYtj++srI0rprM1IthIydtyX1+CsZA241lzQs21rLKf7UfGqDUYsfVeKLLT+pZ5+R3T+xjKuIbofA2y/L9ukZxopMZjIZSTwsLHM0WvqqIIdVEQABJskCs8sBV+dAFj3j4cnYPb43KSB7OFDERwVucgF+2NuJzNhlJuLpfedqnIMq/OmbwPNmIFfxClYilu1wPSWG2jDS2TW43nzfU83DUHkdk/5H0HjlVdzce6clb3UjHWJXJ1ldkFXl/UvUpN9EWzstrznDqXcjG/ehSl3BlvV/Nos+ByeJFmKmB6gFpIgqP2dX9JwebcgXtppILDVc47qrBcqoWkg2mFt8dLHJsuyNsI+ma08z3nnfE+Nq6bveV51/Oy7UXaq4LUE7RjT1N2TXEmDcB8s9itlgdjJZ8qsD8Gu7tHt+Ua6zC3t2wuzjaDYbhVnBMcg5nE8zOA00UCVekNQNjjgcoAt7gIe74dCqacEwM6qdQ5r9den93jOjF6pGdQLEttRqversionMinor9NgWpaC+HWa7vaM6a3lSH2rmacGl3GWTnOqntuFSsIis2Vrqp8PC6s+0ym4qFmvYr5versionMinorgPAunByrnQGIL2fHU+15umpPkvPOtawVv54wXsfy1OY8sjwrOid1PZwdYrLNoyZNbM6nYVoBtsoD0Nsv9vxM5dkyqaaSzzYqbwBZSjNw2dPpkF4eB/2TBzdNEBbD1WR/eCuMKeYST+QzCbeVVGFFYJZF6GsLSd6DBW/bMW9LMj+DIphtlGG+wfla9LHy5zzK1zzaEg+k5ha0uX6luSC5dJJqDAPOAb8IZM5Rj8XKbPtk54ikkTaOmFxNxlawXYUH1XfjRZxpi+FwPCp2etY77PGsskhteGpuK9LpEAF3PNSdgxiKxjTabNKoHsAYpkrkq0pxmWyTPevufHJQb1H8lBRhh174u3zRM6TtMLY1atifB9Nmh6skmXXu+/U9m6/qutaOOqYQWOL5TGzjJRmCUObmraNZ0PTBWeSjdm4NwGFn0OPC4/gzJw23Oszns+FK8+utSus0GvnkRSeYcTTJtV7OSLNZvWnyel9PotjdZKxdxJPApDdG2j5tyWXbjbwDR2cHnYmaS9vHxZqezKijTiszZg23vt2J4ICYEycgdayR0jvvLsYl8ifwNkA/T4eH8DY/iPeT5cPouZMODXcrgul9WV5AiliV8a1gpH8nMKXENRvWVbUblSwoSVGQ1l7LXSV56WaY4rhmF18Zt7XEkGILXx4cRzcFgeUkkiEpmQRkh+NICkh3lnND8QmiEAaWW/oqedztlvo7QOh3ExSYKG6cwgw6KKn9xWKZr6oSzPH1GwYJ0kPME2mKavMSJQGWJYWWKLUkQMuUyJMi3+YFjq5Vx2E6CSYxsFIUf+CIFPWBI84RdCMXlUSyvE0TfJ0mKU7J0ThlqUc9nYynAGWYasYl2+vSDNsiEtePPFQCJvzQzDz0FDnRNUFEcvulGwZMrlKBFCSZlUhWwDdDR2w/EtviOIom+SsF+Db2z9/uacI6plsqJGWgPMKlRl8wYeoe5ffZYN5n424eZKZb3vQ452nswhuSj59+t1LZQ48+mkv6P4L2D3XH/VD/LPhgmvgc1cObeXLh40Q8HguYa2I28noversionMinorNF4Oj5lp1N2LVGnZFoxNk9QBNkhNAQzTJfOenhAAfEwQfyIqT5Qf/L8kH/El6VOoKX4tPu4oarX5Q+eKRpKymeKgg9E8dM30AeXOG8pKtKvZIKHXzMl4r8+eGAXlnpYPMU/eRibv8versionMajorha13fnCc5XhzA7tclbz0/E1nwBCbdfGIC+P3xr8y8JXzj8JHkh9YUtxNuyxF33+plrPrpWZAGGZBqoi1q+D9PL3iTM8R6v5W+sPMlRm+Uf0i+Zbqr9WRhiebb9Qeuu7/Vm6413aBCO9K3CuWl1qBX63YeWC/m99vAL8c4Swn/22Ef4zk9Q/xn5J3Of18Hl7/BQ==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19E24F0C476894EE0401F0A05992542</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-08-19</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>UserName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E40D520098B5CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E26875D79D093C60E0401F0A05996273</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E40D520099C8CC89E0401F0A079901AE"</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-03</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-08-16</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Get_API" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep.name]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet" mediaType="application/xml" sslKeystore="RET_concat.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

tC.setPropertyValue("ETag", ETag);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseTypeAccountGet}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		//XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requestor is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
                                
          assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
		 int lastColon = urlStr.lastIndexOf(':');
		 int lastSlash = urlStr.lastIndexOf('/');
		 accountid     = urlStr.substring(lastColon + 1);
			                                
		tC.setPropertyValue("ACCID",accountid);
		
		
	} else {
		 assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
		 int lastColon = urlStr.lastIndexOf('%3A');
		 int lastSlash = urlStr.lastIndexOf('/');
		 accountid     = urlStr.substring(lastColon + 3);
		 	                                
		tC.setPropertyValue("ACCID",accountid);
				
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;  -- Comment for cache issue


//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
	log.info "myXML  "+ myXML;
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	else {
		//assert myXML.Account.size() == 1;
		assert myXML.DisplayName.size() == 1;
		assert myXML.Country.size() == 1;
		assert myXML.RightsLockerID.size() == 1;
		assert myXML.ActiveStreamCount == 0;
		assert myXML.AvailableStreams == 12;
		assert myXML.UserList.size() == 1;
		assert myXML.UserList.UserReference.size().toString() > 0;
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.@CreatedBy.size() == 1;
		assert myXML.ResourceStatus.Current.@CreationDate.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;

	     if(context.expand( '${#TestCase#CS}') == 'Y')
	     {
	       assert myXML.ResourceStatus.History.size() == 1;
	     }
	}
} 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return_ETag_to_Calling_TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("ETag",tC.getPropertyValue("ETag"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Account AccountID="urn:dece:accountid:org:dece:E718CE1A238793DAE0401F0A07990C15" xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/versionMajor.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>accname_20130924_075447</DisplayName>
   <Country>US</Country>
   <RightsLockerID>urn:dece:rightslockerid:org:dece:E718CE1A238F93DAE0401F0A07990C15</RightsLockerID>
   <ActiveStreamCount>0</ActiveStreamCount>
   <AvailableStreams>12</AvailableStreams>
   <UserList>
      <UserReference>urn:dece:userid:org:dece:E718CE45D3DBBA21E0401F0A07990C13</UserReference>
   </UserList>
   <ResourceStatus>
      <Current ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-09-24T02:22:51.435Z" CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-09-24T02:22:14.919Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping Account Status to active</Description>
      </Current>
   </ResourceStatus>
</Account>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1126</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02003_AccountDelete_FUNC_CS_Deleting_an_account_when_user_is_not_active_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_CS_P2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130618_082841</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8Hy3D5oaVpGoQVFQ0CG58uYXDsChbGBD019/BRI/JSc6b+1ZZhdP0dD+90PPMIzYDn+0BjFGSelFYlcWn2j+tDrdDXWbX6DI822iyu3aj22LsBsdzrGl3uyzqtmtVGeMMySFOzTB9qrE0wzVovsE2dZrtseTHP7S7tFGrrlCCiWmi8kDXqkXgh7h3cftUy5KwF5nYw73QDBDupbCnAWXaI5o984qp9vz4hvLiMHl20zTuURR8sBBEvg8fYBRQj9QHnUcL9zTPCc00S9C7Tws/1d735nn+kHMPUeJQLE3TFM1TRMfCnvOr9ly5bkaWHNrR27pvhlHoQdP3zmYJSkGpG1lV4DtR4qVu8I1phmLo0nQDFbABmWb4q0b9dnBB90NLH0Am2Gxg12SuxhbIRgkKIaouF/JT7dfPKvi2V0/MENtREuBP6/8GCYVH5Ecxshr4GtkV3c8tfpGu50cEe3II/Qx7RzQr2yQ2IcLVlwTZXjH1MGk+C1cv5a8W+NphCP6XkjxS9zgJbOqLzIieg3D6/9TrvlZvVlamn6Fn6kAFmGH5TZ8xZpOYmik2Fql6bJry0wXCvfIbqFup39efG/XWV++bktYeUzMaj9vCeu0I8WGdz5013u2Col+o8OxmJms4UXODtgtHEsShl26405k5xa9FgdT04M0sNxFmW0nqVvKZeURcILkwaM2m+l5ZD/edsbE6maYGhcPWdbMIr9U0mrfUF5UxlKHEHCZNxdI9bcgrUcc+6XQKp+2hoFTC/snTDH3VwWMI+LkTCfjpd0z3MZRxTdDpEmT5f9OiedFMzduiX04Km3yeKXpWZLlfF/t9gPoOyGUBOLIwPYOZ4Bxe3YM35HNaAOpyAERwUhYgF52tuFLViZRbq5VvrOTBQFAWzXwEtmKFvBClYiUamzFtro14yw5oQxMEa7OIdtw4tkaHfOTCmaIr+UyXT8peKma6RK8vMqcg67OyV5i5vuQq673AKwspF/OLR1HK3ZmxXsTbJZ/Ds6QqoDkEzFLqu8pID1YM5BYu3EtTBRwucsFV+quVUkg6eKkIzmxFYtP7AyOGgRXvAt+9Mz4ixnVruDrthn5mnKW90peGfe11qMk7TlSlMVhsl7versionMajor6mCuB8cKHM3A7urRa3nmJsodo5uL6nY8iQzZPcIZUCVBUAFJFw0UeTgG0VAAShN4xbm/F9pR3xrk1JjFlTrvD9ubk/e6weaQ9k2m22W203X75bUtSmHdmGS7vau4m8G8PtGs45JP+fMWH+vHtukxsIhtdSON0klhj1StsnsRiw0c1S1nTPlnfpAonTFIzifXV5xFum7P8Wnn2fZa2Mybfsf2FW4R274dn3Bdj9RDQrcFxLHU9nScpBXgKAIAw/1yL6iK0C2Tasm5ulUEEwykNAPnPZtO2NXreHT04ZYDUTFZz/eH98JYYi4JVK5KpK2kSlcEVlmEkbaUBnuwFBwnERxpIKhQBOpWnuRbkq/liCh/zuPgkkfytQGJM0CbH1W4Jc2n81RrNsEpFJbhgHeversionMajor2JttQO684qkqTaLm7mCZ3ZorKODEnjJMsm05WQymxY7PRse9mRW2bQ2OXJGRToeYuDNJrp7ECPRfIm32zSuhzCBqRwHilyc5wbed71dQI/rLUZ4oUXYYZfBLl8OTcmYJI7GTEaL8IXr8BWc2adRUN9383Vd19pxx+qHtng6UUayoiMQDfhF69UqWPbgLvNpO7fH4LAz2Vnh88KJlyaGDvOFOllrQb1VaR2n04A+61RzFs9zbZg3JVWtc5agj3QcJ9426zpFMg8tdmum7aNBr9pe7B94NjvozZhbOQEp1svRijvKS0VtbqAROJ0YjqkFdQRSx57Kw9PubJ7jYA7fBujn6XATvs0P6n6yfBg9V9KhkW5FML0uywNIFqsDciqY6d8JTCnxrIZ9Ue3FJQvCKQrT2nO5qyQvvYxQHM/qkSPjbS11mG5farZEThQEwDIS3aSZAQ3oDs/TfYa7spw3FJ8g9qPQ9kpfJY97O6X+DhAGPYxCCyWNY5RBF+HaXyyW+arK4YIcversionMajorGIkR4RnshzXVZiBs0mw3IMC8QBPWhyAt1lum0O8C3CEWdROg/nCbBTlHzkiK0PHHGBoBd7qCSS5WmKyXGKU5KSV/OYpT7zcDQfQpQRqpmUbK/HNrstCntB7KMSMBVEVuajh9iNLwmi8NuTbZgQX6QLSf9H1vqXk/7bED+/u2aD6FheqYDLeAREKoq+ILzMNZjvg+7eB301DzLLKw90kto08eAbko+vfndM2Sq3dimj6mv/MFfcN/Ufb/9zJ/UXUNTnfNwcWUfvzu2VuRMySujK87Wir+bD60N2PGaXGnZKKpYQ8xRD0R1KQzAjfOqkRwcUUjcT1I+o7A31J883+Ud8WeqGWkrGQUA6rnpZ/uAeoyFc3mNk8sUUP70kfXBJ8paiIversionMajorK1vfJdadE/NcbEezBUo+IX8gjjxLrd7m+sHXnh8RZzj8vdMpVSVxP3zQFjIhZj8zAKLk3/pWBr5x/FN6SfMOSkm7aZSn6/k21HG5PNRPCKAtTWaxdBPcD94IzPcWo91vpDzMX6vh+Fyjwt3eBjTLVyOgLzNpN1/vfyg3v0i4QkV3Yu2B5qhXkWkuch87dgH8H+OeMZwDLdTs8J4JPM751S+CHSJ7/EP8pucvp5+/h+V8=</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E718CE1A238793DAE0401F0A07990C15</con:value></con:property><con:property><con:name>ResponseTypeAccountGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E718D0B46E2AB8A7E0401F0A07990C11:A3F6461F"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete_API" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep.name]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="IF-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseTypeAccountDelete}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) 
{
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
     

     
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
/*
//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
	{
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
		 int lastColon = urlStr.lastIndexOf(':');
		 int lastSlash = urlStr.lastIndexOf('/');
		 accountid     = urlStr.substring(lastColon + 1);
			                                
		tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
		
		
	} else {
		 assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
		 int lastColon = urlStr.lastIndexOf('%3A');
		 int lastSlash = urlStr.lastIndexOf('/');
		 accountid     = urlStr.substring(lastColon + 3);
	                         
		tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}
*/
//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E718CE1A238793DAE0401F0A07990C15</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">668</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8Hy3D5oaVpGoQVFQ0CG58uYXDsChbGBD019/BRI/JSc6b+1ZZhdP0dD+90PPMIzYDn+0BjFGSelFYlcWn2j+tDrdDXWbX6DI822iyu3aj22LsBsdzrGl3uyzqtmtVGeMMySFOzTB9qrE0wzVovsE2dZrtseTHP7S7tFGrrlCCiWmi8kDXqkXgh7h3cftUy5KwF5nYw73QDBDupbCnAWXaI5o984qp9vz4hvLiMHl20zTuURR8sBBEvg8fYBRQj9QHnUcL9zTPCc00S9C7Tws/1d735nn+kHMPUeJQLE3TFM1TRMfCnvOr9ly5bkaWHNrR27pvhlHoQdP3zmYJSkGpG1lV4DtR4qVu8I1phmLo0nQDFbABmWb4q0b9dnBB90NLH0Am2Gxg12SuxhbIRgkKIaouF/JT7dfPKvi2V0/MENtREuBP6/8GCYVH5Ecxshr4GtkV3c8tfpGu50cEe3II/Qx7RzQr2yQ2IcLVlwTZXjH1MGk+C1cv5a8W+NphCP6XkjxS9zgJbOqLzIieg3D6/9TrvlZvVlamn6Fn6kAFmGH5TZ8xZpOYmik2Fql6bJry0wXCvfIbqFup39efG/XWV++bktYeUzMaj9vCeu0I8WGdz5013u2Col+o8OxmJms4UXODtgtHEsShl26405k5xa9FgdT04M0sNxFmW0nqVvKZeURcILkwaM2m+l5ZD/edsbE6maYGhcPWdbMIr9U0mrfUF5UxlKHEHCZNxdI9bcgrUcc+6XQKp+2hoFTC/snTDH3VwWMI+LkTCfjpd0z3MZRxTdDpEmT5f9OiedFMzduiX04Km3yeKXpWZLlfF/t9gPoOyGUBOLIwPYOZ4Bxe3YM35HNaAOpyAERwUhYgF52tuFLViZRbq5VvrOTBQFAWzXwEtmKFvBClYiUamzFtro14yw5oQxMEa7OIdtw4tkaHfOTCmaIr+UyXT8peKma6RK8vMqcg67OyV5i5vuQq673AKwspF/OLR1HK3ZmxXsTbJZ/Ds6QqoDkEzFLqu8pID1YM5BYu3EtTBRwucsFV+quVUkg6eKkIzmxFYtP7AyOGgRXvAt+9Mz4ixnVruDrthn5mnKW90peGfe11qMk7TlSlMVhsl7versionMajor6mCuB8cKHM3A7urRa3nmJsodo5uL6nY8iQzZPcIZUCVBUAFJFw0UeTgG0VAAShN4xbm/F9pR3xrk1JjFlTrvD9ubk/e6weaQ9k2m22W203X75bUtSmHdmGS7vau4m8G8PtGs45JP+fMWH+vHtukxsIhtdSON0klhj1StsnsRiw0c1S1nTPlnfpAonTFIzifXV5xFum7P8Wnn2fZa2Mybfsf2FW4R274dn3Bdj9RDQrcFxLHU9nScpBXgKAIAw/1yL6iK0C2Tasm5ulUEEwykNAPnPZtO2NXreHT04ZYDUTFZz/eH98JYYi4JVK5KpK2kSlcEVlmEkbaUBnuwFBwnERxpIKhQBOpWnuRbkq/liCh/zuPgkkfytQGJM0CbH1W4Jc2n81RrNsEpFJbhgHeversionMajor2JttQO684qkqTaLm7mCZ3ZorKODEnjJMsm05WQymxY7PRse9mRW2bQ2OXJGRToeYuDNJrp7ECPRfIm32zSuhzCBqRwHilyc5wbed71dQI/rLUZ4oUXYYZfBLl8OTcmYJI7GTEaL8IXr8BWc2adRUN9383Vd19pxx+qHtng6UUayoiMQDfhF69UqWPbgLvNpO7fH4LAz2Vnh88KJlyaGDvOFOllrQb1VaR2n04A+61RzFs9zbZg3JVWtc5agj3QcJ9426zpFMg8tdmum7aNBr9pe7B94NjvozZhbOQEp1svRijvKS0VtbqAROJ0YjqkFdQRSx57Kw9PubJ7jYA7fBujn6XATvs0P6n6yfBg9V9KhkW5FML0uywNIFqsDciqY6d8JTCnxrIZ9Ue3FJQvCKQrT2nO5qyQvvYxQHM/qkSPjbS11mG5farZEThQEwDIS3aSZAQ3oDs/TfYa7spw3FJ8g9qPQ9kpfJY97O6X+DhAGPYxCCyWNY5RBF+HaXyyW+arK4YIcversionMajorGIkR4RnshzXVZiBs0mw3IMC8QBPWhyAt1lum0O8C3CEWdROg/nCbBTlHzkiK0PHHGBoBd7qCSS5WmKyXGKU5KSV/OYpT7zcDQfQpQRqpmUbK/HNrstCntB7KMSMBVEVuajh9iNLwmi8NuTbZgQX6QLSf9H1vqXk/7bED+/u2aD6FheqYDLeAREKoq+ILzMNZjvg+7eB301DzLLKw90kto08eAbko+vfndM2Sq3dimj6mv/MFfcN/Ufb/9zJ/UXUNTnfNwcWUfvzu2VuRMySujK87Wir+bD60N2PGaXGnZKKpYQ8xRD0R1KQzAjfOqkRwcUUjcT1I+o7A31J883+Ud8WeqGWkrGQUA6rnpZ/uAeoyFc3mNk8sUUP70kfXBJ8paiIversionMajorK1vfJdadE/NcbEezBUo+IX8gjjxLrd7m+sHXnh8RZzj8vdMpVSVxP3zQFjIhZj8zAKLk3/pWBr5x/FN6SfMOSkm7aZSn6/k21HG5PNRPCKAtTWaxdBPcD94IzPcWo91vpDzMX6vh+Fyjwt3eBjTLVyOgLzNpN1/vfyg3v0i4QkV3Yu2B5qhXkWkuch87dgH8H+OeMZwDLdTs8J4JPM751S+CHSJ7/EP8pucvp5+/h+V8=</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02003_AccountDelete_FUNC_CS_Deleting_an_account_when_user_is_not_active_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_CS_P2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E718CE1A238793DAE0401F0A07990C15</con:value></con:property><con:property><con:name>ResponseTypeAccountDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E718D0B46E2AB8A7E0401F0A07990C11:A3F6461F"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_DB_Validations" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("user_oid",null);
tC.setPropertyValue("account_oid",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserUpdate"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_ACCOUNT_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("IsMinor","");

def dbHost = context.expand( '${#Project#targetsystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

def BirthDate = null;
def myXML1 = null;
def finalbday = null;

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

Result = b.userGetRow(userID);

myXML1 = new XmlSlurper().parseText(Result);

log.info "Actual Rows ==  " + myXML1.ResultSet.Row.size();
		
 if(context.expand( '${#TestCase#ResponseType}')=='SUCCESS')
     {
        assert  myXML1.ResultSet.Row.size() == 1;
       	
       // assert myXML1.ResultSet.Row.STATUS == 'pending';
        assert myXML1.ResultSet.Row.PRIVILEGE == context.expand( '${#TestCase#Privilege}' );
        assert myXML1.ResultSet.Row.USERNAME == context.expand( '${#TestCase#UserName}' ) ;
        assert myXML1.ResultSet.Row.GIVEN_NAME == context.expand( '${#TestCase#GivenName}' ) ;
        assert myXML1.ResultSet.Row.SURNAME == context.expand( '${#TestCase#SurName}' ) ;
        assert myXML1.ResultSet.Row.PRIMARY_EMAIL == context.expand( '${#TestCase#PrimaryEmail}' ) ;
        assert myXML1.ResultSet.Row.TELEPHONE == context.expand( '${#TestCase#TelephoneNumber}' ) ;
        assert myXML1.ResultSet.Row.MOBILE_TELEPHONE == context.expand( '${#TestCase#MobileTelephoneNumber}' ) ;

        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#CHILD_DOB_XML}' ))
        {

        	 log.info "I am CHILD";
        	 
           BirthDate = context.expand( '${#Project#CHILD_DOB_XML}' );
           assert myXML1.ResultSet.Row.AGE_CLASS == 'CHILD';

           tC.setPropertyValue("IsMinor","true");
           
         //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
         //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;        
        } 
       
        else
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#YOUTH_DOB_XML}' ))
        {
        	log.info "I am YOUTH";
        	
          BirthDate = context.expand( '${#Project#YOUTH_DOB_XML}' );
          assert myXML1.ResultSet.Row.AGE_CLASS == 'YOUTH';

          tC.setPropertyValue("IsMinor","true");

                    
        //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
        //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;

         } 
        else
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#ADULT_DOB_XML}' ))
        {

        	log.info "I am ADULT";
        	
          BirthDate = context.expand( '${#Project#ADULT_DOB_XML}' );
          
          assert myXML1.ResultSet.Row.AGE_CLASS == 'ADULT';

          tC.setPropertyValue("IsMinor","false");
          
        /* if(context.expand( '${#TestCase#attested}' ) == 'true')
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
          }
          else
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME != 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME != 'null' ;	
          }
          */ 
        } 

          // Retrieving Birth Date in proper format
 /******************************************************************************************************/
          
         bdaystring = myXML1.ResultSet.Row.BIRTH_DATE.toString();

         int lastspace = bdaystring.lastIndexOf(' ');

         finalbday = bdaystring.substring(0,lastspace);
          
         log.info "Birth Day:  " + finalbday;
       
        assert finalbday == BirthDate;

/******************************************************************************************************/

        assert myXML1.ResultSet.Row.COUNTRY == context.expand( '${#Project#GeoProfile}' );

        if(context.expand( '${#TestCase#attested}' ) == 'true')
        {
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_DATE != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ENTY != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ID != null ;
        }  

      log.info "User Validations Passed";
               
   }// end if for success response check
  else
  {
  	assert  myXML1.ResultSet.Row.size() == 0;
  	log.info "No Validation Required";
  }
  

   
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_NODE_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def dbHost = context.expand( '${#Project#targetsystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );
def nodeid =context.expand('${#TestCase#nodeid}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c=  new dbUtils.dbNode(log,dbHost);
//log.info b.accountGetfromNodeAccountId(accID);

String sql = """select to_char(rawtohex(NODE_OID)) NODE_OID from NODE_USER where USER_OID = '$userID'""";

log.info sql;

results = a.SelectFromDB(sql,dbHost);

log.info results;

/*
*  If zero length, no need to continue;
*/
 assert results.length() > 0;

  def myXML = new XmlSlurper().parseText(results);
  
  log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";


if (context.expand( '${#TestCase#ResponseType}' ) == 'SUCCESS')
{
	assert myXML.ResultSet.Row.size() > 0;


	if(nodeid=="dece:cs"|| nodeid=="coord:cs" || nodeid=="portal" || nodeid=="portal:cs")
     {  
       assert myXML.ResultSet.Row.size() == 4;  
       //assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 
       log.info "DECE Node User Validation Passed";     
     }
     else
     { 
       assert myXML.ResultSet.Row.size() == 5;
      // assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' );    
      // assert myXML.ResultSet.Row[1].NODE_OID == "10"; 
       log.info "3rd Party Node User Validation Passed";    
     }
	
}
else
{
	assert myXML.ResultSet.Row.size() == 0;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_LEGAL_GUARDIAN_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if(context.expand( '${#TestCase#IsMinor}' )=="true")
{
def dbHost = context.expand( '${#Project#targetsystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

  a = new dbUtils.dbUtils(log,dbHost);
  b = new dbUtils.dbUser(log,dbHost);

  String sql = """select ATTESTATION_STATUS from USER_LEGAL_GUARDIAN where USER_OID ='$userID'""";
  results = a.SelectFromDB(sql,dbHost);

  /*
  *  If zero length, no need to continue;
  */
   assert results.length() > 0;

   def myXML = new XmlSlurper().parseText(results);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;
	
   assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  

   log.info "Legal Guardian Validation Passed";	
}
else
{
	log.info "No Legal Guardian Validation Required";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_Policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if(context.expand( '${#TestCase#IsMinor}' )=="true")
{
def dbHost = context.expand( '${#Project#targetsystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

  a = new dbUtils.dbUtils(log,dbHost);
  b = new dbUtils.dbUser(log,dbHost);

  String sql = """select POLICY_CLASS,STATUS from POLICY P, POLICY_RELATIONSHIP PR where PR.POLICY_ACTOR = '"""+b.userGetfromNodeUserId(userID)+"""'
  and P.POLICY_OID = PR.POLICY_OID""";

  results = a.SelectFromDB(sql,dbHost);

  /*
  *  If zero length, no need to continue;
  */
   assert results.length() > 0;

   def myXML = new XmlSlurper().parseText(results);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;
	
   assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  

   log.info "Legal Guardian Validation Passed";	
}
else
{
	log.info "No Legal Guardian Validation Required";
}
</script></con:config></con:testStep><con:properties><con:property><con:name>IsMinor</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00004_UserUpdate_FUNC_CLG_Update_CHILD_DOB_TO_YOUTH_AGE</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_GeoProfile</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>Username</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>DOB_NOT_EDITABLE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE3CF68DF2A8CD783E0401F0A07994C97</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E3CF68DF2A8CD783E0401F0A07994C97</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid1</con:name><con:value>E2A349A2ABBCCB1DE0401F0A059926E1</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E3CF68DF2A8DD783E0401F0A07994C97</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E3CF692D5BE44697E0401F0A05993AD3</con:value></con:property><con:property><con:name>attested</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate API" searchProperties="true" id="f9b07efa-7b7b-4570-8d58-d73ad89ef9aa" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("user_oid1",null);
tC.setPropertyValue("account_oid",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("ResponseType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid1",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");             
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#Request_XML}</con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Copy of User_Create" disabled="true"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/List" methodName="UserList" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Copy of User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}"
	xmlns="${#TestCase#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/md"
	xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
def primaryEmail = context.expand( '${#TestCase#PrimaryEmail}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/

if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
		expectHTTPconnection = "close";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
		expectHTTPconnection = "close";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
		expectHTTPconnection = "close";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
		errorReason = "First User must be 18 years or older";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first user in a household account must be a full-access user.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;

	case "INVALID_PASSWORD":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The password is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid. - " + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
		expectHTTPconnection = "close";
	break;
	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);


// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info errorLink;
		log.info myXML.Error.ErrorLink.toString()
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {  	
  		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                 String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                 String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName").toLowerCase())
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                 tC.setPropertyValue("ACCOUNT_OID", a);
		                }
		          catch(Throwable e) {
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		     		     }
				}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the Username and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL1"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("user_oid1",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Account_Create_Firsrt_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>UserName</con:name><con:value>account_firstuser_legacy20141231_1420015984014</con:value></con:property><con:property><con:name>GivenName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SurName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1996-01-05</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>account_oid</con:name><con:value>0B8034C9B1F90E01E05307991F0AAE38</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/User/urn:dece:userid:org:dece:0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1996-01-05</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>0B8034E5B7335FEFE05305991F0A7CC1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6afcd2ee-d125-48d3-86d9-0b8f90dcad31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate API" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);

tC.setPropertyValue("Country",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");

//def request_XML_Buffer = context.expand( '${#Project#Request_XML_Buffer}' )

//tP.setPropertyValue("Request_XML",request_XML_Buffer);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));


tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
	{
		tP.setPropertyValue("GeoProfile","US");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="CA")
	{
		tP.setPropertyValue("GeoProfile","CA");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="GB")
	{
		tP.setPropertyValue("GeoProfile","GB");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AU")
	{
		tP.setPropertyValue("GeoProfile","AU");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="NZ")
	{
		tP.setPropertyValue("GeoProfile","NZ");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="IE")
	{
		tP.setPropertyValue("GeoProfile","IE");             
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AT")
	{
		tP.setPropertyValue("GeoProfile","AT");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="DE")
	{
		tP.setPropertyValue("GeoProfile","DE");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="CH")
	{
		tP.setPropertyValue("GeoProfile","CH");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="FR")
	{
		tP.setPropertyValue("GeoProfile","FR");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("CHILD_MAX_AGE","17");
	}


	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
		log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("MeetsAgeOfMajority","true");
	break;

	case "YOUTH":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
		log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("MeetsAgeOfMajority","false");
	break;

	case "CHILD":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
		log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("MeetsAgeOfMajority","false");
	break;

	default:
		log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/List" methodName="UserList" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#Request_XML}
</con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Test Case Name with Expected Result" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def httpStatus = context.expand( '${#TestCase#httpStatus}' )

logFile.append("${callTCname}"+"\t"+"$httpStatus" +"\n");</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

          case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                //String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 //assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                //tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="restrequest" name="Copy of User_Create" disabled="true"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/List" methodName="UserList" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Copy of User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
<!--	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>-->
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_API</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>UserName</con:name><con:value>AcountDelete_20130923_1379939800875</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>AcountDelete_20130923_1379939800875</con:value></con:property><con:property><con:name>SurName</con:name><con:value>AcountDelete_20130923_1379939800875</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>raju.alluri@compugain.com</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-09-28</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E70D36CAD3BD439CE0401F0A05992C2E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E70D36CAD3BD439CE0401F0A05992C2E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E70D36CAD204439CE0401F0A05992C2E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E70D36CAD204439CE0401F0A05992C2E</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E70D36CAD204439CE0401F0A05992C2E/User/urn:dece:userid:org:dece:E70D36CAD3BD439CE0401F0A05992C2E</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuq6En3nKyj2I0UsDwymklTJA2DAjGZ8OWVseQBPWDY2fP2RSWCT7GTfnPsEarW6Vw9uLT1j3feYNsQYxYkbBmVFeqn80zJQE7BNUANNYNY41AI13WruavQOcQ2Gr1uggSplBeMUKQFO9CB5qTCAZmuArzGsRjNtlm1zzSfA1LeV8hLFmJgmKk+gUs59L8Dtq9uXShoH7VDHLm4Huo9wOzHac6gO20Szrd8wVV6f31BeHcavTpJEbYoynkxkIM8znozQp56pDzrPJm7PXTvQkzRG7z5N/FJ5P5tl2VPGPoWxTTEAAArwFNExsWv/qryWboeRqQRW+LYW9SAMXEP33ItegFJR4oRmGXp2GLuJ439jmqZoUJiuodyoGTQX/KpQvx1c0f3Q0geQMdZr2NHpm7EZslCMAgOVFzPlpfLrZxV8O6vFeoCtMPbxp/V/g4SCE/LCCJk1fIvshu7nFr9I1+szMtpKYHgpdk9oVLRJpBsIlycxstx86GLSfCYuX8tfzvGtw5DxX0ryTD3iJLCpLzIjuTbCyf9Tr8davVlZ6l6KXqVloxG0sp4HepdxsN90mMVOGzHBZIxfrhAeld9A3Uv9vv7cqPe+ej/kxABoB2PNcskgcAeqZVSFYbr1Y//gL9RE8xaKNq7uclZGg85qk8aXRQck57TugWY9pV0WzNbTqdBsjI9saWKjCM9Pp8FZUsTDEGfm4WCzvpclYWRieQuX3CYOVuMDN+gwkynGeZ+2TVYQVkN/3TKrYyrEwLSyM+86JRQvGRAlIt0dOb2JKdXB9OV3TI8xFHEN0PkaZPF/XQe8pCf6fSEWk8Iin2eCXlVFEauSKEIk2jBTBGgrwvACR4J9ODoHt8tnQIDTRQdK8KzOYCbZG2k5nQ7kzFwuve1S6XQEdcZlPbiRSmRDkvOltF33gb7aRhumA7ZzQTDXs3DH9iOzd8h6jjFSNTUbacpZ3cv5SJPB6iqzc7K+qHuVHmsLtrTaC7w6kzMpu3qU5MwZbVezaLPgM+MiT1XIdSG9kEVH7Wn+kjbYmWPs5aEKD1e54KjicqnmsgYnJcEeLUlsmtjZRoZvRjvfcx6M94hxzewuz7uul24v8l4V5a44P3bnyo6VpnIfzjaL3Wp50FedU8nojeDu5tGtu/o6zOxtK5Omm/4g3CrOyRjBqSwIU0jSBaCqdPsw7ApQ5aCbX8S90AhFs5NRfQaXqrzXbazP7nGN9S7wdLrVojfDVWNybEhyUN0O0t3eUZ11Z1wdzM3Tgk/4ywafqqeG7tJGHlnTtdxLBrnVm85Lu4mUr41e1bT7lHfhO7Ha7MP4cnY81Z4lq8YYn3euZa2E9ZjzmpansrPI8qzojKtaOD3EoCEglqE259MgKUFbFSDs7hd7YaoKrSKpppJNN6qgw46cpPCyZ5IBszz2eyfP2LAwzAer8f7wXhhTymSByqYyaSu51JKgWRShN1/InT1cCLYdC7bcEaaGBKcbZZBtSL4WPaL8OY+dax5tWYAyu4UNvldiF4BPxsmc4+A5EBZBh3fUY74yGz5oHpE8nI8iLlPxyAq2q/Cg+m68iNP5YjAYDfOdlnYPezKrLDAfnNhtST4dIuiOBppzkEJJn0SbTRJVAyM2EiXyVSW/jLd433J3PuhX67QwAZLRZBb+Llt0dXk7iO05PejNggnb5Es4tc49v7pvZauqNm9ETVMMLOl8prbxEoQw7PCz+tHMGebgLLJhI7P68LDTmVHu8cKZlwdbzchm08Fq7lfrpfppOPTBRaO4UTTO5t2Mk6fTKmsKWk/DUexu0padx+PAZDZ60jhtwbLhRt6BZ9KDxkXs0vZJsSYnM2qqk9KUWxtb325GRp+aUScoN62h0j3vLvol8sfG2wD9PB3uwrf5QT1Olg+j50Y65qRbkZHclsUFpEjlDrkV9OTvBKaQuGbNuqq2o4IF4QQFSeW1OFWQl3ZKKI5rtsmV8baWm0BiYatOy806B2VOBhygOwCCOs8zIsvcWM4bik8QxTCw3MJXwePebqm/AzT8NkaBieLaKUwNB+HKXywW+SorwYxcversionMinorGAkRYSntgAHSBxdbEu0bBBM4CXCVpOFjqiTLdkBlbKozAZB+MYWgmKP3LE+geOOEOGG7moIJLFbYrJdYoTkpKjfkoTj3466U8BSgnVjAu212a4Vp3Crh95qABM+aGZeugpcqJrgij89svUdANfpTNZ+0eZi9eb/tsQP+/dskF0TLdQwEU8AiIVRV8QXvYWzPdBtx6DvpmHqekWFzpJbRK7xhuSj1u/O6ZolXu7FFGJ83/oG+67+o+P/3mS+gso6nM+7o7Mk/vg9sbcCRkldOX1VtGj/nR8Sk+n9FrDZkHFYmKeoinQpObISAmfOmvhAQXU3QT1Iyp7R/3J813+EV+aOME8IePAJx1Xvi5/8I6ZI1y8YxTyxeQ/fSR9cEnylqA8+UomeuS5UyD+64vIaBuFHhFPyE8Wxubvcn1h68EPibOYf25gF6uCuJ6/aQojJGZdMgPD+NH4Vwa+cv5ReE/yHUtCummXJuj7nXIx3F4qumGEaZAoUuUqeBy4V5zJOULt30p/mLlSx/e3QI6/fQus1eGcjD5fr9x13f+tXHOv7WKQVzDRversionMinorJ5qeTkWUucB/bDgH8H+MeMb4hQYgDHsbz4ccYz8j2BHyJ5/UP8p+Qhp5+/h9d/AQ==</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E62A7D81AB87588DE0401F0A07997D69</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-28</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E70D36CAD3BE439CE0401F0A05992C2E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f23d9bb0-0bd1-4723-928b-a9c1d99c147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Child_UserCreate API" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
	{
		tP.setPropertyValue("GeoProfile","US");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="CA")
	{
		tP.setPropertyValue("GeoProfile","CA");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="GB")
	{
		tP.setPropertyValue("GeoProfile","GB");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AU")
	{
		tP.setPropertyValue("GeoProfile","AU");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="NZ")
	{
		tP.setPropertyValue("GeoProfile","NZ");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="IE")
	{
		tP.setPropertyValue("GeoProfile","IE");             
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AT")
	{
		tP.setPropertyValue("GeoProfile","AT");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="DE")
	{
		tP.setPropertyValue("GeoProfile","DE");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="CH")
	{
		tP.setPropertyValue("GeoProfile","CH");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="FR")
	{
		tP.setPropertyValue("GeoProfile","FR");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("CHILD_MAX_AGE","17");
	}


	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
		log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
		log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
		log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "AdultPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "ADULTMinus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHPlus":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob); 
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHMinus":   	
	   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("CHILD_DOB_XML",dob); 
	break;

	case "ADULTToday":	 
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "YOUTHToday":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob); 
	break;

	default:
		log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/List" methodName="UserList" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

          case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));

//callTC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
//callTC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL2"));
//callTC.setPropertyValue("UserName2",tC.getPropertyValue("UserName"));
//callTC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E5A158E8FAED7930E0401F0A0599188B</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E5A158BFEF210675E0401F0A07992D42/User/urn:dece:userid:org:dece:E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5A158BFEF210675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E5A158BFEF210675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E5A158E8FAED7930E0401F0A0599188B</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E56665ABC808DB00E0401F0A07993371</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>raju.alluri@compugain.com</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773versionMajorieS8uwimIlqRo2RcUNXG/eQhgQZZMBQX/9O5joMTnJ+fJ+VzpNT/fTy/Q884zMwKc7ACGYpF4UVlXppfaPzbEm6fBcg7J4ssG2zHbD5KxWw3Z4ewsZyLCkWauqCGVQDVFqhulLjSYppkHyDbJpUGSHbnVY+qnNUJtadQEThE1jlSeyVi0CP0Sdq9uXWpaEnchEHuqEZgBRJ7U6OtCGHazZMW+Yaq/PbyivDpPXXZrGHYKwnmxoQd+3nqwoIJ6JDzrPNuronhuaaZbAd582eqm9783z/ClnnqLEJWiSJAmSJ7COjTz3V+21ctsMbTV0ore1aIZR6Fmm713MEpQG011kV4HvRomX7oJvTFMERZamG7CwGhbFhr9qxG8HV3Q/tPQBZILMBtqZ1M3YDDowgaEFq/OZ+lL79bMKvu01EjNETpQE6NP6v0GC4Qn6UQztBrpFdkP3c4tfpOversionMajorGVodNbT8DHknOCrbJDYtiKqTBDpeMfQQbj4bVa/lrxbo1mHQ+i8leSYecWLYxBeZkTwXovT/qddjrd6sLEw/g6+9aBnyXBOJdA5WS4WZ5mRkMmvZmoCXK4RH5TdQ91K/rz836r2v3jelTLaeDODZ5PuTurmwHGFJ6kVr7K72MfDycW+w34otwXDEqaxd6sJx6abSQWW7vRXX22ah4BVrsIhHg6Z+rHDk7MBdLnSyTVYtokeiJiGcJmOZmJi9ppRPt8wyWpK+fbRnI0XhocHQJuuPE9frOoIi7JpFN3VITmVT1qksjIw6ToJYHC0WxbgvG+vo5XdMjzGUceEQrkGW/1dNkpfM1LwvxHJSOPh4pvBVU1WxLokigKILclUArioML2AkuIfj7uB1+ZwUwHSuAAmctRnIJXctLabTgZzbi4W/WaiKImgzNu+BtVTBHyS5WEibVZ80l5t4TSvkRhcEezWLtkw/tnuHvLezRpqh5SNDPWt7uRgZMrm8ytwCry/aXqPGxpypLPcCr83kXMqvHiU53402y1m8nvO5dZGnGmC7gJrL4k7rGcGCspjZztrLQw0crnJhp4mLhVbIBphUBHe0wLEZorKJrcCOt4G/ezDew8YNu7s4b7t+trnIe02Uu6J+7OrqlpGmch/M1vPtcnEwl8qpYvVGYHvz6DU9cxXl7qadS9N1fxBt1N3JGoGpLAhTgNNFAk3t9kHUFYDGAq+4iHuBi0RbyYk+jSp13u9yq7N3XCGzS/om1W5T6+GSmxw5SQ7rm0G23e+03UoZ1we6fZrzKX9Zo1P9xJkeZRWxM13JvXRQOL2pXtlOpGJl9eq22yf8C68kWqsPkst552vuLF1yY3Teeo6zFFZj1m85vsbMYsd34jOqG9H0kJCcABmaWJ9Pg7QCXE0AoLuf74WpJrTLpNpqPl1rggkUOc3AZU+nA3px7PdOvrVmQFQMluP94b0wtpTLApFPZdxWcqUtAbssQk+fy8oezAXXTQRXVoSpJYHpWh3ka5yveQ8rf86jcs2jKwtAZjaA43sVZk7y6TjVWRacQ2EeKvxOOxZLmwvI1hHKQ30Us7mGRk64WUYHLfCSeZLp88FgNCy2RtY97PGsckh9cGI2Ffl0wEd7NDB2BymSzEm8XqdxPbQSK1XjQFOLy3iD9m1vG5D9epMSJqRkteh5sM3nXVPeDBJXpwa9WThhWnwFZc65F9T37XxZN3Qubtli6EjnM7FJFmQEIoWfNY92QdOH3TwfcrnTB4etSY8KnxfOvDzYGFY+mw6WelBvVpqn4TAgLwbBjuJxrndzVp5O64wtGD0DxYm3ztpukYxDm16bKXfakAvOi/0DT2cHg42ZhRvgYk1OdtzSJpUpu7I2gduKrT4xI05AbjlDtXveXsxLHIyttwH6eTrchW/zg3icLB9Gz4106LhboZXeluUFpEpVBd8KZvp3AlNKPLvhXFU7ccmCUArDtPZa7irJSyfDFMezO/jKeFvLTUA123JbAbLU4hlSJlmSUkhANnkeHyPhxnLeUHyCKEah45W+Sh73dkv9HaAVdBAMbZg0TlFm7SCq/cVima+qGs7w9RuFCBoR5om0QMlNrimxLKU0KRKILaUNRJ5TpCYvkKxSq46idByOE+CkMPnIEZkPHHEGLS/2YEkky9sU4esUpTglR/OUpT71dDKfQphhqpmUbK9Ds+0mgbwg9mEJmAgiO/PhU7yLrwki0Nsv3TAtdJXOZOMfVRevN/23IX7+dssG1rG9UgGV8QgQVxR+QXiZWzDfB809Bn0zDzLbKy90nNo08aw3JB8//e6YslXu7VJGJer/UDfcd/Ufb/9zJ/EXUMTnfNwd2Sfvwe2NuWMyiunK662iR/Pp+JSdTtm1hq2SiiXYPEERZIvQoZVhPnU2ogMMibsJ4kdU9o76k+e7/CO+LN2FeorHQYA7rnpd/uAdo0NUvmNUfGKKnz6SPrjEeUthkX4lE3383CkR//VFZHWsUg+LJ/gnjxL7d7m+sPXgB8dZzj8vdMtVSVzP3zSFFWGzHp6BUfJo/CsDXzn/KLwn+Y4lxd20zVL4/ZdqOdxeaqZlRVmYqlLtKngcuFec6TmGnd9Kf5i5Usf3t0CBvn0LrLShjkdfYNbuut7/Vm5413axIN6FvCuWl1qBn7XYeeg+DPh3gH/OeEGRFZoiuVbzPuNbPE9LLH1P4IdIXv8Q/yl5yOnn8/D6Lw==</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_GeoProfile</con:value></con:property><con:property><con:name>StandardUserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00033_UserCreate_AUTH_Creator_ADULT_Full_New_CHILD_Standard_201_CREATED_P1</con:value></con:property><con:property><con:name>UC_RequestBody_Mandatory</con:name><con:value/></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5A158BFF59D0675E0401F0A07992D42</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f23d9bb0-0bd1-4723-928b-a9c1d99c147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("UserGetResponseType"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGET"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/List" methodName="UserList" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGET" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGET');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_14015 - STSCreate - Portal:CS - unamepasswd - User created by node RTL - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>4_STS Create - Node Role - CREATED_BY_NODE_OID</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC2F5A7DCFDE454AE0401F0A0799394E</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserStatusUpdate API" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserResourceStatusUpdate"><con:settings/><con:config service="UserResourceStatusUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" methodName="UserResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.15. User Status Changed through Resource Update: User Locked [Your UltraViolet membership has been locked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>859</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/versionMajor.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:InvocationPathHasNonEncodedParameters">
      <Reason Language="en">The parameters in the invocation path must be escape-encoded.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DF7C3C9C94E2F31EE0401F0A07992917/User/urn:dece:userid:org:dece:DF7C3E49DCFC8E50E0401F0A05995F38/ResourceStatus/Current/Update</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#InvocationPathHasNonEncodedParameters</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773versionMajorieS8sAgihWkqphU1TcwPXmLRwGRNlk11//DiZ6TE5yvrxf5cJM09P99DI9zzzHhuc2uyCOUZQ4gV9VxJfaPxzTJBkWNRt00zIbDLczG0aT6uBlh2pRBkVZDFerKnGcIsWPE8NPXmpNkqIbJNugOJ1sdelOl+k8sSyzrVWXKIqxaazyRNaqhef6cffq9qWWRn43MGIn7vqGh+JuArsaUEddrNk1bphqr89vKK8Oo9d9koRdgoBPJoLIdeETDDzimfig82zGXc2xfSNJI/Tu04xfau978zx/yumnILKJJkmSBMkRWMeMHftX7bVy24xMxbeCt7Vg+IHvQMN1LkYJSkXJPjCrwLWDyEn23jemKYIiS9MNVMAGpBj/V4347eCK7oeWPoCMYqMR7w3qZmyOLBQhH6LqYq681H79rIJve/XI8GMriLz40/q/QUJ+htwgRGYjvkversionMinorQ/dzi1+k6/UZwa7iQzeNnQyNyzYJDYji6jRCllOMnBg3nxlXr+WvFvGtwxD8LyV5Jh5xYtjEF5kRHRvFyf9Tr8davVlZGm6KXgGVdJC/9rRR1qunMuNpHH8O80vnQL5cITwqv4G6l/p9/blR7331vmkizeSkl02UHWImJKhPLrBlSqucXmx1rW+QuUJL9mAEt9qw3TZMYw6glp6QSazSvdXL8mBdEELCd5RLqFdcuJ0o7eKkjdzW+UgeXd8VNDSVpuqRS0HeonkhPE5mobsMZcsMBQseTO7ILkfncM+yxakN/Nhklwf2rO8qy0l4CS7H1B4yUXDOaWO9efkd02MMZVxDdL4GWf6/bpGcaCTGfSGUk8LCxzNBr6qiCHVREAASbJArPLAVfnQBY94+nvZHp8flJA9mCxmI4KzOQS7aG3E5mw2l3Fwu3e1SkWVenTN5H2zECv4gSsVS3K4HpLHahpumTG41njfX82BHD0Kzf8z7ezhWdTUf68pZPUjFWJfI1VVmF3h9UQ8qNdEXdGversionMajor4Dl1LuVifvUoSvl+vF3Nw82Cy+FFmqmA6QFqIQl7ta97SwrS8z08SCMVHK9yfq8Ky6VaSDqYVnh7vMSx6YK8DaFnhjvP3T8Y72Pjutlbnnc9N91epIMqSD1BO/U0ZUeLM2kA5pvFbrU8Gis5q8D+GOxuHp2WY6yD3N52cnG2GQyDrbLP4BjMJJ6fAZwuEqhKbwCCHg9UBjjFRTjwbCCYck4MmnGlzrk9dn12TuvY6JGuQXU61Ga0YqcnVpT8+naY7g57db+WJ/WhZmYLLuEumzirZ6zhULAIrdla6ifDwurPtMpuKhZr2K+b9oBwL5wcqe0BiC7nvava82TFTuLzzrGsFb+eMG7bclV6HlquFZ7juh7MjhHJ8ohuEptzNkwqwFZ5AHqHxYGfqXynTKqp5LONyhtAlpIUXA7NZNhcngb9zIUbGgTFcDU5HN8LY4q5xBP5TMJtJVU6IjDLIvS1hSQfwIK37Yi3JZmfQRHMNsow3+B8LfpY+XMe5WsebYkHEr0FLNev0AuSSyaJxjDg7PMLX+b26qlYmaxHtk9IGmnjkMnVeGz521VwVD0nWkSpthgOx6Nip6e94wHPKovUhhm9rUjZMQTOeKjvj2IgGtNws0nCug8jmCihpyrFZbKNDx1n55GDeovip6QI282Ft8sXPUPaDiNbo4b9uT+l21wlTq1z36sfOvmqrmts2DYF3xLPZ2IbLckABDI3b53Motk87hf5iM2tATjujOa4cPEo46ThVof5fDZcaV69VWllo5FHXnSCGYeTXOvljDSb1WmT1/t6HEbOJu3YRTTxzebGSNhsSy5ZJ3SPXDM96kxIL20PF2uamWFbnVZmzBpuPbsdwgExJzIgta2R0jvvLsYl9CbwbYB+ng534dv8IB4ny4fRcyMdGu5WBJPbsryAFLEq41vBSP5OYEqJYzasq2o3LFlQnCA/qb2Wu0ry0k0xxXHMLr4y3tai3BZoieFEQRY6UouUSIakZBKQLY5ryXTnxnLeUHyCKAS+5ZS+Sh73dkv9HSD0ujHyTRQ1siCFexTX/mKxzFdV8ef4+g38GOkB5okMIGmB4QX8x9ACxTG8SLdFSQJcu0UJfKdWHQfJxJ9EwEpQ9JEjdj5wxDmCTuigkkiWt2mMr9M4wSk5GVmauNRTZjz5KMVUMyrZXrfJdFpE7Hihi0rAhBeYqYuewn14TRARv/02GwaMr1KBFCS5I5EdAd8MbZF9TCzVJPkrBfg29s/fbmnCOqZTKsRloDzCpUZfMGH6FuW32aCox2zczIPUdMqbHuc8iRz4huTjp9+tVPbQvY/mkv6PoP1D3XDf1T8LPpgmPkd192ZmDryfiPtjAXNNzEZebwU7GU+npzTL0muJ2iXTirB5giJIltAQTDFdOuvBEfnE3QTxI6Z6R/3J813+EV+a7H0twafdww1VvS5/8EzRUFw+UxR8IIqfvoE+uMR5S1CRfCUTXPyaKRH/9cEDu7DUw+Ip/smDyPxdri9sPfjBcZbjzfHtclXy0vM3nQEDbNbBIy6IHo1/ZeAr5x+F9yTfsSS4m3Zpgr7/Ui1n10vNgDBI/UQRa1fB4zy94kzOIer+VvrDzJUZvlP9Iv6W6q/VkYYnm2fU7rrO/1ZuONd2gQjvip0rlpdagV+t2LlvP8zvd4B/jHCBEzhGaso0Jd0nTZvjmhzVvifwQySvf4j/lDzk9PN5eP0X</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>status</con:name><con:value>blocked</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_API" searchProperties="true" id="86a1701f-d872-46bc-b0b9-e40bf4895fcf"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserDelete"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));

			</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserDelete"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/List" methodName="UserList" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserDelete" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="iscportalcs1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserDelete');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

     
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00038_UserDelete_FUNC_CS_Basic_Delete_Full_200_OK_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_Access_Portal_CS</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuKwEn3nKyjmkSJeWE0lqZKxAQNmNWZ5uWXL8gLesLzB11+ZBIZkktyZ+wRqtbpPL24dPWPNc9kuwBhFsRP4ZUl4qfxHayAGma12zaxzrVpDb8OaxtB0jWUbjQ5rNHUacZWyhHGCJB/Hmh+/VFiaqdfoTq1OK0yzSze6jfZTk6nvK2UVRZiYJipPdKWce66Pu1e3L5Uk8ruBhh3c9TUP4W4MuysgT7pEs6vdMFVen99QXh1Gr3Ych12Kgk8Ggsh14RMMPOqZ+qDzbODuyrF8LU4i9O7TwC+V97NZlj1l9acgsiiWpmmK5iiiY2DH+lV5Ld0OI0PyzeBt3dP8wHeg5joXrQAlo9gOjDJwrSByYtv7xjRDMXRhuoZyWINMw/9VoX47uKL7S0sfQEZYq2FbY27GlshEEfIhKq+X0kvl199V8O2sEmk+NoPIw5/W/wYJ+SlygxAZNXyL7Ibu7y1+ka7XZwS7kg/dBDspmhZtEmoQ4fI8QqaTTxxMms/A5Wv5yzm+dRiC/1KSZ+oRJ4FNfZEZwbEQjv+fej3W6s2KqrkJepWEBoh30Shbrl3BZXvBJXHtbYszUvHlCuFR+Q3UvdTv68+Neu+r90OeNpqxh0Yk0+vTBaRC3qZb4vYy7Z3jppUtzXSnDC9KNKRp4DGx2dJ4H4NeXtUddY7tZbOz1GldZGbROgtKftuFVLJi1J3hd7KlFftULGJlLmRjdeSlcypdu6YOdFk94tPcdFuD0QE01aFqr0cLQ+3wlDHZSKLevjBa6aLXtzMPDcLzfLCo273+QX75HdNjDEVcY3S+Bln83zZpTtBi7b7oFZPCJJ9njF5lSepVhV4PoJ4FMokHlsRPLmDKW8eTfXQGXEbzYLHuAwGc5SXIBGsnqIvFWMwMVXX3qtTv8/KykQ3BTiiRDUHMVWG/HdHaZh/u2D69X/G8sV0Gen0UGsNjNrThVFbkbKpIZ/kg5lNFpDdXmZWT9UU+yMxMWddLmwPPyUsxE7KrR0HM7Ol+swx3ay6DF3Ehg8YAMGuxZ8tDxVMZWF/a8CBOZHC8ynlb7qmqnIsKmJd4a6qS2JRefx9Czwh1z7UfjA+JccUYqGd94Cb7i3iQe+KgtzoNVpJeFxbiCCx3a32jHrVNPy3B4RToN49O09G2QWbtO5mw2I3GwV6yUzgFC5HnF4CkiwayNBiBYMADuQGc/NI78K2gZ/QzasTiUpVzB63t2TltsTagXY3pdJjdZNOan1qC6Ff340Q/2LK97c+q45WRrrmYu+xwWk1bmsPAPDQXW3EYj3NzuFiV9LmQb+Gwalgjyr1w/Uhuj0B0OduubC3jTWuGz7pjmht+O2u4bdOV68vQdM3wjKtKsDhGdItHdZbandNxXAKWzAMwOKwP/ELmO0VSDSlb7GReA30xTsDlwMZjVj2NhqkLd3UQ5OPN7HB8L4whZCJPZQuRtJVY6gjAKIowXK3F/gGsecuKeEvs8wsogMVOGmc7kq/1kCh/zmP/mkdL5IFY34MWNyzversionMajorzQXz+JVowHOPr/2+5wtn/KN0fLo9gmJk9U0bGQynpr+fhMcZc+J1lGyWo/H00muK8ngeCCzyqRX47S+L4npMQTOdKzYRyEQtHm428Vh1YcRjKXQk6X8MtvjQ8fRPXpUbTL8nBZgm117erYeaOJ+HFkrZjxc+vN6myvhxDwPveqhk22qyqoVto2ebwrnM7WPVDoAQZ9bNk9GzrJHe51NWpk5AkddY6e5y/FnThzvFZgtF+PNyqs2S810MvHoi0I1puEsWw2yhrhYVOsGrwwVHEbOLulYeTTzDXanxa10T6stJ3SPHJsclUZYVy2PFGueGmFbnpcWjS3ce1Y7hCNqSaVAbJsTaXDWL9ol9GbwbYB+ng534dv8oB4ny4fRcyMdK9KtCMa3ZXEBSUK5T24FLf6ZwBQSx6iZV9VuWLAgHCM/rrwWpwry0k0IxXGMLrky3tZik+21ebbZEZheu9Xqi3SDZvo0oNsc16AF/sZy3lB8gtgLfNMpfBU87u2W+hkg9LoY+QaKammQQBvhyg8Wi3yVJX9Jrt/Ax0gJCE9s8y2mL/ZpWmgQzPUOx3Edsd/ptwWmwzc7oFKeBvHMn0XAjFH0kSN2PnDEJYJO6KCCSBa3KSbXKY5JSk5amsQu85RqTz5KCNWMCrbXZRudJoUdL3RRAZjyAiNx0VNoh9cEUfjtl61pEF+lDoZhEMWay1wv+2+j/Lx3SwjRMZxCARch8YgUFX3Beeu3eL6Nm2Ue476ZB4nhFHc6yW4cOfANycet301TdMu9Y+6BQczcsN+P/KOJLwxQP+CjPqfm7s9InQfvNx5PqCkhL6+3+p60p9NTkqbJtaLtgphFxDzFUHSbWiGYEHZ1VoIj8qm7CeqviO0d9SfPd/lHfEls+6uYDAeP9F/5uvyLV80K4eJVI5HvJ//bJ9MHlyRvMcrjr2Q9lzx+CsQ/vo9gFxZ6RDwnP1kQGb/L9YWtBz8kzmIaOr5VrAoae/6mN2BAzDpkIgbRo/GvDHzl/KPwnuQ7lph0k57E6PudcjHqXioahEHix5JQuQoex+8VZ3wOUfe30h9mrkTy/WWQ429fBlt5siKD0NMqd13nfyvXnGu7QEROYeeK5aWSk0cuce5bD+P+HeCXE59udn6a+B8jef1D/KfkIaefv4fX/wI=</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/iscportalcs1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF8026914382E445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF802691433EE445E0401F0A05996AFB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E52C7B2598AE766FE0401F0A079940DB:4917B200"</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FullUserUpdate API" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate"><con:settings/><con:config service="AddNewUser" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="AddUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.21. User Email Address Changed by Another User [Your UltraViolet email address has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773versionMajorieS8uwiAtWkqpBUFHRgLjevIXDgCibDJv++nfQ6DE5yfnyflc6PT3dTy/0PPOMDc9lOwBjFMVO4Jdl8aXyT7PFcg2Th7WGVedqnNFu1Np0m6+xvGnVG3R7uzWYSlnGOEGyj2PDj18qLM3Ua3SzxvA6U+806E69+USz3KZSXqAIE9NE5YmulHPP9XHn4valkkR+JzCwgzu+4SHciWFnBpRxh2h2jBumyuvzFeXFYfS6i+OwQ1HwyUQQuS58goFHPVMfdJ5N3Jk5tm/ESYTefZr4pfJ+Nsuyp6z+FEQ2xdI0TdE8RXRM7Ni/Kq+l22Fkyr4VXNddww98BxquczYKUAqKd4FZBq4dRE68874xzVAMXZiuoRzWIMP5vyrUbwcXdD+09AFkhI0a3pEivBvTkIUi5ENUnmvyS+XXzyp4PatHho+tIPLwp/V/g4T8FLlBiMwavkversionMinorQ/dzi1+k6/UZwY7sQzfBToomRZuEBkS4/BYhy8nHDibNZ+LypfzlHN86DMH/UpJn6hEngU19kRnRsRGO/596PdbqamVhuAl6bc4Ye7D3+oln7yJRsFdmQ+NWIuqGwcsFwqPyFdS91O/rz41676v3Q9aSsua+vTwziatnYX7O1S7XPMxTS287OQgHbhuej/l5U9dVaz3Ydkchv6H9pDoc5Nvxymc0zemP9y0eSNtSg6/i5bq614ataj5fRlqaCNXT0lw38154ipqWeaB8VU0MwVjM1UzdU6c8dLhwoEtWjH1/82ZQPSMVFG0pl05QYbdiHhyEQ+jUe8yEll5+x/QYQxHXCJ0uQRb/Vw2aF43YuC+6xaSwyOcZo1dFlrtVsdsFqGuDTBaALQvjM5gI9uG4Ozh9PqMFoM57QAQnRQOZaK/FhaqOpMxcLNzNQu71CD4uG4C1WCIbopQvxM1qSBvLTbhme/RmJgjmSgu29WFoDg7ZYAcniq5kE10+KXspn+gSvbzI7Jysz8peYab6vF5a7gVe0aRMzC4eRSnbTTZLLVzP+QyeJVUBXB8wc6m7Uwa6t2BgXdvBvTRWwOEiF3ZKd7FQckkHbyXBnixIbHq3twmhZ4Zbz909GB8Q47rZX5y2fTfZnKW90pX63dmxP5O3dVGVhkBbz7fLxcFY9tISHEzA9ubRaTjGKsjsTTsT1fVwFGzkXQonQJUEQQUkXTRQ5P4QBH0BKBxw8nN3LzSDrtnLqCGLS1Xe7TdXJ+e4wkafdg2m3WbW42Xz7dgUJb+6GSXb/U7ZrXrT6mhmpnM+5s9rnFbTpuEwMA8tdSUN4lFuDdRZafsm5is4qJr2kHLPfC9SWkMQnU87V7G1eNmc4tPWsaylsJpybstylboWWq4VnnBVD9RDRDcFVGep9SkdxSVgKwIA/f18L6iK0C6SasqZulYEA/SkOAHnPRuP2MVxOEhduK6DIB8tp/vDe2FMMZMEKlMl0lZSqS0CsyjCYDaXenswF2w7EmypJ6hQBOpaHmVrkq/5gCh/zmPvkkdbEoBU34AmPyjV5zQfT+MZx4GTL8z9Hr9TjvnSbHp064ik8WwScpmCJ5a/WQYHxXOieZTM5qPRZJxv9aR/2JNZZdGzUVrflKT0EAJnMtJ3BzEQjbdwvY7Dqg8jGMuhp8j5ebrB+7az9ehhtcEIb7QIW+zc22bzviFtRpE9Y0YDzX+rt/gSTqzTwKvu29myqs+aYcvs+pZ4OlGbaEEHIOjxWuNo5ix72M2zcTOzhuCwNdhJ7vLCiZdGGx1mmjpazrxqo9RIx2OPPusUNwmn2ayfcZKqVuumoA90HEbOOmnbeTT1TXZtxM10Qy+aTugeeDY56FxYX9geKdZbaoYt5a2kciu48exWCIeURqVAalljuX/ano1z6E3hdYB+ng534XV+UI+T5cPouZGOGelWBOPbsriAZLHcI7eCEf+dwBQSx6xZF9VOWLAgHCM/rrwWpwry0kkIxXHMDrkyrmux164zXFvoMQ2eEeotieZopkcDusXzLbYBbizniuITxG7gW07hq+Bx11vq7wCh18HIN1FUS4ME7hCu/MVika+y7Gvk+g18jPSA8MSWxDFCQxJbvNBmWbbREOgGgS5227TYZFhQKU+CeOpPI2DFKPrIEZsfOKKGoBM6qCCSxW2KyXWKY5KSo5Emscs8pcaTjxJCNaOC7XVYrt2gsOOFLioAU15gJi56CnfhJUEUvv6yNQPii1ST9H/kWfdy038b4ue9WzaIjukUCriIR0CkougLwsvegvk+aP4x6Jt5kJhOcaGT1MaRA69IPm797piiVe7tQqK6Qb5rfhZ8sEp9DujuyEwdeO/5+3OAsEnCN15vJTkaT8enJE2TSxFaBZeKiHmKoegmNUMwIYTopAcH5FN3E9SPuOgd9SfPd/lHfEm882cx+Z490jLly/IHD5EZwsVDRCYtn//0lfPBJclbjPL4K1nXJe+VAvFfnzSwAws9In4jP1kQmb/L9YWtBz8kzmKAOb5drArmefqmKWBAzDpkiAXRo/GvDHzl/KPwnuQ7lph00zaJ0fc75WI6vVQMCIPEj2WxchE8TswLzvgUos5vpT/MXLjfO5nP8bdkfqWMZ2R2eUblruv8b+Wac2kXiMgp7FywvFRy8i4lzn37YUK/A/x6SHPgb0P6YySvf4j/lDzk9PP38Pov</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-06-24</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>UserName</con:name><con:value>fullusername_20130619_072217</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CLGTransfer" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
tC.setPropertyValue("FULL_NODE_USER_ID", callTC.getPropertyValue("FULL_NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("CLGTransfer");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="CLGTransfer"><con:settings/><con:config service="AddNewUser" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="AddUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CLGTransfer" mediaType="application/xml" sslKeystore="dececs_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:standard" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
      <LegalGuardian Status="urn:dece:type:status:active">urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
      <LegalGuardian Status="urn:dece:type:status:pending">urn:dece:userid:org:dece:${#TestCase#FULL_NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('CLGTransfer');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.31. CLG Change Completed [The legal guardianship setting for an underage UltraViolet member has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33KwzPo2EziANGd0cUgoqKIzi93MCiGJRJikm//hbauu3e3fvuc1/ESrIyVw5krXrFuueyHYAximIn8Muy+Fb5D982aNjQ27V9q8nUOJ5u1PZGE9ZgnWk1aYZrtPZ8pSxjnCDZx7Hux28VlmbqNbpZY3iVYTsc36HZlwbd2lXKKxRhYpqovNCVcu65Pu5c3b5VksjvBDp2cMfXPYQ7MewsgTLuEM2OfsdUeX+9obw6jN7tOA47FAVfDASR68IXGHjUK/VJ59XAnaVj+XqcROjDp4HfKh97syx7yeovQWRRLE3TFM1TRMfAjvVP5b1034wM2TeD27qr+4HvQN11LnoBSkGxHRhl4FpB5MS294NphmLownQN5SR9DOf/U6F+Obii+0tLn0BGWK9hW2fuxhbIRBHyISprC/mt8s/fVfC2V410H5tB5OEv638HCfkpcoMQGTV8j+yO7u8tfpOu91cEO7IP3QQ7KZoUbRLqEOHyLEKmk48dTJrPwOVr+cs5vncYgv+mJK/UM04Cm/omM6JjIRz/P/V6rtXNykp3E/TuyUIGD9To4Kz6m0G+mqqebMHQTBfa2xXCs/IN1KPUH+uvjfroq49Nvom2vBb6zqSrVJdSHc0uDNI0rX5m3KQXKs4md7e0H3PrFhsf061Nj05NdcP1VtrQmgB5jf3LxN/3N6JrlpSumc+r9TNX5UO6MWvSeDWecOP2KbCs4WXsJXbT32/8wclh2E2uL0/Was7tq+yskWvnoRtjmZ1Jl53tO5RZUvdOmrZlLrT9qDU1jzjevversionMinorK6TmGIq4ROl+DLP5vGjQv6rH+WHSLSWGSzzNG74osd6titwtQ1wKZLABLFsYXMBGs48k+On0+owUw13pABGdlATLR2oqr+XwkZcZq5e5Wcq8nKAsuG4CtWCIvRClfibvNkNbXu3DL9ujdUhCMzSLY14ehMThmAxtOFFXJJqp8Vg5SPlElen2VWTlZX5SDwkxVrV5aHwReWUiZmF09ilJmT3brRbjV+AxepLkCuD5gNKlrKwPVWzGwvrDhQRor4HiVC7bSXa2UXFLBrCRYkxWJTe32diH0jHDvufaT8QExrhr91Xnfd5PdRTooXanfXZ76S3lfF+fSECy22n69OurrXlqCgwnY3z06DUffBJm1a2fifDscBTvZTuEEzCVBmAOSLhoocn8Igr4AFA44+aV7EJpB1+hl1JDFpSrv9pubs3PaYL1PuzrTbjPb8bo5OzVFya/uRsn+YCversionMinorpjetjpZGqvExf9nitJo2dYeBeWjON9IgHuXmYL4s7WdivoGDqmENKffC9yKlNQTR5Wy7irWI180pPu8d01wLmynntkxXqS9C0zXDM66qwfwY0U0B1Vlqe05HcQlYigBA/6AdhLkitIukGnI23yqCDnpSnIDLgY1H7Oo0HKQu3NZBkI/W08PxozCGmEkClc0l0lZSqS0CoyjCYKlJvQPQBMuKBEvqCXMogvlWHmVbki9tQJS/5rF3zaMlCUCq70CTH5TqGs3H03jJceDsC5rf423llK+Npke3TkgaLychlyl4Yvq7dXBUPCfSomSpjUaTcb5Xk/7xQGaVSS9HaX1XktJjCJzJSLWPYiDqs3C7jcOqDyMYy6GnyPllusOHtrP36GG1wQgzWoQtVvP2mdbXpd0ospbMaLDwZ/UWX8KJeR541UM7W1fVZTNsGV3fFM9nahet6AAEPX7ROBk5yx5tLRs3M3MIjnudneQuL5x5abRTYbaYj9ZLr9ooNdLx2KMvKsVNwmm27GecNCfzxBDUgYrDyNkmbSuPpr7BbvW4me7oVdMJ3SPPJkeVC+sryyPFmqVG2FJmpTm3gTvPaoVwSC2oFEgtcyz3z/uLfgm9KbwN0K/T4SG8zQ/qebJ8Gj130rEk3YpgfF8WB5AslnvkVNDjPxOYQuIYNfOq2gkLFoRj5MeV92JXQV46CaE4jtEhR8ZtLfbaLEcLosSKTbHLSxLN0UyPBnSD51tCu3FnOTcUXyB2A990Cl8Fj7udUn8GCL0ORr6BoloaJNBGuPIHi0W+yrK/IMdv4GOkBoQnggYjtQHgu5LQYKVGlxPaXIsWabrBsW0SS6U8CeKpP42AGaPoM0dsfOKICwSd0EEFkSxOU0yOUxyTlJz0NIld5iXVX3yUEKoZFWyvw3LtBoUdL3RRAZjyAiNx0Utoh9cEUfj2ZGs6xFdpkversionMinorIrwf9jxF+fXdPBtExnEIBF+EIiBQU/cZ3253GPZafY24/x3w3DxLDKc5zktk4cuANyedXvxqm6JRHt1x/IL7Dfmh/FXyyTH0N6uHMSB34aPvHjYAQSkI53u9VOekvp5ckTZNrHVoFnYqIeYqh6Ca1RDAhnOisBkfkUw8T1F/R0QfqL54f8s/4ktj2lzH5pD3SNeXr8i/uIkuEi7uITLo+/9uLzieXJG8xyuPvZF2XXFkKxH+81cAOLPSIeEYeWRAZv8r1ja0nPyTOYoY5vlWsCvJ5/qExYEDMOmSOBdGz8e8MfOf8s/CR5AeWmHTTPonRz2/KxYB6q+gQBokfy2LlKngemlec8TlEnV9Kv5m50r8PPp/jH/n8Rhkvyfjy9MpD1/nfyjXn2i4QkV3YuWJ5q+Tkakqc+9bTkP4A+P2c7vJ/mtOfI3n/Tfy75CmnX7+H9/8C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-06-22</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>UserName</con:name><con:value>standardusername_20130619_062045</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>DF8240BDE2D6DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>FULL_NODE_USER_ID</con:name><con:value>DF82425275645BDBE0401F0A079960F2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateTOU_API" searchProperties="true" id="535ba0fa-5eaa-46ab-a346-8e582c939667"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");
def nODE_ACCOUNT_ID_FULL = context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}' )
def nODE_USER_ID_FULL = context.expand( '${#TestCase#NODE_USER_ID_FULL}' )


if( tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:TermsOfUse");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:TermsOfUse", "UTF-8"));
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", URLEncoder.encode(nODE_ACCOUNT_ID_FULL, "UTF-8"));
	tC.setPropertyValue("NODE_USER_ID_FULL", URLEncoder.encode(nODE_USER_ID_FULL, "UTF-8"));
	
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#Coordinator_Schema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
    <dece:Resource>${#Project#Policy_TOU}</dece:Resource>
    <dece:RequestingEntity>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_TOU');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/User/urn:dece:userid:org:dece:0B8034E5B7325FEFE05305991F0A7CC1/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVddc6I8FP4rDr3cQYIfVZjqDCJu3Vpti+22vdmJIWpaSJQEpf31b4LKqq19XXsDk8P5eM7JycnDBYdRWLIdznEsCKOFNAoptzNpQ0tiajPICbcpjDC3BbJ957pnl4rAhhsTrdBtN7Q/4wDWYWCN9AoIavKBAt2CQaCXQMkajWr1SrUSSFXOE9ylXEAqGloJmBXdLOllcwjqdtW0gVWsmPVnrfCAYy59S5Ui0NagUt7QpkLMbMNYLpfFZbnI4olRAsA0Hq97PpriCGrNi1VGWaC4udZHxQAjHIaoiFhkXBg7OhcBt30yoVAkMV7HCg7FAgawDKkTcDI503JbHHTpmGVLF1JGCYIheYeqPtdYTFlQcMIJi4mYRgeTMIFyrOMU6cis0DPN2IV2pKMdhDGHOp9Cc+3rDo9xjCnChfu7bkM7O27XMtNhDCkfszjiu8t/w4PpAodshgOdb9JaQzve4SeVal5gZHcpChNOFrivmnUGEebr3cToeFeFmxiPSdojXDZoyhU6Yxve3nJVjTaZYC5O2aCtzVk5eYBhgpvsp7cQYhlNHx/Pk0sH+CHCKedPlb7TyABsK2eCfGtXy72mzJtoZdH7XR++hrR/a5XpvPN0P0nS8DqcW633di/ujKyfxvymm1zGE2Ca4RXo+0sWBejBMLqwdItby6uX3z8S0vr1lILn1LlaWPfo3GtjP/YBfU9B1B/Mzeeg3HusIteczS7LP2tP40dnOXyYzmtvTmeUiof5gl4lPwaskor759tfRv/5ZVR+Tul978eidn316p+7jlfxGnk6W/h3ZZsz7yejF4zEZqnaoNsudOQuQfH1MFMSEujjTNWeqeHDBaZCayorNTvsRI47EthyD1dr0KqDcsWrtmrlUrXjdTxQLYOqZZkd4NRc19wMmRWKPYguo2OiYqmRu2qbrwGiyOaYBjjWFyyRk45rX3hsQwELXXonDwGjHA+ZHM+EsdfyS0zPg7lpjqpkPOLiPapZllboMzGgg9gZCxzvzGTT3JnJdxiRGcFqcKu+5rKxuZC1mMNFIkKzuIBFihM52mM1Ze1SpV41OIlmIVZIjYgFSYiLs+ksq4zBV++SDhHPpHfeMDttB/Pa/7YpgdQJiFLgKpcWltuIP1wuwK5uEjmccGU74Y17JwmIOliyniImaIVk99PfNlH9kfeI47qe7/ob2Ln2P1ifauwOBidatj3XO9n04XTLP67/xzzVvOf4N9+x/Vbw00N/L3DvG1n3vpu1PK2nWx4IbHxx4Iz9s55HCxZkK/aGlkqCI6/E5mZSzYrzYrJYJNloqqmbP5beDUkATMPHKJEX9tuQvWJq5B6Mo9hRDnovcC7fhZeIKfUFFDiSg7SQLY+gwz7mig535Q2QHsu1d0LKsgmcis9kbiipvEL8JdtHNlJ6UnwjX0sW/038M19bcWSekg0LQidqpZjR24HGQEy6JfJOZ/G2888cfBZ8V5gXOcciZDONEoEPfymoy7qhQYRYQkW3rWWCbQKR4RRvM2z/VfrgJuMo+U8L+f+/Fp1kLYCw/NXhJPOvuKet2p9OtkjIOuhHHuJaLbNTBx4wMx5SW/EQxyvX86LsoGt+EH+UbNVpv8eb/wE=</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateCLGAttestation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:CLGAttestation");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:CLGAttestation", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

//tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:CLGAttestation");


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_CLGAttestation"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_CLGAttestation" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CHILD}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_CLGAttestation');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc7LMEr73versionMajorh+l5YBBFGsJFWsrrgBbjencBgQZZNh019/BhONyZu8J9+psgqn6el+eqHnmWdk+l6zyyME48QNg+pAeqn9p0XZnRbkOo0dDZkG06HbDdNu2g2aBiRtUZ2WbcJadYBQCgcBSswgeak1SYpukFyDonWK6tL413liSXZbqy5hjLBprPJE1qqF7wWoe3X7UkvjoBuayEXdwPQh6iagq/HquIs1u+YNU+31+Q3l1WH8uk+SqEsQ4MmCAHoeeAKhTzwTn3SeLdTVXCcwkzSG7z4t9FJ735vn+VNOP4WxQzRJkiRIjsA6FnKdf2qvldtmaA0CO3xbi2YQBi4wPfdilqBUmOxDq8p7Thi7yd7/wTRFUGRpugEL0AAUE/xTIz4cXNH90tInkDEyG2hvUjdjC2jDGAYAVo3F4KX2z+8q+LZXj80A2WHsoy/rfwcJBhn0wghaDXSL7Ibu9xa/SdfrMwTdQQC8FLkZnJRtEpkAouoshrZbjF2Em89C1Wv5qwW6dRgE/6Ykz8QjTgyb+CYzkutAlPw/9Xqs1ZuVpeml8DWGgkcvx0fOPIadwDr0nTYrM+11vWe8XCE8Kr+Bupf6ff21Ue999b4pkzmZB5p4KGZLCNvcWOdc0W/FhX9smgddssYm59bjE8f2xpFNOFPTzF2xfdHksZHl24O7dE+GN9oudVKpGJa/zE0YNElxbgejdmIriQfBsi4QGUdq65XuNS8xSXeOljijVN3KzojQDLZoZZp3tlMxT2bjcaC0hSSqqEdmMSv8szUT16uJsfLjzstHTI8xlHGN4PkaZPl/3SI5yUzM+0IsJ4WNP88EvqqDgViXRJGHosPnA4F3BsL4wk8E53jaH90el5MCPzcUXuLP6oLPJWcjLefzkZxby6W3XQ4URVAXTN7nN1IFv5DkYilt10PSXG2jTVMht5ogWOtFuKOHkdU/5v09mKi6mk/0wVk9yMVEl8nVVeYUeH1RDyo11Q26sjoInLqQcym/epTkfD/ZrhbRxuBycJHnKs/0eMqQxb3a1/0lBejFHhzkscofr3Jhr4rLpVrIOj+rCM5kiWPTRWUbAd+Kdr63fzDex8Z1q7c873peur3IB1WUe6J26mmDHS3N5SG/2Bi71fJorpSsAvoTfnfz6LZccx3mzraTS/PNcBRuB/sMTPi5LAhzHqeL5NVBb8iHPYFXGd4tLuJBYEPRUnJi2ESVOuf12PXZPa2R2SM9k+p0qM14xc5OrCQH9e0o3R326n6tTOsjzcoMLuEuG5TVM9Z0KVBE9nwt95NRYffnWmU3k4o16NctZ0h4F06J1faQjy/nvac6i2TFTtF559r2SlhPGa9teyq9iGzPjs6orofzY0yyAqSbxOacjZIK76gCz/cOxkGYq0KnTKo1yOcbVTB5RU5S/nJoJqPm8jTsZx7Y0HxYjFbTw/G9MJaUywKRz2XcVnKlI/FWWYS+ZsjKgTcEx4kFR1aEOZD4+WYwyjc4X0YfK3/No3LNoyMLvExveZbrversionMinoriD5JJpojEMfw4EI1C4vXoqVhbrk+0TlMfaJGJyFU3sYLsKj6rvxkacasZoNBkXOz3tHQ94VtmkNsrobUXOjhHvTkb6/iiFkjmLNpskqgcgBskg8tVBcZlu0aHj7nxyWG9RwoyUQLtp+Lvc6JnydhQ7GjXqL4IZ3eYqKLXPfb9+6OSruq6xUdsSA1s6n4ltvCRDPlS4RetkFc3mcW/kYza3h/xxZzYnhccJZ04ebXWQL+ajlebXW5VWNh775EUnmEk0zbVezsjzeZ22BL2voyh2N2nHKeJpYDU3ZsJmW3LJupF35JrpUWcieun4uFizzIra6qwyZ9Zg6zvtCAyJBZHxctseD3rn3cW8RP4UvA3Qr9PhLnybH8TjZPk0em6kQ8PdCkFyW5YH0ECqKvhUMJO/E5hS4loN+6rajUoWhBIYJLXXcldJXroppjiu1cVHxttaZhm6KVG0KFEcJzZZmWRISiF5ss1xLNlWbiznDcUXiGIY2G7pq+Rxb6fU3wECv4tgYMG4kYUp2ENU+4vFMl/VQbDAx28YIKiHmCfKtEQxrESSvNJqSzSvKBwtCgzNtHmyo7TYWnUSJtNgGvN2AuPPHJH5xBEXELiRC0siWZ6mCB+nKMEpOZlZmnjUU2Y+BTDFVDMu2V63yXRaBHL9yIMlYMIPrdSDT9E+uiaIQG/PZsME6Cp1EYjCODE96nrY/xjl13e3hGAdyy0VUBmSAHFR4Tect3mL5+e4249x38zzqeWWZzrObhK74A3J51cfTVN2y71jPgK7Ib9v+Cr4ZJz4Gtfdn5W54N7994sB5pWYebzeinMyn05PaZal13K0S1YVY/MERZBtQoMgxdTorIdHGBB3E8SvWOkd9RfPd/lnfGmyD7QEf9k+bp7qdfmLK4kGUXklGeDmL3573/nkEuctgUXynUz08M2lRPzXyw3oglIPi2f4kYex9VGub2w9+MFxlqPMDZxyVXLQ8w+9AUJs1sXjLIwfjX9n4Dvnn4X3JN+xJLibdmkCf35TLefUS80EIEyDZCDVroLH2XnFmZwj2P1Q+sPMlQW+0/oC/Ujr1+pYw1PMN2t3Xfd/Kzfca7sAfKHF+lcsL7UC31Cx88B5mNXvAP8Y1wwlsyRDCYzEPI5rhpM+PslPkbz+If5T8pDTr9/D638B</con:value></con:property><con:property><con:name>tName</con:name><con:value>Child_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Child_User_Create_API</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E48705C62976FCB4E0401F0A079971D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1/User/urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA/Policy/urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/iscportal1_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E486FC50804D1AE5E0401F0A05991EF2</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E2E22E83505CC024E0401F0A0599357E</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E6432D13CD199C26E0401F0A0799607F</con:value></con:property><con:property><con:name>CHILD_NODE_USER_ID</con:name><con:value>E2E25B1DF5BEDD19E0401F0A07991448</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD</con:name><con:value>E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMAC" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageAccountConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MAC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MAC"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MAC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#TestCase#NODE_ACCOUNT_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MAC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxjOo2Gzucd0RxSLNCoqiOvLCSxKQFmUAkF//S1wtLWne86c+9BhV5KZ9WXmversionMajorlZP7Hpe2wXYIyi2A2DsiK+Vv5pNqFFWyxd27Ibq1Y30bbWaba4GsNxrdamSbe2zU2lrGCcICXAsRnErxWWZrga3ajRHYOud+tct954aTCddaU8RxEmronKC10pZ74X4G6x7WsliYJuaGIXdwPTR7gbw+4UqMMu0eyaN0yVt59XlMWG0ZsTx4cuRcEXC0HkefAFhj71k3rS+Wnh7tS1AzNOIvRrTwu/Vn7Zpmn6knIvYWRTLE3TFN2hiI6FXftH5a10M0aWEmzD61owgzBwoem5FzMHpaLYCa0y8OwwcmPH/8Y1QzF07rqGMliDTD34UaE+NijQ/aWnJ5ARNmvYMZmbMx1tUYQCiMozXXmt/Pi7Cl5tjcgM8DaMfPxp/d8goeCEvPCArBq+RXZD9/cev0jX208Eu0oAvQS7JzTKaXIwIcLlSYS2bjZ0MSGfhctF+csZvjEMwf9Skp/UI04Cm/oiM6JrIxz/P/V6rNXVy9z0EvQmWzvFn2yGBhOttYx6X66rBu11BCiFrwWER+UrqHupf60/E/XOq19G+xnsUdVLMuZ6ekpN14O9M9FAf9hsj0M8mZ4YD67aR6AKy4HV8O3jfBcyozZoR3rUV7lRc6gtk1Bp6aw98UtH2bEW+hG5lqDu7SMftweXfmZG65geuoiTW1bnwDQ3K5n32WS5wLjVwkrHXzPNkQa5o4J3avss6Lu2s4alZDXEVHVYx02r2qr3L4wRvn7E9BhDHtcAnYsg8/+XDbojmrF5Xwh5p9iS4xmjN1VRxOQiCOA8tUGq8MAmfzsw4u390dm7cieleaBpPSAKvLeThirYy4CZSbyjCvO5mgkX0Oft0ZwYGiXgrXlVl1IxXYlzTXuXUsew5Pl5I3vJ+iKNVIALY8FRJversionMinorai7ohqSoIr7JMFTdytlOnaqpoK7FEHIhSdrhYcidGcuZCVmmo0wa7mjaS9XJO5L3z0B+dNobkqYIqC9OjPFU2nKhJfaCvFpDtJcT2MvQPYWk14x+M+ge0A6iX0mRPcFGNfaoaM3Yk6mYhM55lqiL3VQ2nglZEJZektD+fXT5yIfCqYPlSJhlgcs0FNITeiF4v+9hcNAJVB6loF8YDKbXGNyCqRqcl4ZqroZTqkj4b9VRdSSVQyEQp9fCGHTkb2TlBTsv6Btg9FkbQpEUvIN8D/QTPjWPJlHtg488ZyOkOdBuuuQxTe91ORW3VH4RrhbgZAU3ieQ0QQDTIQyP558GQnzfGB7fDumi47YU+cqKSyoSD/emS0W2XG9uT0aIhbvetiexOONNyKMWD7I7bA0VB1oBxNNPSV5QuBu6lOR7MlsiNVpd41NCYpttulPRFMluKodey3per2aCaraBmjCfT2WJyybLRcde+ePH7mH+Ppn1VtMcjhCYYVina7PFGW2wIq/cd4dNWp1GjBGyVB0De2bbkEgLz77srCd91VSLkJcczlYWFIE+BLFclhRc1bdtzmAmU58mMGamKZHkkTefVUvdKa4EXSaVoc7E+rNgevTaAVTjT6lLP1maNan+J1trIM+YxSA/zbcAwtHzQ3rdqakM1Z4ClpFOenCK+lChgZo4PfTobzJs0c9Qsrz/tgBmXTdl9Nnbs9Xlvr/ekKKuHo7MygDc3HjimEIotSpoh6SpoX89bpiozTvegnx02PsxEg9SsMA4NXtJ7Gj3LRBEMrjJsADbDq4u0UwWpsC+BTDUJLU6bpYNXwcgdG1JCSJs80GW3Yel/5VhOsdIzx44C0MBnjklXjklge6wqbZHBjaZwwIvU5mXpqLXmw37nQGvL4b7EV3uUHbtefRy0U2NQXTDntOXstMWio4iOUA22K4fbxDxtXqCG+vuW7Op7MWjWvbM6VLXGzKW8M71DxxQPSyOFCSQuvvSoTpRUeX/t+pcLversionMinordn/mSanJSZOcDM2dkcF510N3lvUlQknxuX1vqk9ZYhXF3vkc9N8i68tlHqscE+deDb7DVNNjsE49syv4cVsdwjl6MZ/3mOyyWuVdsWqt1DPgziGAVx5S23yme4bkImPdfqkpvzuhaFOtvm221W4Jge3xYkuk4zPRrQrU6nKTa427B3RfEJohAGWzffKx9nr5f1nwFCv4tRYKGodgoT6CBc+YPHPF9lJdDJFBIGGJErq/JPi+FEscHyHCtxLbrdoJudVhO06Z5IxHQTVMqjMB4H4whsYxQ9j8qtp1FZR9A9uCifp/OhApOpAsckJUfzlMQe83IyXwKUkIk7yofeLltvNyjs+gcP5YApP7QSD70cnEORIApff9maCXEhbTVpuph2vo3v87dbKoiO5eYKOA+GR6Sc6Iuhn7tF8m3EDP0Y8c09SCw3H2pIXuPIhVckz58+6JLz5M6VPKQb5rvqZ8GTW+pzRPedrJML74y/v4nISE2GrrdbQY7my/ElOZ2SogStfKCMiHuKoegmNUUwIVPh2Qj3KKDuLqi/GsjvqD/tfJc/40tiJ5jG5DT7hDDlYvkXr7EpwvlrTCGEz/72qfe0JclbjLL4K5ngkUdbjviP7zrYhbkeEU/ITxpG1ke5vvD1sA+JM29fbmDnq3z8Pn/DChgSty5pYWH06PwrB19t/iy8J/mOJSZs2iQx+v5LOe9NrxUTwjAJYkWsFILHflngjM8H1P1Q+s1NMQD/etFk+NsXzVIdTknn8s3KXdf9d+WaW9AFImKF3QLLayUjj3OyeWA/9OdfAL9u0Sz3pxb9HMnbb+LfJQ85/Xwe3v4H</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11018 - STSCreate - retailer - unamepasswd - Different users on save account share same node accountID - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>1_STS Create Tokentype unamepasswd - Payload</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DC428B882C31FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>829</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DC428B882C23FB8CE0401F0A07996D53/Policy/urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\STSAPI_Projects\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeTestRequest" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeTest API"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
if (testProject.getPropertyValue("versionMinor")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("RetiredAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("versionMinor")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status",CallingTCase.getPropertyValue("user1Status");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("mergeUser1"));
testCase.setPropertyValue("user2Status",CallingTCase.getPropertyValue("user2Status");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("mergeUser2"));
testCase.setPropertyValue("user3Status",CallingTCase.getPropertyValue("user3Status");
testCase.setPropertyValue("mergeUser3",CallingTCase.getPropertyValue("mergeUser3"));
testCase.setPropertyValue("user4Status",CallingTCase.getPropertyValue("user4Status");
testCase.setPropertyValue("mergeUser4",CallingTCase.getPropertyValue("mergeUser4"));
testCase.setPropertyValue("user5Status",CallingTCase.getPropertyValue("user5Status");
testCase.setPropertyValue("mergeUser5",CallingTCase.getPropertyValue("mergeUser5"));
testCase.setPropertyValue("user6Status",CallingTCase.getPropertyValue("user6Status");
testCase.setPropertyValue("mergeUser6",CallingTCase.getPropertyValue("mergeUser6"));

//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("RetiredAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMergeTest_API").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeTest",CallingTCase.getPropertyValue("expectErrTypeAccountMergeTest"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeTest_API">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeTest_API");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeTest_API"><con:settings/><con:config service="AccountMergeTest" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeTest_API" mediaType="application/xml" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#RetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeTest_API');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>SurvivingAccountID</con:name><con:value/></con:property><con:property><con:name>RetiredAccountID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("policyCLASS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
	
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			log.info ""+URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8");
			tC.setPropertyValue("policyClass",URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8"));
			
			
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("policyClass","urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"));
			}

tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyGetResponseType"));


if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}




</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Get"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Get" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#policyClass}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Policy Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);


 </script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
                def myXML = new XmlSlurper().parseText(XMLbody);

                xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
}

log.info "xmlPolicyClass [$xmlPolicyClass] - tcPolicyClass[$tcPolicyClass]";
                                
if (httpStatus == "HTTP/1.1 200 OK" || xmlPolicyClass == tcPolicyClass) {
                policyWasFound = "true";
                def PolicyID = context.expand( '${#TestCase#XMLbody#declare namespace ns1=\'http://www.decellc.org/schema/2012/12/coordinator\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
                log.info "================="+PolicyID
                tC.setPropertyValue("PolicyID",PolicyID);
}


tC.setPropertyValue("policyExists", policyWasFound);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return policyId"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));

</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6pKE333versionMajorjux5ThoqhYO6kaLhKMqFy8vnyFw4gogjIgyK8/A26NZif77PM9pMw0PT2ruxfNmp/Y3vtsF2CMotgLg6oqvdT+10A0z3HtRp1r20y9ybf5+qrRseuw1aLXbMu2uRaqVVWME6QGOLaD+KXG0kyjTjfqDG/RXJdpdDn6mW63lrXqFEWYhCYuz3Stmu39AHfLY19qSRR0Qxt7uBvYe4S7MeyaQBt0iWfXvmKqvf68oCwPjF43cXzoUhR8dhBEvg+fYbinflIPPj8d3DU9N7DjJEK/znTwS+3X3jRNn9PGcxi5FEvTNEXzFPFxsOf+qL1WrpuRowbr8LIW7SAMPGj7Xm4XoDQUb0KnCnw3jLx4s/8mNEMxdBG6jjJYh0wz+FGjPg4o0f1lpAeQEbbreGMz12AGWqMIBRBVJ4b6Uvvxdx287LUiO8DrMNrjT+v/BgkFJ+SHB+TU8TWzK7q/j/hFuV5/IthVA+gn2DuhYUGTgw0Rro4jtPaygYcJ+RxcLdtfzfCVYQj+l5b8pO5xEtjUF5WRPBfh+P/p132vLlGmtp+gV9sMBHfXbPPnBuwvcl7XLKfZMuwx33wpIdw7X0DdWversionMajorr/ZmoN1792rSd77DPOD3JT89j+riF4WIXQR3kST4Yj9KhstrzDS7ghe0CurTpjxWVbaKDcE4Yhl/uUqHVlyQ3cHuC9F5Zb8eJZybaiUmpPdSDzrH/JMFjzO5yzo4P5lv/CZ3W6ZA/SUKeqcF+8AYGa6+PBAuu7SdHbqkKd4zdviKCyiydthlT5xNjn6s9Lj5R+OUjp/scirze0blMsvh/ztG8ZMf2bSEWk2JNXs8YvWqqKiW5KIKz6YJUFYBL/rZgSAp93Ow8hU9pAeh6D0ii4G/lgQZ2CmAmsrDRxOlUy8Qc9AV3OCUbrQrwl4JmyKmULqSprr/J6cZylOl5pfjJMpeHGsDlZnGjyYY8lQxL1jQQXmyZJq2UbKuZWqrqC6lCAkhydsgdhY+RknmQVTnN5NiFySXL+ZTYe+fBfnhaWbKviZoimkfFVFcNSZf7wFjMINtLyN58sD+ElcVEuNvUP6AtQL2UJmeCXLN2qWZN2KFk2KXNerRpqtLXdJyKepmVUpHT/nSSf9RCFDTR2cuZbIHxpRbQEntDejnvY3vGBZoBUsktN7/LqTO6AtF0Oq2Il1oN5NSQjcmwpxlqKoPSJsmpj1fscLNSNifY0LO+Bbb3jRF1edYLyPPAOMEzd6zYSg+s9lMGNowN9DjPnoepu+ykkr7ov4dLlYQZAl0WBB0QQDQoUiP1F8BAmHKjg8ezHhqse+EebaKKxoTvu1Oe0R2vMXLHwxknrXftseKNG7azoVQfstvGDqgqct6ZjW47xoIypMDLW6P3yRx50SKPh5zOtLwOVzFmyWQuhX7beZsvJu9P2QLq1mhsTmbjPMuGx20n9+O3kfAWmX1NckdDhMYYPlG03ROsjsSJi7ct4dPaoBFXAa4mAKBsXVf2CIGFt+2FhG+GJhPyAk1MFXEmKiZQlCdZFSRdX/c2zBgq02TCDDVVdnxSpvNibviVpShIpFO0PVseFmyPXlrAKYPpTbnn6hPuqT9HS33oW9MYpIfpOmAYWjnob2stdaFWMMBRU1Mgb5FQSVQwsUeHPp29T1s0c9QdversionMinor/yYNLITHaXjTbu8rxzyZxwl4u7versionMinordhAX9q3XFMJRSbVXRLNjTQubxvmaZOGoYP99lhtYeZZJGelZtDS5CNnk5PMkkC7xcbtgCb4UUubzVRLvdXQKbZhBan1XyDF8HQG1lyQkib3NFlu2Lpf+VYQbHKI8eOItDBZ47JF47JYH18UjsSg7mWeMCz1BUU+ai3p4M+f6D1+WBXEZ56lBt7fnMUdFLr/WnGnNP2ZqvPZrwqbcSnYL3YNFaxQNs51FF/11Y8YycFraZ/1gaazk08yj/TW3RM8aAyVJlAbsR5j+Kj5EnYL719njea7GQ/NpOTOrHfMXPerI4zPt2O31oUFSlnLm8vT3pvHsLF5TvyeUjejJcxSt0P2IcJfNVeZrLaIhhfl8V3WJWqPfJxtOM/67jC4jn1denaPRRiEMcoiGuvxa5Cw3UTovQ8p0u+nJe11GkybLvR4UC7DQS+J9NNmunRgG7zfLvNS1exd0HxCaIYBmuvOKuQs5eP9Z8Bwn0Xo8BBUf0UJnCDcO0PEYt6VdXAICokDDCyQiKXW1yD7Ygdpg1anAQIYNDmANdpsoIosqDH1KrDMB4FowisYxQ9SuXOg1Q2EPQOHir0dCEqMFEVOCYlOdqnJPaZ55P9HKCEKO6oEL1dttnhKOztDz4qAFP70El89HzYHMoCUfjyy9ZtiEtru0XTpdr5Nr/Pz66lID6OVzjgIhkBkXaiL0R/85rJtxkzzH3G1/AgcbxC1JC6xpEHL0geH33QpeDJjStFSlfMN9fPhoew1OeMbic5Jw/eGH+7ExFJTUTX67UhR/v5+JycTknZgnYhKCMSnmIoukWZCCZEFZ6tcIcC6haC+itBfkP96eSb/RFfEm8CMyZv854Qplou/+I2ZiJc3MZUQvjsb696D0eSusUoi7+yiT65tBWI/3ivg11Y+BHzmPykYeR8tOuLWHfnkDyL8eUFbrEq5Pf5G1bAkIT1yAgLo/vgXwX46vBH463INywxYdMqidH3T6rFbHqp2RCGSRCrUq003M/LEmd8PqDuh9NvYUoB/OtGk+FvbzRzbWCSybW3azdf79+d615JF0ju8sS/xPJSy8jlnBweuHfz+RfA30Z0gxNotsXToNW+jWiO5zmW4W8FfMjk9Tfz75a7mn5+H17/AQ==</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_ 20008 - SAMLExchange - retailer - saml2 - FORBIDDEN - Active full user - with deleted ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create and SAML Exchange - FUNC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>837</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/versionMajor.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6">
      <PolicyClass>urn:dece:type:policy:UserLinkConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D</Resource>
      <RequestingEntity>urn:dece:org:org:dece:7600</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D" CreationDate="2013-03-19T05:14:46.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>952</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("userStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyDeleteResponseType"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
				tC.setPropertyValue("PolicyID",URLEncoder.encode(""+callTC.getPropertyValue("PolicyID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("PolicyID",""+callTC.getPropertyValue("PolicyID"));
			}
			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Update");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Update"><con:settings/><con:config service="AddNewUser" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="AddUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Update" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#userStatus}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>Ganji</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>raju.ganji@compugain.com</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>rajuganji@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="true">1990-07-01</DateOfBirth>
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#Project#password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Update');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("NODE_USER_ID",userid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("SecondUserName",tC.getPropertyValue("SecondUserName"));
callTC.setPropertyValue("password",tP.getPropertyValue("password"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_70082 - STSCreate - llasp - unamepasswd - for the user who updated to Standard from Basic</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create Tokentype usernamepassword - Linked LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D82F859216DC97E2E0401F0A05996483</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property><con:property><con:name>userStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Delete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Delete2"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Delete2" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#POLICY_ID}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Policy Delete"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="AccountPolicyDELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Delete" mediaType="application/xml" id="7926fdfc-6744-494b-ad3f-86dbd869e045" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#TestCase#POLICY_ID}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('Policy Delete');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
log.info contentLocation;
log.info connection[0];
log.info contentType[0];
log.info contentLength[0];

tC.setPropertyValue("status",status[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
//tC.setPropertyValue("contentLocation", contentLocation[0]);

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = true;
		doContentLocaton  = false;
		dobodyXML = false;
		
	break;
	case "FORBIDDEN":
	default:
		errorReason = "assertion_not_found";
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorLink = "https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
/*if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
} */</script></con:config>
      </con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773versionMajorieS8uwumAlqQIBRcUVN27ewmFAlE2G1V//Dho9SU5yvrzflU5PT/fTCz3PPCPDc+kujxCMYifwq4r4UvvHoKy9CcG+0TQBaLCsBRv7NttqdGALdEwDAthhalUFoQQqPooNP36p0STFNEiuQVEa2eo2mW6Te2pzjF6rrmGEsGms8kTWqrnn+qh7dftSSyK/GxjIQV3f8CDqxqC75NVxF2t2jTum2uvzDeXVYfR6iOOwSxDgCUOErgueQOARz8QHnWcTdZeO7RtxEsE3nyZ6qb2dzbLsKWOegsgmaJIkCZIjsI6JHPtX7bVyPwxNxbeC27pn+IHvAMN1LkYJSoXxITCrvGsHkRMfvG9MUwRFlqYbMAcNQLH+rxrx28EV3Q8tfQAZIaOBDgZ1N7aAFoygD2B1tVBear9+VsHbWS0yfGQFkYc+rf8bJOin0A1CaDbQPbI7up9b/CJdr88QdBUfuAlyUjgp2yQ0AETVWQQtJx87CDefiarX8ldzdO8wCP5LSZ6J9zgxbOKLzIiODVH8/9Trfa1uVtaGm8DXqekHKGkfizgNqPF6z9X3vKzavpWfXq4Q3ivfQD1K/bb+3KiPvno7BNZHitWms71eX+68MI20Y1CMW/GMiPXD+tQppsLFzTfaTs9D5rjT2dYYHXpyT2H7WfNopfFE7Aj0eLSxNLbSPPUnyW7qDDpN3XAhKcoztXCbCpCbEVswCtPMT6K8BmhEZGZSH+lpwLnNgOrslYCONuOF5F2SYt1eC/KqMqGzrT1hhgtCO7OqversionMinorVN8uV3TO9jKOMaweIaZPl/2yQ50YiNx6JXTgoLf54xfFUVpVcXez0e9mw+UwTeVoTxhZ8I9ul8ODl9LiMFfr6SeZEversionMajorAWfifZOXM/nIykz12tXXyuyLKgLNhvwO7GCN0QpX4v6dkgaGz3c0TKpLwXB3C6CPTMMzcEpGxzARNXUbKIphXqU8okmkZurzM7x+qIeVWqqrZjK5ihw6kLKxOzqUZSyw0TfLMLdisvARZqrPNvnqZXUO6gDzVtTgFkcwFEaq/zpKhcOam+9VnNJ42cVwZ6scWxaT9ZD4Jnh3nMP74wPsHHN7K+Lfd9N9It0VHtSv7c895fKnhHn0pBf7Fb7zfpkbOS0AgYTfn/36DQdYxtktt7JxPluOAp05ZCCCT+XBGHO43SRvKr0h3zQF3iV5Z380jsKraBnyhkxpFGlzrn91rZwzltk9EnXoDodajfetGbnlij5dX2U7I8H9bCVp/XR0kxXXMxddiitpy3DoUAeWvOtNIhHuTWYLyv7mZhvwaBu2kPCvXBypLaHfHQpDq5qL+JNa4qKvWNZG2E7Zd225arMIrRcKyxQXQvmp4hsCZChiversionMinorRjuIKb6sCz/ePq6MwV4VOmVRTyeY7VTB4WYoT/nKk4xG9Pg8HqQt2DB/ko830eHorjClmkkBkcwm3lVTpiLxZFmGwXEnykV8Jth0JtiQLcyDy850yynY4X6sBVv6cR/maR1sSeInR+RY3qDArkoun8ZJl+cIXVr7MHdRzvjFbHtk+Q2m8nIRspqKJ5eub4KR6TrSKkuVqNJqM872W9E9HPKsscjlKGb0ipaeQdyYj7XASA9GYhbtdHNZ9EIFYCT1VyS9THR07zt4jh/UmJcxIEbTplbfPVn1D0keRvaRGg4U/Y9pcBSVWMfDqx062qWvLVtg2e74lFgWhR2sy4AOZWzTPZk7Tp8MqG7cya8if9gY9yversionMajorOKDhppGsgW8xHm6VXb1aa6XjskReNYCfhNFversionMinorM1aaz+uMKWgDDYWRs0s6dh5NfZPeGXEr1cl1ywndE0cnJ40NmbXt4WLNUjNsq7PKnN0C3bPbIRgSCyLlpbY1VvrF/mJcQm8KbgP083R4CG/zg3g/WT6MnjvpWOJuhSC+L8sLSBGrMr4VjPjvBKaUOGbDuqp2w5IFoRj6ce21PFWSl26CKY5jdvGVcVtLLapNSpLcYiSalmlSIlmSkkmebHIcKzHcneXcUHyC2At8yyl9lTzudkv9HSDwugj6JowaaZCAA0S1versionMajorgs81VV/AW+fgMfQS3APFGUqU6z3RFbFCtSJNOUmk2J69C8JJJNkWnRteokiKf+NOKtGEYfOSL3gSMuIHBCB5ZEsrxNEb5OUYxTcjbSJHapp9R48mGCqWZUsr0uzXaaBHK80IUlYMILzMSFT+EhvCaIQLdfumEAdJUuJO0fZdm73vTfhvh5754NrGM6pQIq4xEgrij8gvCy92C+DZqi3wd9N88nplNe6Di1ceSAG5KPW787pmyVR7vgqO6QH5qfBR+sEp8DejgyUwc8ev7xHMBsEvON13tJzsbT+SlJ0+RahHbJpSJsnqAIsk0sIUgwISq04AR94mGC+BEXfaD+5Pkh/4gviQ/+Msbfs4dbpnpd/uAhsoSofIgouOXzn75yPrjEeYthHn8l67n4vVIi/uuTBnRBqYfFM/yTBZH5u1xf2HrnB8dZDjDHt8tVyTyLb5oCBNisg4dYEL03/pWBr5x/FD6S/MAS427aJzH8fqdaTqeXmgFAkPixItaugvcT84ozLkLY/a30h5kr93sj8zn6lsxversionMajorfESzy7PqD10nf+t3HCu7QIgPoWcK5aXWo7fpdi5b7+b0G8Avx7SPfFvQ/pjJK9/iP+UvMvp5+/h9V8=</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00011_US_UserGet_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Get_GeoProfile</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>765</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AD8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E6170EEF63CD2F20E0401F0A05994E39</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/versionMajor.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
    <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
        <Reason Language="en">The policy was not found.</Reason>
        <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E6170EEF63CD2F20E0401F0A05994E39/Policy/urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</OriginalRequest>
        <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="acdf36be-cba5-41d7-80fb-3a8e388f4fb7"><con:settings/><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def certPath = context.expand( '${#Project#certspath}' )
def certsPath_Windows = context.expand( '${#Project#certsPath_Windows}' )
def certsPath_Linux = context.expand( '${#Project#certsPath_Linux}' )
def windows_JDBCDriver = context.expand( '${#Project#windows_JDBCDriver}' )
def linux_JDBCDriver = context.expand( '${#Project#Linux_JDBCDriver}' )
def windows_JDBCConnStr = context.expand( '${#Project#windows_JDBCConnStr}' )
def linux_JDBCConnStr = context.expand( '${#Project#linux_JDBCConnStr}' )


if (System.properties['os.name'].toLowerCase().contains('windows'))
{
			log.info "it's Windows";
               
                 testProject.setPropertyValue("JDBCConnStr",windows_JDBCConnStr);
                testProject.setPropertyValue("JDBCDriver",windows_JDBCDriver);
                testProject.setPropertyValue("certspath",certsPath_Windows);
                
}

else
{
	log.info "it's not Windows"
	 testProject.setPropertyValue("JDBCConnStr",linux_JDBCConnStr);
                testProject.setPropertyValue("JDBCDriver",linux_JDBCDriver);
                testProject.setPropertyValue("certspath",certsPath_Linux);
               
                
}

log.info "VM Set";

/*if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows";
    		certPath = testProject.getPropertyValue("certsPath_Windows");
	} 
else 
	{
    		log.info "it's not Windows"
    		certPath = estProject.getPropertyValue("certsPath_Linux");
	}
*/
String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
//String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set Pem" disabled="true"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>PolicyCreateMUC_API</con:value></con:property><con:property><con:name>sName</con:name><con:value>CommonTestSteps</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Rename Test Cases from external"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "STS Create Tokentype unamepasswd - Portal:CS";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\raju.ganji\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

	newTestCaseName = br.readLine();
	log.info "Input Test Case Name: "+newTestCaseName;
	
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		targetTestCase.name = newTestCaseName;	
	//}

}</script></con:config></con:testStep><con:testStep type="groovy" name="Rename Test Cases internal"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "STS Tokentype DeviceAuthToken - Device Role";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		//targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace("Copy of ", "");	
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeRequest" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMerge API"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("sName");
def callTCasename = testCase.getPropertyValue("tName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
if (testProject.getPropertyValue("versionMinor")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"),"UTF-8"));
}
else if (testProject.getPropertyValue("versionMinor")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status","active");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("survive_assertionUserIdFULL"));
testCase.setPropertyValue("user2Status","active");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("retire_assertionUserIdFULL"));

testCase.setPropertyValue("survive_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("survive_assert"));
testCase.setPropertyValue("retire_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("retire_assert"));
//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMerge",CallingTCase.getPropertyValue("expectErrTypeAccountMerge"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMerge_API">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountMerge");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMerge"><con:settings/><con:config service="AccountMerge" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMerge" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#retire_assert}"/>
  &lt;con:entry key="Authorization" value="${#TestCase#survive_assert}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/versionMajor.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2012/12/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user1Status}">${#TestCase#mergeUser1}</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user2Status}">${#TestCase#mergeUser2}</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#encodedSurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#encodedRetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMerge');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMerge}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.40. Account Merged Notice [Your UltraViolet account has been merged with another UltraViolet account]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SurvivingAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>RetiredAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedSurvivingAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedRetiredAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D828E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D88AE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>expectErrTypeAccountMerge</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>survive_assert</con:name><con:value>SAML2 assertion=nVdZc6pME773versionMajorieS8uwuWElqRoEFRU3cOPmLRyGRdlkQNBf/w4aPUlOcr6835VOT0/30ws9zzxjw/fYDsAYxYkbBmVZfKn80zR52uI4prbjjXat3uKMWrvO1GscbEKWqUOaa9CVsoxxiuQAJ0aQvFRYmuFqdLPG8Brd6nBch6k/MTyjV8orFGNimqg8kVO57wW4c3X7UknjoBMa2MWdwPAR7iSwowJl3CGaHeOOqfL6fEN5dRi/OkkSdSgKPpkIIs+DTzD0qWfqg86ziTuqawdGksbozaeJXypvZ7Mse8q4pzC2KZamaYrmKaJjYtf+VXkt3Q8jUw6s8LbuGkEYuNDw3ItRgFJQ4oRmGXh2GLuJ439jmqEYujBdQzmsQaYe/KpQvx1c0f3Q0geQMTZq2DGYu7EFslCMAojKy4X8Uvn1swrezmqxEWArjH38af3fIKHghLwwQmYN3yO7o/u5xS/S9fqMYEcOoJdi94QmRZtEBkS4PIuR5eZjF5PmM3H5Wv5yju8dhuB/Kckz9R4ngU19kRnRtRFO/p96va/VzcrK8FL0enaCfr81lePJOdHTlF0sj8amsRifMHi5QnivfAP1KPXb+nOjPvrq7VC0GjI6rM9ZCTsLlversionMajor6Q6clyJm/dy6UfzY1MXNlzeSkw7CvGkm0STWKEqeZprfj4Xrh2pvNyZ6sPcqUp7MS3ZIOl8CXdtXqaioOR64UNIbe1K5uq3LspOcmSgMutvoNDfGj8cAK3BaeJBultdHOvfZRrdaXE7Mpy3SoiyViq79pu9NVtT1O5BmdNw8vversionMinorN6H0MR1widr0EW/zcNmheNxHgsusWksMjnmaBXRZa7VbHbBahrg0wWgC0L4wuYCPbh6BzcPp/RApgve0AEZ2UBMtHeiqv5fCRl5mrl6Su51xOURT0bgK1YIhuilK9EfTOkjbUebdkerauCYG4W4Y4bRubgkA0cOFE0JZto8lnZS/lEk+j1VWbnZH1R9goz1ZZcab0XeGUhZWJ29ShKmTPR14tou+QzeJHmCqj3AbOUuo4y0PwVA7mFA/fSWAGHq1xwlO5qpeSSBmYlwZ6sSGxat6dH0Dejne8574wPiHHN7K/Ou76X6hdpr3Slflc99lV5x4lzaQgW2+VuvToY696pBAcTsLt7dBuusQkzW29n4nw7HIW67JzgBMwlQZgDki4aKHJ/CMK+AJQ6cPNLdy80w67Zy6ghi0tV3us3N2f3uMFGn/YMpt1mtuN1c3ZsilJQ1Ufpbu8ozqY3rY5U87TkE/6yxafqqWm4DMwja76RBskotwZztbSbifkGDqqmPaS8C9+LldYQxJez4yn2Ilk3p/i8cy1rLWymda9leQq3iCzPis64qoXzQ0w3BcSx1PZ8GiUlYCsCAP39ci/MFaFdJNWUs/lWEQzQk5IUXPZsMmJXx+Hg5MEtB8J8tJ7uD2+FMcVMEqhsLpG2kkptEZhFEQbqUurtwVKw7ViwpZ4whyKYb+VRtiX5Wg6I8uc89q55tCUBSJwOmvygxC1pPpkmar0OzoGwDHq8oxzztdn06dYRSWN1EtUzBU+sQF+HB8V342WcqsvRaDLOd1raP+zJrLJodXTi9JJ0OkTAnYw05yCGojGLttskqgYwhokc+YqcX6Y63rfdnU8Pqw1GmNEibLFLf5ct+4akj2JbZUaDRTDjWnwJp9Z54Ff37Wxd1dRm1DK7gSWez5Qer+gQhD1+0TiaOcsenGU2bmbWEBx2BjvJPV4489JI12C2mI/Wql9tlBqn8dinLxpVn0TTTO1ndWk+r3KmoA00HMXuNm3beTwNTHZrJM2TTq+abuQdeDY9aPWIW9k+KdbsZEYtZVaa1zdQ9+1WBIfUgjoBqWWN5f55dzEukT+FtwH6eTo8hLf5Qb2fLB9Gz510qKRbEUzuy+ICksVyj9wKRvJ3AlNIXLNmXVU7UcGCcIKCpPJanCrISyclFMc1O+TKuK3FXksUW2xbbLNtiamLEl2nmR4N6AbPt8RG985ybig+QeyGgeUWvgoed7ul/g4Q+h2MAhPFtVOYQgfhyl8sFvkqy8GCXL9hgJEWEp7ICSzL0IDpNntsj23U2zxNSz2elqQG3aIZUClPwmQaTGNgJSj+wBEZ+gNHXCDoRi4qiGRxm2JyneKEpORonNLEY55OxlOAUkI144Ltddh6u0Fh1488VACm/NBMPfQUOdE1QRS+/bI1A+KrdCFp/8hq93rTfxvi5717NoiO6RYKuIhHQKSi6AvCS9+D+T5o7n3Qd/MgNd3iQiepTWIX3pB83PrdMUWrPNqFRHWH/ND8LPhglfoc0MOReXLho+cfzwHCJgnfeL2X5Gg8HZ/S0ym9FqFVcKmYmKcYim5SKoIpIURnLTyggHqYoH7ERR+oP3l+yD/iSxMnUBPyPfukZcrX5Q8eIirCxUNEJi2f//SV88ElyVuC8uQrWdcj75UC8V+fNLADCz0inpGfLIzN3+X6wtY7PyTOYoC5gversionMinorsCuZ5/qYpYEjMumSIhfF7418Z+Mr5R+EjyQ8sCemmXZqg73fKxXR6qRgQhmmQyGLlKng/Ma84k3OEOr+V/jBz5X5vZD7H35L5jTJWyezyjcpD1/3fyjX32i4QkVPYvWJ5qeTkXUqcB/a7Cf0G8Oshzfx1SH+M5PUP8Z+Sdzn9/D28/gs=</con:value></con:property><con:property><con:name>retire_assert</con:name><con:value>SAML2 assertion=nVdZc6pME773versionMajorieS8sAggtWkio2FRWN4MrNWzgMi7LJsOmvfweNHpOTnC/vd6XT09P99ELPM8/I8L1mj0MIxokbBlVZfKn9s6ObVKezazVIyFINhmyDRrfFMA2GYRlmZ+1Yq8XWqjJCKZQDlBhB8lJrkhTdINsNil2QnR5N95jmE9Ol9Vp1BWOETWOVJ7JWLXwvQL2L25daGge90EAu6gWGD1EvAT2NUyY9rNkzbphqr89XlBeH8auTJFGPIMCTCQH0PPAEQp94Jj7oPJuop7l2YCRpDN99muil9n42z/OnnH4KY5tokiRJkCyBdUzk2r9qr5XbYWjKgRVe14IRhIELDM89GyUoBSZOaFY5zw5jN3H8b0xTBEWWphuwAA1AMcGvGvHbwQXdDy19ABkjo4Ecg7oZU6EFYxgAWF2q8kvt188qeD27iI0AWWHso0/r/wYJBhn0wgiaDXSL7Ibu5xa/SNfrMwQ9OQBeitwMTss2iQwAUfUthpZbTFyEm89E1Uv5qwW6dRgE/6Ukz8QjTgyb+CIzomtDlPw/9Xqs1dXKyvBS+EquYqe+ynZTYspNDGE8L4w1suP8uLdfLhAela+g7qV+X39u1HtfvR9S+fNYP+/71hkO9vT2kOh+2NlClW4XzHQy49k34yREwmmmuXKsJ/N2fGzyszFxXLfDeVPlVWuxnSYsE9sgqbiSeETUUY9zyG6GEU2Qe6E/G0yCtXtaa3Hbm4yccHfWgLskO0OVifaplq11lZkBKtjb0flEtDyTbCNnZFROZ1/S9CSjQZ3huakyy5cvversionMinorN6jKGMawxPlyDL/5sWyYpGYtwXQjkpLPx5JvBVkWWhLgoCBwWby2Wes2V+cuamvH04Ogd3wOYkz82XfU7kTorK5aK9FVfz+VjKzdXK01dyv88rKpMPua1YwRuiVKxEfTMijbUebZt9Utd43tyo4Y4eRebwkA8dMFUWSj5dyCdlLxXThUSuLzK7wOuzsleo2WJJV9Z7nlVUKRfzi0dRyp2pvlaj7ZLNwVmaKxwz4KilJDjKcOGvKECrDthLE4U7XOS8owirlVJIC+6twtvTFY5tIfT1CPhmtPM958H4EBtfmIPVaTfwUv0s7RVBGgjacaDJO1qcSyNO3S5369XBWPezChhOud3No9tyjU2Y23o3F+fb0TjUZScDU24u8fycw+kiOUUejLhwwHMKw7nFWdjz7VAw+zkxaqJKnfUG7c3JPW6QMSA9g+p2qe1k3X47tkUpqOvjdLd3FGfTn9XHmpkt2YQ9b1FWz9qGS4EisuYbaZiMC2s41yq7N7HYgGHdtEeEd2b7sdIZcfH55HiKrSbr9gyddq5lrfnNjPE6lqfQamR5VnRC9UU4P8Rkm4d0k9iesnFS4WyF57jBfrnn5wrfLZNqyvl8q/AG15eSlDvvm8m4uTqOhpkHtjQXFuP1bH94L4wp5hJP5HMJt5VU6YqcWRZhqC2l/p5b8rYd87bU5+dA5OZbeZxvcb6WQ6z8OY/9Sx5tieckWufa7LBCL0k2mSUaw3CngF8GfdZRjsXabPtk5wiliTaNmFxBUyvQ1+FB8d14GafacjyeTordIh0c9nhWWaQ2zmi9ImWHiHOn44VzEEPReIu22ySqByAGiRz5ilycZzrad92dT47qLYp/I0XQaS79Xb4cGJI+jm2NGg/V4I3usBWUWqehX99383V9obWjjikElng6EXq8IkMu7LNq62gWzebBWeaTdm6NuMPOaE4Lj+VPrDTWFyBX5+O15tdblVY2mfjkeUEw02iWa4OckebzOm3yi+ECRbG7Tbt2Ec8Cs7k1knamk6u2G3kHtpkeFkxEr2wfF+stM6OO8laZMxug+3YnAiNCJTJO6lgTeXDanY1z5M/AdYB+ng534XV+EI+T5cPouZEODXcrBMltWV5Asljt41vBSP5OYEqJazasi2ovKlkQSmCQ1F7LUyV56aWY4rhmD18Z17XY74hip9kVu11OohhRIhmS6pMc2WLZjtgSbizniuITRCEMLLf0VfK46y31d4DA7yEYmDBuZGEKHIhqf7FY5qsqByq+fsMAwUWIeSJFdlu0yIptVqCojtBvMgLVpwVRovoU3e4Lteo0TGbBLOasBMYfOCJFfuCIKgRu5MKSSJa3KcLXKUpwSo5GliYe9ZQZTwFMMdWMS7bXazLdFoFcP/JgCZjwQzP14FPkRJcEEej622wYAF2kqrT4R9aEy03/bYif927ZwDqmWyqgMh4e4orCLwgvfQvm+6Dpx6Bv5rnUdMsLHac2iversionMajorwRfJx63fHlK1ybxcc1Q3yXfOz4INV4nNAd0dm5oJ7z9+fA5hNYr7xeivJ0Xg6PqVZll6K0Cm5VIzNExRBtgkNghQTotMiPMCAuJsgfsRF76g/eb7LP+JLEyfQEvw9+7hlqpflDx4iGkTlQ0TGLV/89JXzwSXOWwKL5CuZ4OH3Son4r08a0AOlHha/4Z88jM3f5frC1oMfHGc5wNzALlcl8zx90xQgxGZdPMTC+NH4Vwa+cv5ReE/yHUuCu2mXJvD7nWo5nV5qBgBhGiSyWLsIHifmBWdyimDvt9IfZi7c753MF+hbMr9RJhqeXb5Ru+u6/1u54V7aBUB8CrkXLC+1Ar9LsfPAfpjQ7wC/HtId4W9D+mMkr3+I/5Q85PTz9/D6Lw==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeUndoRequest" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeUndo API"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
if (testProject.getPropertyValue("versionMinor")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("versionMinor")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
}


//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMerge").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeUndo",CallingTCase.getPropertyValue("expectErrTypeAccountMergeUndo"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeUndo_API">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeUndo");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeUndo"><con:settings/><con:config service="AccountMergeUndo" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Undo" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeUndo" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeUndo');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;
	case "FORBIDDEN_SURVIVING_ACCOUNT_HAS_BEEN_MODIFIED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:SurvivingAccountHasBeenModified";
		errorReason = "Changes have been made to the Surviving Account since the Merge happened";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SurvivingAccountHasBeenModified";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>424ec930-ca02-4bff-8ed5-51aa458ee303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_nodes" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHversionMinordpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13versionMinoruh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/MversionMajorseavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_nodes" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#Coordinator_Schema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                              log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHversionMinordpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13versionMinoruh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/MversionMajorseavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageUserConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2eeb936-13ad-4f02-a213-128d8a600f31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS_API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bedcd1a5-27e2-4ca6-b564-41bb05d6ffd5">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("audience",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);

tC.setPropertyValue("expectErrType","SUCCESS");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

tP.setPropertyValue("audience",callTS.getPropertyValue("audience"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));

if( tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
}
else
{
	tC.setPropertyValue("tokentype",URLEncoder.encode(tP.getPropertyValue("urntokenType_userpassword"), "UTF-8"));
}

	</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Establish pem">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="POST - STS"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#Coordinator_Schema}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#Project#audience}"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

/*
 *if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
  
	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" disabled="true">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = true;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection
log.info "doConnectionClose=="+doConnectionClose;
if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
log.info "doContentLocaton=="+doContentLocaton;
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	log.info "Path=="+b.getPath();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	//assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
	}
}</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
log.info  "startAssert: "+startAssert;

if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("SAML",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
	tC.setPropertyValue("NODE_USER_ID",null);
	tC.setPropertyValue("NODE_USER_ID_FULL",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
			tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("NODE_ACCOUNT_ID",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("NODE_USER_ID",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>">
        <con:settings/>
        <con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");


String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);
// finally, URL encode it
tC.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctID = tC.getPropertyValue("NODE_ACCOUNT_ID");
String userID = tC.getPropertyValue("NODE_USER_ID");

callTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
//callTC.setPropertyValue("SAML_USER1",tC.getPropertyValue("SAML"));

if (acctID != null &amp;&amp; acctID.length() > 0) {
	
	callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID1",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
	//callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
	//callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_Firsrt_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>audience</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>account_firstuser_legacy20141231_1420015984014</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>3678</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value>_732606f9-3702-470e-9ecf-2bbb514a18ba</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_fda8ad9b-40d7-40cd-9add-2029bb78454d</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_fda8ad9b-40d7-40cd-9add-2029bb78454d" IssueInstant="2014-12-31T08:51:09.418Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_fda8ad9b-40d7-40cd-9add-2029bb78454d"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>oGEvttwmhXX6uHA0SlcexssY4NA=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>LW8TklnNQ93nqFYUguxlMlq9BzDLrFb9G/qPIuHrg011lK0NSwomdcV//Ia2QeBwKjW+uiBJYx0ZxAKv9Uc6EDeSrS0nzx0mNOq1Zd3LX5cC1ppH3G7YfXAwTVhq7yAFbxtVqvnKu+Oo4xtUZQJ/NZjb3ZxnUL+v7MKkS6CAE4E=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:0B8034E5B7325FEFE05305991F0A7CC1</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_iook3jrn6dq11b5ifbstzm799" NotOnOrAfter="2014-12-31T11:51:09.418Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-12-31T08:50:59.418Z" NotOnOrAfter="2014-12-31T14:51:09.418Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:ACCESCS</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:ACCESS</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:COO</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DECE</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DEV</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DEV_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET_CS_1</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://p.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_fda8ad9b-40d7-40cd-9add-2029bb78454d</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-12-31T08:51:09.418Z" SessionIndex="_fda8ad9b-40d7-40cd-9add-2029bb78454d"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>username1</con:name><con:value>firstuser20130726_035156</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=pVddc6I8FP4rDr3cQYIfVZjqDCJu3Vpti+22vdmJIWpaSJQEpf31b4LKqq19XXsDk8P5eM7JycnDBYdRWLIdznEsCKOFNAoptzNpQ0tiajPICbcpjDC3BbJ957pnl4rAhhsTrdBtN7Q/4wDWYWCN9AoIavKBAt2CQaCXQMkajWr1SrUSSFXOE9ylXEAqGloJmBXdLOllcwjqdtW0gVWsmPVnrfCAYy59S5Ui0NagUt7QpkLMbMNYLpfFZbnI4olRAsA0Hq97PpriCGrNi1VGWaC4udZHxQAjHIaoiFhkXBg7OhcBt30yoVAkMV7HCg7FAgawDKkTcDI503JbHHTpmGVLF1JGCYIheYeqPtdYTFlQcMIJi4mYRgeTMIFyrOMU6cis0DPN2IV2pKMdhDGHOp9Cc+3rDo9xjCnChfu7bkM7O27XMtNhDCkfszjiu8t/w4PpAodshgOdb9JaQzve4SeVal5gZHcpChNOFrivmnUGEebr3cToeFeFmxiPSdojXDZoyhU6Yxve3nJVjTaZYC5O2aCtzVk5eYBhgpvsp7cQYhlNHx/Pk0sH+CHCKedPlb7TyABsK2eCfGtXy72mzJtoZdH7XR++hrR/a5XpvPN0P0nS8DqcW633di/ujKyfxvymm1zGE2Ca4RXo+0sWBejBMLqwdItby6uX3z8S0vr1lILn1LlaWPfo3GtjP/YBfU9B1B/Mzeeg3HusIteczS7LP2tP40dnOXyYzmtvTmeUiof5gl4lPwaskor759tfRv/5ZVR+Tul978eidn316p+7jlfxGnk6W/h3ZZsz7yejF4zEZqnaoNsudOQuQfH1MFMSEujjTNWeqeHDBaZCayorNTvsRI47EthyD1dr0KqDcsWrtmrlUrXjdTxQLYOqZZkd4NRc19wMmRWKPYguo2OiYqmRu2qbrwGiyOaYBjjWFyyRk45rX3hsQwELXXonDwGjHA+ZHM+EsdfyS0zPg7lpjqpkPOLiPapZllboMzGgg9gZCxzvzGTT3JnJdxiRGcFqcKu+5rKxuZC1mMNFIkKzuIBFihM52mM1Ze1SpV41OIlmIVZIjYgFSYiLs+ksq4zBV++SDhHPpHfeMDttB/Pa/7YpgdQJiFLgKpcWltuIP1wuwK5uEjmccGU74Y17JwmIOliyniImaIVk99PfNlH9kfeI47qe7/ob2Ln2P1ifauwOBidatj3XO9n04XTLP67/xzzVvOf4N9+x/Vbw00N/L3DvG1n3vpu1PK2nWx4IbHxx4Iz9s55HCxZkK/aGlkqCI6/E5mZSzYrzYrJYJNloqqmbP5beDUkATMPHKJEX9tuQvWJq5B6Mo9hRDnovcC7fhZeIKfUFFDiSg7SQLY+gwz7mig535Q2QHsu1d0LKsgmcis9kbiipvEL8JdtHNlJ6UnwjX0sW/038M19bcWSekg0LQidqpZjR24HGQEy6JfJOZ/G2888cfBZ8V5gXOcciZDONEoEPfymoy7qhQYRYQkW3rWWCbQKR4RRvM2z/VfrgJuMo+U8L+f+/Fp1kLYCw/NXhJPOvuKet2p9OtkjIOuhHHuJaLbNTBx4wMx5SW/EQxyvX86LsoGt+EH+UbNVpv8eb/wE=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2014-12-31T08:50:59.418Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2014-12-31T14:51:09.418Z</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2014-12-31T08:50:59.418Z</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_fda8ad9b-40d7-40cd-9add-2029bb78454d</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Notification DB Validation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="User_Notification DB Validation"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int cnt = 0;

	String emailAddress = tP.getPropertyValue("PrimaryEmailAddress").toString();
	String username = callTC.getPropertyValue("UserName").toString();
	String emailEvent = callTC.getPropertyValue("emailEvent").toString();
	
	String sql = """Select * FROM EMAIL_NOTIFICATION WHERE EMAIL_ADDRESS='$emailAddress' and EMAIL_DISPATCH_STATUS = 'Y' and EMAIL_NOTIFICATION_EVENT='$emailEvent' and USER_OID=(SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME='$username')""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;

		}
	finally {
		def results   = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info results;
	
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		
		}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.2. Account Create: Email Address Confirmed [Your UltraViolet account has been created]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet_API" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

//tC.setPropertyValue("ETagPrior",tC.getPropertyValue("ETag"));
tC.setPropertyValue("ETag", ETag);

//log.info "ETagPrior: " + tC.getPropertyValue("ETagPrior")+", ETag: "+ tC.getPropertyValue("ETag");
//assert tC.getPropertyValue("ETagPrior")!= tC.getPropertyValue("ETag");
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseTypeUserGet}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	}
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}


if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;

	} 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT

   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');

    // Following Fields returned for Everyone
    // Contact Info shwon only for CLG or Self or Portal:CS or DECE:CS or COORD:CS - kalyan 05092013
    if ( (RequestorType == "Other")  || (RequestorType == "CS") )
    {
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
            
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
    else
    {
    	    assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
  /*      
         def a = myXML.DisplayImage.DisplayImageURL;
         log.info a ;
		//def b = a.toURL();
		//log.info b;
		 log.info "Response_DisplayImageURL: "+a.getPath();
         assert  a.matches("https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=[0-9,A-F]*");
        log.info "here";
*/
        
         assert myXML.ContactInfo.size() == 1;
         assert myXML.ContactInfo.Address.size() == 1;
         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
         assert myXML.ContactInfo.Address.Locality.size() == 1;
         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
         assert myXML.ContactInfo.Address.Country.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
         if ((RequestorType == "CS") || (RequestorType == "SPLCS"))
         {
           assert myXML.ResourceStatus.History.size() > 0; 	
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0; 	
         }

   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels

   if(Requestee == "CHILD")
    {

    	  this.log.info "Getting CHILD details";
    	  
  	 if((RequestorType == "CLG") || (RequestorType == "Self") || (RequestorType == "SPLCS"))
  	 {
  	   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
         assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
  	 }
  	 else
  	  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
  	   

         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************

         //firstmask = usernamestring.indexOf('u');
        lastmask = usernamestring.length();
        
     log.info firstmask;
 		 log.info  lastmask;
        usernamestring = usernamestring.substring(1,lastmask-1);
        //usernamestring = "••••••";
   log.info usernamestring;
//        assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
         assert usernamestring == "••••••";

       //*************Verifying Masking of CHILD GivenName details ******************
          
        //firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.length();

         givennamestring = givennamestring.substring(1,lastmask-1);

       // assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
        assert givennamestring == "••••••";

         //*************Verifying Masking of CHILD SurName details ******************
          
       // firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.length();

         surnamestring = surnamestring.substring(1,lastmask-1);

       //assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";     
      assert surnamestring == "••••••";        
    }
  	 if ((RequestorType == "CS") || (RequestorType == "SPLCS"))
          {
             this.log.info "Getting CHILD CLG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else
             if(myXML.LegalGuardian.size() == 2)     	
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)     	
                {
            	   this.log.info "Getting CHILD Active CLG details for NonCS";
            	 
           	   assert myXML.LegalGuardian.size() == 1;   
           	   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
               }
           else
               {
            	 this.log.info "Getting CHILD Pending CLG details for NonCS";
           	 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "SPLCS"))
    {
    	       	  
    	    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")	
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else if(myXML.LegalGuardian.size() == 2)     	
             {
           	 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
           else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }      	
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";	
           //assert myxml.LegalGuardian.size() == 0; 	
		assert myXML.LegalGuardian.size() == 0; 	
        }
    }  
     else 
    {   
    	    this.log.info "BAU geting other's details";
    	    
    	    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH")	
          {
            if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
          else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }	
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 	
          }      	
    }       
    
  }	// end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:testStep type="groovy" name="Return_ETag_to_Calling_TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("ETag",tC.getPropertyValue("ETag"));</script></con:config></con:testStep><con:properties><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E641652A31FC5318E0401F0A05993F57:F41796B9"</con:value></con:property><con:property><con:name>ETagPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>3531</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/dececs_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E6193ACEE6A11BFFE0401F0A05995B7C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E6193ACEE7D81BFFE0401F0A05995B7C</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5F850C559F9CD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6193ACEE7D81BFFE0401F0A05995B7C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5F850C559F9CD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>RequestorClass</con:name><con:value>FAU</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>ResponseTypeUserGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6rKEn73versionMajoriuR8sAiihWkqrhpqioCF5fTuEwIMpNBgT99Wcw0ZVkJ+usfV7EaXq6v77Q880ztgK/2QMYoyT1orCqSi+1/zCcw+7Y3a7R7u7YBgvbdoOnObZhc1aXacEWZzc7taqKcYbUEKdWmL7UmjTTatB8g2mZTKvXpHtN5olrtba16hIlmJgmKk90rVoEfoh7N7cvtSwJe5GFPdwLrQDhXgp7BtDGPaLZs+6Yaq/PbyhvDpPXfZrGPYqCTzaCyPfhE4wC6pn6pPNs457huaGVZgl692njl9r73jzPn/LWU5S4VJOmaYrmKaJjY8/9VXut3DcjWw2d6G0tWmEUetDyvatVgtJQuo/sKvDdKPHSffCDaYZi6NJ0AxWwARk2/FWjfju4oftLS59AJthq4L3F3I3NkYMSFEJUXczVl9qvv6vg214zsULsREmAv6z/HSQUnpEfxchu4Htkd3R/b/GbdL0+I9hTQ+hn2DujSdkmsQURrs4S5HjF2MOk+WxcvZW/WuB7hyH4b0ryTH3ESWBT32RG8lyE0/+nXh9r9WZlafkZep0B+jJOdht+4SH5MnLsYO0HyJxMFuDlBuGj8huoR6nf118b9dFX75vcUbA9LWTYZ45qMlgp4jpUwLlIxjTvMKfuwdscgbETLgNE24lNAd2Yh7tgvlke2MPE95G58x196CyVyDAq6y531cdxn2um8mTNLBwU2dciUXPfti4zdtnczPojzCyLy/BCqcNVx2Q7aTiRj9LZ0tlgPVCvwGEO/XBwOldEXnFzWVX2o1N7M7BMuMhffsf0MYYyrhG63IIs/6/bNC9ZqfVYiOWkcMjnmaJXTVXFuiSKAIkuyFUBuKowvoKJ4B5P+6PX53NaAPpCARK4aHOQS+5GWur6SM7t5dLfLlVFEbQ5mw/ARqqQF5JcLKXtekhbq228aSr01hAEez2Pdq1hbA+O+WAPJ5qp5RNTvWgHuZiYMr26ydyCrK/aQWOm5qJVWR0EXpvLuZTfPEpyvp9sV/N4s+BzeJversionMajorDbB9wCxkca8NzGDJwNZ8Dw/yWAPHm1zYa+JyqRWyCWYVwZ0sSWymqGxjGNjxLvD3H4wPiHHT7i8vu76fba/yQRPlvmic+oa6a0m6PATzzWK3Wh6tlXKuwMEE7O4evbZnraPc3XZzSd8MR9FW3Z/hBOiyIOiApIsGmtofgqgvAI0FXnEVDwIXibaSU8MmrtR5v8+tL95pja0+7VtMt8tsxituduIkOaxvR9nusNf2a2VaHxn2ecGn/HWDz/UzZ3kMLGJHX8uDdFQ4A92o7GZSsYaDuu0OKf/KK4nWGYLketn7mjtPV9wUX3ae46yE9ZT1O46vteax4zvxBdfNSD8mNCegVpPaXM6jtAJcTQCgf1gcBF0TumVSbTXXN5pgAUVOM3A9NNNRc3kaDs4+3LRAVIxW08PxvTC2lMsClesyaSu50pWAXRZhYCxk5QAWgusmgisrgg4loG/UUb4h+VoMiPLXPCq3PLqyAOTWFnD8oNJa0Hw6TQ2WBZdQWIQKv9dOxcrmArpzQvLYmMRsruGJE25X0VELvGSRZMZiNJqMi52Z9Y8HMqsc2hidW9uKfD7GwJuMzP1RiiRrFm82aVwPYQJTNQ40tbhOt/jQ9XYBPay3GWFGS7DTXAS7fNG35O0ocQ1mNJiHs1aHr+DMuQyC+qGbr+qmwcUdWwwd6XKhtsmSjkCk8PP2yS6azeN+kY+53BmC485qTgqfFy68PNqaMJ/ro5UR1NuV9nk8DuirSbGTeJob/ZyVdb3esgVzYOI48TZZ1y2SaWg3N1bKnbf0kvNi/8g3s6PJxq2lG5Bizc523NFmFZ1dw23gdmI4pObUGcgdZ6z2L7urdY2DKXwboF+nw0P4Nj+oj5Pl0+i5kw6DdCuC6X1ZHkCqVFXIqWClfyYwpcSzG85NtReXLAinKExrr+Wukrz0MkJxPLtHjoy3tcwxfAuIstyRuoygKDLN0oxCA7rN822hI95ZzhuKLxDFKHS80lfJ495OqT8DhEEPo9BGSeMcZXCPcO0PFst8VdVwTo7fKMTIjAhP5Lu82FVoUQAixzIiUJqs0AFtsUO4YLfJgFp1EqXTcJoAJ0XJZ47IfeKIcwS92EMlkSxPU0yOU5ySlJysc5b6zNPZegpRRqhmUrK9XpPttinsBbGPSsBUENmZj57ifXxLEIXfns2GBfFNWmYX4ttB/2OEX9/dk0F0bK9UwGU4AiIFRd/wXeYeyw8xs1948d08yGyvPM9JZtPEg29IPr/63TBlpzy65fYD8R32Q/ur4JNl6mtQD2f22YOPtn/cCAihJJTj9V6Vk/V0esrO5+xWh05JpxJinmIoukMZCGaEE13M6IhC6mGC+is6+kD9xfND/hlflu5DIyWfdEC6pnpb/sVdxEC4vIuopOuLv73ofHJJ8paiIversionMajorOJvrkylIi/uOtBvZgqUfEM/LIo8T+Xa5vbH3wQ+IsZ5gXuuWqJJ+XHxoDRsSsR+ZYlHw0/p2B75x/Fj6S/MCSkm7aZSn6+U21HFAvNQvCKAtTVardBB+H5g1neolR77fSP8zc6N87ny/wj3x+rY0NMr4Cq/bQ9f63csO7tQtEZBf2blheagW5mhLnofthSL8D/HZOc4D505z+HMnrP8T/lHzI6dfv4fW/</con:value></con:property><con:property><con:name>sName</con:name><con:value>04.Functional_UserGet_SPLCS_P2</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_40040_UserGet_FUNC_SPLCS_Get_AccStatus_Mergedeleted_SPLCS_P2</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E603BD56DDEEF0CEE0401F0A07990E43</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5F850C559FACD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:basic" UserID="urn:dece:userid:org:dece:E6193ACEE7D81BFFE0401F0A05995B7C" xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/versionMajor.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>usercreate20130911_030350</GivenName>
      <SurName>usercreate20130911_030350</SurName>
   </Name>
   <DisplayImage>
      <DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E6193ACEE7DC1BFFE0401F0A05995B7C</DisplayImageURL>
   </DisplayImage>
   <ContactInfo>
      <PrimaryEmail verificationEntity="urn:dece:org:org:dece:RET" verificationDateTime="2013-09-11T09:31:03.103Z" VerificationStatus="urn:dece:type:status:success" verified="true" ID="Coordinator">
         <Value>raju.alluri@compugain.com</Value>
         <ConfirmationEndpoint>Coordinator</ConfirmationEndpoint>
      </PrimaryEmail>
      <AlternateEmail Notify="false" VerificationStatus="urn:dece:type:status:pending">
         <Value>raju.ganji@compugain.com</Value>
      </AlternateEmail>
      <Address>
         <PostalAddress>46000 Center Oak Plaza</PostalAddress>
         <PostalCode>20166</PostalCode>
         <Locality>Sterling</Locality>
         <StateOrProvince>VA</StateOrProvince>
         <Country>US</Country>
      </Address>
      <TelephoneNumber>
         <Value>+1.703598741</Value>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.703598742</Value>
      </MobileTelephoneNumber>
   </ContactInfo>
   <Languages>
      <Language primary="true">en-us</Language>
      <Language primary="false">en</Language>
   </Languages>
   <DateOfBirth MeetsAgeOfMajority="false">2002-09-14</DateOfBirth>
   <LegalGuardian Status="urn:dece:type:status:active">urn:dece:userid:org:dece:E6193ACEE6FF1BFFE0401F0A05995B7C</LegalGuardian>
   <Credentials>
      <Username>usercreate20130911_030350</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-09-11T09:30:53.000Z" ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-09-11T09:31:03.108Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping User Status to active</Description>
      </Current>
      <History>
         <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-09-11T09:31:00.871Z">
            <Value>urn:dece:type:status:pending</Value>
            <Description>Flipping User Status to pending</Description>
         </Prior>
         <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-09-11T09:30:53.011Z">
            <Value>urn:dece:type:status:blocked:tou</Value>
            <Description>User Created</Description>
         </Prior>
      </History>
   </ResourceStatus>
</User>]]></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c734ae7-5af5-42b8-9df0-6dd308e44f7c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_API" searchProperties="true" id="ae22d728-6810-4d14-9ced-5f116eb33432"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);
def nODE_ACCOUNT_ID_FULL = context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}' )
def nODE_USER_ID_FULL = context.expand( '${#TestCase#NODE_USER_ID_FULL}' )
tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:ManageUserConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));
		tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", URLEncoder.encode(nODE_ACCOUNT_ID_FULL, "UTF-8"));
	tC.setPropertyValue("NODE_USER_ID_FULL", URLEncoder.encode(nODE_USER_ID_FULL, "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#Coordinator_Schema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVddc6I8FP4rDr3cQYIfVZjqDCJu3Vpti+22vdmJIWpaSJQEpf31b4LKqq19XXsDk8P5eM7JycnDBYdRWLIdznEsCKOFNAoptzNpQ0tiajPICbcpjDC3BbJ957pnl4rAhhsTrdBtN7Q/4wDWYWCN9AoIavKBAt2CQaCXQMkajWr1SrUSSFXOE9ylXEAqGloJmBXdLOllcwjqdtW0gVWsmPVnrfCAYy59S5Ui0NagUt7QpkLMbMNYLpfFZbnI4olRAsA0Hq97PpriCGrNi1VGWaC4udZHxQAjHIaoiFhkXBg7OhcBt30yoVAkMV7HCg7FAgawDKkTcDI503JbHHTpmGVLF1JGCYIheYeqPtdYTFlQcMIJi4mYRgeTMIFyrOMU6cis0DPN2IV2pKMdhDGHOp9Cc+3rDo9xjCnChfu7bkM7O27XMtNhDCkfszjiu8t/w4PpAodshgOdb9JaQzve4SeVal5gZHcpChNOFrivmnUGEebr3cToeFeFmxiPSdojXDZoyhU6Yxve3nJVjTaZYC5O2aCtzVk5eYBhgpvsp7cQYhlNHx/Pk0sH+CHCKedPlb7TyABsK2eCfGtXy72mzJtoZdH7XR++hrR/a5XpvPN0P0nS8DqcW633di/ujKyfxvymm1zGE2Ca4RXo+0sWBejBMLqwdItby6uX3z8S0vr1lILn1LlaWPfo3GtjP/YBfU9B1B/Mzeeg3HusIteczS7LP2tP40dnOXyYzmtvTmeUiof5gl4lPwaskor759tfRv/5ZVR+Tul978eidn316p+7jlfxGnk6W/h3ZZsz7yejF4zEZqnaoNsudOQuQfH1MFMSEujjTNWeqeHDBaZCayorNTvsRI47EthyD1dr0KqDcsWrtmrlUrXjdTxQLYOqZZkd4NRc19wMmRWKPYguo2OiYqmRu2qbrwGiyOaYBjjWFyyRk45rX3hsQwELXXonDwGjHA+ZHM+EsdfyS0zPg7lpjqpkPOLiPapZllboMzGgg9gZCxzvzGTT3JnJdxiRGcFqcKu+5rKxuZC1mMNFIkKzuIBFihM52mM1Ze1SpV41OIlmIVZIjYgFSYiLs+ksq4zBV++SDhHPpHfeMDttB/Pa/7YpgdQJiFLgKpcWltuIP1wuwK5uEjmccGU74Y17JwmIOliyniImaIVk99PfNlH9kfeI47qe7/ob2Ln2P1ifauwOBidatj3XO9n04XTLP67/xzzVvOf4N9+x/Vbw00N/L3DvG1n3vpu1PK2nWx4IbHxx4Iz9s55HCxZkK/aGlkqCI6/E5mZSzYrzYrJYJNloqqmbP5beDUkATMPHKJEX9tuQvWJq5B6Mo9hRDnovcC7fhZeIKfUFFDiSg7SQLY+gwz7mig535Q2QHsu1d0LKsgmcis9kbiipvEL8JdtHNlJ6UnwjX0sW/038M19bcWSekg0LQidqpZjR24HGQEy6JfJOZ/G2888cfBZ8V5gXOcciZDONEoEPfymoy7qhQYRYQkW3rWWCbQKR4RRvM2z/VfrgJuMo+U8L+f+/Fp1kLYCw/NXhJPOvuKet2p9OtkjIOuhHHuJaLbNTBx4wMx5SW/EQxyvX86LsoGt+EH+UbNVpv8eb/wE=</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/User/urn:dece:userid:org:dece:0B8034E5B7325FEFE05305991F0A7CC1/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_API" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:UserLinkConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33Kwz3o2EzOmB0d0QhoKioDI4vJxBKRJmkQNCvP4W2bu3dvW+f+6SVlZW5ciBr1SsyfY9uA4RgnLhhUJaFt8o/LRquOabeqrVY2KyxNM3VOBtaNYtpbWjKXrNNq1kpywilUA5QYgbJW4UmKaZGNmt0w6DoNs21SfqFbFCrSnkGY4RNY5UXslLOfS9A7Yvbt0oaB+3QRC5qB6YPUTux2jpQhm2s2TZvmCrvr1eUF4fx+zZJojZBWC8YEvQ868UKfeKVeNJ5tVFbd53ATNIYfvi00Vvl42yWZS8Z8xLGDkGTJEmQHIF1bOQ6vyrvpdthaMvBJryuO2YQBq5leu7ZLEApMNmGdhl4Thi7ydb/xjRFUGRhugZznD6KDX5ViN8OLuh+aOkJZIzMGtqa1M2YBjcwhoEFy1NNfqv8+lkFr2eN2AzQJox99Gn93yDB4Ai9MIJ2Dd0iu6H7ucUv0vX+Cq22HFheitwjHBVtEpkWROVJDDduPnQRbj4blS/lL+fo1mHQ+i8leSUecWLYxBeZEVwHouT/qddjra5WZqaXwnc1FrhcZSxU1xxDyHtLoaUp41jP5su3C4RH5Suoe6k/1p8b9d5XH4e6LqsPIzmlFcI5S1yLGXDOStq3Zrpf7fEJT/fH+czprrSlRpGMv/Z6+aRbDXV90pUMjVn1grlsJvN0vHazUpOOBYXhlRgIBn0YZEgd+QfeHs+0eViNXGU8t4j0vDn3TXkYLB0tCNXG2WT0+mgvOZOtK9H9wzRTpozUlUotKdO0/ihr5Q3KhJE485ZvversionMinorN6jKGIawBPlyCL/4s6yQlmYt4XnWJSbPDnmcB3RZY7VaHTAbDjgEzmgSPzwzMY8c7+sN27XS4jeaBOJSCAk6KBTHCWwkxVB2Jmz2beaiZLEq9obNYDS6GENwQxnwmrRZ8056toSUvkSud5e6GFa6Yf2b191ttaI8VQspEhn5SdmI8MkZxfZE6O12dlp1BjY8qU5jueUzQxE7KLR0HMtqPVXIuWUy6zzqKqALYLqKnY2So9w59RFqNtrZ04VMD+Iue3Smc2U3LRAJMS74xmODajI60iy7ejte9tH4z3sHHD7s5O666Xrs7iTumI3Y5+6OrymhFUsQ+05XQ9n+3NuXQsWb0RWN88unXXXISZs2plgrrsD8KVvD1aI6CKPK8CnC4SKHK3D8IuDxQWuPm5s+MbYceWMqJPo1KV87qNxck9LJDZJT2TarWo5XDemBwaghhUV4N0vdsq24U0rg50+zjlEu68RMfqsWG6lJVHG3Uh9pJBvumpemk9EfKF1avaTp/wzpwUK80+iM+nrac4WjJvjNFp7W42c34xZr3mxlMYLdp4m+iEqkao7mOywUOGJpan4yApAUfhAejupjteVfhWkVRbztSlwptAEpMUnHd0MqBnh37v6FlLBoT5YD7e7T8KYwuZyBOZKuK2EkstAdhFEXr6VJR2YMo7Tsw7osSrlgDUpTzIljhf0x5W/pxH6ZJHR+SByKxAg+uVmCnJJeNEZ1lwCvhpIHFb5ZDP7YZPNg9QHOqjiM0UNNoEq3m4V3w3nsapPh0MRsN8baTd/Q7Pqg2pD47MqiQe9xFwRwNjuxdCwZxEy2USVQMrthI58hU5P49XaNdy1z7Zr9YpfkIKVpOe+uts2jXF1SB2dGrQ04IJ0+RKKN2cen5118rmVUNvRE27E2yE04lYxTMyBKHEafWDndP0fjvNho1s0wf7tUmPco/jT5w4WBlWpqmDOR439VL9OBz65Nkg2FE0zvRuxoqqWmVs3ugZKIrdZdpy8ngc2PTSTBrHFTlruJG35+h0b7ARM3N8XKzJ0Y6ayqSksgtr5TvNyOoTGnEEYnMzlLun9dk8R/7Yug7Qz9PhLrzOD+JxsjyNnhvp0HG3Qiu5LYsLSBbKEr4VzOTvBKaQuHZtc1FtRwULQgkMksp7caogL+0UUxzXbuMr47oW6QZgGyQrUvWCT3EiyZKURAKyznEkz/M3lnNF8QliJww2buGr4HHXW+rvAC2/jWBgw7h2DFNrC1HlLxaLfJXlQMPXbxggaISYJ1IdUaBovikAukmzAiuyDUkkKYHnmgILBLpSHoXJOBjHYJPA+Jkj1p84ogYtN3JhQSSL2xTh6xQlOCUH85gmHvVyNF8CmGKqGRdsr02zrTqBXD/yYAGY8EM79eBLtI0uCSLQ9ZeumRa6SDXR+EfWO5eb/tsQP+/dsoF1bLdQQEU8PMQVhX8Q3la7fgvm+6Bbj0HfzIPUdosLHac2iV3riuR563fHFK1ybxcc1Q3yXfOz4Mkq8TmguyP76Fr3nr8/BzCbxHzj/VaSg/lyeEmPx/RShGbBpWJsnqAIskno0EoxIToZ4R4GxN0E8SMuekf9yfNd/owvTbaBnuDversionMinorcctU74sf/AQ0SEqHiIybvn8p6+cJ5c4bwnMk69kHQ+/VwrEf33SWG2r0MPiCf7Jwtj+Xa4vbD34wXEWA8wNnGJVMM/TN01hhdisi4dYGD8a/8rAV86fhfck37EkuJvWaQK/3ykX0+mtYlpWmAaJLFQugseJecGZnCLY/q30h5kL9/sg8zn6lswvlKGOZ5dvVu667v9WrrmXdrEgPoXcC5a3So7fpdh54DxM6A+AXw5pUuz8bUg/R/L+h/hPyUNOP38P7/8C</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E26A4604E0EC0139E0401F0A05990BBB</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E26A4604E0EC0139E0401F0A05990BBB/User/urn:dece:userid:org:dece:E26A4604E1520139E0401F0A05990BBB/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/DECE/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE26A4604E0EC0139E0401F0A05990BBB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43c5dbf9-3574-4373-9d3f-f1b49a7247c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateGeoPrivacyAssent" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:GeoPrivacyAssent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:GeoPrivacyAssent", "UTF-8"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateGeoPrivacyAssent"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateGeoPrivacyAssent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateGeoPrivacyAssent');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "versionMinor: "+tP.getPropertyValue("versionMinor");
			if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc7LMEr73versionMajorh+l5YBBFGsJFWsrrgBbjencBgQZZNh019/BhONyZu8J9+psgqn6el+eqHnmWdk+l6zyyME48QNg+pAeqn9p0XZnRbkOo0dDZkG06HbDdNu2g2aBiRtUZ2WbcJadYBQCgcBSswgeak1SYpukFyDonWK6tL413liSXZbqy5hjLBprPJE1qqF7wWoe3X7UkvjoBuayEXdwPQh6iagq/HquIs1u+YNU+31+Q3l1WH8uk+SqEsQ4MmCAHoeeAKhTzwTn3SeLdTVXCcwkzSG7z4t9FJ735vn+VNOP4WxQzRJkiRIjsA6FnKdf2qvldtmaA0CO3xbi2YQBi4wPfdilqBUmOxDq8p7Thi7yd7/wTRFUGRpugEL0AAUE/xTIz4cXNH90tInkDEyG2hvUjdjC2jDGAYAVo3F4KX2z+8q+LZXj80A2WHsoy/rfwcJBhn0wghaDXSL7Ibu9xa/SdfrMwTdQQC8FLkZnJRtEpkAouoshrZbjF2Em89C1Wv5qwW6dRgE/6Ykz8QjTgyb+CYzkutAlPw/9Xqs1ZuVpeml8DWGgkcvx0fOPIadwDr0nTYrM+11vWe8XCE8Kr+Bupf6ff21Ue999b4pkzmZB5p4KGZLCNvcWOdc0W/FhX9smgddssYm59bjE8f2xpFNOFPTzF2xfdHksZHl24O7dE+GN9oudVKpGJa/zE0YNElxbgejdmIriQfBsi4QGUdq65XuNS8xSXeOljijVN3KzojQDLZoZZp3tlMxT2bjcaC0hSSqqEdmMSv8szUT16uJsfLjzstHTI8xlHGN4PkaZPl/3SI5yUzM+0IsJ4WNP88EvqqDgViXRJGHosPnA4F3BsL4wk8E53jaH90el5MCPzcUXuLP6oLPJWcjLefzkZxby6W3XQ4URVAXTN7nN1IFv5DkYilt10PSXG2jTVMht5ogWOtFuKOHkdU/5v09mKi6mk/0wVk9yMVEl8nVVeYUeH1RDyo11Q26sjoInLqQcym/epTkfD/ZrhbRxuBycJHnKs/0eMqQxb3a1/0lBejFHhzkscofr3Jhr4rLpVrIOj+rCM5kiWPTRWUbAd+Kdr63fzDex8Z1q7c873peur3IB1WUe6J26mmDHS3N5SG/2Bi71fJorpSsAvoTfnfz6LZccx3mzraTS/PNcBRuB/sMTPi5LAhzHqeL5NVBb8iHPYFXGd4tLuJBYEPRUnJi2ESVOuf12PXZPa2R2SM9k+p0qM14xc5OrCQH9e0o3R326n6tTOsjzcoMLuEuG5TVM9Z0KVBE9nwt95NRYffnWmU3k4o16NctZ0h4F06J1faQjy/nvac6i2TFTtF559r2SlhPGa9teyq9iGzPjs6orofzY0yyAqSbxOacjZIK76gCz/cOxkGYq0KnTKo1yOcbVTB5RU5S/nJoJqPm8jTsZx7Y0HxYjFbTw/G9MJaUywKRz2XcVnKlI/FWWYS+ZsjKgTcEx4kFR1aEOZD4+WYwyjc4X0YfK3/No3LNoyMLvExveZbrversionMinoriD5JJpojEMfw4EI1C4vXoqVhbrk+0TlMfaJGJyFU3sYLsKj6rvxkacasZoNBkXOz3tHQ94VtmkNsrobUXOjhHvTkb6/iiFkjmLNpskqgcgBskg8tVBcZlu0aHj7nxyWG9RwoyUQLtp+Lvc6JnydhQ7GjXqL4IZ3eYqKLXPfb9+6OSruq6xUdsSA1s6n4ltvCRDPlS4RetkFc3mcW/kYza3h/xxZzYnhccJZ04ebXWQL+ajlebXW5VWNh775EUnmEk0zbVezsjzeZ22BL2voyh2N2nHKeJpYDU3ZsJmW3LJupF35JrpUWcieun4uFizzIra6qwyZ9Zg6zvtCAyJBZHxctseD3rn3cW8RP4UvA3Qr9PhLnybH8TjZPk0em6kQ8PdCkFyW5YH0ECqKvhUMJO/E5hS4loN+6rajUoWhBIYJLXXcldJXroppjiu1cVHxttaZhm6KVG0KFEcJzZZmWRISiF5ss1xLNlWbiznDcUXiGIY2G7pq+Rxb6fU3wECv4tgYMG4kYUp2ENU+4vFMl/VQbDAx28YIKiHmCfKtEQxrESSvNJqSzSvKBwtCgzNtHmyo7TYWnUSJtNgGvN2AuPPHJH5xBEXELiRC0siWZ6mCB+nKMEpOZlZmnjUU2Y+BTDFVDMu2V63yXRaBHL9yIMlYMIPrdSDT9E+uiaIQG/PZsME6Cp1EYjCODE96nrY/xjl13e3hGAdyy0VUBmSAHFR4Tect3mL5+e4249x38zzqeWWZzrObhK74A3J51cfTVN2y71jPgK7Ib9v+Cr4ZJz4Gtfdn5W54N7994sB5pWYebzeinMyn05PaZal13K0S1YVY/MERZBtQoMgxdTorIdHGBB3E8SvWOkd9RfPd/lnfGmyD7QEf9k+bp7qdfmLK4kGUXklGeDmL3573/nkEuctgUXynUz08M2lRPzXyw3oglIPi2f4kYex9VGub2w9+MFxlqPMDZxyVXLQ8w+9AUJs1sXjLIwfjX9n4Dvnn4X3JN+xJLibdmkCf35TLefUS80EIEyDZCDVroLH2XnFmZwj2P1Q+sPMlQW+0/oC/Ujr1+pYw1PMN2t3Xfd/Kzfca7sAfKHF+lcsL7UC31Cx88B5mNXvAP8Y1wwlsyRDCYzEPI5rhpM+PslPkbz+If5T8pDTr9/D638B</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4DAFF5120AEA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1/User/urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA/Policy/urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:/certs/iscportal1_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4DAFF51203BA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>E6432D13CD199C26E0401F0A0799607F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f62f720-8990-433e-b87f-e5bfb4b7fa27</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_UserStatus" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def status = context.expand( '${#TestCase#Status}' )
def userID = context.expand( '${#TestCase#User_OID}' )


def dbHost = context.expand( '${#Project#targetsystem}' );

a = new dbUtils.dbUtils(log,dbHost);

String sql = """update ACCOUNT_USER set STATUS = '$status' where USER_OID = hextoraw('$userID')""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);
</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>suspended</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E718CE45D3DCBA21E0401F0A07990C13</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02003_AccountDelete_FUNC_CS_Deleting_an_account_when_user_is_not_active_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_CS_P2</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_AccStatus" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Update_AccStatus"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def status = context.expand( '${#TestCase#Status}' )
def accountID = context.expand( '${#TestCase#account_oid}' )

log.info "account Oid :  " + accountID;

def dbHost = context.expand( '${#Project#targetsystem}' );

a = new dbUtils.dbUtils(log,dbHost);


String sql = """update ACCOUNT set STATUS = '$status' where ACCOUNT_OID = hextoraw('$accountID')""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);
</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>pending</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>account_oid</con:name><con:value>E70BDA97576012CAE0401F0A07993C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02001_AccountDelete_FUNC_CS_Deleting_an_account_which_is_pending_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_CS_P2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_Policy_Status" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Update_Policy_Status"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def status = context.expand( '${#TestCase#Status}' )
def userID = context.expand( '${#TestCase#User_OID}' )
def Policy = context.expand( '${#TestCase#Policy}' )

def dbHost = context.expand( '${#Project#targetsystem}' );

a = new dbUtils.dbUtils(log,dbHost);


String sql = """update POLICY set STATUS = '$status' where CREATED_BY = hextoraw('$userID') and POLICY_CLASS = '$Policy'""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);

</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E70B6EFA896AF8D4E0401F0A07996D2E</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02014_AccountDelete_FUNC_NonCS_Deleting_an_account_No_ManageAccountConsent_Policy_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_NonCS_P1</con:value></con:property><con:property><con:name>Policy</con:name><con:value>105</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RenameTCs" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Rename"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "07.User_Get_GeoProfile_Portal";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\rshrivastava\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{               
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

                newTestCaseName = br.readLine();
                log.info "Input Test Case Name: "+newTestCaseName;
                
                                targetTestCase.setFailOnError(true);
                                targetTestCase.name = newTestCaseName;    
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_Responses"><con:settings/><con:config><script>import java.io.*;

//def commonTestStep = "User_Delete_API";

def testCase  = testRunner.getTestCase();
def TSList = testRunner.testCase.testSuite.project.getTestSuiteList();
def TSCount = testRunner.testCase.testSuite.project.getTestSuiteCount();

//def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
//def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();


log.info "TS List:"+TSList[0].name;

//log.info "TCCount:"+TCCount;

for(k in (0..TSCount-1))
      {
            def testSuite = TSList[k].name;
            def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList(); 
            def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();
            log.info "TestSuite  " + testSuite +"  TCCount:"+TCCount;
            log.info "TSList[k].disabled " + TSList[k].disabled 
            
            if ((TSList[k].disabled).toString() != "true")
            {                              
                  for(i in (0..TCCount-1))                                                                  
				{                                                                                         
                  	try {
                        		def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
						def targetStep = targetTestCase.getTestStepByName(commonTestStep);
						log.info  testSuite + " " + targetTestCase.name+" "+targetStep.getPropertyValue("ResponseType");         
                  		}
                  	catch(Throwable e) {
                        log.info "Exception : " + e;
                        }                                                                              
                   }                              
            }
      }
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_DB_Validation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="SAML_HISTORY_STATUS_Validate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#DBHost}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' )
def status = context.expand( '${#TestCase#Status}' )

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseTypeUserDelete",callTC.getPropertyValue("ResponseTypeUserDelete"));

def responseType = tC.getPropertyValue("ResponseTypeUserDelete");

log.info "Response Type is:  ----> "+ responseType;


if (responseType == "SUCCESS")
	{              
		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);

			String sql = """select accUsr.status USER_STATUS, usrHstry.status USER_HISTORY_STATUS, 
			usrSAMLAssrt.status USER_SAML_STATUS, usrHstry.DESCRIPTION 
			FROM ACCOUNT_USER accUsr INNER JOIN USER_STATUS_HISTORY usrHstry
			ON accUsr.user_oid = '$userID' and usrHstry.status='deleted'
			and accUsr.user_oid = usrHstry.user_oid INNER JOIN NODE_USER ndUsr
			ON accUsr.user_oid=ndUsr.user_oid INNER JOIN node_user_saml_assertion usrSAMLAssrt
			ON ndUsr.row_oid = usrSAMLAssrt.node_user_id""";
			
			log.info sql;
			
			results = a.SelectFromDB(sql,dbHost);

		//b.dbConnClose();
		assert results.length() > 0;
		log.info "results" + results;
		
		def myXML = new XmlSlurper().parseText(results);   
		def i = 0;

		for (i;i&lt;=myXML.ResultSet.Row.size()-1;i++)
			{  
				if (myXML != null) 
				{
					log.info "User Status from ACCOUNT_USER table is -----      " + myXML.ResultSet.Row.USER_STATUS[0].text();
					assert myXML.ResultSet.Row.USER_STATUS[0].text() == context.expand( '${#TestCase#Status}' );

					if(context.expand( '${#TestCase#Status}')=='deleted')
						{
							assert myXML.ResultSet.Row.DESCRIPTION[0].text() == "User Deleted" ;
							assert myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							log.info "Description from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.DESCRIPTION[0].text();
							log.info "User status from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text();
							log.info "SAML status from NODE_USER_SAML_ASSERTION is -----" + myXML.ResultSet.Row.USER_SAML_STATUS[0].text();                                                   
						}
					else
					{
						assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == "active" ;
					}
					log.info "User DB Validations Passed"; 
				}
				
				else 
				{
					assert XMLbody == "";
				}          
			}
	}
else
	{
		log.info "DB Validations skipped due to non SUCCESS scenario";
	}

</script></con:config></con:testStep><con:properties><con:property><con:name>dbxmlresponse</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91160</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E52C7ACD89FD834FE0401F0A07991922</con:value></con:property><con:property><con:name>dbxmlresponse_rowOID</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
    <Row rowNumber='2'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00038_UserDelete_FUNC_CS_Basic_Delete_Full_200_OK_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_Access_Portal_CS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_User_CLG_Details" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Update_User_CLG_Details"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#DBHost}' );

def nodeuserID = context.expand('${#TestCase#UserID}' );
def clguserID = context.expand('${#TestCase#CLGUserID}' );


a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

//log.info b.userGetfromNodeUserId(nodeuserID);

if(context.expand( '${#TestCase#Action}' ) == "addclg")
{
sql = """DECLARE
BEGIN
insert into USER_LEGAL_GUARDIAN values(sys_guid(),
'$nodeuserID',
'$clguserID',
'"""+context.expand('${#TestCase#CLGAttestationStatus}' )+"""',
sysdate,
null,
null);
commit;
END;""";
}
else
if(context.expand( '${#TestCase#Action}' ) == "removeclg")
{
sql = """delete from USER_LEGAL_GUARDIAN where USER_OID = '$nodeuserID'""";
}

a.dbConnExecuteUpdate(sql,dbHost);

</script></con:config></con:testStep><con:properties><con:property><con:name>Action</con:name><con:value>addclg</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>UserID</con:name><con:value>E4890111840E60DCE0401F0A05993DE1</con:value></con:property><con:property><con:name>CLGAttestationStatus</con:name><con:value>pending</con:value></con:property><con:property><con:name>CLGUserID</con:name><con:value>E488FA3B9A214958E0401F0A05993DE5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91162</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00002_US_UserDelete_FUNC_Pending_CLG_Delete_Self_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_GeoProfile</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_DB_Validation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

tC.setPropertyValue("ADULT_DOB_XML",callTC.getPropertyValue("ADULT_DOB_XML"));
tC.setPropertyValue("YOUTH_DOB_XML",callTC.getPropertyValue("YOUTH_DOB_XML"));
tC.setPropertyValue("CHILD_DOB_XML",callTC.getPropertyValue("CHILD_DOB_XML"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("ResponseTypeUserCreate",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("GeoProfile",callTC.getPropertyValue("GeoProfile"));
tC.setPropertyValue("role",callTS.getPropertyValue("role"));

tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_ACCOUNT_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

tC.setPropertyValue("IsMinor","");
tC.setPropertyValue("Requestee","");

def dbHost = context.expand( '${#Project#DBHost}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");

def BirthDate = context.expand( '${#TestCase#DateOfBirth}' );
def myXML1 = null;
def finalbday = null;

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

			
log.info "Response Type is:  ----> "+ responseType;

def cHILD_DOB_XML = context.expand( '${#TestCase#CHILD_DOB_XML}' )
def aDULT_DOB_XML = context.expand( '${#TestCase#ADULT_DOB_XML}' )
def yOUTH_DOB_XML = context.expand( '${#TestCase#YOUTH_DOB_XML}' )

def dateOfBirth = context.expand( '${#TestCase#DateOfBirth}' )
def privilege = context.expand( '${#TestCase#Privilege}' )


if (responseType == "SUCCESS")
     {
		Result = b.userGetRow(userID);
	
		log.info "Result Set:   " + Result		
		myXML1 = new XmlSlurper().parseText(Result);		
		log.info "Actual Rows ==  " + myXML1.ResultSet.Row.size();
		
		assert myXML1.ResultSet.Row.size() == 1;       	
		assert myXML1.ResultSet.Row.STATUS == 'blocked:tou';
		log.info "privelege ;; " + myXML1.ResultSet.Row.PRIVILEGE;
		assert myXML1.ResultSet.Row.PRIVILEGE == tC.getPropertyValue("Privilege");
		assert myXML1.ResultSet.Row.USERNAME == tC.getPropertyValue("UserName");
		assert myXML1.ResultSet.Row.GIVEN_NAME == tC.getPropertyValue("GivenName");
		assert myXML1.ResultSet.Row.SURNAME == tC.getPropertyValue("SurName") ;
		assert myXML1.ResultSet.Row.PRIMARY_EMAIL == tC.getPropertyValue("PrimaryEmail") ;
		assert myXML1.ResultSet.Row.TELEPHONE == tC.getPropertyValue("TelephoneNumber") ;
		assert myXML1.ResultSet.Row.MOBILE_TELEPHONE == tC.getPropertyValue("MobileTelephoneNumber") ;

        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#CHILD_DOB_XML}' ))
        { 
			log.info "I am CHILD";
			tC.setPropertyValue("Requestee","CHILD");
			
			BirthDate = tC.getPropertyValue("CHILD_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'CHILD';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;        
        } 
		else 
		if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#YOUTH_DOB_XML}' ))
        {
			log.info "I am YOUTH";
			tC.setPropertyValue("Requestee","YOUTH");
			
			BirthDate = tC.getPropertyValue("YOUTH_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'YOUTH';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
         } 
        else 
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#ADULT_DOB_XML}' ))
        {
			log.info "I am ADULT";
			tC.setPropertyValue("Requestee","ADULT");
			
			BirthDate = tC.getPropertyValue("ADULT_DOB_XML");
			
			assert myXML1.ResultSet.Row.AGE_CLASS == 'ADULT';
			
			tC.setPropertyValue("IsMinor","false");
  /*        
         if(context.expand( '${#TestCase#attested}' ) == 'true')
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
          }
          else
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME != 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME != 'null' ;	
          }
   */        
        } 

          // Retrieving Birth Date in proper format
 /******************************************************************************************************/
          
         bdaystring = myXML1.ResultSet.Row.BIRTH_DATE.toString();

         int lastspace = bdaystring.lastIndexOf(' ');

         finalbday = bdaystring.substring(0,lastspace);
          
         log.info "Birth Day:  " + finalbday;
       
        assert finalbday == BirthDate;

/******************************************************************************************************/

        assert myXML1.ResultSet.Row.COUNTRY == context.expand( '${#Project#GeoProfile}');

        if(context.expand( '${#TestCase#attested}' ) == 'true')
        {
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_DATE != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ENTY != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ID != null ;
        }  

      log.info "User ACCOUNT_USER table Validations Passed";
               
   }// end if for success response check
  else
  { 
  	assert  myXML1.ResultSet.Row.size() == 0;
  	log.info "No Validation Required";
  	testRunner.gotoStepByName("End_Of_DB_Validations");
  }
  
   
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_NODE_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#DBHost}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def geoProfile = context.expand( '${#Project#GeoProfile}' )


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

def role = tC.getPropertyValue("role");

log.info "Role : --- " + role;

//log.info b.accountGetfromNodeAccountId(accID);

String sql = """select to_char(rawtohex(NODE_OID)) NODE_OID from NODE_USER where USER_OID = hextoraw('$userID')""";

log.info sql;

results = a.SelectFromDB(sql,dbHost);

//log.info results;

/*
*  If zero length, no need to continue;
*/
  assert results.length() > 0;

  def myXML = new XmlSlurper().parseText(results);
  
  log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";


if (responseType == "SUCCESS")
{
	assert myXML.ResultSet.Row.size() > 0;

// Modified to comply with Generic Portal
//    if(context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:dece:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:coordinator:customersupport')

	if( role ==  'urn:dece:role:dece:customersupport' || role == 'urn:dece:role:coordinator:customersupport')
     { 	
       assert myXML.ResultSet.Row.size() == 4;	 
       //assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 
       log.info "DECE Node User Validation Passed";	    
     }
     else
     { 
       assert myXML.ResultSet.Row.size() > 4;
      // assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 		 
      // assert myXML.ResultSet.Row[1].NODE_OID == "10"; 
       log.info "3rd Party Node User Validation Passed";    
     }
	
}
else
{
	assert myXML.ResultSet.Row.size() == 0;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_Policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#DBHost}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def geoProfile = context.expand( '${#Project#GeoProfile}' )


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

def role = tC.getPropertyValue("role");

		String sql = """select POLICY_CLASS,STATUS,RESOURCE_ID from POLICY P,POLICY_RELATIONSHIP PR,POLICY_RESOURCE PRE where PR.POLICY_ACTOR = hextoraw('$userID')
		and P.POLICY_OID = PR.POLICY_OID and PR.POLICY_OID = PRE.POLICY_OID(+) ORDER BY POLICY_CLASS""";


		this.log.info "Query is:  " + sql;
		results = a.SelectFromDB(sql,dbHost);
		
		log.info "Policies Results : " + results;
		/*
		*  If zero length, no need to continue;
		*/
		assert results.length() > 0;
		
		def myXML = new XmlSlurper().parseText(results);
		
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		
		assert myXML.ResultSet.Row.size() > 0;

		//if( (context.expand( '${#TestCase#IsMinor}')=="true") &amp;&amp; (context.expand( '${#Project#AgeClass}')=="YOUTH") ) 

		if (context.expand( '${#TestCase#IsMinor}')=="true") 
			{
				if((geoProfile == "US")|| (geoProfile == "CA"))
					{
						assert myXML.ResultSet.Row[0].POLICY_CLASS == "302";  
						//      assert myXML.ResultSet.Row[0].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
						assert myXML.ResultSet.Row[0].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
					}
				else if ((geoProfile == "GB") || (geoProfile == "AU") || (geoProfile == "NZ") || (geoProfile == "IE") || (geoProfile == "AT") || (geoProfile == "CH") || (geoProfile == "DE") || (geoProfile == "FR"))
					{
						assert myXML.ResultSet.Row[0].POLICY_CLASS == "300"; 

						assert myXML.ResultSet.Row[1].POLICY_CLASS == "302";  
						//      assert myXML.ResultSet.Row[1].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
						assert myXML.ResultSet.Row[1].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
					} 
			} 
		else
			{
				assert myXML.ResultSet.Row[0].POLICY_CLASS == "304";
			}


log.info "Policy Validation Passed";	


</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_LEGAL_GUARDIAN_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if ((context.expand( '${#TestCase#IsMinor}' )=="true") &amp;&amp; context.expand( '${#Testcase#Requestee}')=="CHILD")
	{
	  	def dbHost = context.expand( '${#Project#DBHost}' );
		def userID = context.expand( '${#TestCase#User_OID}' );
	  	def node_OID = context.expand( '${#Project#Node_OID}' );

		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);
		
		String sql = """select ATTESTATION_STATUS from USER_LEGAL_GUARDIAN where USER_OID = hextoraw('$userID')""";
		
		results = a.SelectFromDB(sql,dbHost);
		
		/*
		*  If zero length, no need to continue;
		*/
		assert results.length() > 0;
		
		def myXML = new XmlSlurper().parseText(results);
		
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		
		assert myXML.ResultSet.Row.size() > 0;
		
		assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  
		
		log.info "Legal Guardian Validation Passed";	
	}
else
	{
		log.info "No Legal Guardian Validation Required";
	}
</script></con:config></con:testStep><con:testStep type="groovy" name="End_Of_DB_Validations"><con:settings/><con:config><script>

log.info "DB Validations Complete";</script></con:config></con:testStep><con:properties><con:property><con:name>ADULT_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>attested</con:name><con:value/></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2002-09-08</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>IsMinor</con:name><con:value>true</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E60068AEF0205738E0401F0A07990D3F</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>raju.alluri@compugain.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90508</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>Role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_GeoProfile</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Status</con:name><con:value>FAIL</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00021_UserCreate_AUTH_Creator_ADULT_Full_New_YOUTH_Standard_201_CREATED_P1</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E60068AEF0215738E0401F0A07990D3F</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1999-09-14</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>GeoProfile</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters><con:breakPoints><con:testStepId>d7765da1-c221-46a8-b0ee-4ada2ad4098a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>418d894c-0d5e-41ce-af71-087c1cf97b82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete_DB_Validation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Verify_User_DB_Details"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();

def dbHost = context.expand( '${#Project#targetsystem}');
def accID = context.expand( '${#TestCase#ACCOUNT_OID}' )

def aCCOUNT_STATUS = context.expand( '${#TestCase#ACCOUNT_STATUS}' )
def uSER_SAML_STATUS = context.expand( '${#TestCase#USER_SAML_STATUS}' )
def uSER_STATUS = context.expand( '${#TestCase#USER_STATUS}' )

def Result;
def myXML;
a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbAccount(log,dbHost);
c = new dbUtils.dbUser(log,dbHost);

	 	log.info "SQL Query " 
	 	String sql = """Select to_char(rawtohex(accusr.user_oid)) user_oid, accusr.status USER_STATUS,acc.status ACCNT_STATUS,
	 					to_char(rawtohex(ndusr.node_user_id)) node_user_id, to_char(rawtohex(ndusr.node_oid)) node_oid,nusa.status NUSA_STATUS 
	 					from account acc INNER JOIN account_user accusr 
	 					ON 
	 					acc.account_oid=hextoraw('$accID') 
	 					and accusr.status&lt;>'deleted' 
	 					and acc.account_oid=accusr.account_oid  
	 					INNER JOIN node_user ndusr 
	 					ON 
	 					ndusr.node_user_saml_uuid is not null 
	 					and accusr.user_oid=ndusr.user_oid  
	 					LEFT OUTER JOIN  node_user_saml_assertion nusa 
	 					ON  
	 					ndusr.node_user_saml_uuid=nusa.node_user_saml_uuid""";
	
		Result = a.SelectFromDB(sql,dbHost);
		log.info "Result  : " + Result
	 	myXML = new XmlSlurper().parseText(Result);
	
	 	log.info "Results  "+  myXML;
	 	def count = myXML.ResultSet.Row.size();
	 	def i = 0;
	 	for (i; i&lt;=count-1;i++)
	 	{ 
	 		log.info "loop " + i
	 		assert myXML.ResultSet.Row[i].USER_STATUS.toString() == context.expand('${#TestCase#USER_STATUS}');
	 		assert myXML.ResultSet.Row[i].ACCNT_STATUS.toString() == context.expand('${#TestCase#ACCOUNT_STATUS}');
	 		assert myXML.ResultSet.Row[i].NUSA_STATUS.toString() == context.expand('${#TestCase#USER_SAML_STATUS}');		 		
	 	}

  log.info "User Validations Passed";


</script></con:config></con:testStep><con:properties><con:property><con:name>ACCOUNT_OID</con:name><con:value>E718CE1A238893DAE0401F0A07990C15</con:value></con:property><con:property><con:name>ACCOUNT_STATUS</con:name><con:value>deleted</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E66F8BAF81CF768BE0401F0A059972BA</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_CS_P2</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02003_AccountDelete_FUNC_CS_Deleting_an_account_when_user_is_not_active_P1</con:value></con:property><con:property><con:name>USER_SAML_STATUS</con:name><con:value>deleted</con:value></con:property><con:property><con:name>USER_STATUS</con:name><con:value>forcedeleted</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>142255c0-283c-4c33-b8e9-5f6a22d944a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="First_User_Create" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Create_Firsrt_User_Create_STS_Policies" searchProperties="true" id="6543ab99-1ed3-4426-b9bd-5d2f2a2b36e4" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tS.getPropertyValue("nodeid"));




</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for First User Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "account_firstuser_legacy"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API for First User">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("audience",tS.getPropertyValue("audience"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Properties to Project Level"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import groovy.sql.Sql;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )
log.info rEST_API_Version;
if (rEST_API_Version == "1/07" || rEST_API_Version == "1/11"|| rEST_API_Version == "1/21")
{
tP.setPropertyValue("AccountID",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tP.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
tP.setPropertyValue("setusernameto",tC.getPropertyValue("UserName"));
tP.setPropertyValue("user_oid",tC.getPropertyValue("user_oid1"));
tP.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

}
else
{
def nODE_ACCOUNT_ID_FULL = context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}' )
	log.info "==========>"+nODE_ACCOUNT_ID_FULL
tP.setPropertyValue("AccountID",URLEncoder.encode(nODE_ACCOUNT_ID_FULL,"UTF-8"));
tP.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
tP.setPropertyValue("setusernameto",tC.getPropertyValue("UserName"));
tP.setPropertyValue("user_oid",tC.getPropertyValue("user_oid1"));
tP.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
	
}

def targetSystem = context.expand( '${#Project#targetSystem}' );
a = new dbUtils.dbUtils(log,targetSystem);
b = new dbUtils.dbAccount(log,targetSystem);
def account_oid = context.expand( '${#Project#account_oid}' )

String sql = """UPDATE ACCOUNT set DECE_DOMAIN_ID = '1234' where ACCOUNT_OID = hextoraw('$account_oid')""";

a.dbConnExecuteUpdate(sql,targetSystem);

log.info 'Woohoo!';


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>accountname</con:name><con:value>accname_20141231_02231</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>account_firstuser_legacy20141231_1420015984014</con:value></con:property><con:property><con:name>SurName</con:name><con:value>account_firstuser_legacy20141231_1420015984014</con:value></con:property><con:property><con:name>UserName</con:name><con:value>account_firstuser_legacy20141231_1420015984014</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:0B8034E5B7325FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>0B8034E5B7335FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>0B8034C9B1F90E01E05307991F0AAE38</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1996-01-05</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_fda8ad9b-40d7-40cd-9add-2029bb78454d</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_fda8ad9b-40d7-40cd-9add-2029bb78454d</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=pVddc6I8FP4rDr3cQYIfVZjqDCJu3Vpti+22vdmJIWpaSJQEpf31b4LKqq19XXsDk8P5eM7JycnDBYdRWLIdznEsCKOFNAoptzNpQ0tiajPICbcpjDC3BbJ957pnl4rAhhsTrdBtN7Q/4wDWYWCN9AoIavKBAt2CQaCXQMkajWr1SrUSSFXOE9ylXEAqGloJmBXdLOllcwjqdtW0gVWsmPVnrfCAYy59S5Ui0NagUt7QpkLMbMNYLpfFZbnI4olRAsA0Hq97PpriCGrNi1VGWaC4udZHxQAjHIaoiFhkXBg7OhcBt30yoVAkMV7HCg7FAgawDKkTcDI503JbHHTpmGVLF1JGCYIheYeqPtdYTFlQcMIJi4mYRgeTMIFyrOMU6cis0DPN2IV2pKMdhDGHOp9Cc+3rDo9xjCnChfu7bkM7O27XMtNhDCkfszjiu8t/w4PpAodshgOdb9JaQzve4SeVal5gZHcpChNOFrivmnUGEebr3cToeFeFmxiPSdojXDZoyhU6Yxve3nJVjTaZYC5O2aCtzVk5eYBhgpvsp7cQYhlNHx/Pk0sH+CHCKedPlb7TyABsK2eCfGtXy72mzJtoZdH7XR++hrR/a5XpvPN0P0nS8DqcW633di/ujKyfxvymm1zGE2Ca4RXo+0sWBejBMLqwdItby6uX3z8S0vr1lILn1LlaWPfo3GtjP/YBfU9B1B/Mzeeg3HusIteczS7LP2tP40dnOXyYzmtvTmeUiof5gl4lPwaskor759tfRv/5ZVR+Tul978eidn316p+7jlfxGnk6W/h3ZZsz7yejF4zEZqnaoNsudOQuQfH1MFMSEujjTNWeqeHDBaZCayorNTvsRI47EthyD1dr0KqDcsWrtmrlUrXjdTxQLYOqZZkd4NRc19wMmRWKPYguo2OiYqmRu2qbrwGiyOaYBjjWFyyRk45rX3hsQwELXXonDwGjHA+ZHM+EsdfyS0zPg7lpjqpkPOLiPapZllboMzGgg9gZCxzvzGTT3JnJdxiRGcFqcKu+5rKxuZC1mMNFIkKzuIBFihM52mM1Ze1SpV41OIlmIVZIjYgFSYiLs+ksq4zBV++SDhHPpHfeMDttB/Pa/7YpgdQJiFLgKpcWltuIP1wuwK5uEjmccGU74Y17JwmIOliyniImaIVk99PfNlH9kfeI47qe7/ob2Ln2P1ifauwOBidatj3XO9n04XTLP67/xzzVvOf4N9+x/Vbw00N/L3DvG1n3vpu1PK2nWx4IbHxx4Iz9s55HCxZkK/aGlkqCI6/E5mZSzYrzYrJYJNloqqmbP5beDUkATMPHKJEX9tuQvWJq5B6Mo9hRDnovcC7fhZeIKfUFFDiSg7SQLY+gwz7mig535Q2QHsu1d0LKsgmcis9kbiipvEL8JdtHNlJ6UnwjX0sW/038M19bcWSekg0LQidqpZjR24HGQEy6JfJOZ/G2888cfBZ8V5gXOcciZDONEoEPfymoy7qhQYRYQkW3rWWCbQKR4RRvM2z/VfrgJuMo+U8L+f+/Fp1kLYCw/NXhJPOvuKet2p9OtkjIOuhHHuJaLbNTBx4wMx5SW/EQxyvX86LsoGt+EH+UbNVpv8eb/wE=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=pVddc6I8FP4rDr3cQYIfVZjqDCJu3Vpti+22vdmJIWpaSJQEpf31b4LKqq19XXsDk8P5eM7JycnDBYdRWLIdznEsCKOFNAoptzNpQ0tiajPICbcpjDC3BbJ957pnl4rAhhsTrdBtN7Q/4wDWYWCN9AoIavKBAt2CQaCXQMkajWr1SrUSSFXOE9ylXEAqGloJmBXdLOllcwjqdtW0gVWsmPVnrfCAYy59S5Ui0NagUt7QpkLMbMNYLpfFZbnI4olRAsA0Hq97PpriCGrNi1VGWaC4udZHxQAjHIaoiFhkXBg7OhcBt30yoVAkMV7HCg7FAgawDKkTcDI503JbHHTpmGVLF1JGCYIheYeqPtdYTFlQcMIJi4mYRgeTMIFyrOMU6cis0DPN2IV2pKMdhDGHOp9Cc+3rDo9xjCnChfu7bkM7O27XMtNhDCkfszjiu8t/w4PpAodshgOdb9JaQzve4SeVal5gZHcpChNOFrivmnUGEebr3cToeFeFmxiPSdojXDZoyhU6Yxve3nJVjTaZYC5O2aCtzVk5eYBhgpvsp7cQYhlNHx/Pk0sH+CHCKedPlb7TyABsK2eCfGtXy72mzJtoZdH7XR++hrR/a5XpvPN0P0nS8DqcW633di/ujKyfxvymm1zGE2Ca4RXo+0sWBejBMLqwdItby6uX3z8S0vr1lILn1LlaWPfo3GtjP/YBfU9B1B/Mzeeg3HusIteczS7LP2tP40dnOXyYzmtvTmeUiof5gl4lPwaskor759tfRv/5ZVR+Tul978eidn316p+7jlfxGnk6W/h3ZZsz7yejF4zEZqnaoNsudOQuQfH1MFMSEujjTNWeqeHDBaZCayorNTvsRI47EthyD1dr0KqDcsWrtmrlUrXjdTxQLYOqZZkd4NRc19wMmRWKPYguo2OiYqmRu2qbrwGiyOaYBjjWFyyRk45rX3hsQwELXXonDwGjHA+ZHM+EsdfyS0zPg7lpjqpkPOLiPapZllboMzGgg9gZCxzvzGTT3JnJdxiRGcFqcKu+5rKxuZC1mMNFIkKzuIBFihM52mM1Ze1SpV41OIlmIVZIjYgFSYiLs+ksq4zBV++SDhHPpHfeMDttB/Pa/7YpgdQJiFLgKpcWltuIP1wuwK5uEjmccGU74Y17JwmIOliyniImaIVk99PfNlH9kfeI47qe7/ob2Ln2P1ifauwOBidatj3XO9n04XTLP67/xzzVvOf4N9+x/Vbw00N/L3DvG1n3vpu1PK2nWx4IbHxx4Iz9s55HCxZkK/aGlkqCI6/E5mZSzYrzYrJYJNloqqmbP5beDUkATMPHKJEX9tuQvWJq5B6Mo9hRDnovcC7fhZeIKfUFFDiSg7SQLY+gwz7mig535Q2QHsu1d0LKsgmcis9kbiipvEL8JdtHNlJ6UnwjX0sW/038M19bcWSekg0LQidqpZjR24HGQEy6JfJOZ/G2888cfBZ8V5gXOcciZDONEoEPfymoy7qhQYRYQkW3rWWCbQKR4RRvM2z/VfrgJuMo+U8L+f+/Fp1kLYCw/NXhJPOvuKet2p9OtkjIOuhHHuJaLbNTBx4wMx5SW/EQxyvX86LsoGt+EH+UbNVpv8eb/wE=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_02003_AccountDelete_FUNC_CS_Deleting_an_account_when_user_is_not_active_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_CS_P2</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVfZcuq6En3nKyj2I0U8AAZTSapkbMCAATPDyykjywN4wvIEX39kCGzITvbNuU+gVqt79eDW0ivWXIdtAYxRGNm+V5TFt9I/1Z2x46pNpsLp9XqlVq3ylversionMinorTNyqI5njIQq5hQK1UlDGOkezhSPOitxJLM9UKzVcYek5zrTrfqjEvPMdsS8UlCjExTVRe6FIxcx0Pty5u30px6LV8Ddu45Wkuwq0ItmZAGbaIZku7YSq9versionMajor5RXhyG71YUBS2Kgi86gshx4Av0XeqVetJ51XFrZpueFsUh+vCp47fSx9k0TV/S6osfmhRL0zRF8xTR0bFt/iq9F26HkS57hn9dtzXP92yoOfZZy0EpKLJ8vQgc0w/tyHK/Mc1QDJ2brqAMViBT836VqN8OLuh+aOkJZIi1CrY05mZsigwUIg+i4mIqv5V+/ayC17PzUPOw4Ycu/rT+b5CQlyDHD5BewbfIbuh+bvGLdL2/ItiSPejE2E7QKG+TQIMIFychMuxsaGPSfDouXspfzPCtwxD8LyV5pR5xEtjUF5kRbRPh6P+p12OtrlaWmhOjd04ZCAfbU/dh2jcbYwuKZnBuyo1OffF2gfCofAversionMajorL/XH+nOj3vvq49A4MHWLbaJqd7VXzzjuiSnf1J14aXnU6dDGXWFprSbChufpbS+pdSh7HVOy16e5pl12OxPT3525xEwGCFAFah/1FlEj2gLUHu/OCVOfHqaTU+fsZv6i6+9Mvxw2Tg05LCfUcLG0rIYv+gdmPDpQS7WmT1ZZfcodzLOaWnphMpa9zbgmzI7hyVdN97jevP2O6TGGPK4BOl2CzP+v6zQvapF2X7TzSWGQzzNC74ost8tiu00gmiCVBWDKwvAMRoJ5OFoHu8untADURQeI4KRMQSqaG3GpqgMp1ZdLZ7uUOx1BmdbSHtiIBbIhStlS3K77tLbaBhu2Q29ngqCvp/6u2g/03iHtWXCkzJV0NJdPyl7KRnOJXl1kZkbWZ2WvMOP5olpY7QVemUqpmF48ilJqjbarabBZ8Ck8S6oCal3ALKS2pfTm7pKB1akF99JQAYeLXLCU9nKpZNIcTAqCOVqS2ObtzjaArh7sXMd6MN4jxud6d3nadZ14e5b2SlvqtmfH7kzeVUVV6oPpZrFbLQ/aqpMUYG8EdjePdt3W1n5qbpupqG76A38rWwkcAVUSBBWQdNFAkbt94HcFoNSAnZ3be4Hz23onpfosLpR5p8utT/ZxjbUu7WhMs8lshitucuREyStvB/FubynWujMuD2Z6suAj/rzBSTnhNJuBWWCoa6kXDTKjp84Ku4mYrWGvrJt9yjnznVBp9EF4PlmOYk6jFTfGp51tGCthPa45DcNRqtPAcIzghMtzXz2ENCegKkttTskgKgBTEQDo7hd7QVWEZp5UXU7VjSJooCNFMTjversionMinorWjALo/9XuLATRX42WA13h8+CqOLqSRQqSqRtpIKTRHoeRF6s4XU2YOFYJqhYEodQYUiUDfyIN2QfC16RPlzHjuXPJqSAKTqFnB8r1Bd0Hw0jma1Gjh5wsLr8JZyzFY659KNI5KGs1FQSxU8Mrztyj8orh0uwni2GAxGw2w3j7uHPZlVBj0bJNVtQUoOAbBHg7l1EH1RmwSbTRSUPRjCSA5cRc7O4y3eN+2dS/fLdUaY0CJssAt3ly66mrQdhOaMGfSm3qTa4As4Nk49t7xvpqvyfMYFDb3tGeLpRG3DJe0Dv8NP60c9Y9mDtUiHXGr0wWGnsaPM4YUTLw22c5hO1cFq5pbrhXoyHLr0eU7VRsE4nXXTmqSq5aouzHtzHIT2Jm6aWTj2dHajRVyypZecHTgHno0P81pQXZouKdYk0YOGMimotTXcumYjgH1qSiVAahhDuXvanbVz4I7hdYB+ng534XV+UI+T5Wn03EjHjHQrgtFtmV9AsljskFtBi/5OYHKJrVeMi2oryFkQjpAXld7zUzl5acWE4th6i1wZ17XE0VVaaHIMXRdolpEkukYzHRrQDZ5nJV66sZwrik8Q275n2LmvnMddb6m/A4RuCyNPR2El8WNoIVz6i8U8X0XZm5Lr1/cwmvuEJ9brosSwHAeabUB3hIbQZGjQEQRQFSW6Dtql4siPxt44BEaEwmeOyD9xxCmCdmCjnEjmtykm1ymOSEqOWhJHDvOSaC8eignVDHO212JrzTqFbTdwUA6Ycn09dtBLYAWXBFH4+stWNIgv0qk0/0eetS83/bchft67ZYPo6HaugPN4BEQqir4gvNVbMN8GzbCPQd/Mg1i38wudpDYKbXhF8rz1u2PyVrm3C4nqBvmu+VnwZJX6HNDdkZ7Y8N7z9+cAYZOEb7zfSnLUXo4vcZLElyI0ci4VEvMUQ9ENaoZgTAjRae4fkEfdTVA/4qJ31J883+XP+OLI8mYR+Z5d0jLFy/IHD5EZwvlDRCYtn/30lfPkkuQtQln0laztkPdKjvivTxrYgrkeEU/IT+qH+u9yfWHrwQ+JMx9gtmfmq5x5nr5pCugTszYZYn74aPwrA185fxbek3zHEpFu2sUR+n6nmE+nt5IGoR97kSyWLoLHiXnBGZ0C1Pqt9IeZC/f7IPMZ/pbMr5XhjMwuVyvdde3/rVyxL+0CETmF7QuWt1JG3qXEuWc+TOgPgH8MaZ4RaIETJEaq3Yd0nefrHMveE/gUyfsf4j8lDzn9/D28/ws=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E603091B0B6BE1E4E0401F0A05995622</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E603091B0B6BE1E4E0401F0A05995622</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E6030B86105B021EE0401F0A07992E9E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E6030B86105B021EE0401F0A07992E9E</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;urn:dece:org:org:dece:COO;urn:dece:org:org:dece:coord:cs;urn:dece:org:org:dece:DECE;urn:dece:org:org:dece:dece:cs;urn:dece:org:org:dece:DEV;urn:dece:org:org:dece:DEV_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:iscportal1;urn:dece:org:org:dece:iscportalcs1;urn:dece:org:org:dece:RET</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="P0_LegacyDeviceAdd_Retailer"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\pgour\Desktop\22-08-2013\R4\R4_LegacyDeviceAdd_Retailer_&amp;_Retailer_CS\P0_LegacyDeviceAdd_Retailer</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Call First user create" searchProperties="true" id="283acc72-3601-43a7-a146-719ee0af553f"><con:settings/><con:testStep type="groovy" name="Call first user create"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TCCount = testSuite.getTestCaseCount();
def TSuite1 = testProject.getTestSuiteByName("P0_LegacyDeviceCache_Testcases");
def TSuite2 = testProject.getTestSuiteByName("LegacyDeviceAdd_Retailer");

testProject.setPropertyValue("ISCNode", 'yes');

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("First_User_Create");
def runnerCommonTC = commonTC.run(null, false);

if( runnerCommonTC.status.toString() == "FINISHED" )
{
    for(i = 1; i &lt;= TCCount - 1; i++)
    {
     testSuite.getTestCaseAt(i).setDisabled(false);
    }
    TSuite1.setDisabled(false);
    TSuite2.setDisabled(false);
  
    
}
else
{
     for(i = 1; i &lt;= TCCount - 1; i++)
    {
     testSuite.getTestCaseAt(i).setDisabled(true);
    }
    TSuite1.setDisabled(true);
    TSuite2.setDisabled(true);
    
}</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_20008 - LegacyDeviceAdd - FUNC - RTR CS - AccountStatusActive - Account in -active- status" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="89dcf075-d2b5-494a-a8eb-48b929a959e9"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;


tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());
/* ${Groovy Script Random Number Generator#result} */
</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>112616</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>node_oid</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:setupScript/><con:tearDownScript/><con:reportParameters/></con:testSuite><con:testSuite name="P0_LegacyDeviceCache_Testcases"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_20008 - LegacyDeviceAdd -Create-Get-Update-Get-200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="cd022748-cadf-48be-ad90-3b5f1603cac7"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;


tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());
/* ${Groovy Script Random Number Generator#result} */

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="change Device id encoding"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

/* ${Groovy Script Random Number Generator#result} */
def deviceID = context.expand( '${#TestCase#DeviceID}' )

def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )
if(rEST_API_Version == "1/07" || rEST_API_Version == "1/11"||rEST_API_Version == "1/21")
{
	tC.setPropertyValue("DeviceID_Cache", URLDecoder.decode(deviceID, "UTF-8"));
}
else
{
	tC.setPropertyValue("DeviceID_Cache", URLEncoder.encode(deviceID, "UTF-8"));
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("GET - LegacyDeviceGET");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="1-Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
//	      case "ETag": 
//			ETag = value[0]; 
//			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
//tC.setPropertyValue("ETag", ETag);
</script></con:config></con:testStep><con:testStep type="groovy" name="1-Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeGet1");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:testStep type="groovy" name="change back Device id encoding" id="15978148-965e-4703-963e-bfa3cc82d1b3" disabled="true"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

/* ${Groovy Script Random Number Generator#result} */
def deviceID = context.expand( '${#TestCase#DeviceID}' )

def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )
if(rEST_API_Version == "1/07" || rEST_API_Version == "1/11")
{
	tC.setPropertyValue("DeviceID_Cache", URLEncoder.encode(deviceID, "UTF-8"));
}
else
{
	tC.setPropertyValue("DeviceID_Cache", URLDecoder.decode(deviceID, "UTF-8"));
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>453015</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet1</con:name><con:value>200</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:certificate_not_provisioned">
      <Reason Language="en">The security token is required.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/07/Account/urn:dece:accountid:org:dece:F1B827C53B83CAD7E0401F0A07994332/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:453015</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/07/error/en/ErrorList.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>760</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID_Cache</con:name><con:value>urn:dece:deviceid:org:dece:453015</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>15978148-965e-4703-963e-bfa3cc82d1b3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_20008 - LegacyDeviceAdd -Create-Get-Delete-Get-404 Not Found" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="cf03d4ed-bf71-442d-96a0-c6d99bf5c21c"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;


tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());
/* ${Groovy Script Random Number Generator#result} */
</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="change Device id encoding" id="cd22492b-7a66-4988-8253-1d7d34bd908c"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

/* ${Groovy Script Random Number Generator#result} */
def deviceID = context.expand( '${#TestCase#DeviceID}' )

def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )
if(rEST_API_Version == "1/07" || rEST_API_Version == "1/11"||rEST_API_Version == "1/21")
{
	tC.setPropertyValue("DeviceID_Cache", URLDecoder.decode(deviceID, "UTF-8"));
}
else
{
	tC.setPropertyValue("DeviceID_Cache", URLEncoder.encode(deviceID, "UTF-8"));
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("GET - LegacyDeviceGET");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="1-Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
//	      case "ETag": 
//			ETag = value[0]; 
//			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
//tC.setPropertyValue("ETag", ETag);
</script></con:config></con:testStep><con:testStep type="groovy" name="1-Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeGet1");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>615545</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet1</con:name><con:value>404</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:certificate_not_provisioned">
      <Reason Language="en">The security token is required.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/07/Account/urn:dece:accountid:org:dece:F1B8242914A9D99BE0401F0A07992FB8/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:615545</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/07/error/en/ErrorList.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>760</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID_Cache</con:name><con:value>urn:dece:deviceid:org:dece:615545</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ff107c22-d74b-47e0-b761-625b2a28a662</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd22492b-7a66-4988-8253-1d7d34bd908c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_20008 - LegacyDeviceAdd -Create-Get-Get- 304 Not Modified" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ae39cb51-3210-4b3c-81c2-c4569e4bf093"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;


tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());
/* ${Groovy Script Random Number Generator#result} */
</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="change Device id encoding" id="358e2b5a-dc3c-46a1-8b90-860311a0c253"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

/* ${Groovy Script Random Number Generator#result} */
def deviceID = context.expand( '${#TestCase#DeviceID}' )

def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )
if(rEST_API_Version == "1/07" || rEST_API_Version == "1/11"||rEST_API_Version == "1/21")
{
	tC.setPropertyValue("DeviceID_Cache", URLDecoder.decode(deviceID, "UTF-8"));
}
else
{
	tC.setPropertyValue("DeviceID_Cache", URLEncoder.encode(deviceID, "UTF-8"));
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("GET - LegacyDeviceGET");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="1-Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
//	      case "ETag": 
//			ETag = value[0]; 
//			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
//tC.setPropertyValue("ETag", ETag);
</script></con:config></con:testStep><con:testStep type="groovy" name="1-Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeGet1");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	case "304":  
		if (httpStatus != "HTTP/1.1 304 Not Modified") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>573603</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet1</con:name><con:value>304</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:certificate_not_provisioned">
      <Reason Language="en">The security token is required.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/07/Account/urn:dece:accountid:org:dece:F1B8242914A9D99BE0401F0A07992FB8/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:573603</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/07/error/en/ErrorList.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">760</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID_Cache</con:name><con:value>urn:dece:deviceid:org:dece:573603</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ff107c22-d74b-47e0-b761-625b2a28a662</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>358e2b5a-dc3c-46a1-8b90-860311a0c253</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_20008 - LegacyDeviceAdd -Create-Get-Create-Get- 304 Not Modified" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9c1a7ad6-cea8-4200-8a79-89511ba0e77c"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;


tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());
/* ${Groovy Script Random Number Generator#result} */
</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="change Device id encoding" id="c5aa067b-0899-4cf3-b2b4-f345cbecd8f7"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

/* ${Groovy Script Random Number Generator#result} */
def deviceID = context.expand( '${#TestCase#DeviceID}' )

def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )
if(rEST_API_Version == "1/07" || rEST_API_Version == "1/11"||rEST_API_Version == "1/21")
{
	tC.setPropertyValue("DeviceID_Cache", URLDecoder.decode(deviceID, "UTF-8"));
}
else
{
	tC.setPropertyValue("DeviceID_Cache", URLEncoder.encode(deviceID, "UTF-8"));
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="1-Groovy Script Random Number Generator"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;


tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());
/* ${Groovy Script Random Number Generator#result} */
</script></con:config></con:testStep><con:testStep type="groovy" name="1-Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs Cache").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("GET - LegacyDeviceGET");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="1-Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
//	      case "ETag": 
//			ETag = value[0]; 
//			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
//tC.setPropertyValue("ETag", ETag);
</script></con:config></con:testStep><con:testStep type="groovy" name="1-Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeGet1");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	case "304":  
		if (httpStatus != "HTTP/1.1 304 Not Modified") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>304778</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet1</con:name><con:value>304</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:certificate_not_provisioned">
      <Reason Language="en">The security token is required.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/07/Account/urn:dece:accountid:org:dece:F1B8242914A9D99BE0401F0A07992FB8/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:711046</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/07/error/en/ErrorList.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">760</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID_Cache</con:name><con:value>urn:dece:deviceid:org:dece:711046</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ff107c22-d74b-47e0-b761-625b2a28a662</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b71327bf-2b6b-4950-b988-445bde897233</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea635f74-2d8e-482f-9c34-5f61eb5b7910</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c5aa067b-0899-4cf3-b2b4-f345cbecd8f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:setupScript/><con:tearDownScript/><con:reportParameters/></con:testSuite><con:testSuite name="LegacyDeviceAdd_Retailer"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\pgour\Desktop\Build_4.0 Reports\R4\P1\Legacy</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reset_Account_AccountUser_Tables" searchProperties="true" id="6cc8773c-1aca-435b-a17b-e13a1b50c626" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBRenewedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("expectdbusername_user"));
tC.setPropertyValue("accountoid",callTC.getPropertyValue("account_oid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));
tC.setPropertyValue("expectDBRenewedBy",callTC.getPropertyValue("expectDBRenewedBy"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));

if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectErrTypeStreamRenew") == "" || tC.getPropertyValue("expectErrTypeStreamRenew") == null) {
		tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
}
if (tC.getPropertyValue("expectDBRenewedBy") == "" || tC.getPropertyValue("expectDBRenewedBy") == null) {
		tC.setPropertyValue("expectDBRenewedBy","");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script"><con:settings/><con:config><script>/*
Set Reset Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status      = tC.getPropertyValue("set_account_status");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 log.info  "status being set to \"" + status ;
  
  log.info  "accountoid is \"" + account_oid + "\"";
  
  a  = accountsetstatus.accountSetStatus(account_oid, status);

 log.info "accountoid is \"" + account_oid + "\" status being set to \"" + status + " &amp; return code is " + a + "\"";


/*
Set ACCOUNT_USER Table user_oid to Active Status and User Permission to Full
*/


  def user_oid       = tC.getPropertyValue("useroid");
  def status_user    = tC.getPropertyValue("set_account_user_status");
  def privilege_user = tC.getPropertyValue("set_account_user_privilege");
  def username       = tC.getPropertyValue("username");  
  
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));
  
  b  = usersetstatus.userSetStatus(user_oid, status_user);

 log.info "useroid is \"" + user_oid + "\" status of acct user being set to \"" + status_user + " &amp; return code is " + b + "\"";

/*
Set user_oid privelege to FULL Access
*/

  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));
  
  c  = usersetprivilege.userSetPrivilege(username, privilege_user);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege_user + " &amp; return code is " + c + "\"";
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script Set All Devices to Deleted"><con:settings/><con:config><script>/*
Set All Devices to 'Deleted' Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();
def account_oid = context.expand( '${#Project#account_oid}' )

  
def myDBUtils = new dbUtils.dbUtils(log, tP.getPropertyValue("targetSystem"));  
sqlStr = """update legacy_device set status = 'deleted' where status = 'active' and account_oid=hextoraw('$account_oid')""";
log.info "---->"+sqlStr
//x = myDBUtils.updateDB(sqlStr, tP.getPropertyValue("targetSystem"));

x = myDBUtils.dbConnExecuteUpdate(sqlStr,tP.getPropertyValue("targetSystem"));

log.info x;
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_LegacyDeviceAdd_Where_DeviceID_contains_specialchacaters_UV-23_UV-362_UV-1866</con:value></con:property><con:property><con:name>sName</con:name><con:value>LegacyDeviceAdd_Retailer</con:value></con:property><con:property><con:name>set_account_status</con:name><con:value>active</con:value></con:property><con:property><con:name>set_account_user_status</con:name><con:value>active</con:value></con:property><con:property><con:name>set_account_user_privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">loadtestdata1</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dbxmlresponse</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectJDBCSQL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectDBDeleteUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10000 - LegacyDeviceAdd - FUNC - RTR - UserIdUnmatched - XML userId mismatch to assertion userId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="24e00631-7f1a-45a8-b0ed-4c4b8f5f81b2" disabled="true"><con:settings/><con:testStep type="restrequest" name="LegacyDeviceADD"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="POST LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LegacyDeviceADD" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="500580.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML_NEG}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
	<dece:Brand Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Brand>
	<dece:Manufacturer Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Manufacturer>
	<dece:Model>String${#TestCase#RandomNumberGenerated}</dece:Model>
	<dece:SerialNo>String${#TestCase#RandomNumberGenerated}</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com/${#TestCase#RandomNumberGenerated}</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2011-01-17T09:30:47.0Z"  
			DeletionDate="2020-01-17T09:30:47.0Z">
			<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:9109118</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:2</con:value></con:property><con:property><con:name>UUID</con:name><con:value>fbbdd202-c4ca-4e57-b32a-1122334</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_LegacyDeviceAdd_SAML_NEG_Noneexistent_nodeID_Supplied" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="59e239f9-e6f6-45f7-84ed-0fb4839710cd" disabled="true"><con:settings/><con:testStep type="groovy" name="Copy of Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script Set Node Role"><con:settings/><con:config><script>/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def nodeoid = tP.getPropertyValue("node_oid");
  def role = tC.getPropertyValue("set_role");
   
  def noderowset = new dbUtils.dbNode(log, tP.getPropertyValue("targetSystem"));

  assert noderowset.nodeSetRole(nodeoid, role);
/*
  a  = noderowset.nodeSetRole(nodeoid, role);
 log.info "nodeoid is \"" + nodeoid + "\" role set to \"" + role + "return code is " + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script Random Number Generator"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;


tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());
/* ${Groovy Script Random Number Generator#result} */
</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - LegacyDeviceADD"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="POST LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - LegacyDeviceADD" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="500580.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML_NEG}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
	<dece:Brand Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Brand>
	<dece:Manufacturer Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Manufacturer>
	<dece:Model>String${#TestCase#RandomNumberGenerated}</dece:Model>
	<dece:SerialNo>String${#TestCase#RandomNumberGenerated}</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com/${#TestCase#RandomNumberGenerated}</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2011-01-17T09:30:47.0Z"  
			DeletionDate="2020-01-17T09:30:47.0Z">
			<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 403 Forbidden")
</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>191923</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_LegacyDeviceAdd_ERRC_400_If the requested Node record by Node ID does not exist" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="dd0227a2-58c3-496f-aa61-0d5479306319" disabled="true"><con:settings/><con:testStep type="restrequest" name="Copy of DELETE - LegacyDeviceADD"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="DELETE LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Copy of DELETE - LegacyDeviceADD" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="001234_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
	<dece:Brand Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Brand>
	<dece:Manufacturer Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Manufacturer>
	<dece:Model>String${#TestCase#RandomNumberGenerated}</dece:Model>
	<dece:SerialNo>String${#TestCase#RandomNumberGenerated}</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com/${#TestCase#RandomNumberGenerated}</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2011-01-17T09:30:47.0Z"  
			DeletionDate="2020-01-17T09:30:47.0Z">
			<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 405 Method Not Allowed")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:11111111111</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:2</con:value></con:property><con:property><con:name>UUID</con:name><con:value>fbbdd202-c4ca-4e57-b32a-1122334</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_LegacyDeviceAdd_METH_Invocation_with_method_DELETE" searchProperties="true" id="46508a54-b2da-4e45-8d1b-1386ea5b1085"><con:settings/><con:testStep type="groovy" name="Set Pem" id="41a71c33-d1c7-4c1d-bc5f-569d448633bb"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DELETE - LegacyDeviceADD");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - LegacyDeviceADD"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="DELETE LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - LegacyDeviceADD" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
	<dece:Brand Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Brand>
	<dece:Manufacturer Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Manufacturer>
	<dece:Model>String${#TestCase#RandomNumberGenerated}</dece:Model>
	<dece:SerialNo>String${#TestCase#RandomNumberGenerated}</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com/${#TestCase#RandomNumberGenerated}</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2011-01-17T09:30:47.0Z"  
			DeletionDate="2020-01-17T09:30:47.0Z">
			<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" disabled="true"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 405 Method Not Allowed")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:9109118</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>41a71c33-d1c7-4c1d-bc5f-569d448633bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_LegacyDeviceAdd_METH_Invocation_with_method_PUT" searchProperties="true" id="ab86d16d-deef-473c-80bc-dac686032a5d"><con:settings/><con:testStep type="groovy" name="Set Pem" id="b446783b-cceb-4239-a893-336ccb3cb1cb"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("PUT - LegacyDeviceADD");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - LegacyDeviceADD"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="GET LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - LegacyDeviceADD" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
	<dece:Brand Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Brand>
	<dece:Manufacturer Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Manufacturer>
	<dece:Model>String${#TestCase#RandomNumberGenerated}</dece:Model>
	<dece:SerialNo>String${#TestCase#RandomNumberGenerated}</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com/${#TestCase#RandomNumberGenerated}</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2011-01-17T09:30:47.0Z"  
			DeletionDate="2020-01-17T09:30:47.0Z">
			<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 405 Method Not Allowed")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:9109118</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b446783b-cceb-4239-a893-336ccb3cb1cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_LegacyDeviceAdd_METH_Invocation_with_method_GET" searchProperties="true" id="8ad7557d-67ae-42a1-a6bc-e72a0d7bd040"><con:settings/><con:testStep type="groovy" name="Set Pem" id="60943a5b-9223-424a-9ed7-197e73e8cffb"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("GET - LegacyDeviceADD");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - LegacyDeviceADD"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="GET LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - LegacyDeviceADD" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
	<dece:Brand Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Brand>
	<dece:Manufacturer Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Manufacturer>
	<dece:Model>String${#TestCase#RandomNumberGenerated}</dece:Model>
	<dece:SerialNo>String${#TestCase#RandomNumberGenerated}</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com/${#TestCase#RandomNumberGenerated}</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2011-01-17T09:30:47.0Z"  
			DeletionDate="2020-01-17T09:30:47.0Z">
			<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 405 Method Not Allowed")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:9109118</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>60943a5b-9223-424a-9ed7-197e73e8cffb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_LegacyDeviceAdd_METH_Invocation_with_method_OPTION" searchProperties="true" id="f5c5a534-aae0-406d-9067-f8cf82041732"><con:settings/><con:testStep type="groovy" name="Set Pem" id="5bab0453-6994-4b0c-9ca3-e0caee9e4b1c"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("OPTION - LegacyDeviceADD");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="OPTION - LegacyDeviceADD"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="GET LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OPTION - LegacyDeviceADD" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
	<dece:Brand Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Brand>
	<dece:Manufacturer Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Manufacturer>
	<dece:Model>String${#TestCase#RandomNumberGenerated}</dece:Model>
	<dece:SerialNo>String${#TestCase#RandomNumberGenerated}</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com/${#TestCase#RandomNumberGenerated}</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2011-01-17T09:30:47.0Z"  
			DeletionDate="2020-01-17T09:30:47.0Z">
			<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 405 Method Not Allowed")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:9109118</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5bab0453-6994-4b0c-9ca3-e0caee9e4b1c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_LegacyDeviceAdd_METH_nvocation_with_method_HEAD" searchProperties="true" id="e307d24e-fdce-4d93-863d-57401b8ee0ef"><con:settings/><con:testStep type="groovy" name="Set Pem" id="2fc0ce55-71c9-43fa-8bba-93bfbfa31874"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("OPTION - LegacyDeviceADD");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="HEAD - LegacyDeviceADD"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="HEAD LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="HEAD - LegacyDeviceADD" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="2424_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
	<dece:Brand Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Brand>
	<dece:Manufacturer Language="en-US">String${#TestCase#RandomNumberGenerated}</dece:Manufacturer>
	<dece:Model>String${#TestCase#RandomNumberGenerated}</dece:Model>
	<dece:SerialNo>String${#TestCase#RandomNumberGenerated}</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com/${#TestCase#RandomNumberGenerated}</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2011-01-17T09:30:47.0Z"  
			DeletionDate="2020-01-17T09:30:47.0Z">
			<dece:DisplayName>String${#TestCase#RandomNumberGenerated}</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 405 Method Not Allowed")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:9109118</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2fc0ce55-71c9-43fa-8bba-93bfbfa31874</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_20008 - LegacyDeviceAdd - FUNC - RTR CS - AccountStatusActive - Account in -active- status" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f74f43b7-2ae5-4fc3-bba1-71cfc66d9ef7"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status" disabled="true"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status" disabled="true"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Permission" disabled="true"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;


tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());
/* ${Groovy Script Random Number Generator#result} */
</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>744295</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_20010 - LegacyDeviceAdd - FUNC - RTR CS - AccountStatusNotActive - Account in -pending- status" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="247c91e3-8fd1-460c-b4c5-260e6afaebba"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Status"><con:settings/><con:config><script>/*
Set Account_oid to Blocked Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;


tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());
/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>pending</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>pending</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>pending</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>287435</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>404</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_20013 - LegacyDeviceAdd - FUNC - RTR CS - AccountStatusNotActive - Account in -deleted- status" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="86594813-a15a-4cbc-8dfc-ea5665fab4ee"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>deleted</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>deleted</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>932176</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>404</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10001 - LegacyDeviceAdd - FUNC - RTR - AccountStatusActive - Account in - active status" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c52a6379-868a-4ed8-9577-dee8bac88103"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status" disabled="true"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission" disabled="true"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>233070</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10002 - LegacyDeviceAdd - FUNC - RTR - AccountStatusNotActive - Account in - pending status" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6aa61d51-daaf-404e-9b43-4c476e7c4d38"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status" disabled="true"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission" disabled="true"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>pending</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>pending</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>pending</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>233948</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10007 - LegacyDeviceAdd - FUNC - RTR - AccountStatusNotActive - Account in -deleted- status" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4f66f793-f36c-4805-ad73-42946f3b0923"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>deleted</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>forceddelete</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>forcedeleted</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>750741</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10069 - LegacyDeviceAdd - FUNC - RTR - UserNotActive - userId -active- status" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ab8422cd-0ac1-4627-961f-a81a79afa59e"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>880438</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10071 - LegacyDeviceAdd - FUNC - RTR - UserNotActive - userId -deleted- status" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="1e81c8e5-2ca7-4934-948e-dfb7a3cde330"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>deleted</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>deleted</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>966664</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10076 - LegacyDeviceAdd - FUNC - RTR - UserNotActive - userId -blocked-tou- status" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d49f447d-4b3d-443c-8191-6809a3a004c5"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>blocked:eula</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>blocked:tou</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>blocked:tou</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>458148</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10077 - LegacyDeviceAdd - FUNC - RTR - Maximum LegacyDevices Error Returned" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f227605c-0bc2-4e44-816f-2b9eedc74a7f"><con:settings/><con:testStep type="groovy" name="Groovy Script Set All Devices to Deleted"><con:settings/><con:config><script>/*
Set All Devices to 'Deleted' Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
def myDBUtils = new dbUtils.dbUtils(log, tP.getPropertyValue("targetSystem"));  
sqlStr = """update legacy_device set status = 'deleted' where status = 'active'""";

//x = myDBUtils.updateDB(sqlStr, tP.getPropertyValue("targetSystem"));

 x = myDBUtils.dbConnExecuteUpdate(sqlStr,tP.getPropertyValue("targetSystem"));
 
log.info x;
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator 2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */
</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd 2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator 3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd 3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator 4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd 4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator 5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd 5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator 6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd 6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="ExpectedtedErrorCode"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectedreturncodeCREATE", tC.getPropertyValue("ENDexpectedreturnCodeCREATE"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator 7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd 7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Reset ExpectedtedErrorCode for Create"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectedreturncodeCREATE", tC.getPropertyValue("BEGINexpectedreturnCodeCREATE"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script Set All Devices to Deleted"><con:settings/><con:config><script>/*
Set All Devices to 'Deleted' Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
def myDBUtils = new dbUtils.dbUtils(log, tP.getPropertyValue("targetSystem"));  
sqlStr = """update legacy_device set status = 'deleted' where status = 'active'""";
//x = myDBUtils.updateDB(sqlStr, tP.getPropertyValue("targetSystem"));

  x = myDBUtils.dbConnExecuteUpdate(sqlStr,tP.getPropertyValue("targetSystem"));
log.info x;
</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>788620</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>ENDexpectedreturnCodeCREATE</con:name><con:value>409</con:value></con:property><con:property><con:name>BEGINexpectedreturnCodeCREATE</con:name><con:value>201</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10078 - LegacyDeviceAdd - FUNC - RTR - UserActive - Piviledge Full" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="38e0022f-a560-4338-8c0f-523eea84e9fd"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>821346</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10079 - LegacyDeviceAdd - FUNC - RTR - UserActive - Piviledge Basic" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d797276e-f864-4e27-9d63-9ad6ab63811c"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>basic</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>basic</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>basic</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>388283</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>401</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>401</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>401</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>401</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10080 - LegacyDeviceAdd - FUNC - RTR - UserActive - Piviledge Standard" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0fc964b5-f96c-4a2f-9ca9-7f2cf5db914d"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>standard</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>standard</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>standard</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>815167</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_20016 - LegacyDeviceAdd - FUNC - RTR CS - Maximum LegacyDevices Error Returned" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="dfdf1fe2-0958-423e-bd60-9045e8e61880"><con:settings/><con:testStep type="groovy" name="Groovy Script Set All Devices to Deleted"><con:settings/><con:config><script>/*
Set All Devices to 'Deleted' Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
def myDBUtils = new dbUtils.dbUtils(log, tP.getPropertyValue("targetSystem"));  
sqlStr = """update device set status = 'deleted' where status = 'active'""";
x = myDBUtils.dbConnExecuteUpdate(sqlStr, tP.getPropertyValue("targetSystem"));
  
log.info x;
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator 2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */
</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd 2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator 3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd 3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator 4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd 4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator 5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd 5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator 6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd 6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="ExpectedtedErrorCode"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectedreturncodeCREATE", tC.getPropertyValue("ENDexpectedreturnCodeCREATE"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator 7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd 7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Reset ExpectedtedErrorCode for Create"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("expectedreturncodeCREATE", tC.getPropertyValue("BEGINexpectedreturnCodeCREATE"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Groovy Script Set All Devices to Deleted"><con:settings/><con:config><script>/*
Set All Devices to 'Deleted' Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
def myDBUtils = new dbUtils.dbUtils(log, tP.getPropertyValue("targetSystem"));  
sqlStr = """update device set status = 'deleted' where status = 'active'""";
x = myDBUtils.dbConnExecuteUpdate(sqlStr, tP.getPropertyValue("targetSystem"));
  
log.info x;
</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>479904</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>ENDexpectedreturnCodeCREATE</con:name><con:value>409</con:value></con:property><con:property><con:name>BEGINexpectedreturnCodeCREATE</con:name><con:value>201</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00509_LegacyDeviceAdd_PERM_Access_Control_Rights_ContentProvider_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="747999dd-52ad-470b-bb5d-f51f507ce6d2" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdCON"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:contentprovider</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:contentprovider</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>540163</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00510_LegacyDeviceAdd_PERM_Access_Control_Rights_Coordinator_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="eee14537-d5c1-4bf7-a862-e5f2547aa099" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdCoo"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:coordinator</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:coordinator</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">824863</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00511_LegacyDeviceAdd_PERM_Access_Control_Rights_Retailer_Successful" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ef5899c2-681b-48e1-9f90-5d2d2f1b6e46" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">666056</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00512_LegacyDeviceAdd_PERM_Access_Control_Rights_Linked LASP_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="80dad5a4-a918-4e82-88f6-b562ae68cda0" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdLLASP"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:lasp:linked</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:lasp:linked</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>918103</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00513_LegacyDeviceAdd_PERM_Access_Control_Rights_Dynamic LASP_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c581d821-f54d-488b-90ac-2c2930381924" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdDLASP"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>234890</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00514_LegacyDeviceAdd_PERM_Access_Control_Rights_DSP_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9a99456d-cd8c-4762-bc35-0f0286d8facc" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdDSP"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:dsp</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:dsp</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>368638</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00516_LegacyDeviceAdd_PERM_Access_Control_Rights_Coordinator Customer Support_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="810c7bf4-4eed-4540-9d84-10136aadb3c9" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdCoordCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:coordinator:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:coordinator:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>179918</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>404</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00520_LegacyDeviceAdd_PERM_Access_Control_Rights_Retailer Customer Support_Successful" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a710f19c-7705-4884-87cd-2a658a1238b7" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>524766</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00523_LegacyDeviceAdd_PERM_Access_Control_Rights_Linked LASP Customer Support_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5d292b38-6bf8-4262-b256-b252bde8a0ff" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdLLASPCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:lasp:linked:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:lasp:linked:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>218753</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00524_LegacyDeviceAdd_PERM_Access_Control_Rights_Dynamic LASP Customer Support_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7efbbd36-dcb3-4c88-ae9b-ae47db2e3e10" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdDSPCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:lasp:dynamic:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:lasp:dynamic:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>995607</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00525_LegacyDeviceAdd_PERM_Access_Control_Rights_DSP Customer Support_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4ab291a4-58db-4768-9ebd-138b9e4c9a22" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdDSP"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:dsp:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:dsp:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>741901</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00527_LegacyDeviceAdd_PERM_Access_Control_Rights_Device_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="74ea7553-2b25-41a7-b34e-b5046612a748" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdDEV"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:device</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:device</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>816547</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00528_LegacyDeviceAdd_PERM_Access_Control_Rights_Device Customer Support_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6a61bf62-00b6-455f-b447-05a54299920e" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdDEVCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:device:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:device:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>289796</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00529_LegacyDeviceAdd_PERM_Access_Control_Rights_Content Provider_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ed308182-9302-462f-82f8-14dd7b32219d" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdCON"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:contentprovider</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:contentprovider</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>861780</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00530_LegacyDeviceAdd_PERM_Access_Control_Rights_Content Provider Customer Support_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="738198f2-ecba-424c-a359-ddf69be57f77" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdCONCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:contentprovider:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:contentprovider:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>351925</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00532_LegacyDeviceAdd_PERM_Access_Control_Rights_DECE_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="81e0094f-aaae-4cf6-96c3-db36cbd50200" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdDECE"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:dece</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:dece</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>593887</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00533_LegacyDeviceAdd_PERM_Access_Control_Rights_DECE Customer Support_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f49eeb15-c425-4331-be9e-deecaeba2db0" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdDECECS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:dece:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:dece:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>843348</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00535_LegacyDeviceAdd_PERM_Access_Control_Rights_Portal_Customer_Support_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fd0b9b20-1312-4dc7-a531-e6343ff74e60" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdportalCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:portal:customersupport</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:portal:customersupport</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>439645</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00536_LegacyDeviceAdd_PERM_Access_Control_Rights_Access_Portal_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f9a6d405-a49f-4335-9483-7e840ec1d448" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdAccportal"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:accessportal</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:accessportal</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>899533</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>403</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30001 - LegacyDeviceAdd - FUNC - RTR - Generated DeviceID_AccountStatusActive - Account in - active status" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="40378bc5-56bc-4bbf-956c-96330917c377" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs-Generated_DeviceID").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs-Generated_DeviceID").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs-Generated_DeviceID").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:239746</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>239746</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>DeviceIDOnly</con:name><con:value>est/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:239746</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30069 - LegacyDeviceAdd - FUNC - RTR - Generated DeviceID_UserNotActive - userId -active- status" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f4182e8a-940b-4c64-a7cc-86dc3812fd66" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs-Generated_DeviceID").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs-Generated_DeviceID").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs-Generated_DeviceID").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs-Generated_DeviceID").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:289154</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>289154</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>DeviceIDOnly</con:name><con:value>est/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:289154</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30078 - LegacyDeviceAdd - FUNC - RTR - Generated DeviceID_UserActive - Pivilege Full" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7293deb6-1ea6-423f-b643-89887ca454ab" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs-Generated_DeviceID").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs-Generated_DeviceID").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs-Generated_DeviceID").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs-Generated_DeviceID").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:852641</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>852641</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>DeviceIDOnly</con:name><con:value>est/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:852641</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_LegacyDeviceAdd_Where_DeviceID_contains_specialchacaters_UV-23_UV-362_UV-1866" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2e01b4d1-aa77-4b65-b3b2-6fcf6efc7a4c" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="datasource" name="DataSource"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">|&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">&amp;amp;&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">#&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">%25&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">μ&lt;/con:entry></row></con:configuration></con:dataSource><con:property>test</con:property><con:property>RowCount</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>test1</con:name><con:sourceType>test</con:sourceType><con:sourceStep>DataSource</con:sourceStep><con:targetType>encodedparam</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */
def encodedparam = context.expand( '${#TestCase#encodedparam}' )
tC.setPropertyValue("EncodedValueOfSpecialSymbols", URLEncoder.encode (encodedparam, "UTF-8"));
def encodedValueOfSpecialSymbols = context.expand( '${#TestCase#EncodedValueOfSpecialSymbols}' )
log.info encodedValueOfSpecialSymbols;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#encodedValueOfSpecialSymbols}_${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>507944</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>encodedparam</con:name><con:value>&amp;</con:value></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value>%26</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>acc3b0f2-b1f3-4acc-abf2-ae91b00670ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>427b7d25-2358-446e-95a1-087ed2588586</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bc5e2316-6ed0-4c17-9a13-d9845215ebad</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>755f3ce0-de2b-42b8-bcac-066c271e5693</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6c904453-ca8b-43ea-999c-35c3008ae85e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00000_LegacyDeviceAdd_PERM_Access_Control_Rights_DSP_GET_Positive" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6f407929-c72d-40cd-8642-8ba02cc16ec3" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Role for GET"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdDSP"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="1-Groovy Script Set Node Role" id="4bc0c558-8e59-4296-84f2-4cf3e32dc763"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>922769</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>GET_Set node role</con:name><con:value>urn:dece:role:dsp</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4bc0c558-8e59-4296-84f2-4cf3e32dc763</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00000_LegacyDeviceAdd_PERM_Access_Control_Rights_DSP_CusstomerSupport_GET_Positive" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6de093c6-7aed-4e3e-a26d-7e0308e79adc" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node Role for GET"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdDSPCS"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="1-Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>223530</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>403</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>GET_Set node role</con:name><con:value>urn:dece:role:dsp:customersupport</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4bc0c558-8e59-4296-84f2-4cf3e32dc763</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_LegacyDeviceAdd_UTF-8 _CharacterCheck_Create_Update_Request" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c558b5d3-82c6-4499-bc52-cceca83676bd" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="datasource" name="DataSource"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">{</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">1</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">|</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">2</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">~</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">3</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">€</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">4</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">‚</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">5</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">„</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">6</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">†</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">7</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ˆ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">8</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Š</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">9</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Œ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">10</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ž</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">11</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config"></con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">12</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">’</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">13</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">”</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">14</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">–</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">15</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">˜</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">16</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">š</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">17</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">œ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">18</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ž</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">19</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">-</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">20</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¢</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">21</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¤</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">22</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¦</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">23</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¨</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">24</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ª</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">25</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¬</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">26</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">®</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">27</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">°</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">28</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">²</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">29</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">´</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">30</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¶</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">31</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¸</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">32</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">º</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">33</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¼</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">34</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¾</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">35</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">À</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">36</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Â</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">37</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ä</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">38</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Æ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">39</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">È</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">40</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ê</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">41</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ì</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">42</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Î</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">43</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ð</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">44</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ò</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">45</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ô</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">46</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ö</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">47</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ø</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">48</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ú</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">49</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ü</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">50</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Þ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">51</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">à</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">52</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">â</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">53</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ä</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">54</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">æ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">55</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">è</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">56</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ê</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">57</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ì</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">58</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">î</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">59</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ð</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">60</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ò</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">61</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ô</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">62</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ö</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">63</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ø</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">64</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ú</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">65</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ü</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">66</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">þ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">67</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">}</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">68</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config"></con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">69</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config"></con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">70</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ƒ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">71</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">…</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">72</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">‡</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">73</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">‰</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">74</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">‹</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">75</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config"></con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">76</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config"></con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">77</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">‘</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">78</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">“</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">79</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">•</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">80</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">—</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">81</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">™</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">82</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">›</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">83</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config"></con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">84</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ÿ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">85</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¡</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">86</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">£</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">87</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¥</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">88</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">§</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">89</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">©</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">90</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">«</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">91</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¬</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">92</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¯</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">93</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">±</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">94</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">³</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">95</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">µ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">96</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">•</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">97</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¹</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">98</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">»</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">99</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">½</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">100</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¿</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">101</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Á</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">102</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ã</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">103</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Å</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">104</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ç</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">105</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">É</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">106</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ë</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">107</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Í</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">108</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ï</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">109</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ñ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">110</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ó</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">111</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Õ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">112</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">×</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">113</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ù</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">114</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Û</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">115</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ý</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">116</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ß</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">117</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">á</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">118</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ã</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">119</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">å</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">120</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ç</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">121</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">é</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">122</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ë</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">123</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">í</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">124</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ï</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">125</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ñ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">126</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ó</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">127</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">õ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">128</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">÷</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">129</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ù</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">130</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">û</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">131</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ý</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">132</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ÿ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">133</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>test</con:property><con:property>RowCount</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>test1</con:name><con:sourceType>test</con:sourceType><con:sourceStep>DataSource</con:sourceStep><con:targetType>encodedparam</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(9999999-1000001+1)+1000001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */
/*def encodedparam = context.expand( '${#TestCase#encodedparam}' )
tC.setPropertyValue("encodedparam1", URLEncoder.encode(encodedparam,"UTF-8"));
def encodedparam1 = context.expand( '${#TestCase#encodedparam1}' )
log.info encodedparam1;*/
def encodedparam = context.expand( '${#TestCase#encodedparam}' )
tC.setPropertyValue("EncodedValueOfSpecialSymbols", URLEncoder.encode (encodedparam, "UTF-8"));
def encodedValueOfSpecialSymbols = context.expand( '${#TestCase#EncodedValueOfSpecialSymbols}' )
log.info encodedValueOfSpecialSymbols;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs_UTF-8").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs_UTF-8").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs_UTF-8").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs_UTF-8").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables" id="14e28065-eba0-47b0-933b-58b009c6290d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4555838</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>encodedparam</con:name><con:value>¾</con:value></con:property><con:property><con:name>encodedparam1</con:name><con:value>%CE%BC</con:value></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value>%C2%BE</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4e87b7c6-4484-4995-a630-7de51dfb8492</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ff270d3f-289e-4246-800f-9a6eb78142ca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c5b565b0-fdb9-4f84-8d76-d935c12ec235</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e273a3c4-6599-4aed-a2b7-1fcece8c3152</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14e28065-eba0-47b0-933b-58b009c6290d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_LegacyDeviceAdd_Where_DeviceID_contains_special_characters_1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="25cc534c-ac35-4ba9-a4c8-8f06946ca5e1" discardOkResults="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="datasource" name="DataSource"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">{</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">1</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">|</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">2</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">~</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">3</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">€</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">4</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">‚</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">5</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">„</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">6</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">†</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">7</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ˆ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">8</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Š</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">9</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Œ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">10</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ž</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">11</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config"></con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">12</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">’</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">13</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">”</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">14</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">–</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">15</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">˜</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">16</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">š</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">17</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">œ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">18</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ž</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">19</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">-</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">20</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¢</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">21</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¤</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">22</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¦</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">23</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¨</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">24</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ª</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">25</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¬</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">26</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">®</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">27</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">°</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">28</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">²</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">29</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">´</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">30</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¶</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">31</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¸</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">32</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">º</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">33</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¼</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">34</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¾</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">35</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">À</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">36</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Â</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">37</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ä</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">38</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Æ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">39</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">È</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">40</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ê</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">41</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ì</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">42</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Î</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">43</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ð</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">44</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ò</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">45</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ô</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">46</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ö</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">47</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ø</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">48</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ú</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">49</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ü</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">50</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Þ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">51</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">à</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">52</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">â</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">53</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ä</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">54</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">æ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">55</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">è</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">56</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ê</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">57</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ì</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">58</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">î</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">59</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ð</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">60</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ò</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">61</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ô</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">62</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ö</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">63</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ø</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">64</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ú</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">65</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ü</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">66</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">þ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">67</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">}</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">68</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config"></con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">69</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config"></con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">70</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>test</con:property><con:property>RowCount</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>test1</con:name><con:sourceType>test</con:sourceType><con:sourceStep>DataSource</con:sourceStep><con:targetType>encodedparam</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */
def encodedparam = context.expand( '${#TestCase#encodedparam}' )
tC.setPropertyValue("EncodedValueOfSpecialSymbols", URLEncoder.encode (encodedparam, "UTF-8"));
def encodedValueOfSpecialSymbols = context.expand( '${#TestCase#EncodedValueOfSpecialSymbols}' )
log.info encodedValueOfSpecialSymbols;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#encodedValueOfSpecialSymbols}_${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>920534</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>encodedparam</con:name><con:value>{</con:value></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value>%7B</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>acc3b0f2-b1f3-4acc-abf2-ae91b00670ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>427b7d25-2358-446e-95a1-087ed2588586</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bc5e2316-6ed0-4c17-9a13-d9845215ebad</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>755f3ce0-de2b-42b8-bcac-066c271e5693</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6c904453-ca8b-43ea-999c-35c3008ae85e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_LegacyDeviceAdd_Where_DeviceID_contains_special_characters_2" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6371a272-e32f-4d4f-82ba-29d3b359f420" discardOkResults="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Groovy Script Set Account Status"><con:settings/><con:config><script>/*
Set Account_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def account_oid = tP.getPropertyValue("account_oid");
  def status = tC.getPropertyValue("setstatusto");
    
  def accountsetstatus = new dbUtils.dbAccount(log, tP.getPropertyValue("targetSystem"));

 assert accountsetstatus.accountSetStatus(account_oid, status);

/*
a  = accountsetstatus.accountSetStatus(account_oid, status);

log.info "account_oid is \"" + account_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
 
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set User Status"><con:settings/><con:config><script>/*
Set user_oid to Active Status
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def status    = tC.getPropertyValue("setuserstatusto");
  def username  = tP.getPropertyValue("setusernameto");
  def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetstatus = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

assert usersetstatus.userSetStatus(user_oid, status);

/*
  a  = usersetstatus.userSetStatus(user_oid, status);

 log.info "user_oid is \"" + user_oid + "\" status being set to \"" + status+ " &amp; return code is" + a + "\"";
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Script Set User Permission"><con:settings/><con:config><script>/*
Set user_oid privelege to FULL Access
userSetPrivlege(String username, String privlege)
*/
  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  def user_oid  = tP.getPropertyValue("user_oid");
  def username  = tP.getPropertyValue("setusernameto");
  
    def privilege = tC.getPropertyValue("setuserprivilegeto");
    
  def usersetprivilege = new dbUtils.dbUser(log, tP.getPropertyValue("targetSystem"));

 assert usersetprivilege.userSetPrivilege(username, privilege);
/*
  a  = usersetprivilege.userSetPrivilege(username, privilege);
  
 log.info "username is \"" + username + "\" privilege is being set to \"" + privilege + " &amp; return code is" + a + "\"";
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Set Node Role"><con:settings/><con:config><script>
/*
Update the role for a given node.
*/

  def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

  
  tP.setPropertyValue("node_oid",tP.getPropertyValue("nodeIdRTLCS"));</script></con:config></con:testStep><con:testStep type="datasource" name="DataSource"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ƒ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">1</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">…</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">2</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">‡</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">3</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">‰</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">4</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">‹</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">5</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config"></con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">6</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config"></con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">7</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">‘</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">8</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">“</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">9</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">•</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">10</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">—</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">11</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">™</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">12</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">›</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">13</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config"></con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">14</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ÿ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">15</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¡</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">16</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">£</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">17</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¥</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">18</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">§</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">19</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">©</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">20</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">«</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">21</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¬</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">22</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¯</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">23</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">±</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">24</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">³</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">25</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">µ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">26</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">•</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">27</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¹</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">28</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">»</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">29</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">½</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">30</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">¿</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">31</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Á</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">32</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ã</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">33</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Å</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">34</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ç</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">35</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">É</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">36</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ë</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">37</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Í</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">38</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ï</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">39</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ñ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">40</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ó</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">41</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Õ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">42</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">×</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">43</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ù</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">44</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Û</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">45</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">Ý</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">46</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ß</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">47</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">á</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">48</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ã</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">49</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">å</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">50</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ç</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">51</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">é</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">52</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ë</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">53</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">í</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">54</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ï</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">55</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ñ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">56</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ó</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">57</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">õ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">58</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">÷</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">59</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ù</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">60</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">û</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">61</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ý</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">62</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">ÿ</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">63</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>test</con:property><con:property>RowCount</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>test1</con:name><con:sourceType>test</con:sourceType><con:sourceStep>DataSource</con:sourceStep><con:targetType>encodedparam</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Random Number Generator"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("RandomNumberGenerated", randomIntId.toString());

/* ${Groovy Script Random Number Generator#result} */
def encodedparam = context.expand( '${#TestCase#encodedparam}' )
tC.setPropertyValue("EncodedValueOfSpecialSymbols", URLEncoder.encode (encodedparam, "UTF-8"));
def encodedValueOfSpecialSymbols = context.expand( '${#TestCase#EncodedValueOfSpecialSymbols}' )
log.info encodedValueOfSpecialSymbols;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceAdd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("POST - LegacyDeviceAdd")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PUT - LegacyDeviceUpdate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("GET - LegacyDeviceGet")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("DELETE - LegacyDeviceDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Reset Account_AccountUser_Tables"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("LegacyDeviceAdd_Retailer").getTestCaseByName("Reset_Account_AccountUser_Tables")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#encodedValueOfSpecialSymbols}_${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_9.txt</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>500580</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>setstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Als display name</DISPLAY_NAME>
      <CREATED_DATE>2011-01-11 22:21:56.292</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectdbaccountoid</con:name><con:value>A9B04BD18CA55EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectdbstatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbdisplay_name</con:name><con:value>Als display name</con:value></con:property><con:property><con:name>expectdbcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>dbxmlresponse_user</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <USER_OID>A9B04BD18CAA5EBEE0401F0A05991FEA</USER_OID>
      <ACCOUNT_OID>A9B04BD18CA55EBEE0401F0A05991FEA</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <PRIVILEGE>full</PRIVILEGE>
      <USERNAME>AlBrazaOrg1Full</USERNAME>
      <PASSWORD>z4DNiu1ILV0VJ9fccvzv+E5jJlkoSER9LcCw6H38mpA=</PASSWORD>
      <GIVEN_NAME>polly</GIVEN_NAME>
      <SURNAME>null</SURNAME>
      <DISPLAY_IMAGE_URI>null</DISPLAY_IMAGE_URI>
      <PRIMARY_EMAIL>pjgOrg1Full1@foo.com</PRIMARY_EMAIL>
      <TELEPHONE>null</TELEPHONE>
      <MOBILE_TELEPHONE>null</MOBILE_TELEPHONE>
      <BIRTH_DATE>1980-10-15 00:00:00.0</BIRTH_DATE>
      <PUBLISH_NEWS_FLAG>Y</PUBLISH_NEWS_FLAG>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <LOGIN_FAILURES>null</LOGIN_FAILURES>
      <LOGIN_TOKEN_FAILURES>0</LOGIN_TOKEN_FAILURES>
      <LOGIN_SECURITY_QA_FAILURES>null</LOGIN_SECURITY_QA_FAILURES>
      <LAST_LOGIN_DATE>2010-10-12 18:32:35.0</LAST_LOGIN_DATE>
      <CREATED_DATE>2010-10-12 15:58:52.0</CREATED_DATE>
      <UPDATED_DATE>2010-10-12 08:57:03.787</UPDATED_DATE>
      <STREAM_CLEAR_TIME>null</STREAM_CLEAR_TIME>
      <CONFIRMATION_ENDPOINT>null</CONFIRMATION_ENDPOINT>
      <PRIMARYEMAIL_VERIFICATION_DATE>null</PRIMARYEMAIL_VERIFICATION_DATE>
      <PRIMARYEMAIL_VERIFICATION_ENTY>null</PRIMARYEMAIL_VERIFICATION_ENTY>
      <PRIMARYEMAIL_VERIFICATION_ID>null</PRIMARYEMAIL_VERIFICATION_ID>
      <OLD_PRIMARY_EMAIL>null</OLD_PRIMARY_EMAIL>
      <EMAIL_CLOCK_START_TIME>null</EMAIL_CLOCK_START_TIME>
      <EMAIL_CLOCK_END_TIME>null</EMAIL_CLOCK_END_TIME>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>setuserstatusto</con:name><con:value>active</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>setuserprivilegeto</con:name><con:value>full</con:value></con:property><con:property><con:name>expectdbstatus_user</con:name><con:value>active</con:value></con:property><con:property><con:name>expectdbusername_user</con:name><con:value>loadtestdata1</con:value></con:property><con:property><con:name>expectdbuseroid_user</con:name><con:value>A9B04BD18CAA5EBEE0401F0A05991FEA</con:value></con:property><con:property><con:name>expectedprivilege_user</con:name><con:value>full</con:value></con:property><con:property><con:name>set_role</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>expectedrole_user</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>817648</con:value></con:property><con:property><con:name>expectedreturncodeCREATE</con:name><con:value>201</con:value></con:property><con:property><con:name>expectedreturncodeUPDATE</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeGET</con:name><con:value>200</con:value></con:property><con:property><con:name>expectedreturncodeDELETE</con:name><con:value>200</con:value></con:property><con:property><con:name>encodedparam</con:name><con:value>ƒ</con:value></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value>%C6%92</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>acc3b0f2-b1f3-4acc-abf2-ae91b00670ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>427b7d25-2358-446e-95a1-087ed2588586</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bc5e2316-6ed0-4c17-9a13-d9845215ebad</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>755f3ce0-de2b-42b8-bcac-066c271e5693</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6c904453-ca8b-43ea-999c-35c3008ae85e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property><con:property><con:name>ETag</con:name><con:value/></con:property></con:properties><con:setupScript/><con:tearDownScript/><con:reportParameters/></con:testSuite><con:testSuite name="Test Cases Containing APIs" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="POST - LegacyDeviceAdd" searchProperties="true" id="12082715-34f0-4706-bf9a-f6836035b8b2" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);



</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));

tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));
tC.setPropertyValue("encodedparam",callTC.getPropertyValue("encodedparam"));

tC.setPropertyValue("encodedValueOfSpecialSymbols",callTC.getPropertyValue("encodedValueOfSpecialSymbols"));
def deviceID = context.expand( '${#TestCase#DeviceID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}

log.info deviceID
def deviceid_xml=URLDecoder.decode(deviceID,"UTF-8")
tC.setPropertyValue("deviceid_xml",deviceid_xml);
/*
*  Mapping this call only to a retailer node.
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("POST - LegacyDeviceADD");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - LegacyDeviceADD"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="POST LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - LegacyDeviceADD" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Sample XML file generated by XMLSpy versionMinor009 sp1 (http://www.altova.com)
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"
urn:dece:deviceId:208511-->
<dece:Device 
IsLegacy="true" 
DeviceID="${#TestCase#deviceid_xml}"
xsi:schemaLocation="http://www.decellc.org/schema/2012/12/dece dece.xsd"
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Manufacturer>String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:Brand Language="en-us">String</dece:Brand>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image MimeType="String" Width="2" Height="2">http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Image>
	<dece:PolicyList PolicyListID="urn:dece:">
		<dece:Policy PolicyID="http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg">
			<dece:PolicyClass>urn:dece:</dece:PolicyClass>
			<dece:Resource>http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Resource>
			<dece:RequestingEntity>urn:dece:</dece:RequestingEntity>
			<dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
			<dece:ResourceStatus>
				<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
					<dece:Value>urn:dece:type:status:active</dece:Value>
					<dece:Description>String</dece:Description>
				</dece:Current>
				<dece:History>
					<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
						<dece:Value>urn:dece:type:status:active</dece:Value>
						<dece:Description>String</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:Policy>
	</dece:PolicyList>
<!--	<dece:LicAppID>urn:dece:</dece:LicAppID>  -->
<!--	<dece:DRMClientID>urn:dece:</dece:DRMClientID> -->
<!--	<dece:ManagingRetailer>urn:dece:</dece:ManagingRetailer> -->
<!--	<dece:ManageRetailerURL>http://www.altova.com</dece:ManageRetailerURL> -->
<!--
	<dece:ResourceStatus>
		<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
			<dece:Value>urn:dece:type:status:active</dece:Value>
			<dece:Description>String</dece:Description>
		</dece:Current>
		<dece:History>
			<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
				<dece:Value>urn:dece:type:status:active</dece:Value>
				<dece:Description>String</dece:Description>
			</dece:Prior>
		</dece:History>
	</dece:ResourceStatus>
-->
</dece:Device>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - LegacyDeviceADD');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode = tC.getPropertyValue("ExpectedReturnCodeCreate");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#encodedValueOfSpecialSymbols}_${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_LegacyDeviceAdd_Where_DeviceID_contains_special_characters_2</con:value></con:property><con:property><con:name>sName</con:name><con:value>LegacyDeviceAdd_Retailer</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>817648</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value>Legacy Device has been created successfully</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>43</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:%C6%92_817648</con:value></con:property><con:property><con:name>encodedparam</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ƒ</con:value></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">%C6%92</con:value></con:property><con:property><con:name>deviceid_xml</con:name><con:value>urn:dece:deviceid:org:dece:ƒ_817648</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PUT - LegacyDeviceUpdate" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="76423588-02e9-4441-be88-8cff698b8dad"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));

tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));
tC.setPropertyValue("encodedValueOfSpecialSymbols",callTC.getPropertyValue("encodedValueOfSpecialSymbols"));
tC.setPropertyValue("encodedparam",callTC.getPropertyValue("encodedparam"));
def deviceID = context.expand( '${#TestCase#DeviceID}' )

tC.setPropertyValue("deviceid_xml",callTC.getPropertyValue("DeviceID"));
log.info deviceID
def deviceid_xml=URLDecoder.decode(deviceID,"UTF-8")
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}

tC.setPropertyValue("deviceid_xml",deviceid_xml);
/*
*  Mapping this call only to a retailer node.
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("PUT - LegacyDevicePUT");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - LegacyDevicePUT"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="PUT LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - LegacyDevicePUT" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Sample XML file generated by XMLSpy versionMinor009 sp1 (http://www.altova.com)
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}" -->
<dece:Device 
IsLegacy="true" 
DeviceID="${#TestCase#deviceid_xml}" 
xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Manufacturer>String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:Brand Language="en-us">String</dece:Brand>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image MimeType="String" Width="2" Height="2">http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Image>
	<dece:PolicyList PolicyListID="urn:dece:">
		<dece:Policy PolicyID="http://www.altova.com">
			<dece:PolicyClass>urn:dece:</dece:PolicyClass>
			<dece:Resource>http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Resource>
			<dece:RequestingEntity>urn:dece:</dece:RequestingEntity>
			<dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
			<dece:ResourceStatus>
				<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
					<dece:Value>urn:dece:type:status:active</dece:Value>
					<dece:Description>String</dece:Description>
				</dece:Current>
				<dece:History>
					<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
						<dece:Value>urn:dece:type:status:active</dece:Value>
						<dece:Description>String</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:Policy>
	</dece:PolicyList>
<!--
	<dece:LicAppID>urn:dece:</dece:LicAppID>
	<dece:DRMClientID>urn:dece:</dece:DRMClientID>
	<dece:ManagingRetailer>urn:dece:</dece:ManagingRetailer>
	<dece:ManageRetailerURL>http://www.altova.com</dece:ManageRetailerURL>

	<dece:ResourceStatus>
		<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
			<dece:Value>urn:dece:type:status:active</dece:Value>
			<dece:Description>String</dece:Description>
		</dece:Current>
		<dece:History>
			<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
				<dece:Value>urn:dece:type:status:active</dece:Value>
				<dece:Description>String</dece:Description>
			</dece:Prior>
		</dece:History>
	</dece:ResourceStatus>
-->
</dece:Device>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - LegacyDevicePUT');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode = tC.getPropertyValue("ExpectedReturnCodeUpdate");
def httpStatus 	   = tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#encodedValueOfSpecialSymbols}_${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_LegacyDeviceAdd_Where_DeviceID_contains_special_characters_2</con:value></con:property><con:property><con:name>sName</con:name><con:value>LegacyDeviceAdd_Retailer</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>817648</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value>Legacy Device has been updated successfully</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>43</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:%C6%92_817648</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">%C6%92</con:value></con:property><con:property><con:name>encodedparam</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ƒ</con:value></con:property><con:property><con:name>deviceid_xml</con:name><con:value>urn:dece:deviceid:org:dece:ƒ_817648</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET - LegacyDeviceGet" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f295c319-b16c-438e-92de-b64b688bb991"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));

tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));
tC.setPropertyValue("encodedValueOfSpecialSymbols",callTC.getPropertyValue("encodedValueOfSpecialSymbols"));
tC.setPropertyValue("encodedparam",callTC.getPropertyValue("encodedparam"));
/*
*  Mapping this call only to a retailer node.
*/
/*def deviceID = context.expand( '${#TestCase#DeviceID}' )
def domainID = context.expand( '${#Project#DomainID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}
else
{
	tC.setPropertyValue("DeviceID", URLDecoder.decode(deviceID, "UTF-8"));
}
def deviceid_xml=URLDecoder.decode(deviceID,"UTF-8")
tC.setPropertyValue("deviceid_xml",deviceid_xml);
*/
def deviceID = context.expand( '${#TestCase#DeviceID}' )

tC.setPropertyValue("deviceid_xml",callTC.getPropertyValue("DeviceID"));
log.info deviceID
def deviceid_xml=URLDecoder.decode(deviceID,"UTF-8")
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}

tC.setPropertyValue("deviceid_xml",deviceid_xml);
/*
*  Mapping this call only to a retailer node.
*/
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("GET - LegacyDeviceGET");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - LegacyDeviceGET"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="GET LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/Domain/${#Project#DomainID}/Device/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - LegacyDeviceGET" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Brand Language="en-US">String</dece:Brand>
	<dece:Manufacturer Language="en-US">String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2009-12-17T09:30:47.0Z"  
			DeletionDate="2020-12-17T09:30:47.0Z">
			<dece:DisplayName>String</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@DeviceID]" disabled="true"><con:configuration><path>declare namespace ns1='http://www.decellc.org/schema/2012/12/coordinator';
//ns1:Device[1]/@DeviceID</path><content>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
//	      case "ETag": 
//			ETag = value[0]; 
//			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
//tC.setPropertyValue("ETag", ETag);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeGet");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract The Response Header ETag"><con:settings/><con:config><script>/*Extracting ETag from response and storing it in Project level Property*/
def httpStatus = context.expand( '${#TestCase#httpStatus}' )


if(httpStatus=='HTTP/1.1 200 OK')
{
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "ETag": 
			ETag = value[0]; 
			break;
	}
}

tP.setPropertyValue("ETag", ETag);
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header of unconditional GET"><con:settings/><con:config><script>
def httpStatus = context.expand( '${#TestCase#httpStatus}' )

if(httpStatus=='HTTP/1.1 200 OK')
{
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String Cache_Control ;
String ETag ;
String Expires ;
String Last_Modified ;
String x_Transaction_Info;
String Vary;

/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Cache-Control": 
			Cache_Control = value[0];
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Expires": 
			Expires = value[0]; 
			break;
		case "Last-Modified": 
			Last_Modified = value[0]; 
			break;
		case "x-Transaction-Info": 
			x_Transaction_Info = value[0]; 
			break;
		case "Vary": 
			Vary = value[0]; 
			break;
		
		
	}
}


tC.setPropertyValue("Cache-Control", Cache_Control);
tC.setPropertyValue("ETag", ETag);
tC.setPropertyValue("Expires", Expires);
tC.setPropertyValue("Last-Modified", Last_Modified);
tC.setPropertyValue("x-Transaction-Info", x_Transaction_Info);
tC.setPropertyValue("Vary", Vary);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Process The  Header Unconditional GET"><con:settings/><con:config><script>def httpStatus = context.expand( '${#TestCase#httpStatus}' )

if(httpStatus=='HTTP/1.1 200 OK')
{
def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def Cache_Control=tC.getPropertyValue("Cache-Control")
if(Cache_Control==null)
assert 1==2

def ETag=tC.getPropertyValue("ETag")
if(ETag==null)
assert 1==2

def Expires=tC.getPropertyValue("Expires")
if(Expires==null)
assert 1==2

/*def Last_Modified=tC.getPropertyValue("Last-Modified")
if(Last_Modified==null)
assert 1==2*/

def Lx_Transaction_Info=tC.getPropertyValue("x-Transaction-Info")
if(Lx_Transaction_Info==null)
assert 1==2

def Vary=tC.getPropertyValue("Vary")
if(Vary!='Authorization,Accept-Encoding')
assert 1==2

}</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#encodedValueOfSpecialSymbols}_${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_LegacyDeviceAdd_Where_DeviceID_contains_special_characters_2</con:value></con:property><con:property><con:name>sName</con:name><con:value>LegacyDeviceAdd_Retailer</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>817648</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Device DeviceID="urn:dece:deviceid:org:dece:ƒ_817648" IsLegacy="true" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>String</DisplayName>
   <Manufacturer>String</Manufacturer>
   <Model>String</Model>
   <Brand Language="en-us">String</Brand>
   <SerialNo>String</SerialNo>
   <Image Height="2" Width="2" MimeType="String">https://d1aa09tqol6rcr.cloudfront.net/uvvu-images/0B822C3C23255BE2E05305991F0A044A</Image>
   <ResourceStatus>
      <Current CreationDate="2014-12-31T11:11:46.749Z" CreatedBy="urn:dece:org:org:dece:RET_CS_1" ModificationDate="2014-12-31T11:11:46.832Z" ModifiedBy="urn:dece:org:org:dece:RET_CS_1">
         <Value>urn:dece:type:status:active</Value>
         <Description>Legacy Device Updated</Description>
      </Current>
      <History>
         <Prior ModificationDate="2014-12-31T11:11:44.376Z" ModifiedBy="urn:dece:org:org:dece:RET_CS_1">
            <Value>urn:dece:type:status:active</Value>
            <Description>Legacy Device Created</Description>
         </Prior>
      </History>
   </ResourceStatus>
</Device>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>encodedparam</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ƒ</con:value></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">%C6%92</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>Cache-Control</con:name><con:value>max-age=86400</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Expires</con:name><con:value>Thu, 01 Jan 2015 11:11:49 GMT</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>x-Transaction-Info</con:name><con:value>t=1420024309 VKPZ9AofmIgAAFSWrs0AAABH urn:dece:org:org:dece:RET_CS_1 10.31.173.1</con:value></con:property><con:property><con:name>Vary</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authorization,Accept-Encoding</con:value></con:property><con:property><con:name>DomainID</con:name><con:value>urn%3Adece%3Adomainid%3Adece%3A1234</con:value></con:property><con:property><con:name>deviceid_xml</con:name><con:value>urn:dece:deviceid:org:dece:ƒ_817648</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DELETE - LegacyDeviceDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4d01501e-4fc2-4ce8-b1ee-f4799541ed5f"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));

tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));
tC.setPropertyValue("encodedValueOfSpecialSymbols",callTC.getPropertyValue("encodedValueOfSpecialSymbols"));
tC.setPropertyValue("encodedparam",callTC.getPropertyValue("encodedparam"));
/*
*  Mapping this call only to a retailer node.
*/
def deviceID = context.expand( '${#TestCase#DeviceID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DELETE - LegacyDeviceDELETE");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - LegacyDeviceDELETE"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="DELETE LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - LegacyDeviceDELETE" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Brand Language="en-US">String</dece:Brand>
	<dece:Manufacturer Language="en-US">String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2009-12-17T09:30:47.0Z"  
			DeletionDate="2020-12-17T09:30:47.0Z">
			<dece:DisplayName>String</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - LegacyDeviceDELETE');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeDelete");
def httpStatus 			= tC.getPropertyValue("httpStatus");


log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#encodedValueOfSpecialSymbols}_${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_LegacyDeviceAdd_Where_DeviceID_contains_specialchacaters_UV-23_UV-362_UV-1866</con:value></con:property><con:property><con:name>sName</con:name><con:value>LegacyDeviceAdd_Retailer</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>245335</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value>Legacy Device record deleted successfully</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>text/plain;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>41</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">%7C</con:value></con:property><con:property><con:name>encodedparam</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">|</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" disabled="true" id="be4b3c2c-63b3-42b6-b66d-ccfcbd03b03e"><con:settings/><con:testStep type="groovy" name="Set Environment Properties" id="26b1d09a-e753-4932-922f-9382035a2ee4" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def env = context.expand( '${#Project#ENV}' )
log.info 'Env == '+env

if (env == 'QALP1')
{
tP.setPropertyValue("HOST","qa.p.uvvu.com");
tP.setPropertyValue("PORT","7001");
tP.setPropertyValue("BHOST","qa.b.uvvu.com");
tP.setPropertyValue("DHOST","qa.d.uvvu.com");
tP.setPropertyValue("targetSystem","LP1");
tP.setPropertyValue("nodeIdDECECS","dece:cs");
tP.setPropertyValue("nodeIdRTL","RET");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("certsPath_Windows","C:/certs/");
tP.setPropertyValue("certsPath_Linux","/opt/dece/certs/");
tP.setPropertyValue("windows_JDBCDriver","DECEOracle");
tP.setPropertyValue("Linux_JDBCDriver","oracle.jdbc.driver.OracleDriver");
tP.setPropertyValue("windows_JDBCConnStr","jdbc:oracle:thin:deqa1/dec2010@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com");
tP.setPropertyValue("linux_JDBCConnStr","jdbc:oracle:thin:deqa1/dec2010@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com");
}
else if (env == "QALP2")
{
tP.setPropertyValue("HOST","qa.p.uvvu.com");
tP.setPropertyValue("PORT","7002");
tP.setPropertyValue("BHOST","qa.b.uvvu.com");
tP.setPropertyValue("DHOST","qa.d.uvvu.com");
tP.setPropertyValue("targetSystem","LP2");
tP.setPropertyValue("nodeIdDECECS","dece:cs");
tP.setPropertyValue("nodeIdRTL","RET");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("certsPath_Windows","C:/certs/");
tP.setPropertyValue("certsPath_Linux","/opt/dece/certs/");
tP.setPropertyValue("windows_JDBCDriver","DECEOracle");
tP.setPropertyValue("Linux_JDBCDriver","oracle.jdbc.driver.OracleDriver");
tP.setPropertyValue("windows_JDBCConnStr","jdbc:oracle:thin:deqa1/dec2010@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com");
tP.setPropertyValue("linux_JDBCConnStr","jdbc:oracle:thin:deqa1/dec2010@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com");
}
else if (env == "QALP3")
{
tP.setPropertyValue("HOST","qa.p.uvvu.com");
tP.setPropertyValue("PORT","7003");
tP.setPropertyValue("BHOST","qa.b.uvvu.com");
tP.setPropertyValue("DHOST","qa.d.uvvu.com");
tP.setPropertyValue("targetSystem","LP3");
tP.setPropertyValue("nodeIdDECECS","DECE_CS");
tP.setPropertyValue("nodeIdRTL","loadtest_retailer");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("certsPath_Windows","C:/certs/");
tP.setPropertyValue("certsPath_Linux","/opt/dece/certs/");
tP.setPropertyValue("windows_JDBCDriver","DECEOracle");
tP.setPropertyValue("Linux_JDBCDriver","oracle.jdbc.driver.OracleDriver");
tP.setPropertyValue("windows_JDBCConnStr","jdbc:oracle:thin:deqa1/dec2010@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com");
tP.setPropertyValue("linux_JDBCConnStr","jdbc:oracle:thin:deqa1/dec2010@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com");
}

else if (env == "DEV")
{

tP.setPropertyValue("HOST","lp2.dev.p.uvvu.com");
tP.setPropertyValue("PORT","8443");
tP.setPropertyValue("BHOST","lp2.dev.b.uvvu.com");
tP.setPropertyValue("DHOST","lp2.dev.d.uvvu.com");
tP.setPropertyValue("targetSystem","DEV");
tP.setPropertyValue("nodeIdDECECS","truststore-dece-cs");
tP.setPropertyValue("nodeIdRTL","truststore-07162013");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("certsPath_Windows","C:/certs/");
tP.setPropertyValue("certsPath_Linux","/opt/dece/certs/");
tP.setPropertyValue("windows_JDBCDriver","DECEOracle");
tP.setPropertyValue("Linux_JDBCDriver","oracle.jdbc.driver.OracleDriver");
tP.setPropertyValue("windows_JDBCConnStr","jdbc:oracle:thin:deqa1/dec2010@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com");
tP.setPropertyValue("linux_JDBCConnStr","jdbc:oracle:thin:deqa1/dec2010@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com");
}





</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String nodeId = testProject.getPropertyValue("node_oid");
def certspath = context.expand( '${#Project#certspath}' )
def certsPath_Windows = context.expand( '${#Project#certsPath_Windows}' )
def certsPath_Linux = context.expand( '${#Project#certsPath_Linux}' )
def windows_JDBCDriver = context.expand( '${#Project#windows_JDBCDriver}' )
def linux_JDBCDriver = context.expand( '${#Project#Linux_JDBCDriver}' )
def windows_JDBCConnStr = context.expand( '${#Project#windows_JDBCConnStr}' )
def linux_JDBCConnStr = context.expand( '${#Project#linux_JDBCConnStr}' )


if (System.properties['os.name'].toLowerCase().contains('windows'))
{
			log.info "it's Windows";
               
                 testProject.setPropertyValue("JDBCConnStr",windows_JDBCConnStr);
                testProject.setPropertyValue("JDBCDriver",windows_JDBCDriver);
                testProject.setPropertyValue("certspath",certsPath_Windows);
                
}

else
{
	log.info "it's not Windows"
	 testProject.setPropertyValue("JDBCConnStr",linux_JDBCConnStr);
                testProject.setPropertyValue("JDBCDriver",linux_JDBCDriver);
                testProject.setPropertyValue("certspath",certsPath_Linux);
               
                
}

log.info "VM Set";

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}


File f1 = new File(certspath+"/"+nodeId + "_concat.pem");
File f2 = new File(certspath+"/"+nodeId + ".jks");
File f3 = new File(certspath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certspath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
	 else if(f2.exists())
	 {
	 	keyStorePath = certspath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certspath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>GET - LegacyDeviceGet</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Cases Containing APIs</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>26b1d09a-e753-4932-922f-9382035a2ee4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Cases Containing APIs Cache" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="POST - LegacyDeviceAdd" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="05bec25c-b2f7-4e9e-a313-4bfb3bb9e0fd"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);



</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));

tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));
tC.setPropertyValue("encodedparam",callTC.getPropertyValue("encodedparam"));

tC.setPropertyValue("encodedValueOfSpecialSymbols",callTC.getPropertyValue("encodedValueOfSpecialSymbols"));

def deviceID = context.expand( '${#TestCase#DeviceID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}
log.info deviceID
def deviceid_xml=URLDecoder.decode(deviceID,"UTF-8")
tC.setPropertyValue("deviceid_xml",deviceid_xml);

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("POST - LegacyDeviceADD");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - LegacyDeviceADD"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="POST LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - LegacyDeviceADD" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Sample XML file generated by XMLSpy versionMinor009 sp1 (http://www.altova.com)
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"
urn:dece:deviceId:208511-->
<dece:Device 
IsLegacy="true" 
DeviceID="${#TestCase#deviceid_xml}"
xsi:schemaLocation="http://www.decellc.org/schema/2012/12/dece dece.xsd"
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Manufacturer>String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:Brand Language="en-us">String</dece:Brand>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image MimeType="String" Width="2" Height="2">http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Image>
	<dece:PolicyList PolicyListID="urn:dece:">
		<dece:Policy PolicyID="http://www.altova.com">
			<dece:PolicyClass>urn:dece:</dece:PolicyClass>
			<dece:Resource>http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Resource>
			<dece:RequestingEntity>urn:dece:</dece:RequestingEntity>
			<dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
			<dece:ResourceStatus>
				<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
					<dece:Value>urn:dece:type:status:active</dece:Value>
					<dece:Description>String</dece:Description>
				</dece:Current>
				<dece:History>
					<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
						<dece:Value>urn:dece:type:status:active</dece:Value>
						<dece:Description>String</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:Policy>
	</dece:PolicyList>
<!--	<dece:LicAppID>urn:dece:</dece:LicAppID>  -->
<!--	<dece:DRMClientID>urn:dece:</dece:DRMClientID> -->
<!--	<dece:ManagingRetailer>urn:dece:</dece:ManagingRetailer> -->
<!--	<dece:ManageRetailerURL>http://www.altova.com</dece:ManageRetailerURL> -->
<!--
	<dece:ResourceStatus>
		<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
			<dece:Value>urn:dece:type:status:active</dece:Value>
			<dece:Description>String</dece:Description>
		</dece:Current>
		<dece:History>
			<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
				<dece:Value>urn:dece:type:status:active</dece:Value>
				<dece:Description>String</dece:Description>
			</dece:Prior>
		</dece:History>
	</dece:ResourceStatus>
-->
</dece:Device>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - LegacyDeviceADD');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode = tC.getPropertyValue("ExpectedReturnCodeCreate");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_20008 - LegacyDeviceAdd -Create-Get-Update-Get-200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0_LegacyDeviceCache_Testcases</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>453015</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:certificate_not_provisioned">
      <Reason Language="en">The security token is required.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/07/Account/urn:dece:accountid:org:dece:F1B827C53B83CAD7E0401F0A07994332/LegacyDevice</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/07/error/en/ErrorList.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>697</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedparam</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceid_xml</con:name><con:value>urn:dece:deviceid:org:dece:453015</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PUT - LegacyDeviceUpdate" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f8d3bd28-01eb-42e2-a7cf-151420ff4db0"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));

tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));
tC.setPropertyValue("encodedValueOfSpecialSymbols",callTC.getPropertyValue("encodedValueOfSpecialSymbols"));
tC.setPropertyValue("encodedparam",callTC.getPropertyValue("encodedparam"));
def deviceID = context.expand( '${#TestCase#DeviceID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}

log.info deviceID
tC.setPropertyValue("deviceid_xml",callTC.getPropertyValue("DeviceID"));
/*
*  Mapping this call only to a retailer node.
*/
if (tC.getPropertyValue("nodeid") != "001234") {
	tC.setPropertyValue("nodeid","001234");
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("PUT - LegacyDevicePUT");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - LegacyDevicePUT"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="PUT LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - LegacyDevicePUT" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Sample XML file generated by XMLSpy versionMinor009 sp1 (http://www.altova.com)
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}" -->
<dece:Device 
IsLegacy="true" 
DeviceID="${#TestCase#deviceid_xml}" 
xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Manufacturer>String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:Brand Language="en-us">String</dece:Brand>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image MimeType="String" Width="2" Height="2">http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Image>
	<dece:PolicyList PolicyListID="urn:dece:">
		<dece:Policy PolicyID="http://www.altova.com">
			<dece:PolicyClass>urn:dece:</dece:PolicyClass>
			<dece:Resource>http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Resource>
			<dece:RequestingEntity>urn:dece:</dece:RequestingEntity>
			<dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
			<dece:ResourceStatus>
				<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
					<dece:Value>urn:dece:type:status:active</dece:Value>
					<dece:Description>String</dece:Description>
				</dece:Current>
				<dece:History>
					<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
						<dece:Value>urn:dece:type:status:active</dece:Value>
						<dece:Description>String</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:Policy>
	</dece:PolicyList>
<!--
	<dece:LicAppID>urn:dece:</dece:LicAppID>
	<dece:DRMClientID>urn:dece:</dece:DRMClientID>
	<dece:ManagingRetailer>urn:dece:</dece:ManagingRetailer>
	<dece:ManageRetailerURL>http://www.altova.com</dece:ManageRetailerURL>

	<dece:ResourceStatus>
		<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
			<dece:Value>urn:dece:type:status:active</dece:Value>
			<dece:Description>String</dece:Description>
		</dece:Current>
		<dece:History>
			<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
				<dece:Value>urn:dece:type:status:active</dece:Value>
				<dece:Description>String</dece:Description>
			</dece:Prior>
		</dece:History>
	</dece:ResourceStatus>
-->
</dece:Device>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - LegacyDevicePUT');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode = tC.getPropertyValue("ExpectedReturnCodeUpdate");
def httpStatus 	   = tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>001234</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_20008 - LegacyDeviceAdd -Create-Get-Update-Get-200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0_LegacyDeviceCache_Testcases</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>453015</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:certificate_not_provisioned">
      <Reason Language="en">The security token is required.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/07/Account/urn:dece:accountid:org:dece:F1B827C53B83CAD7E0401F0A07994332/LegacyDevice/urn:dece:deviceid:org:dece:453015</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/07/error/en/ErrorList.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>731</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedparam</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceid_xml</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET - LegacyDeviceGet" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="39202e15-54a7-4c13-a205-3ccf5efd556d"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));

tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));
tC.setPropertyValue("encodedValueOfSpecialSymbols",callTC.getPropertyValue("encodedValueOfSpecialSymbols"));
tC.setPropertyValue("encodedparam",callTC.getPropertyValue("encodedparam"));
def deviceID = context.expand( '${#TestCase#DeviceID}' )
def domainID = context.expand( '${#Project#DomainID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 // tP.setPropertyValue("DomainID", URLEncoder.encode(domainID, "UTF-8"));
}
else
{
	 tC.setPropertyValue("DeviceID", URLDecoder.decode(deviceID, "UTF-8"));
  //tP.setPropertyValue("DomainID", URLDecoder.decode(domainID, "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("GET - LegacyDeviceGET");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - LegacyDeviceGET"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="GET LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/Domain/${#Project#DomainID}/Device/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - LegacyDeviceGET" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Brand Language="en-US">String</dece:Brand>
	<dece:Manufacturer Language="en-US">String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2009-12-17T09:30:47.0Z"  
			DeletionDate="2020-12-17T09:30:47.0Z">
			<dece:DisplayName>String</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@DeviceID]" disabled="true"><con:configuration><path>declare namespace ns1='http://www.decellc.org/schema/2012/12/coordinator';
//ns1:Device[1]/@DeviceID</path><content>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
//	      case "ETag": 
//			ETag = value[0]; 
//			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
//tC.setPropertyValue("ETag", ETag);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeGet");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract The Response Header ETag"><con:settings/><con:config><script>/*Extracting ETag from response and storing it in Project level Property*/
def httpStatus = context.expand( '${#TestCase#httpStatus}' )


if(httpStatus=='HTTP/1.1 200 OK')
{
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "ETag": 
			ETag = value[0]; 
			break;
	}
}

tP.setPropertyValue("ETag", ETag);
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header of unconditional GET"><con:settings/><con:config><script>
def httpStatus = context.expand( '${#TestCase#httpStatus}' )

if(httpStatus=='HTTP/1.1 200 OK')
{
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String Cache_Control ;
String ETag ;
String Expires ;
String Last_Modified ;
String x_Transaction_Info;
String Vary;

/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Cache-Control": 
			Cache_Control = value[0];
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Expires": 
			Expires = value[0]; 
			break;
		case "Last-Modified": 
			Last_Modified = value[0]; 
			break;
		case "x-Transaction-Info": 
			x_Transaction_Info = value[0]; 
			break;
		case "Vary": 
			Vary = value[0]; 
			break;
		
		
	}
}


tC.setPropertyValue("Cache-Control", Cache_Control);
tC.setPropertyValue("ETag", ETag);
tC.setPropertyValue("Expires", Expires);
tC.setPropertyValue("Last-Modified", Last_Modified);
tC.setPropertyValue("x-Transaction-Info", x_Transaction_Info);
tC.setPropertyValue("Vary", Vary);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Process The  Header Unconditional GET"><con:settings/><con:config><script>def httpStatus = context.expand( '${#TestCase#httpStatus}' )

if(httpStatus=='HTTP/1.1 200 OK')
{
def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def Cache_Control=tC.getPropertyValue("Cache-Control")
if(Cache_Control==null)
assert 1==2

def ETag=tC.getPropertyValue("ETag")
if(ETag==null)
assert 1==2

def Expires=tC.getPropertyValue("Expires")
if(Expires==null)
assert 1==2

/*def Last_Modified=tC.getPropertyValue("Last-Modified")
if(Last_Modified==null)
assert 1==2*/

def Lx_Transaction_Info=tC.getPropertyValue("x-Transaction-Info")
if(Lx_Transaction_Info==null)
assert 1==2

def Vary=tC.getPropertyValue("Vary")
if(Vary!='Authorization,Accept-Encoding')
assert 1==2

}</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:453015</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_20008 - LegacyDeviceAdd -Create-Get-Update-Get-200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0_LegacyDeviceCache_Testcases</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>453015</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:certificate_not_provisioned">
      <Reason Language="en">The security token is required.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/07/Account/urn:dece:accountid:org:dece:F1B827C53B83CAD7E0401F0A07994332/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:453015</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/07/error/en/ErrorList.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">760</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>encodedparam</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>Cache-Control</con:name><con:value>max-age=86400</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"F1A8FB94C53CA6DEE0401F0A059974A5:AEAE0D0F"</con:value></con:property><con:property><con:name>Expires</con:name><con:value>Thu, 06 Feb 2014 12:37:14 GMT</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Wed, 05 Feb 2014 12:37:14 GMT</con:value></con:property><con:property><con:name>x-Transaction-Info</con:name><con:value>t=1391603834 UvIwegofmIgAACzZZjgAAAAT urn:dece:org:org:dece:RET_CS_1 10.31.153.241</con:value></con:property><con:property><con:name>Vary</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authorization,Accept-Encoding</con:value></con:property><con:property><con:name>DomainID</con:name><con:value>urn%3Adece%3Adomainid%3Adece%3A1234</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DELETE - LegacyDeviceDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b2132f3e-b7f0-4290-88cc-63ca19f6932f"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));

tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));
tC.setPropertyValue("encodedValueOfSpecialSymbols",callTC.getPropertyValue("encodedValueOfSpecialSymbols"));
tC.setPropertyValue("encodedparam",callTC.getPropertyValue("encodedparam"));
def deviceID = context.expand( '${#TestCase#DeviceID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DELETE - LegacyDeviceDELETE");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - LegacyDeviceDELETE"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="DELETE LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - LegacyDeviceDELETE" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Brand Language="en-US">String</dece:Brand>
	<dece:Manufacturer Language="en-US">String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2009-12-17T09:30:47.0Z"  
			DeletionDate="2020-12-17T09:30:47.0Z">
			<dece:DisplayName>String</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - LegacyDeviceDELETE');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeDelete");
def httpStatus 			= tC.getPropertyValue("httpStatus");


log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_20008 - LegacyDeviceAdd -Create-Get-Update-Get-200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0_LegacyDeviceCache_Testcases</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>453015</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:certificate_not_provisioned">
      <Reason Language="en">The security token is required.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/07/Account/urn:dece:accountid:org:dece:F1B827C53B83CAD7E0401F0A07994332/LegacyDevice/urn:dece:deviceid:org:dece:453015</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/07/error/en/ErrorList.html</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>731</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedparam</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String keyStoreAlias = "";

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

String nodeId    = testProject.getPropertyValue("node_oid");

def iSCnode = context.expand( '${#Project#ISCnode}' )
def certspath = context.expand( '${#Project#certspath}' )


switch (nodeId) {
                case "2222":  // DLP Standalone
                                keyStorePath = certspath+"07178681a_concat.pem";
                break;

                case "2424":  // DLP Standalone
                                keyStorePath = certspath+"2424_concat.pem";
                break;

                case "$nodeId":
                keyStorePath = certspath+ nodeId + "_concat.pem";
                
                break;
      
}


this.log.info "keyStorePath [$keyStorePath]";

callTC.setPropertyValue("keyStorePath", "$keyStorePath");</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_20008 - LegacyDeviceAdd -Create-Get-Update-Get-200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0_LegacyDeviceCache_Testcases</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Cases Containing APIs-Generated_DeviceID" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="POST - LegacyDeviceAdd" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7bf7dc06-8d2c-4ce5-9060-1dc4f9e51de7"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("DeviceIDOnly",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);



</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("DeviceIDOnly",callTC.getPropertyValue("DeviceIDOnly"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));

tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));


def deviceID = context.expand( '${#TestCase#DeviceID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("POST - LegacyDeviceADD");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - LegacyDeviceADD"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="POST LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - LegacyDeviceADD" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Sample XML file generated by XMLSpy versionMinor009 sp1 (http://www.altova.com)
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}" -->

<dece:Device 
IsLegacy="true" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"
xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Manufacturer>String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:Brand Language="en-us">String</dece:Brand>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image MimeType="String" Width="2" Height="2">http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Image>
	<dece:PolicyList PolicyListID="urn:dece:">
		<dece:Policy PolicyID="http://www.altova.com">
			<dece:PolicyClass>urn:dece:</dece:PolicyClass>
			<dece:Resource>http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Resource>
			<dece:RequestingEntity>urn:dece:</dece:RequestingEntity>
			<dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
			<dece:ResourceStatus>
				<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
					<dece:Value>urn:dece:type:status:active</dece:Value>
					<dece:Description>String</dece:Description>
				</dece:Current>
				<dece:History>
					<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
						<dece:Value>urn:dece:type:status:active</dece:Value>
						<dece:Description>String</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:Policy>
	</dece:PolicyList>
<!--
	<dece:LicAppID>urn:dece:</dece:LicAppID>
	<dece:DRMClientID>urn:dece:</dece:DRMClientID>
	<dece:ManagingRetailer>urn:dece:</dece:ManagingRetailer>
	<dece:ManageRetailerURL>http://www.altova.com</dece:ManageRetailerURL>
	<dece:ResourceStatus>
		<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
			<dece:Value>urn:dece:type:status:active</dece:Value>
			<dece:Description>String</dece:Description>
		</dece:Current>
		<dece:History>
			<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
				<dece:Value>urn:dece:type:status:active</dece:Value>
				<dece:Description>String</dece:Description>
			</dece:Prior>
		</dece:History>
	</dece:ResourceStatus>
-->
</dece:Device>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - LegacyDeviceADD');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode = tC.getPropertyValue("ExpectedReturnCodeCreate");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Process The HTTPContentLocation"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def httpLocationHeader = tC.getPropertyValue("httpContentLocation");
/* def releaseversion = tC.getPropertyValue("rest_api_version"); */
//def releaseversion = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' );
def releaseversion = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

log.info "httpLocationHeader \"" + httpLocationHeader;
log.info "releaseversion \"" + releaseversion;

//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpContentLocation}') != null;

                def a = context.expand( '${#TestCase#httpContentLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
              		log.info urlStr
            // assert b.getPath().matches("/rest/1/0/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/LegacyDevice/urn:dece:deviceId:[0-9,A-F]*"); 
                 assert b.getPath().matches("/rest/$releaseversion/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:[0-9,A-F]*");    
                
                int lastColon = urlStr.lastIndexOf('%');
                int lastSlash = urlStr.lastIndexOf('/');
                int lastLetter  = urlStr.lastIndexOf('A');
                deviceidonly  = urlStr.substring(lastColon + 3);
                deviceid      = urlStr.substring(lastSlash + 1);

                //this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

                tC.setPropertyValue("DeviceID",deviceid);
                tC.setPropertyValue("DeviceIDOnly",deviceidonly);
                //tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
                assert context.expand( '${TestCase#httpContentLocation}') == "";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Return DeviceID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("DeviceID",tC.getPropertyValue("DeviceID"));
callTC.setPropertyValue("DeviceIDOnly",tC.getPropertyValue("DeviceIDOnly"));</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:852641</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_30078 - LegacyDeviceAdd - FUNC - RTR - Generated DeviceID_UserActive - Pivilege Full</con:value></con:property><con:property><con:name>sName</con:name><con:value>LegacyDeviceAdd_Retailer</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>852641</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value>Legacy Device has been created successfully</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>43</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:852641</con:value></con:property><con:property><con:name>rest_api_version</con:name><con:value>1/0</con:value></con:property><con:property><con:name>DeviceIDOnly</con:name><con:value>est/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:852641</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PUT - LegacyDeviceUpdate" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3894895f-ffe6-438c-b87b-15d7560c2999"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("DeviceIDOnly",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("DeviceIDOnly",callTC.getPropertyValue("DeviceIDOnly"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));

tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));

def deviceID = context.expand( '${#TestCase#DeviceID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}
tC.setPropertyValue("deviceid_xml",callTC.getPropertyValue("DeviceID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("PUT - LegacyDevicePUT");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - LegacyDevicePUT"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="PUT LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - LegacyDevicePUT" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Sample XML file generated by XMLSpy versionMinor009 sp1 (http://www.altova.com)
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}" -->

<dece:Device 
IsLegacy="true" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"
xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Manufacturer>String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:Brand Language="en-us">String</dece:Brand>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image MimeType="String" Width="2" Height="2">http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Image>
	<dece:PolicyList PolicyListID="urn:dece:">
		<dece:Policy PolicyID="http://www.altova.com">
			<dece:PolicyClass>urn:dece:</dece:PolicyClass>
			<dece:Resource>http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Resource>
			<dece:RequestingEntity>urn:dece:</dece:RequestingEntity>
			<dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
			<dece:ResourceStatus>
				<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
					<dece:Value>urn:dece:type:status:active</dece:Value>
					<dece:Description>String</dece:Description>
				</dece:Current>
				<dece:History>
					<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
						<dece:Value>urn:dece:type:status:active</dece:Value>
						<dece:Description>String</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:Policy>
	</dece:PolicyList>
<!--
	<dece:LicAppID>urn:dece:</dece:LicAppID>
	<dece:DRMClientID>urn:dece:</dece:DRMClientID>
	<dece:ManagingRetailer>urn:dece:</dece:ManagingRetailer>
	<dece:ManageRetailerURL>http://www.altova.com</dece:ManageRetailerURL>
	<dece:ResourceStatus>
		<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
			<dece:Value>urn:dece:type:status:active</dece:Value>
			<dece:Description>String</dece:Description>
		</dece:Current>
		<dece:History>
			<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
				<dece:Value>urn:dece:type:status:active</dece:Value>
				<dece:Description>String</dece:Description>
			</dece:Prior>
		</dece:History>
	</dece:ResourceStatus>
-->
</dece:Device>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - LegacyDevicePUT');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode = tC.getPropertyValue("ExpectedReturnCodeUpdate");
def httpStatus 	   = tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:852641</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_30078 - LegacyDeviceAdd - FUNC - RTR - Generated DeviceID_UserActive - Pivilege Full</con:value></con:property><con:property><con:name>sName</con:name><con:value>LegacyDeviceAdd_Retailer</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>852641</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value>Legacy Device has been updated successfully</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>43</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:852641</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>DeviceIDOnly</con:name><con:value>est/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:852641</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>deviceid_xml</con:name><con:value>urn:dece:deviceid:org:dece:852641</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET - LegacyDeviceGet" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6763b7c7-ce78-41c0-b77b-5c4bd834bb37"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));

tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));

def deviceID = context.expand( '${#TestCase#DeviceID}' )
def domainID = context.expand( '${#Project#DomainID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
  //tP.setPropertyValue("DomainID", URLEncoder.encode(domainID, "UTF-8"));
}
else
{
	 tC.setPropertyValue("DeviceID", URLDecoder.decode(deviceID, "UTF-8"));
  //tP.setPropertyValue("DomainID", URLDecoder.decode(domainID, "UTF-8"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("GET - LegacyDeviceGET");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - LegacyDeviceGET1" disabled="true"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="GET LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - LegacyDeviceGET1" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="2424_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Brand Language="en-US">String</dece:Brand>
	<dece:Manufacturer Language="en-US">String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2009-12-17T09:30:47.0Z"  
			DeletionDate="2020-12-17T09:30:47.0Z">
			<dece:DisplayName>String</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET - LegacyDeviceGET" id="d06793ad-f15f-4a09-9083-334efcc9e529"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="GET LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/Domain/${#Project#DomainID}/Device/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - LegacyDeviceGET" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Brand Language="en-US">String</dece:Brand>
	<dece:Manufacturer Language="en-US">String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2009-12-17T09:30:47.0Z"  
			DeletionDate="2020-12-17T09:30:47.0Z">
			<dece:DisplayName>String</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@DeviceID]" disabled="true"><con:configuration><path>declare namespace ns1='http://www.decellc.org/schema/2012/12/coordinator';
//ns1:Device[1]/@DeviceID</path><content>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeGet");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header of unconditional GET"><con:settings/><con:config><script>
def httpStatus = context.expand( '${#TestCase#httpStatus}' )

if(httpStatus=='HTTP/1.1 200 OK')
{
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String Cache_Control ;
String ETag ;
String Expires ;
String Last_Modified ;
String x_Transaction_Info;
String Vary;

/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Cache-Control": 
			Cache_Control = value[0];
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Expires": 
			Expires = value[0]; 
			break;
		case "Last-Modified": 
			Last_Modified = value[0]; 
			break;
		case "x-Transaction-Info": 
			x_Transaction_Info = value[0]; 
			break;
		case "Vary": 
			Vary = value[0]; 
			break;
		
		
	}
}


tC.setPropertyValue("Cache-Control", Cache_Control);
tC.setPropertyValue("ETag", ETag);
tC.setPropertyValue("Expires", Expires);
tC.setPropertyValue("Last-Modified", Last_Modified);
tC.setPropertyValue("x-Transaction-Info", x_Transaction_Info);
tC.setPropertyValue("Vary", Vary);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Process The  Header Unconditional GET"><con:settings/><con:config><script>def httpStatus = context.expand( '${#TestCase#httpStatus}' )

if(httpStatus=='HTTP/1.1 200 OK')
{
def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def Cache_Control=tC.getPropertyValue("Cache-Control")
if(Cache_Control==null)
assert 1==2

def ETag=tC.getPropertyValue("ETag")
if(ETag==null)
assert 1==2

def Expires=tC.getPropertyValue("Expires")
if(Expires==null)
assert 1==2

/*def Last_Modified=tC.getPropertyValue("Last-Modified")
if(Last_Modified==null)
assert 1==2*/

def Lx_Transaction_Info=tC.getPropertyValue("x-Transaction-Info")
if(Lx_Transaction_Info==null)
assert 1==2

def Vary=tC.getPropertyValue("Vary")
if(Vary!='Authorization,Accept-Encoding')
assert 1==2

}</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:289154</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_30069 - LegacyDeviceAdd - FUNC - RTR - Generated DeviceID_UserNotActive - userId -active- status</con:value></con:property><con:property><con:name>sName</con:name><con:value>LegacyDeviceAdd_Retailer</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>289154</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<Device DeviceID="urn:dece:deviceid:org:dece:289154" IsLegacy="true" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>String</DisplayName>
   <Manufacturer>String</Manufacturer>
   <Model>String</Model>
   <Brand Language="en-us">String</Brand>
   <SerialNo>String</SerialNo>
   <Image Height="2" Width="2" MimeType="String">https://d1aa09tqol6rcr.cloudfront.net/uvvu-images/0B80CD0A1F5D6887E05305991F0A69F1</Image>
   <ResourceStatus>
      <Current CreationDate="2014-12-31T09:33:34.987Z" CreatedBy="urn:dece:org:org:dece:RET" ModificationDate="2014-12-31T09:33:35.090Z" ModifiedBy="urn:dece:org:org:dece:RET">
         <Value>urn:dece:type:status:active</Value>
         <Description>Legacy Device Updated</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Cache-Control</con:name><con:value>max-age=86400</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"0B80CD0C2553568FE05305991F0A49CE:9914C4F2"</con:value></con:property><con:property><con:name>Expires</con:name><con:value>Thu, 01 Jan 2015 09:33:37 GMT</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Wed, 31 Dec 2014 09:33:35 GMT</con:value></con:property><con:property><con:name>x-Transaction-Info</con:name><con:value>t=1420018417 VKPC8AofmIgAAFQArwMAAAA- urn:dece:org:org:dece:RET 10.31.173.1</con:value></con:property><con:property><con:name>Vary</con:name><con:value>Authorization,Accept-Encoding</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d06793ad-f15f-4a09-9083-334efcc9e529</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DELETE - LegacyDeviceDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="359814a6-6426-4537-ae41-55cb8dd93f9a"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));

tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));
def deviceID = context.expand( '${#TestCase#DeviceID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DELETE - LegacyDeviceDELETE");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - LegacyDeviceDELETE"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="DELETE LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - LegacyDeviceDELETE" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Brand Language="en-US">String</dece:Brand>
	<dece:Manufacturer Language="en-US">String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2009-12-17T09:30:47.0Z"  
			DeletionDate="2020-12-17T09:30:47.0Z">
			<dece:DisplayName>String</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - LegacyDeviceDELETE');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeDelete");
def httpStatus 			= tC.getPropertyValue("httpStatus");


log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:852641</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_30078 - LegacyDeviceAdd - FUNC - RTR - Generated DeviceID_UserActive - Pivilege Full</con:value></con:property><con:property><con:name>sName</con:name><con:value>LegacyDeviceAdd_Retailer</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>852641</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value>Legacy Device record deleted successfully</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>text/plain;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>41</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>REST_API_Version</con:name><con:value>${#Global#REST_API_Version}</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Cases Containing APIs_UTF-8" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="POST - LegacyDeviceAdd" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="115927ee-d4a1-46e5-baa3-85992781a3c9"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);



</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));
tC.setPropertyValue("encodedparam",callTC.getPropertyValue("encodedparam"));
tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));
tC.setPropertyValue("encodedValueOfSpecialSymbols",callTC.getPropertyValue("encodedValueOfSpecialSymbols"));
def deviceID = context.expand( '${#TestCase#DeviceID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}

log.info deviceID
def deviceid_xml=URLDecoder.decode(deviceID,"UTF-8")
tC.setPropertyValue("deviceid_xml",deviceid_xml);

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("POST - LegacyDeviceADD");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - LegacyDeviceADD"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="POST LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - LegacyDeviceADD" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Sample XML file generated by XMLSpy versionMinor009 sp1 (http://www.altova.com)
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"
urn:dece:deviceId:208511-->
<dece:Device 
IsLegacy="true" 
DeviceID="${#TestCase#deviceid_xml}"
xsi:schemaLocation="http://www.decellc.org/schema/2012/12/dece dece.xsd"
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String ${#TestCase#encodedparam}</dece:DisplayName>
	<dece:Manufacturer>String ${#TestCase#encodedparam}</dece:Manufacturer>
	<dece:Model>String ${#TestCase#encodedparam}</dece:Model>
	<dece:Brand Language="en-us">String ${#TestCase#encodedparam}</dece:Brand>
	<dece:SerialNo>String ${#TestCase#encodedparam}</dece:SerialNo>
	<dece:Image MimeType="String" Width="2" Height="2">http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Image>
	<dece:PolicyList PolicyListID="urn:dece:">
		<dece:Policy PolicyID="http://www.altova.com">
			<dece:PolicyClass>urn:dece:</dece:PolicyClass>
			<dece:Resource>http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Resource>
			<dece:RequestingEntity>urn:dece:</dece:RequestingEntity>
			<dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
			<dece:ResourceStatus>
				<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
					<dece:Value>urn:dece:type:status:active</dece:Value>
					<dece:Description>String ${#TestCase#encodedparam}</dece:Description>
				</dece:Current>
				<dece:History>
					<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
						<dece:Value>urn:dece:type:status:active</dece:Value>
						<dece:Description>String ${#TestCase#encodedparam}</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:Policy>
	</dece:PolicyList>
<!--	<dece:LicAppID>urn:dece:</dece:LicAppID>  -->
<!--	<dece:DRMClientID>urn:dece:</dece:DRMClientID> -->
<!--	<dece:ManagingRetailer>urn:dece:</dece:ManagingRetailer> -->
<!--	<dece:ManageRetailerURL>http://www.altova.com</dece:ManageRetailerURL> -->
<!--
	<dece:ResourceStatus>
		<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
			<dece:Value>urn:dece:type:status:active</dece:Value>
			<dece:Description>String</dece:Description>
		</dece:Current>
		<dece:History>
			<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
				<dece:Value>urn:dece:type:status:active</dece:Value>
				<dece:Description>String</dece:Description>
			</dece:Prior>
		</dece:History>
	</dece:ResourceStatus>
-->
</dece:Device>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - LegacyDeviceADD');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode = tC.getPropertyValue("ExpectedReturnCodeCreate");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_LegacyDeviceAdd_UTF-8 _CharacterCheck_Create_Update_Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>LegacyDeviceAdd_Retailer</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>4555838</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value>Legacy Device has been created successfully</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>43</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:4555838</con:value></con:property><con:property><con:name>encodedparam</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">¾</con:value></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">%C2%BE</con:value></con:property><con:property><con:name>deviceid_xml</con:name><con:value>urn:dece:deviceid:org:dece:4555838</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PUT - LegacyDeviceUpdate" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d8897caa-74dc-4246-95be-07a64a75d75a"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));
tC.setPropertyValue("encodedparam",callTC.getPropertyValue("encodedparam"));
tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));
tC.setPropertyValue("encodedValueOfSpecialSymbols",callTC.getPropertyValue("encodedValueOfSpecialSymbols"));
def deviceID = context.expand( '${#TestCase#DeviceID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}

log.info deviceID
tC.setPropertyValue("deviceid_xml",callTC.getPropertyValue("DeviceID"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("PUT - LegacyDevicePUT");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - LegacyDevicePUT"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="PUT LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - LegacyDevicePUT" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Sample XML file generated by XMLSpy versionMinor009 sp1 (http://www.altova.com)
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}" -->
<dece:Device 
IsLegacy="true" 
DeviceID="${#TestCase#deviceid_xml}" 
xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String ${#TestCase#encodedparam}</dece:DisplayName>
	<dece:Manufacturer>String ${#TestCase#encodedparam}</dece:Manufacturer>
	<dece:Model>String ${#TestCase#encodedparam}</dece:Model>
	<dece:Brand Language="en-us">String ${#TestCase#encodedparam}</dece:Brand>
	<dece:SerialNo>String ${#TestCase#encodedparam}</dece:SerialNo>
	<dece:Image MimeType="String" Width="2" Height="2">http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Image>
	<dece:PolicyList PolicyListID="urn:dece:">
		<dece:Policy PolicyID="http://www.altova.com">
			<dece:PolicyClass>urn:dece:</dece:PolicyClass>
			<dece:Resource>http://unihidef.edgesuite.net/images/movies/61/11/61115456_840x1200.jpg</dece:Resource>
			<dece:RequestingEntity>urn:dece:</dece:RequestingEntity>
			<dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
			<dece:ResourceStatus>
				<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
					<dece:Value>urn:dece:type:status:active</dece:Value>
					<dece:Description>String ${#TestCase#encodedparam}</dece:Description>
				</dece:Current>
				<dece:History>
					<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
						<dece:Value>urn:dece:type:status:active</dece:Value>
						<dece:Description>String ${#TestCase#encodedparam}</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:Policy>
	</dece:PolicyList>
<!--
	<dece:LicAppID>urn:dece:</dece:LicAppID>
	<dece:DRMClientID>urn:dece:</dece:DRMClientID>
	<dece:ManagingRetailer>urn:dece:</dece:ManagingRetailer>
	<dece:ManageRetailerURL>http://www.altova.com</dece:ManageRetailerURL>

	<dece:ResourceStatus>
		<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
			<dece:Value>urn:dece:type:status:active</dece:Value>
			<dece:Description>String</dece:Description>
		</dece:Current>
		<dece:History>
			<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
				<dece:Value>urn:dece:type:status:active</dece:Value>
				<dece:Description>String</dece:Description>
			</dece:Prior>
		</dece:History>
	</dece:ResourceStatus>
-->
</dece:Device>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - LegacyDevicePUT');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode = tC.getPropertyValue("ExpectedReturnCodeUpdate");
def httpStatus 	   = tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_LegacyDeviceAdd_UTF-8 _CharacterCheck_Create_Update_Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>LegacyDeviceAdd_Retailer</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>4555838</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value>Legacy Device has been updated successfully</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>43</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38/Domain/urn:dece:domainid:dece:1234/Device/urn:dece:deviceid:org:dece:4555838</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>encodedparam</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">¾</con:value></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">%C2%BE</con:value></con:property><con:property><con:name>deviceid_xml</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET - LegacyDeviceGet" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f40ba3f7-8311-488e-b1cb-e76f5571bdc5"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));
tC.setPropertyValue("encodedparam",callTC.getPropertyValue("encodedparam"));
tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));
tC.setPropertyValue("encodedValueOfSpecialSymbols",callTC.getPropertyValue("encodedValueOfSpecialSymbols"));
def deviceID = context.expand( '${#TestCase#DeviceID}' )
def domainID = context.expand( '${#Project#DomainID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 // tP.setPropertyValue("DomainID", URLEncoder.encode(domainID, "UTF-8"));
}
else
{
	 tC.setPropertyValue("DeviceID", URLDecoder.decode(deviceID, "UTF-8"));
 // tP.setPropertyValue("DomainID", URLDecoder.decode(domainID, "UTF-8"));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("GET - LegacyDeviceGET");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - LegacyDeviceGET"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="GET LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/Domain/${#Project#DomainID}/Device/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - LegacyDeviceGET" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Brand Language="en-US">String</dece:Brand>
	<dece:Manufacturer Language="en-US">String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2009-12-17T09:30:47.0Z"  
			DeletionDate="2020-12-17T09:30:47.0Z">
			<dece:DisplayName>String</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@DeviceID]" disabled="true"><con:configuration><path>declare namespace ns1='http://www.decellc.org/schema/2012/12/coordinator';
//ns1:Device[1]/@DeviceID</path><content>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
log.info expXML;</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeGet");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}



</script></con:config></con:testStep><con:testStep type="groovy" name="UTF-8 Get Response" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def coordinatorSchema = context.expand( '${#Project#Coordinator_Schema}' )
log.info coordinatorSchema;
def ActualdisplayName = context.expand( '${GET - LegacyDeviceGET#ResponseAsXml#declare namespace ns1=\'${#Project#Coordinator_Schema}\'; //ns1:Device[1]/ns1:DisplayName[1]}' )
def ActualManufacturer = context.expand( '${GET - LegacyDeviceGET#ResponseAsXml#declare namespace ns1=\'${#Project#Coordinator_Schema}\'; //ns1:Device[1]/ns1:Manufacturer[1]}' )
def ActualModel = context.expand( '${GET - LegacyDeviceGET#ResponseAsXml#declare namespace ns1=\'${#Project#Coordinator_Schema}\'; //ns1:Device[1]/ns1:Model[1]}' )
def ActualBrand = context.expand( '${GET - LegacyDeviceGET#ResponseAsXml#declare namespace ns1=\'${#Project#Coordinator_Schema}\'; //ns1:Device[1]/ns1:Brand[1]}' )
log.info "ActualBrand="+ActualBrand;
def ActualSerialNo = context.expand( '${GET - LegacyDeviceGET#ResponseAsXml#declare namespace ns1=\'${#Project#Coordinator_Schema}\'; //ns1:Device[1]/ns1:SerialNo[1]}' )
def encodedparam = context.expand( '${#TestCase#encodedparam}' )

def expectedValue= ("String "+encodedparam)
log.info "Expected UTF-8 \""+expectedValue;


     if (ActualdisplayName != expectedValue) {
			assert 1 == 2;
		}
		log.info "Actual Display Name \""+ActualdisplayName;
		
	if (ActualManufacturer != expectedValue) {
			assert 1 == 2;
		}
		log.info "Actual Manufacturer Name \""+ActualManufacturer;
		
	 if (ActualModel != expectedValue) {
			assert 1 == 2;
		}
		log.info "Actual Model \""+ActualModel;
		
	if (ActualBrand != expectedValue) {
			assert 1 == 2;
		}
		log.info "Actual Brand \""+ActualBrand;
		
	if (ActualSerialNo != expectedValue) {
			assert 1 == 2;
		}
          log.info "Actual Actual Serial No \""+ActualSerialNo;

</script></con:config></con:testStep><con:testStep type="groovy" name="UTF-8 Response Assertion"><con:settings/><con:config><script>
def httpStatus = context.expand( '${#TestCase#httpStatus}' )

if(httpStatus == 'HTTP/1.1 200 OK')
{
def response = context.expand( '${GET - LegacyDeviceGET#Response#declare namespace ns1=\'${#Project#Coordinator_Schema}\'; //ns1:Device[1]}' )
log.info response
def val = context.expand( '${#TestCase#encodedparam}' )
log.info val;

def records = new XmlSlurper().parseText(response)
log.info records
assert "String "+val == records."DisplayName".text()
log.info records."DisplayName".text()
assert "String "+val == records."Manufacturer".text()
log.info records."Manufacturer".text()
assert "String "+val == records."Model".text()
log.info records."Model".text()
assert "String "+val == records."Brand".text()
log.info records."Brand".text()
assert "String "+val == records."SerialNo".text()
log.info records."SerialNo".text()
}
else
log.info "Sorry!! Cannot get the values!!!";</script></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header of unconditional GET"><con:settings/><con:config><script>
def httpStatus = context.expand( '${#TestCase#httpStatus}' )

if(httpStatus=='HTTP/1.1 200 OK')
{
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - LegacyDeviceGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String Cache_Control ;
String ETag ;
String Expires ;
String Last_Modified ;
String x_Transaction_Info;
String Vary;

/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Cache-Control": 
			Cache_Control = value[0];
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Expires": 
			Expires = value[0]; 
			break;
		case "Last-Modified": 
			Last_Modified = value[0]; 
			break;
		case "x-Transaction-Info": 
			x_Transaction_Info = value[0]; 
			break;
		case "Vary": 
			Vary = value[0]; 
			break;
		
		
	}
}


tC.setPropertyValue("Cache-Control", Cache_Control);
tC.setPropertyValue("ETag", ETag);
tC.setPropertyValue("Expires", Expires);
tC.setPropertyValue("Last-Modified", Last_Modified);
tC.setPropertyValue("x-Transaction-Info", x_Transaction_Info);
tC.setPropertyValue("Vary", Vary);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Process The  Header Unconditional GET"><con:settings/><con:config><script>def httpStatus = context.expand( '${#TestCase#httpStatus}' )

if(httpStatus=='HTTP/1.1 200 OK')
{
def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def Cache_Control=tC.getPropertyValue("Cache-Control")
if(Cache_Control==null)
assert 1==2

def ETag=tC.getPropertyValue("ETag")
if(ETag==null)
assert 1==2

def Expires=tC.getPropertyValue("Expires")
if(Expires==null)
assert 1==2

/*def Last_Modified=tC.getPropertyValue("Last-Modified")
if(Last_Modified==null)
assert 1==2*/

def Lx_Transaction_Info=tC.getPropertyValue("x-Transaction-Info")
if(Lx_Transaction_Info==null)
assert 1==2

def Vary=tC.getPropertyValue("Vary")
if(Vary!='Authorization,Accept-Encoding')
assert 1==2

}</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:4555838</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_LegacyDeviceAdd_UTF-8 _CharacterCheck_Create_Update_Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>LegacyDeviceAdd_Retailer</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>4555838</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Device DeviceID="urn:dece:deviceid:org:dece:4555838" IsLegacy="true" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>String ¾</DisplayName>
   <Manufacturer>String ¾</Manufacturer>
   <Model>String ¾</Model>
   <Brand Language="en-us">String ¾</Brand>
   <SerialNo>String ¾</SerialNo>
   <Image Height="2" Width="2" MimeType="String">https://d1aa09tqol6rcr.cloudfront.net/uvvu-images/0B811102261165F1E05307991F0A6109</Image>
   <ResourceStatus>
      <Current CreationDate="2014-12-31T09:53:03.133Z" CreatedBy="urn:dece:org:org:dece:RET_CS_1" ModificationDate="2014-12-31T09:53:03.198Z" ModifiedBy="urn:dece:org:org:dece:RET_CS_1">
         <Value>urn:dece:type:status:active</Value>
         <Description>Legacy Device Updated</Description>
      </Current>
      <History>
         <Prior ModificationDate="2014-12-31T09:53:00.904Z" ModifiedBy="urn:dece:org:org:dece:RET_CS_1">
            <Value>urn:dece:type:status:active</Value>
            <Description>Legacy Device Created</Description>
         </Prior>
      </History>
   </ResourceStatus>
</Device>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>encodedparam</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">¾</con:value></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value>%C2%BE</con:value></con:property><con:property><con:name>deviceid_xml</con:name><con:value>urn:dece:deviceid:org:dece:_6829477</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>Cache-Control</con:name><con:value>max-age=86400</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"0B811101075365EFE05307991F0A9D11:EDFB44C7"</con:value></con:property><con:property><con:name>Expires</con:name><con:value>Thu, 01 Jan 2015 09:53:05 GMT</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Wed, 31 Dec 2014 09:53:03 GMT</con:value></con:property><con:property><con:name>x-Transaction-Info</con:name><con:value>t=1420019585 VKPHgAofmIgAAFOHpqkAAAAz urn:dece:org:org:dece:RET_CS_1 10.31.173.1</con:value></con:property><con:property><con:name>Vary</con:name><con:value>Authorization,Accept-Encoding</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DELETE - LegacyDeviceDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bcb2f519-a423-4f17-83c8-ba0265171e76"><con:settings/><con:testStep type="groovy" name="Copy of Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("rtrnodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("AccountID",null);
tC.setPropertyValue("DeviceID",null);
tC.setPropertyValue("RandomNumberGenerated",null);

tC.setPropertyValue("ExpectedReturnCodeCreate",null);
tC.setPropertyValue("ExpectedReturnCodeUpdate",null);
tC.setPropertyValue("ExpectedReturnCodeGet",null);
tC.setPropertyValue("ExpectedReturnCodeDelete",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("rtrnodeid",callTC.getPropertyValue("rtrnodeid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("AccountID",callTC.getPropertyValue("AccountID"));
tC.setPropertyValue("DeviceID",callTC.getPropertyValue("DeviceID"));
tC.setPropertyValue("RandomNumberGenerated",callTC.getPropertyValue("RandomNumberGenerated"));
tC.setPropertyValue("encodedparam",callTC.getPropertyValue("encodedparam"));
tC.setPropertyValue("ExpectedReturnCodeCreate",callTC.getPropertyValue("expectedreturncodeCREATE"));
tC.setPropertyValue("ExpectedReturnCodeUpdate",callTC.getPropertyValue("expectedreturncodeUPDATE"));
tC.setPropertyValue("ExpectedReturnCodeGet",callTC.getPropertyValue("expectedreturncodeGET"));
tC.setPropertyValue("ExpectedReturnCodeDelete",callTC.getPropertyValue("expectedreturncodeDELETE"));

tC.setPropertyValue("encodedValueOfSpecialSymbols",callTC.getPropertyValue("encodedValueOfSpecialSymbols"));
def deviceID = context.expand( '${#TestCase#DeviceID}' )
def rEST_API_Version = context.expand( '${#Project#versionMajor}/${#Project#versionMinor}' )

if(rEST_API_Version == "1/06")
{
	// tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
 tC.setPropertyValue("DeviceID", URLEncoder.encode(deviceID, "UTF-8"));
}

log.info deviceID
def deviceid_xml=URLDecoder.decode(deviceID,"UTF-8")
tC.setPropertyValue("deviceid_xml",deviceid_xml);

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("node_oid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DELETE - LegacyDeviceDELETE");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - LegacyDeviceDELETE"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="DELETE LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - LegacyDeviceDELETE" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy versionMinor008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Brand Language="en-US">String</dece:Brand>
	<dece:Manufacturer Language="en-US">String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2009-12-17T09:30:47.0Z"  
			DeletionDate="2020-12-17T09:30:47.0Z">
			<dece:DisplayName>String</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - LegacyDeviceDELETE');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeDelete");
def httpStatus 			= tC.getPropertyValue("httpStatus");


log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
 
switch (ExpectedReturnCode) {
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_LegacyDeviceAdd_UTF-8 _CharacterCheck_Create_Update_Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>LegacyDeviceAdd_Retailer</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>4555838</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value>Legacy Device record deleted successfully</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>text/plain;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>41</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedparam</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">¾</con:value></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">%C2%BE</con:value></con:property><con:property><con:name>deviceid_xml</con:name><con:value>urn:dece:deviceid:org:dece:4555838</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>AccountID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>0B8034C9B1F90E01E05307991F0AAE38</con:value></con:property><con:property><con:name>ADULT_DOB</con:name><con:value>29-Jul-94</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>ADULT_MIN_AGE</con:name><con:value>18</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUID</con:name><con:value>E19E3D2D6A904D06E0401F0A05994A7A</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:CON;urn:dece:org:org:dece:CON_CS_1;urn:dece:org:org:dece:COO;urn:dece:org:org:dece:coord:cs;urn:dece:org:org:dece:DECE;urn:dece:org:org:dece:dece:cs;urn:dece:org:org:dece:DEV;urn:dece:org:org:dece:DEV_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:iscportal1;urn:dece:org:org:dece:iscportalcs1;urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa.b.uvvu.com:7001</con:value></con:property><con:property><con:name>BHOST</con:name><con:value>qa.b.uvvu.com</con:value></con:property><con:property><con:name>certspath</con:name><con:value>C:/certs</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>/opt/dece/certs</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>C:/certs</con:value></con:property><con:property><con:name>CHILD_DOB</con:name><con:value>27-Jul-02</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-08-15</con:value></con:property><con:property><con:name>CHILD_MAX_AGE</con:name><con:value>12</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>Coordinator_Schema</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>DateOfBirthXML</con:name><con:value>1999-07-19</con:value></con:property><con:property><con:name>DBHost</con:name><con:value>LP1</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp1db_23</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA1_APP</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com:7001</con:value></con:property><con:property><con:name>DHOST</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>DomainID</con:name><con:value>urn:dece:domainid:dece:1234</con:value></con:property><con:property><con:name>encodedUserID</con:name><con:value/></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>ETag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value/></con:property><con:property><con:name>GeoProfile</con:name><con:value>US</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>HOST</con:name><con:value>qa.p.uvvu.com</con:value></con:property><con:property><con:name>ISCNode</con:name><con:value>yes</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:DEQA1_APP/lp1db_23@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Language2</con:name><con:value>de</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>/opt/dece/certs</con:value></con:property><con:property><con:name>linux_JDBCConnStr</con:name><con:value>jdbc:oracle:thin:DEQA1_APP/lp1db_23@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>Linux_JDBCDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>maxUserName</con:name><con:value>64</con:value></con:property><con:property><con:name>md_schema</con:name><con:value>http://www.movielabs.com/schema/md/versionMinor.1/md</con:value></con:property><con:property><con:name>md_schema_07</con:name><con:value>http://www.movielabs.com/schema/md/v1.2/md</con:value></con:property><con:property><con:name>md_schema_11</con:name><con:value>http://www.movielabs.com/schema/md/v2.1/md</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>minUserName</con:name><con:value>6</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>neustarVM</con:name><con:value>OFF</con:value></con:property><con:property><con:name>NODEACCID</con:name><con:value>E1AF78725D9E6410E0401F0A07997B12</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value/></con:property><con:property><con:name>NodeAccountOid</con:name><con:value>4400005</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDECECS1</con:name><con:value>truststore-dece-cs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRetailerforDeviceAuthToken</con:name><con:value/></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL1</con:name><con:value>sriniretailer</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS1</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdSPCLCS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NodeUserOid</con:name><con:value>101517</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E528648B66BDACF7E0401F0A05994DAF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:0B8034C9B1F80E01E05307991F0AAE38</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E151F333D66812AFE0401F0A07996C63</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E528808A600535F3E0401F0A07996230</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>Policy_TOU</con:name><con:value>https://qa.c.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>PORT</con:name><con:value>7001</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>projectPath</con:name><con:value>C:\Users\rshrivastava\Desktop</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>QC_AutoMapping</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_BulkUpdate</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>&lt;Domain></con:value></con:property><con:property><con:name>QC_password</con:name><con:value>******</con:value></con:property><con:property><con:name>QC_Project</con:name><con:value>&lt;Project></con:value></con:property><con:property><con:name>QC_ProjectPath</con:name><con:value/></con:property><con:property><con:name>QC_ReExport</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_ResultExportLevel</con:name><con:value>off</con:value></con:property><con:property><con:name>QC_ResultExportLevel_Option is off or high</con:name><con:value/></con:property><con:property><con:name>QC_RunName</con:name><con:value/></con:property><con:property><con:name>QC_soapUI_ARGS</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value>Root\folderA</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value>Subject\folder1</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>sample_testset</con:value></con:property><con:property><con:name>QC_TestType</con:name><con:value>MANUAL</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>http://&lt;servername>:8080/qcbin</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>&lt;user name></con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa.q.uvvu.com:7001</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>RandomPwdFlag</con:name><con:value/></con:property><con:property><con:name>Request_XML</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#Project#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"><Name><GivenName>${#Project#UserName}</GivenName><SurName>${#Project#UserName}</SurName></Name><ContactInfo><PrimaryEmail><Value>${#Project#PrimaryEmail}</Value></PrimaryEmail><AlternateEmail><Value>${#Project#AlternateEmail}</Value></AlternateEmail><Address><PostalAddress>${#Project#PostalAddress}</PostalAddress><PostalCode>${#Project#PostalCode}</PostalCode><Locality>${#Project#Locality}</Locality><StateOrProvince>${#Project#StateOrProvince}</StateOrProvince><Country>${#Project#Country}</Country></Address><TelephoneNumber><Value>${#Project#TelephoneNumber}</Value></TelephoneNumber><MobileTelephoneNumber><Value>${#Project#MobileTelephoneNumber}</Value></MobileTelephoneNumber></ContactInfo><Languages><Language>${#Project#Language1}</Language></Languages><DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>${#TestCase#LegalGuardian}<Credentials><Username>${#TestCase#UserName}</Username><Password>${#Project#password}</Password></Credentials><UserRecoveryTokens><RecoveryItem><QuestionID>${#Project#QuestionID1}</QuestionID><QuestionResponse>${#Project#QuestionResponse1}</QuestionResponse></RecoveryItem><RecoveryItem><QuestionID>${#Project#QuestionID2}</QuestionID><QuestionResponse>${#Project#QuestionResponse2}</QuestionResponse></RecoveryItem></UserRecoveryTokens></User>]]></con:value></con:property><con:property><con:name>Request_XML_Buffer</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#Project#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"><Name><GivenName>${#Project#UserName}</GivenName><SurName>${#Project#UserName}</SurName></Name><ContactInfo><PrimaryEmail><Value>${#Project#PrimaryEmail}</Value></PrimaryEmail><AlternateEmail><Value>${#Project#AlternateEmail}</Value></AlternateEmail><Address><PostalAddress>${#Project#PostalAddress}</PostalAddress><PostalCode>${#Project#PostalCode}</PostalCode><Locality>${#Project#Locality}</Locality><StateOrProvince>${#Project#StateOrProvince}</StateOrProvince><Country>${#Project#Country}</Country></Address><TelephoneNumber><Value>${#Project#TelephoneNumber}</Value></TelephoneNumber><MobileTelephoneNumber><Value>${#Project#MobileTelephoneNumber}</Value></MobileTelephoneNumber></ContactInfo><Languages><Language>${#Project#Language1}</Language></Languages><DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>${#TestCase#LegalGuardian}<Credentials><Username>${#TestCase#UserName}</Username><Password>${#Project#password}</Password></Credentials><UserRecoveryTokens><RecoveryItem><QuestionID>${#Project#QuestionID1}</QuestionID><QuestionResponse>${#Project#QuestionResponse1}</QuestionResponse></RecoveryItem><RecoveryItem><QuestionID>${#Project#QuestionID2}</QuestionID><QuestionResponse>${#Project#QuestionResponse2}</QuestionResponse></RecoveryItem></UserRecoveryTokens></User>]]></con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>REST_API_Version</con:name><con:value>1/21</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=pVddc6I8FP4rDr3cQYIfVZjqDCJu3Vpti+22vdmJIWpaSJQEpf31b4LKqq19XXsDk8P5eM7JycnDBYdRWLIdznEsCKOFNAoptzNpQ0tiajPICbcpjDC3BbJ957pnl4rAhhsTrdBtN7Q/4wDWYWCN9AoIavKBAt2CQaCXQMkajWr1SrUSSFXOE9ylXEAqGloJmBXdLOllcwjqdtW0gVWsmPVnrfCAYy59S5Ui0NagUt7QpkLMbMNYLpfFZbnI4olRAsA0Hq97PpriCGrNi1VGWaC4udZHxQAjHIaoiFhkXBg7OhcBt30yoVAkMV7HCg7FAgawDKkTcDI503JbHHTpmGVLF1JGCYIheYeqPtdYTFlQcMIJi4mYRgeTMIFyrOMU6cis0DPN2IV2pKMdhDGHOp9Cc+3rDo9xjCnChfu7bkM7O27XMtNhDCkfszjiu8t/w4PpAodshgOdb9JaQzve4SeVal5gZHcpChNOFrivmnUGEebr3cToeFeFmxiPSdojXDZoyhU6Yxve3nJVjTaZYC5O2aCtzVk5eYBhgpvsp7cQYhlNHx/Pk0sH+CHCKedPlb7TyABsK2eCfGtXy72mzJtoZdH7XR++hrR/a5XpvPN0P0nS8DqcW633di/ujKyfxvymm1zGE2Ca4RXo+0sWBejBMLqwdItby6uX3z8S0vr1lILn1LlaWPfo3GtjP/YBfU9B1B/Mzeeg3HusIteczS7LP2tP40dnOXyYzmtvTmeUiof5gl4lPwaskor759tfRv/5ZVR+Tul978eidn316p+7jlfxGnk6W/h3ZZsz7yejF4zEZqnaoNsudOQuQfH1MFMSEujjTNWeqeHDBaZCayorNTvsRI47EthyD1dr0KqDcsWrtmrlUrXjdTxQLYOqZZkd4NRc19wMmRWKPYguo2OiYqmRu2qbrwGiyOaYBjjWFyyRk45rX3hsQwELXXonDwGjHA+ZHM+EsdfyS0zPg7lpjqpkPOLiPapZllboMzGgg9gZCxzvzGTT3JnJdxiRGcFqcKu+5rKxuZC1mMNFIkKzuIBFihM52mM1Ze1SpV41OIlmIVZIjYgFSYiLs+ksq4zBV++SDhHPpHfeMDttB/Pa/7YpgdQJiFLgKpcWltuIP1wuwK5uEjmccGU74Y17JwmIOliyniImaIVk99PfNlH9kfeI47qe7/ob2Ln2P1ifauwOBidatj3XO9n04XTLP67/xzzVvOf4N9+x/Vbw00N/L3DvG1n3vpu1PK2nWx4IbHxx4Iz9s55HCxZkK/aGlkqCI6/E5mZSzYrzYrJYJNloqqmbP5beDUkATMPHKJEX9tuQvWJq5B6Mo9hRDnovcC7fhZeIKfUFFDiSg7SQLY+gwz7mig535Q2QHsu1d0LKsgmcis9kbiipvEL8JdtHNlJ6UnwjX0sW/038M19bcWSekg0LQidqpZjR24HGQEy6JfJOZ/G2888cfBZ8V5gXOcciZDONEoEPfymoy7qhQYRYQkW3rWWCbQKR4RRvM2z/VfrgJuMo+U8L+f+/Fp1kLYCw/NXhJPOvuKet2p9OtkjIOuhHHuJaLbNTBx4wMx5SW/EQxyvX86LsoGt+EH+UbNVpv8eb/wE=</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=nVdZc6pME773versionMajorieS8uwqCBWkqphUVFxw5Wbt3AYEGWTAUF//Tto9CQ5yfnyflc6PT3dTy/0PPOMTd9j2wBjFCduGJRV+aXyD2c3OaZlbWst2GjUGk3bqgl1vlFrMS1oNhFqtLhtpaxinCI1wIkZJC8VlmbqNZqvsdycoduM0G7Wn7hmw6iUlyjGxDRReaIr5dz3Aty+un2ppHHQDk3s4nZg+gi3E9jWgTZsE822ecdUeX2+obw6jF93SRK1KQo+WQgiz4NPMPSpZ+qDzrOF27rrBGaSxujNp4VfKm9nsyx7yupPYexQLE3TFC1QRMfCrvOr8lq6H0aWGtjhbS2ZQRi40PTci1mA0lCyC60y8JwwdpOd/41phmLownQN5bAGmUbwq0L9dnBF90NLH0DG2Kzhncncjc2QjWIUQFRezNSXyq+fVfB2dh6bAbbD2Mef1v8NEgpOyAsjZNXwPbI7up9b/CJdr88IttUAeil2T2hUtElkQoTLkxjZbj50MWk+C5ev5S/n+N5hCP6XkjxT73ES2NQXmZFdB+Hk/6nX+1rdrCxNL0Wv8yrPxynfyS7VzoHVu8dcy6U5xeMReLlCeK98A/Uo9dv6c6M++urtkBnTs1BtZkYQ7OvKLGUWikdNxsal1Tx05LS5x+N063p1fEw5WuOwhpWR0jzWca8pBUzmHB2QpvvBuTuaqqWhLrsHLhlBdwH2MBpI7Bo3uvGazT18OOFgXN1EzfRCdRlrPRYPF2AgaiK7k56uVgOOderversionMajoruXgIdh0ZFzqTlLeUcYabycGYIXcndIvversionMinorN6H0MR1wCdr0EW/9dNWpDNxHwspGJS2OTzTNCrpqpSVZYkgCQHZKoIHFUcXsBIdA7H3cHtChktgumiA2Rw1mYgk52NvJxOB0pmLZeesVQ7HVGbNbIe2MglsiEr+VI21n3aXBnRhu3Qhi6K1noWbuv9yOodst4OjrS5lo3m6lnbK/lortCrq8zJyfqi7TVmPF/US6u9KGgzJZOzq0dZyXYjYzWLNgshgxdlqoFGF5D6SDutN/eXDKzPdnCvDDVwuMrFnSYtl1quzMGkJDqjJYltLnWMCPpWtPW93TvjPWJ8bnWX523XS42LstckpSvpx66ubuvyVOmD2WaxXS0P5qpzKsHeCGzvHt2ma67DzDFamTzd9Aehoe5OcASmiihOAUkXDTS12wdhVwRaA7j5RdqLXChZnYzqs7hUFbwutz67xzU2u7RnMq0WsxmuuMmRk5WgagzS7X6n7dadcXWgW6eFkAiXDT5VT5zpMjCP7Ola6SWD3O5N9dJ2Iudr2KtaTp/yLkIn1vg+iC/nnac5s2TFjfF569r2SlyPGx5ve1p9FtmeHZ1xdR5ODzHNiajOUpvzaZCUgKOJAHT3i7041cRWkVRLzaYbTTRBR0lScNmzyYBdHvu9kwc3dRDmg9V4f3grjCVnikhlU4W0lVJqycAqitDTF0pnDxai48Sio3TEKZTBdKMOsg3J16JHlD/nsXPNo6OIQKkbgBN6pfqCFpJxojca4ByIi6Aj7LRjvrI4n+aPSBnqo6iRaXhkB8YqPGi+Gy/iVF8MBqNhvp2n3cOezCqb1genulFSTocIuKPBfHeQQ9mcRJtNElUDGMNEjXxNzS9jA+9b7tan+9UmI05oGfLswt9mi66pGIPY0ZlBbxZM6rxQwql97vnVfStbVec6F/GWFNjy+UwZ8ZIOQdgRZs2jlbPsYbfIhlxm98Fha7Kj3BPEs6AMjDnMZtPBSverzVLzNBz69GVONUbRONO7WUOZTqt1S5z35jiK3U3acvJ4HFjsxky4k0EvOTfyDgKbHuaNqL50fFKsycmKeG1SmjbW0PAdPoJ9akadgMLbQ7V73l7MS+SP4W2Afp4OD+FtflDvJ8uH0XMnHTrpVgST+7K4gFS53CG3gpn8ncAUEteq2VfVdlSwIJygIKm8FqcK8tJOCcVxrTa5Mm5rheVafFPmBZkW6hJHK3SDZjo0oJuCwLF8/c5ybig+QZTCwHYLXwWPu91SfwcI/TZGgYXi2ilM4Q7hyl8sFvkqq8GMXL9hgNE8LHgiLck8kDkZEG4h0S1eYhhREQAjdGSpITOV8ihMxsE4BnaC4o8csf6BI84QdCMXFUSyuE0xuU5xQlJyNE9p4jFPJ/MpQCmhmnHB9tpso9WksOtHHioAU35opR56inbRNUEUvversionMinoryNRPiq3SmzP9Rdel6038b4ue9ezaIjuUWCriIR0SkougLwtu4B/N90Nz7oO/mQWq5xYVOUpvELrwh+bj1u2OKVnm0C4nqDvmh+VnwwSr1OaCHI+vkwkfPP54DhE0SvvF6L8nRfDo+padTei0CX3CpmJinGIrmKR3BlBCi8zw8oIB6mKB+xEUfqD95fsg/4kuTXaAn5HversionMinorScuUr8sfPER0hIuHiEpaPv/pK+eDS5K3BOXJVzLJI++VAvFfnzSwDQs9Ip6QnyyMrd/l+sLWOz8kzmKAuYFTrArmef6mKWBIzLpkiIXxe+NfGfjK+UfhI8kPLAnppm2aoO93ysV0eqmYEIZpkKhy5Sp4PzGvOJNzhNq/lf4wc+V+b2Q+x9+S+bU21Mns8s3KQ9f938o199ouEJFT2L1ieank5F1KnAfOuwn9BvDLIS116L8N6Y+RvP4h/lPyLqefv4fXfwE=</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=nVdZc6pME773versionMajorieS8uwKYqVpGoQUFTcwI2bt3AYFmWTRdBf/w4aPUlOcr6835VOT0/30ws9zzwnhu/RXZAkKE7dMKjKwkvtH8SSu86ubTa4DkSNZqvTanA7kmswLdTptFm2BRFXq8pJkiE5SFIjSF9qNEkxDbLdoFmN5LotskuRTxTd0WvVFYoTbBqrPJG1auF7QdK9un2pZXHQDY3ETbqB4aOkm8KuCpRxF2t2jTum2uvzDeXVYfzqpGnUJQj4ZCKIPA8+wdAnnokPOs9m0lVdOzDSLEZvPs3kpfZ2Ns/zp5x5CmOboEmSJEiOwDpm4tq/aq+V+2FkyoEV3tY9IwgDFxqeezFKUApKndCsAs8OYzd1/G9MUwRFlqYbqIANSDWDXzXit4Mruh9a+gAyToxG4hjU3dgCWShGAUTV5UJ+qf36WQVvZ7XYCBIrjP3k0/q/QULBCXlhhMxGco/sju7nFr9I1+szgl05gF6WuCc0KdskMiBKqrMYWW4xdhPcfGZSvZa/WiT3DkPwv5TkmXiPE8MmvsiM4NooSf+fer2versionMajorc3KyvAy9MoZ7PBiMoRYP5BC33Y7JhGKkj4dLZSXK4T3yjdQj1K/rT836qOv3g4Jq9O6ZRuIopoxtJBKLHb5hLN344MwAgKkDlMjGJvOQmR2RV9vtk6AXuWuUW9FM5bRjxqfGrO1bHBCKsUVx9+01MEyXBfMead47daU5yext6D2LrM6G6Z3aW74DWXZXphLI3CuA53pxQeHXu/HZ28+pRxvns+WoXJ2PYxMG0vrjZtlWYR0werozZffMb2PoYxrhM7XIMv/mxbJCUZqPBa9clJY+PNM0asiy7260OsB1LNBLvPAlvnxBUx4+3B0Dm6fy0kezJcSEMBZWYBcsLfCaj4fibm5Wnn6SpYkXlk08wHYChW8IYjFStA3Q9JY69GWlkhd5Xlzswh3zDAyB4d84MCJoin5RJPPyl4sJppIrq8yu8Dri7JXqKm2ZCrrPc8pCzEX8qtHQcydib5eRNsll8OLOFdAsw+opdhzlIHmryjILBy4F8cKOFzlvKP0ViulEDUwq/D2ZIVj03qSHkHfjHa+57wzPsDGNbO/Ou/6XqZfxL3SE/s99dhX5R0jzMUhWGyXu/XqYKylUwUOJmB39+i2XGMT5rbeyYX5djgKddk5wQmYizw/BzhdJFDk/hCEfR4oTeAWl96eZ8OeKeXEkE4qdc7rs5uze9wkRp/0DKrTobbjNTs7soIY1PVRtts7irORpvWRap6WXMpdtsmpfmINl4JFZM034iAdFdZgrlZ2M6HYwEHdtIeEd+GkWGkPQXw5O55iL9I1O03OO9ey1vxm2vTalqcwi8jyrOic1LVwfohJlkcMTWzPp1FaAbbCA9DfL/f8XOE7ZVJNOZ9vFd4Akphm4LKn0xG9Og4HJw9uGRAWo/V0f3grjCnkIk/kcxG3lVjpCMAsizBQl6K0B0vetmPeFiV+DgUw38qjfIvztRxg5c95lK55tEUeiIwOWG5QYZYkl05TtdkE54BfBhLnKMdibbI+2T4icaxOomauJBMr0NfhQfHdeBln6nI0moyLnZb1D3s8qyxSHZ0YvSKeDhFwJyPNOQihYMyi7TaN6gGMYSpHviIXl6me7DvuzieH9RbFz0gBtumlv8uXfUPUR7GtUqPBIpgxba6SZNZ54Nf3nXxd11Q2apu9wBLOZ0KPversionMinorQIQolbtI5mQdMHZ5mP2dwagsPOoCeFx/FnThzpGswX89Fa9eutSus0HvvkRSOak2iaq/28Kc7ndcbktYGWRLG7zTp2EU8Dk94aKXvSyRXrRt6Bo7OD1oyYle3jYs1OZtRWZpV5cwN1325HcEgsiBMQ29ZY7p93F+MS+VN4G6Cfp8NDeJsfxPvJ8mH03EmHirsVwfS+LC8gWahK+FYw0r8TmFLimg3rqtqNShaUpChIa6/lqZK8dDNMcVyzi6+M21qk2Q4pMjTHdnotlmRFsklSEgnINseRNN27s5wbik8Qe2FguaWvksfdbqm/A4R+N0GBieLGKcygg5LaXyyW+arKwQJfversionMinorGQIC3EPLHTFHoUaDabUpsDFAO4liS12HYbgCbLCz2mVp2E6TSYxsBKUfyBI1L0B464QNCNXFQSyfI2TfB1mqQ4JUfjlKUe9XQyngKUYaoZl2yvSzc7LSJx/chDJWDCD83MQ0+RE10TRCS3X7phwOQqXYjaP7Lau97034b4ee+eDaxjuqVCUsbDI1xR9AXhJe/BfB90633Qd/MgM93yQsepTWMX3pB83PrdMWWrPNoFR3WH/ND8LPhglfgc0MOReXLho+cfzwHMJjHfeL2X5Gg8HZ+y0ym7FqFdcqkYmycogmwTKoIZJkRnLTyggHiYIH7ERR+oP3l+yD/iy1InUFP8Pfu4ZarX5Q8eIipKyoeIjFu++Okr54NLnLcUFelXsp6H3ysl4r8+aWAXlnpYPMM/eRibv8versionMajorha13fnCc5QBzA7tclczz/E1TwBCbdfEQC+P3xr8y8JXzj8JHkh9YUtxNuyxF3+9Uy+n0UjMgDLMglYXaVfB+Yl5xpucIdX8r/WHmyv3eyHyRfEvmN8pYxbPLN2oPXfd/Kzfca7tAhE8l7hXLS63A71LsPLDfTeg3gF8O6ZbE/m1If4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>SAML_For_LP3</con:name><con:value>SAML2 assertion=nVdbc6JME773versionMajorjuZSphAIlibVI1HESMqBw83nyFMAKKoAwI+uvfAVdjssm++34XKTNNH57ufmh6fmJ7FzIdiDFK0iCO6qr00mjRiGW4NfvIMwz92ASAfly1wOqRddt0m18jpwX4Rl3FOENqhFM7Sl8aDKCZR6IImhbd6rCgw7SfnunWslGfogQTz0TlCTTqxS6McKeK+tLIkqgT2zjAncjeIdxJnY4JtUGHaHbsK6TG688LyCpg8uqn6b5DUc6TixwUhs6TE++on9QHnZ8u7piBF9lplqBfMV380vhlm+f5U84+xYlHMQAACvAU0XFx4P1ovNauxshVo3V8OYt2FEeBY4fB2S5BaSj1Y7cOQy9OgtTffeOapmhQun5EhfPo0M3oR4N6D1Ch+0tPH0Am2H7Evk1fnRlojRIUOag+MdSXxo+/auDF1ErsCK/jZIc/nf8bIhQdURjvkfuIr4ldwf29xy+q9foTOR01csIMB0c0LFmytx2E6+MErYNiEGDCPRfXq+7XC3wlGHL+S0d+Uvc4CWzqi8pIgYdw+v+0675VFy9TO8zQa/vYZJyF38reAF4vTdeTNTN0Fr2Jpb5UEO6VL6Bunf51/szTG61+Gfk9yc/H1J6fT2f2IVwA/rQXgRkPVhJilQd/Oxf4cTviyNt7hn0qFNuz1GQtwXK7RjGyi3GrJ7W1iTVEh+eanpzYrUS38PQA2NEQbxJaY10xKuBR90atw/w4em5mcy+dPGs9zCtd+TmZtnJ/bA6mU4vh1L1ptDT1IBfGc82H53F3Ml4vm5mnS9P8uJdf3nO6z6HM6w2dqiTL/+cc4CU7tW8HsRwUa/J2puhVU1UpO4siPJkezFUBeuRvA4eCtz3420DhcyBAXe9CSRTCjTzQ4FaB9EQWfE2cTrVCJGUQvOGUGFo1GC4FzZBzKV9IU13vyblvucr0tFLCbHmWhxrElbHoa7IhTyXDkjUNxhdZoUkrpdhoppar+kKqEQeSXOzPrsKnSCkCh1E5zeSYhclly/mUyLunwW54XFlyqImaIpoHxVRXrKTLfWgsZg7TzYjtebDbx7XFRLgz6u/RBqJuDkhMeNasba5ZE2YoGXYlsz7KNFXpazrORb3KSqnJeX86Ob/XQhQ00d3JhWzB8aUWjiversionMinorh2A572N7xkWaAXPJq4zf5NwdXYFoOshr4qVWAzk3ZGMy7GqGmsuwkklyHuIVM/RXin90WL3oW3Bz3xhRl2fdiDyPjKNz4g41W+nC1W5KO6zhOwEX2PM495btXNIX/bd4qRI3Q6jLgqBDAgjAMjVSfwEOhCk32gc8E6DBuhvvkJ/UNDp+2x7PBWgH7MgbD2ectN62xkowZm3Xp9TQYTbsFqoqct9oX7ddY0EZUhScn0dvkzkKksU5HXI6/Ry0uZoxyyZzKQ5bbm++mLw9FAtHt0ZjczIbn4tieNi0z2HaGwm9xOxrkjcaIjTGzgMF7K5gtSVOXPQ2hE9rAyCuBj1NgFDZeJ4cEAILvc2FhD1Dkwl5oSbmijgTFRMqyoOsCpKur7s+PXaUaTahh5oquyEp02kxN8LaUhQk0ilgz5b7BdMFSwu6lTO9KXc9fcI99OdoqQ9Da5rCfD9dRzQNlL3eW2u552glA1w1NwXyFgm1TIUTe7Tvg+Jt+gzog+6GfZOHE7YwmW0x8r3laestt6Qpi7tXZ2HBcGrdcUwlFJvVdEs2NNi+vG+Fpk5YI3R2xX61cwrJIj2rjGNLkI2uDiaFJMG3iwxbkCnw4ixvNFGu7Guw0GxCi+Nq7uNFNAxGlpwR0mZ3dNmsGPCvHCspVvvIsYMIdfiZY/KFYzJcHx7UtkRj7lnc41nuCYp80FvTQZ/fA30+2NaEhy7lpUHYHEXt3Hp7mNGnvOVv9NmMVyVffIjWC59dpQKwz46O+tuWEhhbKXpuhidtoOncJKDCE9igQ44HtaFKRzKbnrsUn2QPwm4Z7M5ntslMdmMzO6oT+w3TJ391mPH5Ztx7pqhEOXHn1vKod+exs7h8Rz4PyZvwMkap+wH7YQJfVy8zW22Qk16P5XdYlepd8nG00z+vcaUkcB/XlWpnX+6COEVR2ngtrcoVrpORRS9wO+TLeTlDCADPy226yfKAgU0ZNAHdBRBwPM/RsH3d9S4oPkEU42gdlLHKZfbysf4zQGfXWSE7QUnjD57KOtXVyCDbRxxhZMUvjf/xvGOvEb+2Oce1eQQQz7RQq8W2mxzDM7y7brbbqzbD0ahRH8bpKBolcJ2i5G5X5j7vygZygn2AyoW6XCsw2StwSopysI9ZGrJPR/spQhlZuZNy6+0wzTZH4WC3D1EJndrFbhaip72/r0pE4csv82g7uJJyAHBtUG083+b6+dm1LETHDUoFXKYjINJS9MXeT19z+S1n9sv7wdU9zNygXGxIjdMkcC5IPj56p0zJlRtfLkldUd+UPws+OKY+53SL5R4D58b7272I7NVk9Xq9NuVgPx2esuMxq9rQAoClEuKeoinAUCZyMrIbnqx4iyLq5oL6m638BvpT4Jv8I7ws9SMzJa/0jnCmXh3//Ub2wZpUIEVF+pVMDMkdrAz+x2ua03FKPSIek588Ttz3wn/h6y4OgVyOoyDyylO5Tp++6bATE7cBGUlxcu/8KwdfBf8ovNXrhiUlvFhlKfr+Sb2cNS8N23HiLEpVqVEJ7udfhTM97VHnXek3N9VC++uGUnx3HaWpuTYwHR/t7MZNN/h35ceg6rxDxg3Rr7C8NApy1ybBI+9u3v4C+M3Ibf1p5H7M5PU38e+Su5p+pvbrPw==</con:value></con:property><con:property><con:name>SAML_NEG</con:name><con:value>SAML2 assertion=NEGATIVE++6Et7zKyjOkiIegDBUklvygDEgg40Zdx6EbfAAlo0Nv/7KEDgkJ2d67y3eIhXU7uHr7k9S6+WfPPDLRxRjLwpfK8wTXSmj0IpsL3ReKzO9versionMinortX/n krvWAj8NkuwBjFCdEsy8JrZWOats3SbM1qWEatgZqtmllnjVqLoduNdqUsY5wiOcSJESavFZZm6BrD1mhWZ9rdBt1l208N9nldKc9v0dkiOsET4u4l3mslj cNuZGAPd0MjQLibWN0pgKMu0ewaNzCVt3d4l4Ax9fZi4+7Uc0IjSWP07tDGrxU3SfZdisqy7CmrP0WxQ7E0TVN0hyI6NvacbxWS6rsxsuVwE13XvBFGoWcZ vnc2iogQJW5kl4HvRLGXuMFPXDMUQxeuayi3ahbTCL9VqO8BLuj+0NMHkDE2atg1mJszDW1QTJqGyjNNfq18+01frkZ6bIR4E8UB/rT+OywoPCI/2iO7hm8 p3WD9uccv6vT2gqyuHFp+ir0jUorm7w0L4fIkRhsvH3mYUMrG5Uvjyzm+8QZZf9OLF+oRJ4FNfVEZwXMQTv6TRj026eplbvgpeuNsa6QMnJ0/4ozjIlvkc8 HgzvTYdBqvFwiPyldQ9x6/rz8z9E6odyONmziHrTNVqqHrD9Ll0pFFptrq1KNeaxysnuuU3FCXulk/0oYn6JqqN5cQ6YONash0HI5Ou90Oma4c9OdOCWd7a zhiRF2xW+pwqyhQW5j8iG8Z7phvS6uqC8KjEGF1OhnP4O7E79edTlsUYcid9Mn0vOkEm4HfFmZ92Sp17MaomY3ZvJ2vpf7QyHbw9XtOjzkUeQ3R6ZJk8XvZ pDuCkRj3BV/s/w3Zlwl6g7IspGeeB6epAzKZAw752wKFc3YHd+dJnYzmgKr2gMBz/lYcQbCTADMTORfy8znM+TMYcI4yJ4Z6CfhrDmpiJmQrYa6qfTFzdVu an0zJT9dnUYEAX4x5F4qaOBc0XYQQRFdZDgVTyrdwCjNZXQkl4kAQ8/3ZljoJknLPYuUmnDbZ1bSZrpdzIu+dRoFyNHXRhzyU+OlBmspmXVDFAdBWC4vtpc T2PAr2UWk14x6MBnu0BaiX0SQmOEN9l0F9xiqCZlxk+kcZlKUBVHHGq5espJKYDeaz8/da8Bzk7UDMRR1MrrWwdL6n0OvlABuLZgg1kAnOxXgoZvb4BgSqd Fbir7UaiZkmajOlBzU5E8FFJoiZj01WcU3JPVp1NR/oYPvYGF4VF72QfA+1o3VqHkqG1ANmMGesuuZaXtMzllHmrNuZoK4Gw2gtEzcKUEWOUwEBRIMiNVJ/ Doy4eXO89zqsh0abXhQgNy5BJhrujuecbnversionMajorsTNRFk1hs2tNJG9SN2yXkn2L3dZ3QJaRPWRc1bC1FaUJoXd+Hg9nS+TFq3OiNFXm2Ws3S9oinS2FyG/Z/eV qNqzmK0vVx5PpbDE557ly2LbPftIfc/14OoCCM1YQmmCrStFGj9PbQpNf9beETxuNRs0ScCAHgLR1HNEjBOb62ysJ+xoUCXkB5DOJX/DSFEhSVZQ5QVU3PZ eZWNI8nTEKlEXbJ2U6rZaaX1rznEA6RRuL9X7F9ui1DuyLM7Uh9hx11qwOlmitKr4+T0C2n29ChqGlvdrfwMyxYMEAW86mHNlFXCmVwcwY7wd0Ppw/08xBt f3BtANm9XzK7vKx66xPO2e9I01ZPWydlQ78uf7AMZlQbFFSdVGDoH3dbzmUZ3XNt4J8bwZWLuikZxfjSOdErafSs1wQwPAqwzpgc7w6i1vIixf7EsihQWhx NJcuXoWKN9bFlJA2faDL1mTp33KsoFjpI8cOPFDBZ46JV46JYHOoym2Bwc1nfo8XmcNJ4kFtzUeDzp5Wl6NdiaversionMinorKCfx/MY4bGf6sLpgTlnL3aqLRUcWXL4 ablZu3Uw42jhbKhrsWpKn7YTwueGf4AiqzZlH+Sd6iw4ZHpUUmQnFenLuUZ04rXLB2gvO53qDnQWTaXqUZ8YQMyfXPCw62XbSf6aoWDo1z631Ue0tI2t1vU c+H5J34fUYpR4P2A8n8G2imqbmFlnJbVncw7JQ7pHL0Uh+Pp0xT8xF4tm1zUW1m4Z4jywCA9mVt8LMRhbqpmSA8+wuuTqva5ph6y/UY6hPOPgo3HiFw2IEv d7Iv54RraBrIiNGceUXnopilOVQIyNGFGKkR68VTE6ONPQOKcnBJRdvpaxEyTgcx2CToPgyzDJfD7MaSXPvoWLifRgQUG4Eex89WVFAGZYVpWGCyQ98mUF+ Cuzzt1sORMf2CgVcwOIQKTL6PGCz9W7jhukPsd/cg9T2ilGDFCSJPeuK5OOnt4fcitY9hZGNnuiigY0b6LvuZ8EHv9TnlO6h7KNn3Yl4f3nIAhmF3gDHC+L d78dvny3IUFyIC8SYQL7CRSl5lsRPpnem7u8I/A951RimZaMfPL/7uMs/YksTN5wmZIMFpO/ly/L3z54P1iT9BOXJVzLeJwCL4L98C1ldq9Aj4gn5l0Wx/b 3qX/j66uNH4T2fO6aENM1ME/TzL+Vi075W3gnu2ZWL4HZaPFDmsfyCyIsUuJrIQuUHp5dh8H26z/FPp/slHE0tFwVG5a7r/V655l36ZJENTvS7yWlP8Ofk+ UmCh87DUXXP6eG0qrfZep3+zvcPiN9+EP8o+S9qHN/eA39TZU3s/d9VGPQEjifHBrna6v+bUn7eu2//Ag==</con:value></con:property><con:property><con:name>setusernameto</con:name><con:value>account_firstuser_legacy20141231_1420015984014</con:value></con:property><con:property><con:name>Set_Coordinator_Schema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>Set_Coordinator_Schema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>Set_Coordinator_Schema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetDB</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com:7001</con:value></con:property><con:property><con:name>targethost</con:name><con:value>qa.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostb</con:name><con:value>qa.b.uvvu.com:7001</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa.q.uvvu.com</con:value></con:property><con:property><con:name>targetjdbc</con:name><con:value>jdbc:oracle:thin:deadm/dec2010@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>targetport</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa.s.uvvu.com:7001</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa.c.uvvu.com:7001</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urntokenType_deviceauthtoken</con:name><con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value></con:property><con:property><con:name>urntokenType_saml</con:name><con:value>urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>user20130726_035217</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>0B8034E5B7335FEFE05305991F0A7CC1</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>1</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>11</con:value></con:property><con:property><con:name>versionURLEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>C:/certs</con:value></con:property><con:property><con:name>windows_JDBCConnStr</con:name><con:value>jdbc:oracle:thin:DEQA1_APP/lp1db_23@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>windows_JDBCDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>YOUTH_DOB</con:name><con:value>28-Jul-99</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>yyyy-MM-dd</con:value></con:property><con:property><con:name>YOUTH_MIN_AGE</con:name><con:value>13</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>md_schema_21</con:name><con:value>http://www.movielabs.com/schema/md/v2.1/md</con:value></con:property><con:property><con:name>md_schema_06</con:name><con:value>http://www.movielabs.com/schema/md/v1.2/md</con:value></con:property><con:property><con:name>nodeIdNotProvisioned</con:name><con:value>notprovisioned</con:value></con:property><con:property><con:name>nodeDeviceDefault</con:name><con:value>0200</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_GB</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_CA</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_IE</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_AU</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_NZ</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_AT</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_DE</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_CH</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_FR</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_BE</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_NL</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_LU</con:name><con:value>20140811</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts/</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>E:/DECEAPI/GlobalScripts/GlobalScripts</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:INTERACTIVE_MetadataDigitalCreate.txt:39983831</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>7001</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>true</con:value></con:property><con:property><con:name>disablePriority</con:name><con:value>P3,CHILD</con:value></con:property><con:property><con:name>coords</con:name><con:value>COORD-627,COORD-1000,UV-135,UV-340</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa.s.uvvu.com:7001</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa.c.uvvu.com:7001</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property></con:properties><con:afterLoadScript>def rest_api_version=project.getPropertyValue("versionMinor");
if(rest_api_version=="06")
{
	project.setPropertyValue("Coordinator_Schema","http://www.decellc.org/schema/2012/12/coordinator");
	project.setPropertyValue("versionMinor","06");
	project.setPropertyValue("DomainID","urn%3Adece%3Adomainid%3Adece%3A1234");

}
else if(rest_api_version=="07")
{
	project.setPropertyValue("Coordinator_Schema","http://www.decellc.org/schema/2013/06/coordinator");
	project.setPropertyValue("versionMinor","07");
	project.setPropertyValue("DomainID","urn:dece:domainid:dece:1234");
}
else if(rest_api_version=="11")
{
	project.setPropertyValue("Coordinator_Schema","http://www.decellc.org/schema/2013/10/coordinator");
	project.setPropertyValue("versionMinor","11");
	project.setPropertyValue("DomainID","urn:dece:domainid:dece:1234");
}
else if(rest_api_version=="21")
{
	project.setPropertyValue("Coordinator_Schema","http://www.decellc.org/schema/2013/10/coordinator");
	project.setPropertyValue("versionMinor","21");
	project.setPropertyValue("DomainID","urn:dece:domainid:dece:1234");
}</con:afterLoadScript><con:encryptedContent xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>