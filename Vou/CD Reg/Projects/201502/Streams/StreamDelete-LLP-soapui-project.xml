<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="StreamDeleteLLP" resourceRoot="" soapui-version="4.6.1" abortOnError="false" runType="SEQUENTIAL" defaultScriptLanguage="Groovy" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="ProjectSettings@shadowPassword"/><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Documents and Settings\ashwin.tikle\Desktop\stream delete report"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="StreamDelete" type="rest" id="d0dc6dd8-3b6c-4b5d-b768-e8653693802b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="StreamDelete" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="8b04cf9f-86b0-4183-aac9-cd63cd3e9531"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:resource name="StreamRenew" path="/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/Renew" id="5f2c7ddd-caca-4f38-8115-316c160931bb"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:value>${#TestCase#streamhandleFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="9f1eb47b-60c7-4f5e-a12b-276d17adb841"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="4953727c-3961-48dd-924c-df55e5693176"><con:settings/><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="DELETE" method="DELETE" id="aee4aa68-9413-4924-aa43-89aec875f8c2"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>404 403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="StreamDelete" mediaType="application/xml" id="9ae7ba23-6205-4a63-b2ea-46175479bf02"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="RightsTokenCreate" path="/rest/{MAJOR}/{MINOR}/Account/${#TestCase#assertionAccountIdFULL}/RightsToken" id="514d1cb2-dad5-4cf1-8864-ecc034bc360d"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="f13de381-e55b-46ba-8920-8e526aa9c7a4"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="RightsTokenCreate" mediaType="application/xml" postQueryString="false" id="6b2d08ef-0b4c-4497-aa3e-24c69f763450"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#rtrassert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:RightsTokenData xmlns:dece="http://www.decellc.org/schema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema dece.xsd ">
  <dece:ALID>${#Project#alid}</dece:ALID>
  <dece:CID>${#Project#cid}</dece:CID>
  <dece:SoldAs>
    <dece:DisplayName Language="en">Avatar</dece:DisplayName>
    <dece:CID>${#Project#cid}</dece:CID>
  </dece:SoldAs>
  <dece:RightsProfiles>
    <dece:PurchaseProfile Profile="urn:dece:type:mediaprofile:highdefinition">
      <dece:BurnsLeft>0</dece:BurnsLeft>
      <dece:CanDownload>true</dece:CanDownload>
      <dece:CanStream>true</dece:CanStream>
    </dece:PurchaseProfile>
  <!--  <dece:RentalProfile>
      <dece:AbsoluteExpiration>2001-12-31T12:00:00</dece:AbsoluteExpiration> 
      <dece:DownloadToPlayMax>PT1004199059S</dece:DownloadToPlayMax>
      <dece:PlayDurationMax>PT130S</dece:PlayDurationMax>
    </dece:RentalProfile> -->     
  </dece:RightsProfiles>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/aaaa</dece:Location>
    <dece:Preference>2</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/bbbb</dece:Location>
    <dece:Preference>3</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:FulfillmentWebLoc xsi:type="dece:ResourceLocation-type">
    <dece:Location>https://dl.bestbuy.com/p/cccc</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:FulfillmentWebLoc>
  <dece:FulfillmentManifestLoc xsi:type="dece:ResourceLocation-type">
    <dece:Location>https://dl.bestbuy.com/p/dddddd</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:FulfillmentManifestLoc>
  <dece:PurchaseInfo>
    <dece:RetailerID>urn:dece:org:org:dece:${#Project#rtrorgid}</dece:RetailerID>
    <dece:RetailerTransaction>99-${=(int)(Math.random()*100000)}-${=(int)(Math.random()*100000)}</dece:RetailerTransaction>
    <dece:PurchaseAccount>urn:dece:accountid:org:dece:${#Project#rtrnodeaccountid}</dece:PurchaseAccount>
    <dece:PurchaseUser>urn:dece:userid:org:dece:${#Project#rtrnodeuserid}</dece:PurchaseUser>
    <dece:PurchaseTime>2010-11-29T08:44:01Z</dece:PurchaseTime>
  </dece:PurchaseInfo>
  <dece:TokenInfo CreatedBy="urn:dece:userid:org:dece:${#Project#rtrnodeuserid}" CreatedDateTime="2001-12-31T12:00:00" LastModifiedBy="urn:dece:userid:org:dece:${#Project#nodertruserid}"   LastModifiedDateTime="2001-12-31T12:00:00">
    <dece:TransactionInfo CreatedBy="urn:dece:userid:org:dece:${#Project#rtrnodeuserid}" CreatedDateTime="2001-12-31T12:00:00" LastModifiedBy="urn:dece:userid:org:dece:${#Project#nodertruserid}" LastModifiedDateTime="2001-12-31T12:00:00">dece:TransactionInfo</dece:TransactionInfo>
  </dece:TokenInfo>
  <dece:ViewControl>
    <dece:AllowedUser></dece:AllowedUser>
  </dece:ViewControl>
</dece:RightsTokenData>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamCreate" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" id="ea0fcc64-ddbd-40c7-9953-9a20ced3980c"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="88b0cbd7-009c-4512-ac0d-a03509ae0319"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 401 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="StreamCreate" mediaType="application/xml" postQueryString="false" id="3b90795f-6811-4795-8c10-f806d3b8c07f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="http://www.decellc.org/schema" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
 <StreamClientNickname>${#TestCase#nickname}</StreamClientNickname>
 <TransactionID>${#TestCase#transactionid}</TransactionID>
 <RequestingUserID>urn:dece:userid:org:dece:${#TestCase#streamcreaterequestuser}</RequestingUserID>
 <RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#rightstokenid}</RightsTokenID>
</Stream>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamView" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" id="e02eb532-8cf3-4e37-9620-88db7def7a6b"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>SH</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="58a32355-a6cd-4bd3-86b8-e89c82068ce6"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="StreamView" mediaType="application/xml" id="ad98ae76-509b-4eb3-88f7-6c08eb497da1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS" path="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" id="ba2703ce-380a-404c-b6a7-94f9aa730c91"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="30c295f5-6ac1-45d6-b074-c43cf08b76d5"><con:settings/><con:parameters><con:parameter><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#tokentype}</con:default></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="STS" mediaType="application/xml" postQueryString="false" id="1f2de162-4274-4efc-8326-e94d153e4261"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="http://www.decellc.org/schema">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
</Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS GET" path="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" id="2e9f4e8d-5078-495e-9abb-99875b19e88b"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUUID}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="40d656a9-f239-4027-87f3-7cf5436c6a63"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:request name="STS GET" mediaType="application/xml" id="ad980a81-2c51-4b0d-b598-39fb63e6155c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamRenew" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="76ee3f09-6d5f-48c5-a1a8-771d66009881"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:value>${#TestCase#streamhandleFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#VersionMajor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#VersionMinor}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="PUT" method="PUT" id="5373d20d-760c-461d-8c8a-47a4b263c7b5"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/082012/12/coordinator">coor:Stream</con:element></con:representation><con:request name="StreamRenew" mediaType="application/xml" postQueryString="false" id="964c8223-3e69-4fdf-bdea-5e25f5b8203c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreate User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="20e88872-2ae7-4dcd-bced-05f50baa3d8b"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="8f885262-0c5a-43cd-8124-aeda2f1b95e8"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/></con:representation><con:request name="PolicyCreate User" mediaType="application/xml" postQueryString="false" id="deb13bac-6cd5-44ce-b150-b0ebbb4f4c07"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreate Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="c8b4ede7-a0b4-4a5f-869b-83ec7f2808ae"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="de4ab6aa-c158-40f2-88e0-6ea736fe2b72"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="PolicyCreate Account" mediaType="application/xml" postQueryString="false" id="e8f073ff-d8a8-45f3-97c1-2bec66241b35"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamDelete1" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="773182fb-a66a-41ac-95f9-11ad39169aff"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="a470f373-fb7b-4ac3-a0c3-83d606cc157e"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="StreamDelete" mediaType="application/xml" id="e34ee22b-066d-4a31-83e4-f9b009a875f3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policy GET" type="rest" basePath="" id="a7730d66-9b6c-4f39-8737-84656164f4b9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyGet User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="19e5692b-a7be-4eb0-852c-29db277321e6"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="1fc2fa89-a418-471a-a458-cf97a1dfb8f5"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="PolicyGet User" mediaType="application/xml" id="16858fbb-e5ed-43e0-bdb2-528fef40b46e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGet Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="5af2106f-9afa-4d00-a6fb-705af6433b37"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="359feca1-b1b9-4d14-a48d-0dc9f161a93d"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="PolicyGet Account" mediaType="application/xml" id="c43cabc4-cd44-4968-b32a-2749f0ffefcb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policy DELETE" type="rest" basePath="" id="d9205493-d758-4189-887e-dd64af163cb3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyDelete User" path="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="1c19eb55-4646-4045-819a-97fca30db7d8"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="696272d0-f087-4c16-aaf1-d83e7ed56fef"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:request name="PolicyDelete User" mediaType="application/xml" id="35d592bf-3086-4190-b915-674b17880872"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyDelete Account" path="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" id="464067b3-d4e4-432f-b15b-f613c08ecdc5"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="8bfe2081-76e6-4fca-9bcf-5071430c7826"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="PolicyDelete Account" mediaType="application/xml" id="a358efbf-e633-455a-9489-23a25e395085"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="E2E" type="rest" basePath="" definitionUrl="E:\COmmon\E2E_1.wadl" id="bcbd36aa-8381-43e6-a1a8-31a80a131883" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/E:/COmmon/E2E_1.wadl"><con:part><con:url>file:/E:/COmmon/E2E_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="E2E"/>
  <resources base="">
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="AccountCreate">
      <doc xml:lang="en" title="AccountCreate"/>
      <method name="POST" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <request/>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" id="UserCreate">
      <doc xml:lang="en" title="UserCreate"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="UserCreate">
        <doc xml:lang="en" title="UserCreate"/>
        <request>
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" id="STSCreate">
      <doc xml:lang="en" title="STSCreate"/>
      <param name="tokentype" default="urn:dece:type:tokentype:usernamepassword" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="audience" default="${#TestCase#audienceList}" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="STSCreate">
        <doc xml:lang="en" title="STSCreate"/>
        <request>
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" id="STSGet">
      <doc xml:lang="en" title="STSGet"/>
      <param name="ASSERTION" default="${#TestCase#assertionUUID}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="STSGet">
        <doc xml:lang="en" title="STSGet"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml;charset=ISO-8859-1"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="PolicyCreateUser">
      <doc xml:lang="en" title="PolicyCreateUser"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateUser">
        <doc xml:lang="en" title="PolicyCreateUser"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="PolicyCreateAccount">
      <doc xml:lang="en" title="PolicyCreateAccount"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateAccount">
        <doc xml:lang="en" title="PolicyCreateAccount"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="AccountCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="4ad5af83-8ae2-4a35-ba93-bca7f90fc8f5"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="11c303a7-6c0d-4d81-8266-d9b047028970"><con:settings/><con:parameters/><con:request name="Request 1" id="01c8ede8-8809-4055-b4ed-be13b440ba86" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" id="95052f65-0ba0-49b1-8073-46a27b53dc73"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST" id="fadb5000-6e20-423f-8340-a9d76c68539a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="cadacdc2-1492-4d24-aeb1-a3395cd676c2" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" id="1306d3f7-50b7-4a64-9719-4ff50fc9fb0a"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#tokentype}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value>${#TestCase#audienceList}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#audienceList}</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST" id="99318696-40d0-43a1-9441-f6710cbcce13"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="b4c7d0b4-15bc-4bb3-a8b0-ded3a0a622d4" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" id="24ed8e38-9fce-4c88-b6bb-8f73399ca603"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:value>${#TestCase#assertionUUID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionUUID}</con:default></con:parameter></con:parameters><con:method name="STSGet" method="GET" id="af75a998-066b-4657-af98-54eefff030db"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="15fc02e3-cc1b-48c4-a86e-cf34a9d4ecc4" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateUser" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="a8ca7260-a075-4de0-87cb-a97a490b329b"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateUser" method="POST" id="73bad48d-9f85-444d-927c-2ebd1c343415"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="17102aef-1b9c-46b3-833b-20b38d59420f" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateAccount" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="bfa7df50-aa38-46d4-bb18-a47e985eccaa"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateAccount" method="POST" id="37409820-0fd6-46c8-a10f-25eccbe5543d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="27818dcb-5bb7-4700-a162-199ec6cf72e0" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountUserCreate" path="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="95052f65-0ba0-49b1-8073-46a27b53dc73"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="AccountUserCreate" method="POST" id="fadb5000-6e20-423f-8340-a9d76c68539a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="cadacdc2-1492-4d24-aeb1-a3395cd676c2" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="SetupScripts" id="07ec7234-23b8-4a46-a843-a10809677fa2"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="1f53c3a0-9e49-44b5-97b7-bb9e064d146b"><con:settings/><con:testStep type="groovy" name="Set ENV Properties" id="1bec2b80-b9e0-4856-81a8-9911f0a03dee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info("Set Environment properties!!!");
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath
log.info("Project Path : '" + projectPath + "'");

def eNV = context.expand( '${#Project#ENV}' )
log.info("Environment: '" + eNV+ "'");

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");


def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));
log.info("Load property file : '" + propertiesPath + "/" + eNV +"project.properties"+ "'");
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)}

tP.setPropertyValue("APID",tP.getPropertyValue("Streams_APID"));
tP.setPropertyValue("ALID",tP.getPropertyValue("Streams_ALID"));
tP.setPropertyValue("CID",tP.getPropertyValue("Streams_CID"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema" id="08365f8b-12f6-4cfb-bf09-81ac48aff64b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "V2: "+tP.getPropertyValue("VersionMinor");

def v2 = context.expand( '${#Project#VersionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="datasource" name="Country" id="b8738ecc-7bf5-4d06-92a9-4cecdebc3d75"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup" id="f08a531e-e4d3-44a3-a91d-3e136f37cd7e"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" disabled="true" id="bdfbf822-d7f5-4fca-a3c7-a3fd47ca313b"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Policy Resource" id="dabead2f-0895-456c-89c9-67b3b9a20f28"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def policy_TOU = context.expand( '${#Project#Policy_TOU}' )


String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");
</script></con:config></con:testStep><con:testStep type="groovy" name="MicroService Enable/Disable Testcases" id="06815d9f-83f7-428d-8973-eb424a57d00e"><con:settings/><con:config><script><![CDATA[
//TestCase
def testCase  = testRunner.getTestCase();
def microService = context.expand( '${#Project#microService}' ).toString();
ArrayList<String> Suit_lst=new ArrayList<String>();
//Get Arguments
 
def project = context.testCase.testSuite.project;

for (suiteName in project.testSuiteList) {
log.info suiteName.name;
Suit_lst.add(suiteName.name);
  
}

//log.info "suit"+Suit_lst.get(1);





ArrayList<String> Tstep=new ArrayList<String>();

def TStep1  = "Remove Account's StreamHandles";
def TStep2 = "Verify STREAM_DATA_HISTORY row";
def TStep3 = "Verify STREAM_DATA, STREAM_HISTORY row counts for the Account";
def TStep4 = "Post Test Cleanup";
def TStep5 ="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts"
def TStep6 ="Verify STREAM_DATA row"
def TStep7 = "Remove account's stream handles"
def TStep8 =  "Post Test Execution cleanup"

Tstep.add(TStep1);
Tstep.add(TStep2);
Tstep.add(TStep3);
Tstep.add(TStep4);
Tstep.add(TStep5);
Tstep.add(TStep6);
Tstep.add(TStep7);
Tstep.add(TStep8);

for (String suit : Suit_lst)
{  def testSuite = suit;
     def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
     def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

   for(i = 0; i <= TCCount - 1; i++)
     {                                              
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
                testStepList  = targetTestCase.getTestStepList();
                testStepCount = targetTestCase.getTestStepCount();
                if(targetTestCase.isDisabled() == false)
                {
                                for(j = 0; j <= testStepCount - 1; j++)
                                {              
                                	      def q=0;  
                                                try
                                                {     
                                                          for (String T_step : Tstep)	
					                                {
                                                                if (testStepList[j].name == T_step) {
                                                                                
                                                                                targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
                                                                                //targetTestCase.removeTestStep(targetTestStep);
                                                                                if(microService=="ON")
																				{  
																				   targetTestStep.setDisabled(true)
																				   log.info "Disabled Step " + testStepList[j].name;
																				}
																				else
																				{  
																				   targetTestStep.setDisabled(false)
																				   log.info "Enabled Step " + testStepList[j].name;
																				}
                                                                         }
													q++;
																  
												}
                                                                
                                                                //stepScript = testStepList[j].getScript();
                                                                //stepScript = stepScript.replace(oldString, newString);
                                                                //targetTestStep.setScript(stepScript);                  
                                                }
                                                catch(Throwable e)
                                                {
                                                                log.info "ERROR:" + e;
                                                }              
                                }
                }
    } 
}                                                                                             
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Identify Flaky Testcases" id="59a7a00f-0a1d-4268-b3c0-6242245a81f8"><con:settings/><con:config><script>//Project Level Variable name – FLAKYSELECTOR.
//Possible Values – all, only_flaky, without_flaky
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tc_condition  = context.expand( '${#Project#FLAKYSELECTOR}' ).toString();
log.info tc_condition

tP.getTestSuiteList().each
{
      if(!it.getName().toLowerCase().contains("setup") &amp;&amp; !it.isDisabled())
       {
                it.getTestCaseList().each
         {
             if(tc_condition.toLowerCase()=="all")
             {
                                
                 if(it.getName().toLowerCase().contains("migrated"))
                       it.setDisabled(true);  
                   else 
                         if (!it.isDisabled()) {
                               it.setDisabled(false);
                           }
                                                                                                              
                }
                                                                
             else if(tc_condition.toLowerCase()=="only_flaky")
               {
                  if(it.getName().toLowerCase().contains("flaky"))
                                                it.setDisabled(false);  
                  else
                         it.setDisabled(true);
                }
                else
                {
                   if(it.getName().toLowerCase().contains("migrated") || it.getName().toLowerCase().contains("flaky"))
                                           it.setDisabled(true);  
                   else
                        if (!it.isDisabled()) {
                                it.setDisabled(false);
                                 }
 
                }
           }
        }
}

</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140811</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>396d1d6b-33dd-48d6-b41d-40fc4be4bc57</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="P0 Test Cases" id="1c808eb7-cdd9-4f3b-b548-72ef719f8b7c"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30000 - StreamDelete - DLP - Establish Testing Stage" searchProperties="true" id="f777484f-dd02-4e79-a181-e5fc524fb803"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish data for RET,LLASP,DLASP" id="8600cb06-b86d-43f0-bdc5-02ea83754651"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E");

def runnerTS = myTS.run( null , false )

assert runnerTS.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="e7c32735-eec0-4415-a3a0-1048e50d4d72"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9e91c71f-b6f7-400f-b9b2-bea67d328bd7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="50a391d7-54b8-44a4-adb2-bf53299f347d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="e2c4e0d2-4206-41ce-8a94-5f2089109f26" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="7e02e2f9-230f-4fe9-9646-8e377b501d13" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="5478848a-3a0f-4df4-86b9-fee4da9c49fa" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="5711b1b0-b90b-4a77-96a6-984972574bb2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set CID's content rating to US:US:MPAA:G" id="6c5ff37d-3ab3-4bf6-9fcf-31f9a255c75d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

String cid     = tP.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = "G";

assert a.sqlSetRating(cid,region,country,system,rating) == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account and User Country to US" id="3ce1d290-fffe-4b9b-bf0b-ec780a57184f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbacct;
def dbuser;

String accountoid = tC.getPropertyValue("accountoid").toString();
String useroid = tC.getPropertyValue("useroid").toString();
String country = "US";

try {
	dbacct = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));	
	dbuser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));	
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbAccount|dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	assert dbacct.accountSetCountry(accountoid,country) == 1;
	assert dbuser.userSetCountry(useroid,country) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_034853</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A27B7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A2B07A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcuI8DH0VJnu5E/ILhUxhJoV2yn4UWqA/05uO6yjB22BDbAPl6dcOkAVK+7G7VxkrsnQkHUs652iSukHIOWSCMFpaTlLKg1zaMGRGA4Y44QFFE+CBwMEwvOkGbtkO0PaKUeq0G8aLXXFqkev4JgDUTD/CdbNWsasm8tz4zIl979U7U6qcS+hQLhAVDcO1nYpp+6brjRw7cKqBUyk7VfvZKD1AxpVtpVK2jQ2oJW8YYyGmgWUtFovywiuzLLFc23asp5vuEI9hgozm+Tqi3FHW3OjjcgQY0hSXMZtY59aeznnEgyFJKBIyg42v6DNftmXXLaUTcZJ8M4q7EHVozPJjC1FGCUYpWSGdnxsQYxaVwjRhGRHjyadBOLY2bMISm9jx6TfD2od2oqE9hBlHJh8jZ2NrADFkQDGU7gedhvHttKrlV0cZojxm2YTvH/8MD9A5pGwKkcm3YW2gnW7wSKaa54CDDsWp5GQOPU3WKcLAN9UEfLqp0m0GMVl2CVcEXXKNztqFd3BcZ6NNEuDibwq0U5y1kQeUSmjOXoc3vdbzaxudZb1Obb4Mv3cfpmIsL+xGDmBXORcUpV0fD0hZkGh9gz7Vbtqt6+TujLMf1oV/Wf2v0h32vbh1+3PWu2rdy96sPh+1qnc07g8S8nYfje+6kj468xq6xt1V3//u1bzvneuV1QsfiaysvOiHh5Hsec/38oF1nq5vxu/wfr2s+5XZBNNb5q2Suwven9512dOgVieL1gg9DmLpz2rtd3gcrvy2kwx4v6sY+Rj9QPXk6QnHb40inB38+7Ltmx/K15+AxfaoadBpl65UlZD4uplpCYnMOFcNprr5cAFUGE19S/eOQKp2R6JA1XB9dvyqW/WuqqEbXp2FdffSrnh2pV53ruyw0rr0tk1mjeIAYovRmGhfuuWuafM1QDwJONAIMnPOpOp03PjCYhsJVOrQgXoEjHIYMdWeWTqe2UlK7XrCHPlmv73VRW22WFWMUo+JPu1nYSwg2+/J3l5PHgAmUwK6cWtec0VsLlQuZmguReqU56hMQarWnukuG7h+rWJxMpmmoJFaExbJFMrT8TTPjMXXX9dEmOfSweUof22fxnX4b5sCpRMRrcB1LBegyghHhou9DeRDwNWjQ2hrPpQR0Q9L5VNkBK+R7P/6TRPNj4Ij7W44vN2CLnT/4O5La/ji/KWB7j847/6rc1XLjzetL/JpHZaycBTNyY7b7dah5pfqeM0tEWfIKc/Kcj6XOfd837MyZd7SJLBs1xoClqonv4/YG1CrsGKdNAAL4AfOC/k+RCnGdCiQgIl6K6X8eMLGMwSuN56OeuTLU9epPZcqdQKW4pislaptTSP+cqHDAdZ6SnyrPguWRb8rdsTWjh8Vp1p4BKGJPunh9/4JLzBTZolq2yzbNX7MwDHn+8IiyQUWoQj1KgV8/qek+3HDQBgzSUWnbeSC3RmR4xTvUwh+K30wk4+hYi8l/7+YmiSnAAa1zXKS29frRaCfAE125szG6fFRcxZ+NWr20TU/iD9KdvJ0yPHmLw==</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:146263F6A27A7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>146263F6A27A7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:146263F6A2AF7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>146263F6A2AF7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>80969</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>146263F6A2827A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>146263F6A2827A92E05305991F0A5CE3</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8600cb06-b86d-43f0-bdc5-02ea83754651</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_11507 - StreamDelete - LLP - Single StreamDelete against an active stream handle - 200 OK" searchProperties="true" id="91abade8-3155-4cb5-a347-1377d199bf0a"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3a74bbf9-8db8-42e8-86ad-1ebec44fc64b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="a964e876-ade3-45d7-830b-8cf32542a180"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="f5631295-114c-4dee-a7c1-a2f9ec96bef7" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	dbUtils.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
} 
catch (Throwable e) {
	log.info "ERROR! - dbUtils.streamDeleteAccountOid - $e";
	assert 1 == 2;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="6ed02814-8f08-4a99-a8c5-5a735bdb7530"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="32bca90c-d010-4f00-a373-9326089cfd2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="8ce0d881-bf67-4548-b0de-434ea9d93d49"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="ff3d97d6-1ce6-43b7-b820-5320674e4948" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="daba9c0f-f519-4b64-9215-c3bd4fabaab7" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="d0bbf062-9810-4f99-ad24-d444215c79bf" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="6acc8367-2af1-4e99-8989-c16e0f1cf511" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150611_071756</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:183EDFFFDBF4C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:183EDFFFDBF5C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPrYCUlIuGUKM0Cgh7NQWKCX05eOcURwGxwaO+Hy69cOkAIFDrv7lLEiS5+kz5LuGJr5ObvGGIScBDSznPmU2Ym0okQhtQPECLMpmgGzObaHtW7HzmV1G+2uKJm2U1HewCpbbqlsqHreKqqWOS6qZdcoqObYKBUNY1zOuUWhylgEbco4oryi5HQjr+oF1TBGhmlbedvMZU2r8KpkniBkwrZQyerKFtSSVZQp53Nb0xaLRXZhZoPQ03K6bmgv3c4QT2GGlOrdJqLEUVjd6uOsCxh8H2dxMNPutAOdO5fZQ+JRxKMQtr7cc750TS9rQsdlxLtR0rvgtukkSI4NRANKMPLJGsn8dIFPAzdT870gJHw6OxuEoUvDKiyxig2L3ijaIbQrDR0gDBlS2RQZW1sDmEAIFEPmcdCuKDfXVS25OgoRZZMgnLHD4+/hARqDH8zBVdkurC206w2eyFT1DrDdptiPGInhQZJ1jjCwbTUBX28q0w9hQpYdwgRBl0yi0/bhHR032XCIB4z/SYH2irMx8oT8CKrDddSEuKnXS62nbvk/+mz+WyIP5oPb1CsJgH3lRJCWdnM8ImVKos2N58efw9qoVvhZKOLeJ1/qT0HH67bq69t+n76ueWdx6/QZsx5vV3VTv/eexs2eNSm0KfrxXH5odRuG894uGY1mabku9N47JTqEuMQZxB/3AtjqNd+9fe4F993p4/O4vvrhjbz3V5pz0T/8nkW8vBLBRZPRq9HTa3p94DfDQVd313rTGYUjc7wqxy8vNYPzNvUqaTh7+A9luzc/jMbvgPnuKGnQdjItUSXELzczKSGuOklU7blsPowD5UpV3pK9w45EuyOuLWq4ORsls+m0Wi2n3so3Co7e1POm6ZTLRkuvNfVccddkNiiOIDYCOiHSl2y5G9pcBohnNgPqQqjGQSQ6HVMuWHQQR5k2HYhHEFAGo0C058+xaS7eC/EYVkUjWn1Qo0y9yXpVUDIPAe/RXlibcAgPe3LhoCcPAJM5Adm4Ja+ZIDbjIhefKI64b2RjlKUQidYeyi5r56xSXmNkNvdBItVmgRv5kJ1P50lmNLb55lSEWSIdNEfJazsb1/G/XQqEjkukApOx1EGUEU4Ml9wukG8BF04OoZ35WuQS+bBEPnlI8AbJ4a8vmkh+pBxxOrVhfwc61f2Nu2+N4ZvxhwY6f+G887fORS2/39Qu5FM7LmXqyI3Jntvd1iHml+h41R0RP5GR/cxGcRwl3LMsUwuFeU2SQNNz2hBwJHryahR8ANVSK9pVAzAFfuQ8lR9CjPiUDjniMBNvJZMcr9h4hsDkxtMWj3x57Tp14FKkjsOSn5I1fLGtScQXFzpsY6knxH3xWQSh+1WxE7b2/Ig4xcLDCfXkSQ6/1Rle4ECYJaJtB+G+8VMGTjk/FKZJTrFwQahxxOH8n4zsxxUFYRxElLcdJRHsz4gEJ1/Nwf5S+mYmGUPpXkr+fzFVSUIBDGKbZSSxL9cLWz4B6u3Nma3TM6PGujRqDtFVv4m/S/bydMzx6i8=</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">183EDFFFDBFEC6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">183EDFFFDBF6C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">183EDFFFDBF5C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">183EDFFFDBF4C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B65A97BC9DCEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B65A97BC9DEEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">183EDFFFDBFDC6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>183EDFFFDBFEC6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>183EDFFFDBFEC6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77846</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">183EDFFFDBFDC6D0E0533D991F0AE027</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Linked LASP Test Cases_P1" id="0e3bd35e-779f-421e-a76e-632e9eb54fe0"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30000 - StreamDelete - LLP - Establish Testing Stage" searchProperties="true" id="8b88a09e-9885-42ec-b727-f91f81ef8998"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="bea58550-f578-490a-9bd7-34775ee6cbc7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="3472ab6c-3474-4543-a35d-3e9404b56d4a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="8a348947-b5e2-4e08-acfb-7c3b555c0ae2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="1a0f46c8-c10c-42a3-b5e4-88b1ec352de8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="08e5bdbf-2135-4f70-9b99-3a2fa6c595ac" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="010362d6-7807-41f0-b2b4-ab10205ab69d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="0d1adc74-4aa8-426e-adcd-05be76f5fe9e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set CID's content rating to US:US:MPAA:G" id="581835b3-027e-4ed3-94dd-54042b916993"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

String cid     = tP.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = "G";

assert a.sqlSetRating(cid,region,country,system,rating) == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account and User Country to US" id="ecea78a9-8c7c-46e3-a9dc-46a14fb62337"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbacct;
def dbuser;

String accountoid = tC.getPropertyValue("accountoid").toString();
String useroid = tC.getPropertyValue("useroid").toString();
String country = "US";

try {
	dbacct = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));	
	dbuser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));	
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbAccount|dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	assert dbacct.accountSetCountry(accountoid,country) == 1;
	assert dbuser.userSetCountry(useroid,country) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_034853</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A27B7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A2B07A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcuI8DH0VJnu5E/ILhUxhJoV2yn4UWqA/05uO6yjB22BDbAPl6dcOkAVK+7G7VxkrsnQkHUs652iSukHIOWSCMFpaTlLKg1zaMGRGA4Y44QFFE+CBwMEwvOkGbtkO0PaKUeq0G8aLXXFqkev4JgDUTD/CdbNWsasm8tz4zIl979U7U6qcS+hQLhAVDcO1nYpp+6brjRw7cKqBUyk7VfvZKD1AxpVtpVK2jQ2oJW8YYyGmgWUtFovywiuzLLFc23asp5vuEI9hgozm+Tqi3FHW3OjjcgQY0hSXMZtY59aeznnEgyFJKBIyg42v6DNftmXXLaUTcZJ8M4q7EHVozPJjC1FGCUYpWSGdnxsQYxaVwjRhGRHjyadBOLY2bMISm9jx6TfD2od2oqE9hBlHJh8jZ2NrADFkQDGU7gedhvHttKrlV0cZojxm2YTvH/8MD9A5pGwKkcm3YW2gnW7wSKaa54CDDsWp5GQOPU3WKcLAN9UEfLqp0m0GMVl2CVcEXXKNztqFd3BcZ6NNEuDibwq0U5y1kQeUSmjOXoc3vdbzaxudZb1Obb4Mv3cfpmIsL+xGDmBXORcUpV0fD0hZkGh9gz7Vbtqt6+TujLMf1oV/Wf2v0h32vbh1+3PWu2rdy96sPh+1qnc07g8S8nYfje+6kj468xq6xt1V3//u1bzvneuV1QsfiaysvOiHh5Hsec/38oF1nq5vxu/wfr2s+5XZBNNb5q2Suwven9512dOgVieL1gg9DmLpz2rtd3gcrvy2kwx4v6sY+Rj9QPXk6QnHb40inB38+7Ltmx/K15+AxfaoadBpl65UlZD4uplpCYnMOFcNprr5cAFUGE19S/eOQKp2R6JA1XB9dvyqW/WuqqEbXp2FdffSrnh2pV53ruyw0rr0tk1mjeIAYovRmGhfuuWuafM1QDwJONAIMnPOpOp03PjCYhsJVOrQgXoEjHIYMdWeWTqe2UlK7XrCHPlmv73VRW22WFWMUo+JPu1nYSwg2+/J3l5PHgAmUwK6cWtec0VsLlQuZmguReqU56hMQarWnukuG7h+rWJxMpmmoJFaExbJFMrT8TTPjMXXX9dEmOfSweUof22fxnX4b5sCpRMRrcB1LBegyghHhou9DeRDwNWjQ2hrPpQR0Q9L5VNkBK+R7P/6TRPNj4Ij7W44vN2CLnT/4O5La/ji/KWB7j847/6rc1XLjzetL/JpHZaycBTNyY7b7dah5pfqeM0tEWfIKc/Kcj6XOfd837MyZd7SJLBs1xoClqonv4/YG1CrsGKdNAAL4AfOC/k+RCnGdCiQgIl6K6X8eMLGMwSuN56OeuTLU9epPZcqdQKW4pislaptTSP+cqHDAdZ6SnyrPguWRb8rdsTWjh8Vp1p4BKGJPunh9/4JLzBTZolq2yzbNX7MwDHn+8IiyQUWoQj1KgV8/qek+3HDQBgzSUWnbeSC3RmR4xTvUwh+K30wk4+hYi8l/7+YmiSnAAa1zXKS29frRaCfAE125szG6fFRcxZ+NWr20TU/iD9KdvJ0yPHmLw==</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:146263F6A27A7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A27A7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:146263F6A2AF7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A2AF7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>80969</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A2827A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A2827A92E05305991F0A5CE3</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31500 - StreamDelete - LLP - AccountIdUnmatched -vs- Assertion accountId MisMatch - 403 Forbidden_MIGRATED" searchProperties="true" id="0ab5904e-073b-4e65-9824-a0a08ccd663a" disabled="true"><con:description> This test case will verify the proper response from the Application Tier layer when a StreamDelete API is invoked with a nonexistent node accountId. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f447431b-2865-4d1b-882c-d376a3ba5ce9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_ACCOUNTID_MISMATCH");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="cef6eed0-2288-494c-b200-aba1a1cabe50"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="af4cafbf-2084-4405-ad49-df3719baad1f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="f8ec0b4b-013b-453a-8674-73c62b52a7cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="425681bc-cec0-47eb-b530-06c103ded5bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="d32cbde0-f5f6-4a4d-8d01-d73b28eac4cd" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Change the assertionAccountIdFULL value" id="8de4cdbe-a78e-48b0-9052-94d23ece3cd4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = tP.getPropertyValue("urnaccount");

tC.setPropertyValue("assertionAccountIdFULL","${a}100100");</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="f6cfd576-3155-45fa-b062-c3f47419fab0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="41606760-cbf1-46de-9dd2-3205731ee588" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));



</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A27B7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcuI8DH0VJnu5E/ILhUxhJoV2yn4UWqA/05uO6yjB22BDbAPl6dcOkAVK+7G7VxkrsnQkHUs652iSukHIOWSCMFpaTlLKg1zaMGRGA4Y44QFFE+CBwMEwvOkGbtkO0PaKUeq0G8aLXXFqkev4JgDUTD/CdbNWsasm8tz4zIl979U7U6qcS+hQLhAVDcO1nYpp+6brjRw7cKqBUyk7VfvZKD1AxpVtpVK2jQ2oJW8YYyGmgWUtFovywiuzLLFc23asp5vuEI9hgozm+Tqi3FHW3OjjcgQY0hSXMZtY59aeznnEgyFJKBIyg42v6DNftmXXLaUTcZJ8M4q7EHVozPJjC1FGCUYpWSGdnxsQYxaVwjRhGRHjyadBOLY2bMISm9jx6TfD2od2oqE9hBlHJh8jZ2NrADFkQDGU7gedhvHttKrlV0cZojxm2YTvH/8MD9A5pGwKkcm3YW2gnW7wSKaa54CDDsWp5GQOPU3WKcLAN9UEfLqp0m0GMVl2CVcEXXKNztqFd3BcZ6NNEuDibwq0U5y1kQeUSmjOXoc3vdbzaxudZb1Obb4Mv3cfpmIsL+xGDmBXORcUpV0fD0hZkGh9gz7Vbtqt6+TujLMf1oV/Wf2v0h32vbh1+3PWu2rdy96sPh+1qnc07g8S8nYfje+6kj468xq6xt1V3//u1bzvneuV1QsfiaysvOiHh5Hsec/38oF1nq5vxu/wfr2s+5XZBNNb5q2Suwven9512dOgVieL1gg9DmLpz2rtd3gcrvy2kwx4v6sY+Rj9QPXk6QnHb40inB38+7Ltmx/K15+AxfaoadBpl65UlZD4uplpCYnMOFcNprr5cAFUGE19S/eOQKp2R6JA1XB9dvyqW/WuqqEbXp2FdffSrnh2pV53ruyw0rr0tk1mjeIAYovRmGhfuuWuafM1QDwJONAIMnPOpOp03PjCYhsJVOrQgXoEjHIYMdWeWTqe2UlK7XrCHPlmv73VRW22WFWMUo+JPu1nYSwg2+/J3l5PHgAmUwK6cWtec0VsLlQuZmguReqU56hMQarWnukuG7h+rWJxMpmmoJFaExbJFMrT8TTPjMXXX9dEmOfSweUof22fxnX4b5sCpRMRrcB1LBegyghHhou9DeRDwNWjQ2hrPpQR0Q9L5VNkBK+R7P/6TRPNj4Ij7W44vN2CLnT/4O5La/ji/KWB7j847/6rc1XLjzetL/JpHZaycBTNyY7b7dah5pfqeM0tEWfIKc/Kcj6XOfd837MyZd7SJLBs1xoClqonv4/YG1CrsGKdNAAL4AfOC/k+RCnGdCiQgIl6K6X8eMLGMwSuN56OeuTLU9epPZcqdQKW4pislaptTSP+cqHDAdZ6SnyrPguWRb8rdsTWjh8Vp1p4BKGJPunh9/4JLzBTZolq2yzbNX7MwDHn+8IiyQUWoQj1KgV8/qek+3HDQBgzSUWnbeSC3RmR4xTvUwh+K30wk4+hYi8l/7+YmiSnAAa1zXKS29frRaCfAE125szG6fFRcxZ+NWr20TU/iD9KdvJ0yPHmLw==</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:100100</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:146263F6A2AF7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>bSTREAMDATAcount</con:name><con:value>4</con:value></con:property><con:property><con:name>bSTREAMDATAHISTORYcount</con:name><con:value>4</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>errorRespType</con:name><con:value>ACCOUNT_NOT_MATCH</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263FC7E68291BE05307991F0A21CE</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:146263FC7E68291BE05307991F0A21CE</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">496BB9B3BC1D4F279E642FBD772EAE17</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:496BB9B3BC1D4F279E642FBD772EAE17</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_034853</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A2B07A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A2AF7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A27A7A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>146263F6A2B07A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>496BB9B3BC1D4F279E642FBD772EAE17</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:496BB9B3BC1D4F279E642FBD772EAE17</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A2827A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>146263F6A2B07A92E05305991F0A5CE3</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77968</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263F6A2827A92E05305991F0A5CE3</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31502 - StreamDelete - LLP - StreamHandleIDNotValid - Stream handle supplied not prefixed with stream URN - 400 Bad Request_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3843242a-8f63-4dad-af31-b49b37d1ed04" disabled="true"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="aead9fd1-1363-4165-a942-9a6b2f52fbbd"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_NOT_VALID");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","active");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="4e11a01f-c7bb-4440-aa7c-84dcd2813cd4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9d94835b-5a1f-440e-853a-856f2e4e677d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="fca20c0e-fd43-454c-8e07-58b7a6abdc76"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="db773955-e544-446e-b3f5-e3ae28a4e998"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove the URN from the streamhandleFULL Property" id="ec8949a4-3909-4ddc-91d1-77bbc7ba7b8c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = tC.getPropertyValue("streamhandleFULL");
String b = a.substring(a.lastIndexOf(":")+1, a.length())

tC.setPropertyValue("streamhandleFULL",b);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="07884403-1217-4eec-a111-de57bdfd1713"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="72759917-3cb1-48ec-9022-51492f02fa38" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="d2232d98-ff3a-436f-8ef6-f243dddbc483" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="4f8ba65e-fa5c-415f-bca2-0a3301d98186" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>146263FC8039291BE05307991F0A21CE</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPq4E3IFkkxhhmtPuqUX0na6fekYR4Db4EDsBOivXztACpT2sLtPGSuy9En6LOmcoWlkek3GIOEkpqXlNKLMy6V1JU2oFyNGmEfRFJjHsRc0+1eeWdY9tL2ilPxOXXmp2WFoD6ug6nhkq3a16qouqoBq2LVKzXBMw3FBqDKWgk8ZR5TXFVM3Kqpuq6Z1b+ieaXiVatl2rWel9AgJE7aFSllXNqCWrK5MOJ95mrZYLMoLqxwnY83UdUN76l8FeAJTpDTO1xHljpLGRh+XQ8AQRbiM46l2ru3pnIfMC8iYIp4msPEVfuVL13RXEzohI+MzpbgLoU9HcX5sIxpTglFE3pHMTx/4JA5LzWgcJ4RPpl8GYejSsApLrGLDpmeKtg/tREN7CBOGVDZBxsbWAEaQAMVQehj4deXstKrlV+8TRNkoTqZs//hneIBmEMUzCFW2DWsD7XSDRzLVOAfs+RRHKSMZXEuyzhAGtqkm4NNNlW4TGJHlFWGCoEsm0Wm78A6O62x0yBgY/5sC7RRnbeQRRSk0lne/Rm/W5QXRLq0VC//rhSNn/hQG761FPQewq5wLitKujwekLEi0vtG0f0QTC8W1x8XDax87ZH5DHfLj1rbdztCq3FD283pQdZwMt5pL+lrr9XqP4XD+nD1DdHff/fmcNR8mrlZBb/MnZ/AaBtdBq2u+zzCMb7sr0l9l7sOF/ZolIfPTYEj6j4O3d+ozx45I1k3SzjO5u6wFb8Ebo5eV/q+u4Q8DNEhaDLnPduo39a5Om/HFY1uvF+Hs4N+Xbd98kA5fAfPtUdLA75R6okqIf9/MpISE6ihX9Way+TAOlCsNeUv2Di8V7Y6Enqjh+mzYVdM1Wq1utV01Wp1uV69Yes11jZ7e7NpWb9tk1igOILZjOiLSl2y5a9p8DxBPPQY0hETN4lR0OqZ8Y7GDOCr5dCAeQUwZ3MeiPRvJfKRXzdVkmI5X1WhFh9PErTmsopSuY35Db5LmiEOy35OtvZ48AExmBGTjlrxmgtiMi1zMUZbyyChnqEwhFa09kV3WM22nojEynUUgkWrTOEwjKM8mszwzGlt/TRVhlksH3fv8tX0Z1+G/bQqETkikApOxtECUEY4MF3sbyKeAq0eH0NZ8Mw2JfFginzwheI1k/9cHTSQ/Co50rprB7RZ0ofsHd1/awYvxlwau/sH51b86F7X8fFP7Jp/aYSkLR2FGdtxutw4xv0THa2yJOEdGeV5OsyzNuWfblpYI85okgaabWgA4FT15dR+/AdUKK9pJA7AAfuC8kO9DTPmEBhxxmIq3UsqPJ2w8ATC58fjikS9PXaf2XIrUcVjyY7J2JLY1ifjbhQ57WOoJ8a34LOIk/KjYEVs7fkScYuHhhI7lSQ6/1Re8wLEwS0TbjpNd48cMHHO+LyySXGDhglDDlMPXf0qyH9cVhHGcUu53lFywOyNynHw1A+9D6ZOZfAwVeyn5/8VUJTkFsNiBhX5uX64XnnwCdLwzZzZOD0dN1eq1Hd1y5MzZHTWm0e4WSdlD1/gk/izZydMhxxu/AQ==</con:value></con:property><con:property><con:name>assertId</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>146263FC8038291BE05307991F0A21CE</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:146263FC8038291BE05307991F0A21CE</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>146291BBE6C61BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:146291BBE6C61BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>146291BBE6C71BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>146291BBE6C71BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_NOT_VALID</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6rMEn33V1juR8twUbxVkqoBBoKKCuL1DWEEFEEZEPTXnwGjMdnZ2fs7DykzzXT3mu5Fs+YZm3uf7QKMURR7YVBWxJcKTbONZt3s1MwW3ak1uMam1mlz61qj027bFrKQXbcqZQXjBCkBjs0gfqmwNMPU6HqNaRpMo1vnuhz3xNTpVaU8QxEmkcmWJ7pSzvZ+gLtF1pdKEgXd0MQe7gbmHuFubHUnQB10yc6ueYNUeX2+giwSRq9uHB+6FGU92QSJ71tPVrinnqlPe55t3J14TmDGSYTec9r4pfLum6bpU1p/CiOHYmmapugORfbY2HN+VV5LN2dkK8EmvK4FMwgDzzJ972LmoFQUu6FdBr4TRl7s7v8QmqEYOg9dQ5lVs5hG8KtCfSQo0P1jpE8gI2zWsGsyt2A62qAIBRYqT3XlpfLrnxp4dTUiM8CbMNrjL+v/hggFJ+SHB2TX8O1gN3D/HvGbar0+I6urBJafYO+EhjlLDqaFcHkcoY2XDTxMuGfjctH9coZvBEPWf+nIM/WIk8CmvqmM6DkIx/9Pux5bdY0yM/0EvUIG8+nFbo2TiXAG/Fu/OtqsJQ9Crf1SQHjcfAV17/T7+itP77R6dwLU8Cine/G8o0/KvjGhz/V9kkHmmB7S1mFWVyfHKo47e9+Xe2l8GmoWZMKGuJm2TOKIsSbumkp2acL4iEvLFWHRReuskmBryS2GnnmNt4zh2w2TbTU5MIo4TnKdIT+GVLOzWnKuPZzIPetyqlLmie6cfaSwc2GlGmFWgm2gjvQtgF7mzNcQiury5eNMj2fIz9VH5+KQ+f8Lju6IZmzeF0I+KDbk7YzRq6ooYnIRBHCeOCBVeOCQvy0Y8s7u6O48uZPSPNA0CYgC72/hQAU7GTBTyLuqMJupmXABPd4ZzoijUQL+ild1mIrpUpxp2htMXcOWZ+e17CerCxyqABfOgqtCHc5E3YCqCsKrLVPFtZxt1YmaKtpSLJEAIswOF1vuxEjOPItVOHXCscsJl6wWM2KXzoP98LQ2oK8KqixMjvJEWddFDfaAvpxbrJQQ38tgfwhLyyn/4NQ7oC1AUkqTnOCiGrtUNabsUNTNwmZ8tqmK3FM1nApacSq5BNPebHr5qIXAq4K9hxk0wPhaC8sQpCG9WvSwOecCVQep6BTOfZjaoxsQVaPTknCt1QCmOtSnQ0nVlRSCwibC1MdrduiuZfdk1bWsZ4DtY2MEDc6lgDwP9JN15o4lU5bAej9jrLruWh7nmYswdVbtVNSWvX64UkiYIdAgz2uAAKJBfjRSfx4M+Bk3Ongd1kODjRTukRuVVCbs706XjG579ZEzHs45cbNrjWVvXDdtl1J8i93Wd0BRkN1nXM209SWli4F3aY760wXyouUlHnIa0/TaXEmfJ9OFGPot+22xnPar2dLSjNF4Mp2PL1k2PG7bFz9+G/Fv0aSnis5oiNAYW1WKNiXeaIucsHzbEj5tdBpxJeCoPADy1nGgRwjMv22vJHzTVUjIC1QhlYW5IE+ALFehwouatpFcZmzJs2TKDFUF2j4p03m50P3SSuBF0inanK8OS1aiVwawi2BaA0qONuWqvQVaaUPfmMUgPcw2AcPQ8kF726ipY6k5A2wlnfDkLeJLiQKm5ujQo7P+rEkzR832e5MOmNazCbvLRq6zOu+c1Y40Zfnw6iwN4M+MB44phGLzkmZAXQXt6/uWqcq0rvvWPjus91YmGqRnhXNo8FCXNHqaiSLoX23YAGyGlxe4VQVY+JdAppqEFqf1wsXLYOiNDJgQ0iYPdNmuWfqvHMspVvrMsaMANPCVY/DKMQg2x6rSFhnMNYUDnqcOL8Oj1poNep0DrS0GuxJflSgn9vzGKGinRr86Z85py91q83lHEV2hGmyWbn0d87R5sTTU27VkT9+JQbPhn9WBqnFTj/LP9BYdUzwoDRUmgPX4IlGdKKny+5W3v1zqDXa6H0+SkzI1+5g5u+vjvJNux29NiorkM3dprU6atAit5fU78nVI3o3XMUo9DthPE/gmvSbJeous+LbMv8OKWJbIx9GMf5ZxucWza5tia/eQa0EcoyCuvOZeuYTrJkToeXaXfDmv6w7fbHIsxwOp2aIZjod0g2YkGtBcp9NgBXDTelcUXyAKYbDx8ly5mL1+rH8GaO27a2RGKKr8ECmvU1kJdKI+wgAjI3ypCFJbhE2RYbk23apDwLWaUJDYRr3VbMA2y1XKwzAeBaMIbGIUPQjk1leBrCPLO3goV9HvWgLHpBBH85TEPvN0Mp8ClBCZHeVKt8s22lxRAMpO9geLPCDTLTqEOH46uIdCzPzxGF+f3U5M9thevgHnoHlEuoW+kfSNG+LfTsZ+K/1v4UFie7lmIeWLI8+6Ivn86IMNOQ3uVKA7TOOG+b7131w7DNP83ZX6ARH1tRj3TPbJe8h7u5gQrU3kWHEfwaRpR/Pp+JScTknRphbR4FREwlMMRVMTZCVELp6NcIcC6h6B+hehfsf8Je/d/hldErvBJCZv+Z4wqlws/35J++RNChCjLP7OJvjkWpYn//HmZnWtfB8xj8lPGkb2R92/ifWQh0DOJ5QXOPkqV9jnz+19fxO6VkiiemRIhdFj7O/8v8v92Xgv1x1KTFixTmL05yflfPq8VEzLCpMgVsRKYXiciAXm+HxA3Y9Nv4UpJO77nSXDf7yzLNTBxHLR3qzc93p/31zzisZbiHhhr8DyUsnI7ZskD5yHCfwO8A9DmPtpCH8+yetv5t8tDzX9yuzX/wE=</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77970</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>146263FC8040291BE05307991F0A21CE</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>146263FC8040291BE05307991F0A21CE</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>146291BBE7D51BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:146291BBE7D51BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>B06C429C0A124AC6A79615059135C055</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>B06C429C0A124AC6A79615059135C055</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:B06C429C0A124AC6A79615059135C055</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>B06C429C0A124AC6A79615059135C055</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_034853</con:value></con:property><con:property><con:name>useroid</con:name><con:value>146291BBE6C71BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31503 - StreamDelete - LLP - StreamNotFound - Stream handle does not exist - 404 Not Found_MIGRATED" searchProperties="true" id="dd93903e-85c5-430e-90bf-1c6796c7a545" disabled="true"><con:description> This test case will verify the proper response from the Application Tier layer when the stream handle supplied does not exist.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4ae63336-e607-442a-9755-d30a693e3ee9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_NOT_FOUND");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","active");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="f9ea8117-febd-4c9b-8bd7-0ae9ddd3b125"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d22d62bb-648b-4030-86e0-5a2bed1cc777" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Create nonexistent stream handle" id="87d3e9ed-7f0a-4172-b087-40bed873f249"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new generalUtils.generalUtils(log);

String x = a.randomHexString(40);
String b = tP.getPropertyValue("urnstream") + x;

tC.setPropertyValue("streamhandleFULL",b);

this.log.info "a[$a] b[$b] x[$x]";</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="a1d2db4e-a47b-4c4c-8737-6a5405df655d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Generate another request if necessary" id="b57718b5-e97f-491f-a8de-9ed9dc91761e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Create nonexistent stream handle");
}</script></con:config></con:testStep><con:properties><con:property><con:name>userid</con:name><con:value>600</con:value></con:property><con:property><con:name>accountid</con:name><con:value>0900</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertLLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPrYCbkQLskUZlKgZ9nSbUugt5eOcRRwmzhp7HDpr187QAqU9rC7TxkrsvRJ+izpjKEoNB2XMUg5iWlpEYWUObm0qWQpdWLECHMoioA5HDuee9V3zLLuoM0VpdTrNJXnsdUY18A3VCMwbdUKMFbtANfVBtSrgYXqfs23hCpjGfQo44jypmLqRlXVLdWoDnXbsSpOxS437NqTUrqDlAnbQqWsK2tQC9ZUppwnjqbN5/PyvFKO04lm6rqhPVz1PTyFCCmts1VEuaO0tdbHZR8whCEu4zjSzrQdnTOfOR6ZUMSzFNa+/K986Zpua0LHZ2RyohR3we/RIM6PbURjSjAKyTuS+bkCPo39khtO4pTwafRlEIYuDauwwCo2LHqiaLvQjjS0gzBlSGVTZKxtDSCAFCiG0mjQayonx1UtvzpMEWVBnEZs9/hneIDOIIwT8FW2CWsN7XiDBzLVOgPs9CgOM0Zm8EuSNUEY2LqagI83VbpJISCLPmGCoAsm0Wnb8PaOq2x0yAQY/5sCbRVnZeQOhRm00OnIvVtOnnov2tg1Go/py9Xo8R29DGduMwewrZwLitKujnukLEi0uuHfTi6f2DK57E5HcXo/mDwaI73R6c/jN92MLUavr4xxMn98DBoQJRiNLpOGGxEemGa7vzTcxv05ua5r0c/uE9Xu6+8/KqE1upg96POgO0tO6w9vt7XGO6uZYQNfdN3+6XjUG07R6OFi+MaNaDi1B2PPrC9sPvDu5922h3/csv40rXn1n9nj5enT4Oa1+zOs/9e5ahbhbOHflW3evJeNXwDzzVHSoNcpXYgqIf59M5MS4qtBruoksvkwDpQrLXlL9g4nE+2O+I6o4epsVNp6p3tunFcq56Zl6V29WtGrtm1c6K553qhumswKxR7EdkwDIn3JlruizfcAceQwoD6k6izORKdjyjcWO4ijUo8OxCOIKYNhLNpzfbq0/RQIjGvcQJVXnKJqWA/HTCn9ivk1vU7dgEO605MNc6cnDwCThIBs3JLXTBCbcZGLNzTLeGiUZ6hMIROtPZVd1jGtRlVjJEpCkEi1KPazEMrJNMkzo7HV11QRZrl00B3mr+3LuPb/bVIgdHwiFZiM5RxEGeHAcDE3gXwKuHZwCG3Mu5lP5MMS+eQpwSsku78+aCL5UXCk03e9mw3oQvcP7j63vWfjLw30/8F5/1+di1p+vql9k09tv5SFI39Gttxutg4xv0THa22I+IaM8ls5m82ynHuWVdFSYV6TJNB0U/MAZ6InL4fxK1CtsKIdNQAL4HvOC/kuxIxPqccRh0i8lVJ+PGLj8YDJjacnHvni2HVqx6VIHYcFPyRrh2Jbk4i/Xeiwg6WeEN+IzzxO/Y+KHbC15UfEKRYeTuhEnuTwW37BCxwLs0S07TjdNn7IwCHnu8IiyQUWLgg1zjh8/ack+3FTQRjHGeW9jpILtmdEjpMvE3A+lD6ZycdQsZeS/19MVZJTAIPYZhnJ7cv1wpFPgE625sza6f6o6dpGpVY1O4bZNfNRU1+NmlrHtouk7KBrfRJ/lmzlaZ/jrd8=</con:value></con:property><con:property><con:name>astreamrowcnt</con:name><con:value>3</con:value></con:property><con:property><con:name>bstreamrowcnt</con:name><con:value>3</con:value></con:property><con:property><con:name>ahistoryrowcnt</con:name><con:value>3</con:value></con:property><con:property><con:name>bhistoryrowcnt</con:name><con:value>3</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>25</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>coorcsnodeuserid</con:name><con:value>10060007</con:value></con:property><con:property><con:name>streamdeletenodeaccount</con:name><con:value>910600</con:value></con:property><con:property><con:name>llpnodeuserid</con:name><con:value>100600</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpnodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpcsnodeaccountid</con:name><con:value>9109115</con:value></con:property><con:property><con:name>coorcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>llpaccountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>portOrg1Full1_nodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>portalnodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>portOrg1Basic1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>streamcreateassert</con:name><con:value>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</con:value></con:property><con:property><con:name>transactionid</con:name><con:value/></con:property><con:property><con:name>llpnodeaccountid</con:name><con:value>910600</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeaccountid</con:name><con:value>09109110</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C0DEB1B33C2440E05305991F0A2B85</con:value></con:property><con:property><con:name>portalnodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_01503 - StreamDelete - FUNC - LLASP - StreamNotFound - Stream handle does not exist</con:value></con:property><con:property><con:name>dlpOrg1Full1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>nickname</con:name><con:value/></con:property><con:property><con:name>rtruserid</con:name><con:value>0600</con:value></con:property><con:property><con:name>portOrg1Basic1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>llporgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>portOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Full1_nodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>dlpnodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Standard1_useroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>portOrg1Full1_orgid</con:name><con:value>10</con:value></con:property><con:property><con:name>dlpuseroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>portOrg1Basic1_nodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeuserid</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeuserid</con:name><con:value>01006042</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>portaluserid</con:name><con:value>600</con:value></con:property><con:property><con:name>coorcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>portalaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>rtraccountid</con:name><con:value>0900</con:value></con:property><con:property><con:name>llpassert</con:name><con:value>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</con:value></con:property><con:property><con:name>portalassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreaterequestuser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamcreatrequestuser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeuserid</con:name><con:value>10060210</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>llpnodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>dlpcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpcsnodeuserid</con:name><con:value>10060016</con:value></con:property><con:property><con:name>portOrg1Full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>portalnodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>dlpOrg1Basic1_useroid</con:name><con:value>0604</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeuserid</con:name><con:value>01006044</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C0E913652E12E2E05307991F0A6D99</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpcsnodeid</con:name><con:value>9116</con:value></con:property><con:property><con:name>usernodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeaccountid</con:name><con:value>910602</con:value></con:property><con:property><con:name>portOrg1Basic1_orgid</con:name><con:value>10</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>coorcsnodeid</con:name><con:value>9107</con:value></con:property><con:property><con:name>dlpOrg1Basic1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>streamdeleterequestuser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpOrg1Standard1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpOrg1Full1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpaccountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>coorcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Basic1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>portOrg1Full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>coorcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>portOrg1Standard1_orgid</con:name><con:value>10</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpOrg1Full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>dlpassert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpOrg1Basic1_nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>dlpOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>portOrg1Full1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>llpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Basic1_useroid</con:name><con:value>0604</con:value></con:property><con:property><con:name>skipRemoveStreamsFlag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpcsnodeuserid</con:name><con:value>10060015</con:value></con:property><con:property><con:name>coorcsnodeaccountid</con:name><con:value>9109107</con:value></con:property><con:property><con:name>rtrnodeuserid</con:name><con:value>100602</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeaccountid</con:name><con:value>09109110</con:value></con:property><con:property><con:name>llpcsnodeid</con:name><con:value>9115</con:value></con:property><con:property><con:name>dlpcsnodeaccountid</con:name><con:value>9109116</con:value></con:property><con:property><con:name>dlpOrg1Basic1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreatenodeaccount</con:name><con:value>910600</con:value></con:property><con:property><con:name>rtrorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeuserid</con:name><con:value>10060410</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Standard1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>dlpOrg1Standard1_useroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>llpuseroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>dlporgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>portOrg1Full1_nodeaccountid</con:name><con:value>09109110</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>streamdeleteassert</con:name><con:value>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</con:value></con:property><con:property><con:name>portalorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpcsaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases</con:value></con:property><con:property><con:name>dlpOrg1Standard1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>errorRespType</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>streamcreateuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>streamCreateAPI</con:name><con:value>StreamCreate for LLP</con:value></con:property><con:property><con:name>streamDeleteAPI</con:name><con:value>StreamDelete for LLP</con:value></con:property><con:property><con:name>verifyDBrow</con:name><con:value>Verify STREAM_DATA row</con:value></con:property><con:property><con:name>verifyDBrowHistory</con:name><con:value>Verify STREAM_DATA_HISTORY row</con:value></con:property><con:property><con:name>verifyAPIResponse</con:name><con:value>StreamDelete Response Body and HTTP Header Set Check</con:value></con:property><con:property><con:name>rtrnode_id</con:name><con:value>urn:dece:org:org:dece:0912</con:value></con:property><con:property><con:name>streamdeletenodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>node_id</con:name><con:value>urn:dece:org:org:dece:910</con:value></con:property><con:property><con:name>dlpOrg1Standard1_node_id</con:name><con:value>urn:dece:org:org:dece:914</con:value></con:property><con:property><con:name>streamcreatenodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>portOrg1Basic1_node_id</con:name><con:value>urn:dece:org:org:dece:10</con:value></con:property><con:property><con:name>dlpOrg1Basic1_node_id</con:name><con:value>urn:dece:org:org:dece:10</con:value></con:property><con:property><con:name>portOrg1Full1_node_id</con:name><con:value>urn:dece:org:org:dece:10</con:value></con:property><con:property><con:name>dlpOrg1Full1_node_id</con:name><con:value>urn:dece:org:org:dece:914</con:value></con:property><con:property><con:name>llpnode_id</con:name><con:value>urn:dece:org:org:dece:910</con:value></con:property><con:property><con:name>portOrg1Standard1_node_id</con:name><con:value>urn:dece:org:org:dece:10</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C63A1C7E95789ACF7976594584946F37F7D75FFA</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150415_031532</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13C0DEB1B33B2440E05305991F0A2B85</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13C0E913652D12E2E05307991F0A6D99</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C0DEB1B33B2440E05305991F0A2B85</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C0E913652D12E2E05307991F0A6D99</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C0E913653512E2E05307991F0A6D99</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77972</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C0E913653512E2E05307991F0A6D99</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31502 - StreamDelete - LLP - StreamHandleIDNotvalid - Stream handle malformed - 400 Bad Request_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="be947924-34c2-40d3-80db-8d17ff5e115f" disabled="true"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a469676d-fd44-430b-90c8-6e4d5a132764"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_NOT_VALID");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","active");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="26a46d45-970e-4916-ac4f-0d4107901315"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="5c187ee3-7a78-4e95-a239-5c9ffd9dc8f3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="datasource" name="Grid of maliformed stream handles" id="f6e973fd-9256-410b-bc67-20596766ef49"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:B&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:aaaaaaBBBBBcccccc&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:!!!!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:1000-a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:39999&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:111111111111111111111111111111111111111111111111111111111&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:1a999-333-ss&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:aaa-bbb-ccc&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:a23&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:44b&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dee:streamhandleid:org:dece:44b&lt;/con:entry></row></con:configuration></con:dataSource><con:property>streamhandle</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="99907f96-4cbb-49cb-b33f-7a0f89cbd2a6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>a</con:name><con:sourceType>streamhandle</con:sourceType><con:sourceStep>Grid of maliformed stream handles</con:sourceStep><con:targetType>streamhandleFULL</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="eba848a6-2fdb-4330-a2a2-ed431198484a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="8bec278a-74b1-49a3-8406-dfde35b9b66f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get next Streamhandle" disabled="true" id="b6de9a23-3c7c-4976-9b56-fc883f4821ca"><con:settings/><con:config><dataSourceStep>Grid of maliformed stream handles</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="9e60e1fe-eda2-4aa8-9c68-70a898f39555" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150403_112820</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_NOT_VALID</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:a</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:12CC9830FA4526ABE05305991F0AD201</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC9830FA4626ABE05305991F0AD201</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:12CC429664554101E05305991F0AB996</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC429664564101E05305991F0AB996</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMb4D9gRmDCTncAJJCqTQvHSELBsFIxNJNia/vpIBBwjJoe2TR+vV7rcXfbtXDCxj0/MZQ5TjhFTyZUyYV0ibSkqJlwCGmUfAEjGPQ2/kD/qeWdU9sL+iVHrdpvIztB1XN11Xteqhrtqz0FCBZYbqTJ9Zs6BhBNCBQpWxFPUI44DwpmLqhqPqtqpbY93xnJpnuVWjYTwple+IMmFbqFR1ZQcqZ01lzvnK07T1el1dW9WERpqp64Y2HfRHcI6WQGldbSMqHNHWTh9WAwRRHMMqTJbalXakcxUwb4QjAnhK0c5X8JEvXdNdTegEDEdflPIuCnokTIpjB5CEYAhi/ApkfgaIz5Og4sdRQjGfLz8MwtClYRXlUIWGTb4o2jG0Cw0dIaQMqGwOjJ2tIQoRRQSiyuOw11S+XFa14uqYAsLChC7Z8fH38CCSoThZoUBl+7B20C43eCZTrSsEvR6Bccpwhu5ks64ARGxXTQQvN1V5oCjEeR8z0aA5k+i0Q3gnx202ujhCjP9JgQ6KszXyHcQpauUmWjn/dgfpI0f3mXvrb54nxigKX9uwWQA4VC4EZWm3x5OmLJtoe+MxWgw2zxur7mv1BXzwu8z6pxd1Uo1OH+9+xPq0PQgX7XX2sGBGw6rZ381+L9Qnw+v+7NuY4XEnw2Ayzeh08G0evsDwaRHevNL++HbIMwLr4wkf9LNNI4fO6Pqp3Ukm01Ft9R/S6j/m19165H4N3funuR+lpNG9y5OJVZ/ebp6dr4s6eEwNMxn/WIgiDEnG9WYZzgH+Y9n+zY/S2TOCfH+UbdDrVm5ElQD/nMykBAdqWKh6K0k+jCPClZa8JbnDSwXd4cATNdyeDbPTcRuWfuPbjlnz29e6Y+mO6xo3ut8VxLYnmS2KE4idhIRY+pKUu22bzwHCpccQCRBVsyQVTMeUTyx2AQeVHhmKR5AQhsaJoGfDbrzSOI/yVRSvjSDd0Pw5cFD4Iuj1LuH35J76IUf0mJQbR6Q8RBCvMJLMLRubic5mXCTjBWQpj41qBqoEpYLbqaRZz7QbjsbwchUjCVVbJkEao+pqvipSo7Ht11QBZIV0eD0untuHgZ3+2+dA6ARYKjAZSxuJOqIz08XcB/Iu4NrZKbQ376cBli9LJJRTDLdIjn+99YlskLJJun1/9LAHXer+xt2fndFP4w8N9P/Cef9vnYtavr+pfZJP7bSUpaMgwwdu92uHGGCC8lr7RnwBRvWlmmZZWvSebVsaFeY12QSabmojBFNByptxskBEK61oF03AEviJ81J+DDHlczLigKOleCuV4njByjNCTK48PfHK80v3qSOXInUc5fycrBOLdU0i/nSjgx6UekL8ID7rhAZvFTtj68CPiFNsPByTSJ7k9Nt80BcwEWax4O2EHho/Z+Cc82NhmeQSCxcNNUs5+vhPRRJyUwEQJinhva5SCA6HRIGTb1bIe1N6Z6aYQ+Viiv9/M1Vx0QIQiXWW4cK+3C88+QRIdDBodk5PZ41turWa7Ti2oRuHs6bturUyKUfoWu/E7yUHeTrt8dYv</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC9830FA4526ABE05305991F0AD201</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC429664554101E05305991F0AB996</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC4296645D4101E05305991F0AB996</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77971</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC4296645D4101E05305991F0AB996</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31505 - StreamDelete - LLP - AccountIdUnmatched - Account URN not supplied in API URL - 403 Forbidden_MIGRATED" searchProperties="true" id="735a43e3-b229-4f10-9d25-985eaf340590" disabled="true"><con:description>This test case will verify the application tier properly handles StreamDelete API invocations that contained malformed accountId strings in the URL.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="12eda0a7-59d4-4471-a273-a7b196d26dfd"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_ACCOUNTID_MISMATCH");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);
tP.setPropertyValue("StreamCreateCount","12");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="10730199-bc31-420d-b25b-3b5925d0445c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9fcf6b51-2156-47cf-b121-a4776003d904" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="492f85cd-9eac-419c-9df7-7dde77b5445a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="57ae747f-85e4-4e14-8fca-cc5893717ad8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="datasource" name="Grid of malformed accountIds" id="40cca5c6-a29c-4a6d-932e-2a95c8051f9e"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">da&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">EfG&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">a-1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">11111a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:accountid:org:11c111&lt;/con:entry></row></con:configuration></con:dataSource><con:property>a</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="3a47571f-994a-452b-a8c8-eba38af6c91b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="true" entitize="false" transferChildNodes="false"><con:name>a</con:name><con:sourceType>a</con:sourceType><con:sourceStep>Grid of malformed accountIds</con:sourceStep><con:targetType>assertionAccountIdFULL</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="635001a7-ded8-40b0-8060-e068ec59e001"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get next malformed accountId" id="6070ea9f-953e-42f6-9cb8-6ebf94622b9b"><con:settings/><con:config><dataSourceStep>Grid of malformed accountIds</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="41096615-d4a4-4f10-9b49-e319ab8f5a39" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_04066</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">278F3274A67041839E552D7A891A7162</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:278F3274A67041839E552D7A891A7162</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A083099D7E2DE05307991F0A97E4</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:1462A083099D7E2DE05307991F0A97E4</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:11c111</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1462A0EE53D207F4E05307991F0A52F9</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZrU+o8EP4rTM/n0isKHWEGBRQEL4CKfHFiukCObYJNwsVf/yYFKiD6cs751Ml28+yzl+zuGUdx5AZVziERhNHcIo4oD1Jp2ZAJDRjihAcUxcADgYNetdMO3LwdoM0VI9eslY0XD3tFv+iUTNdzwPRHJ6FZ8hzHRCfgu8izT04wVqqcS2hSLhAVZcO1nYJp++pK37EDzwtcJ+86p0Mj9wgJV9hKJW8ba1ILXjYmQkwDy5rP5/m5l2fJ2HJt27EGnXYPTyBGRuVs5VFqKKms9XE+BAxRhPOYxdaZtaNzFvKgR8YUCZnA2lb4nS3bskuW0gk5Gf8ysrsQNumIpccLRBklGEXkA+n4dEBMWJirRmOWEDGJv3XCsTWwCQtsYsenvwxrl9qRQDsME45MPkHOGqsLI0iAYsg9dJtl49dxWUuv9hNE+YglMd89/hkfoDOI2BRCk2/cWlM7HvBApCpngIMmxZHkZAY3ulinCANfZxPw8VC5uwRGZNEmXBXogmt21ja9veMqGjUyBi7+JkFbyVmBPKJIQiXyi9ectT7OJbq677rwsWjJdr/litN5OSWwrZwKstSujntFmRXR6sY1btvty46YP/H6/XWrzeR8MrxP+kOydF+HDw+d/n3R6ZXiq0H/9cmn7Zj6ifyI4sLN7VNn8HDV+Hh8Wri3bn0SPi9l93l4XhtMoSUvW3EbyXvvshD1h91TGsfP78Vo8fTUgu7gavRbhM1FsxG9DZPHQeshRl2nVR0PH+4B39zG3WXcmV+St0Fcuhqd1vuXfqkI43Lmzhb/Xdnmzffk62/AYnPUZdCs5RoqS0j83My0hITmKFUNprr5cAFUGBV9S/eOQKp2R8JA5XB1dvwTt2rX6wWv5tqnDb9uFzz7tFRyGna14DZKmyazYrFH8YLREdG2dMtdlc3PBHEccKAhJOaMSdXpuPEDYg0JlGvSrnoEjHLoM9We3eVkMi753C1MRtNXNnVZguLl0sjdMHFLb5PqSECy25G9nY7cBUymBHTb1lXNVVlzoSLxjmZSRE5+hvIUpGrsie6xgesXCxYn8TQCzdOKWSgjyE8n0zQuFl99XRNhnkq79X761r71av/fJgBKJyRagWtfzkElEQ6MFmfjyBeHTw6OoA18VYZEPysVTZEQvGKy++uzSHR1ZBVSa1d7dxvSme4f3H256L04fwnQ/gfj7X81rnL59ab1Qzyt/VRmhsIZ2TK72TnU9FL9rrIpxHfk5N/zcjaTae35vmclCt7SRWDZrtUDLFVHXvbZG1ArQ7GOGn8Z8T3jmXyXohQT2hNIQKzeSi49HrHv9IDrfaepnvji2GVqx6QKnYCFOCS7iNSuphn/uM7hAGs9Jb5TnzlLws+MHcDasqP8VOuOIHSsT3r0Lb+pC8wULFFNmyXb4IcADhnfFWZBzrgIVVCvUsD3f3K6G5cNhDGTVDRrRirYnhApT7GcQvCp9AUmHULZVkr+fy01SVoCGNQuy0mKr5eLQD8BOt6aMmuj+4Om5Jyf12sNzzmv1bcHTd33GllQdthVvoi/SrbitF/jlf8A</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE53D307F4E05307991F0A52F9</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6rMEn33V1juR8twUbxVkqoBBoKKCuL1DWEEFEEZEPTXnwGjMdnZ2fs7DykzzXT3mu5Fs+YZm3uf7QKMURR7YVBWxJcKTbONZt3s1MwW3ak1uMam1mlz61qj027bFrKQXbcqZQXjBCkBjs0gfqmwNMPU6HqNaRpMo1vnuhz3xNTpVaU8QxEmkcmWJ7pSzvZ+gLtF1pdKEgXd0MQe7gbmHuFubHUnQB10yc6ueYNUeX2+giwSRq9uHB+6FGU92QSJ71tPVrinnqlPe55t3J14TmDGSYTec9r4pfLum6bpU1p/CiOHYmmapugORfbY2HN+VV5LN2dkK8EmvK4FMwgDzzJ972LmoFQUu6FdBr4TRl7s7v8QmqEYOg9dQ5lVs5hG8KtCfSQo0P1jpE8gI2zWsGsyt2A62qAIBRYqT3XlpfLrnxp4dTUiM8CbMNrjL+v/hggFJ+SHB2TX8O1gN3D/HvGbar0+I6urBJafYO+EhjlLDqaFcHkcoY2XDTxMuGfjctH9coZvBEPWf+nIM/WIk8CmvqmM6DkIx/9Pux5bdY0yM/0EvUIG8+nFbo2TiXAG/Fu/OtqsJQ9Crf1SQHjcfAV17/T7+itP77R6dwLU8Cine/G8o0/KvjGhz/V9kkHmmB7S1mFWVyfHKo47e9+Xe2l8GmoWZMKGuJm2TOKIsSbumkp2acL4iEvLFWHRReuskmBryS2GnnmNt4zh2w2TbTU5MIo4TnKdIT+GVLOzWnKuPZzIPetyqlLmie6cfaSwc2GlGmFWgm2gjvQtgF7mzNcQiury5eNMj2fIz9VH5+KQ+f8Lju6IZmzeF0I+KDbk7YzRq6ooYnIRBHCeOCBVeOCQvy0Y8s7u6O48uZPSPNA0CYgC72/hQAU7GTBTyLuqMJupmXABPd4ZzoijUQL+ild1mIrpUpxp2htMXcOWZ+e17CerCxyqABfOgqtCHc5E3YCqCsKrLVPFtZxt1YmaKtpSLJEAIswOF1vuxEjOPItVOHXCscsJl6wWM2KXzoP98LQ2oK8KqixMjvJEWddFDfaAvpxbrJQQ38tgfwhLyyn/4NQ7oC1AUkqTnOCiGrtUNabsUNTNwmZ8tqmK3FM1nApacSq5BNPebHr5qIXAq4K9hxk0wPhaC8sQpCG9WvSwOecCVQep6BTOfZjaoxsQVaPTknCt1QCmOtSnQ0nVlRSCwibC1MdrduiuZfdk1bWsZ4DtY2MEDc6lgDwP9JN15o4lU5bAej9jrLruWh7nmYswdVbtVNSWvX64UkiYIdAgz2uAAKJBfjRSfx4M+Bk3Ongd1kODjRTukRuVVCbs706XjG579ZEzHs45cbNrjWVvXDdtl1J8i93Wd0BRkN1nXM209SWli4F3aY760wXyouUlHnIa0/TaXEmfJ9OFGPot+22xnPar2dLSjNF4Mp2PL1k2PG7bFz9+G/Fv0aSnis5oiNAYW1WKNiXeaIucsHzbEj5tdBpxJeCoPADy1nGgRwjMv22vJHzTVUjIC1QhlYW5IE+ALFehwouatpFcZmzJs2TKDFUF2j4p03m50P3SSuBF0inanK8OS1aiVwawi2BaA0qONuWqvQVaaUPfmMUgPcw2AcPQ8kF726ipY6k5A2wlnfDkLeJLiQKm5ujQo7P+rEkzR832e5MOmNazCbvLRq6zOu+c1Y40Zfnw6iwN4M+MB44phGLzkmZAXQXt6/uWqcq0rvvWPjus91YmGqRnhXNo8FCXNHqaiSLoX23YAGyGlxe4VQVY+JdAppqEFqf1wsXLYOiNDJgQ0iYPdNmuWfqvHMspVvrMsaMANPCVY/DKMQg2x6rSFhnMNYUDnqcOL8Oj1poNep0DrS0GuxJflSgn9vzGKGinRr86Z85py91q83lHEV2hGmyWbn0d87R5sTTU27VkT9+JQbPhn9WBqnFTj/LP9BYdUzwoDRUmgPX4IlGdKKny+5W3v1zqDXa6H0+SkzI1+5g5u+vjvJNux29NiorkM3dprU6atAit5fU78nVI3o3XMUo9DthPE/gmvSbJeous+LbMv8OKWJbIx9GMf5ZxucWza5tia/eQa0EcoyCuvOZeuYTrJkToeXaXfDmv6w7fbHIsxwOp2aIZjod0g2YkGtBcp9NgBXDTelcUXyAKYbDx8ly5mL1+rH8GaO27a2RGKKr8ECmvU1kJdKI+wgAjI3ypCFJbhE2RYbk23apDwLWaUJDYRr3VbMA2y1XKwzAeBaMIbGIUPQjk1leBrCPLO3goV9HvWgLHpBBH85TEPvN0Mp8ClBCZHeVKt8s22lxRAMpO9geLPCDTLTqEOH46uIdCzPzxGF+f3U5M9thevgHnoHlEuoW+kfSNG+LfTsZ+K/1v4UFie7lmIeWLI8+6Ivn86IMNOQ3uVKA7TOOG+b7131w7DNP83ZX6ARH1tRj3TPbJe8h7u5gQrU3kWHEfwaRpR/Pp+JScTknRphbR4FREwlMMRVMTZCVELp6NcIcC6h6B+hehfsf8Je/d/hldErvBJCZv+Z4wqlws/35J++RNChCjLP7OJvjkWpYn//HmZnWtfB8xj8lPGkb2R92/ifWQh0DOJ5QXOPkqV9jnz+19fxO6VkiiemRIhdFj7O/8v8v92Xgv1x1KTFixTmL05yflfPq8VEzLCpMgVsRKYXiciAXm+HxA3Y9Nv4UpJO77nSXDf7yzLNTBxHLR3qzc93p/31zzisZbiHhhr8DyUsnI7ZskD5yHCfwO8A9DmPtpCH8+yetv5t8tDzX9yuzX/wE=</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146291BBEDF41BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE53D207F4E05307991F0A52F9</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146291BBEDF31BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1462A0EE53D307F4E05307991F0A52F9</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>278F3274A67041839E552D7A891A7162</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:278F3274A67041839E552D7A891A7162</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146291BBEDFB1BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1462A0EE53D307F4E05307991F0A52F9</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77975</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146291BBEDFB1BDEE05307991F0AE43F</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31504 - StreamDelete - LLP - StreamNotFound - Stream handle supplied associated with another Account - 404 Not Found_MIGRATED" searchProperties="true" id="503204ad-e2e9-4db2-803a-eb06689fe7a8" disabled="true"><con:description>This test will verify that the application teir will not allow a stream handle associated with a different account than that supplied in the request to be deleted.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d553a0ee-9f8f-4877-8733-a952fa124d4c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_NOT_FOUND");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="515a695a-046e-4ba2-85aa-3c6d553bfce1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d09f4229-33fd-4488-afbf-87e080762e1f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3930690f-a8bc-4070-b146-a16999623c34"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="63dbd69a-28b6-44c5-9d05-bac9baaada1c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Change the Streams STREAM_DATA.ACCOUNT_OID value" id="77a6ce96-35dd-4750-83cd-a62f75e4f18d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();

def assertionAccountIdFULL = context.expand( '${#TestCase#assertionAccountIdFULL}' )
def streamhandleFULL = context.expand( '${#TestCase#streamhandleFULL}' )

streamhandleFULL=streamhandleFULL+"A";

tC.setPropertyValue("streamhandleFULL",streamhandleFULL);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="c0f01981-95fd-4901-9ec1-ab828b28cc2d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="d626e950-7a23-4996-8179-d4d9ebd2adff" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>accountid</con:name><con:value>0900</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>146291BBEDF41BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ahistoryrowcnt</con:name><con:value>3</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZrU+o8EP4rTM/n0isKHWEGBRQEL4CKfHFiukCObYJNwsVf/yYFKiD6cs751Ml28+yzl+zuGUdx5AZVziERhNHcIo4oD1Jp2ZAJDRjihAcUxcADgYNetdMO3LwdoM0VI9eslY0XD3tFv+iUTNdzwPRHJ6FZ8hzHRCfgu8izT04wVqqcS2hSLhAVZcO1nYJp++pK37EDzwtcJ+86p0Mj9wgJV9hKJW8ba1ILXjYmQkwDy5rP5/m5l2fJ2HJt27EGnXYPTyBGRuVs5VFqKKms9XE+BAxRhPOYxdaZtaNzFvKgR8YUCZnA2lb4nS3bskuW0gk5Gf8ysrsQNumIpccLRBklGEXkA+n4dEBMWJirRmOWEDGJv3XCsTWwCQtsYsenvwxrl9qRQDsME45MPkHOGqsLI0iAYsg9dJtl49dxWUuv9hNE+YglMd89/hkfoDOI2BRCk2/cWlM7HvBApCpngIMmxZHkZAY3ulinCANfZxPw8VC5uwRGZNEmXBXogmt21ja9veMqGjUyBi7+JkFbyVmBPKJIQiXyi9ectT7OJbq677rwsWjJdr/litN5OSWwrZwKstSujntFmRXR6sY1btvty46YP/H6/XWrzeR8MrxP+kOydF+HDw+d/n3R6ZXiq0H/9cmn7Zj6ifyI4sLN7VNn8HDV+Hh8Wri3bn0SPi9l93l4XhtMoSUvW3EbyXvvshD1h91TGsfP78Vo8fTUgu7gavRbhM1FsxG9DZPHQeshRl2nVR0PH+4B39zG3WXcmV+St0Fcuhqd1vuXfqkI43Lmzhb/Xdnmzffk62/AYnPUZdCs5RoqS0j83My0hITmKFUNprr5cAFUGBV9S/eOQKp2R8JA5XB1dvwTt2rX6wWv5tqnDb9uFzz7tFRyGna14DZKmyazYrFH8YLREdG2dMtdlc3PBHEccKAhJOaMSdXpuPEDYg0JlGvSrnoEjHLoM9We3eVkMi753C1MRtNXNnVZguLl0sjdMHFLb5PqSECy25G9nY7cBUymBHTb1lXNVVlzoSLxjmZSRE5+hvIUpGrsie6xgesXCxYn8TQCzdOKWSgjyE8n0zQuFl99XRNhnkq79X761r71av/fJgBKJyRagWtfzkElEQ6MFmfjyBeHTw6OoA18VYZEPysVTZEQvGKy++uzSHR1ZBVSa1d7dxvSme4f3H256L04fwnQ/gfj7X81rnL59ab1Qzyt/VRmhsIZ2TK72TnU9FL9rrIpxHfk5N/zcjaTae35vmclCt7SRWDZrtUDLFVHXvbZG1ArQ7GOGn8Z8T3jmXyXohQT2hNIQKzeSi49HrHv9IDrfaepnvji2GVqx6QKnYCFOCS7iNSuphn/uM7hAGs9Jb5TnzlLws+MHcDasqP8VOuOIHSsT3r0Lb+pC8wULFFNmyXb4IcADhnfFWZBzrgIVVCvUsD3f3K6G5cNhDGTVDRrRirYnhApT7GcQvCp9AUmHULZVkr+fy01SVoCGNQuy0mKr5eLQD8BOt6aMmuj+4Om5Jyf12sNzzmv1bcHTd33GllQdthVvoi/SrbitF/jlf8A</con:value></con:property><con:property><con:name>assertId</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>146291BBEDF31BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:146291BBEDF31BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>1462A0EE53D207F4E05307991F0A52F9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:1462A0EE53D207F4E05307991F0A52F9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>astreamrowcnt</con:name><con:value>3</con:value></con:property><con:property><con:name>bhistoryrowcnt</con:name><con:value>3</con:value></con:property><con:property><con:name>bstreamrowcnt</con:name><con:value>3</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>coorcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>coorcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>coorcsnodeaccountid</con:name><con:value>9109107</con:value></con:property><con:property><con:name>coorcsnodeid</con:name><con:value>9107</con:value></con:property><con:property><con:name>coorcsnodeuserid</con:name><con:value>10060007</con:value></con:property><con:property><con:name>coorcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>coorcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>dlpaccountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpassert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>dlpcsassert</con:name><con:value>zVdZd6rKEn73V7jYj1kJoGLUFT2rGYMKCgIObwgtoAzKIMivP41Gt2ZnT/feh/uQFbuo4auqr7ur3/4pAr9+hHHiRWEfI18IrA5DK7K90OljusY/d7B/BrW3xAz8Rg8kCYxTpFkX2T4WxQ75TBJEmyDINlYXkySDYpikZpj2sQZBEs9E95l81UiqRxK9ZuOFJMkVVjeuwRpVMBQ+THpn930si8NeZCZe0gvNACa91OrNgDTuIc2eeY2NDT7QnAPG+ODNTnozzwnNNIvhh0M76WNumu57OJ7n+UvefEFo8QZBEDjRxZGOnXjONwxl9mEMbTHcRJc1Y4ZR6Fmm75VmFVGCqRvZdeA7UeylbvAT1yROEpXrZ1hYzxbZCr9h+PcAZ3R/6OkBZJyYz4lrkldnKtzAGPUI1nVV7GPfHttw0dFiM0w2URwkn9Z/FxqGR+hHe2g/J9cMrij+3OMXZRm8QasnhpafJd4RylWv96YFk/o0hhuvGHsJYpCd1M99rhfJlSbQ+pvSv+H3OBFs/IvKsJ4Dk/Q/6ct9Ty5eDNPP4GCjWR3SbBr4zNL50if4fSuYmkuK2Tr9M4R75QuoW0s/1p8JeePPhxGtBrtFYy5YHYOIcGVGH4ay748oVpXS/WhJE5GYcSkAWTs7Kovu1NelTsOOV3KbEixTphMn3TKZssl3yrBGtgDkX+d00WHYsRQokyU15YlG97SGUegqhsG18jbpE/pEft2thEyyjoHNkUq5sieNobg7vdOOnTf9qSaUNQPqfmQyO52xWviCL0f6rv89p/scqrxG8HROsvq9oIgua6bmbcFU232DtmEKB5IoslnJMOA0c0Au0sBBf1sg087u4O48oZsTNFAUHrAM7W+5sQR2AiB1jnYlxjCkginBkHZkAxlqNeCvaEnlcjZfsoaivHO5q9mCcVoLfrYqOVkCydmYcSVO5QxW1ThJAtFFVkjsWii20kzKRWXJ1pADliv2pS10UygUntUQKWlGNZYzKlstDCTnT+NAPq41zpcYSWBmB2Emrpuswg2BupxbDT5DtuU42Ee1pU7fGQ33cItakxMoJiglbZdLmt6QWdU8y7RHmSQKQ0lJckY5ZyXUuHxo6OX3WjC0xNgBV3AamF5qYWkMLxOrxTAx51QoqSBnnbPxiMvtyRWIpBB5jbnUaszlKqfqMi+pYs6Bs4zlcj9ZN2R3LbhHq6kUQw1s7xvDKNycD9H3UD1aJ+pQMwUerAODtJqqa3mUZy6i3Fl1clZZDkfRSkRuZKBwNK0ABIgAVWqo/jQY0wY12XvdhgfHGz4KoBvXJDIa7Y5lQXS85sSZynOK3exep4I3bZq2i4u+1dg2d0AUoT0iXcW01SWusqFXticjfQG9eFmmMqWQba9D1dR5pi/YyH+13xdLffRULC1Fm0xn+nxaFoV82HZKP32f0O/xbCixzkSGcJpYTzhh8rTWYSlm+b5FfNqoBKRqwJFoAISt43AeIjD9vr2Q8F2VOEReIDG5wMwZYQYE4YkTaVZRNrxLTi3ByHRSlkTO9lGZTsuF6tdWDM2iThHmfLVfNnhipQH77Expcbyj6NTTcAFXiuxrRgryvbEJSZIQ9sr7RsodS6oYYIv5jEa7iK5lItDNyX5IFCOjTZAHxfaHsy7Qm8WssSsmrrM67ZzVDjVlebd1lhrwDe2OYyKi2LymaJwqgc5lvxWSqDdV3wqK/TqwClZDPTsbRxrNqbxC6AXLgtFFlmigUSTLkttKDHe2r4FCMhEtjuuFmyxD2ZtoXIZIm93RZbtuEL/lWEWx2iPHDgxQwGeOcReOcWBzeBI7LJlQbWafzHOHFriD8mqMh909oSzGuxr9xONO6vmtSdjJtdHTnDzlr+5Wmc+7IusyT+Fm6TbXKU2YpaXA4e5V8NQdG7Zb/kkaSwqle7h/IrbwkCfjmiySIddMSx7vxtkTHay8oCybrYYeTGfZUdTNUUKe3PVh3s230/c2jsfCiSpfV0eFX0TW8nKPfD4kb8LLMYrfH7APJ/B1gJpl6y200uuyuodFts6jy9FMfz6MkS/kWeLZz5uzai8Lkz20EAxoY4NNDO3oDb93+SkeE4UbrzKsBsnLzfvr0c8KemtoxjDGfuGpSrouhioaJaIwgVrUxxJ0QmShd8gQVhddsFhdjtJJOInBJoXxeUYlv55RVZTO3oPVIHs3CMDCDPY+fLGiADctK8rCNEE/kvOs8VNgn79dc0A6tlcpJBUsGqJiwse5udWjmj3qiukPsV/dg8z2qpECFSSNPeuC5PHT4C43G1rwJYxs+NIlyfYV8k3zs+DBK/45oVsg++hZN7rdXg8iiwaeAaAZlrv5ffz22QJNupW4wpsgwBewMENvjfhl7ZX47XGQ/INeJubasuEPnj983OSP2LLUDWcp2kYB6nr9vPz9W+bBGqWfwiL9Ssb4CGAV/JcPHKtnVXpIPEX/8ii2v1f9C19ffXwU3vK5YUpR09ZZCn/+pV5t2T72QW/Pxs6C65lwR5j78rMcw+HgYiKy2A9OzyPfxwxf/OxlRuILaTyzXBiY2E3X+73ys3fuk4W2N9Lvpac9wl+gNyUKHjrYgGw0W9StLg+QBj+If5T8F0WMr2P935RR5fj/uxICnqUZVEd0QzVb/5NSft6cg38B</con:value></con:property><con:property><con:name>dlpcsnodeaccountid</con:name><con:value>9109116</con:value></con:property><con:property><con:name>dlpcsnodeid</con:name><con:value>9116</con:value></con:property><con:property><con:name>dlpcsnodeuserid</con:name><con:value>10060016</con:value></con:property><con:property><con:name>dlpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>dlpnodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpnodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpOrg1Basic1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>dlpOrg1Basic1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeuserid</con:name><con:value>01006044</con:value></con:property><con:property><con:name>dlpOrg1Basic1_node_id</con:name><con:value>urn:dece:org:org:dece:10</con:value></con:property><con:property><con:name>dlpOrg1Basic1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpOrg1Basic1_useroid</con:name><con:value>0604</con:value></con:property><con:property><con:name>dlpOrg1Full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>dlpOrg1Full1_assert</con:name><con:value>zVdZc6rKFn73V1jsRythUOJQiaeaUVRUEJzeEFpAGZQGQX/9aTS6TXb2dO99uFVJJb1Yw7fW+rp79es/RRhUjzBBfhy9EfQzRVRhZMeOH7lvhGlITy3in27lFVlhwHQAQjBJsWZVEd6IOHHpJ5qiXqgGUVUQyqASodSK0jeCoWjqqfxhDJrp1BudRv25WWdXRHV2C8WUoXDwCHUuzt+ILIk6sYV81ImsEKJOanemQB12sGbHukUmuu9YLgETsvvqoM7UdyMrzRL47tBBb4SXpvsOSeZ5/pzXnzFWkqEoiqTaJNZxkO9+I3Be78bQUaJNfF3zVhRHvm0F/tkqI6ow9WKnCgI3TvzUC3/imiZpqnT9BAv7yaYb0TeC/B7ggu4PPX0AmSDrCXkWfXOmww1McIdg1dSVN+LbYxOuGkZiRWgTJyH6tP67wDA6wiDeQ+cJ3fDfMPy5xy+K0n2FdkeJ7CBD/hGOyk7vLRui6iSBG78Y+gjzx0HVS5erBbqRBNp/U/hX8hEnhk1+URnBdyFK/5OuPHbk6mVmBRnsUsAk7fpkobY8kp7gDGgTxdmRjWHj7QLhUfkK6t7Q9/VnOt7Z824Uyu2MJ3tidow3bGHwaW/WI8/TTXbqzUBvryMbQrhn7R199OgzRU9HG27YcwVKrdn5ocnvhDFjvviTrdIaVpY6XPZCJUvmkd1qHPhg4y8SoChNdcpQ23UtkZYGaA8tcdlYb3pSoIzb+9HLCB4LnnI5xT0wqC9zLLOlao3KYjGQ/NlOaJr77UqfGc2Uevue02MOZV4DeLokWf6/YKm2YKXWfcGXm32DN2EKu6qiCNmZ58Fp6oJc4YCLf7dgxLm7g7fz5XZOcUDTJCDwXLAVhyrYyYA2Rc5T+dlMLfgz6HPuaIYNjQoIVpyqi7mQL4WZpvXE3DMceXZay0G2OosjFaCLMe+poi7OBN0QVRXEV1mhCmu52KpTNVe0pVDBDgSx2J8duZ1CufBtRmHVKcssp2y2WsywXDoNw9FxbYiByqsyPz3IU2VdFzSxD/Tl3GakDNueh+E+rixN7sGov4dbAKWcwjHBWTV2uWqYzEjQrYvM+ChTFbmvaijntUtWckXM+zPz/L0WPKfyTigWogEm11rYBi+NqNWij6w5G6k6yAX3YjwQc2d8A6JqVF7hr7Uairku6uZIUnUlF8FFJoh5gNbMyFvL3tGua0XfANvHxvCaOJci/D3Sj/aJPVQsWQLrcEbbdd2zfda3FnHurlq5oC37g3ilYDcjoIkcpwEMiAJlarj+HBhyM3a899uMD4cbKQ6hl1RUOh7sjueCavn1sTsZzVlhs2tOZH9StxyPVAKb2dZ3mM/QGdCeZjn6ktSFyD+/jAfmAvrJ8pyOWI1+8VtsRZ9n5kKIg6bTWyzNQa1Y2poxnkzN+eRcFKPDtnUO0t6Y6yXTviq44xGEE2TXSMqSOKMlsPyyt8V82ugUZCvAVTkA5K3rij4mMNfbXknY01URkxeofC7zc16eAlmuiQonaNpG8uiJLc8ykx6piugEuEyn5UIPKiueE3CnKGu+2i8ZiVoZwLk40xqi5GomW+sv4EobBcYsBfl+tolompL3Wm+j5q6tlgxwlHzK4V3EVTIFmNZ436eKweyFog+aE/SnbWDWiymzK8aeuzrt3NUON2X5sHXwMRDMjAeOKZhi84pmiLoKWtf9VqiKWdcDOyz269AuBAP37GIcG5yoSxplFoIABlcZMgBToOVZ3Kq8eLGvgEK1MC2O64WHltHIHxtihkmbPdBlu2ao33KspFjlI8cOPNDAZ46JV46JYHOoKS2BRuwLv0fz3OVk8aA1Z8N+e09pi+GuwtUk0k39oDGOWrkxqM3pU970ttp83lYEj69Fm6VXX6ccZZ1tDfZ3TdnXd0L00ghO6lDVWNMngxO1hYccDSsjhY7EenqWyHaS1bhw5Yfnc73BmOFkmh0V0xog+uStD/N2vp30XkgykU/subk6atIitpfXe+TzIXkXXo9R8vGA/XAC38anabbeQju9Lct7WBGqEr4crfTnoxj9TF8kvvO0uah2sgjtoY1hQIfoXueQV/LR56eAfBxt/NKynCKvV++vJz877KyhlcCE+IWnMuuqEul4logjBI34jUD4iMgi/5BhsB6+YYnqKE7H0TgBmxQmlxGV/npE1XE+ex+Wc+zDJAALK9wH8NmOQ9Ky7TiLUoT/QZdh46fAPn+75YB1HL9UQCUsDuJqws9jM93qUDdMf4j95h5kjl/OFLggaeLbVyQfP3UfcnOgDZ+j2IHPbfrevrviHxrSLz9akr+AQ36uxD2Qc/Qfwt4mf0XAo1IXcLwg3v1+/PbZAk/IpbjEizDgK1iY4TdK8rz2z+T9UYH+we8Za2078AfP7z7u8o/YstSLpinegCGmS/Wy/P0b6IM1Tj+FRfqVjA8wwDL4Lx9Gdscu9bB4gv/kceJ8r/oXvr76+FF4z+eOKcVNW2cp/PmXarnX34j3feE7xEVwO00eCPNYfkHkRRJcTRSB+MHpZVh8n/4L9NPpf6EOp7YHQ4u46/q/V37yL32y8bmA9TvpaY/xF/gtioNHLtFt049H2UdM3R/EP0r+iyomtxfB39RRF6X/uxoCSeB4mqnjy63+vynl593Z/Rc=</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeuserid</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpOrg1Full1_node_id</con:name><con:value>urn:dece:org:org:dece:914</con:value></con:property><con:property><con:name>dlpOrg1Full1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpOrg1Full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>dlpOrg1Standard1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>dlpOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeuserid</con:name><con:value>01006042</con:value></con:property><con:property><con:name>dlpOrg1Standard1_node_id</con:name><con:value>urn:dece:org:org:dece:914</con:value></con:property><con:property><con:name>dlpOrg1Standard1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpOrg1Standard1_useroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>dlporgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpuseroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorRespType</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1462A0EE53D307F4E05307991F0A52F9</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1462A0EE53D307F4E05307991F0A52F9</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>llpaccountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>llpassert</con:name><con:value>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</con:value></con:property><con:property><con:name>llpcsaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>llpcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>llpcsnodeaccountid</con:name><con:value>9109115</con:value></con:property><con:property><con:name>llpcsnodeid</con:name><con:value>9115</con:value></con:property><con:property><con:name>llpcsnodeuserid</con:name><con:value>10060015</con:value></con:property><con:property><con:name>llpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>llpnodeaccountid</con:name><con:value>910600</con:value></con:property><con:property><con:name>llpnodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>llpnodeuserid</con:name><con:value>100600</con:value></con:property><con:property><con:name>llpnode_id</con:name><con:value>urn:dece:org:org:dece:910</con:value></con:property><con:property><con:name>llporgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpuseroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>nickname</con:name><con:value/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>node_id</con:name><con:value>urn:dece:org:org:dece:910</con:value></con:property><con:property><con:name>orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>portalaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>portalassert</con:name><con:value>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</con:value></con:property><con:property><con:name>portalnodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>portalnodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>portalnodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>portalorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>portaluserid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Basic1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>portOrg1Basic1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeaccountid</con:name><con:value>09109110</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeuserid</con:name><con:value>10060410</con:value></con:property><con:property><con:name>portOrg1Basic1_node_id</con:name><con:value>urn:dece:org:org:dece:10</con:value></con:property><con:property><con:name>portOrg1Basic1_orgid</con:name><con:value>10</con:value></con:property><con:property><con:name>portOrg1Basic1_useroid</con:name><con:value>0604</con:value></con:property><con:property><con:name>portOrg1Full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>portOrg1Full1_assert</con:name><con:value>zVdbc6rKEn73V1iuRyvhYjBqRXcNV1FRQfD2hjACiqAMCPLr96DRpa6s2znn4VQllUzTl6+7v5np+fgn2/nlI4yQFwbtCvVKVsowsELbC5x2xdDFl0bln07pA5k7n24BhGAUY82yzLcrYeRQLxRJ1kmSwmYyQgmUAxSbQdyu0Fj2UvzUdYpq1ZjWG/1KUfSyUp5eg9FFMBw+QK2z+3YliYJWaCIPtQJzB1ErtloToAxaWLNlXmNXOp9ozgEjovNho9bEcwIzTiL46dBG7Yobx/sWQaRp+prWXjFagiZJkiCbBNaxked8q+DMPo2hLQfr8LLmzCAMPMv0vdwsIiowdkO7DHwnjLzY3f3ENUVQZOH6BWbWi0W9Bd8qxPcAZ3R/6OkBZITMF+Sa1NWZBtcwwj2CZUOT25Vvj2246OiRGaB1GO3Q0/rvQsPgCP1wD+0XdM3giuLPPX5Rls4HtFpyYPkJ8o5wWPR6b1oQlccRXHvZwEOYQTYqn/tcztCVJtD6m9J/EPc4MWzii8rwngNR/J/05b4nFy9T009gJ+0zap8Ppsv5CG61BkMKS0uujY6qrLbPEO6VL6BuLf1cPxPyxp9Po/5o3hhHezMSbFrYr8Q3imOkRDw2WLCOjNQwxMNSrLNruqYv83GQV+u94xzOfDYK3+r0Pp9JAzvYjiHi4agkxtVZwz46+oqMhnZ/3XPZal/prmpUviGimXdikkZSn1szu3ta0MJ40m+qo4aMVu9cD6X5xngnmkBLxKWz8Usx6R0HTkNuMPBtHSnyca22v+d0n0ORVx+ezkkW/88ZssmbsXlbcMV2X+NtGMOOIst8knMcOE0ckMoscPDvBgxZZ3twt57UTEkWqKoIeI71N8JAAVsJUIbAugo3nSoZl4Me6wyn2FAvAX/JKpqQ8umCn6pqV0hd3Zamp5XkJ8tcGCoAnY05VxE0YcpruqAoILzIMoVfSdlGmSiprC74EnbAC9k+t6VmDKXMs2iZUSYMvZgwyXI+xXLxNNgNjytd8BVOkbjJQZrIqxqvCj2gLWYWLSbYNh/s9mFpYbB3Rr093AAopiSOCXJF36aKbtBDXjPPMv1RpshST1FRyqnnrKSSkPamRv69FhyrcPZOyAQdjC+1sHROHJLLeQ+ZMyZQNJDyztm4L6T26ApEUcm0xF1qNRBSTdCMoahociqAs4wXUh+t6KG7ktyjVVOzng42943hVGEmBvh7oB2tE3MomZIIVrspZdU01/IYz5yHqbNspLy66PXDpYzdDIEqsKwKMCASFKnh+rNgwE6Z0d5r0h4crMVwB92opFBhf3vMM7Lh1UbOeDhj+PX2fSx545ppu4TsW/SmtgWyDO0+5aqmrS0IjQ+8vD7qG3PoRYs8HjIqVfcaTEmbJcacD/13uztfGP1qtrBUfTSeGLNxnmXDw6aR+3F3xHajSU/hndEQwjGyqgRpiqze4Blu0d1gPq01EjIl4CgsANLGcQQPE5jtbi4k7GqKgMkLFC6VuBknTYAkVQWZ5VV1LbrU2JKmiUENFVmwfVym02Ku+aUlx/K4U6Q5W+4XtEgudWCfnalvguioBlPtzeFSHfr6NAbpfroOKIqU9mp3raSOpRQMsOV0wuJdxJYSGRjmaN8js/60TlIH1fZ7kyYwatmE3mYj11mets5yi5uyuNs6Cx34U/2OYzKm2Kyk6oKmgMZlv2WKbNQ039pl+9XOyngd9+xsHOqsoIkqaWQ8D/oXGdIBnaFFLmwUTjjbl0CmmJgWx9XcRYtg6I10IcGkTe7oslnR5G85VlCs9MixAwdU8Mwx4cIxAawPVbnBU4ipc3s0Sx1WEg7q+3TQa+5JdT7YltiqSDix57+Ngkaq96sz6pS+uxt1NmvKvMtVg/XCra1iljRzS4W97bvkaVs+qL/5J2WgqIzhEf6J3MBDigaloUwFQi3ORaIZJVV2t/R2eV57o43deJIcZcPsI+rkrg6zZroZd+sEEUknJn9fHlVxHlqLyz3yfEjehJdjlLg/YB9O4OsANUlWG2jF12VxD8t8WcSXoxn/fBijXqmzxLNf1mfVVhKgPbQwDGhXOtdJ5IO49/oUkguDtVfYFrPk5fL99fRn7VoraEYwqvzCU5F3WQ40PE2EAYJ62K4gfEgkgXdIMFwX37GV8jCMR8EoAusYRucxlfp6TNVwRnsPFrPs3SwAM3O39+GrFe4I07LCJIgR/gedx42fAnv+ds0B69heoYAKWCzE9YTPozPVbJFXTH+I/eoeJLZXTBW4IHHkWRckj586d7nZ0IKvQWjD1+/du+k9Cx58Es/p3MLYR8+68e32fJB5PPF0AMvxws3v47dnCzzqFuICLcJwL1Bhgh8b0evKy4nb6wD9g58m5sqy4Q+eP33c5I/YktgNJjHeRzvc8/J5+fvHzIM1Tj+GWfyVjPMxwCL4L184Vssq9LB4jP+kYWR/r/oXvr76+Ci85XPDFOOmrZIY/vxLudiw7conuT27chZcD4U7utyXnxc4gQAXE5mv/OD0PPN9DvEZ+ukQP1cGE8uFO7Ny0/V+r/zinftk4c2N9VvxaY/xZ/hRiYMHTqXTpMgmdUfpB1CdH8Q/Sv6LMkbXyf5vCqkJ4v9dEYHIsxxF1/AlVXv7n5TyeXt2/gU=</con:value></con:property><con:property><con:name>portOrg1Full1_nodeaccountid</con:name><con:value>09109110</con:value></con:property><con:property><con:name>portOrg1Full1_nodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>portOrg1Full1_nodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>portOrg1Full1_node_id</con:name><con:value>urn:dece:org:org:dece:10</con:value></con:property><con:property><con:name>portOrg1Full1_orgid</con:name><con:value>10</con:value></con:property><con:property><con:name>portOrg1Full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>portOrg1Standard1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>portOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeaccountid</con:name><con:value>09109110</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeuserid</con:name><con:value>10060210</con:value></con:property><con:property><con:name>portOrg1Standard1_node_id</con:name><con:value>urn:dece:org:org:dece:10</con:value></con:property><con:property><con:name>portOrg1Standard1_orgid</con:name><con:value>10</con:value></con:property><con:property><con:name>portOrg1Standard1_useroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77973</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>146291BBEDFB1BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>146291BBEDFB1BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>146291BBF0711BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:146291BBF0711BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>rtraccountid</con:name><con:value>0900</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>rtrnodeaccountid</con:name><con:value>910602</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>rtrnodeuserid</con:name><con:value>100602</con:value></con:property><con:property><con:name>rtrnode_id</con:name><con:value>urn:dece:org:org:dece:912</con:value></con:property><con:property><con:name>rtrorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>rtruserid</con:name><con:value>0600</con:value></con:property><con:property><con:name>skipRemoveStreamsFlag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases</con:value></con:property><con:property><con:name>streamCreateAPI</con:name><con:value>StreamCreate for LLP</con:value></con:property><con:property><con:name>streamcreateassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreatenodeaccount</con:name><con:value>910600</con:value></con:property><con:property><con:name>streamcreatenodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>streamcreaterequestuser</con:name><con:value>100600</con:value></con:property><con:property><con:name>streamcreateuseroid</con:name><con:value/></con:property><con:property><con:name>streamcreatrequestuser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamDeleteAPI</con:name><con:value>StreamDelete for LLP</con:value></con:property><con:property><con:name>streamdeleteassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamdeletenodeaccount</con:name><con:value>910600</con:value></con:property><con:property><con:name>streamdeletenodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>streamdeleterequestuser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value>9B32C18C248C480C98B697897C21DBE8</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:9B32C18C248C480C98B697897C21DBE8A</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:9B32C18C248C480C98B697897C21DBE8</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>9B32C18C248C480C98B697897C21DBE8</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_01504 - StreamDelete - FUNC - LLASP - StreamAccountMismatch - Stream handle supplied associated with another Account.</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value/></con:property><con:property><con:name>userid</con:name><con:value>600</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_04066</con:value></con:property><con:property><con:name>usernodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value>1462A0EE53D307F4E05307991F0A52F9</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertLLPuuid}</con:value></con:property><con:property><con:name>verifyAPIResponse</con:name><con:value>StreamDelete Response Body and HTTP Header Set Check</con:value></con:property><con:property><con:name>verifyDBrow</con:name><con:value>Verify STREAM_DATA row</con:value></con:property><con:property><con:name>verifyDBrowHistory</con:name><con:value>Verify STREAM_DATA_HISTORY row</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31700 - StreamDelete - LLP - StreamDelete against a stream with CREATED_DATE 29 days past - 200 OK_MIGRATED" searchProperties="true" id="74e0d96a-4c33-4d39-937b-9ffc7df76b4d" disabled="true"><con:description>This test case will verify proper processing of streams that were created within/outside the 30 day limit.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d02ebdd5-921d-4eaf-96c5-4efb2c6bd580"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="f0e2430b-c636-4627-9b46-8ad3332384e8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="a437735e-0edd-40e5-96d6-3f9bd2fccff6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="ee0b1e3b-eb67-4738-b977-ad9ca06af2e1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="82a650ce-1149-4213-adea-d9931282b3c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set STREAM_DATA.CREATED_DATE 29 days into the past" id="88975b5e-26a6-48a4-8727-6a8d4b6e54ed"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
assert a.streamSetCreatedDate(tC.getPropertyValue("streamhandle"),-29) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="f9038d6d-8b22-41c6-933d-6efe75ee1d1c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="5d2cc7e2-2038-4c8c-8b41-255250140f29" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="5f003755-3b44-47ce-b060-e65bfb3defc5" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="436d81a5-a7b8-45aa-8b97-43f79283de8a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="7c0b3373-76ac-4ce1-bc62-2423c03d923f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150403_11311</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">B91C25A7040244FF9AD87DAB2397B49B</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:B91C25A7040244FF9AD87DAB2397B49B</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC947A8DE9656CE05307991F0A2E2A</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:12CC947A8DE9656CE05307991F0A2E2A</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:12CC47A9865E482DE05307991F0AE323</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:12CC4767438B4821E05307991F0A5F92</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP9gCPYEZgg/rQmEBAhfk5uMkBdQYkvGkgn06SuZ4AIh+Wh75dF6tXt292h3LzmKQttrcA6JIIwW1lFIuZdJa1qaUI8hTrhHUQTcE9gbNfo9zy6aHtpd0Qp+q6Y9zSqOgyoXFX1qWqA7ZdfUEZ6Zum1Xqqg6M/EMWVKV8xR8ygWioqbZplXWTUc3S2Oz7JVdz7aKluk+aoUJJFzalipFU3sDteY1bSFE7BnG6+tr8bVUZMncsE3TMn70eyO8gAhp9cttRJmjpP6mj4sBYAhDXMQsMi6NA53LgHsjMqdIpAm8+Qo+8mUapmtInYCT+RctvwuBT2csOzYRZZRgFJKfSOWnD2LBgkIjnLOEiEX0YRCWqQzrsMY6thz6RTMOoZ1p6ABhwpHOFzLzW1tDmEECFEPhfujXtC/nVS27Ok4Q5TOWRPzw+Gd4gK4gZDEEOt+F9QbtfIMnMlW/BOz5FIcpJyu4UWSNEQb+Vk3A55sq3CYwI+se4ZKga67QGfvwjo7bbLTIHLj4mwLtFWdrZILCFOpRz2p0rKpodt3/Wt9vul9XIu6ufL7GrJYB2FfOBHlpt8cjUuYk2t4Q1z4yWUzCZujG3wbNaXlcaY9e2vNlHFa7g++d69aU/PzaHyyiCd883H+7Mx67Md6UJ5OXldsv4XLcvru+pY3Nw6M7uTEnKZkLzPz1sl16HPSrjRCuh3eb4d1z+a5h0tGN6IlNZ3J9vXaC+zZa308DYYXdtv9zPBT956u0chtHXffHwOh8az5cLZ3OeroEvGRg1vJw9vAfynZvfpROnwGL3VHRwG8VOrJKSHzezJSEBPosU/Vi1Xy4ACq0urqleoeXynZHAk/WcHu27GbTuahcOKXqlVO1rbZZLpkXrmt1zEa549q7JrNFcQSxyeiMKF+q5W5p8zlAHHkcaACJvmKp7HRc+8RiCwlU8OlQPgJGOYyZbM/W6gUvUmDTZYUwK3rmMsFmJGxzqRVumBjQQdKYCUgOm3L1oCkPAZOYgOrcithcMpsLmYwlWqUitIorVKSQyt6eqDbr2U61bHASxSEoqEbEgjSEYryIs9QYfPu1ZcfhmXTYHmfP7cPAjv/tciB1AqIUuIrlCmQd4cR0sXaBvAu4cnIK7cw30oColyUTKhKCt0gOf/3miSJITpJWrzG63YHOdf/g7lNz9GT9pYHePzjv/atzWcv3N41P8mkclzJ3FKzIntvd2iEHmGx59R0Rl8gqLovpapVm3HOckpFI84YigWHaxghwKpvyZsxegBq5FeOsCZgDP3Keyw8hpmJBRwIJiORbKWTHM1aeEXC18vjyla/P3acOXMrUCViLU7JmKNc1hfjTjQ57WOlJ8a38vLIk+F2xE7b2/Mg45cYjCJ2rk5p+mw94gZk0S2TfZsm+8VMGTjk/FOZJzrEISahpKuDjPwXVkGsawpilVPgtLRPsD4kMp9jE4P1Wemcmm0P5Ykr+fzPVSUYBDHKd5SSzr/YLTz0BOt8bNG9O38+ahlutlNty1rT2Z027ZJfypBygq78Tv5fs5emY4/Vf</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC4767438B4821E05307991F0A5F92</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC4767438C4821E05307991F0A5F92</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC47A9865E482DE05307991F0AE323</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC47A9865F482DE05307991F0AE323</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>12CC4767438C4821E05307991F0A5F92</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>B91C25A7040244FF9AD87DAB2397B49B</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:B91C25A7040244FF9AD87DAB2397B49B</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC47A98666482DE05307991F0AE323</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>12CC4767438C4821E05307991F0A5F92</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77986</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC47A98666482DE05307991F0AE323</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31701 - StreamDelete - LLP - StreamNotFound - StreamDelete against a stream with CREATED_DATE 30 days past - 404 Not Found_MIGRATED" searchProperties="true" id="d1486055-35c1-46db-bd0d-fbe6bcf606d2" disabled="true"><con:description>This test case will verify proper processing of streams that were created within/outside the 30 day limit.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b122d833-a12f-44ce-bd02-a6fef7cb4b04"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_NOT_FOUND");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","");
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="e2be6953-e7be-492e-b329-62b5069a9511"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="b15eaab5-90e5-4fc5-ab16-68d0d10d0199" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="69a091af-20bd-4684-8bd9-faa426b72d04"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="85edaaec-23b9-4467-9ea5-606486eee2e3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set STREAM_DATA.CREATED_DATE 30 days into the past" id="1586a83f-2a2d-4797-8f84-96879a223050"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
assert a.streamSetCreatedDate(tC.getPropertyValue("streamhandle"),-30) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="32f0aa95-18d0-4ca6-877f-79b55a0d1972"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="45b4fa21-9988-4beb-b336-6bef36fbaba7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="2363660d-7cd3-4cd9-9a6e-64a72ea1074c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="2d0b791f-7818-44ac-836d-c90ce5b8b23f" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="1f88ee27-5f43-4a39-853f-bd7b02601eef" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_04066</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">280435387B1A42A88784711E49601313</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:280435387B1A42A88784711E49601313</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE552007F4E05307991F0A52F9</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:1462A0EE552007F4E05307991F0A52F9</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1462A0EE54DD07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1462A0EE54EA07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtc9o4EP4rjPsxYyy/EfAEZkggPa5AKJC01y8dIa+NOFsmksxLf/1JJrhASI62nzxar3af3X20uzcCp4kTtIUALmnGKps0YSIopE0j5yzIsKAiYDgFEUgSTNqDfuBUUYD3V4xKr9M0vrt2rYGRb5szL/JMD+qe2aiDa3q4gULkIYyvkVIVIoceExIz2TQcZPsm8kzHndoocOuB41dryPlmVJ6AC2VbqVTVrR2ojWgacymXgWWt1+vq2q1mPLYchGzr66A/IXNIsdG62UVUOOKtF31SDYFAkpAqyVLrxjrSuQlFMKExwzLn8OIrfMsXslDDUjqhoPEHo7wLYY9FWXG8wyxjlOCE/sA6PwOQ8yystJM441TO0zeDsJE2bMKGmMT22AfDOoZ2oaEjhFxgU8yx/WJrDBFwYAQqj+Ne0/hwWdWKq1OOmYgynorj46/hAbaCJFtCaIp9WC/QLjd4JlOtGyBBj5EkF3QFQ03WJSYgXqoJ5HJTlRGHiG76VCiCboRGZx3COznustGhMQj5OwU6KM7OyBNOcmit/d4/f7uNvvzqfx7eLnqz7rI74MP6LRHNAsChciEoS7s7npCyJNHuBkkeibuIc9e98mIX9z8jnj5dy1rsfAVoMMmHyxFZJdPl54+fxt9Gm8enL9ut+GFjmw7nt4/1Okqv7PlwEw8+ku3kCazI5tHDwh91+1b3RzvrfMEPt4N/t9nzsLuN3JoV39ecbw/jK26RbNGdLKYfB7X67I7LoQ8dhOOUDLsbP4147tNN7a/41r2KPskhGpFmGc4B/mPZ/s1P8tkCiNwfNQ16ncq9qhKW7zczLaGhGRWqwVI3HyGBSaOlb+neEeSq3dEwUDXcnW2v5rRRt+t73Ta6vve6yHfRdaNh36O279w39k1mh+IE4l3GIqp96Za7o837AEkaCGAhcHOV5arTCeMdix0scaXHxuoRZEzANNPteTZTwXnrxCfPMF9tGYrk7Hm7MCrDTD6wB96OJPDjluweteQxELqkoPu2prVQvBZSpeIZr3KZ2NUVrjLIVWfnuskGjlf3LUHTZQIaqJVmYZ5AdTlfFomxxO7rmJiIQjruTovH9mZYp//2GVA6IdUKQsdyC6qKcGa22PtAXgVcOzuD9ubbeUj1u1LplJySHZLjXz9ZoulRUqTTb09Ge9Cl7i/c/X43+W7/poH+Hzjv/6lzVcvXN6138mmdlrJ0FK7ogdv90qHGl2p4rT0Rn7Fdfa7mq1VecM/zXIsr85YmgYUcawIkVy15O83+BWaVVqyL5l8J/MR5KT+GmMs5m0gsIVVvpVIcL1h4JiD0wtNTb3xz6TZ15FKlTsJGnpPdJWpZ04jf3edIQLSeEo/UZ53x8GfFztg68KPiVPuOpCzWJz37tm/wgmTKLFVdO+OHxs8ZOOf8WFgmucQiFaFmuYS3/1R0O24amJAsZ7LXMQrB4YgocMrtEoKfSq/MFFOoXEvp/++lJi0oQEAts4IW9vV2EegnwOKDMfPi9Pyk6XTemzTH6FqvxK8lB3k65XjrPw==</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE54EA07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE54EB07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE54DD07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE54DE07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1462A0EE54EB07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>280435387B1A42A88784711E49601313</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:280435387B1A42A88784711E49601313</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE54E507F4E05307991F0A52F9</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1462A0EE54EB07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77987</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE54E507F4E05307991F0A52F9</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32010 - StreamDelete - LLP - Can delete Stream created by LLP-CS of same Organization - 200 OK_MIGRATED" searchProperties="true" id="3fd84ad7-e56b-44bd-b7c6-85f3423501b1" disabled="true"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="720ad5ad-7cb9-4991-b8f9-ca8bf2c8658c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="49f6f8a3-449e-4d6e-89a4-803aed3ee23f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="4599b981-2daf-46ae-842a-12ff458e20db" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="e2f0f04f-c68b-41ef-90b7-b49994594562"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="230cabfe-b9b4-4bc8-906f-f31992318a76"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information for LLP" id="624a9a5c-61e6-4f85-bb9e-88d6cf1802b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp_cs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("expectDBCreatedByNodeType","llp");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="42d29160-6b0f-4cb1-9bf6-ed805c381965"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="1c7da736-e8b6-4fcc-b159-d9c4272f373e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="2484fc23-2526-43a5-94e1-cad2de09df91" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="bac0d83d-0d54-4282-ae23-b4b247c78e8a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f8e880ff-9da5-4e60-b233-d6f86a24f9b3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>12CC97BB44B2653EE05307991F0AEF72</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbU+JKEP4rVPY55AohKaEKQY/xoLCAuuuLNU46MJpMIDMJ6K8/MwGyBNHD7j6lptPz9deX6e4zhuLI9LqMQcpJQmvrOKLMK6RtJUuplyBGmEdRDMzj2Jt0bwaeWdc9tLui1Px+W3lqmlYYuEFLtQAc1cZmqKKmY6uBHQS6YZhgthyhylgGPmUcUd5WTN1oqLqt6tZUb3q64TWsesNxH5XaPaRMYAuVuq5sSa1ZW5lzvvA0bbVa1VdWPUlnmqnrhvbjZjDBc4iR0jnbeFQYSjtbfVwPAEMU4TpOYu1Mq+icBcybkBlFPEthayv4zJau6a4mdAJGZt+U8i4EPg2T4thDNKEEo4i8IxmfG+DzJKh1o1mSEj6PP3XC0CWwCmusYsOm3xStSu1EoArDlCGVzZGxxRpDCClQDLW7sd9Wvp2WteLqNEWUhUkas+rx9/gAzSFKFhCobOfWltrpgEci1TkD7PkURxkjOdzKYl0gDGybTcCnQ9VGKYRkPSBMFOiaSXbaPr2D4yYafTIDxv8kQXvJ2YDcoyiDzl3D0hs/E+a80jTM3h7ykX1rD7NlT7trFwT2lQtBmdrN8aAoyyLa3BiFV/7NozX4eX1rLB5cuOtPHCfoL2fvgc1agIbz0dRGxnX4qK+mrbz70jt/bNzHU37T7y/z8e382X3wVwQeXkPt3Vy5ZDS5+KETTFq3w0U297/rjfzmX/v97fFnkDNHhOU9anZXyV3DzKPzqWYN06VhzUyNxK/308fxpY6vrppDvznqwejaeP7HuL+/c74vDeeiXbqzx78q2735Sfb8ApjvjrIM/H7tUmQJ8a+bmZSQQA0LVW8hmw/jQLnSkbdk7/Ay0e5I4Ikcbs6G2evZTtdtNbuG3TL7F7pImeO6xqXevbBMa9dkNiwOKPYSGhJpS7bcTdl8TRDHHgMaQKrmSSY6HVO+QOwjjmo+HYtHkFAG00S05/f5i/v6/MxnjaZLs9Zq5kY5jp2VUrtN+JAO027IIa22ZLfSkseAyYKA7NuyrJmoa8ZFKJYoz3hk1HNUp5CJzp7KJuuZdquhMRIvIpBEtTgJsgjqi/miCIzGNl9TRZgV0vHFtHhsn7p1+G8XAaETEKnApC/nILIIR2aLvXPkg8PNozNoB9/NAiLflQgnTwneMKn++lUlsjzKEukPupPRjnSp+xt3n3qTJ+MPAQZ/YXzwt8ZFLj/e1L6Ip3aYytJQkJM9s7ulQ4wv0fA6u0JcIqO+rGd5nhW1Z9uWlgp4TRaBppvaBHAmWvLbNHkFqpUo2knzryR+YLyUVylmfE4nHHGIxVupFccTFp4JMLnw+OKNr0/dpiomReg4rPkxWS8Sy5pk/OU+hz0s9YR4JD6rJA1+ZewI1p4d4afYdzihM3mSs+/tk7rAiYAlomsn6T74MYBjxqvCMsglFy4K6jnj8PmfmmzHbQVhnGSU+32lEOyPiIInf1uA90vpA0wxhcq1lPz/XqqSogQwiGWWkQJfbheefAJ0tjdmtkYPJ43rnJ/b9rnRbFgXlUlz6ZhlUCrsOh/EHyV7cTqs8c5/</con:value></con:property><con:property><con:name>assertId</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>12CC97BB44B1653EE05307991F0AEF72</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:12CC97BB44B1653EE05307991F0AEF72</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>12CC47A986A1482DE05307991F0AE323</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:12CC47A986A1482DE05307991F0AE323</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>12CC47A986A2482DE05307991F0AE323</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>12CC47A986A2482DE05307991F0AE323</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp_cs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77999</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>12CC97BB44B9653EE05307991F0AEF72</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>12CC97BB44B9653EE05307991F0AEF72</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>12CCADFFE4EC4899E05305991F0AE8FB</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:12CCADFFE4EC4899E05305991F0AE8FB</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>82F85777D156428E98A9F3D01423CF38</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:82F85777D156428E98A9F3D01423CF38</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:82F85777D156428E98A9F3D01423CF38</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>82F85777D156428E98A9F3D01423CF38</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150403_113330</con:value></con:property><con:property><con:name>useroid</con:name><con:value>12CC47A986A2482DE05307991F0AE323</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_33001 - StreamDelete - LLP - Standard access user can delete stream created by Full user - 200 OK" searchProperties="true" id="5cd38c34-1cd4-4a57-ad97-99cbfe2adfca" disabled="true"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7a1e97c7-45fe-489f-83e6-df61217b427a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="51d20ea9-3245-4f6e-9482-7fef0b0a8227"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9e7d0085-3ba1-4b84-9f1d-37597e61eb88"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="bdb811b1-c969-40b6-8fe2-1e3cfe8cd06d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="b42dad4b-17db-4321-a4e4-bb19291afe85"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="ffb06d7c-fd5d-42d9-a21e-1d3e1ca545f8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="6dfc0f79-82d2-4cf7-9c8b-e31f91a4af6e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information as Standard User" id="fc9660df-2ddd-4429-9620-054dd38d3cae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="b7003503-cf35-4183-b13e-1e1fd530f095"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="42dea10e-a5e6-4830-bc3c-0a21e7865169"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="dae8f742-f22f-4ca1-ac54-941a45ad3b90"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="6b1b092b-70a5-4b90-b186-7941ec9c7798"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="160f2d96-76f2-48c0-99d8-38828cfbcf20"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>ashwin_user_create_20131216_050446</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EDA65F043B6BF657E0401F0A059963AA</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:EDA65F043B6BF657E0401F0A059963AA</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EDA65EE755C633B3E0401F0A0799477E</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:EDA65EE755C633B3E0401F0A0799477E</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B65694912BCFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>EDA6323694CCD016E0401F0A05995096</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>EDA65F043B6BF657E0401F0A059963AA</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:EDA65F043B6BF657E0401F0A059963AA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>EDA6323694CCD016E0401F0A05995096</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>78004</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_33010 - StreamDelete - LLP - Full access user can delete stream created by Standard user - 200 OK" searchProperties="true" id="05439f0c-573a-4cd6-bbdf-a73e3efd16b7" disabled="true"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3d1481b5-59a3-46a8-a06a-7bacb9a9c789"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeletedUser",null);
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="7ba9988b-874e-47c1-8145-cf490eec0234"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="12dbf7c2-b77c-4b95-a4a8-d57ec6b0f9a9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="c28313f9-1e45-4528-baae-4bf46ceb9d61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="ba05f821-8642-48e1-a0ff-0e2652cff0a3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="10a2ce42-b3b4-4529-beea-843ff773e78b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="334c9b82-cbf6-4895-b49b-f8a0871747c9"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information as Full User" id="c53b20e7-87f0-4c2e-b0fe-1ab99035ca18"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="f39354f9-da82-4695-a014-8904af76cc2a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c587e7d0-e5d5-48f5-8475-6d4f1667138f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="94584698-b2dd-43ec-8a16-358cff501bbd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="6414168f-a31c-4f39-ad52-88b57762b050"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="c0fa62a3-ab77-4188-bde0-e81285c4297e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>ashwin_user_create_20131216_050446</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>E749F8F299F47287E0401F0A07995CD3</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>E75A688A7B214DAAE0401F0A059941B2</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:E75A688A7B214DAAE0401F0A059941B2</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>78006</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31752 - StreamDelete - LLP - StreamNotFound - StreamDelete against a stream with EXPIRATION_DATE 1 year into the past - 404 Not Found_MIGRATED" searchProperties="true" id="ae5a2294-367d-4ee9-953c-fde8c22a40ad" disabled="true"><con:description>This test case will verify proper processing of the STREAM_DATA.EXPIRATION_DATE value</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a3790d29-953d-484e-8d4d-037856a8b4f7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
//tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_NOT_FOUND");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="ff19690c-e42f-4dfc-ae9c-610f7bdaf3b3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="15fc2d67-40f4-4577-a271-9a96f44c0f20" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4d8b4b9d-0b50-4aed-8f90-40d0144d33f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7e1b2ac5-0e79-4c83-8fc7-2600a01518f2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set STREAM_DATA.EXPIRATION_DATE 1 year into past" id="a2e9ba41-6c6c-4e8d-893a-898bf70d5ef8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
assert a.streamExpireYears(tC.getPropertyValue("streamhandle"),1) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="dba1eb43-0571-43f2-812c-4d675b0429fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

//tC.setPropertyValue("expectDBDeletedBy", "1");
tC.setPropertyValue("expectDBDeletedBy", "221900");
tC.setPropertyValue("expectDBStatus","deleted");
//tC.setPropertyValue("expectDBDeletedBy_" + cnt, "1");
tC.setPropertyValue("expectDBDeletedBy_" + cnt, "221900");
tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete1" id="e0046ab6-c6c7-4ae0-902d-b635570b96e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_NOT_FOUND");

//tC.setPropertyValue("expectDBDeletedBy", "1");
tC.setPropertyValue("expectDBDeletedBy", tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("expectDBStatus","deleted");
//tC.setPropertyValue("expectDBDeletedBy_" + cnt, "1");
tC.setPropertyValue("expectDBDeletedBy_" + cnt, tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="dad31511-c74c-4b13-b1f7-5a6b85e6214a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="b9250eb6-3308-49e9-b15d-767aa6ad0887" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="9229bba1-87b5-49e1-bf8d-3860a88ccbf1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="3cfcae93-d5c5-4fef-a26d-76e492938a7d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_041111</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">519405D2BC6747DA9162A5B2AF39F4D9</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:519405D2BC6747DA9162A5B2AF39F4D9</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE55CD07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:1462A0EE55CD07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1462A0EE54DD07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1462A0EE54EA07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtc9o4EP4rjPsxYyy/EfAEZkggPa5AKJC01y8dIa+NOFsmksxLf/1JJrhASI62nzxar3af3X20uzcCp4kTtIUALmnGKps0YSIopE0j5yzIsKAiYDgFEUgSTNqDfuBUUYD3V4xKr9M0vrt2rYGRb5szL/JMD+qe2aiDa3q4gULkIYyvkVIVIoceExIz2TQcZPsm8kzHndoocOuB41dryPlmVJ6AC2VbqVTVrR2ojWgacymXgWWt1+vq2q1mPLYchGzr66A/IXNIsdG62UVUOOKtF31SDYFAkpAqyVLrxjrSuQlFMKExwzLn8OIrfMsXslDDUjqhoPEHo7wLYY9FWXG8wyxjlOCE/sA6PwOQ8yystJM441TO0zeDsJE2bMKGmMT22AfDOoZ2oaEjhFxgU8yx/WJrDBFwYAQqj+Ne0/hwWdWKq1OOmYgynorj46/hAbaCJFtCaIp9WC/QLjd4JlOtGyBBj5EkF3QFQ03WJSYgXqoJ5HJTlRGHiG76VCiCboRGZx3COznustGhMQj5OwU6KM7OyBNOcmit/d4/f7uNvvzqfx7eLnqz7rI74MP6LRHNAsChciEoS7s7npCyJNHuBkkeibuIc9e98mIX9z8jnj5dy1rsfAVoMMmHyxFZJdPl54+fxt9Gm8enL9ut+GFjmw7nt4/1Okqv7PlwEw8+ku3kCazI5tHDwh91+1b3RzvrfMEPt4N/t9nzsLuN3JoV39ecbw/jK26RbNGdLKYfB7X67I7LoQ8dhOOUDLsbP4147tNN7a/41r2KPskhGpFmGc4B/mPZ/s1P8tkCiNwfNQ16ncq9qhKW7zczLaGhGRWqwVI3HyGBSaOlb+neEeSq3dEwUDXcnW2v5rRRt+t73Ta6vve6yHfRdaNh36O279w39k1mh+IE4l3GIqp96Za7o837AEkaCGAhcHOV5arTCeMdix0scaXHxuoRZEzANNPteTZTwXnrxCfPMF9tGYrk7Hm7MCrDTD6wB96OJPDjluweteQxELqkoPu2prVQvBZSpeIZr3KZ2NUVrjLIVWfnuskGjlf3LUHTZQIaqJVmYZ5AdTlfFomxxO7rmJiIQjruTovH9mZYp//2GVA6IdUKQsdyC6qKcGa22PtAXgVcOzuD9ubbeUj1u1LplJySHZLjXz9ZoulRUqTTb09Ge9Cl7i/c/X43+W7/poH+Hzjv/6lzVcvXN6138mmdlrJ0FK7ogdv90qHGl2p4rT0Rn7Fdfa7mq1VecM/zXIsr85YmgYUcawIkVy15O83+BWaVVqyL5l8J/MR5KT+GmMs5m0gsIVVvpVIcL1h4JiD0wtNTb3xz6TZ15FKlTsJGnpPdJWpZ04jf3edIQLSeEo/UZ53x8GfFztg68KPiVPuOpCzWJz37tm/wgmTKLFVdO+OHxs8ZOOf8WFgmucQiFaFmuYS3/1R0O24amJAsZ7LXMQrB4YgocMrtEoKfSq/MFFOoXEvp/++lJi0oQEAts4IW9vV2EegnwOKDMfPi9Pyk6XTemzTH6FqvxK8lB3k65XjrPw==</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE54EA07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE54EB07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE54DD07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE54DE07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1462A0EE54EB07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>519405D2BC6747DA9162A5B2AF39F4D9</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:519405D2BC6747DA9162A5B2AF39F4D9</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE54E507F4E05307991F0A52F9</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1462A0EE54EB07F4E05307991F0A52F9</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77992</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE54E507F4E05307991F0A52F9</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e0046ab6-c6c7-4ae0-902d-b635570b96e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_33002 - StreamDelete - LLP - UserPrivilegeAccessRestricted - Basic access user cannot delete stream created by Full user - 403 Forbidden" searchProperties="true" id="0d0e85ac-b3fa-4dba-bc52-789d5e607829" disabled="true"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d6988314-5312-4a03-b61a-4d43078a8057"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","USER_PRIVILEGE_ACCESS_RESTRICTED");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="f93d6e4f-548d-445e-b3e4-e9ee80611291"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="788efcdf-c689-4688-89e0-5c4659f7eb38"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="2706eda8-6801-4e44-ab56-49fe0bc7b8d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="bb32481f-aae9-414b-81cc-dcfd9ac338f6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="dc336908-9d79-4058-bbb1-a8e0b5febb91"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="370fe0de-967d-4c89-b21a-334d3fe02348"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information as Basic User" id="50a2d4c8-2937-4159-be52-b4ee02c43fca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",tP.getPropertyValue("UserName_BAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userBasic1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="ca63a55a-9410-49f0-b987-b5eb69ff018e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c5c2d005-0eda-46de-9d55-845be35998a7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;

//assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="e47d8a2e-39e2-42c2-95c9-2241a27769c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="3068d13c-defa-4878-b0ae-e074f65d4c08"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="e3b034ef-77b3-40d2-b3bf-96ff5186f223"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>ashwin_user_create_20130926_063112</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>USER_PRIVILEGE_ACCESS_RESTRICTED</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E75A663052DDF313E0401F0A07990CE0</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:E75A663052DDF313E0401F0A07990CE0</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E7584525C01EAE2AE0401F0A05997A15</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:E7584525C01EAE2AE0401F0A05997A15</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E749D10097CFD8F7E0401F0A0599455F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:E749F8F29A747287E0401F0A07995CD3</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZNc+I4EL3Pr3B5jikjf4GxK1DF4jDrjSGZmEAml5SQBShjy2DJQPLrVzIxAUKyyezJpXar+6n76bXOGUwT0+swhnNOMqoEfkt9cFwXwUkj1iYTXddsAzqa65q21oTNacOa2rHu1FUlYKzAAWUcUt5STd2wNN3VzMbQsDzd8qxmzTbr96oywjkToYVLTVeVTZpQ5pVpW2qRUy+DjDCPwhQzjyMv6vRDT3h6sMKkts+3KMuEeXvO+cIDANVijHCSoBrKUnAODnzOY+ZFZEYhL3L8kjNmLfVl73q9rq2tWpbPgKnrOtBdIHxiRmbf1fa3ajOOAzrNtusupBklCCbkGUpQfcznWax0klmWEz5P3wltAEOXoTW8QRoybPpdBa8JSnSfjHQAMmdQY3NoVMFu8BTnmCKs3N4ELfX75zq43TvMIWXTLE/Z0fprkDBd4SRb4Fhj1ckqdJ+PeKJc7XOMvICipGBkhQeSJguIMFOuczwlm5AwQb6YKWX7lQ2rGIbRV1pyDvZxCtjgRGV8MsOM/0m/9nu1jTKCSYHbo+uxNQzHSzckFnCe7kHAf6SZdebEzVYJYd95C2rX6pf1MVF3vHrZ1At/XA4i5/n6bv2re2VPF8n9crx6grPJP/YlHZzFP0LXGvFLyHI8W59dNc3m7c/nNcD9O/5or9zR49geR26K1nrxbVQvrIZh/+LFTdiPdBTOHqPQ8hv9Tn/A4iU8s2AyvJj8Ws9+/z2e+VbWi4zw7mxdbPr1x5+dvKN32cgFj80Fa3y7WzhBfD8PR6vo+nmEjUuot17PtH+GQ2MlB1ExecSIV0tJjcBXeqJfkH8sLdJCYm1aunoLqU+MY8rVttwlZcUrhPiQ2BPN3K4vHNvtNXum23Fsx2w6F7qtGz29o4ubVu/6VqU/WxRHELsZnRKZSyrslj8fA0SpxzCNca6tsgLNMVM/iOhDDpWA3oiLkVGGh5lQ8GFyZkeNxmC81G7N0F9rdODn6fBnrRBRp0QwRlUGGb+iV3lnynF+qN+NA/2+wYgsCJYiL5nOBNUZF0VZwlXBE6O2gjWKCzEGcqnEnmk364CRdJFgCRmkWVwkuLaYL8oSAbb9mhpErLTeXAwfgqhb3sJ3D3n8r6qH8ImJdGDyPH9h0VN8YhiZ1WHeHNo+ObSq8J0iJvKyieLynKAtksNfr5yRZNkRxg870XUFeuf7hb0P3ejB+MMA4f8NIHrydif4oCbguB27RPGK7KWthrqYU0LJ2hWhlrC2rBWrVVFSyJEqnYvwwAC6AyKMCiG1T8PsN6ZgFwJ8asrtUB9l3tkP8RV8TiMOOU4F4ZVy+YknToSZfOIE4nJtPvt+Okgp6sbxhp+ydRPxEpKIP3wsIQ9JP2G+Fp91lsev7ToRay+POKd413BCZ3IlZ9rTO6RAmQhLhAhn+X7wUwFOJT807oq8w8IFmyYFx+//UaS6tlSIUFZQHvhqadhX/BInf1pg79XpTZhyqrw8Ezbs3WfCXT+MhPamUN35kv921khJF4TFLkZKLC11I168Ijmd7U2YF4DHQ8Y3dN11uj2/2XsdMnXXtev13q6ABydpvzG/tezV9Pg+tP8F</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value>E749F8F29A747287E0401F0A07995CD3</con:value></con:property><con:property><con:name>useroid</con:name><con:value>E749F8F29A757287E0401F0A07995CD3</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BB290015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>E749D10097CFD8F7E0401F0A0599455F</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value>E749D10097D0D8F7E0401F0A0599455F</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BB291015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>E749D10097E4D8F7E0401F0A0599455F</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>E75A663052DDF313E0401F0A07990CE0</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:E75A663052DDF313E0401F0A07990CE0</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>E749D10097E4D8F7E0401F0A0599455F</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>E749D10097D7D8F7E0401F0A0599455F</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>78005</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>E749D10097D7D8F7E0401F0A0599455F</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_33011 - StreamDelete - LLP - Standard access user can delete stream created by Standard user" searchProperties="true" id="2644557d-20b8-410f-bab6-58aa61395b03" disabled="true"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b7f75b43-b569-4bbd-9e27-507afb38fb35"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeletedUser",null);
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="83b6c63c-84f6-46b8-9552-d522ac246b1d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9cfe2aec-cc8b-42ec-b706-def304edbe43"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="cf32a124-e923-4d32-95b6-f24c9358c0c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="07f1bb89-b05d-47df-8a8f-489b49b6e981"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="12e59264-051a-4cca-9da8-c1ceadbc5925"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="5448608e-2982-415f-88ab-97531875a329"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="8fca5cd8-3cdd-4bef-8cec-d33f4592314e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="536932d3-459e-49f6-8855-17f0020685e3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="b110d155-b2c6-4dfc-a1b5-3b42cce114ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="19ddd4db-52b2-452b-9ee8-da1699c25b04"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="48e5c63a-9864-4a7e-b37d-961570a9682c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>ashwin_user_create_20130926_063111</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>E759B4FA818A894CE0401F0A05997E2C</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:E759B4FA818A894CE0401F0A05997E2C</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>E7584525C057AE2AE0401F0A05997A15</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:E7584525C057AE2AE0401F0A05997A15</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E749D10097CFD8F7E0401F0A0599455F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:E749F8F299F37287E0401F0A07995CD3</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbc6JKEH7fX0GxjynkIqhQ0SovYZdcVo+6MeYlNQ6tToSBMIOS/PozYDBqTE52zxM1TU/3N93ffD3nDIWB4bQZg4STiEperyk/WHNsVWvzhlIz7Zpizg1LmdmmpVi4gS3TQFZ9ZsiSx1gKHmUcUd6UDU2vKpqtGLWxXnU0w7GsSs2o3svSLSRMhBYuFU2WsjCgzCnSNuU0oU6EGGEORSEwh2Nn1L65doSng0pMcut8i7JImLSWnMeOquKKDxiCAFdwFKrn6oHPuc+cEVlQxNMEXnP6rCm/7t1sNpVNtRIlC9XQNE3VbFX4+Iwsvsutb+Vm8D06j7brLqIRJRgF5AXloG6ALyNfageLKCF8GX4QWld1LQ+tQIYVrJv0u6y+JSjQfTHSAciEIYUtkV4GG8IcEqAYpN9Dryl//1oHt3vHCaJsHiUhO1r/GSSgawiiGHyFlScr0X094olytc4BOx7FQcrIGn7lNIkRBiYNEpiT7JowQT6fSUX7pYyVDAP8Jy05V/dxCtjqicr0yAIY/5t+7fdqG+UWBSm0Aj2sPqdDnq1RP+wY9H4wMX/+NNxYj5oFhH3nLahdq1/Xx0Td8ep1E7zoLLVpXP+nOl422Mqo8TMrvKLz1WBzNnmMJ+ZVfXyX/uif1bWlqnkzmE66ic+nxuru9ywcuG41rGlYvU7J6tv4JZhQkoTetPsDrMf+jemHqxl6rF4Ofm7u/f7t5aC/WrF4s+5A1v1x+XKb2e5Z54V1njMTJslT2jEbpIun9579rXN349ZfprfJ81qN/ZV/b5jNtzPtn+HQWMrBKJ09AublMqeG15Nc0S/EP5eW3EJ8ZV64OnGuT4wD5XIr35XLipMK8SG+I5q5XV/UTdttuIZtu9W60ahfaKamu1pbq9u21e1VS/3ZojiC2I3onOS5coXd8udzgDh0GFAfEmUdpXgJTP4kYg9xJHl0KC5GRBmMI6Hgi9shd0eZMnmceleNi8ve01A/my5+V1IRdU4EY2TpV8T7tJ+05xySQ/2uHej3EDCJCeQinzOdCaozLoryhNYpD/TKGlUopGIMJLkSO4bZsFRGwjiAHLIaRn4aQCVexkWJVLb9GgrCrLAOL8YP3qhb3MIPD3n8r6yH8PFJ7sDy83RA9BRODCOzPMy7Q5snh1YZvp36JL9sorg8IXiL5PDXG2dysuwI07tujwYl6J3vH+x96I4e9L8McP1/A4ievN+pflIT9bgdu0T+muylLYe6mFNCyVoloZ5Q5amSrtdpQaF6rtKJCK/qqlZXR4BTIbXP42gFVN2FUL805XaojzLv7If4Ur6kI444hILwUrH8whNnBCx/4njicmVffT8dpBR145DxU7ZuIF5COeJPH0vYwbmfMA/EZxMl/lu7TsTayyPOKd41nNBFvspn2vMHpMCRCEuECEfJfvBTAU4lPzTuirzDwgWbZimHj/9Iubo2ZYRxlFLu9eTCsK/4BU7+HIPz5vQuTDFVXp8JGfvwmXB3cz0S2hsieedL/ttZIQVdMIhdjBRYmnImXrwiOV3sTZhXgMdDpqdrml3vur2G+zZkLFvQx3J3BTw4Seud+b1lr6bH96H1Lw==</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value>E749F8F299F37287E0401F0A07995CD3</con:value></con:property><con:property><con:name>useroid</con:name><con:value>E749F8F299F47287E0401F0A07995CD3</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZc6pME773V1iey1TCoqhYJ6kaVlFRQVzwDmEEFAEZEPTXfwNGY3Jylve7SJlpenmm+5menp/IOgR0DyAEk9SPwroivDasDbNlSMg8d1iKeW51nO1z17a6z12HJqENt4692TTqCkIZVEKUWmH62qBJinomm89U26BavWa316Jf2nR73agvYIKwZ6zyQjbqxSEIUa+K+trIkrAXWchHvdA6QNRL7d4MqKMe1uxZN0iNt59XkFXA5M1L07hHEPaLg7EEgf1iRwfiJ/FJ56eDejPfDa00S+B7TAe9Nt5t8zx/yZsvUeISNEmSBMkSWMdBvvuj8Va7GUNHCbfRdc1bYRT6thX4F6sEpcLUi5w6CNwo8VPv8BvXFEGRpetnWNjPNtUKfzSIjwAVun/09Alkgqxn5FnUzZkOtzCBoQ3rc115bfz4pwJeTY3ECtE2Sg7oy/q/IYLhCQZRDJ1ndNvYDdy/e/wmW28/od1TQjvIkH+C45IlsWVDVJ8mcOsXIx9h7jmoXlW/XqAbwaD9Xyryk3jEiWET32RG8F2I0v+nXI+lunpZWEEG39x951wgLe/LLQHCgnbnovSU7capOX+tIDwqX0HdK/2+/srTO63ejaQ2aDuLlq34rEht0MrZzmczs9taB6O5nQaZ11lbo86wn8XDydlQudghkRPupSCMkbtE/cxkt/uRNlAuMV3LW4TArIuxtenq8mFm07v+ceI7jm20dPncLoK02ZlOjrR+esqUXVcjoBoksomUZBAPBtF+eeq0DCQkWzcSa5NBOEg6KskM0kGc+OZMVF8/9vS4h3JfQ3iuNln+v2JIVrBS677gy0axxaczhW+qogjZhefBeeaCXOGAi/92YMy5+6O392U2JzmgaRIQeC7YiSMV7GVAzUXOU/nFQi34Cxhw7niBDY0aCNacqou5kJvCQtP6Yu4Zjrw4b+QgW1/EsQpQZcx7qqiLC0E3RFUF0VVWqMJGLnbqTM0VzRRq2IEgFvHFkdkUyoVv0wqjzhjanDHZerXAcuk8OoxPG0MMVF6V+dlRnimbpqCJA6CbS5uWMmx7GR3iqGbOuQejQQx3AEo5iWOCi2rsc9WY02NBtyqZ8VmmKvJA1VDOa9Wu5JqYDxbzy0cueE7lnYNYiAaYXnNhG7w0JterAbKWTKjqIBfcyngo5s7kBkTVyLzGX3M1EnNd1OdjSdWVXASVTBDzAG3osbeRvZPd1IqBAXaPheE1cSmF+Huon+wzc6xZsgQ2hwVlN3XP9hnfWkW5u+7mgmYOhtFawW7GQBM5TgMYEAnKreH8c2DELZhJ7LO0D0dbKTpAL6mpVDTcny4F2fWbE3c6XjLCdt+Zyv60aTkeoQSY0M09UBToDClPsxzdJHQh9C/tyXC+gn5iXtIxo1Ftv8vU9GU2XwlR0HH6K3M+fCpMWzMm09l8Ob0Uxfi4616CtD/h+slsoAruZAzhFNlPBGlJnNEVGN7s7zCftjpu0zXgqhwA8s51RR8TmOvvriTs66qIyQtUPpf5JS/PgCw/iQonaNpW8qipLS+yOTVWFdEJcJrO5koPamueE3ClSGu5jk1aItcGcCpnWkuUXG3OPA1WcK2NA2ORgjxebEOKIuVY62/V3LXVkgGOks84fIq4WqaAuTWJB2QxXLRJ6qg5wWDGgnmzmNH7YuK56/PeXe9xUcyHo2MaIFgYDxxTMMWWNc0QdRV0r+etUJV5Uw/sQxFvDnYhGLhmlXFkcKIuaeS8EAQwvMqQAegCmRdxp/JiZV8DhWphWpw2Kw+Z4difGGKGSZs90GW3ocm/cqykWO0zx4480MBXjolXjolge3xSugKFmDYfo2XucrJ41DqL0YCNSW012te4J4lwUz9oTcJubgyfltQ573g7bblkFcHjn8Kt6TU3KUdaF1uDg31H9vW9ELZbwVkdqRoz94ngTO7gMUej2lihQrGZXiSCTbIn7rD2D5dLs0XPD9NZdlLm1hBRZ29zXLL5btpvE0Qin5lLZ33SpFVkm9d75GuTvAuvbZR4bLCfOvBt9Jplmx2009uyvIcVoS7hy9FK/zzGlRLfed5Wqr24nAVRCsO08VZalSNcL8ODnu/08M15XbNcm2mzLZaiOU4S6bZItkhKIgHZYdk2127fZr0rii8Q+Sjc+mWscpi9XtZ/BmgfehtoJTBp/MFTmae6Eup4+ohCBI3otSHSUpNiW02abrdJRmTbZJPmBJomuy1Koim+UR9H6SScJGCbwuRhQO58HZB1aPuxD8sp+n2WQClOxNE6ZWlAvZyslxBmeMxOykm3R7e6TJUAwskOsY0/4O6WxBFKX2IvroaZ327j67fbjrGO45cKqATNQVwt+M1I37wh/mVn9Lej/809yBy/nFlw+tLEt69IPn/6YENJgzsVSJZq3TDfVf/NlKWo9q+mxB8QEV+TcY/knPyHuLeHCZ618ThWvUcQLtrRejm+ZKdTVpWpQ5I0kWD3BEWQxAzaGR4Xz0a0hyFx90D8y6B+x/wl7l3+GV2WeuEsxaf8gBlVr5Z/f6R9ssYJSGGRfifjA/wsK4P/8eVm9+xSD4un+CePEucj79/4eoiDIZcdyg/dclVO2OfP5X0/CT07wl593KSi5NH3d/bfxf4svKfrDiXFrNhkKfz9l3rZffBT2bajLEwVoVEJHjtihTk9x7D3ofSLm2rEfX+zFOi3b5aVOprZHjxYjbuu/3flZ78qvA2xFfIrLK+NAr++cfDQfejA7wC/NOE2QzMckNoMSTHcvQkzLNuieXBP4KedvP0i/lXykNOvzH77Hw==</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>E749D10097CFD8F7E0401F0A0599455F</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value>E749D10097D0D8F7E0401F0A0599455F</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E749F8F299F47287E0401F0A07995CD3</con:value></con:property><con:property><con:name>expectDBDeletedUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B65694912BCFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>E749F8F299F47287E0401F0A07995CD3</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>E759B4FA818A894CE0401F0A05997E2C</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:E759B4FA818A894CE0401F0A05997E2C</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>E749D10097D7D8F7E0401F0A0599455F</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>78007</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>E749D10097D7D8F7E0401F0A0599455F</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34850 - StreamDelete - LLP - Stream delete by dlp_ManageAccountConsentPresent_SameOrg - 200 OK_MIGRATED" searchProperties="true" id="82b2d6bc-232c-4b8b-b345-8c4bcc2b4eaa" disabled="true"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7e993b66-ebaa-471b-aabe-201ac453f711"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("nodeid_rm",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="7013bcd9-6cfc-4026-a8c7-34913ac5f3e0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="b7d4f72c-0ffe-451b-bdfe-0210525c3c72" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="b6ee72d0-2231-4cb1-94b4-1db60b1e4fa1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish manage account consent" id="9053e94d-7277-4c3c-8b54-20f01791244e" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="815f8ab4-7d33-4112-b8e8-e5fbbdebc0dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="386c46bd-a350-4b09-9cc9-3d7b743978b3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="15e7bf7b-3531-4a5b-a482-0867867c2d16"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("nodeid", tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="726257c8-d8c1-4e51-8621-32cab13b6159" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="fcfcf314-3037-40ab-af1b-5826c9ae4fd4" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="341c2897-f611-42f8-90a9-c2fdf01e7b88" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f5222deb-11c1-40c5-a4bc-9cf1039a48be" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>146263FC8039291BE05307991F0A21CE</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPq4E3IFkkxhhmtPuqUX0na6fekYR4Db4EDsBOivXztACpT2sLtPGSuy9En6LOmcoWlkek3GIOEkpqXlNKLMy6V1JU2oFyNGmEfRFJjHsRc0+1eeWdY9tL2ilPxOXXmp2WFoD6ug6nhkq3a16qouqoBq2LVKzXBMw3FBqDKWgk8ZR5TXFVM3Kqpuq6Z1b+ieaXiVatl2rWel9AgJE7aFSllXNqCWrK5MOJ95mrZYLMoLqxwnY83UdUN76l8FeAJTpDTO1xHljpLGRh+XQ8AQRbiM46l2ru3pnIfMC8iYIp4msPEVfuVL13RXEzohI+MzpbgLoU9HcX5sIxpTglFE3pHMTx/4JA5LzWgcJ4RPpl8GYejSsApLrGLDpmeKtg/tREN7CBOGVDZBxsbWAEaQAMVQehj4deXstKrlV+8TRNkoTqZs//hneIBmEMUzCFW2DWsD7XSDRzLVOAfs+RRHKSMZXEuyzhAGtqkm4NNNlW4TGJHlFWGCoEsm0Wm78A6O62x0yBgY/5sC7RRnbeQRRSk0lne/Rm/W5QXRLq0VC//rhSNn/hQG761FPQewq5wLitKujwekLEi0vtG0f0QTC8W1x8XDax87ZH5DHfLj1rbdztCq3FD283pQdZwMt5pL+lrr9XqP4XD+nD1DdHff/fmcNR8mrlZBb/MnZ/AaBtdBq2u+zzCMb7sr0l9l7sOF/ZolIfPTYEj6j4O3d+ozx45I1k3SzjO5u6wFb8Ebo5eV/q+u4Q8DNEhaDLnPduo39a5Om/HFY1uvF+Hs4N+Xbd98kA5fAfPtUdLA75R6okqIf9/MpISE6ihX9Way+TAOlCsNeUv2Di8V7Y6Enqjh+mzYVdM1Wq1utV01Wp1uV69Yes11jZ7e7NpWb9tk1igOILZjOiLSl2y5a9p8DxBPPQY0hETN4lR0OqZ8Y7GDOCr5dCAeQUwZ3MeiPRvJfKRXzdVkmI5X1WhFh9PErTmsopSuY35Db5LmiEOy35OtvZ48AExmBGTjlrxmgtiMi1zMUZbyyChnqEwhFa09kV3WM22nojEynUUgkWrTOEwjKM8mszwzGlt/TRVhlksH3fv8tX0Z1+G/bQqETkikApOxtECUEY4MF3sbyKeAq0eH0NZ8Mw2JfFginzwheI1k/9cHTSQ/Co50rprB7RZ0ofsHd1/awYvxlwau/sH51b86F7X8fFP7Jp/aYSkLR2FGdtxutw4xv0THa2yJOEdGeV5OsyzNuWfblpYI85okgaabWgA4FT15dR+/AdUKK9pJA7AAfuC8kO9DTPmEBhxxmIq3UsqPJ2w8ATC58fjikS9PXaf2XIrUcVjyY7J2JLY1ifjbhQ57WOoJ8a34LOIk/KjYEVs7fkScYuHhhI7lSQ6/1Re8wLEwS0TbjpNd48cMHHO+LyySXGDhglDDlMPXf0qyH9cVhHGcUu53lFywOyNynHw1A+9D6ZOZfAwVeyn5/8VUJTkFsNiBhX5uX64XnnwCdLwzZzZOD0dN1eq1Hd1y5MzZHTWm0e4WSdlD1/gk/izZydMhxxu/AQ==</con:value></con:property><con:property><con:name>assertId</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>146263FC8038291BE05307991F0A21CE</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:146263FC8038291BE05307991F0A21CE</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>146291BBE6C61BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:146291BBE6C61BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>146291BBE6C71BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>146291BBE6C71BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeid_rm</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77999</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>146263FC8040291BE05307991F0A21CE</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>146263FC8040291BE05307991F0A21CE</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A0EE51D007F4E05307991F0A52F9</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:1462A0EE51D007F4E05307991F0A52F9</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6CA499CEB3444E9F878C2875F3C34352</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:6CA499CEB3444E9F878C2875F3C34352</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:6CA499CEB3444E9F878C2875F3C34352</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>6CA499CEB3444E9F878C2875F3C34352</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_035445</con:value></con:property><con:property><con:name>useroid</con:name><con:value>146291BBE6C71BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9053e94d-7277-4c3c-8b54-20f01791244e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b6ee72d0-2231-4cb1-94b4-1db60b1e4fa1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34851 - StreamDelete - LLP - Stream delete by dlpcs_ManageAccountConsentPresent_SameOrg - 200 OK_MIGRATED" searchProperties="true" id="4799c8fd-3913-47d0-b51f-30209a56c0c6" disabled="true"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="04cd7087-400a-4fb2-a111-43cc8c23d1b5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="7fb8749e-a7dd-4632-9ff3-bc4d7e09c89e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="96b55987-6624-4964-bcdd-cd3794833da6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="e10761b3-b42f-42e6-ad33-be560893a2ce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="ddb0047f-a98f-4cc8-a95d-c7d3677e963f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information for DLPCS" id="1b863e37-b542-4b3d-bc8a-8893764302c3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="06e7f5d2-cb2d-478e-8f91-7567779f89c5" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish manage account consent" id="6897c8cb-8937-4e98-b6f5-e0c473190f76" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="c896b994-800d-40a8-beda-0f026034e2b9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="94ff727e-fca8-4caa-8eef-3920bffe2a75" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="9e89c2b2-7b42-410f-b442-af4438b0a3e3" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="11f6fe45-b6f8-4eb2-862e-cfd9f1442c8b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="fd268614-5a32-4191-a647-4cabfd816f5d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_035445</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0141CAE29A604512BB4870A0F8BCD5FD</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:0141CAE29A604512BB4870A0F8BCD5FD</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A08306337E2DE05307991F0A97E4</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:1462A08306337E2DE05307991F0A97E4</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1462A08306097E2DE05307991F0A97E4</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:146263FC84E2291BE05307991F0A21CE</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMb4D9gRmHCCnpBAykKQ5vHQUeY2V2LJjyUD49Ucy4AIhObR98mi9+vbbi3b3gqEkNj2fMcg5SWltlcSUeaW0rRQ59VLECPMoSoB5HHtTfzT0zLruod0VpTbotZWfuolD02yA6oDTVG1wLPXJCm1VD1ELXKfVEgpClbECBpRxRHlbMXXDUXVbNa07Q/fMpmcbddNxZ0rtAXImsIVKXVe2pFasrUScZ56mLZfL+tKqp/lcM3Xd0B5HwymOIEFK52LjUWko72z1cT0ADHGM6zhNtAvtQOciYN6UzCniRQ5bW8FHtnRNdzWhEzAy/6JUdyEY0DAtj11EU0owiskayfiMgEdpUPPjeZoTHiUfOmHoEliFFVaxYdMvinZI7UygA4Y5QyqLkLHFmkAIOVAMtfvJoK18OS9r5dW7HFEWpnnCDo+/xwfoAuI0g0BlO7e21M4HPBGpzgVgb0BxXDCygBtZrBnCwLbZBHw+VO02h5CshoSJAl0xyU7bp3d03ESjR+bA+J8kaC85G5AHFBfQab5G9yvfz2fWG3uEsZv8WII5uDVXQ71dEthXLgVVajfHo6KsimhzY2SvxsEou/Z/3CeOfj0A/j231my8XoXNaB0smsv0bTq5clrfn6fz2J3d0fXtoxM7LdLPxnb+8nrvjjjSb0yUX/cXtPD5TepPwtGl8+/lV3v2DX9tPjuz2USfFJOxqbvupREXztPLCzz17bU2675kY/LaKtBDlqyu3MX19T9Rf51l9/PUN9Jv3eb3UHdow+pHdrtyZ4//oWz35qfF0zNgvjvKMhj0alciS4h/3sykhARqWKp6mWw+jAPlSkfekr3DK0S7I4Encrg5G3bDbFhX3ZbdN03XuOzrjqU3Xde40n3T6PZ3TWbD4ohiN6UhkbZky92UzecEceIxoAHk6iItRKdjyieIPcRRbUAn4hGklMFdKtqzQWLUejOgZeiNhhVmzy9R9OTAIldqNykf03Huhxzyw55sHfTkCWCSEZCNW9Y1E4XNuIjFK1oUPDbqC1SnUIjWnssu65l2y9EYSbIYJFMtSYMihnoWZWVkNLb5mirCrJRO+nfla/vQr+N/uxAInYBIBSZ9uQSRRjgxXKydI+8cbpwcQjt4vwiIfFginjwneMPk8NevMpH1UdVIb+hPb3ekK93fuPuzO/1p/CHA8C+MD//WuMjl+5vaJ/HUjlNZGQoWZM/sbusQ80t0vM6uEF+RUX+tF4tFUdaebVtaLuA1WQSabmpTwIXoyW936QtQrULRzhqAFfEj45X8kGLBIzrliEMi3kqtPJ6x8UyByY1nIB756tx16sCkCB2HFT8l68ZiW5OMP13osIelnhDfis8yzYNfGTuBtWdH+CkWHk7oXJ7k8Hv7oC5wKmCJaNtpvg9+CuCU8UNhFeSKCxcF9VRw+PhPTfbjtoIwTgvKBz2lFOzPiJInf8vA+6X0DqYcQ9VeSv5/MVVJWQIYxDbLSIkv1wtPPgE635szW6PHo8bXW5be0N1m3+ztjxohsKugHLDrvBO/l+zF6bjGO/8B</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263FC84E2291BE05307991F0A21CE</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">146263FC84E3291BE05307991F0A21CE</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A08306097E2DE05307991F0A97E4</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A083060A7E2DE05307991F0A97E4</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>146263FC84E3291BE05307991F0A21CE</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>0141CAE29A604512BB4870A0F8BCD5FD</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:0141CAE29A604512BB4870A0F8BCD5FD</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A08306117E2DE05307991F0A97E4</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>146263FC84E3291BE05307991F0A21CE</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77999</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1462A08306117E2DE05307991F0A97E4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9053e94d-7277-4c3c-8b54-20f01791244e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6897c8cb-8937-4e98-b6f5-e0c473190f76</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>06e7f5d2-cb2d-478e-8f91-7567779f89c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34853 - StreamDelete - LLP - Stream delete by llpcs_ManageAccountConsentPresent_SameOrg - 200 OK_MIGRATED" searchProperties="true" id="df90a33b-8e27-43ed-a660-e640b2bee6b3" disabled="true"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="45005b69-da2f-4e37-83ff-cba42db233b7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="66002e74-0e9f-471c-86cf-dd713d6d87d2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9a090806-a510-4021-a68c-d739bf8a23af" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="dfe52a9e-0539-49ef-9f40-b29dfc51fb30"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="c2881b73-12e4-4a37-8722-e20ca196fa46"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information for LLPCS" id="afaf79e0-382d-47f1-adc3-0d755beb31ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="d6b3bc47-9b35-4bd6-9809-f57ce2be321b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish manage account consent" id="4646aab5-6155-458a-b368-403f23413ba1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="4a91c861-bbed-4c61-b6c0-8b48bbb4d628"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="0207f482-a5e3-4d2a-a601-13253e2ef15b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="6db148cf-6dea-489e-a152-bdd71a89f1d3" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="5d1a9b2c-785c-4ce4-b35b-7891e5627af7" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="fb9a2bdb-645f-41a6-8b6f-42ca14eaa572" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150403_11387</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">29274B3946234879BCD901765E625FBC</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:29274B3946234879BCD901765E625FBC</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CCAE037F2448A9E05305991F0A76FD</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:12CCAE037F2448A9E05305991F0A76FD</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:12CC97752D7626BDE05305991F0A9F5D</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:12CC9227DBAD6546E05307991F0A93CE</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbrcto8EH0Vxv1tfAFj4wnMOJA0JNyKSb40fzpCXrAaWwZL5pKnr2TABULy0XaGGUbr1e7Zi87uFUNxZLoeY5ByktDSOo4oc3NpQ8lS6iaIEeZSFANzOXZ9r9d1zbLuov0VpdRpN5QfE7M6sevORK0Gk6padbCj1ic1UJ3AQc5Enxrm1BKqjGXQoYwjyhuKqRuWqldVvTLWa674mVbZMM0XpfQEKRO2hUpZV3ag1qyhhJzPXU1brVblVaWcpDPN1HVDe+51fRxCjJTm1Tai3FHa3OnjcgAYogiXcRJrV9qRzlXAXJ/MKOJZCjtfwUe+dE2va0InYGT2RSnuQtCh0yQ/thBNKMEoIm9I5qcHPEyCkhfNkpTwMP4wCEOXhlVYYxUbVfpF0Y6hXWjoCGHKkMpCZOxsjWAKKVAMpcdRp6F8uaxq+dVxiiibJmnMjo9/hgfoEqJkDoHK9mHtoF1u8EymmleA3Q7FUcbIEvqyWecIA9tVE/DlpkrDFKZk3SVMNOiaSXTaIbyT4zYbbTIDxv+mQAfF2Rp5QlEGze9PdtR6CaeRbj8uw2enRxx7Oqp0rfCxkQM4VM4FRWm3x5OmLJpoe2O0eYvvLI9WMm2RxuG4+61v3iwW5rcH0MNH+uC9bSq1t6fh2LPerif3m3RwN/hv8TSuxsvOTeb/DF96d9O+f90boppvterG+jZrOY/J4H59N39+7EJt8LDaUNzf+FrFxkN4+UpnXh8/9Gb2JDE6Tvh1SJzl8Hvbfl1nz5Wf5ujGI4Fde6Av9D7Eb3bvZXC7fLrls0YRzgH+Y9n+zfvZ5Cdgvj/KNui0S7eiSoh/TmZSQgJ1mqu6c0k+jAPlSlPektzhZoLuSOCKGm7Phtlq1U3Tbl977ZpVrd3oVkW363XjVvfqldbNnmS2KE4gthI6JdKXpNxt23wOEMcuAxpAqi6TTDAdUz6x2EYclTp0JB5BQhmME0HPRhzPzA2t6FaYxAZavTocrxNrHQhS7id8QAepN+WQHpNy/YiUR4DJnIBkbtnYTHQ24yIZC7TMeGSUl6hMIRPcnkqadc2qY2mMxPMIJFQtToIsgvI8nOep0dj231QRZrl0dDPOn9uHgZ1+2+dA6AREKjAZyzWIOsKZ6WLsA3kXcO3sFNqb97KAyJclEspTgrdIjj/97hPZIEWTtLueP9yDLnT/4O6Plv/D+EsD3X9w3v1X56KW729qn+RTOy1l4ShYkgO3+7VDDDBBec19Iy6QUV6Us+Uyy3uvWq1oqTCvySbQdFPzAWeClDfj5BWoVljRLpqABfAT54X8GGLGQ+pzxCEWb6WUHy9YeXxgcuXpiFe+vnSfOnIpUsdhzc/JWpFY1yTiTzc67GKpJ8RD8bdK0uB3xc7YOvAj4hQbDyeC5MVJTr/NB32BE2GWCN5O0kPj5wycc34sLJJcYOGioSYZh4+/lCQhNxSEcZJR3mkrueBwSOQ4+WYO7m+ld2byOVQspuT/N1OV5C2AQayzjOT25X7hyidAZweDZuf03ayxbcts2zWzdt3OZ421mzW3VrtIyhG65jvxe8lBnk57vPkL</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC9227DBAD6546E05307991F0A93CE</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC9227DBAE6546E05307991F0A93CE</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6rMEn33V1juR8twUbxVkqoBBoKKCuL1DWEEFEEZEPTXnwGjMdnZ2fs7DykzzXT3mu5Fs+YZm3uf7QKMURR7YVBWxJcKTbONZt3s1MwW3ak1uMam1mlz61qj027bFrKQXbcqZQXjBCkBjs0gfqmwNMPU6HqNaRpMo1vnuhz3xNTpVaU8QxEmkcmWJ7pSzvZ+gLtF1pdKEgXd0MQe7gbmHuFubHUnQB10yc6ueYNUeX2+giwSRq9uHB+6FGU92QSJ71tPVrinnqlPe55t3J14TmDGSYTec9r4pfLum6bpU1p/CiOHYmmapugORfbY2HN+VV5LN2dkK8EmvK4FMwgDzzJ972LmoFQUu6FdBr4TRl7s7v8QmqEYOg9dQ5lVs5hG8KtCfSQo0P1jpE8gI2zWsGsyt2A62qAIBRYqT3XlpfLrnxp4dTUiM8CbMNrjL+v/hggFJ+SHB2TX8O1gN3D/HvGbar0+I6urBJafYO+EhjlLDqaFcHkcoY2XDTxMuGfjctH9coZvBEPWf+nIM/WIk8CmvqmM6DkIx/9Pux5bdY0yM/0EvUIG8+nFbo2TiXAG/Fu/OtqsJQ9Crf1SQHjcfAV17/T7+itP77R6dwLU8Cine/G8o0/KvjGhz/V9kkHmmB7S1mFWVyfHKo47e9+Xe2l8GmoWZMKGuJm2TOKIsSbumkp2acL4iEvLFWHRReuskmBryS2GnnmNt4zh2w2TbTU5MIo4TnKdIT+GVLOzWnKuPZzIPetyqlLmie6cfaSwc2GlGmFWgm2gjvQtgF7mzNcQiury5eNMj2fIz9VH5+KQ+f8Lju6IZmzeF0I+KDbk7YzRq6ooYnIRBHCeOCBVeOCQvy0Y8s7u6O48uZPSPNA0CYgC72/hQAU7GTBTyLuqMJupmXABPd4ZzoijUQL+ild1mIrpUpxp2htMXcOWZ+e17CerCxyqABfOgqtCHc5E3YCqCsKrLVPFtZxt1YmaKtpSLJEAIswOF1vuxEjOPItVOHXCscsJl6wWM2KXzoP98LQ2oK8KqixMjvJEWddFDfaAvpxbrJQQ38tgfwhLyyn/4NQ7oC1AUkqTnOCiGrtUNabsUNTNwmZ8tqmK3FM1nApacSq5BNPebHr5qIXAq4K9hxk0wPhaC8sQpCG9WvSwOecCVQep6BTOfZjaoxsQVaPTknCt1QCmOtSnQ0nVlRSCwibC1MdrduiuZfdk1bWsZ4DtY2MEDc6lgDwP9JN15o4lU5bAej9jrLruWh7nmYswdVbtVNSWvX64UkiYIdAgz2uAAKJBfjRSfx4M+Bk3Ongd1kODjRTukRuVVCbs706XjG579ZEzHs45cbNrjWVvXDdtl1J8i93Wd0BRkN1nXM209SWli4F3aY760wXyouUlHnIa0/TaXEmfJ9OFGPot+22xnPar2dLSjNF4Mp2PL1k2PG7bFz9+G/Fv0aSnis5oiNAYW1WKNiXeaIucsHzbEj5tdBpxJeCoPADy1nGgRwjMv22vJHzTVUjIC1QhlYW5IE+ALFehwouatpFcZmzJs2TKDFUF2j4p03m50P3SSuBF0inanK8OS1aiVwawi2BaA0qONuWqvQVaaUPfmMUgPcw2AcPQ8kF726ipY6k5A2wlnfDkLeJLiQKm5ujQo7P+rEkzR832e5MOmNazCbvLRq6zOu+c1Y40Zfnw6iwN4M+MB44phGLzkmZAXQXt6/uWqcq0rvvWPjus91YmGqRnhXNo8FCXNHqaiSLoX23YAGyGlxe4VQVY+JdAppqEFqf1wsXLYOiNDJgQ0iYPdNmuWfqvHMspVvrMsaMANPCVY/DKMQg2x6rSFhnMNYUDnqcOL8Oj1poNep0DrS0GuxJflSgn9vzGKGinRr86Z85py91q83lHEV2hGmyWbn0d87R5sTTU27VkT9+JQbPhn9WBqnFTj/LP9BYdUzwoDRUmgPX4IlGdKKny+5W3v1zqDXa6H0+SkzI1+5g5u+vjvJNux29NiorkM3dprU6atAit5fU78nVI3o3XMUo9DthPE/gmvSbJeous+LbMv8OKWJbIx9GMf5ZxucWza5tia/eQa0EcoyCuvOZeuYTrJkToeXaXfDmv6w7fbHIsxwOp2aIZjod0g2YkGtBcp9NgBXDTelcUXyAKYbDx8ly5mL1+rH8GaO27a2RGKKr8ECmvU1kJdKI+wgAjI3ypCFJbhE2RYbk23apDwLWaUJDYRr3VbMA2y1XKwzAeBaMIbGIUPQjk1leBrCPLO3goV9HvWgLHpBBH85TEPvN0Mp8ClBCZHeVKt8s22lxRAMpO9geLPCDTLTqEOH46uIdCzPzxGF+f3U5M9thevgHnoHlEuoW+kfSNG+LfTsZ+K/1v4UFie7lmIeWLI8+6Ivn86IMNOQ3uVKA7TOOG+b7131w7DNP83ZX6ARH1tRj3TPbJe8h7u5gQrU3kWHEfwaRpR/Pp+JScTknRphbR4FREwlMMRVMTZCVELp6NcIcC6h6B+hehfsf8Je/d/hldErvBJCZv+Z4wqlws/35J++RNChCjLP7OJvjkWpYn//HmZnWtfB8xj8lPGkb2R92/ifWQh0DOJ5QXOPkqV9jnz+19fxO6VkiiemRIhdFj7O/8v8v92Xgv1x1KTFixTmL05yflfPq8VEzLCpMgVsRKYXiciAXm+HxA3Y9Nv4UpJO77nSXDf7yzLNTBxHLR3qzc93p/31zzisZbiHhhr8DyUsnI7ZskD5yHCfwO8A9DmPtpCH8+yetv5t8tDzX9yuzX/wE=</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC97752D7626BDE05305991F0A9F5D</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC97752D7726BDE05305991F0A9F5D</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>12CC9227DBAE6546E05307991F0A93CE</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>29274B3946234879BCD901765E625FBC</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:29274B3946234879BCD901765E625FBC</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC97752D7E26BDE05305991F0A9F5D</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>12CC9227DBAE6546E05307991F0A93CE</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP_CS_1</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77999</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC97752D7E26BDE05305991F0A9F5D</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9053e94d-7277-4c3c-8b54-20f01791244e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8932435-dd5d-4c50-9fa6-9024a525da4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d6b3bc47-9b35-4bd6-9809-f57ce2be321b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34800 - StreamDelete - LLP - AccountNotActive - ACCOUNT.STATUS of pending - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="48c7fa1b-7793-45fa-bfdc-82dd0274e118" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="aa110188-d712-4f6d-a41a-3c00f656213b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f0f34c06-20b3-4a4b-a10a-4500ee302ac6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="830a8e9f-46c6-4821-91c9-f26e2057ac52" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="54f66950-d3b3-430e-907c-3606f268525c"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="c35b7a16-c7ff-4724-8d80-b420294ec7e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="8f833ef7-4ec6-4aa7-8bb7-321660181933"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="3e33de6e-f319-4654-a723-5d6566d8356f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to pending" id="a951b274-42cb-4d55-af97-b4a837b72611"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "pending");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="28a247da-1fcf-4991-873a-3e56c09eae4c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="82dedca1-ad55-4b77-a2e6-2b29ce1a1c22"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="cd176f14-591b-4eee-9844-4ebd022d57bd" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_042153</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A10B75254E05307991F0AC5A5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A10C35254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPPYMZKNIcQTmCGQtLQkaWJyfckISQYltmQsmduvP5IBBwjJoe2TR+vVt99etLunEsWR67ekpKligpdmccSln0sbVpZyXyDJpM9RTKWvsB+0Lnu+W4Y+Wl+xSt1Ow3pxiYtIzYN2xSED26u7x/bAodSuHnth3a2FDiGhVpUyo10uFeKqYbnQqdrQs91K34G+d+LDavm45jxbpXuaSo2tVcrQWpGayYY1UirxAZhOp+VppSzSIXAhdMDjZS/AIxojq3m69Cg3lDZX+rhMKKZRhMtYxOAUbOmcEukHbMiRylK6skU+swUBPAFah0g2PLKKu5R0eSjyYxtxwRlGEVsgE59LqkaClFrRUKRMjeJPnXCgAbbpDNvY8fiRBbapHQi0xTCVyJYj5KywbmlIU8oxLd3ddhvW0WFZy6/2U8RlKNJYbh//jA/lExqJhBJbrt1aUTsccE+kmqcU+12Oo0yyCb0yxZogTOUqmxQfDlX6ndKQzXpM6gKdScMObNLbOS6j0WFDKtXfJGgjOUuQexRltBnXyQCj6U+n/nMMquR8NmDj5O355o3DRk5gUzkXFKldHneKsiii5Q3SnX17fbrxRrVaAD1xdj94JMn8+7RbvYft+TWf/YhHnvcsw+O4P7gco58U/Dj7BeL64wJcXDgweuzf3y2+kwc0+PXtCoWdZDSewoqLkbMYX109TKezVFw6F+dQhFH6ehyPJ2AxbgcPAZm0SULlsObeDF9Psrt6P5y1nArofbvoXN64/OmBBE5Xa0xcJxajs6dG4c4G/23Z+s0H2eCVYrU+mjLodkoXOktIfd3MjIQRO8xV/cQ0H6koV1bT3DK9w890u2PE1zlcnh2vVoHQbTmw7VbdqncOqxV4fHLiXMBWu9qqrpvMksUOxbbgITO2TMtdls3XBHHsS8oJTe2JyHSnk9YXiB2kUKnLb/UjEFzSvtDtmYcLjZyiaW2u4kVtOn8bnkxYnFmlK6Gu+XXaChVNt1tyZasl31LMEkZN3zZlLXVdS6VDMUaTTEVOeYLKnGa6s6emyfquV68CyeIkooYoiAXJIlpORkkeGCCXX9dGWObS2/N+/tg+dWv33zoCWocwoyCNL2dUZ5F+mC11v7p25IPDtb0zaA3fyggz70qHU6UML5ls/3qvElMeRYl0eq3g95p0ofsHd1/awYvzlwC9fzDe+1fjOpcfb4Iv4gl2U1kYIhO2YXa9dOjxpRtec12IY+SUx+VsMsny2vO8Ckg1PDBFAKALAooz3ZLnffFGOShQwEHzryC+Y7yQb1PM1IgHCika67dSyo8HLDwBlWbh6eo3Pjt0m9oyqUOn6Eztk7UjvawZxl/uc9jHRk+Lf+vPVKTkPWN7sDbsaD/1vqMYH5qTmX3zT+oCCw3LdNcW6Sb4PoB9xreFRZALLkoX1CBT9PM/JdOOGxbCWGRcdTtWLtgcETlPNU+o/670ASafQsVayv5/L7VZXgKY6mVWshzfbBe+eQJ8uDFmVkb3T5qz2leTZptd84P4o2QjTrs13vwP</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BDB0F7C6F353437AAB0B6B0D0FDBF2BF</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A12605254E05307991F0AC5A5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1463002A10B65254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A10B65254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1463002A10C25254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A10C25254E05307991F0AC5A5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1463002A12605254E05307991F0AC5A5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:BDB0F7C6F353437AAB0B6B0D0FDBF2BF</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1463002A10C35254E05307991F0AC5A5</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>BDB0F7C6F353437AAB0B6B0D0FDBF2BF</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:BDB0F7C6F353437AAB0B6B0D0FDBF2BF</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1463002A10C35254E05307991F0AC5A5</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>78025</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A10BE5254E05307991F0AC5A5</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A10BE5254E05307991F0AC5A5</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34846 - StreamDelete - LLP -  ACCOUNT_USER.STATUS of blocked:tou - 200 OK_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="eb6bbd05-17df-480e-bdd5-ab72adb176e9" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="78accf4c-49fb-4d64-840a-b71067031e1d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="7ebe2a76-61b6-41a5-8574-529986650305"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="ed8d1311-2bbb-4e63-9c9a-9a0ac3284cec" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="e00b79ed-7ead-49c6-8d31-32fe7f3ada71"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="8226de70-754f-461f-9f96-3f7c06f3df1d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="9ab8f32c-3966-4921-81c5-a1b344e9758d"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="c2cb149b-ca75-4279-9af7-9f7330708eda"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to blocked:tou" id="1b47d9d3-ca41-4aba-b8bd-10c536200cab"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "blocked:tou");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="ad496c02-1478-4185-bb82-b0089b176201"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="50670e35-2335-4e67-bf5f-09ca5ae19983"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="1d56bf9a-c7d6-45a4-91c1-cbe9839c8e20" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150403_114014</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC982EB695655AE05307991F0A48DB</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CCAE037F3748A9E05305991F0A76FD</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdUuJMEH0VKntphfyQAEkJVZGgwgZkAV3XG2ucNGTWMMHMBJGn/2YCRED0Y3evUtPp6T79M6f7nKFZbLoeY5ByktDSchZT5ubShpKl1E0QI8ylaAbM5dgdeb3ANcu6i7ZXlFLHbyiPVRPMiekgNTQNS7XCSag+4Zqu2iEOTasOBjbrQpWxDDqUcUR5QzF1w1Z1S9UrY73q6nW3Ypct23lQSneQMmFbqJR1ZQNqyRpKxPnc1bTX19fya6WcpFPN1HVDu+8FIxzBDCnN83VEuaO0udHH5RAwxDEu42SmnWt7Ouchc0dkShHPUtj4Cj/zpWu6owmdkJHpN6W4C2GHTpL82EI0oQSjmKyQzE8PeJSEJS+eJinh0ezTIAxdGlZhiVVsWPSbou1DO9HQHsKUIZVFyNjYGsIEUqAYSrfDTkP5dlrV8qvjFFE2SdIZ2z/+GR6gC4iTOYQq24a1gXa6wSOZap4DdjsUxxkjC+jLZp0jDGxTTcCnmyoNUpiQZUCYaNAlk+i0XXgHx3U2fDIFxv+mQDvFWRu5Q3EGTV6ddtvLCnG0/nz2/XJwG0S+319F/RVu5AB2lXNBUdr18aApiyZa37izWsHd82o0v59EqQPt5RhfD6+C7NbwafBQ6fKziJ/91K7C9LJ1Yfd+hHj5M0tN3NWfWXDdX2r+xfDeXFyk40EXKgkiuFut98w2RcnztW3c1C3v6vZllXZobBmdMEbg/Ph+PeivHpJw9tCb39fie0Jt7+wpHPtn087169vwV+AFN11ijvrxlTf9NR3Y3Zbd8xpFODv492XbNz/Knn4D5tujbIOOX7oUVUL8azKTEhKqk1zVnUvyYRwoV5ryluQONxN0R0JX1HB9NsxWy2vrldplpWrVPaet2xXddhzjUvdq1Ut/SzJrFAcQWwmdEOlLUu66bb4GiGcuAxpCqi6STDAdU76w6COOSh06FI8goQzGiaDnF/7E9awWcSv5beAno+bgmGA9WimlfsJv6E3qTTik+5zs7HHyEDCZE5DELfuaicZmXOTiBS0yHhvlBSpTyAS1p5JlXUEftsbIbB6DRKrNkjCLoTyP5nlmNLb+mirCLJcO2+P8tX0a1+G/bQqETkikApOxXIAoIxwZLuY2kA8BV48Ooa15LwuJfFginzwleI1k/9d7m8j+KHrED7zRYAu60P2Du4+t0aPxlwaCf3Ae/KtzUcuPN7Uv8qkdlrJwFC7Ijtvt1iHml2C85rYRX5BRfilni0WW955lVbRUmNdkE2i6qY0AZ4KT38bJM1CtsKKdNAAL4AfOC/k+xIxHdMQRh5l4K6X8eMLGMwImN56OeOTLU9epPZcidRyW/JisFYttTSL+cqHDLpZ6QjwQn9ckDd8rdsTWjh8Rp1h4OKFTeZLD7+2TvsCJMEsEbSfprvFjBo453xcWSS6wcNFQTxmHz/+UJB83FIRxklHe8ZVcsDsjcpz8bQ7uu9IHM/kYKvZS8v+LqUryFsAgtllGcvtyvXDlE6DTnTmzcXo4apy62b6oOlbVtr181NTWo8aq+xdFUvbQNT+IP0p28nTY483/AA==</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CCAE00CAF748A5E05305991F0A8374</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:12CC982EB694655AE05307991F0A48DB</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC982EB694655AE05307991F0A48DB</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:12CCAE037F3648A9E05305991F0A76FD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CCAE037F3648A9E05305991F0A76FD</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:12CCAE00CAF748A5E05305991F0A8374</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:6C9E1EB4E1AE492AABF91D347CCA0D58</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0FFCEC46B2DC1B60E05305991F0A2EE9</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>6C9E1EB4E1AE492AABF91D347CCA0D58</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:6C9E1EB4E1AE492AABF91D347CCA0D58</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>0FFCEC46B2DC1B60E05305991F0A2EE9</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC982EB69C655AE05307991F0A48DB</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC982EB69C655AE05307991F0A48DB</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34852 - StreamDelete - LLP - StreamOwnerMismatch - Stream delete by llpcs_ManageAccountConsentPresent_DifferentOrg - 403 Forbidden" searchProperties="true" id="6cdfa3dc-b470-4281-b0de-236427cda52b" disabled="true"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="70a0c88f-54e6-4b35-be94-b2828707b7cc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_OWNER_MISMATCH");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="87c6d828-3fc0-4616-b079-e5e507dd9b5f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="a294c2b7-fd93-4e71-a035-b67b659a6704"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b406b5fc-2e9d-450e-ac93-2a88ecee2ed2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="16c89686-06b5-456e-a1e5-7b7e2b6425a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information for LLPCS" id="fe634e47-d780-47b7-a3f7-7717ea80c1ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="84f7a3c1-5c06-412d-8fbd-6485481740b2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish manage account consent" id="d1442930-ac5f-439b-907e-1af77c532858"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="afd37773-ac90-4c63-80bc-6b64ac2432c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="843d7881-e43a-4f3c-9c45-057ea7543a5d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="b024cdc0-ebcf-4d60-a05d-578717ea90e1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="f35b02ed-b6e3-4634-acdf-4f8418167a85"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="856b5a4c-d853-46bb-b3e9-bdb41eb25d2e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20140906_100713</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC93F58440D71D1FE0401F0A05995C32</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC93FF690A4F7185E0401F0A07994169</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC93FF690A4F7185E0401F0A07994169</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC93F58440D71D1FE0401F0A05995C32</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77999</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9053e94d-7277-4c3c-8b54-20f01791244e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1442930-ac5f-439b-907e-1af77c532858</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84f7a3c1-5c06-412d-8fbd-6485481740b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34853 - StreamDelete - LLP - StreamOwnerMismatch - Stream delete by dlpcs_ManageAccountConsentPresent_DifferentOrg - 403 Forbidden" searchProperties="true" id="59b093f3-8750-4b20-a91a-451be7392d3f" disabled="true"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2e7dc03b-590f-4a83-935d-b26250525e43"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_OWNER_MISMATCH");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="59b2a8bc-4d7b-428d-8a86-5320a577c0b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="7985d240-c199-4605-9be0-9212a275bebf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="33b2cc6d-ab0c-4bf9-a5dc-84ea71dc8dc1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="db580824-0b8b-477b-8ead-e1c0f0719b3d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information for DLPCS" id="b93a7c7c-64f8-4de4-bf31-c90376290806"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="45b2f423-1434-41cd-a540-3f9d3618b50e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish manage account consent" id="af25d563-1072-4300-a4b4-5e0fac9fc1b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="5a0afe36-9978-4b11-8be8-4204062c2d31"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="3f77b141-dbc9-43d0-8260-5b75bce669e8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="4bcfcf9e-e5e3-49ce-a6e6-b41725b3359f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="fa7bfaf5-beab-40bf-9b44-aec9d377d4bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="07fb6f74-766a-4929-a48f-d246cc37331f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20140906_100713</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6BD6EF7937588DE0401F0A05993B77</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6C429A7A744CAFE0401F0A059962C4</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6C429A7A744CAFE0401F0A059962C4</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6BD6EF7937588DE0401F0A05993B77</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77999</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9053e94d-7277-4c3c-8b54-20f01791244e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af25d563-1072-4300-a4b4-5e0fac9fc1b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>45b2f423-1434-41cd-a540-3f9d3618b50e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Linked LASP Test Cases_P1_Without MAC" id="ad16ed16-d0d6-4586-8109-db9e92d8b85a"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34853 - StreamDelete - LLP - Stream delete by dlp_ManageAccountConsentNotPresent_SameOrg - 200 OK" searchProperties="true" id="2de45830-fb75-44af-9965-68fdd3b2df28"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish data and LLP without MAC" id="a6bc37a8-fdff-46c2-819d-f2c36bd3b600"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E_without_MAC");

def runnerTS = myTS.run( null , false )

assert runnerTS.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="15471178-7c2b-42cb-8133-b366b3aff4b4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("nodeid_rm",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="1fedafd2-df74-46b6-b970-15631b3fea35"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
//tP.setPropertyValue("StreamCreateCount","12");
def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="f4584cb1-2171-49a1-a511-03a5f8f37080" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="e8932435-dd5d-4c50-9fa6-9024a525da4b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

tC.setPropertyValue("policyClass","ManageAccountConsent");
tC.setPropertyValue("nodeid_rm","DLASP");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="83e87990-4766-4fbf-a696-683442622430"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a70cf557-d473-40bc-af23-00e989fd1e16"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="d6e560d5-768a-4acc-809c-a456b38fc90e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("nodeid", tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="103074c2-7c02-404b-942c-c7e46db6e207" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="9d07fdef-1af7-49d6-b7b0-0a53c09ab1b8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="8a55cf53-f0a8-4a56-b1a9-b6cfc8aecbf8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="9ac3e301-4357-474a-80ab-0f5f2ea35635" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0F703F000A7B2B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150219_050423</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>0F703D3CB1ED2B58E05307991F0AB42C</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:0F703D3CB1ED2B58E05307991F0AB42C</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:0F703D3CB1ED2B58E05307991F0AB42C</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>0F703D3CB1ED2B58E05307991F0AB42C</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:0F703D3B196F2B79E05307991F0A29F9</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>0F703D3B196F2B79E05307991F0A29F9</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>0F703F000A762B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>0F703F000A762B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77999</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid_rm</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>0F703F000A7B2B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0F703F000A7B2B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:0F703F000A7A2B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>0F703F000A7A2B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0F703F000A6E2B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>0F703F000A6E2B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>assertId</con:name><con:value/></con:property><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPY5VyiXTGGGFuhJly4USG8vHccRxDQ4EDsB+uvXDpACpT3s7lPGiix9kj5LumRoFlp2kzGIOYloYTULKbMzaV1JYmpHiBFmUzQDZnNsD5t3XdvSDBvtrigFp1VXXg3LM0uVsaeOq5ahlixrrKJaFatglMGHkoW9alWoMpaAQxlHlNcVyzAvVMNSzdrINO2iZRcrmmWWXpTCA8RM2BYqmqFsQa1YXQk4n9u6vlwutWVRi+KJbhmGqT/ddYc4gBlSGpebiDJHcWOrjzUfMIQh1nA00y/1A51Ln9lDMqGIJzFsfflf+TJ0o6YLHZ+RyQ8lvwu+Q8dRdrxGNKIEo5C8I5mfO+BB5Bea4SSKCQ9mXwZhGtKwCiusYrNEfyj6IbQzDR0gjBlSWYDMra0BjCEGiqHgDpy68uO8qmVXRzGibBzFM3Z4/DM8QFMIozn4KtuFtYV2vsETmWpcArYdisOEkRR+SbLOEQa2rSbg800V+jGMyapLmCDoikl0+j68o+MmGy0yAcb/pkB7xdkYeUBhAo1e/3l97Zd8lNBlO2pb4bvxWKzcjkL/uZ4B2FfOBHlpN8cjUuYk2ty4QnMa9B9dd+TdT9t3VffWfZl4PfYUhmTw0r968N/ghnbabhr+tKrQToKk5AQ15250X8S9EnXumdP7+R7gVS2ZrsvugxsY/mhK3/pxzVqwjovXTXBvicW9xB370aLpPT44Ln1fragTlr3Zy3Jh3oSjR7e4BG+x8p7+KzovOJ3c0FUrdXrPwXM5urhw2Khaz8PZw38o2735YeJNAfPdUdLAaRU6okqIf9/MpIT46jhTteey+TAOlCsNeUv2DjsR7Y74tqjh5mx0KkaxI6rZrDStq0qpbVwUjUqtZnaMptluFXdNZoPiCOJ1RMdE+pItd0Ob7wHimc2A+hCraZSITseUbyy2EEcFhw7EI4gog1Ek2nNxuS5XxghNYfpuGm+hOV+k5TBI3pTCr4j3aC9ujjnEhz25dNCTB4DJnIBs3JLXTBCbcZGLBUoTHppaijQKiWjtseyytlWqXuiMzOYhSKT6LPKTELR5MM8yo7PN11IRZpl00B5lr+3LuI7/7VIgdHwiFZiM5QpEGeHEcLF2gXwKuHxyCO3MNxOfyIcl8sljgjdIDn990ETyI+dIq9sc9negc90/uPt6PXw1/9JA9x+cd//Vuajl55v6N/nUj0uZO/JTsud2t3WI+SU6XmNHxAXSFlqSpklGvYrs7LEwr0sS6IalDwEnoievR9EbUD23op81AHPgR85z+SHEhAd0yBGHmXgrhex4xsYzBCY3Hkc88tW569SBS5E6Dit+SnYdim1NIv52ocM2lnpC3BefZRT7HxU7YWvPj4hTLDyc0Ik8yeG3/oIXOBJmiWjbUbxv/JSBU84PhXmScyxcEMpLOHz9pyD7cV1BGEcJ5U5LyQT7MyLDyddzsD+UPpnJxlC+l5L/X0xVklEAg9hmGcnsy/XClk+ATvbmzNbp6VFTbn83ag7RNT6JP0v28nTM8cZv</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>0F703F000A6F2B74E05307991F0A1ED3</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9053e94d-7277-4c3c-8b54-20f01791244e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8932435-dd5d-4c50-9fa6-9024a525da4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a6bc37a8-fdff-46c2-819d-f2c36bd3b600</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34863 - StreamDelete - LLP - Stream delete by llpcs_ManageAccountConsentNotPresent_SameOrg - 200 OK" searchProperties="true" id="93e6553e-c907-4cc1-bc14-8ce4f4fe4cf0"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0a50b374-64ec-42f4-9535-1f0e4a23f469"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("nodeid_rm",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="ce339721-baa6-45da-8a74-9c21030edc8b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d5ff8161-b747-41af-a447-57550dfc50f9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="ac1770d4-7749-478b-a6bb-af54c9ecbdc9" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="8cc99788-7176-4d23-a2a0-b313075c534a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e33d983b-27e3-479f-906d-19ea374cf33b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information for LLPCS" id="d9cea0d4-47a9-4509-9c22-dafa0e1fbec8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="3bca6821-ecaf-4c91-983d-cf8a001eb3c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("nodeid", tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="996d9e0e-7909-42c6-8e54-5e20be28cfa2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 2;
assert b.streamGetStreamDataHistoryRowCount(acct) == 3;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="7659c788-eff4-4dcb-b84a-9b45f611f351" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="c3667c1e-239d-4ab7-b91b-bf2173161bc9" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="afe8c1d7-e532-4678-bd06-d2d765e0a743" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0F703D3D8B4F2B77E05307991F0A5B26</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150219_050423</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>0F7052F6C9D568F3E05307991F0A50B0</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:0F7052F6C9D568F3E05307991F0A50B0</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:0F7052F6C9D568F3E05307991F0A50B0</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>0F7052F6C9D568F3E05307991F0A50B0</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:0F7052F6C9C968F3E05307991F0A50B0</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>0F7052F6C9C968F3E05307991F0A50B0</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>0F703F000ADC2B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>0F703F000ADC2B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77999</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid_rm</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>0F703D3D8B4F2B77E05307991F0A5B26</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0F703D3D8B4F2B77E05307991F0A5B26</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:0F703D3D8B4E2B77E05307991F0A5B26</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>0F703D3D8B4E2B77E05307991F0A5B26</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0F703F000AD42B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>0F703F000AD42B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>assertId</con:name><con:value/></con:property><con:property><con:name>assert</con:name><con:value>pVZbc9o6EP4rjPvYMb4AMXgCMxCH1CckEEwzTV86Ql5jJbZELBlIfn0lAw6XJIe2Tx6tV99+e9HunnOUJrbb5RwyQRitrNKEcreQtrU8oy5DnHCXohS4K7AbdG8Grl01XbS9olV8r639cpwIo6ge6aFpRXq92ZrqUxSFuh2ZpoVb5hlyLKnKeQ4+5QJR0dZs02ropq1brYllubWGa5rV1lntp1a5h4xLbKlSNbUNqRVva7EQc9cwlstldVmrsmxm2BLe+HEzCHAMKdI652uPCkNZZ6OPqyFgSBJcxSw1zo09nfOQuwGZUSTyDDa2wo9smYbZMqROyMnsi1behdCnESuOF4gySjBKyCtS8bkBEbOw0k1mLCMiTj90wjIVsA4rrGOrTr9oxj61E4H2GGYc6TxG1gZrDBFkQDFUvo/9tvbltKwVVycZojxiWcr3j3/GB+gCEjaHUOdbtzbUTgd8J1Kdc8CuT3GSc7KAW1Wsc4SBb7IJ+HSoyiiDiKwGhMsCXXHFztild3BcR8MjM+DibxK0k5w1yD1Kcuj0XybNcJhcDx4el36vGfvEgZcAe1fX9XZBYFe5EJSpXR8PirIsovWN1A7OQv6Vzu/vftz0uXeXT1OUBhxqjvGfmISv2ZVx0fpKBzdRK34Y4CffdGrxGEjCo1E/mI5GCxiOn+ej1YMHkIyeFrFxxS6xQXooSu6Q16DO0KTmNbt1ft5eh4+Y92PuR6uHph9xcj2it8/NR/qt3voRNu5ZvHhIxzPH6w0ZHzaj24dp9N0RAfn27Qq3S3d2+O/Ltm8+yKePgMX2qMrA9yp9mSUkPm9mSkJCPSpU3blqPlwAFVpH3VK9w81luyOhK3O4Ppt9x6x5Na/Zq1/aPce5NBs102m1rL7ZbfTss22TWbM4oHjBaESULdVy12XzOUGcuhxoCJm+YLnsdFz7BNFDAlV8OpaPgFEOEybbs9XInsLG48pmdYascI5o0z6zXp2nqVa5ZWJIh1k3EpDtN+X6XlMeAyZzAqpzq8LmsrK5kMF4RotcJFZ1gaoUctnbM9VmXbvebBicpPMEFFUjZWGeQHUez4vQGHz9tXWEeSEdX06K5/ahY4f/tjGQOiFRClz50gOZRziaLnW3sXXkyOGzd6fQFr6bh0S9LBlQkRG8ZrL/661OVIGUReINusFoS7rU/YO7vy6CX9ZfAgz+wfjgX43LXB7fND6Jp3GYytJQuCA7ZrdrhxxgsuV1toX4jKrP1XyxyIvSc1RrzyS8oYrAMG0jAJzLpvwyYU9AjRLFOGkClsQPjJfyfYq5iGkgkIBUvpVKcTxh5QmAq5XHl698deo+tWdShk7ASrwnu0jkuqYYf7rRYRcrPSkeyc+SZeFbxt7B2rEj/ZQbjyB0pk5q+r18UBeYSVgi+zbLdsHfA3jP+L6wDHLJRciCmuYCPv5TUQ25rSGMWU6F72mFYHdIFDzFyxzcN6UjmGIOlYsp+f/NVCdFCWCQ6ywnBb7aL1z1BOhsZ9BsjB7Nmr7cHLpeXc6a+u6ssS69WhmUPXadI/GxZCdOhzXe+Q0=</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>0F703F000AD52B74E05307991F0A1ED3</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9053e94d-7277-4c3c-8b54-20f01791244e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8932435-dd5d-4c50-9fa6-9024a525da4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34854 - StreamDelete - LLP - Stream delete by DLPS_CS_ManageAccountConsentNotPresent_SameOrg - 200 OK" searchProperties="true" id="93f62a7c-e492-4807-83d7-e3f2c5b3b499"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6b226dab-c328-49c0-a2e0-06c897361c8e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("nodeid_rm",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="e85a4d9f-b217-4d3d-99b5-6fd71f743478"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" disabled="true" id="fb90d7a5-f7d6-438b-b4e1-9761d2622588"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" disabled="true" id="f2795ff3-22de-4e96-9285-d7d57f354916"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="e3d72363-9acf-4204-9247-0a194f9a14db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="3f858d36-2741-4f95-967e-f4219d2e742d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information for DLPCS" id="6e984538-c344-4583-9f35-08995ac383c2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid14").toString());

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="4bc0fa82-0d34-4845-ab67-e19949a75bf3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("nodeid", tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" disabled="true" id="fcada171-b177-427c-b80c-cb44d0e55d0a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 4;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" disabled="true" id="4476a078-d988-4870-a3c3-c18f6b2b1cc9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" disabled="true" id="95ec007f-b0b7-41bd-a8f5-d34b0fe612ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" disabled="true" id="b38501a0-83c6-4868-91b7-40a5277f7166"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>0F703F000AD52B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbc9o6EP4rjPvYMb4AMXgCMxCH1CckEEwzTV86Ql5jJbZELBlIfn0lAw6XJIe2Tx6tV99+e9HunnOUJrbb5RwyQRitrNKEcreQtrU8oy5DnHCXohS4K7AbdG8Grl01XbS9olV8r639cpwIo6ge6aFpRXq92ZrqUxSFuh2ZpoVb5hlyLKnKeQ4+5QJR0dZs02ropq1brYllubWGa5rV1lntp1a5h4xLbKlSNbUNqRVva7EQc9cwlstldVmrsmxm2BLe+HEzCHAMKdI652uPCkNZZ6OPqyFgSBJcxSw1zo09nfOQuwGZUSTyDDa2wo9smYbZMqROyMnsi1behdCnESuOF4gySjBKyCtS8bkBEbOw0k1mLCMiTj90wjIVsA4rrGOrTr9oxj61E4H2GGYc6TxG1gZrDBFkQDFUvo/9tvbltKwVVycZojxiWcr3j3/GB+gCEjaHUOdbtzbUTgd8J1Kdc8CuT3GSc7KAW1Wsc4SBb7IJ+HSoyiiDiKwGhMsCXXHFztild3BcR8MjM+DibxK0k5w1yD1Kcuj0XybNcJhcDx4el36vGfvEgZcAe1fX9XZBYFe5EJSpXR8PirIsovWN1A7OQv6Vzu/vftz0uXeXT1OUBhxqjvGfmISv2ZVx0fpKBzdRK34Y4CffdGrxGEjCo1E/mI5GCxiOn+ej1YMHkIyeFrFxxS6xQXooSu6Q16DO0KTmNbt1ft5eh4+Y92PuR6uHph9xcj2it8/NR/qt3voRNu5ZvHhIxzPH6w0ZHzaj24dp9N0RAfn27Qq3S3d2+O/Ltm8+yKePgMX2qMrA9yp9mSUkPm9mSkJCPSpU3blqPlwAFVpH3VK9w81luyOhK3O4Ppt9x6x5Na/Zq1/aPce5NBs102m1rL7ZbfTss22TWbM4oHjBaESULdVy12XzOUGcuhxoCJm+YLnsdFz7BNFDAlV8OpaPgFEOEybbs9XInsLG48pmdYascI5o0z6zXp2nqVa5ZWJIh1k3EpDtN+X6XlMeAyZzAqpzq8LmsrK5kMF4RotcJFZ1gaoUctnbM9VmXbvebBicpPMEFFUjZWGeQHUez4vQGHz9tXWEeSEdX06K5/ahY4f/tjGQOiFRClz50gOZRziaLnW3sXXkyOGzd6fQFr6bh0S9LBlQkRG8ZrL/661OVIGUReINusFoS7rU/YO7vy6CX9ZfAgz+wfjgX43LXB7fND6Jp3GYytJQuCA7ZrdrhxxgsuV1toX4jKrP1XyxyIvSc1RrzyS8oYrAMG0jAJzLpvwyYU9AjRLFOGkClsQPjJfyfYq5iGkgkIBUvpVKcTxh5QmAq5XHl698deo+tWdShk7ASrwnu0jkuqYYf7rRYRcrPSkeyc+SZeFbxt7B2rEj/ZQbjyB0pk5q+r18UBeYSVgi+zbLdsHfA3jP+L6wDHLJRciCmuYCPv5TUQ25rSGMWU6F72mFYHdIFDzFyxzcN6UjmGIOlYsp+f/NVCdFCWCQ6ywnBb7aL1z1BOhsZ9BsjB7Nmr7cHLpeXc6a+u6ssS69WhmUPXadI/GxZCdOhzXe+Q0=</con:value></con:property><con:property><con:name>assertId</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>0F703F000AD42B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0F703F000AD42B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>0F703D3D8B4E2B77E05307991F0A5B26</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:0F703D3D8B4E2B77E05307991F0A5B26</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0F703D3D8B4F2B77E05307991F0A5B26</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>0F703D3D8B4F2B77E05307991F0A5B26</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeid_rm</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77999</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>0F703F000ADC2B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>0F703F000ADC2B74E05307991F0A1ED3</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>0F70531831A06905E05307991F0A4D27</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:0F70531831A06905E05307991F0A4D27</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>0F703D3B19D02B79E05307991F0A29F9</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:0F703D3B19D02B79E05307991F0A29F9</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:0F703D3B19D02B79E05307991F0A29F9</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>0F703D3B19D02B79E05307991F0A29F9</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150219_050639</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0F703D3D8B4F2B77E05307991F0A5B26</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9053e94d-7277-4c3c-8b54-20f01791244e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8932435-dd5d-4c50-9fa6-9024a525da4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34856 - StreamDelete - LLP - StreamOwnerMismatch - Stream delete by dlpcs_ManageAccountConsentNotPresent_DifferentOrg - 403 Forbidden" searchProperties="true" id="ba4630c1-3a69-4a4f-9379-11fc48d83ec7" disabled="true"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c3a4bd5d-2659-4bf4-94a3-376c1ff30c44"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("nodeid_rm",tP.getPropertyValue("nodeoid14").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_OWNER_MISMATCH");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="28d54e4c-a075-4320-9b94-8e13fb65ae8d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="936ae862-8eb8-4127-b539-7f299887ba35" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="13e61b1d-9c7e-44c4-a99b-2956b2422d64" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="ec6ef217-bf10-4df9-a061-e372082b9d27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="dacfec42-7ea5-4466-81a8-4f7650c7d56e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information for DLPCS" id="361b7969-76dd-47b8-947a-a7d28f00bc45"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="19cb6792-3229-4f05-ba96-b468f73b4d15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("nodeid", tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="30043123-332e-46c3-a1c4-f60c28455a67" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 5;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="a29d5fa7-bced-4d95-88b8-16dd631a3a04" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="4cbb97b5-4bd0-4d6f-98fb-c124225bb9d8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="3c733a81-df04-4188-a733-36ee27318600" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>0F703D3B19D62B79E05307991F0A29F9</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPrYCblwTaYwQ0nZ5SwUFuiNl45xBLib2DR2Apxff+wAKVDKYXefMlZk6ZP0WdINR2Fguw3OIRKE0dwqDCh3U2lNiyPqMsQJdykKgbsCu8NGt+PaedNFuytaru3VtNdC0UEmlKt6uWCaetEuOTqaIkv3nQoyy06lVKlWpSrnMbQpF4iKmmabVkk3bd1yRpblFqquVcwX7PJYyz1CxKVtqZI3tS2oFa9pcyEWrmEsl8v8spBn0cywTdMynrudIZ5DiLT6zSai1FFU3+rjvA8YggDnMQuNG+NA58bn7pDMKBJxBFtf/le+TMN0DKnjczK70rK74LfplKXHJqKMEowC8i9S+emCmDM/1whmLCJiHn4ZhGUqwzqssI6tIr3SjENoFxo6QBhxpPM5sra2BjCFCCiG3MOgXdOuLqtaenUUIcqnLAr54fH38ABNIGAL8HW+C2sL7XKDJzJVvwHstikOYk4SuFdkXSAMfFtNwJebyvUjmJJVh3BJ0BVX6Ix9eEfHTTY8MgMu/qRAe8XZGHlEQQx18BeicV0tPo+GBViNrcJ6ML+/JUVr0K2lAPaVU0FW2s3xiJQZiTY3gntv3RpXu2Pevv7h99ZG+VuJGeNxsFz2+55vPImn1hrenn3PAzYdmfhtedsM549jItrfhpWOwxZkJNlSerntPVbviuOe3S3/FA1z+OC8DCbCgnH4UGIN+BU3CfzjgCh8TzhpzcrWKDJ63Uky48Gd15hH64F4+vl9fl30IrPVWT72y6y5tJLS+tcD6jvVyUstC2cP/6Fs9+aH8eQNsNgdFQ3aXq4lq4TE+WamJMTXp6mqu1DNhwugQqurW6p3uLFsd8R3ZQ03Z7NVMQte4dZy7iz7tuLcmaWCWXEcq2U2bKfl7JrMBsURxCajU6J8qZa7oc15gDh0OVAfIj1hsex0XDtj0UMC5dp0IB8BoxxGTLZnkSziZFoJK5MJs4qcLZcrNiexQFrunoke7UWNqYDosCcXD3ryADBZEFCNW/GaS2JzIXPxjpJYBFY+QXkKsWztkeqyrl2slgxOwkUACqkRMj8OIL+YL9LMGHzztXWEeSod3I3S1/ZlXMf/dimQOj5RClzFcguyjHBiuJi7QD4FXD45hHbmG7FP1MOS+RQRwRskh78+aKL4kXHE6zSG/R3oTPc37r42h6/WHxro/IXzzt86l7X8fNM4k0/juJSZIz8he253W4ecX7Lj1XdEfEf593ycJHFKvYrq7JE0bygSGKZtDAHHsievR+wXUCOzYlw0ADPgR84z+SHEWMzpUCABoXwrufR4wcYzBK42nrZ85KtL16kDlzJ1AlbilKwZyG1NIT670GEXKz0p7svPkkX+R8VO2NrzI+OUC48gdKZOavitv+AFZtIskW2bRfvGTxk45fxQmCU5wyIkoSaxgK//5FQ/rmkIYxZT0fa0VLA/I1KcYr0A90Ppk5l0DGV7Kfn/xVQnKQUwyG2Wk9S+Wi9c9QTobG/ObJ2eHjVe6dyoOURX/yT+LNnL0zHH6/8B</con:value></con:property><con:property><con:name>assertId</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>0F703D3B19D52B79E05307991F0A29F9</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0F703D3B19D52B79E05307991F0A29F9</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>0F703D3B19E12B79E05307991F0A29F9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:0F703D3B19E12B79E05307991F0A29F9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0F703D3B19E22B79E05307991F0A29F9</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>0F703D3B19E22B79E05307991F0A29F9</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeid_rm</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77999</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>0F703D3B19DD2B79E05307991F0A29F9</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>0F703D3B19DD2B79E05307991F0A29F9</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>0F7052F6A4BC68F1E05307991F0A77F2</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:0F7052F6A4BC68F1E05307991F0A77F2</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>0F703EFC3E962B66E05307991F0A4AEF</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:0F703EFC3E962B66E05307991F0A4AEF</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:0F703EFC3E962B66E05307991F0A4AEF</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>0F703EFC3E962B66E05307991F0A4AEF</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150219_050639</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0F703D3B19E22B79E05307991F0A29F9</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9053e94d-7277-4c3c-8b54-20f01791244e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8932435-dd5d-4c50-9fa6-9024a525da4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34857 - StreamDelete - LLP - StreamOwnerMismatch - Stream delete by llpcs_ManageAccountConsentNotPresent_DifferentOrg - 403 Forbidden" searchProperties="true" id="c6202396-b90f-42f5-806a-4e9768aa4c15" disabled="true"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="96c18bfa-b749-4f27-af6e-28dde028bdbc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("nodeid_rm",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_OWNER_MISMATCH");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="a72a14ff-e161-4b2a-983b-ecbb33b5f2be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9116199d-8434-4af2-9a59-56a91c3b302a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="5bb1d8e4-90c2-4c17-9185-4ccc16d664b9" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="349918da-a55d-4cdb-8c22-bb14aadea46e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="94bf81f1-8562-47cc-8a4b-dd54d859dbaa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information for LLPCS" id="8bde7ee1-b29d-4147-a6da-2c85ccae7bf6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="727ca1e1-cd8b-41a3-8c74-b0d18f6e26ce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("nodeid", tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid_rm"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="827ebadb-f145-42f4-8cbe-f1ba77064942" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 6;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="51de70bd-e1dc-49b9-a82c-257afa7c8724" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="dca72de8-a5a6-4d60-b72a-57b45570e9d6" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="acac749d-170c-4e10-aad3-f6be928a320e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0F703D3B19E22B79E05307991F0A29F9</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150219_050958</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>0F7066E820F4056EE05305991F0A26B6</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:0F7066E820F4056EE05305991F0A26B6</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:0F7066E820F4056EE05305991F0A26B6</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>0F7066E820F4056EE05305991F0A26B6</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:0F703D3D8BD42B77E05307991F0A5B26</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>0F703D3D8BD42B77E05307991F0A5B26</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>0F703D3B19DD2B79E05307991F0A29F9</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>0F703D3B19DD2B79E05307991F0A29F9</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77999</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid_rm</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>0F703D3B19E22B79E05307991F0A29F9</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0F703D3B19E22B79E05307991F0A29F9</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:0F703D3B19E12B79E05307991F0A29F9</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>0F703D3B19E12B79E05307991F0A29F9</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0F703D3B19D52B79E05307991F0A29F9</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>0F703D3B19D52B79E05307991F0A29F9</con:value></con:property><con:property><con:name>assertId</con:name><con:value/></con:property><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPrYCblwTaYwQ0nZ5SwUFuiNl45xBLib2DR2Apxff+wAKVDKYXefMlZk6ZP0WdINR2Fguw3OIRKE0dwqDCh3U2lNiyPqMsQJdykKgbsCu8NGt+PaedNFuytaru3VtNdC0UEmlKt6uWCaetEuOTqaIkv3nQoyy06lVKlWpSrnMbQpF4iKmmabVkk3bd1yRpblFqquVcwX7PJYyz1CxKVtqZI3tS2oFa9pcyEWrmEsl8v8spBn0cywTdMynrudIZ5DiLT6zSai1FFU3+rjvA8YggDnMQuNG+NA58bn7pDMKBJxBFtf/le+TMN0DKnjczK70rK74LfplKXHJqKMEowC8i9S+emCmDM/1whmLCJiHn4ZhGUqwzqssI6tIr3SjENoFxo6QBhxpPM5sra2BjCFCCiG3MOgXdOuLqtaenUUIcqnLAr54fH38ABNIGAL8HW+C2sL7XKDJzJVvwHstikOYk4SuFdkXSAMfFtNwJebyvUjmJJVh3BJ0BVX6Ix9eEfHTTY8MgMu/qRAe8XZGHlEQQx18BeicV0tPo+GBViNrcJ6ML+/JUVr0K2lAPaVU0FW2s3xiJQZiTY3gntv3RpXu2Pevv7h99ZG+VuJGeNxsFz2+55vPImn1hrenn3PAzYdmfhtedsM549jItrfhpWOwxZkJNlSerntPVbviuOe3S3/FA1z+OC8DCbCgnH4UGIN+BU3CfzjgCh8TzhpzcrWKDJ63Uky48Gd15hH64F4+vl9fl30IrPVWT72y6y5tJLS+tcD6jvVyUstC2cP/6Fs9+aH8eQNsNgdFQ3aXq4lq4TE+WamJMTXp6mqu1DNhwugQqurW6p3uLFsd8R3ZQ03Z7NVMQte4dZy7iz7tuLcmaWCWXEcq2U2bKfl7JrMBsURxCajU6J8qZa7oc15gDh0OVAfIj1hsex0XDtj0UMC5dp0IB8BoxxGTLZnkSziZFoJK5MJs4qcLZcrNiexQFrunoke7UWNqYDosCcXD3ryADBZEFCNW/GaS2JzIXPxjpJYBFY+QXkKsWztkeqyrl2slgxOwkUACqkRMj8OIL+YL9LMGHzztXWEeSod3I3S1/ZlXMf/dimQOj5RClzFcguyjHBiuJi7QD4FXD45hHbmG7FP1MOS+RQRwRskh78+aKL4kXHE6zSG/R3oTPc37r42h6/WHxro/IXzzt86l7X8fNM4k0/juJSZIz8he253W4ecX7Lj1XdEfEf593ycJHFKvYrq7JE0bygSGKZtDAHHsievR+wXUCOzYlw0ADPgR84z+SHEWMzpUCABoXwrufR4wcYzBK42nrZ85KtL16kDlzJ1AlbilKwZyG1NIT670GEXKz0p7svPkkX+R8VO2NrzI+OUC48gdKZOavitv+AFZtIskW2bRfvGTxk45fxQmCU5wyIkoSaxgK//5FQ/rmkIYxZT0fa0VLA/I1KcYr0A90Ppk5l0DGV7Kfn/xVQnKQUwyG2Wk9S+Wi9c9QTobG/ObJ2eHjVe6dyoOURX/yT+LNnL0zHH6/8B</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>0F703D3B19D62B79E05307991F0A29F9</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9053e94d-7277-4c3c-8b54-20f01791244e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8932435-dd5d-4c50-9fa6-9024a525da4b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Linked LASP Test Cases_P2" id="79718de1-d60f-493f-b1d7-19b357998995"><con:description/><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\ashwin.tikle\Desktop\stream delete 1.0.6.1.P</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30000 - StreamDelete - LLP - Establish Testing Stage" searchProperties="true" id="1c10a018-b514-48b2-b966-39122f347996"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="76864000-7580-4d3d-be39-24551dd0a82b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tP.setPropertyValue("StreamCreateCount","12");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="dd54b5df-f919-432a-9974-970d0bbd6b71"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="c7860c55-c536-420a-b848-ef4a0715afee" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="b1a9d94b-1803-43e3-a4d9-445c80c4064f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="42afe185-a70d-4f9d-8f25-71fdd0ac34b0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="--- Remove all Parental Control Policies" id="d173b12f-a3f1-4a6c-ab0b-9df7cd8e1abd" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="0a627989-f3f4-49fe-9278-cee7a29c6375"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set CID's content rating to US:US:MPAA:G" id="27752cec-f8bf-49f0-9a43-86a45da474cb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

String cid     = tP.getPropertyValue("cid");
String region  = "US"
String country = "US"
String system  = "MPAA";
String rating  = "G";

assert a.sqlSetRating(cid,region,country,system,rating) == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account and User Country to US" id="f659d88a-bf36-4ba2-b2cb-8f5d6112eaae"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbacct;
def dbuser;

String accountoid = tC.getPropertyValue("accountoid").toString();
String useroid = tC.getPropertyValue("useroid").toString();
String country = "US";

try {
	dbacct = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));	
	dbuser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));	
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbAccount|dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	assert dbacct.accountSetCountry(accountoid,country) == 1;
	assert dbuser.userSetCountry(useroid,country) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_042153</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A13775254E05307991F0AC5A5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463054D94207561E05307991F0AAD0C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvM4ZSxvLK5AFYFkQkKWYcnCy5SQ26CMkcGSDeTrr2TAAUJymZknl9qt06cXdfcZx9PQ8hqcQyxoxArLaci4l0lrWhIzL8Kcco/hKXBPEK/XuO14VhF5eHtFK7RbNe1XGVccsHFFR2Vc0h1SsvURjCzdwlbgo5IzqgaWVOU8gTbjAjNR0yxkujpydMvum8hzLc8pF91qZagVHiHmEluqFJG2IbXkNW0ixMwzjMViUVzYxSgeGxZCpvF82+mRCUyxVj9be5QZiusbfVL0gUAYkiKJpsaZsadz5nOvR8cMiySGjS3/M1vIQFVD6vicjr9p+V3w2yyIsmMTs4hRgkP6hlV8bkFMIr/QCMdRTMVk+qkTJlLAOiyJTkyHfdOMfWonAu0xjDnW+QSbG6wuBBADI1AYdNs17dtpWcuu9mPMeBDFU75//DM+wFIIoxn4Ot+6taF2OuCRSNXPgHhtRsKE0xTuVLHOMAG+ySaQ06EKDzEEdNmhXBbokit2xi69g+M6Gi06Bi7+JkE7yVmDPOIwgfo9a5eDG5y0mungJe1/L6HBgL8MXLxCtYzArnImyFO7Ph4UZV5E6xs/G89D+nS9OC9fD3nyfeEHl/HN/dtqeJ3a5crk7efza6s9HF91b+nr4HWBnsKLHzT5fp3OK3eN1GyKwTkfLO8qfeGP2c3k0i+VRtertyB6HC+M1YU/eLtr2X18cT9hKyu9upqTcHjlzKsxeuJPN4/n8Txx0O1DP239bN++DOyg82J3gzKzO+GP+8vhaP7DNPj0lTlXvJa7s8N/X7Z9871k9ApEbI+qDNqtwqXMEhZfNzMlob4eZKreTDUfLoAJra5uqd7hJbLdUd+TOVyfTadkI9dpVR3zsuyWzAvk2qhcrZqXqNFooea2yaxZHFBsRiygypZqueuy+ZogmXocmA+xnkaJ7HRc+wKxhQUutFlXPoKIcehHsj2TeSlGM3NUMW1ixrPw95sP4I5dUyvcReKe3ceNQEC835PtvZ7cBUJnFFTjVnXNZWFzIWMxx2kiQrOY4iKDRLb2WHVZz3IqrsHpdBaCYmpMIz8JoTibzLLIGHz9tXRMeCbtXvSz1/apX4f/tiGQOj5VClz5cg4yjXBkuNhbRz44XDo6hLbwjcSn6mHJeIqYkjWT/V/vZaLqI6+RVqfRe9iSznX/4O6vZu+X+ZcAnX8w3vlX4zKXH28aX8TTOExlbshP6Y7Z7dYh55fsePVtIc6xWZwXkzRNstpzHNuIJbyhisBAltEDksievOpHv4EZOYpx0gDMiR8Yz+X7FBMxYT2BBUzlWylkxxM2nh5wtfG05SNfnrpO7ZmUoROwFMdkzVBua4rxlwsd8YjSk+IH+VlEsf+esSNYO3akn3LhEZSN1UkNv9UndUEiCUtl247iXfBjAMeM7wvzIOdchCyoUSLg8z8F1Y9rGiYkSphot7RMsDsjMp5iNQPvXekDTDaG8r2U/v9iqtOsBAjIbZbTDF+tF556Amy8M2c2Rj+MGmQ1TLtcci3X2R01Tbfh5kHZY1f/IP4o2YnTYY3X/wM=</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1463002A13765254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A13765254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1463054D941F7561E05307991F0AAD0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463054D941F7561E05307991F0AAD0C</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>80969</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A137E5254E05307991F0AC5A5</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A137E5254E05307991F0AC5A5</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31501 - StreamDelete - LLP - StreamNotFound - Streamhandle already in deleted status - 404 Not Found_MIGRATED" searchProperties="true" id="9b777060-dc4c-4210-9579-00c1e313a72e" disabled="true"><con:description> This test case will verify the application tier properly responds to a StreamDelete request with a stream handle already in deleted status. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0a8a659f-e2bd-45a5-b42f-e6d2e12ad5d3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="d284805d-ac78-4731-91bb-cdcce1816b5e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d29364c9-f925-4ffd-b9ab-91f0cf3c89a2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a354620d-e3cb-4166-ad36-354746e38382"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="d4003f3b-e83d-4348-b38d-5596856ed21c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="c9c19104-1825-4a17-98c2-8fe0ae5afc9f"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="41f7f1a0-a488-4a6b-a2f0-0a26269c8bf6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update the expected StreamDelete results" id="048426a8-46ca-46ee-95bf-e1da7cc2000d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_NOT_FOUND");</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete on the already-deleted Stream Handle" id="4c404f86-e11f-49c3-81c2-ec0804ab9b2b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="7ebf09d3-bdd7-417e-be89-1b63d30aa7e8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="8bbca544-6f31-4f3a-9c3a-c407886dee3c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="cd1e82a6-aac7-4e64-9d66-5ae2a5b4a2a9" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f4ec1ae0-8a5f-47a1-9a41-09b65a3f13a4" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value>${#Project#assertLLPuuid}</con:value></con:property><con:property><con:name>accountid</con:name><con:value>0900</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvM4ZSxvLK5AFYFkQkKWYcnCy5SQ26CMkcGSDeTrr2TAAUJymZknl9qt06cXdfcZx9PQ8hqcQyxoxArLaci4l0lrWhIzL8Kcco/hKXBPEK/XuO14VhF5eHtFK7RbNe1XGVccsHFFR2Vc0h1SsvURjCzdwlbgo5IzqgaWVOU8gTbjAjNR0yxkujpydMvum8hzLc8pF91qZagVHiHmEluqFJG2IbXkNW0ixMwzjMViUVzYxSgeGxZCpvF82+mRCUyxVj9be5QZiusbfVL0gUAYkiKJpsaZsadz5nOvR8cMiySGjS3/M1vIQFVD6vicjr9p+V3w2yyIsmMTs4hRgkP6hlV8bkFMIr/QCMdRTMVk+qkTJlLAOiyJTkyHfdOMfWonAu0xjDnW+QSbG6wuBBADI1AYdNs17dtpWcuu9mPMeBDFU75//DM+wFIIoxn4Ot+6taF2OuCRSNXPgHhtRsKE0xTuVLHOMAG+ySaQ06EKDzEEdNmhXBbokit2xi69g+M6Gi06Bi7+JkE7yVmDPOIwgfo9a5eDG5y0mungJe1/L6HBgL8MXLxCtYzArnImyFO7Ph4UZV5E6xs/G89D+nS9OC9fD3nyfeEHl/HN/dtqeJ3a5crk7efza6s9HF91b+nr4HWBnsKLHzT5fp3OK3eN1GyKwTkfLO8qfeGP2c3k0i+VRtertyB6HC+M1YU/eLtr2X18cT9hKyu9upqTcHjlzKsxeuJPN4/n8Txx0O1DP239bN++DOyg82J3gzKzO+GP+8vhaP7DNPj0lTlXvJa7s8N/X7Z9871k9ApEbI+qDNqtwqXMEhZfNzMlob4eZKreTDUfLoAJra5uqd7hJbLdUd+TOVyfTadkI9dpVR3zsuyWzAvk2qhcrZqXqNFooea2yaxZHFBsRiygypZqueuy+ZogmXocmA+xnkaJ7HRc+wKxhQUutFlXPoKIcehHsj2TeSlGM3NUMW1ixrPw95sP4I5dUyvcReKe3ceNQEC835PtvZ7cBUJnFFTjVnXNZWFzIWMxx2kiQrOY4iKDRLb2WHVZz3IqrsHpdBaCYmpMIz8JoTibzLLIGHz9tXRMeCbtXvSz1/apX4f/tiGQOj5VClz5cg4yjXBkuNhbRz44XDo6hLbwjcSn6mHJeIqYkjWT/V/vZaLqI6+RVqfRe9iSznX/4O6vZu+X+ZcAnX8w3vlX4zKXH28aX8TTOExlbshP6Y7Z7dYh55fsePVtIc6xWZwXkzRNstpzHNuIJbyhisBAltEDksievOpHv4EZOYpx0gDMiR8Yz+X7FBMxYT2BBUzlWylkxxM2nh5wtfG05SNfnrpO7ZmUoROwFMdkzVBua4rxlwsd8YjSk+IH+VlEsf+esSNYO3akn3LhEZSN1UkNv9UndUEiCUtl247iXfBjAMeM7wvzIOdchCyoUSLg8z8F1Y9rGiYkSphot7RMsDsjMp5iNQPvXekDTDaG8r2U/v9iqtOsBAjIbZbTDF+tF556Amy8M2c2Rj+MGmQ1TLtcci3X2R01Tbfh5kHZY1f/IP4o2YnTYY3X/wM=</con:value></con:property><con:property><con:name>userid</con:name><con:value>600</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7CF6F08FBFAF4827BA5AF0ED5C20430F</con:value></con:property><con:property><con:name>astreamrowcnt</con:name><con:value>3</con:value></con:property><con:property><con:name>bstreamrowcnt</con:name><con:value>3</con:value></con:property><con:property><con:name>ahistoryrowcnt</con:name><con:value>3</con:value></con:property><con:property><con:name>bhistoryrowcnt</con:name><con:value>3</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A16335254E05307991F0AC5A5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>coorcsnodeuserid</con:name><con:value>10060007</con:value></con:property><con:property><con:name>streamdeletenodeaccount</con:name><con:value>910600</con:value></con:property><con:property><con:name>llpnodeuserid</con:name><con:value>100600</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpnodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpcsnodeaccountid</con:name><con:value>9109115</con:value></con:property><con:property><con:name>coorcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>llpaccountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>portOrg1Full1_nodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>portalnodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>portOrg1Basic1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>streamcreateassert</con:name><con:value>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</con:value></con:property><con:property><con:name>transactionid</con:name><con:value/></con:property><con:property><con:name>llpnodeaccountid</con:name><con:value>910600</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeaccountid</con:name><con:value>09109110</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463054D94207561E05307991F0AAD0C</con:value></con:property><con:property><con:name>portalnodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_01501 - StreamDelete - FUNC - LLASP - StreamNotFound - Streamhandle already in deleted status</con:value></con:property><con:property><con:name>dlpOrg1Full1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>nickname</con:name><con:value/></con:property><con:property><con:name>rtruserid</con:name><con:value>0600</con:value></con:property><con:property><con:name>portOrg1Basic1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>llporgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>portOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Full1_nodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>dlpnodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Standard1_useroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>portOrg1Full1_orgid</con:name><con:value>10</con:value></con:property><con:property><con:name>dlpuseroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>portOrg1Basic1_nodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeuserid</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeuserid</con:name><con:value>01006042</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>portaluserid</con:name><con:value>600</con:value></con:property><con:property><con:name>coorcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>portalaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>rtraccountid</con:name><con:value>0900</con:value></con:property><con:property><con:name>llpassert</con:name><con:value>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</con:value></con:property><con:property><con:name>portalassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreaterequestuser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">100600</con:value></con:property><con:property><con:name>streamcreatrequestuser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeuserid</con:name><con:value>10060210</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>llpnodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>dlpcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpcsnodeuserid</con:name><con:value>10060016</con:value></con:property><con:property><con:name>portOrg1Full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>portalnodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>dlpOrg1Basic1_useroid</con:name><con:value>0604</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeuserid</con:name><con:value>01006044</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A13775254E05307991F0AC5A5</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpcsnodeid</con:name><con:value>9116</con:value></con:property><con:property><con:name>usernodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeaccountid</con:name><con:value>910602</con:value></con:property><con:property><con:name>portOrg1Basic1_orgid</con:name><con:value>10</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>coorcsnodeid</con:name><con:value>9107</con:value></con:property><con:property><con:name>dlpOrg1Basic1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>streamdeleterequestuser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpOrg1Standard1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpOrg1Full1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpaccountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>coorcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Basic1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>portOrg1Full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>coorcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>portOrg1Standard1_orgid</con:name><con:value>10</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpOrg1Full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>dlpassert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpOrg1Basic1_nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>dlpOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>portOrg1Full1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>llpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Basic1_useroid</con:name><con:value>0604</con:value></con:property><con:property><con:name>skipRemoveStreamsFlag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpcsnodeuserid</con:name><con:value>10060015</con:value></con:property><con:property><con:name>coorcsnodeaccountid</con:name><con:value>9109107</con:value></con:property><con:property><con:name>rtrnodeuserid</con:name><con:value>100602</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeaccountid</con:name><con:value>09109110</con:value></con:property><con:property><con:name>llpcsnodeid</con:name><con:value>9115</con:value></con:property><con:property><con:name>dlpcsnodeaccountid</con:name><con:value>9109116</con:value></con:property><con:property><con:name>dlpOrg1Basic1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreatenodeaccount</con:name><con:value>910600</con:value></con:property><con:property><con:name>rtrorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeuserid</con:name><con:value>10060410</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Standard1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>dlpOrg1Standard1_useroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>llpuseroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>dlporgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>portOrg1Full1_nodeaccountid</con:name><con:value>09109110</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>streamdeleteassert</con:name><con:value>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</con:value></con:property><con:property><con:name>portalorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpcsaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases</con:value></con:property><con:property><con:name>dlpOrg1Standard1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>bSTREAMDATAcount</con:name><con:value>3</con:value></con:property><con:property><con:name>bSTREAMDATAHISTORYcount</con:name><con:value>3</con:value></con:property><con:property><con:name>aSTREAMDATAcount</con:name><con:value>4</con:value></con:property><con:property><con:name>aSTREAMDATAHISTORYcount</con:name><con:value>4</con:value></con:property><con:property><con:name>streamcreateuseroid</con:name><con:value/></con:property><con:property><con:name>errorRespType</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>rtrnode_id</con:name><con:value>urn:dece:org:org:dece:0912</con:value></con:property><con:property><con:name>streamdeletenodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>node_id</con:name><con:value>urn:dece:org:org:dece:910</con:value></con:property><con:property><con:name>dlpOrg1Standard1_node_id</con:name><con:value>urn:dece:org:org:dece:914</con:value></con:property><con:property><con:name>streamcreatenodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>portOrg1Basic1_node_id</con:name><con:value>urn:dece:org:org:dece:10</con:value></con:property><con:property><con:name>dlpOrg1Basic1_node_id</con:name><con:value>urn:dece:org:org:dece:10</con:value></con:property><con:property><con:name>portOrg1Full1_node_id</con:name><con:value>urn:dece:org:org:dece:10</con:value></con:property><con:property><con:name>dlpOrg1Full1_node_id</con:name><con:value>urn:dece:org:org:dece:914</con:value></con:property><con:property><con:name>llpnode_id</con:name><con:value>urn:dece:org:org:dece:910</con:value></con:property><con:property><con:name>portOrg1Standard1_node_id</con:name><con:value>urn:dece:org:org:dece:10</con:value></con:property><con:property><con:name>streamCreateAPI</con:name><con:value>StreamCreate for LLP</con:value></con:property><con:property><con:name>streamDeleteAPI</con:name><con:value>StreamDelete for LLP</con:value></con:property><con:property><con:name>restSName</con:name><con:value>DELETE - StreamDelete Second Time</con:value></con:property><con:property><con:name>dbrowVerify</con:name><con:value>Verify STREAM_DATA row</con:value></con:property><con:property><con:name>dbrowVerifyHistory</con:name><con:value>Verify STREAM_DATA_HISTORY row</con:value></con:property><con:property><con:name>verifyDBrow</con:name><con:value>Verify STREAM_DATA row</con:value></con:property><con:property><con:name>verifyDBrowHistory</con:name><con:value>Verify STREAM_DATA_HISTORY row</con:value></con:property><con:property><con:name>verifyAPIResponse</con:name><con:value>StreamDelete Response Body and HTTP Header Set Check</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_042536</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:7CF6F08FBFAF4827BA5AF0ED5C20430F</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:1463002A16335254E05307991F0AC5A5</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1463054D941F7561E05307991F0AAD0C</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1463002A13765254E05307991F0AC5A5</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463054D941F7561E05307991F0AAD0C</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A13765254E05307991F0AC5A5</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1463054D94207561E05307991F0AAD0C</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>7CF6F08FBFAF4827BA5AF0ED5C20430F</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:7CF6F08FBFAF4827BA5AF0ED5C20430F</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A137E5254E05307991F0AC5A5</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1463054D94207561E05307991F0AAD0C</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77969</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A137E5254E05307991F0AC5A5</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>048426a8-46ca-46ee-95bf-e1da7cc2000d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31505 - StreamDelete - LLP - AccountIdUnmatched - Malformed accountIds in URL - 403 Forbidden_MIGRATED" searchProperties="true" id="9a79fa5b-4905-404b-9d2d-f14fbb1c7358" disabled="true"><con:description>This test case will verify the application tier properly handles StreamDelete API invocations that contained malformed accountId strings in the URL.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f35320c7-9708-4106-83a9-7d8979cae0b8"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_ACCOUNTID_MISMATCH");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="51713f4e-2957-4c84-aea0-737d6fa824a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="1b8b8a3d-3ebc-46d6-a663-92b3c6f59f96" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a071a3e3-ab67-4d1d-a77f-7872ec2e12b2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a46bb97b-2dd8-4230-aadd-248385e47e8a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="datasource" name="Grid of malformed accountIds" id="2f80255e-0889-407b-9681-87f4ea0dc438"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:accountid:org:dece:a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:accountid:org:dece:b&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:accountid:org:dece:cc&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:accountid:org:dece:da&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:accountid:org:dece:EfG&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:accountid:org:dece:a-1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:accountid:org:dece:!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:accountid:org:dece:11111a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:accountid:org:dece:b2222&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:accountid:org:dece:11c111&lt;/con:entry></row></con:configuration></con:dataSource><con:property>a</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="5720fb41-29ef-4966-bfd5-0e9940a6f1df"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="true" entitize="false" transferChildNodes="false"><con:name>a</con:name><con:sourceType>a</con:sourceType><con:sourceStep>Grid of malformed accountIds</con:sourceStep><con:targetType>assertionAccountIdFULL</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="c655d524-625c-45f5-adf7-df117e8cad72"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Get next malformed accountId" id="099ce3fd-d6b5-4b4d-bfdb-b3926c4025fc"><con:settings/><con:config><dataSourceStep>Grid of malformed accountIds</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="63a1e56b-60e8-467b-aad3-f8061db6a9ce" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_042536</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">6CB4036BE5814DA79514D50FB8BDDEED</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:6CB4036BE5814DA79514D50FB8BDDEED</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A16C45254E05307991F0AC5A5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:1463002A16C45254E05307991F0AC5A5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:11c111</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1463054D941F7561E05307991F0AAD0C</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvM4ZSxvLK5AFYFkQkKWYcnCy5SQ26CMkcGSDeTrr2TAAUJymZknl9qt06cXdfcZx9PQ8hqcQyxoxArLaci4l0lrWhIzL8Kcco/hKXBPEK/XuO14VhF5eHtFK7RbNe1XGVccsHFFR2Vc0h1SsvURjCzdwlbgo5IzqgaWVOU8gTbjAjNR0yxkujpydMvum8hzLc8pF91qZagVHiHmEluqFJG2IbXkNW0ixMwzjMViUVzYxSgeGxZCpvF82+mRCUyxVj9be5QZiusbfVL0gUAYkiKJpsaZsadz5nOvR8cMiySGjS3/M1vIQFVD6vicjr9p+V3w2yyIsmMTs4hRgkP6hlV8bkFMIr/QCMdRTMVk+qkTJlLAOiyJTkyHfdOMfWonAu0xjDnW+QSbG6wuBBADI1AYdNs17dtpWcuu9mPMeBDFU75//DM+wFIIoxn4Ot+6taF2OuCRSNXPgHhtRsKE0xTuVLHOMAG+ySaQ06EKDzEEdNmhXBbokit2xi69g+M6Gi06Bi7+JkE7yVmDPOIwgfo9a5eDG5y0mungJe1/L6HBgL8MXLxCtYzArnImyFO7Ph4UZV5E6xs/G89D+nS9OC9fD3nyfeEHl/HN/dtqeJ3a5crk7efza6s9HF91b+nr4HWBnsKLHzT5fp3OK3eN1GyKwTkfLO8qfeGP2c3k0i+VRtertyB6HC+M1YU/eLtr2X18cT9hKyu9upqTcHjlzKsxeuJPN4/n8Txx0O1DP239bN++DOyg82J3gzKzO+GP+8vhaP7DNPj0lTlXvJa7s8N/X7Z9871k9ApEbI+qDNqtwqXMEhZfNzMlob4eZKreTDUfLoAJra5uqd7hJbLdUd+TOVyfTadkI9dpVR3zsuyWzAvk2qhcrZqXqNFooea2yaxZHFBsRiygypZqueuy+ZogmXocmA+xnkaJ7HRc+wKxhQUutFlXPoKIcehHsj2TeSlGM3NUMW1ixrPw95sP4I5dUyvcReKe3ceNQEC835PtvZ7cBUJnFFTjVnXNZWFzIWMxx2kiQrOY4iKDRLb2WHVZz3IqrsHpdBaCYmpMIz8JoTibzLLIGHz9tXRMeCbtXvSz1/apX4f/tiGQOj5VClz5cg4yjXBkuNhbRz44XDo6hLbwjcSn6mHJeIqYkjWT/V/vZaLqI6+RVqfRe9iSznX/4O6vZu+X+ZcAnX8w3vlX4zKXH28aX8TTOExlbshP6Y7Z7dYh55fsePVtIc6xWZwXkzRNstpzHNuIJbyhisBAltEDksievOpHv4EZOYpx0gDMiR8Yz+X7FBMxYT2BBUzlWylkxxM2nh5wtfG05SNfnrpO7ZmUoROwFMdkzVBua4rxlwsd8YjSk+IH+VlEsf+esSNYO3akn3LhEZSN1UkNv9UndUEiCUtl247iXfBjAMeM7wvzIOdchCyoUSLg8z8F1Y9rGiYkSphot7RMsDsjMp5iNQPvXekDTDaG8r2U/v9iqtOsBAjIbZbTDF+tF556Amy8M2c2Rj+MGmQ1TLtcci3X2R01Tbfh5kHZY1f/IP4o2YnTYY3X/wM=</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463054D94207561E05307991F0AAD0C</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A13775254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463054D941F7561E05307991F0AAD0C</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A13765254E05307991F0AC5A5</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1463054D94207561E05307991F0AAD0C</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>6CB4036BE5814DA79514D50FB8BDDEED</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:6CB4036BE5814DA79514D50FB8BDDEED</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A137E5254E05307991F0AC5A5</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1463054D94207561E05307991F0AAD0C</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77974</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A137E5254E05307991F0AC5A5</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31506 - StreamDelete - LLP - StreamOwnerMismatch - Stream handle supplied CREATED_BY different LLP - 403 Forbidden_MIGRATED" searchProperties="true" id="f9c34769-8241-46b7-88ff-d14a2d141622" disabled="true"><con:description>This test case will verify the proper response when the stream handle supplied to be deleted was created by a LASP different than the LASP associated with the request.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="89181505-2c06-423d-b76a-9e70ea9b4c23"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_OWNER_MISMATCH");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="fe4998e9-6e66-4ce1-bd09-da3f56715b9f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="826935df-970a-41f0-ba23-2af52e13facb" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="98cc734f-10a3-4d78-bf45-1eb2965288fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="b4187963-d58b-4cab-9d3a-cf732a35fad8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="delay" name="Delay I" id="303154de-27e2-4b9b-a936-1a5ff57f633a"><con:settings/><con:config><delay>3000</delay></con:config></con:testStep><con:testStep type="groovy" name="Change the Streams STREAM_DATA.CREATED_BY value" id="3df54536-c60d-438d-abcb-0a7902e00008"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
//a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
//
//assert a.streamSetCreatedBy(tC.getPropertyValue("streamhandle"),'04',) == 1;
//


tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="eaf76da3-8584-4b67-b937-90a192ebbd12"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f8f6bcb7-92aa-4ad2-9a57-767d1cfc0938" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_042536</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">383FFD7504034D808F1DD4151176FBB5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:383FFD7504034D808F1DD4151176FBB5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463054D988B7561E05307991F0AAD0C</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:1463054D988B7561E05307991F0AAD0C</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1463002A17635254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1463002A176F5254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbvc9o8DP5XuPTjLjgJ4VeucJdC27HRtS+0XdcvPeMo4DWx09gJ0L9+doAMKO3Ltk85K7L0SHos6VTgOHI8XwhIJeWssogjJrxC2jGylHkcCyo8hmMQniTe2L8aek7V8vDmilEZ9DvGU1ivtQIg2Gy5k8B0m8222XIsMEPc1IdWe+IGSlWIDAZMSMxkx3Asu25arunUbm3bs2yvXq82HPfRqNxDKpRtpVK1jDWohegYMykTD6H5fF6d16o8nSLHsmz0cDUckxnE2OieriIqHKXdtT6pKmgQRaRKeIxO0Y7OaSC8MZ0yLLMU1r6C93xZyGojpRMIOj0xyrsQDFjIi2MPM84owRF9xTo/VyBnPKj40ZSnVM7id4OwLW3YhAUxie2yEwPtQjvS0A7CVGBTzLC9tjWCEFJgBCp3o0HHODmuasXV2xQzEfI0FrvHP8MDLIeIJxCYYhPWGtrxBg9kqnsKxBswEmWC5vBNkzXBBMS6mkCON1W5SSGkiyEViqALodGhbXh7x1U2+nQKQv5NgbaKszJyj6MMuhP7U/0SXc7d/vMMcKOWsTC+thKe3fudAsC2ciEoS7s67pGyJNHqxgWOrfYyuPvO6XLhR1ficXIP+Zz3Hq79cQ9m1nxCfwTCfX7+fn3Dh+7SWY7QQ/I5B/wlOT9Lz92oVXul2adRvzY5f/xmXw96KJ99nSb/NR23RfPGyxk/G6AvF26bnD3bP/B55qOghykE3Gl9fWxn4vMdmkW4dXMpeN0d3GZhS6D75eukOW9dIUeI4d3PfO7fdcpwtvDvyjZvfpxNfgKRm6OmwaBfuVBVwvLjZqYlNDDDQtVLdPMREpg0uvqW7h1eptodDTxVw9XZdhs1y3J8u9m4qDt199yq16xmu21fWH6v7tc3TWaFYg9ij7OQal+65a5o8zFAEnsCWACpmfNMdTphfGCxjyWuDNhIPQLOBNxy1Z5FU9C5zFt52GrY7fj1NbSe0ywlkVH5xuU1u079UEK625PdnZ48AkITCrpxa14LRWwhVS5ecJ7JyK7muMogU6091V3WUzyoI0HjJAKNFMU8yCKoJrOkyAwSq69jYiIK6ej8tnht78a1/2+TAqUTUK0gdCxnoMoIB4aLuwnkTcCNg0NoY97PAqoflsqnTClZIdn99Zsmmh8lR/pDf3yzAV3q/sHdp974yf5LA8N/cD78V+eqlm9vog/yifZLWToKcrrldrN1qPmlOl53Q8QXbFdfqlmeZwX3XLeGUmUeaRIgy0FjIJnqyctb/gwMlVbQUQOwBL7nvJTvQszkjI0llhCrt1IpjkdsPGMQeuMZqEe+OHad2nGpUidhIQ/JepHa1jTiDxc64hGtp8Q36jPn6e/AD9na8qPiVAuPpGyqT3r4Ld/hBeHKLFVtm6fbxg8ZOOR8V1gmucQiFaEmmYT3/1R0P+4YmBCeMTnoG4Vge0YUOOUyAe+30hszxRgq91L6/4upSQsKEFDbrKCFfb1eePoJsOnWnFk7fWfU1D4aNbvoum/EbyVbedrnePcX</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A17705254E05307991F0AC5A5</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A17645254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A176F5254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A17635254E05307991F0AC5A5</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1463002A17705254E05307991F0AC5A5</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>383FFD7504034D808F1DD4151176FBB5</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:383FFD7504034D808F1DD4151176FBB5</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A176B5254E05307991F0AC5A5</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1463002A17705254E05307991F0AC5A5</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77976</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A176B5254E05307991F0AC5A5</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31508 - StreamDelete - LLP - AccountIdUnmatched - URL accountId element not supplied - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="dc559fb2-3281-4c9d-bf7c-c856e632a714" disabled="true"><con:description>This test case will verify proper tier response when the accountId on the request URL is null.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="df414801-0f6d-4723-962d-55111416917c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_ACCOUNTID_MISMATCH");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","active");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="2c4d047b-670c-4e8c-97d9-dc7fdf0e18eb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="bbb10c45-7b5e-4028-9fe3-3bbcb9a00b8f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="874420f3-9f3c-402a-8478-80d806c06743"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="ab849bb4-e554-451e-a89e-d8b704f43c95"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set account to null" id="9117b78c-4f5a-46d7-8088-f4e62ee72e7d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionAccountIdFULL",tP.getPropertyValue("urnaccount"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="ad7d47a8-1505-4bf7-bfe4-8a0cbfb6b0ec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b6c26d02-7e05-4203-943b-a3cc643de867" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="34bf046b-d70c-42c2-a890-0c53f5696806" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A17645254E05307991F0AC5A5</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbvc9o8DP5XuPTjLjgJ4VeucJdC27HRtS+0XdcvPeMo4DWx09gJ0L9+doAMKO3Ltk85K7L0SHos6VTgOHI8XwhIJeWssogjJrxC2jGylHkcCyo8hmMQniTe2L8aek7V8vDmilEZ9DvGU1ivtQIg2Gy5k8B0m8222XIsMEPc1IdWe+IGSlWIDAZMSMxkx3Asu25arunUbm3bs2yvXq82HPfRqNxDKpRtpVK1jDWohegYMykTD6H5fF6d16o8nSLHsmz0cDUckxnE2OieriIqHKXdtT6pKmgQRaRKeIxO0Y7OaSC8MZ0yLLMU1r6C93xZyGojpRMIOj0xyrsQDFjIi2MPM84owRF9xTo/VyBnPKj40ZSnVM7id4OwLW3YhAUxie2yEwPtQjvS0A7CVGBTzLC9tjWCEFJgBCp3o0HHODmuasXV2xQzEfI0FrvHP8MDLIeIJxCYYhPWGtrxBg9kqnsKxBswEmWC5vBNkzXBBMS6mkCON1W5SSGkiyEViqALodGhbXh7x1U2+nQKQv5NgbaKszJyj6MMuhP7U/0SXc7d/vMMcKOWsTC+thKe3fudAsC2ciEoS7s67pGyJNHqxgWOrfYyuPvO6XLhR1ficXIP+Zz3Hq79cQ9m1nxCfwTCfX7+fn3Dh+7SWY7QQ/I5B/wlOT9Lz92oVXul2adRvzY5f/xmXw96KJ99nSb/NR23RfPGyxk/G6AvF26bnD3bP/B55qOghykE3Gl9fWxn4vMdmkW4dXMpeN0d3GZhS6D75eukOW9dIUeI4d3PfO7fdcpwtvDvyjZvfpxNfgKRm6OmwaBfuVBVwvLjZqYlNDDDQtVLdPMREpg0uvqW7h1eptodDTxVw9XZdhs1y3J8u9m4qDt199yq16xmu21fWH6v7tc3TWaFYg9ij7OQal+65a5o8zFAEnsCWACpmfNMdTphfGCxjyWuDNhIPQLOBNxy1Z5FU9C5zFt52GrY7fj1NbSe0ywlkVH5xuU1u079UEK625PdnZ48AkITCrpxa14LRWwhVS5ecJ7JyK7muMogU6091V3WUzyoI0HjJAKNFMU8yCKoJrOkyAwSq69jYiIK6ej8tnht78a1/2+TAqUTUK0gdCxnoMoIB4aLuwnkTcCNg0NoY97PAqoflsqnTClZIdn99Zsmmh8lR/pDf3yzAV3q/sHdp974yf5LA8N/cD78V+eqlm9vog/yifZLWToKcrrldrN1qPmlOl53Q8QXbFdfqlmeZwX3XLeGUmUeaRIgy0FjIJnqyctb/gwMlVbQUQOwBL7nvJTvQszkjI0llhCrt1IpjkdsPGMQeuMZqEe+OHad2nGpUidhIQ/JepHa1jTiDxc64hGtp8Q36jPn6e/AD9na8qPiVAuPpGyqT3r4Ld/hBeHKLFVtm6fbxg8ZOOR8V1gmucQiFaEmmYT3/1R0P+4YmBCeMTnoG4Vge0YUOOUyAe+30hszxRgq91L6/4upSQsKEFDbrKCFfb1eePoJsOnWnFk7fWfU1D4aNbvoum/EbyVbedrnePcX</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A17635254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A176F5254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1463002A176F5254E05307991F0AC5A5</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A19545254E05307991F0AC5A5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:1463002A19545254E05307991F0AC5A5</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">282DFCFD784748469247B83CEF7ECC6E</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:282DFCFD784748469247B83CEF7ECC6E</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_043443</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A17705254E05307991F0AC5A5</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>1463002A17705254E05307991F0AC5A5</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>282DFCFD784748469247B83CEF7ECC6E</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:282DFCFD784748469247B83CEF7ECC6E</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A176B5254E05307991F0AC5A5</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>1463002A17705254E05307991F0AC5A5</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77978</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A176B5254E05307991F0AC5A5</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31509 - StreamDelete - LLP - StreamHandleIDNotValid - URL stream handle is NULL - 400 Bad Request_MIGRATED" searchProperties="true" id="d92e7682-804b-4fe2-a2a4-d7cadc0e68aa" disabled="true"><con:description>This test case will verify proper tier response when the stream handle is null.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="55feb419-995c-4ea2-b2d9-bbbc4196e483"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_NOT_VALID");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","active");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="703fea5f-e58d-45ff-a81e-52127f0dac42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="70bf4279-6dc2-4d3a-a2dd-44f6291bbe73" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set streamhandle to null" id="7719ff65-0376-400d-bf6e-9cfbd9595ba7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("streamhandleFULL",tP.getPropertyValue("urnstream"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="eaa8af56-f6ae-4de3-aaff-a949b4d9b320"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="ad1960c8-3856-401d-821f-f5357b6f990a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_043443</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_NOT_VALID</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14630A4EFD1B2258E05305991F0AA2AC</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14630A4EFD1B2258E05305991F0AA2AC</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14630A4EFD1C2258E05305991F0AA2AC</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14630A4EFD0F2258E05305991F0AA2AC</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14630A4EFD0F2258E05305991F0AA2AC</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14630A4EFD102258E05305991F0AA2AC</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPZxJzgJoYVMYSYFymYKvYV2Ly87xhHgNrHT2OGyv/7YAbJAaQ+7+5SxIkufpM+SLgROYsfzhYBMUs4qyyRmwiukLSPPmMexoMJjOAHhSeKF/nDgOVXLw9srRiXotoyfzRo+b9hNMOuEnJvuOGqYTWzXzEnNGdfrFrjR2FWqQuQQMCExky3Dsey6abmmUxvZtmdbntOontn2D6PyBJlQtpVK1TI2oJaiZcykTD2EFotFdVGr8myKHMuy0bfhICQzSLDRvlhHVDjK2ht9Uo2AQByTKuEJukB7OheR8EI6ZVjmGWx8Re/5spDVREonEnT6ySjvQhSwCS+OHcw4owTH9BfW+RmCnPGo4sdTnlE5S94Nwra0YROWxCS2yz4ZaB/aiYb2EGYCm2KG7Y2tB5hABoxA5fEhaBmfTqtacXWUYSYmPEvE/vHP8ACbQ8xTiEyxDWsD7XSDRzLVvgDiBYzEuaBzuNFkTTEBsakmkNNNVe4ymNDlgApF0KXQ6NAuvIPjOhtdOgUh/6ZAO8VZG3nCcQ5ttLTO8exLXQyun/3mJf+ccXzbPB91Vy+tAsCuciEoS7s+HpCyJNH6xn387SkLJzeL7w69ld2MEdn5AXA5/HWdPKVPtSAkzUUG0Pk2/Epv+737vqhbX79PicyRbExv/afnYBrVgmnnHga4/6PR/66uPYp+3ExeHr6c3XXc68X4JphfjVjv8+IZ9a3Hl3Ore22f94RchfaV+9y/f0Tk85D1p/1wTFLRCyXPBh149hdulw6GweRrczUetspwdvDvy7ZvPszHz0Dk9qhpEHQrV6pKWH7czLSERuakUPVS3XyEBCaNtr6le4eXq3ZHI0/VcH223bOa5bu9q6596Tj1Rs+q16x6s2lfWb7v+J1tk1mjOIDY4WxCtS/dcte0+RggSTwBLILMnPNcdTphfGCxiyWuBOxBPQLOBIy4as+2s/pF+Rm3JIxFbZ6m7AW/NpZ8blRuuLxlt5k/kZDt92R3ryc/AKEpBd24Na+FIraQKheveJ7L2K7OcZVBrlp7prus57iNOhI0SWPQSFHCozyGajpLi8wgsf46JiaikD70RsVrezeuw3/bFCidiGoFoWO5BFVGODJc7G0gbwI+OzqEtub9PKL6Yal8yoySNZL9X79povlRcqQ78MO7LehS9w/u/uyEP+2/NDD4B+eDf3Wuavn2Jvogn+iwlKWjaE533G63DjW/VMdrb4n4iu3qazWfz/OCe65bQ5kyjzQJkOWgEEiuevJqxF+AodIKOmkAlsAPnJfyfYi5nLFQYgmJeiuV4njCxhOC0BtPoB758tR1as+lSp2EpTwm68RqW9OIP1zoiEe0nhLfqc+CZ9Hvih2xteNHxakWHknZVJ/08Fu9wwvClVmq2jbPdo0fM3DM+b6wTHKJRSpCjXMJ7/+p6H7cMjAhPGcy6BqFYHdGFDjlKgXvt9IbM8UYKvdS+v+LqUkLChBQ26yghX29Xnj6CbDpzpzZOD0+aqyrj0bNPrr2G/FbyU6eDjne/g8=</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14630A4EFD172258E05305991F0AA2AC</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77979</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14630A4EFD172258E05305991F0AA2AC</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31702 - StreamDelete - LLP - StreamDelete against a stream with CREATED_DATE 31 days past - 200 OK" searchProperties="true" id="a64364ba-f33b-407f-bdc6-11fe8ea0a2e3" disabled="true"><con:description>This test case will verify proper processing of streams that were created within/outside the 30 day limit.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7f4e7653-9063-41ac-86cf-0dec60e1f9a2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_NOT_FOUND");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","");
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="baf5c10e-bcc9-4ec7-ba06-3316f17d94bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="dc4d9799-2d82-443e-89d4-e4eef097f73c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d27974b0-134f-4c0b-83a2-9b4334ddb93f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="f5aa8fa7-6111-4226-9fb9-ff1ca22148e9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set STREAM_DATA.CREATED_DATE 31 days into the past" id="b2d4da0f-59f1-4479-9b8b-3da99849be13"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
assert a.streamSetCreatedDate(tC.getPropertyValue("streamhandle"),-31) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="c097decf-f5ba-4e45-a1bb-a5f7918de2f8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="98be09d2-a7f5-4fd7-99a0-64fd4f8d87d0" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="595ca7a3-349a-491c-a876-054bec50b27b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="cfb3bf25-1a9b-4c1c-bc35-926e9dd563da" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="5e067035-2078-4796-ae33-3b548ef43b41" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150226_062857</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">65589CDA31074A00936BCF049F1F7D0C</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:65589CDA31074A00936BCF049F1F7D0C</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFED737B9F96B32E05307991F0AD2CC</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:0FFED737B9F96B32E05307991F0AD2CC</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0FFED73823906B2EE05307991F0A45E0</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0FFE9E5558795B10E05305991F0A4DA4</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0VxrlkjI2xAXsCMxBIP1oCBEiT9CYj5AWU2JKxZH769JUMuEBIPtpeebRe7Z790dm95igMLK/BOcSCMJpbhwHlXiqtaUlMPYY44R5FIXBPYG/UuOt6VsH00P6Kluu0atoLrgAuVbCj21Cp6rZZcfUq9m3dtiel6cStWKUqSFXOE+hQLhAVNc0yi45uWrpVHhdLnm16jl0oOe4PLfcdYi5tS5WCqe1ArXlNmwsReYaxWq0Kq1KBxTPDMs2i8XTXHeE5hEirX28jSh3F9Z0+LviAIQhwAbPQuDaOdK597o3IjCKRxLDz5X/kyzRM15A6PiezKy27C36HTll6vEGUUYJRQH4ilZ87EHPm5xrBjMVEzMMPgyiayrAOa6zjok2vNOMY2oWGjhDGHOl8joo7W0OYQgwUQ+5h2KlpV5dVLb06jhHlUxaH/Pj4Z3iALiFgEfg634e1g3a5wTOZql8D9joUBwknS+ipZo0QBr6rJuDLTeUGMUzJuku4bNA1V+iMQ3gnx202WmQGXPxNgQ6KszXyHQUJ1Fsb1xmO/zMGojlo3vbuntj3H2+Pm4fgR6eWAjhUTgVZabfHk6bMmmh7o8ny93nz67D6XLKH7sBx73lx3o8eJuGyO6b+2+O0TZuDbtP89oDMCb+J26MvLIkn4VOHtKrGM5q9lX4OXu1BZFXHTtRLNgEvh37VfY3vX4fN51HD2dx8dZ96jcdy8Dy7X+Tz5oatg7d2M++G5Lbfy//0J0/TL1XaDBq+GIzc+/4sz4P1W7u/fCz1y3ffel97q8c5rmXhHOA/lu3f/CiZvAIW+6Nqg04rdyurhMTnZKYkxNenqaoXKfLhAqjQ6uqW4g4vkXRHfE/WcHs2b2/bbttxnGrFdZpFs206JdNx3eKt2bBbDXtPMlsUJxBvGJ0S5UtR7rZtPgeIQ48D9SHWlyyRTMe1Tyy2kEC5Dh3KR8AohzGT9Dzn0cwOBASwjMLVAscxX8yZ42q5HhN92o8bUwHxMSWXjyh5CJhEBBRvq7bmsq+5kKlYoGUigmJhiQoUEsnssSJZz7KrjsFJGAWggBoh85MACtE8ShNj8O3X0hHmqXTYHqeP7cOwTv/tMyB1fKIUuIqlCbKKcGa22PtA3gVcPjuD9uYbiU/Uu5LpFDHBWyTHv353iWqPrEVa3cZosAed6f7B3Zeb0UvxLw10/8F591+dy1q+v2l8kk/jtJSZI39JDtzulw45viTh1feNuECFRSFZLpO09SqK2GNp3lBNYJiWMQKcSErejNkbUCOzYlw0/zLgJ84z+THERMzpSCABoXwrufR4wcIzAq4Wno584+tLt6kjlzJ1AtbinOwmkMuaQvzpPoc9rPSkeCA/Kxb7vyt2xtaBHxmn3HcEoTN1UrNv80FfYCbNEsnaLD40fs7AOefHwizJGRYhG2qSCPj4T07RcU1DGLOEik5LSwWHIyLFKTYReL+V3plJp1C2lpL/30t1krYAliuw1E/tq+3CU0+Azg7GzM7p6aRpVUpVq+Sa5abVTidNZTdpnLaZJeUIXf2d+L3kIE+nPV7/BQ==</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFE9E5558795B10E05305991F0A4DA4</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFE9E55587A5B10E05305991F0A4DA4</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFED73823906B2EE05307991F0A45E0</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFED73823916B2EE05307991F0A45E0</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>0FFE9E55587A5B10E05305991F0A4DA4</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>65589CDA31074A00936BCF049F1F7D0C</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:65589CDA31074A00936BCF049F1F7D0C</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFED73823986B2EE05307991F0A45E0</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0FFE9E55587A5B10E05305991F0A4DA4</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77988</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFED73823986B2EE05307991F0A45E0</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31749 - StreamDelete - LLP - StreamDelete against a stream with EXPIRATION_DATE 10 minutes into the past - 200 Ok_MIGRATED" searchProperties="true" id="eed6670a-7e87-4e86-985c-a0e36852001b" disabled="true"><con:description>This test case will verify proper processing of the STREAM_DATA.EXPIRATION_DATE value</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e85dcf04-454e-4e0d-8c42-5785deaf19f1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="82c807b1-055a-473b-b8f8-a1d2c9915308"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c0ef8b6f-3413-4a88-9a1c-eb933a542bb6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="971b572f-6bab-403d-9835-deed2955d5c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="b5342ef8-8062-49fa-a3c4-9610620e2346"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set STREAM_DATA.EXPIRATION_DATE 10 minutes into past" id="d37c1886-9590-4271-8ea0-95f9709d4893"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
assert a.streamExpireMinutes(tC.getPropertyValue("streamhandle"),10) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="471414bb-9d2b-4ddf-94b7-a7ddd1d5d06f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

//tC.setPropertyValue("expectDBDeletedBy", "1");
tC.setPropertyValue("expectDBDeletedBy", "221900");
tC.setPropertyValue("expectDBStatus","deleted");
//tC.setPropertyValue("expectDBDeletedBy_" + cnt, "1");
tC.setPropertyValue("expectDBDeletedBy_" + cnt, "221900");
tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e85325fb-5e57-404f-a0ea-6507ecc77033" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="8b90855b-7cf6-4c1e-b158-b3f25507806e" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="0baccaff-be8b-4f8e-b205-7a031c8aa605" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="0506bfaa-5a92-43bf-8e4b-371431d1e197" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20140906_100713</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6BD6EF7937588DE0401F0A05993B77</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6C429A90484CAFE0401F0A059962C4</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6C429A90484CAFE0401F0A059962C4</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6BD6EF7937588DE0401F0A05993B77</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77989</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31750 - StreamDelete - LLP - StreamDelete against a stream with EXPIRATION_DATE 23 hours into the past - 200 OK_MIGRATED" searchProperties="true" id="f408370b-cfed-4614-9d1b-6f0bc0a6a2e6" disabled="true"><con:description>This test case will verify proper processing of the STREAM_DATA.EXPIRATION_DATE value</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1648216d-2335-4a0d-8fc1-f574fe5f1fdb"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="a0678dfc-f0c8-4c8b-a971-2c4b2aa196d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="b36057ec-e469-418f-853f-0a6947f16032" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="cc836b39-48f0-4abd-9f53-cbd1339700ba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e42603bc-41e2-4ad8-a8e7-58097bf00057"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set STREAM_DATA.EXPIRATION_DATE 23 into past" id="4f47b663-7f83-4009-be60-68584027583c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
assert a.streamExpireHours(tC.getPropertyValue("streamhandle"),23) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="ad160c73-469f-4bde-b239-19d7add997be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

//tC.setPropertyValue("expectDBDeletedBy", "1");
tC.setPropertyValue("expectDBDeletedBy", "221900");
tC.setPropertyValue("expectDBStatus","deleted");
//tC.setPropertyValue("expectDBDeletedBy_" + cnt, "1");
tC.setPropertyValue("expectDBDeletedBy_" + cnt, "221900");
tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="13951fd1-b3aa-4d38-b414-8ff6822ce3d2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="3380942e-2c53-430c-adeb-6ea77b7bcffd" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="a751d190-327b-4d4f-bdf9-ec83dff754af" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="acebeaad-85c3-4e2a-83a7-04c4e0ad459e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20140906_100713</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdbc6rMEn33V1juR8twUbxVkqoBBoKKCuL1DWEEFEEZEPTXnwGjMdnZ2fs7DykzzXT3mu5Fs+YZm3uf7QKMURR7YVBWxJcKTbONZt3s1MwW3ak1uMam1mlz61qj027bFrKQXbcqZQXjBCkBjs0gfqmwNMPU6HqNaRpMo1vnuhz3xNTpVaU8QxEmkcmWJ7pSzvZ+gLtF1pdKEgXd0MQe7gbmHuFubHUnQB10yc6ueYNUeX2+giwSRq9uHB+6FGU92QSJ71tPVrinnqlPe55t3J14TmDGSYTec9r4pfLum6bpU1p/CiOHYmmapugORfbY2HN+VV5LN2dkK8EmvK4FMwgDzzJ972LmoFQUu6FdBr4TRl7s7v8QmqEYOg9dQ5lVs5hG8KtCfSQo0P1jpE8gI2zWsGsyt2A62qAIBRYqT3XlpfLrnxp4dTUiM8CbMNrjL+v/hggFJ+SHB2TX8O1gN3D/HvGbar0+I6urBJafYO+EhjlLDqaFcHkcoY2XDTxMuGfjctH9coZvBEPWf+nIM/WIk8CmvqmM6DkIx/9Pux5bdY0yM/0EvUIG8+nFbo2TiXAG/Fu/OtqsJQ9Crf1SQHjcfAV17/T7+itP77R6dwLU8Cine/G8o0/KvjGhz/V9kkHmmB7S1mFWVyfHKo47e9+Xe2l8GmoWZMKGuJm2TOKIsSbumkp2acL4iEvLFWHRReuskmBryS2GnnmNt4zh2w2TbTU5MIo4TnKdIT+GVLOzWnKuPZzIPetyqlLmie6cfaSwc2GlGmFWgm2gjvQtgF7mzNcQiury5eNMj2fIz9VH5+KQ+f8Lju6IZmzeF0I+KDbk7YzRq6ooYnIRBHCeOCBVeOCQvy0Y8s7u6O48uZPSPNA0CYgC72/hQAU7GTBTyLuqMJupmXABPd4ZzoijUQL+ild1mIrpUpxp2htMXcOWZ+e17CerCxyqABfOgqtCHc5E3YCqCsKrLVPFtZxt1YmaKtpSLJEAIswOF1vuxEjOPItVOHXCscsJl6wWM2KXzoP98LQ2oK8KqixMjvJEWddFDfaAvpxbrJQQ38tgfwhLyyn/4NQ7oC1AUkqTnOCiGrtUNabsUNTNwmZ8tqmK3FM1nApacSq5BNPebHr5qIXAq4K9hxk0wPhaC8sQpCG9WvSwOecCVQep6BTOfZjaoxsQVaPTknCt1QCmOtSnQ0nVlRSCwibC1MdrduiuZfdk1bWsZ4DtY2MEDc6lgDwP9JN15o4lU5bAej9jrLruWh7nmYswdVbtVNSWvX64UkiYIdAgz2uAAKJBfjRSfx4M+Bk3Ongd1kODjRTukRuVVCbs706XjG579ZEzHs45cbNrjWVvXDdtl1J8i93Wd0BRkN1nXM209SWli4F3aY760wXyouUlHnIa0/TaXEmfJ9OFGPot+22xnPar2dLSjNF4Mp2PL1k2PG7bFz9+G/Fv0aSnis5oiNAYW1WKNiXeaIucsHzbEj5tdBpxJeCoPADy1nGgRwjMv22vJHzTVUjIC1QhlYW5IE+ALFehwouatpFcZmzJs2TKDFUF2j4p03m50P3SSuBF0inanK8OS1aiVwawi2BaA0qONuWqvQVaaUPfmMUgPcw2AcPQ8kF726ipY6k5A2wlnfDkLeJLiQKm5ujQo7P+rEkzR832e5MOmNazCbvLRq6zOu+c1Y40Zfnw6iwN4M+MB44phGLzkmZAXQXt6/uWqcq0rvvWPjus91YmGqRnhXNo8FCXNHqaiSLoX23YAGyGlxe4VQVY+JdAppqEFqf1wsXLYOiNDJgQ0iYPdNmuWfqvHMspVvrMsaMANPCVY/DKMQg2x6rSFhnMNYUDnqcOL8Oj1poNep0DrS0GuxJflSgn9vzGKGinRr86Z85py91q83lHEV2hGmyWbn0d87R5sTTU27VkT9+JQbPhn9WBqnFTj/LP9BYdUzwoDRUmgPX4IlGdKKny+5W3v1zqDXa6H0+SkzI1+5g5u+vjvJNux29NiorkM3dprU6atAit5fU78nVI3o3XMUo9DthPE/gmvSbJeous+LbMv8OKWJbIx9GMf5ZxucWza5tia/eQa0EcoyCuvOZeuYTrJkToeXaXfDmv6w7fbHIsxwOp2aIZjod0g2YkGtBcp9NgBXDTelcUXyAKYbDx8ly5mL1+rH8GaO27a2RGKKr8ECmvU1kJdKI+wgAjI3ypCFJbhE2RYbk23apDwLWaUJDYRr3VbMA2y1XKwzAeBaMIbGIUPQjk1leBrCPLO3goV9HvWgLHpBBH85TEPvN0Mp8ClBCZHeVKt8s22lxRAMpO9geLPCDTLTqEOH46uIdCzPzxGF+f3U5M9thevgHnoHlEuoW+kfSNG+LfTsZ+K/1v4UFie7lmIeWLI8+6Ivn86IMNOQ3uVKA7TOOG+b7131w7DNP83ZX6ARH1tRj3TPbJe8h7u5gQrU3kWHEfwaRpR/Pp+JScTknRphbR4FREwlMMRVMTZCVELp6NcIcC6h6B+hehfsf8Je/d/hldErvBJCZv+Z4wqlws/35J++RNChCjLP7OJvjkWpYn//HmZnWtfB8xj8lPGkb2R92/ifWQh0DOJ5QXOPkqV9jnz+19fxO6VkiiemRIhdFj7O/8v8v92Xgv1x1KTFixTmL05yflfPq8VEzLCpMgVsRKYXiciAXm+HxA3Y9Nv4UpJO77nSXDf7yzLNTBxHLR3qzc93p/31zzisZbiHhhr8DyUsnI7ZskD5yHCfwO8A9DmPtpCH8+yetv5t8tDzX9yuzX/wE=</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6BD6EF7937588DE0401F0A05993B77</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6C429A909A4CAFE0401F0A059962C4</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6C429A909A4CAFE0401F0A059962C4</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6BD6EF7937588DE0401F0A05993B77</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77990</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_31751 - StreamDelete - LLP - StreamDelete against a stream with EXPIRATION_DATE 7 days into the past - 200 OK_MIGRATED" searchProperties="true" id="69e3c181-c79d-4e38-b233-e56842d2105a" disabled="true"><con:description>This test case will verify proper processing of the STREAM_DATA.EXPIRATION_DATE value</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="be839326-5d21-4874-b315-ac682282d92d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="78a574a5-aae2-491e-9c30-bc3ed2af9779"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="69e0b2bf-ba1e-4e81-be03-b478c3e7852a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="49146750-8358-435b-bbdf-5be88b942be2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="de5ccec1-c4a1-41fa-a9fb-5b70f3f75451"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set STREAM_DATA.EXPIRATION_DATE 7 days into past" id="d172b079-4100-45ed-8027-5fd876095b89"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
assert a.streamExpireDays(tC.getPropertyValue("streamhandle"),7) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="06fcd4f8-c988-4a86-9bb3-4c739f3e8118"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

//tC.setPropertyValue("expectDBDeletedBy", "1");
tC.setPropertyValue("expectDBDeletedBy", "221900");
tC.setPropertyValue("expectDBStatus","deleted");
//tC.setPropertyValue("expectDBDeletedBy_" + cnt, "1");
tC.setPropertyValue("expectDBDeletedBy_" + cnt, "221900");
tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b9c944b5-8e7e-4038-87f2-a53b7ad21c9f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="5f7b9cf7-83ee-40cb-9b2c-22a331a0e517" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="df3a2c7c-e5c7-465d-92ac-c5d1d7826f09" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="a75c0307-2303-408a-bc5f-c5a8e5261030" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20140906_100713</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6BD6EF7937588DE0401F0A05993B77</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6C42BB89B03FBBE0401F0A059962B6</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6C42BB89B03FBBE0401F0A059962B6</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6BD6EF7937588DE0401F0A05993B77</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77991</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32001 - StreamDelete - LLP - StreamDelete against account with two active streams; first stream deleted" searchProperties="true" id="62ce7b38-0cbe-4c18-b1c0-f4d7736544d9" disabled="true"><con:description>This test case will verify proper functionality when the StreamDelete API is invoked for a stream in which the account has mutliple active streams</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ee46e239-96b8-4c09-b295-2af4396d95de"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="a3cf6980-0cd3-4884-ab12-ff59ecde192a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="a3f911ad-ef20-4afc-bb88-647086976816"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="e3c2144a-ab29-4ceb-80c0-0045403f7345"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="0bc5d281-956e-40bc-8dd0-c6a12779c730"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
 	myTC.setPropertyValue("tName",tC.getName());
 	myTC.setPropertyValue("sName",tS.getName());
	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="8d214420-0a62-4197-9e69-786e1b6c687d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete for the first stream handle created" id="4590d2ce-0c6a-4f27-aafb-02c8dd499e97"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="95f96575-ca6a-4662-bc4f-b691eb7ffcd5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Establish User Context");
} 
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row for first stream was updated" id="6941513c-50bd-4825-95ba-6d98b3a9cf00"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_1"));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_1"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_1"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy_1"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("expectDBCreateUser_1"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA for second stream handle was unchanged" id="b9f345da-ba39-4d2c-8127-8a8f81d58062"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_2"));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_2"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_2"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy_2"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("expectDBCreateUser_2"));

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f37b8e8a-1e24-4e72-b953-9e80b292b8ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 2;
assert b.streamGetStreamDataHistoryRowCount(acct) == 3;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="dee5ed01-04a0-40fe-aaa3-ceb918c54b2a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0E877CF52BA916E0401F0A05993D38</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_7a51e935-b9a4-41f4-9e5e-6038c8f41c42</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>C9F5CBE21459BF21E0401F0A07996E81</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:C9F5CBE21459BF21E0401F0A07996E81</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_7a51e935-b9a4-41f4-9e5e-6038c8f41c42</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>2</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreatedUser_2</con:name><con:value>0602</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>CE0EAE6AF6AD9E4BE0401F0A05990C65</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>expectDBCreateUser_2</con:name><con:value>CE0EAE6AF6AD9E4BE0401F0A05990C65</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">221900</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>2</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>221900</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>D9486E1EE11A4C6EE0401F0A05993E36</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:D9486E1EE11A4C6EE0401F0A05993E36</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>D94873EA87AFD97DE0401F0A05993E32</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:D94873EA87AFD97DE0401F0A05993E32</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:D9486E4DC0F66765E0401F0A05993E34</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value>urn:dece:streamhandleid:org:dece:D94873EA87AFD97DE0401F0A05993E32</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>D9486E4DC0F66765E0401F0A05993E34</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value>D94873EA87AFD97DE0401F0A05993E32</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value>done</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>2</con:value></con:property><con:property><con:name>username</con:name><con:value>streamdeletesau</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0EAE6AF6AD9E4BE0401F0A05990C65</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B65694912BCFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77994</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32002 - StreamDelete - LLP - StreamDelete against account with two active streams; second stream deleted" searchProperties="true" id="1400495c-cc6f-4036-bedc-5fe24af9e086" disabled="true"><con:description>This test case will verify proper functionality when the StreamDelete API is invoked for a stream in which the account has mutliple active streams</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="42172225-2641-4af1-a0e9-f6f16f191f6c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","2");
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="1373a8f8-c7c0-4572-8e7b-afbf85303a70"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="be8f3052-76e2-44d9-a930-e163ebd2374d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="e3714da4-3c90-4754-99bd-8db000f427d6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d4259ed2-7ffc-4cb8-8af9-9f48b0ffac29"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  	myTC.setPropertyValue("tName",tC.getName());
  	myTC.setPropertyValue("sName",tS.getName());
	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="d77632d1-dcd7-44f9-883e-36e038e7ac13"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete for the second stream handle created" id="c14508ad-eaff-4976-95d7-051f1109fb81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "2") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="59085bfb-d57a-413a-a90a-0db5ded906c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Establish User Context");
} </script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="613460a5-fefc-4ece-8c9e-aeeb7353929d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 2;
assert b.streamGetStreamDataHistoryRowCount(acct) == 3;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row for second stream handle was updated" id="09be199d-607d-4910-aefe-368b5fd23a6f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_2"));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_2"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_2"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy_2"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("expectDBCreateUser_2"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA for first stream handle was unchanged" id="73099dcf-bcc8-4614-acde-4f6337152b84"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_1"));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_1"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_1"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy_1"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("expectDBCreateUser_1"));


def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="860e8753-fe98-4c9d-bd17-7e71a6b7e6de"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0E877CF52BA916E0401F0A05993D38</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_7a51e935-b9a4-41f4-9e5e-6038c8f41c42</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>C9F5CBE21459BF21E0401F0A07996E81</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:C9F5CBE21459BF21E0401F0A07996E81</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_7a51e935-b9a4-41f4-9e5e-6038c8f41c42</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>2</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>expectDBCreateUser_2</con:name><con:value>CE0EAE6AF6AD9E4BE0401F0A05990C65</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>2</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>221900</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D9488028FF6D1C69E0401F0A059961A7</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:D9488028FF6D1C69E0401F0A059961A7</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D9488424BE9670B1E0401F0A059961A3</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:D9488424BE9670B1E0401F0A059961A3</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:D9488424BE9670B1E0401F0A059961A3</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value>urn:dece:streamhandleid:org:dece:D9488424BE9E70B1E0401F0A059961A3</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>D9488424BE9670B1E0401F0A059961A3</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value>D9488424BE9E70B1E0401F0A059961A3</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value>done</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>2</con:value></con:property><con:property><con:name>username</con:name><con:value>streamdeletesau</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0EAE6AF6AD9E4BE0401F0A05990C65</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B65694912BCFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77995</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32003 - StreamDelete - LLP - StreamDelete against account with three active streams; first stream deleted" searchProperties="true" id="d57ca1e3-b485-4235-9947-7c9e8f69b75c" disabled="true"><con:description>This test case will verify proper functionality when the StreamDelete API is invoked for a stream in which the account has mutliple active streams</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0bdc29e6-4123-491e-8d76-5ebdafdf45c4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="d3717396-b296-42be-82bf-80d82ca814ac"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="ea6c6228-9b6e-407f-b453-1d3ac5b82621"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="97eb51b8-aeed-47fe-9296-6d039a2ef2d2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="8514a04d-eef3-45a2-ad53-846c77bfcec4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  	myTC.setPropertyValue("tName",tC.getName());
  	myTC.setPropertyValue("sName",tS.getName());
	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="0733456f-449c-4e14-8f7a-e8496a02230e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete for the first stream handle created" id="01297b5a-e607-4531-b338-7a6bc7da9072"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "1") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="b62bdede-10d2-4897-88a0-f1ba439d5bd9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Establish User Context");
} </script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="8c50a317-fdbe-4bb0-b595-993f84fc4d8b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 3;
assert b.streamGetStreamDataHistoryRowCount(acct) == 4;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="110d7b8d-8701-4b89-aa43-c87a7a4abb48"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_1"));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_1"));
tC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus_1"));
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_1"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy_1"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("expectDBCreateUser_1"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="2000c371-87d3-4eb9-933a-d1260e1c5fac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA for second stream handle was unchanged" id="11124861-d641-4ae7-bcda-e10516996d85"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_2"));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_2"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_2"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("expectDBCreateUser_2"));

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA for third stream handle was unchanged" id="a8804964-c547-428a-89af-645fcbf4f719"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_3"));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_3"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_3"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("expectDBCreateUser_3"));

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="3822cc4e-d1e1-4042-990a-add972623f8b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0E877CF52BA916E0401F0A05993D38</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_1e4b85a0-c816-4a56-afa0-c4b598ddf68b</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>C9F607EA3443366EE0401F0A079965C2</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:C9F607EA3443366EE0401F0A079965C2</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1e4b85a0-c816-4a56-afa0-c4b598ddf68b</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>3</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>CE0EC907918261DAE0401F0A05993EE5</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>expectDBCreateUser_2</con:name><con:value>CE0EAE6AF6AD9E4BE0401F0A05990C65</con:value></con:property><con:property><con:name>expectDBCreateUser_3</con:name><con:value>CE0EC907918261DAE0401F0A05993EE5</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_3</con:name><con:value>active</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>221900</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9C687F959B4B13ABE0401F0A059957EB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D6291266101CBA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:D6291266101CBA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D6291266103EBA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:D6291266103EBA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:D62912661029BA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value>urn:dece:streamhandleid:org:dece:D6291266103EBA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value>urn:dece:streamhandleid:org:dece:CC163FA6C5EA3145E0401F0A07996F67</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>D62912661029BA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value>D6291266103EBA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value>CC163FA6C5EA3145E0401F0A07996F67</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value>done</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>3</con:value></con:property><con:property><con:name>username</con:name><con:value>streamdeletebau</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0EC907918261DAE0401F0A05993EE5</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9C687F959B4C13ABE0401F0A059957EB</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value>dlp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77996</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32004 - StreamDelete - LLP - StreamDelete against account with three active streams; second stream deleted" searchProperties="true" id="ca16cb5c-7ef1-412a-a106-547644725870" disabled="true"><con:description>This test case will verify proper functionality when the StreamDelete API is invoked for a stream in which the account has mutliple active streams</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="408fecaf-642c-475b-8761-5519516c6256"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="f0f1b9fc-9e74-46b9-9b3a-58d23423304b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="64b2a1db-8c40-47a7-8d96-91c89efaebe9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="2f6a9c34-791a-4682-8f1e-d41319415424"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4d6c1a88-cd5d-4d5d-b575-5d867f969d33"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

if (tC.getPropertyValue("userIndex") == "1") {
	 myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
 	 myTC.setPropertyValue("tName",tC.getName());
 	 myTC.setPropertyValue("sName",tS.getName());
	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="cf3d9d0d-4078-468a-a2c8-798e89f9ea87"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete for the second stream handle created" id="a227c57e-7b0d-42fd-bbec-4e7c2f2baafe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "2") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="404043c1-5d23-485b-8142-4290e8c4b790"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Establish User Context");
} </script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="ec405720-df58-435a-8d7f-b69f914bf7a5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 3;
assert b.streamGetStreamDataHistoryRowCount(acct) == 4;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="042114f8-39f2-4700-9799-059f22bfffe0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="42c7d030-f879-473e-8ec3-b65bb240f460"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA for first stream handle was unchanged" id="44b92c93-785b-4a04-8ecd-4b634c2a5c57"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_1"));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_1"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_1"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("expectDBCreateUser_1"));

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA for third stream handle was unchanged" id="8c7dceca-7a71-403e-9107-a31dd771b451"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_3"));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_3"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_3"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("expectDBCreateUser_3"));

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f40b2eb5-bf45-4a9d-9185-5c09d0c5e84d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>221900</con:value></con:property><con:property><con:name>username</con:name><con:value>streamdeletebau</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>D62935741C99B2EFE0401F0A07994D1F</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:D62935741C99B2EFE0401F0A07994D1F</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>D62933C0A5A4FD56E0401F0A07994D21</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:D62933C0A5A4FD56E0401F0A07994D21</con:value></con:property><con:property><con:name>counter</con:name><con:value>3</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">221900</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:C9F607EA3443366EE0401F0A079965C2</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value>C9F607EA3443366EE0401F0A079965C2</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0EC907918261DAE0401F0A05993EE5</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9C687F959B4B13ABE0401F0A059957EB</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_1e4b85a0-c816-4a56-afa0-c4b598ddf68b</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1e4b85a0-c816-4a56-afa0-c4b598ddf68b</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>CE0E877CF52BA916E0401F0A05993D38</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>D62912661066BA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:D62912661066BA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value>D62935741C99B2EFE0401F0A07994D1F</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value>urn:dece:streamhandleid:org:dece:D62935741C99B2EFE0401F0A07994D1F</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value>C08EDB71302BEC5FE0401F0A05992079</con:value></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value>urn:dece:streamhandleid:org:dece:C08EDB71302BEC5FE0401F0A05992079</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9C687F959B4C13ABE0401F0A059957EB</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>3</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value>done</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreateUser_2</con:name><con:value>CE0EAE6AF6AD9E4BE0401F0A05990C65</con:value></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreateUser_3</con:name><con:value>CE0EC907918261DAE0401F0A05993EE5</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>CE0EC907918261DAE0401F0A05993EE5</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectStatus_3</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value>dlp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77997</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32005 - StreamDelete - LLP - StreamDelete against account with three active streams; third stream deleted" searchProperties="true" id="de533f44-7378-4d14-a315-73dccf3e582f" disabled="true"><con:description>This test case will verify proper functionality when the StreamDelete API is invoked for a stream in which the account has mutliple active streams</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="46ca99aa-6649-4e9e-bc39-44b84bf0d244"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","3");
tC.setPropertyValue("userIndex","0");
tC.setPropertyValue("streamPurgeRows",null);
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish User Context" id="a3d7fc21-15fe-4a77-a63b-abd9361e78cd"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def uArray = tP.getPropertyValue("userPropertyNameArray").toString().split(",");

int userIndex = tC.getPropertyValue("userIndex").toInteger();

String userPropName = uArray[userIndex];
String userName = tP.getPropertyValue(userPropName);

assert userName.length() > 0;
userIndex++;

tC.setPropertyValue("username", userName);
tC.setPropertyValue("password","testing");
tC.setPropertyValue("userIndex",userIndex.toString());

log.info "userPropName[$userPropName] - userName[$userName]";




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="a202853a-97c4-4020-84c2-a2ed9567ccdc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Purge Accounts Stream Handles" id="78d1203d-5684-4fdb-99ae-b254c29291f3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("streamPurgeRows") == null) {
	a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
	a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
	tC.setPropertyValue("streamPurgeRows","done");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="433c0ddc-3c35-445d-87d8-9aa6e4c37b4a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

if (tC.getPropertyValue("userIndex") == "1") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  	myTC.setPropertyValue("tName",tC.getName());
  	myTC.setPropertyValue("sName",tS.getName());
	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7e1ed40b-8814-4d84-8a34-0a10ec4cc173"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete for the third stream handle created" id="b9e53875-b50c-49c7-a2a4-a946e306579b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("counter") == "3") {

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Loop again if necessary" id="98d1c524-7ccd-4bca-bff6-ecf314d00d5c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

def sh = tC.getPropertyValue("streamhandle");
def shf = tC.getPropertyValue("streamhandleFULL");

String shv  = "streamhandle_" + counter;
String shvf = "streamhandleFULL_" + counter;

counter++;

tC.setPropertyValue(shv,sh);
tC.setPropertyValue(shvf,shf);

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Establish User Context");
} </script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b7fc265a-5b79-41e3-ac96-bc9f68fddeea"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 3;
assert b.streamGetStreamDataHistoryRowCount(acct) == 4;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="c1be9917-7740-4629-b629-bfd0ffc8c34e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="a95ff221-7e48-47a3-b88e-a60674fa67f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA for first stream handle was unchanged" id="a0f13cfa-f463-4d07-a658-cb638e177d41"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_1"));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_1"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_1"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("expectDBCreateUser_1"));


def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA for second stream handle was unchanged" id="009e2246-4970-47e6-9885-471dab9dbfad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle_2"));
tC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL_2"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy_2"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("expectDBCreateUser_2"));


def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="a8262ecf-120c-4a59-8ace-2bbd71dc903e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>221900</con:value></con:property><con:property><con:name>username</con:name><con:value>streamdeletebau</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>D6291266109FBA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:D6291266109FBA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>D62935741CB3B2EFE0401F0A07994D1F</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:D62935741CB3B2EFE0401F0A07994D1F</con:value></con:property><con:property><con:name>counter</con:name><con:value>3</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>3</con:value></con:property><con:property><con:name>streamPurgeRows</con:name><con:value>done</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:C9F607EA3443366EE0401F0A079965C2</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVdbc6rMEn33V1juR8twUbxVkqrhKioqiNeXUwgjoNxkQNBffwaNRpPs/e3vnEqlkmm6e1b3rJlZ84oM36O7ACEYJ24YlGX+rfIfCjY2bcYga2abatYaBtOsGdti2NgwnbZlbZvtTaUsI5RCOUCJESRvFZqk6BrZqVFtnWx1G60u2Xoh69S6Up7DGOHU2OWFrJRz3wtQ9zLtWyWNg25oIBd1A8OHqJuY3SlQhl3s2TVumCrvr1eUlwnjdydJoi5BmC8WNKHnmS9m6BOvxJPPq4W6U9cOjCSN4cecFnqrfMRmWfaS1V/C2CZokiQJskNgHwu59q/Ke+kWDC052IbXMWcEYeCahueejQKUAhMntMrAs8PYTRz/N6kpgiKL1DWYmzWTagS/KsTnBBd0f5npCWSMjBpyDOqWTINbGMPAhOWZJr9Vfv3dCl5j9dgI0DaMffRl/O8gweAIvTCCVg3dKruh+/uMP7Tr/RWaXTkwvRS5RzgqaBIZJkTlSQy3bj50ESafhcqX5S/n6MYwaP6bJXklHnFi2MQPneFdG6Lkf1mvx7W6ZpkbXgrfeZZQzEXiRQTZWzH0ssEl8TQ8ZUM/fLtAeHS+grov9cf4K1HvvPoIUndUFPT3RmzxjXTtw7WQ6sEIiAmkWpBrZLKnaw1epI82YSytht0f7oNwpuzGjrtFLOqdc6vfri5EdxuvS4HWqerNtb6UF5CAu8iYjtVoMuFB5rSyoe0tpoTYI/ejFlelOCVQBqaVL8dQo1qCtWnVW+PIr/YXSdKxPbs0HqsniVzO/PNyP22aQ4Ztv33W9FhDUdcAni5FFv8vGbLDG4lxH3DFSbHF2zOB74os8+mZ48BpaoNMZoGNf3dgxNr7g7N3pU5GskBVRcBzrLcThgrYS4CaCayjcPO5knNn0Gft0RwH6iXgrVlFEzI+W/FzVe0JmaNb0vy0kbx0fRZGCkCXYM5RBE2Y85ouKAoIr7Zc4TdSvlOmSiarK76EE/BCHp0tqZNAKXdNWmaUKUOvpky6Xs6xXTwN/dFxowuewikSNz1IU3lT51WhD7TVwqTFFMeeh34UllYz9iGoH8EdgGJG4jnBWdH3maLP6BGvGReb/mxTZKmvqCjj1EtVUknI+vPZ+bMXHKtwli/kgg4m116YOieOyPWyj4wFEygayHj7EjwQMmt8A6KoZFbirr0aCpkmaLORqGhyJoCLjRcyD23okbORnKNZV/O+DnaPC8OpwkIM8PdAO5on5lAyJBFs/Dll1jXHdBnXWIaZvW5nvLrqD8K1jNOMgCqwrAowIBIUpeH+s2DIzplx5HZoFw63YuhDJy4pVDjYH8852XbrY3syWjD8dt+aSO6kblgOIXsmvavvgSxDa0A5qmFpK0LjA/fcHA9mS+jGq3MyYlSq6baZkrZIZ0s+9FpWb7maDar5ylT18WQ6W0zOeT467NpnL+mN2V487Su8PR5BOEFmlSANkdXbPMOtejvMp61GQqYEbIUFQNrZtuBiArO93ZWEPU0RMHmBwmUSt+CkKZCkqiCzvKpuRYeamNI8nVEjRRYsD7fptFpqXmnNsTxeKdJYrKMVLZJrHViXZGpDEG11xlT7S7hWR54+T0AWzbcBRZFSpPa2SmabSsEAS86mLN5FbCmVwcwYR30yH8ybJHVQLa8/7YBZPZ/S+3zs2OvT3l7v8aKsHrbOSgfeXH/gmIwptiipuqApoH3db7kiz+qaZ/p5tPHNnNfxml2CQ50VNFElZznPg8HVhnRA52h1FnYKJ1ziSyBXDEyL42bpoFUwcse6kGLSpg902W1o8h85VlCs9MyxAwdU8JVjwpVjAtgeqnKbpxDT5CK0yGxWEg5qaz7sdyJSXQ73JbYqEnbieo1x0M70QXVBnbKWs1MXi47MO1w12K6c+iZhSeNsqrC/b0mutueDZsM7KUNFZWYu4Z3IHTxkaFgayVQg1JOzSHTitMr6a9c/n+sNeuZPpulRnhkDRJ2czWHRyXaTXpMgYunEnFvroyouQ3N1vUe+HpJ34/UYJR4P2KcT+Ka9pulmB83kNizuYZkvi/hyNJI/67jC4lq17cW1GxViECUwSCrvRVSh4bopVnqu1cU353XMdcQm2RJAvdGo15tNQSAbJCWSgGx1Ok2Go29i74riC0QuDLZuMVchZ6+X9Z8Bmn4XwcCCce0YpqYDUeUPGYt+leVAwyokDBDUQyyXm0yDF5oU12GByDEMy+OfOtugyI7Y5uk2XymPwmQcjGOwTWD8JJUp8kkqa9B0IxcWeroQFQirCpTglhyMY5p41MvReAlgihV3XIjeLt1oMwRy/ciDBWDCD63Ugy+RE10aRKDrX7pmmOhipWmqQ5IXvfPbCr9+uzUD+1hu4YCKcliIFxR+k/3NLnOr5VvN9R+fB7f0ILXcQtbgziaxa16RPH/6JEzBlDtbrkXdUN+d/0Uw9f8E09+DiT+URHzt5n0u6+g+zHx7/WBBjyXf+40OB+Pl8JIej+mFAK1CzsY4PUERJE1MoZliTXrSwz0MiHsK4q+eA3fUX2a+25/xpYkTTBN8lviYruXL8C/eglOIiregjLdb/rcPzacpcd8SmCc/2TgPPxkLxH98VZpds/DD5gn+k4Wx9blcP+R6mAfXWRyebmAXo0L8n37DCzPEaV18gIbxY/KfEvw0+bPx3uQ7lgSzaZMm8PdfysXJ+FYxTDNMg0QuTiBseDytLziTUwS7n07f0lzk98d7Kke/fU8tleEUn5u+Ubn7uv/sXHMvdDEhjkLuBctbJUfdYq8E9sPt8AHwywXBtDma6wjNhsg0wf2CYDqdBsN+bsmnSt6/mb9bHnr6dT+8/xc=</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0EC907918261DAE0401F0A05993EE5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>CE0E877CF52BA916E0401F0A05993D38</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>C9F607EA3443366EE0401F0A079965C2</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9C687F959B4B13ABE0401F0A059957EB</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1e4b85a0-c816-4a56-afa0-c4b598ddf68b</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>CE0EC907918261DAE0401F0A05993EE5</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>D62912661099BA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:D62912661099BA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreateUser_2</con:name><con:value>CE0EAE6AF6AD9E4BE0401F0A05990C65</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value>D6291266109FBA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value>urn:dece:streamhandleid:org:dece:D6291266109FBA25E0401F0A05995FDF</con:value></con:property><con:property><con:name>expectStatus_2</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreateUser_3</con:name><con:value>CE0EC907918261DAE0401F0A05993EE5</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value>active</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value>C08EE51106352A85E0401F0A05993248</con:value></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value>urn:dece:streamhandleid:org:dece:C08EE51106352A85E0401F0A05993248</con:value></con:property><con:property><con:name>expectStatus_3</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_2</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_3</con:name><con:value>dlp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77998</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_1e4b85a0-c816-4a56-afa0-c4b598ddf68b</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32030 - StreamDelete - LLP - StreamOwnerMismatch - Cannot delete a stream where CREATED_BY is nonaffiliated LLP" searchProperties="true" id="ea33ac75-51bb-4e93-a230-d208ee22181e" disabled="true"><con:description>This test case will verify that you cannot delete a stream with a STREAM_DATA.CREATED_BY of a DLASP not associated with the account</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7da89171-45b5-4d85-b248-1e4e680bda56"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid","5440");
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_OWNER_MISMATCH");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="8e1dc829-0d13-42e7-bb49-38abe425ba81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish NODE_ROLE as lasp:dynamic" id="9c662857-5afe-483e-a463-d9008c1e8e56"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String role = "urn:dece:role:lasp:dynamic";

try {
	dbUtils = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.nodeSetRole(tC.getPropertyValue("nodeid"), role) == 1;
} 
catch (Throwable e) {
	log.info "ERROR!  dbUtils.nodeSetRole - $e";
	assert 1 == 2;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="7b2da1b6-a4ef-4f1e-b563-160ebcf14665"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="593234db-5c5d-4600-868b-7dd7f080d48c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7e800bf0-52ba-4e5e-9e86-5f78fe2bd39b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information for DLP" id="14f0883b-2369-450d-b4d3-5e815dfc155e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="4b54a815-6262-404a-9d24-fe74fc3b9e37"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e0d888d2-70d4-4169-9c2a-28240b1dcef7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="9ef758b4-39de-4fe6-8a25-6ac467c732bf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>5440</con:value></con:property><con:property><con:name>username</con:name><con:value>streamdeletefau</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D948927FA3B78A0EE0401F0A0599057D</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:D948927FA3B78A0EE0401F0A0599057D</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>5440</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5440</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:A7D3704DE2DBB149E0401F0A05992C66</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:A7D3704DE2DDB149E0401F0A05992C66</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVdZc6pME773V1iey5Rhc68kVcMioqKCuN58hcOwKIIyIOivfweMxuQk5z3vd5Ey0/TydPdD0/OCzb3PdgDGKIq9MCgr4mvlf7DeYlGj0a627Va9WmtwdnXDMo1qzWw2GqjGtU3arpQVjBOkBDg2g/i1wtIMW6VbVZY16GaHbncY7rnRaK0r5TmKMHFNVJ7pSjnb+wHuFGFfK0kUdEITe7gTmHuEOzHsTIE67BDNjnnDVHl7uaIsAkZvbhwfOhQFny0Eke/DZxjuqRfqk86LhTtTzwnMOInQe0wLv1bebdM0fU655zByKJamaYpuU0THwp7zq/JWuhkjSwns8HoWzCAMPGj63sXMQakodkOrDHwnjLzY3f/gmqEYOnddRRmsQqYW/KpQHwEKdH/p6RPICJtV7JrMzZmObBShAKLyTFdeK7/+roNXWyMyA2yH0R5/Of83SCg4IT88IKuKb5nd0P29x2/K9faCYEcJoJ9g74RGOU0OJkS4PImQ7WVDDxPyWbhctL+c4RvDEPwvLXmhHnES2NQ3lRE9B+H4/+nXY6+uXuamn6C3feKvOa8J67Uga6uKAlh3IrcWhs87rwWER+UrqHur389fiXrn1bvRuKmyx/qF3qZJG2R1m1FmoqXDJeyBxJvMz33TGYQR5aartLlsWeuz52x1Y540qS46ce2JBcdjs92WBugyL8Ghn80a86R/irmlZ0BXVM6iEvc5dRU/RUdWEfzecDViGrW93USbxWnSYzeby6A1crg0oEdHc9CcrmGLiVm7JCxMPAX71ZptBmfa7qYt+PqR02MOeV4DdC6SzP9f1um2aMbm/SDkk8Imr2eM3kgZxeQiCOA8dUCq8MAhf1sw4p3d0d15cjuleaBpXSAKvL+VhirYyYCZSbyrCvO5mgkX0Oed0ZwYGiXgr3lVl1IxXYlzTetJqWtY8vy8kf1kfZFGKsCFseCqki7NRd2QVBWEV1mmihs526pTNVW0lVgiDkQpO1wsuR0jOfMgq9TVaZ1dTevJejkn8u55uB+dNobkq4IqC9OjPFU2nKhJfaCvFpDtJsT2MtwfwtJqxj8Y9Q9oC1A3pUlMcFGNXaoaM3Yk6mYhMz7LVEXuqxpOBa3ISi5JaX8+u3zUQuBVwdpLmWSAybUW0BC6I3q97GNzUQ9UHaSiUxgPpNQa34CoGp2WhGuthlKqS/ps1FV1JZVAIROl1McbduRuZPcEOS3rG2D72BhBkxbdgDwP9BM8148lU+6CzX7OQE53oVf3zGWYOutWKmqr/iBcK8TNCGgSz2uAAKJBnhqpPw+G/Lw+Pnht1kNDuxvukRuVVCYc7E6XjG553NiZjBZ10d41J7I34UzLpRQfsltuBxQFWQPG1UxLX1G6GHiXxngwWyIvWl3iUV1jGl6rXtIXyWwphn7T6i1Xs8FTtoKaMZ5MZ4vJJctGx23r4se9Md+Lpn1VdMYjhCYYPlG02eWNllgXVr0t4ZOt06heAo7KAyBvHUfyCIH53vZKwp6uSoS8QBVSWVgI8hTI8pOk8KKm2V2XmUB5nsyYkapIlk/KdF4tdb+0FniRdIo2F+vDiu3SawNYhTOtJnUdbVZ/6i/RWhv5xjwG6WFuBwxDywetZ6upA9WcAZaSTnnyFvGlRAEzc3zo09lg3qCZo2b5/WkbzLhsyu6yseuszztnvSNNWT28OisD+HPjgWMKodiipBmSroLW9X3LVGXG6T7cZ4fNHmaiQXpWGIcGL+ldjZ5loggGVxk2AJvh1UXaqoJU2JdAppqEFqfN0sWrYOSNDSkhpE0e6LLdsPS/ciynWOkzx44C0MBXjklXjknAPj4pLZHB9YZwwIvU4WXpqDXnw377QGvL4a7EP3UpJ/b82jhopcbgacGc06a71RaLtiK6wlNgr1xuE/O0eYEa6u+asqfvxKBR88/qUNXqM4/yz/QWHVM8LI0UJpC4+NKl2lHyxO/X3v5y4WrsbD+ZJidlZg4wc3Y3x0U73U56DYqK5HP90lyftO4yhKvrd+TrkLwLr2OUehywnybwbfeaJpstgvHtmH+HFbHcJR9HM/7zHpdLPKtqF6qdQ74M4hgFceUtt8p3uE5CNj3P6pAv5/UMmiLXpGuixIoiz9TaEl2jmS4N6Hq7zQqNxm3Zu6L4AlEIA9vLY+Xr7PVj/WeAcN/ZIDNCUeUPnvI6lZVAJ9tHGGBkhK+VBk/eLUHqtpqtRlfo0k2a4blWu0VzTabZAlylPArjcTCOgB2j6GFD5r5uyDqC3sFD+Rr9vkvgmBTiaJ6S2GefT+ZzgBKyZ0f5qttp0jRLYW9/8FEOl9qHVuKj54N7KMpC4esvWzUhLqQWss3Ej6v4UGw6P+b49dmtHETH8nIFnGfEI9JK9M3CT9/S+S1t7tuLwc09SCwvX2hIbePIg1cknx99UCXnyJ0n9VqNvmG+q34VfHJLfc3oHsk6efDO9vt9iKzTZOEqrhyYtOVoPh+fk9Mp+WhERNxTDEX+myKYkI3wbIQ7FFB3F9RfLeN31F8i3+Wf8SWxG0xj8ibvCWvKxfHfb2KfrEkJYpTF38kEn9y98uB/vJ7BDsz1iHhCftIwsj4q/42vhzgEcj6FvMDJT/kWff6hwTAkbj0yicLo0fl3Dr4L/ll4r9cdS0yIsUli9POTcj5iXismhGESxIpYKQSPY6/AGZ8PqPOh9JubYo99v5hk+MeLyVIdTqGL9mblruv9u3LVKzoPEbHCXoHltZKROzYJHjgPY/Yd4A+Tlv/TpP2cydtv4t8lDzX9Su23fwA=</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_c582e669-9f85-463f-b216-4a766e439a0f</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_c582e669-9f85-463f-b216-4a766e439a0f</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>A7D3704DE2DBB149E0401F0A05992C66</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>A7D3704DE2DDB149E0401F0A05992C66</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>CE0E877CF52BA916E0401F0A05993D38</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>5440</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>CC1649EED0D986A1E0401F0A0599538C</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:CC1649EED0D986A1E0401F0A0599538C</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>78000</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32031 - StreamDelete - LLP - StreamOwnerMismatch - Cannot delete a stream where CREATED_BY is nonaffiliated LLASP" searchProperties="true" id="7f801e98-7393-4994-a0cc-be9f6e53dbe2" disabled="true"><con:description>This test case will verify that you cannot delete a stream with a STREAM_DATA.CREATED_BY of a LLASP not associated with the account</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2ef2b6d4-88fe-4fb3-a9ca-c18bf357fc03"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid","5440");
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_OWNER_MISMATCH");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="aa5fb845-d0ee-4caf-ba6c-ec977c9f15e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish NODE_ROLE as lasp:linked" id="a29a05e3-4220-4cfa-ab5d-7bc776925e9a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

String role = "urn:dece:role:lasp:linked";

try {
	dbUtils = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem"));
	assert dbUtils.nodeSetRole(tC.getPropertyValue("nodeid"), role) == 1;
} 
catch (Throwable e) {
	log.info "ERROR!  dbUtils.nodeSetRole - $e";
	assert 1 == 2;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c9b9f682-18e9-45ee-81b2-1aecd61ffc68"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="c90dbd2d-0aa3-4d70-999b-c907cfb82002"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="be93b3f3-cd70-42e9-900e-33b9e4819771"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information for DLP" id="2b8e0480-f20b-40d1-9a8b-2a556b852eb4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="76fb33d2-a16d-4e60-bb0a-c30b28f56e9f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e0d38c74-5ef0-4050-b800-3f7ff31b148e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="2d795a83-bab5-45a0-a560-af15cf0ea479"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>5440</con:value></con:property><con:property><con:name>username</con:name><con:value>streamdeletefau</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>5440</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5440</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:A7D3704DE2DBB149E0401F0A05992C66</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:A7D3704DE2DDB149E0401F0A05992C66</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value>A7D3704DE2DDB149E0401F0A05992C66</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>A7D3704DE2DBB149E0401F0A05992C66</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_c582e669-9f85-463f-b216-4a766e439a0f</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_c582e669-9f85-463f-b216-4a766e439a0f</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>CE0E877CF52BA916E0401F0A05993D38</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>5440</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>C08EED55576AE021E0401F0A079953DC</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:C08EED55576AE021E0401F0A079953DC</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>78001</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_32032 - StreamDelete - LLP - StreamOwnerMismatch - Cannot delete a stream where CREATED_BY is nonaffiliated LLASP-CS" searchProperties="true" id="191805aa-3f83-47b9-887b-2b2963ae383c" disabled="true"><con:description>This test case will verify that you cannot delete a stream with a STREAM_DATA.CREATED_BY of a LLASP not associated with the account</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8bc9c875-a528-4ad6-8b69-6ebe4563447a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid21").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","STREAM_OWNER_MISMATCH");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="6be51bbd-8f98-4e7a-94b6-d4f0193ad8ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="2001712d-9a62-4129-b90d-83d412004513"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b3c3c426-a8ee-43fc-b1cf-7593877c6694"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a89da20f-5092-4ff2-be5f-d900b06ecb76"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information for DLP" id="5102e7c4-73be-4fc4-957f-30f452d9dcaf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="c60f2603-b1be-4261-87c5-19764faa5802"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="6260ffa7-53fb-43f9-95ba-5aca5f54c4c8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="793fc9a7-d40e-445a-b41b-fcdba308ff47"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>221900</con:value></con:property><con:property><con:name>username</con:name><con:value>streamdeletefau</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CEF07793A8571DFDE0401F0A05992AA6</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:CEF07793A8571DFDE0401F0A05992AA6</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CEF07793A84A1DFDE0401F0A05992AA6</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:CEF07793A84A1DFDE0401F0A05992AA6</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>221601</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:C9F5972B5684E3AAE0401F0A07990AAE</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C9F5972B5684E3AAE0401F0A07990AAE</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_7be619b9-1883-4a0a-a3c2-789eda0780b8</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_7be619b9-1883-4a0a-a3c2-789eda0780b8</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CE0E877CF52BA916E0401F0A05993D38</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B65A97BC9DCEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B65A97BC9DEEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>221601</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CE0E877CF532A916E0401F0A05993D38</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>CE0E8AF679F999B7E0401F0A05994D9F</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>CEF07793A8571DFDE0401F0A05992AA6</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:CEF07793A8571DFDE0401F0A05992AA6</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>78002</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CE0E877CF532A916E0401F0A05993D38</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_33012 - StreamDelete - LLP - UserPrivilegeAccessRestricted - Basic access user can delete stream created by Standard user - 403 Forbidden" searchProperties="true" id="ae7efda7-7c57-40b8-9972-d600ca5fda4e" disabled="true"><con:description>This test case will verify the application tier properly deletes an active stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ce483cdd-4c24-47a3-a48e-3e2638b4a2f5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();\
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","USER_PRIVILEGE_ACCESS_RESTRICTED");
//tC.setPropertyValue("expectErrTypeStreamDelete","METHOD_NOT_ALLOWED");
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectDBCreatedByNodeType","dlp");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeletedUser",null);
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information" id="13ad08bd-6ade-4c34-ad21-5f72f1fe62de"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="fd926f0a-2350-49eb-b67b-9bc8b3e5b014"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="96a97ec2-945f-413d-8626-2f941acc623a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
/*  set retailer nodeId */
tC.setPropertyValue("rtrnodeid","0912");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")
  myTC.setPropertyValue("tName",tC.getName());
  myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="8cef6a69-4176-4d05-ab97-e41dceb7b37c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

tC.setPropertyValue("expectDBCreatedBy", tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser", tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy_" + cnt, tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBCreateUser_" + cnt, tC.getPropertyValue("useroid"));
tC.setPropertyValue("expectDBStatus_" + cnt, "active");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity Information as Standard User" id="57f05780-f5be-40e6-b864-9af9375834be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set User Context to a Basic User" id="cd2b368d-b7c4-427a-9a42-49c977c40ea6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",tP.getPropertyValue("UserName_BAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userBasic1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="241f5876-dd33-4910-bc6f-7c1f11b5f0e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="dc6aef0d-f79a-4464-8a32-a2d148071307"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");
def counter = tC.getPropertyValue("counter").toInteger();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 1;
//assert b.streamGetStreamDataHistoryRowCount(acct) == 2;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="40c0dc75-3276-4494-a059-12674380e4fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="55d9ada2-8046-4869-953b-d7134be8af35"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="ede14ea7-57c2-4311-9651-85347a215539"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbRightsToken(log);

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));



</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0E877CF52BA916E0401F0A05993D38</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_1e4b85a0-c816-4a56-afa0-c4b598ddf68b</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:C9F58C2C9E64F56AE0401F0A059945B2</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>C9F607EA3443366EE0401F0A079965C2</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:C9F607EA3443366EE0401F0A079965C2</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1e4b85a0-c816-4a56-afa0-c4b598ddf68b</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>CE0EAE6AF6AD9E4BE0401F0A05990C65</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>USER_PRIVILEGE_ACCESS_RESTRICTED</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>221900</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BB290015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>DC9825036BECB9D6E0401F0A0599025B</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:DC9825036BECB9D6E0401F0A0599025B</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>DC9821BD4FA69BFDE0401F0A0599025D</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:DC9821BD4FA69BFDE0401F0A0599025D</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>streamdeletebau</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0EC907918261DAE0401F0A05993EE5</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BB291015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>221900</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>CE0EAE6AF6AD9E4BE0401F0A05990C65</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>DC9821BD4FA69BFDE0401F0A0599025D</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:DC9821BD4FA69BFDE0401F0A0599025D</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>dlp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>78008</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>CE0E877CF532A916E0401F0A05993D38</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34801 - StreamDelete - LLP - AccountNotActive - ACCOUNT.STATUS of deleted - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ad641078-731c-4697-82b4-095e9e51c0af" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4e91b893-2262-4aae-9eef-46ce9f353ead"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8bc9848f-a4ca-4fe7-a15b-7aae127e50eb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="508a4ca5-e46e-4f23-9eb7-fa4e70fdf411" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="655f137a-772b-463b-baef-f5245b35cbc7"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="fb7471cc-a28c-4062-b354-d097f4b7576b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="c8418f9d-5f7f-4bb0-80f1-50a07252e28e"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="32bf195d-b4e3-4200-aa00-2950f9caf91a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to deleted" id="10e52ec1-0d15-4b3c-9905-294dcdbdb6ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="691ffa83-3968-497f-a360-a49ba0b281d0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="9b69f63f-ee55-4576-abcf-310e6a826f67"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c1b62aae-1e78-45c3-b0df-b0aa3257ed3e" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150423_044313</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14630A4EFD102258E05305991F0AA2AC</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14630A4EFD1C2258E05305991F0AA2AC</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPZxJzgJoYVMYSYFymYKvYV2Ly87xhHgNrHT2OGyv/7YAbJAaQ+7+5SxIkufpM+SLgROYsfzhYBMUs4qyyRmwiukLSPPmMexoMJjOAHhSeKF/nDgOVXLw9srRiXotoyfzRo+b9hNMOuEnJvuOGqYTWzXzEnNGdfrFrjR2FWqQuQQMCExky3Dsey6abmmUxvZtmdbntOontn2D6PyBJlQtpVK1TI2oJaiZcykTD2EFotFdVGr8myKHMuy0bfhICQzSLDRvlhHVDjK2ht9Uo2AQByTKuEJukB7OheR8EI6ZVjmGWx8Re/5spDVREonEnT6ySjvQhSwCS+OHcw4owTH9BfW+RmCnPGo4sdTnlE5S94Nwra0YROWxCS2yz4ZaB/aiYb2EGYCm2KG7Y2tB5hABoxA5fEhaBmfTqtacXWUYSYmPEvE/vHP8ACbQ8xTiEyxDWsD7XSDRzLVvgDiBYzEuaBzuNFkTTEBsakmkNNNVe4ymNDlgApF0KXQ6NAuvIPjOhtdOgUh/6ZAO8VZG3nCcQ5ttLTO8exLXQyun/3mJf+ccXzbPB91Vy+tAsCuciEoS7s+HpCyJNH6xn387SkLJzeL7w69ld2MEdn5AXA5/HWdPKVPtSAkzUUG0Pk2/Epv+737vqhbX79PicyRbExv/afnYBrVgmnnHga4/6PR/66uPYp+3ExeHr6c3XXc68X4JphfjVjv8+IZ9a3Hl3Ore22f94RchfaV+9y/f0Tk85D1p/1wTFLRCyXPBh149hdulw6GweRrczUetspwdvDvy7ZvPszHz0Dk9qhpEHQrV6pKWH7czLSERuakUPVS3XyEBCaNtr6le4eXq3ZHI0/VcH223bOa5bu9q6596Tj1Rs+q16x6s2lfWb7v+J1tk1mjOIDY4WxCtS/dcte0+RggSTwBLILMnPNcdTphfGCxiyWuBOxBPQLOBIy4as+2s/pF+Rm3JIxFbZ6m7AW/NpZ8blRuuLxlt5k/kZDt92R3ryc/AKEpBd24Na+FIraQKheveJ7L2K7OcZVBrlp7prus57iNOhI0SWPQSFHCozyGajpLi8wgsf46JiaikD70RsVrezeuw3/bFCidiGoFoWO5BFVGODJc7G0gbwI+OzqEtub9PKL6Yal8yoySNZL9X79povlRcqQ78MO7LehS9w/u/uyEP+2/NDD4B+eDf3Wuavn2Jvogn+iwlKWjaE533G63DjW/VMdrb4n4iu3qazWfz/OCe65bQ5kyjzQJkOWgEEiuevJqxF+AodIKOmkAlsAPnJfyfYi5nLFQYgmJeiuV4njCxhOC0BtPoB758tR1as+lSp2EpTwm68RqW9OIP1zoiEe0nhLfqc+CZ9Hvih2xteNHxakWHknZVJ/08Fu9wwvClVmq2jbPdo0fM3DM+b6wTHKJRSpCjXMJ7/+p6H7cMjAhPGcy6BqFYHdGFDjlKgXvt9IbM8UYKvdS+v+LqUkLChBQ26yghX29Xnj6CbDpzpzZOD0+aqyrj0bNPrr2G/FbyU6eDjne/g8=</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C244717DBF8944168C5CD71D9585DBEC</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1463002A1B565254E05307991F0AC5A5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14630A4EFD0F2258E05305991F0AA2AC</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14630A4EFD0F2258E05305991F0AA2AC</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14630A4EFD1B2258E05305991F0AA2AC</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14630A4EFD1B2258E05305991F0AA2AC</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1463002A1B565254E05307991F0AC5A5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C244717DBF8944168C5CD71D9585DBEC</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>14630A4EFD1C2258E05305991F0AA2AC</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>C244717DBF8944168C5CD71D9585DBEC</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:C244717DBF8944168C5CD71D9585DBEC</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>14630A4EFD1C2258E05305991F0AA2AC</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>78026</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14630A4EFD172258E05305991F0AA2AC</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14630A4EFD172258E05305991F0AA2AC</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34806 - StreamDelete - LLP - AccountNotActive - ACCOUNT.STATUS of blocked:tou - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="cf9a8356-6f37-4414-b9a0-4af8ce684600" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0e304e83-646d-4d1d-8754-3a28002b1390"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="89943a54-13a5-45b6-8485-e1d5017afb69"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="efd30efa-6eca-4f38-87f7-d778a2101e00" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="3d529c89-7e91-41f2-82b2-0679d4167462"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="837116d8-573e-4d7a-85f1-2bfc7c9dd68a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="8458172f-0d42-48a3-b4c7-2cddc52c7477"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="575a30b5-6c98-43f0-8bbc-c60eb27c6f17"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked:tou" id="3aa0d99f-2482-4618-8345-2ba92d8e0acf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "blocked:tou");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="004533d1-3cc1-4746-8364-e91932041fc3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="b67abc46-4831-4082-957b-38f8522a517f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c5bdde64-bffa-4180-8015-3c4e7033744a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20140906_100713</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC1857B2CA7A89BFE0401F0A07990730</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC1857BB3DCEFA45E0401F0A059941F8</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC1780B7D49A85D6E0401F0A0599116B</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC1857BB3DCEFA45E0401F0A059941F8</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC1857BB3DCEFA45E0401F0A059941F8</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC1780B7D49A85D6E0401F0A0599116B</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34807 - StreamDelete - LLP - AccountNotActive - ACCOUNT.STATUS of blocked - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4c1af0a3-30af-4bba-a9ba-44dc0d07861d" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ebf71267-b9b8-432f-b24b-f4ec274705ea"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="96284b13-33c4-4d66-bc0d-42776b03185b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="bc69d99b-25c7-438a-afdf-721b39682c04" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="a90a0546-6daa-4ec2-9d81-3688f7cda3f2"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="13c26096-bfcb-4113-aa44-0df1d5c3f62b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="75852b06-611c-486c-85f4-ca38ead9b4fb"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="4b835ba9-1ab9-4d87-98af-0981c9b4df77"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked" id="8b872f21-115d-42d4-bf0c-56f8248b5c85"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "blocked");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="073ffbe2-3778-404a-aa6f-af04274969e1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="79dfab64-44a1-4f6e-925b-db642cf8d161"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="bf1aa5e6-068e-48d2-b5d6-ef5d6c8f38e1" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20140906_100713</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6CADF03B819B32E0401F0A059941EF</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FC6CADEA42D4A200E0401F0A059941D9</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>FC6BD6EF7937588DE0401F0A05993B77</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FC6CADEA42D4A200E0401F0A059941D9</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6CADEA42D4A200E0401F0A059941D9</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>FC6BD6EF7937588DE0401F0A05993B77</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>78032</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34841 - StreamDelete - LLP - ACCOUNT_USER.STATUS of deleted -403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="406e608b-68b3-4528-8264-8c11df326b7b" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5c12662d-05ac-48d2-9d06-87ae925fc016"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9f383ac9-7e65-4e6f-af95-44a12842f5ba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="3f8af242-2ace-4210-80ac-9c122b64986f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="b6e494c4-56b9-4471-8839-8a17c5a03f97"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="9b959b89-98c5-424a-868b-b7036660c2c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="209d0ac7-7b48-40ef-8c7f-8367f4ba55ac"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="fb97a78b-e06f-4001-964d-a67625f12ee0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to deleted" id="44aff1b0-ad10-4ebe-8232-12bdee47c3b0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="754afa0a-4d8f-453f-bc4f-87870d974056"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="6c93e74e-6feb-4e5f-854c-520dc59bc914"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="bf93df88-a901-44d9-b788-3f16f58c77d7" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150226_074510</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFF918D478B4DC1E05305991F0A413A</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFF917FFD744DCEE05305991F0A48E8</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc6JKEP4rFvu4hVzEC1S0yks8MTExCSbZk5etcWhwsjgQZkCyv/7MoLJiTI67+0RN0/P115fp7jOGVqHp9BmDhJOI1vJVSJlTSLtKmlAnQowwh6IVMIdjx+1fTx2zrjtod0WpTUZd5btvt71FC2FVb1qgWiZaqHZHN9VOE4ONmj62oCFUGUthQhlHlHcVUzeaqtAxW3PDchqm0zTrLav1rNQeIWECW6jUdWVLKmddZcl57Gjaer2urxv1KAk0U9cN7dv11MVLWCGld7bxqDCU9Lb6uO4BhjDEdRyttDOtonPmMcclAUU8TWBry/vIlq7ptiZ0PEaCL0p5F7wJ9aPiOEQ0ogSjkPxEMj7XwJeRV+uHQZQQvlx96IShS2AVcqxiw6JfFK1K7USgCsOEIZUtkbHFugcfEqAYag/3k67y5bSsFVfnCaLMj5IVqx5/jw/QDMIoBk9lO7e21E4HPBKp3hlgZ0JxmDKSwY0s1hhhYNtsAj4dqnabgE/yKWGiQHMm2Wn79A6Om2iMSACM/0mC9pKzAXlEYQq9/sXYzF6/vtwTZqeo8TSfX+Vf0UVn+ci6BYF95UJQpnZzPCjKsog2N8YPF7E9TcJbP+88u5dXs28xn+T+4/LuR+dn0raur4x10AmeFtld7v8zQ7MbQtHgigfmQ/yDcffFN0b24/zJmI70u+dLc5Hf3l5aQzcZDy4HkT9vXwU3qc9XczMAOr1Y4jd7PbMNbcpiOjMM+zIz03nLD4dotvC9Rac1db3zQac95u6/bjhgRvN5cP460wbaXbd0Z49/VbZ78266eAHMd0dZBpNRbSyyhPjnzUxKiKf6haoTy+bDOFCu9OQt2TucVLQ74jkih5uzPh6PbaM9Ho/aDWs0PD/Xmw29advGWO9bnfPOrslsWBxQHEbUJ9KWbLmbsvmcIF45DKgHiZpFqeh0TPkEcYQ4qk3ovXgEEWUwj0R7bjbB1NsvWRb8fGnkjYaJfA8naabUbiI+o7Ok73NIqi25XWnJ94BJTED2bVnWTNQ14yIUryhLeWjUM1SnkIrOnsgm65hWp6kxsopDkES1VeSlIdTjZVwERmObr6kizArp/fm8eGwfunX4bxcBoeMRqcCkLwMQWYQjs8XaOfLO4dbRGbSD76ceke9KhJMnBG+YVH/9qhJZHmWJjKZ993ZHutT9jbvfh+534w8Bpn9hfPq3xkUu39/UPomndpjK0pCXkT2zu6VDjC/R8Hq7QnxF9dd6mmVpUXpt2dgTAa/JItB0U3MBp6Ilv82jH0C1EkU7af6VxA+Ml/IqxZQvqcsRh5V4K7XieMLC4wKTC89EvPH81G2qYlKEjkPOj8mGoVjWJONP9znsYKknxLfis44S71fGjmDt2RF+in2HExrIk5x9bx/UBY4ErBglPEr2wY8BHDNeFZZBLrlwUVCLlMPHf2qyHXcVhHGUUj4ZKYVgf0QUPPlbDM4vpXcwxRQq11Ly/3upSooSwCCWWUYKfLldOPIJ0GBvzGyNvp80nZHV7vTFpDEqk8Zo9MugVNj13onfS/bidFjjvf8A</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0FFF918D478A4DC1E05305991F0A413A</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFF918D478A4DC1E05305991F0A413A</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0FFF917FFD734DCEE05305991F0A48E8</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFF917FFD734DCEE05305991F0A48E8</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:0FFF62B12BF84579E05307991F0AE1C3</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:8C2D3FA8A5BE43819C6BC720A1CBE14D</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0FFF57E632AB442FE05305991F0AB8AC</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>8C2D3FA8A5BE43819C6BC720A1CBE14D</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:8C2D3FA8A5BE43819C6BC720A1CBE14D</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>0FFF57E632AB442FE05305991F0AB8AC</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>78034</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFF918D47924DC1E05305991F0A413A</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFF918D47924DC1E05305991F0A413A</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_34845 - StreamDelete - LLP - ACCOUNT_USER.STATUS of blocked - 200 OK_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="641cc8d6-268d-4766-a2f9-371ad454cf12" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a10a187e-0e16-44be-a19c-6e98062a4213"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9b37c199-d8aa-4c13-8369-a3f8d32c7176"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="cadf0622-be54-4de4-80e2-05c34382ca47" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="e2d5f5d5-4fa0-438f-b04e-273d6e1239b1"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="4d267d96-5036-4a89-858a-a45bf918d620"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="64765f95-6042-44e3-83f2-76daaa588f46"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="66fc9c44-5138-461a-b0ff-bb6e9149af81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to blocked" id="feaa8f20-9de9-4a6e-8db3-384c0eba3bc3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "blocked");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="47a5d4f1-f4ca-4708-9248-e3a4a9c7fd61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int cnt = tC.getPropertyValue("counter").toInteger();

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	tC.setPropertyValue("expectDBDeletedBy", tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus","deleted");
	tC.setPropertyValue("expectDBDeletedBy_" + cnt, tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("expectDBStatus_" + cnt, "deleted");
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="19b5d1d9-bf14-468b-9bf4-3bb63b33cf71"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f7504758-7cbd-47da-95ae-952839e4cfc4" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150226_071251</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFF57DF1AA44427E05305991F0AE589</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFF57E632AB442FE05305991F0AB8AC</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZpc+I8DP4rTPpxJ+TizBRmwrVvWtpSoNd+6RhHgNvESWOH69evHSDlal92d4YZxoosPZIeS7pkKPBN22EMYk5CmlsEPmV2Kq0pSUztEDHCbIoCYDbH9sC56dpmXrfR9oqSc1s15dUcjyr6qGCoY0tHagGVKyoyrKqKzJFp6ZUqjM2qUGUsAZcyjiivKaZuFFXdVM3S0CjYhiV+ecuq/lJyjxAzYVuo5HVlA2rBasqU88jWtPl8np9b+TCeaKauG9rzTXeApxAgpX65jih1FNc3+jjvAQbfx3kcBtqltqdz6TF7QCYU8SSGjS/vK1+6plc1oeMxMrlQsrvguXQcpscmoiElGPlkhWR+boBPQy/n+JMwJnwafBmEoUvDKiywio0CvVC0fWhnGtpDGDOksikyNrb6MIYYKIbcQ9+tKRfnVS29OowRZeMwDtj+8c/wAJ2BH0bgqWwb1gba+QZPZKp+Cdh2KfYTRmZwK8kaIQxsU03A55vK9WIYk0WXMEHQBZPotF14B8d1NlpkAoz/TYF2irM28oj8BOq3/SCE59v53bXRfXPNQTJ6GQSo0ViyeS0FsKucCrLSro8HpMxItL7RcW5XP41SMKz+6rOG9XTtPz9Xuy3c9N+KjVb7JXbLz4WhnzTjwk3xLfqPl5erl9LyyWoU71Yfrn571elcfTR6zrBtlifGKhrfPU2fWkns3v/grcK9xjGL3388lpYjil4erzut8iC6d94L7ateRLrtCby5Ro9yl5Jh9FCsuoPHykd/9kA6xYVz//R+T4yfy2mjoWsPtSycHfz7su2bF1l6A8y3R0kDt5XriCoh/n0zkxLiqeNU1Y5k82EcKFfq8pbsHXYi2h3xbFHD9VnvdDrFcrtkmY5TKJidtl609GK1anR0p1Fxmtsms0ZxALEZ0jGRvmTLXdPme4A4sBlQD2J1Fiai0zHlG4stxFHOpX3xCELKYBiK9mzMQ2P05lf5PCrpBq+WLbRalXmlZCi525Df0bvYGXOI95tyea8p9wGTiIDs3JLYTDCbcZGMDzRLuG/kZyhPIRG9PZZt1jYLlaLGSBD5IKFqQeglPuSjaZSmRmPrf1NFmKXSfnuYPrcvAzv8ts2B0PGIVGAylgaIOsKJ6aJvAzkKuHRyCm3NO4lH5MsSCeUxwWsk+58+eSIJkpGk1XUGvS3oTPcP7r42B6/GXxro/oPz7r86F7U8vql9k0/tsJSZI29Gdtxu1w4xwETLq2+J+IHyH/lkNktS6pVla4+FeU2SQNNNbQA4EU15OQzfgWqZFe2sCZgBP3CeyfchJnxKBxxxCMRbyaXHM1aeATC58rjilS/O3af2XIrUcVjwU7KmL9Y1ifjbjQ7bWOoJcU/8zcPY+6zYCVs7fkScYuPhhE7kSU6/5Re8wKEwS0TfDuNd46cMnHK+L8ySnGHhglCjhMPXX3KyIdcUhHGYiAHUUlLB7pBIcfJlBPan0pGZdA5liyn5/81UJSkFMIh1lpHUvtwvbPkE6GRn0GycHs+aVsdwHEvMmvLurGkXK5/83ENXPxIfS3bydMjx+m8=</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FBD88A27471C495F8470FA2BD3B0CCB7</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFF586C33154434E05305991F0A64C0</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0FFF57DF1AA34427E05305991F0AE589</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFF57DF1AA34427E05305991F0AE589</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0FFF57E632AA442FE05305991F0AB8AC</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFF57E632AA442FE05305991F0AB8AC</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:0FFF586C33154434E05305991F0A64C0</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FBD88A27471C495F8470FA2BD3B0CCB7</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0FFF57E632AB442FE05305991F0AB8AC</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>FBD88A27471C495F8470FA2BD3B0CCB7</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:FBD88A27471C495F8470FA2BD3B0CCB7</con:value></con:property><con:property><con:name>expectStatus_1</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">LLASP</con:value></con:property><con:property><con:name>expectDBCreateUser_1</con:name><con:value>0FFF57E632AB442FE05305991F0AB8AC</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType_1</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value>deleted</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>78038</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFF57DF1AAB4427E05305991F0AE589</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0FFF57DF1AAB4427E05305991F0AE589</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Cases Containing APIs" disabled="true" id="497d19bc-87aa-4519-b24d-34ddda853a02"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API" searchProperties="true" id="cf8fefad-1c3f-4def-868c-31d8875cf981" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="50809f4d-7be1-4863-af31-2e203c23bd6a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="07fcc0ad-9858-461b-a7ae-dfd2b5a38a41"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="9b302a15-1a42-4bb0-bcf6-4c0fa03ca0b3"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("POST - STS");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0910":  // LLP
		keyStorePath = "I:\\deceAPI\\certs\\910_concat.pem";
	break;
	case "9116":  // DLPCS
		keyStorePath = "I:\\deceAPI\\certs\\9116_concat.pem";
	break;
	case "0914":  // DLP
		keyStorePath = "I:\\deceAPI\\certs\\914_concat.pem";
	break;
	case "0912":  // RTR
		keyStorePath = "I:\\deceAPI\\certs\\912_concat.pem";
	break;
	case "1910":  // LLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1910.pem";
	break;
	case "1912":  // RTR Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1912.pem";
	break;
	case "1914":  // DLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1914_concat.pem";
	break;
	case "0999":
		keyStorePath = "C:\\Temp\\peter.pem";
	break;
	case "80080010":
	default:
		keyStorePath = "I:\\deceAPI\\certs\\80080010_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="9ac6d344-6a6f-4745-918d-d05b5c1816ab"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS" id="154b39c8-c894-4550-8cba-43a9ddb4fb02"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" sslKeystore="914_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="http://www.decellc.org/schema/2010/10/dece">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="449ec0bc-cfa3-4bf6-bbe3-dbd1556d7335"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('POST - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";

if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="79eb5fbb-0688-4838-a41a-f4b590d479e0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTS");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest  = url + "/rest/$major/$minor/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="593081ba-858a-4efc-a0d0-b3086ac505c7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>tokentype</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pjgorg1full1</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>431</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2011/06/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="Forbidden">
       <Reason>Forbidden</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>policyStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyClass</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>null&lt;/dece:Resource></con:value></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET API" searchProperties="true" id="90f24f7f-2efe-4e14-8a7f-e4f8e1c030ff" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="54e9a869-335d-454c-8d1f-54eee084d32b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="4ec857d2-963d-47c9-9d7f-f70f1577d94f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="0d3e03bd-ab0f-42a7-bdf7-73fc29a80806"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0910":
		keyStorePath = "I:\\deceAPI\\certs\\910_concat.pem";
	break;
	case "9115":  // LLPCS
		keyStorePath = "I:\\deceAPI\\certs\\9115_concat.pem";
	break;
	case "9116":  // DLPCS
		keyStorePath = "I:\\deceAPI\\certs\\9116_concat.pem";
	break;
	case "0912":
		keyStorePath = "I:\\deceAPI\\certs\\912_concat.pem";
	break;
	case "0914":
		keyStorePath = "I:\\deceAPI\\certs\\914_concat.pem";
	break;
	case "1910":  // LLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1910.pem";
	break;
	case "1912":  // RTR Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1912.pem";
	break;
	case "1914":  // DLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1914_concat.pem";
	break;
	case "666":
		keyStorePath = "I:\\deceAPI\\certs\\666_concat.pem";
	break;
	case "0999":
		keyStorePath = "C:\\Temp\\peter.pem";
	break;
	case "80080010":
	default:
		keyStorePath = "I:\\deceAPI\\certs\\80080010_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - GET" id="884b10e5-3425-4e53-9396-2244fb904722"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="912_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="1e05ab12-11a4-4719-8e41-cc630f46d4ae"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
		 	status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="eebe874f-3340-4ebc-b290-0825c70c5dfe"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest  = url + "/rest/$major/$minor/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#");
		if (expectErrType == "SUCCESS") {
			// Verify response sizes...
			this.log.info "Assertion size: " + myXML.size();

			/*
			assert myXML."saml2:Assertion".size() == 1;
			assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
			*/
			assert myXML.size() == 1;
			assert myXML."ds:Signature".size() == 1;
			assert myXML."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."ds:Signature"."ds:SignatureValue".size()  == 1;
			assert myXML."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Subject"."saml2:NameID".size() == 1;

			def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
		} else {
			// ErrorCode
			this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
			assert myXML.Error.@ErrorID.toString() == errorID;
	
			// ErrorReason
			this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
			assert myXML.Error.Reason.toString() == errorReason;

			// ErrorLink
			this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="db79e48f-13e1-4e9b-b017-cf8c32330e99"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";

			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			tC.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			tC.setPropertyValue("assertionAccountIdFULL",accountId);
			tC.setPropertyValue("assertionUserId",userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			tC.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="604c0532-b9af-4e51-b943-973a55e4b77f"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="1af9578c-9412-4eb5-ad0c-05fd818256c1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",tC.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",tC.getPropertyValue("assert"));
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionAccountId",tC.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",tC.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue("assertionUserIdFULL"));</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5c6066d4-e730-489e-8d4b-0d82b53690f6</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="5c6066d4-e730-489e-8d4b-0d82b53690f6" IssueInstant="2011-03-17T12:51:51.793Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#5c6066d4-e730-489e-8d4b-0d82b53690f6">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>H6AHXB+TW2VQo6vQPb5x85u4TzY=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
UkwSFirz8+VJs/qThIin1zBuBmGN53iSVdH1pOx9C2Xwenm1jCH60W+NSOvZCwmDpgzALZ5tYDt4
tm6cc2yuWjFIY0dk1tQqjrQW6T77cTyJ3v2cnw1CkNbGoXqxKCS444ULTrXgBVnCHH6Vm7dfpd09
nHBu8NNfd4LWzTWRs+8=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:9B4E7893991CB1C5E0401F0A0599216F</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData InResponseTo="C1D5B951FC094B7A67A616F44AF48A96" NotOnOrAfter="2011-03-18T12:51:51.793Z" Recipient="http://stdecqavutl1.va.neustar.com:2485/saml/dumpcustomerpost.php"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2011-03-17T12:51:41.793Z" NotOnOrAfter="2012-03-17T12:51:51.793Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:0912</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:1912</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/rest/1/0/SecurityToken/Assertion/5c6066d4-e730-489e-8d4b-0d82b53690f6</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2011-03-17T12:51:51.793Z"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=ISO-8859-1</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>4278</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertId</con:name><con:value>5c6066d4-e730-489e-8d4b-0d82b53690f6</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate" searchProperties="true" id="e6198250-d5d2-4ecc-9afd-b91683ae776f" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="426bef0d-23d9-4ab0-87b8-c1ab9cb26549"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());
tC.setPropertyValue("rtrnodeid",tP.getPropertyValue("nodeoid10").toString());
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("cid",null);
tC.setPropertyValue("alid",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="7bd9c5ed-a91e-45cd-b372-f265908d3166"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL", callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("cid", callTC.getPropertyValue("cid"));
tC.setPropertyValue("alid", callTC.getPropertyValue("alid"));

if (tC.getPropertyValue("alid") == "null" || tC.getPropertyValue("alid") == null) {
	tC.setPropertyValue("alid", tP.getPropertyValue("alid"));
}
if (tC.getPropertyValue("cid") == "null" || tC.getPropertyValue("cid") == null) {
	tC.setPropertyValue("cid", tP.getPropertyValue("cid"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity as RTR Consumer" id="1c072c2a-9edc-4d98-a22d-5c570f8ad8f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="a33d26f3-6b3b-42d2-88b2-633f893255ab"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - RightsTokenCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - RightsTokenCreate" id="046d9c98-bdd6-463c-ada2-7cb65d218979"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/${#TestCase#assertionAccountIdFULL}/RightsToken" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - RightsTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#Project#alid}" ContentID="${#Project#cid}">
                <ns4:SoldAs>
                                <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
                                <ns4:ContentID>${#Project#cid}</ns4:ContentID>
                </ns4:SoldAs>
                <ns4:RightsProfiles>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                               
                </ns4:RightsProfiles>
                <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>
                                <ns4:Preference>3</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
				<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">   
                                <ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location>                                
                                <ns4:Preference>3</ns4:Preference> 
</ns4:StreamWebLoc> 
<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">    
                                <ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location>                                
                                <ns4:Preference>3</ns4:Preference> 
</ns4:StreamWebLoc>

                <ns4:PurchaseInfo>
                                <ns4:NodeID>urn:dece:org:org:dece:${#TestCase#nodeid}</ns4:NodeID>
                                <ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction>
                                <ns4:PurchaseAccount>urn:dece:accountid:org:dece:${#TestCase#assertionAccountId}</ns4:PurchaseAccount>
                                <ns4:PurchaseUser>urn:dece:userid:org:dece:${#TestCase#assertionUserId}</ns4:PurchaseUser>
                                <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>
                </ns4:PurchaseInfo>
</ns4:RightsTokenData>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Handle from API Result" id="9a25b515-9e2f-498d-9d8f-a8fd7e1c82e0"><con:settings/><con:config><script>import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def targetHost = testProject.getPropertyValue("targetHost");
def nodeaccountId = testCase.getPropertyValue("assertionAccountIdFULL");
def urnRightsToken = testProject.getPropertyValue("urnRightsToken");
def urnAcct = testProject.getPropertyValue("urnaccount");
def tStep  = testCase.getTestStepByName('POST - RightsTokenCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String rightsid = null;
String rightsidfull = null;
String contentLocation = null;
String major = testProject.getPropertyValue("VersionMajor");
String minor = testProject.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
	}
}

def b = contentLocation;
//def urlStr = b.getPath();
def urlStr = b;
//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/rest/$major/$minor/Account/$nodeaccountId/RightsToken/$urnRightsToken[0-9, A-F]*");


//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

if(testProject.getPropertyValue("V2") == testProject.getPropertyValue("versionUrlEncode"))
{
int lastColon = urlStr.lastIndexOf('%');
int lastSlash = urlStr.lastIndexOf('/');
rightsid = urlStr.substring(lastColon + 3);
rightsidFULL = urlStr.substring(lastSlash + 1);
testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidFULL);
}
else
{
int lastColon = urlStr.lastIndexOf(':');
int lastSlash = urlStr.lastIndexOf('/');
rightsid = urlStr.substring(lastColon + 1);
rightsidFULL = urlStr.substring(lastSlash + 1);
testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidFULL);
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Return RightsToken to calling Test Case" id="a8bd204d-a649-45a0-9d29-725292944b96"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("rightstokenid",tC.getPropertyValue("rightstokenid"));
callTC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL"));</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="76703de5-11de-45ea-9ca3-903217cbfcba"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11507 - StreamDelete - LLP - Single StreamDelete against an active stream handle - 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0 Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150611_071756</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">183EDFFFDBF6C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">183EDFFFDBFEC6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPrYCUlIuGUKM0Cgh7NQWKCX05eOcURwGxwaO+Hy69cOkAIFDrv7lLEiS5+kz5LuGJr5ObvGGIScBDSznPmU2Ym0okQhtQPECLMpmgGzObaHtW7HzmV1G+2uKJm2U1HewCpbbqlsqHreKqqWOS6qZdcoqObYKBUNY1zOuUWhylgEbco4oryi5HQjr+oF1TBGhmlbedvMZU2r8KpkniBkwrZQyerKFtSSVZQp53Nb0xaLRXZhZoPQ03K6bmgv3c4QT2GGlOrdJqLEUVjd6uOsCxh8H2dxMNPutAOdO5fZQ+JRxKMQtr7cc750TS9rQsdlxLtR0rvgtukkSI4NRANKMPLJGsn8dIFPAzdT870gJHw6OxuEoUvDKiyxig2L3ijaIbQrDR0gDBlS2RQZW1sDmEAIFEPmcdCuKDfXVS25OgoRZZMgnLHD4+/hARqDH8zBVdkurC206w2eyFT1DrDdptiPGInhQZJ1jjCwbTUBX28q0w9hQpYdwgRBl0yi0/bhHR032XCIB4z/SYH2irMx8oT8CKrDddSEuKnXS62nbvk/+mz+WyIP5oPb1CsJgH3lRJCWdnM8ImVKos2N58efw9qoVvhZKOLeJ1/qT0HH67bq69t+n76ueWdx6/QZsx5vV3VTv/eexs2eNSm0KfrxXH5odRuG894uGY1mabku9N47JTqEuMQZxB/3AtjqNd+9fe4F993p4/O4vvrhjbz3V5pz0T/8nkW8vBLBRZPRq9HTa3p94DfDQVd313rTGYUjc7wqxy8vNYPzNvUqaTh7+A9luzc/jMbvgPnuKGnQdjItUSXELzczKSGuOklU7blsPowD5UpV3pK9w45EuyOuLWq4ORsls+m0Wi2n3so3Co7e1POm6ZTLRkuvNfVccddkNiiOIDYCOiHSl2y5G9pcBohnNgPqQqjGQSQ6HVMuWHQQR5k2HYhHEFAGo0C058+xaS7eC/EYVkUjWn1Qo0y9yXpVUDIPAe/RXlibcAgPe3LhoCcPAJM5Adm4Ja+ZIDbjIhefKI64b2RjlKUQidYeyi5r56xSXmNkNvdBItVmgRv5kJ1P50lmNLb55lSEWSIdNEfJazsb1/G/XQqEjkukApOx1EGUEU4Ml9wukG8BF04OoZ35WuQS+bBEPnlI8AbJ4a8vmkh+pBxxOrVhfwc61f2Nu2+N4ZvxhwY6f+G887fORS2/39Qu5FM7LmXqyI3Jntvd1iHml+h41R0RP5GR/cxGcRwl3LMsUwuFeU2SQNNz2hBwJHryahR8ANVSK9pVAzAFfuQ8lR9CjPiUDjniMBNvJZMcr9h4hsDkxtMWj3x57Tp14FKkjsOSn5I1fLGtScQXFzpsY6knxH3xWQSh+1WxE7b2/Ig4xcLDCfXkSQ6/1Rle4ECYJaJtB+G+8VMGTjk/FKZJTrFwQahxxOH8n4zsxxUFYRxElLcdJRHsz4gEJ1/Nwf5S+mYmGUPpXkr+fzFVSUIBDGKbZSSxL9cLWz4B6u3Nma3TM6PGujRqDtFVv4m/S/bydMzx6i8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:183EDFFFDBF4C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:183EDFFFDBF5C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">183EDFFFDBF4C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">183EDFFFDBF5C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77773</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">183EDFFFDBFDC6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">183EDFFFDBFDC6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A183EDFFFDBF4C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamCreate" searchProperties="true" id="40d07701-7c1a-40f3-a5da-d71e08e428be" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="13e4d4fd-fecc-4735-853f-80b00a4c37e0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("transactionid",null);
tC.setPropertyValue("requestBody",null);
tC.setPropertyValue("sCbodyRequestingUserSetting",null);
tC.setPropertyValue("expectErrTypeStreamCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="11214296-d01c-4b9b-809a-e3b1ecc37ad8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid",callTC.getPropertyValue("transactionid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("expectErrTypeStreamCreate",callTC.getPropertyValue("expectErrTypeStreamCreate"));
tC.setPropertyValue("sCbodyRequestingUserSetting",callTC.getPropertyValue("sCbodyRequestingUserSetting"));

if (tC.getPropertyValue("expectErrTypeStreamCreate") == null || tC.getPropertyValue("expectErrTypeStreamCreate") == "") {
	tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
}
if (tC.getPropertyValue("nodetype") == null || tC.getPropertyValue("nodetype") == "") {
	tC.setPropertyValue("nodetype","dlp");
}
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "") {
	tC.setPropertyValue("counter","1");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Construct the StreamCreate request Body" id="6eee22a7-9f15-4c56-8fde-8e5eda68392a"><con:settings/><con:config><script><![CDATA[def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String b = "";
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema").toString();
String SchemaNameSpace = tP.getPropertyValue("SchemaNameSpace").toString();
String assertionUserIdFULL = tC.getPropertyValue("assertionUserIdFULL").toString();
String assertionUserId = tC.getPropertyValue("assertionUserId").toString();
String rightstokenidFULL = tC.getPropertyValue("rightstokenidFULL").toString();
String rightstokenid= tC.getPropertyValue("rightstokenid").toString();
String transactionid = tC.getPropertyValue("transactionid").toString();
String nickname = tC.getPropertyValue("nickname").toString();
String sCbodyRequestingUserSetting = tC.getPropertyValue("sCbodyRequestingUserSetting");

if (transactionid == "null") {
	log.info "yes";
	log.info transactionid.length();
	transactionid = "";
}
if (nickname == "null") {
	nickname = "";
}
if (rightstokenidFULL == "null") {
	rightstokenidFULL = "";
}
if (assertionUserIdFULL == "null") {
	assertionUserIdFULL = "";
}

String xmlBody = """<Stream xmlns="$coordinatorSchema" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
      <StreamClientNickname>$nickname</StreamClientNickname> 
      %%%REQUESTINGUSER%%%
      <RightsTokenID>urn:dece:rightstokenid:org:dece:$rightstokenid</RightsTokenID> 
      <TransactionID>$transactionid</TransactionID>
</Stream>""";

log.info "sCbodyRequestingUserSetting[$sCbodyRequestingUserSetting]";

switch (sCbodyRequestingUserSetting) {
	case "exclude":
		b = "";
		break;
	case "nullContent":
		b = "<RequestingUserID></RequestingUserID>";
		break;
	default:
		b = "<RequestingUserID>urn:dece:userid:org:dece:$assertionUserId</RequestingUserID>";
		break;
}

xmlBody = xmlBody.replaceAll("%%%REQUESTINGUSER%%%", b);

log.info xmlBody;
tC.setPropertyValue("requestBody", xmlBody);

]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="e4676b6a-dfed-4b12-a70c-56296ddc8f4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - StreamCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - StreamCreate" id="46e86e75-e333-40c1-be94-94780a4f084f"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - StreamCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#TestCase#requestBody}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Log" disabled="true" id="265966d4-4e7b-49d7-b34e-085be8e7ba5f"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def testSteps = new ArrayList();
def testSteplog;
def date = new Date(); 
def RightsTClogFile = new File ("c:\\Temp\\RightsTClogFile.txt");
def RightsTCLogs;

def callTSuitename = testCase.getPropertyValue("sName");
def callTCasename = testCase.getPropertyValue("tName");
def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

count  = 0;

for( r in testRunner.results )
{
   count++ ;
     if (r.toString().indexOf ("Request") != -1)
   {    
                   def rawRequest = new String( r.rawRequestData );                                      

                    testSteplog = "\n\n" + "[" + count.toString() +  "] ###################" + "\n\n" +       
                "TimeStamp :" + r.getTimeStamp() + "[$date]" +"------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " + "\n\n" +   "---------"+ " CallingTestCase Name :  " + CallingTCase.getName() + "\n\n" + "------------"+ r.testStep.name + "Request Message --------" + "\n\n" + rawRequest.tokenize('\n').last() +"\n\n" + "-------------" + r.testStep.name +" Response Message Header--------" +"\n\n"+ r.getResponseHeaders()+ "\n\n" + " Response Message Body--------" +"\n\n"+ r.testStep.getProperty("response").getValue()+ "\n\n" +"-----"+ r.testStep.name + " Assertions-------" +"\n\n" +   r.messages +
                " ###################" + "\n\n" ;
   }
    else
   {           
                 testSteplog = "\n\n" + "[" + count.toString() +  "] ###################### " + "\n\n" +
       "TimeStamp :" + r.getTimeStamp() + "[$date]" + "------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " +"\n\n" +   "---------"+ " CallingTest Case Name :   " + CallingTCase.getName() +
                  " ###################" + "\n\n";   
   }
   
   testSteps.add(testSteplog); 
   
RightsTCLogs = testSteplog.toString();
log.info RightsTCLogs;
RightsTClogFile << RightsTCLogs;
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="b3e6d83d-a159-4fb1-ba5b-598def8852e3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - StreamCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);


if(status=="HTTP/1.1 201 Created")
		{  int StreamCreateCount=Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));
			log.info "StreamCreateCount : "+StreamCreateCount;
			StreamCreateCount++;
		  log.info "StreamCreateCount : "+StreamCreateCount;
		   tP.setPropertyValue("StreamCreateCount", StreamCreateCount.toString());
		}</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="fc076b36-68d3-43c7-93cf-15b20b4d7c25"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamCreate[" + tC.getPropertyValue("expectErrTypeStreamCreate") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamCreate")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
		break;
		
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="fbac6b81-1b8e-45b9-b64c-85b1be7e1cc1"><con:settings/><con:config><script><![CDATA[import java.net.URLDecoder;
import java.net.URLEncoder;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");
def urnnode   = tP.getPropertyValue("urnNode");

def sh            = tC.getPropertyValue("streamhandleFULL");
def nodeid        = tC.getPropertyValue("nodeid");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
String urnErr = tP.getPropertyValue("urnError");





this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}
//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="78cc72c7-df71-470e-b24b-2dd8b6361fac"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Return the streamhandle" id="30202dcb-3150-431f-bdff-309c6d03312e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def cnt = tC.getPropertyValue("counter");

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tC.getPropertyValue("expectErrTypeStreamCreate") == "SUCCESS") {
	callTC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle"));
	callTC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL"));
	callTC.setPropertyValue("expectStatus","active");
	callTC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBDeletedBy",null);
	callTC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
	callTC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
		
	callTC.setPropertyValue("streamhandle_" + cnt,tC.getPropertyValue("streamhandle"));
	callTC.setPropertyValue("streamhandleFULL_" + cnt,tC.getPropertyValue("streamhandleFULL"));
	callTC.setPropertyValue("expectStatus_" + cnt,"active");
	callTC.setPropertyValue("expectDBCreatedBy_" + cnt,tC.getPropertyValue("nodeid"));
	callTC.setPropertyValue("expectDBDeletedBy_" + cnt,null);
	callTC.setPropertyValue("expectDBCreateUser_" + cnt,tC.getPropertyValue("useroid"));
	callTC.setPropertyValue("expectDBCreatedByNodeType_" + cnt,tC.getPropertyValue("nodetype"));
} </script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:InternalServerError">
      <Reason Language="en">An internal server error occurred.</Reason>
      <OriginalRequest>http://qa1.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:183EDFFFDBF4C6D0E0533D991F0AE027/Stream</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#InternalServerError</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>useroid</con:name><con:value>183EDFFFDBFEC6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150611_071756</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11507 - StreamDelete - LLP - Single StreamDelete against an active stream handle - 200 OK</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>P0 Test Cases</con:value></con:property><con:property><con:name>sCbodyRequestingUserSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>requestBody</con:name><con:value><![CDATA[<Stream xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
      <StreamClientNickname></StreamClientNickname> 
      <RequestingUserID>urn:dece:userid:org:dece:183EDFFFDBF5C6D0E0533D991F0AE027</RequestingUserID>
      <RightsTokenID>urn:dece:rightstokenid:org:dece:null</RightsTokenID> 
      <TransactionID></TransactionID>
</Stream>]]></con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77774</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9AAD6886B417B607E0401F0A0599673B</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 500 Server Error</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7002/dece/Account/urn:dece:accountid:org:dece:96D720451F824F56E0401F0A079921A9/Stream/urn:dece:streamhandleid:org:dece:98F5525959D92153E0401F0A07993F6C</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:183EDFFFDBF5C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>183EDFFFDBF5C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:183EDFFFDBF4C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>183EDFFFDBF4C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPrYCUlIuGUKM0Cgh7NQWKCX05eOcURwGxwaO+Hy69cOkAIFDrv7lLEiS5+kz5LuGJr5ObvGGIScBDSznPmU2Ym0okQhtQPECLMpmgGzObaHtW7HzmV1G+2uKJm2U1HewCpbbqlsqHreKqqWOS6qZdcoqObYKBUNY1zOuUWhylgEbco4oryi5HQjr+oF1TBGhmlbedvMZU2r8KpkniBkwrZQyerKFtSSVZQp53Nb0xaLRXZhZoPQ03K6bmgv3c4QT2GGlOrdJqLEUVjd6uOsCxh8H2dxMNPutAOdO5fZQ+JRxKMQtr7cc750TS9rQsdlxLtR0rvgtukkSI4NRANKMPLJGsn8dIFPAzdT870gJHw6OxuEoUvDKiyxig2L3ijaIbQrDR0gDBlS2RQZW1sDmEAIFEPmcdCuKDfXVS25OgoRZZMgnLHD4+/hARqDH8zBVdkurC206w2eyFT1DrDdptiPGInhQZJ1jjCwbTUBX28q0w9hQpYdwgRBl0yi0/bhHR032XCIB4z/SYH2irMx8oT8CKrDddSEuKnXS62nbvk/+mz+WyIP5oPb1CsJgH3lRJCWdnM8ImVKos2N58efw9qoVvhZKOLeJ1/qT0HH67bq69t+n76ueWdx6/QZsx5vV3VTv/eexs2eNSm0KfrxXH5odRuG894uGY1mabku9N47JTqEuMQZxB/3AtjqNd+9fe4F993p4/O4vvrhjbz3V5pz0T/8nkW8vBLBRZPRq9HTa3p94DfDQVd313rTGYUjc7wqxy8vNYPzNvUqaTh7+A9luzc/jMbvgPnuKGnQdjItUSXELzczKSGuOklU7blsPowD5UpV3pK9w45EuyOuLWq4ORsls+m0Wi2n3so3Co7e1POm6ZTLRkuvNfVccddkNiiOIDYCOiHSl2y5G9pcBohnNgPqQqjGQSQ6HVMuWHQQR5k2HYhHEFAGo0C058+xaS7eC/EYVkUjWn1Qo0y9yXpVUDIPAe/RXlibcAgPe3LhoCcPAJM5Adm4Ja+ZIDbjIhefKI64b2RjlKUQidYeyi5r56xSXmNkNvdBItVmgRv5kJ1P50lmNLb55lSEWSIdNEfJazsb1/G/XQqEjkukApOx1EGUEU4Ml9wukG8BF04OoZ35WuQS+bBEPnlI8AbJ4a8vmkh+pBxxOrVhfwc61f2Nu2+N4ZvxhwY6f+G887fORS2/39Qu5FM7LmXqyI3Jntvd1iHml+h41R0RP5GR/cxGcRwl3LMsUwuFeU2SQNNz2hBwJHryahR8ANVSK9pVAzAFfuQ8lR9CjPiUDjniMBNvJZMcr9h4hsDkxtMWj3x57Tp14FKkjsOSn5I1fLGtScQXFzpsY6knxH3xWQSh+1WxE7b2/Ig4xcLDCfXkSQ6/1Rle4ECYJaJtB+G+8VMGTjk/FKZJTrFwQahxxOH8n4zsxxUFYRxElLcdJRHsz4gEJ1/Nwf5S+mYmGUPpXkr+fzFVSUIBDGKbZSSxL9cLWz4B6u3Nma3TM6PGujRqDtFVv4m/S/bydMzx6i8=</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamDelete" searchProperties="true" id="7ec4f6c7-b57f-460f-b8df-de00406952bf" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="bb5f7249-0071-4a6d-900d-710239c9b5fe"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamDelete",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="d2ea29d4-b11a-42a5-84de-bce9b5d788e3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
log.info callTC.getPropertyValue("assertionAccountIdFULL")
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));

tC.setPropertyValue("expectErrTypeStreamDelete",callTC.getPropertyValue("expectErrTypeStreamDelete"));

if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "") {
	tC.setPropertyValue("counter","1");
}
if (tC.getPropertyValue("expectErrTypeStreamDelete") == "null" || 
	tC.getPropertyValue("expectErrTypeStreamDelete") == null) {
	tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="db12d28d-0313-493c-a0b4-9522b52cd866"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - StreamDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - StreamDelete" id="3c9545bd-f16a-41e9-835d-bef2a9653d07"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - StreamDelete" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="1b50e378-9617-4a85-b0b0-9a4b5573a1c2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - StreamDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="0a6cd14e-5ea8-4698-b539-3880009bbb26"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamDelete[" + tC.getPropertyValue("expectErrTypeStreamDelete") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamDelete")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "Policy:RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_VALID":
		errId = "StreamHandleIDNotValid";
		break;	
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
		break;
	
		
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamDelete").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="eba35d7c-26a7-4401-8584-5022981822ce"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamDelete");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;






this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;
	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;
	case "USER_DELETED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "The member is not active.";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break


	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
////this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
//	assert tC.getPropertyValue("httpContentLength") > "0";
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/${account}/Stream/$urnstream[0-9, A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if(errorRespType!= "METHOD_NOT_ALLOWED"){
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			//assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 
}
]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="e35ebe2b-faf7-4b7f-841f-399bae5ad820"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Return API resulting attributes" id="990a252f-6441-4a43-bd2c-937424f1fcda"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def cnt = tC.getPropertyValue("counter");

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	log.info "Returning Status of Deleted";
	callTC.setPropertyValue("expectDBStatus","deleted");
	callTC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
			
	callTC.setPropertyValue("expectDBStatus_" + cnt,"deleted");
	callTC.setPropertyValue("expectDBDeletedBy_" + cnt,tC.getPropertyValue("nodeid"));
} </script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value>DELETE method is not allowed for API call: http://qa1.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:183EDFFFDBF4C6D0E0533D991F0AE027/Stream/
</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150611_071756</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11507 - StreamDelete - LLP - Single StreamDelete against an active stream handle - 200 OK</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>E6D0BBF3A4059636E0401F0A0599610A</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value>97397C14A82BFA4CE0401F0A07996491</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0 Test Cases</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77775</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 405 Method Not Allowed</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>text/plain; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:183EDFFFDBF5C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>183EDFFFDBF5C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:183EDFFFDBF4C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>183EDFFFDBF4C6D0E0533D991F0AE027</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPrYCUlIuGUKM0Cgh7NQWKCX05eOcURwGxwaO+Hy69cOkAIFDrv7lLEiS5+kz5LuGJr5ObvGGIScBDSznPmU2Ym0okQhtQPECLMpmgGzObaHtW7HzmV1G+2uKJm2U1HewCpbbqlsqHreKqqWOS6qZdcoqObYKBUNY1zOuUWhylgEbco4oryi5HQjr+oF1TBGhmlbedvMZU2r8KpkniBkwrZQyerKFtSSVZQp53Nb0xaLRXZhZoPQ03K6bmgv3c4QT2GGlOrdJqLEUVjd6uOsCxh8H2dxMNPutAOdO5fZQ+JRxKMQtr7cc750TS9rQsdlxLtR0rvgtukkSI4NRANKMPLJGsn8dIFPAzdT870gJHw6OxuEoUvDKiyxig2L3ijaIbQrDR0gDBlS2RQZW1sDmEAIFEPmcdCuKDfXVS25OgoRZZMgnLHD4+/hARqDH8zBVdkurC206w2eyFT1DrDdptiPGInhQZJ1jjCwbTUBX28q0w9hQpYdwgRBl0yi0/bhHR032XCIB4z/SYH2irMx8oT8CKrDddSEuKnXS62nbvk/+mz+WyIP5oPb1CsJgH3lRJCWdnM8ImVKos2N58efw9qoVvhZKOLeJ1/qT0HH67bq69t+n76ueWdx6/QZsx5vV3VTv/eexs2eNSm0KfrxXH5odRuG894uGY1mabku9N47JTqEuMQZxB/3AtjqNd+9fe4F993p4/O4vvrhjbz3V5pz0T/8nkW8vBLBRZPRq9HTa3p94DfDQVd313rTGYUjc7wqxy8vNYPzNvUqaTh7+A9luzc/jMbvgPnuKGnQdjItUSXELzczKSGuOklU7blsPowD5UpV3pK9w45EuyOuLWq4ORsls+m0Wi2n3so3Co7e1POm6ZTLRkuvNfVccddkNiiOIDYCOiHSl2y5G9pcBohnNgPqQqjGQSQ6HVMuWHQQR5k2HYhHEFAGo0C058+xaS7eC/EYVkUjWn1Qo0y9yXpVUDIPAe/RXlibcAgPe3LhoCcPAJM5Adm4Ja+ZIDbjIhefKI64b2RjlKUQidYeyi5r56xSXmNkNvdBItVmgRv5kJ1P50lmNLb55lSEWSIdNEfJazsb1/G/XQqEjkukApOx1EGUEU4Ml9wukG8BF04OoZ35WuQS+bBEPnlI8AbJ4a8vmkh+pBxxOrVhfwc61f2Nu2+N4ZvxhwY6f+G887fORS2/39Qu5FM7LmXqyI3Jntvd1iHml+h41R0RP5GR/cxGcRwl3LMsUwuFeU2SQNNz2hBwJHryahR8ANVSK9pVAzAFfuQ8lR9CjPiUDjniMBNvJZMcr9h4hsDkxtMWj3x57Tp14FKkjsOSn5I1fLGtScQXFzpsY6knxH3xWQSh+1WxE7b2/Ig4xcLDCfXkSQ6/1Rle4ECYJaJtB+G+8VMGTjk/FKZJTrFwQahxxOH8n4zsxxUFYRxElLcdJRHsz4gEJ1/Nwf5S+mYmGUPpXkr+fzFVSUIBDGKbZSSxL9cLWz4B6u3Nma3TM6PGujRqDtFVv4m/S/bydMzx6i8=</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamView" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7f38e183-9a9b-45d6-9bcb-3e935740dce8" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="71f21744-8456-469f-b0b4-35695737ff7b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="a3821305-5313-406a-90ae-3cbcc806bae9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));

if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "null") {
	tC.setPropertyValue("expectDBStatus","active");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="f6056565-6647-4726-8bc1-debb4a1bf7e2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" id="33733623-3519-4c7c-85e9-c0c21a292832"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2assertion=nVZdb+I6EH3fXxGlj6uQDwgkUUECUnZTQek2lO3uy8o4BtwmdogdPvrr1w5NCpT2dq+EhDwZz5yZOT72JQNJbHldxlDGMSVK4LfVP03kzFwrsjWraUdaAzQa2iyybG3uNCCswyawHUNVAsZyFBDGAeFt1TLMhmY0NdOcmJZnN726UWuZ7m9VmaKMidDCpSZ2bZOYMK9I21bzjHgUMMw8AhLEPA69sDsaesLTAyUmtXO5R1kkzDpLzlNP12EtQhDFMaxBmuiX+pHPZcS8EC8I4HmGXnJGrK2+7N1sNrVNvUazhW4ZhqEbri58IoYXF2rnS7kZRQGZ0/26DwglGIIYPwMJaoT4kkZKN17QDPNl8k5oUzcNGVpDW6hBs0EuVP01QYHuk5GOQGYMaGwJzDLYHZqjDBGIlPu7oK1efG6C+72TDBA2p1nCTtb/BgmRNYppiiKNlZWV6D4f8Uy7OpcIegGBcc7wGt1ImqQAIqbcZmiOt0PMBPkiphTjV7ZM/HDJMgT/ZSyX+iFWAV0/0x0fLxDj/2dmh/PaR5mCOEed3ub+fnS3nK679Sc8a0ab5Otk+8uf9tOrdgHh0HkPqhr3y/qUrBW3XjZt0fars2pOwy5fO4+/+4H7DdDJaki/mQ/rpe247Puv59Zg5eDRY84XyQ7YVhqCpzntz4OnrLX6fRuNpyP607m5+zL2r+rDh/tZNB72R6tHZzqYNTdRSv1e0KS38fUPc3edNnr1SavF/Onu63f42O9dB6vWurXCzLz5+cOOx6n1cOPy3pfl93EYNK519yqYzh6ew3tK2681HdZwbCwlIcxnjwjycinpEfjKQMwL8I/lRVpwpM0LVy+VGsU4IlztyF1SWrxcCBCOPDHM/XrQcwZ9x3Zbrm/YDd+4MhqGOTC6Rst1WwO3WWrQHsUJxD4lcyxzSZXd8+djgDDxGCIRyrQ1zeESMfWDiD7gQAnInTgclDA0oULFTWwv7E023y0RZWiH5o+zlYHrxrOq3FA+JuOsO+coO5Zu+0i67xDEKUZS3yXBmWA446IXK7DOeWzW1qBGUC5ugEyKsGc1HFtnOEljJJHqCY3yGNXSZVp0Rmf7f0sDkBVWf9gNb//0wz9Wcf7eLe/0W9kJ4RNh6cBkST0kponOXEVWWc+buu2zV1YZvptHWB4z0VaeYbhHcvzplS2SJhVVXgsrkVcbTg1HwfXTuqp80RrDivbVfS3kXohBpxzOCtRWtXy9zotxtKTQZSK8LvTO1EMEc6FWuwl9QkSvQuifuiwq1CeZK/sxvpwvScgBR4kgj1IsP/FSCBGTL4VAsH772WfIUUrRN462/JytH4sHhUT84ZsDelD6CfOt+NvQLHod15lYB3lEneJ5wDFZyJW8FnbvcANSERYLHaPZYfBzAc4lPzZWTa6wcMGmWc7R+18UKVBtFUBIc8IDXy0Mh6JZ4OS7FHmvTm/CFML8ctNu2bs37cNoGAr5SoBa+eL/dtZwQReIVHmhF1ja6lY8HEVysjgQ6ReAZ3Tat4x6o9vrtSqdtoVOO26vauBRJZ035reWg56enofOXw==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="ebe76ed7-d0ad-4444-bba4-38cead5924f1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="da794c41-c5e0-46bb-a99e-a299d710679b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="546ea66d-1cc1-4da4-814b-feda1b974138"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;


this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	////assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		int RequestingUserIDsize = myXML.RequestingUserID.size();
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String Value = myXML.ResourceStatus.Current.Value;

		if (nodetype == "llpcs" || nodetype == "dlpcs") {
			log.info "RequestingUserID[$RequestingUserID] - Expect[] - nodetype[$nodetype]";
			assert RequestingUserID == "";
			assert RequestingUserIDsize == 0;
		} else {
			log.info "RequestingUserID[$RequestingUserID] - Expect[" + tC.getPropertyValue("assertionUserIdFULL") + "]";			
			assert RequestingUserID == tC.getPropertyValue("assertionUserIdFULL");
		}
		// Value (Status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
	}
} 

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>pVZdU+o8EL73V3TqpVPS0hahI8xgAUXxE/QoN05MF4i0KTQpoL/+JMUiIPrqea862W52n/3Is3vEcRQWvTrnkAgaM63dqOpPbtG1B07JNbBtu4ZTChwDlwdlAyxCikHgmnbF1bU25ym0GReYiapeNC3bsCyjaPUs27OKnlMp2NZhX9fuIeHStFQpmLq2iELGvcxtVU8T5sWYU+4xHAH3BPG69YuOJzU9nGPSa0dLlJnDpDYSYuIhRAoBEAhDUiBxhI7Qhs5RwL0uHTIs0gTefQa8qr/fnc/nhbldiJMhKpqmicwKkjoBp8N9vbaXX4agzQbx8uxjFjNKcEjfsAJ1AWIUB1o9HMYJFaPoC9MWskxl2oAFMYjlsH0dfTjI0P3Q0gbIhGODj7CVG7uFASTACGh3t+2qvv+zCi7v9hLM+CBOIr51/h0kYDMI4wkEBs8jy9H93OKOdNWOgHhtRsKU0xlcqjaZYAJcu05gQBcdymXzBVzLyq8teN5hQH5TkiO0jlPCRjsy06BD4OJf6rVeq6WVexymUGPNqHkd/Hnkzss0dSfj0ny+6PROHumfcTWDsK68BLUq9ft5u1FXffV+aY7uWheNCnKiUFC/bjsHpeD+/GB26t5MeWd6Xk5ao1Kn8ja+MMfJcHJ5cmk/ntPjcx6Jcd8/eB6fNp2D+PK2saiX94L56SLu21Y4PXPeopu08voQnMJN2r9i4cAv2e27Fun1T6evbXFPnAPw387uBmE3bbxEwn2buyeN4fPZ+Mrpj9FiLwrOLuaVeAikfyUe+OAUNasfMa3HsCnM6aCbPr8AEflRtUa7obVkvbD4nlqUhAbGIFP1JoqfuAAm9Jq6pWjFSyX50MCTxVyem8fHZt20m3Wr2CzbpVLTdEyrJUVupeKaTiPnnyWKLYh+zAZU+VIMu+yf7wGSyOPAAkiMWZySEXD9G4sNLLDWZrfyYcSMQy+WDF6xfd+1SlbdKh36vt1q2lbxuFUsH/uHzbKj2PsyFlfsKqkPBCSb7F3aYO9bIHRCQVG86nMuG50LmZIpnqUitAozXGCQyiGQKB72ik7ZRZxGkxAUYBTFQRpCYTKaZAlCfPktGpjwTHrb7GXv78vwtv/lmZA6AVUKXMVyDLKasGMM2XkgnwJ2do6r3Hw9Dah6ZjKtIqFkiWTz10e3qDZZtUqjU+9e56BXur+4++R3n6x/NND5vwZkPT7fRN/kBG2XY+UomNE1t/k4lxNKclgtb6YpLkwL6WyWZu1zqPg5keaRhcxD1AWSSpJ97cVjYGhlAv1ovq1Qb3leyTfxpWLEugILiGSza9nxB8tNF7habtrysS5+ujltuJR5E7AQu2R+KHcghfjbNYl4ROlJ8bX8zOMk+CjXDltrfmSccqMRlA3VSU2z1y+agsTSLJX0GyfrxncZ2OV8U7hK8gqLkN30nAr4+o+meLWqY0LilIl2Q88E61yf4RSvE/A+lD6ZyebJ+4Kw4F8uCA8Xna5k3QjrK13638oGzdqFgLzFaYalqi/kriuds+HabHkHuHu8WK3vxstmJLVP4s+StZxuv4faXw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:EBB0A03EA11F8366E0401F0A0599504D</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:EBB0A03EA12E8366E0401F0A0599504D</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>800</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:EBB202FF26CD60C6E0401F0A0599203D</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Customer Service Test Cases_P2</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FB8FC82F022306B8E0401F0A07997F90</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_21524 - StreamDelete - LLPCS - Fifty StreamCreate, StreamView, StreamRenew, StreamDelete API same Rightstoken-200 OK</con:value></con:property><con:property><con:name>username</con:name><con:value>ashwin_user_create_20131121_064242</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:EBB202FF26E860C6E0401F0A0599203D" xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:EBB202FF26CD60C6E0401F0A0599203D</RightsTokenID>
   <ExpirationDateTime>2013-11-21T20:50:09.275Z</ExpirationDateTime>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:LLASP_CS_1" CreationDate="2013-11-21T14:50:09.275Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77776</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADDF10E5C8980679DE0401F0A059924F5</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AC9E419060152889CE0401F0A05994440</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>EBB0A03EA11F8366E0401F0A0599504D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>EBB0A03EA12E8366E0401F0A0599504D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/LLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamRenew" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0fa51da9-4198-4099-b6c6-fdc2ef8ab1f0" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0c021fc4-8cf1-4a76-9fbb-ac6371de9d06"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);

if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	testRunner.testCase.getTestStepByName( "PUT - StreamRenew" ).disabled = true;
	testRunner.testCase.getTestStepByName( "Extract Response Body for PUT" ).disabled = true;
}
else
{
	testRunner.testCase.getTestStepByName( "GET - StreamRenew" ).disabled = true;
	testRunner.testCase.getTestStepByName( "Extract Response Body for GET" ).disabled = true;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="c9adcd72-1b11-4b79-8348-8d9471fb3fdb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));

tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));

tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="952bf2f8-98f2-4a2d-b645-575f454857a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PUT - StreamRenew");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - StreamRenew");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - StreamRenew" id="e489c088-f953-497f-838c-1c0019297792"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - StreamRenew" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" StreamHandleID="${#TestCase#streamhandleFULL}">       
<StreamClientNickname>Release 4</StreamClientNickname>        
<RequestingUserID>urn:dece:userid:org:dece:${#TestCase#assertionUserId}</RequestingUserID>       
<RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#rightstokenid}</RightsTokenID>        
<TransactionID>Sprint 4.1</TransactionID>
<ExpirationDateTime>${#Project#ExpirationDateTime}</ExpirationDateTime>       
<SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation> </Stream>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body for PUT" id="1e656a84-0783-4e28-81b1-21a2a10a9bbd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamRenew" id="b9d9c47a-56ef-4686-a252-fd612cbc36ba"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/Renew" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamRenew" mediaType="application/xml" sslKeystore="LLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body for GET" id="89baa875-8ac6-4b39-9081-2fcdf4818869"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="f9a6d013-37f0-45fe-806c-2616a6409f60"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamRenew") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamRenew")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="f1d1c700-1667-497a-a97d-a4ef5541258d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
//def errorRespType = tC.getPropertyValue("expectErrTypeStreamView");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamRenew");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
//def callTCname = tC.getPropertyValue("tName");
//String a= "expectDBStatus_"+


this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	}else {
		String RequestingUserID = myXML.RequestingUserID;		
		String RightsTokenID = myXML.RightsTokenID;
		String Value = myXML.ResourceStatus.Current.Value;

		log.info "$RightsTokenID"
		
		if (nodetype == "llpcs" || nodetype == "dlpcs") {
			assertionUserIdFULL = "";
		} else {
			assertionUserIdFULL = tC.getPropertyValue("assertionUserIdFULL");
		}
		
		//log.info "RequestingUserID[$RequestingUserID] - nodetype[$nodetype] - Expect[$assertionUserIdFULL]";
		//assert RequestingUserID == assertionUserIdFULL;
          if (nodetype == "dlp" || nodetype == "dlpcs") { 
		log.info "RequestingUserID[$RequestingUserID] - Expect[" + tC.getPropertyValue("assertionUserIdFULL") + "]";
		assert RequestingUserID == tC.getPropertyValue("assertionUserIdFULL");
          }
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == tC.getPropertyValue("rightstokenidFULL");

		//Value (status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
//		def callTCname = tC.getPropertyValue("tName");
//		log.info "Value[$Value] - Expect[" + callTCname.getPropertyValue("expectDBStatus_"+callTCname.getPropertyValue("counter"))"]";
          if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
	}
} 

</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="afca42c3-dbb9-4162-9b9c-82b5ba347eaf"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>pVZdU+o8EL73V3TqpVPS0hahI8xgAUXxE/QoN05MF4i0KTQpoL/+JMUiIPrqea862W52n/3Is3vEcRQWvTrnkAgaM63dqOpPbtG1B07JNbBtu4ZTChwDlwdlAyxCikHgmnbF1bU25ym0GReYiapeNC3bsCyjaPUs27OKnlMp2NZhX9fuIeHStFQpmLq2iELGvcxtVU8T5sWYU+4xHAH3BPG69YuOJzU9nGPSa0dLlJnDpDYSYuIhRAoBEAhDUiBxhI7Qhs5RwL0uHTIs0gTefQa8qr/fnc/nhbldiJMhKpqmicwKkjoBp8N9vbaXX4agzQbx8uxjFjNKcEjfsAJ1AWIUB1o9HMYJFaPoC9MWskxl2oAFMYjlsH0dfTjI0P3Q0gbIhGODj7CVG7uFASTACGh3t+2qvv+zCi7v9hLM+CBOIr51/h0kYDMI4wkEBs8jy9H93OKOdNWOgHhtRsKU0xlcqjaZYAJcu05gQBcdymXzBVzLyq8teN5hQH5TkiO0jlPCRjsy06BD4OJf6rVeq6WVexymUGPNqHkd/Hnkzss0dSfj0ny+6PROHumfcTWDsK68BLUq9ft5u1FXffV+aY7uWheNCnKiUFC/bjsHpeD+/GB26t5MeWd6Xk5ao1Kn8ja+MMfJcHJ5cmk/ntPjcx6Jcd8/eB6fNp2D+PK2saiX94L56SLu21Y4PXPeopu08voQnMJN2r9i4cAv2e27Fun1T6evbXFPnAPw387uBmE3bbxEwn2buyeN4fPZ+Mrpj9FiLwrOLuaVeAikfyUe+OAUNasfMa3HsCnM6aCbPr8AEflRtUa7obVkvbD4nlqUhAbGIFP1JoqfuAAm9Jq6pWjFSyX50MCTxVyem8fHZt20m3Wr2CzbpVLTdEyrJUVupeKaTiPnnyWKLYh+zAZU+VIMu+yf7wGSyOPAAkiMWZySEXD9G4sNLLDWZrfyYcSMQy+WDF6xfd+1SlbdKh36vt1q2lbxuFUsH/uHzbKj2PsyFlfsKqkPBCSb7F3aYO9bIHRCQVG86nMuG50LmZIpnqUitAozXGCQyiGQKB72ik7ZRZxGkxAUYBTFQRpCYTKaZAlCfPktGpjwTHrb7GXv78vwtv/lmZA6AVUKXMVyDLKasGMM2XkgnwJ2do6r3Hw9Dah6ZjKtIqFkiWTz10e3qDZZtUqjU+9e56BXur+4++R3n6x/NND5vwZkPT7fRN/kBG2XY+UomNE1t/k4lxNKclgtb6YpLkwL6WyWZu1zqPg5keaRhcxD1AWSSpJ97cVjYGhlAv1ovq1Qb3leyTfxpWLEugILiGSza9nxB8tNF7habtrysS5+ujltuJR5E7AQu2R+KHcghfjbNYl4ROlJ8bX8zOMk+CjXDltrfmSccqMRlA3VSU2z1y+agsTSLJX0GyfrxncZ2OV8U7hK8gqLkN30nAr4+o+meLWqY0LilIl2Q88E61yf4RSvE/A+lD6ZyebJ+4Kw4F8uCA8Xna5k3QjrK13638oGzdqFgLzFaYalqi/kriuds+HabHkHuHu8WK3vxstmJLVP4s+StZxuv4faXw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:EBB0A03EA11F8366E0401F0A0599504D</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:EBB0A03EA12E8366E0401F0A0599504D</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1272</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EBB202FF26CD60C6E0401F0A0599203D</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:EBB202FF26CD60C6E0401F0A0599203D</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Customer Service Test Cases_P2</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>97397C14A82BFA4CE0401F0A07996491</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:EBB202FF26E860C6E0401F0A0599203D</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_21524 - StreamDelete - LLPCS - Fifty StreamCreate, StreamView, StreamRenew, StreamDelete API same Rightstoken-200 OK</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>ashwin_user_create_20131121_064242</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:EBB202FF26E860C6E0401F0A0599203D" xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <StreamClientNickname>Release 4</StreamClientNickname>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:EBB202FF26CD60C6E0401F0A0599203D</RightsTokenID>
   <TransactionID>Sprint 4.1</TransactionID>
   <ExpirationDateTime>2013-11-21T22:21:02.329Z</ExpirationDateTime>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:LLASP_CS_1" CreationDate="2013-11-21T14:50:09.275Z" ModifiedBy="urn:dece:org:org:dece:LLASP_CS_1" ModificationDate="2013-11-21T14:50:27.101Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
      <History>
         <Prior ModifiedBy="urn:dece:org:org:dece:LLASP_CS_1" ModificationDate="2013-11-21T14:50:09.275Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Prior>
      </History>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>QC_Id</con:name><con:value>77777</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AC9E419060152889CE0401F0A05994440</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADDF10E5C8980679DE0401F0A059924F5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>EBB0A03EA11F8366E0401F0A0599504D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>EBB0A03EA12E8366E0401F0A0599504D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/LLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b9d9c47a-56ef-4686-a252-fd612cbc36ba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>89baa875-8ac6-4b39-9081-2fcdf4818869</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a2435f1b-67e6-4db1-a5bf-e5d819e41c27" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="dd269aae-8b09-4854-829f-882b29bbfb25"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="ab1c0515-c5d0-49a0-9d36-bd7aa764a12c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");


if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="32598a14-7c38-48bd-b70b-d0c6e925a714"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7","us:tvpg:tv-y7-fv","us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvpgRatingsreasoncodesUS = ["us:tvpg:v","us:tvpg:s","us:tvpg:l","us:tvpg:d","us:tvpg:fv"];
fabUS = ["us:fab:c","us:fab:f","us:fab:pd","us:fab:pd-m","us:fab:em","us:fab:ao"];
fabreasoncodesUS = ["us:fab:violence","us:fab:frightening","us:fab:sexual","us:fab:mildlang","us:fab:stronglang","us:fab:substance","us:fab:intense","us:fab:bnudity","us:fab:fnudity","us:fab:explicit","us:fab:erotica"];
esrbgamesUS = ["us:esrb:ec","us:esrb:e","us:esrb:e10+","us:esrb:t","us:esrb:m","us:esrb:ao","us:esrb:rp"];
mpaattrailersUS = ["us:mpaat:gb","us:mpaat:rb"];
tvmovieRatingsGB = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18"];
chvrsRatingsCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r"];
cbscRatingsCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+"];
filmtvifcoIE = ["ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
filmtvncsAU = ["au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
filmtvoflcNZ = ["nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
MocRatingFR = ["FR:MOC:U","FR:MOC:10","FR:MOC:12","FR:MOC:16","FR:MOC:18"];
FSKRatingDE = ["DE:FSK:0","DE:FSK:6","DE:FSK:12","DE:FSK:16","DE:FSK:18"];
FSKRatingAT = ["AT:FSK:0","AT:FSK:6","AT:FSK:12","AT:FSK:16","AT:FSK:18"];
FSKRatingCH = ["CH:FSK:0","CH:FSK:6","CH:FSK:12","CH:FSK:16","CH:FSK:18"];
KijwijzerRatingBE= ["BE:KIJWIJZER:AL","BE:KIJWIJZER:6","BE:KIJWIJZER:9","BE:KIJWIJZER:12","BE:KIJWIJZER:16"];
MocRatingLU = ["LU:MOC:U","LU:MOC:10","LU:MOC:12","LU:MOC:16","LU:MOC:18"];
FSKRatingLU= ["LU:FSK:0","LU:FSK:6","LU:FSK:12","LU:FSK:16","LU:FSK:18"];
KijwijzerRatingNL= ["NL:KIJWIJZER:AL","NL:KIJWIJZER:6","NL:KIJWIJZER:9","NL:KIJWIJZER:12","NL:KIJWIJZER:16"];


String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:g":
	case "${urnRating}us:mpaa:pg":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:nc-17":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}us:tvpg:v":
	case "${urnRating}us:tvpg:s":
	case "${urnRating}us:tvpg:l":
	case "${urnRating}us:tvpg:d":
	case "${urnRating}us:tvpg:fv":
		for (rating in tvpgRatingsreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:c":
	case "${urnRating}us:fab:f":
	case "${urnRating}us:fab:pd":
	case "${urnRating}us:fab:pd-m":
	case "${urnRating}us:fab:em":
	case "${urnRating}us:fab:ao":
        	for (rating in fabUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:violence":
	case "${urnRating}us:fab:frightening":
	case "${urnRating}us:fab:sexual":
	case "${urnRating}us:fab:mildlang":
	case "${urnRating}us:fab:stronglang":
        case "${urnRating}us:fab:substance":
	case "${urnRating}us:fab:intense":
	case "${urnRating}us:fab:bnudity":
	case "${urnRating}us:fab:fnudity":
	case "${urnRating}us:fab:explicit":
	case "${urnRating}us:fab:erotica":
		for (rating in fabreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:esrb:ec":
	case "${urnRating}us:esrb:e":
	case "${urnRating}us:esrb:e10+":
	case "${urnRating}us:esrb:t":
	case "${urnRating}us:esrb:m":
	case "${urnRating}us:esrb:ao":
        case "${urnRating}us:esrb:rp":
        	for (rating in esrbgamesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:mpaat:gb":
        case "${urnRating}us:mpaat:rb":
        	for (rating in mpaattrailersUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
   
     //case "${urnRating}gb:bbfc:e":  
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        
        case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r": 
	//case "${urnRating}ca:chvrs:e":   
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

         
        case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
        case "${urnRating}ca:cbsc:18+":
        //case "${urnRating}ca:cbsc:e":
      		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}ie:ifco:e": 
        case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
      		for (rating in filmtvifcoIE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}au:ncs:e": 
        case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
      		for (rating in filmtvncsAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
        //case "${urnRating}nz:oflc:e": 
        case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
        case "${urnRating}nz:oflc:r16": 
        case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
	      		for (rating in filmtvoflcNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
       case "${urnRating}FR:MOC:U":
	case "${urnRating}FR:MOC:10":
	case "${urnRating}FR:MOC:12":
	case "${urnRating}FR:MOC:16":
	case "${urnRating}FR:MOC:18":
      		for (rating in MocRatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

	case "${urnRating}DE:FSK:0":
	case "${urnRating}DE:FSK:6":
	case "${urnRating}DE:FSK:12":
	case "${urnRating}DE:FSK:16":
	case "${urnRating}DE:FSK:18":
      		for (rating in FSKRatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

			case "${urnRating}AT:FSK:0":
	case "${urnRating}AT:FSK:6":
	case "${urnRating}AT:FSK:12":
	case "${urnRating}AT:FSK:16":
	case "${urnRating}AT:FSK:18":
      		for (rating in FSKRatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

			case "${urnRating}CH:FSK:0":
	case "${urnRating}CH:FSK:6":
	case "${urnRating}CH:FSK:12":
	case "${urnRating}CH:FSK:16":
	case "${urnRating}CH:FSK:18":
      		for (rating in FSKRatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

     case "${urnRating}BE:KIJWIJZER:AL":
	case "${urnRating}BE:KIJWIJZER:6":
	case "${urnRating}BE:KIJWIJZER:9":
	case "${urnRating}BE:KIJWIJZER:12":
	case "${urnRating}BE:KIJWIJZER:16":
      		for (rating in KijwijzerRatingBE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:FSK:0":
	case "${urnRating}LU:FSK:6":
	case "${urnRating}LU:FSK:12":
	case "${urnRating}LU:FSK:16":
	case "${urnRating}LU:FSK:18":
      		for (rating in FSKRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:MOC:U":
	case "${urnRating}LU:MOC:10":
	case "${urnRating}LU:MOC:12":
	case "${urnRating}LU:MOC:16":
	case "${urnRating}LU:MOC:18":
      		for (rating in MocRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}NL:KIJWIJZER:AL":
	case "${urnRating}NL:KIJWIJZER:6":
	case "${urnRating}NL:KIJWIJZER:9":
	case "${urnRating}NL:KIJWIJZER:12":
	case "${urnRating}NL:KIJWIJZER:16":
      		for (rating in KijwijzerRatingNL) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);
]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="0636f6c5-82aa-44f5-bf3a-e5f68760bf76"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="70a6bc90-8ee9-4746-a4a0-c65d62f36049"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="0bbe40d7-3762-4542-84ac-38eb723f9886"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('POST - PolicyCreate');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="ec5ad1da-7431-44dd-89d9-9316d0622e89"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZtc9o4EP7eX+FxP3aM/AbYnsCMA6HnHmk4TMglXzqKvAYFWyaWDKS//mQTEyAkl7YzzDBar3affdGze8ZxmpiezznkgmZMCfod9YcbuU4U6ViLTNfVbAubmgMtSzPxfXzfbhESt7GqBJwXEDAuMBMd1dQNW9PbmulMdNuzDM/WG2bbvlOVKeRcmpYqDV1VNmnCuFe57ahFzrwMc8o9hlPgniBe6F8OPanp4RqT2j3boqwc5t25EEsPIdKIgECSkAbJUnSGDnTOIu6FdMawKHJ49hnxjvp8d71eN9ZWI8tnyNR1HekukjoRp7PPavdTfRmigMXZ9tzDLGOU4IT+xCWoSxDzLFL8ZJblVMzTN0wbyNBL0xpsiEYMm31W0YuDCt0HLR2AzDnW+BwbtbExxJADI6Bcj4OO+vljFdzeneSY8TjLU350/jVIwFaQZEuINF5HVqP7uMUT6eqeAfECRpKC0xV8L9tkiQlwZZRDTDdDymXzRVypyq9suPzRusuA/EpZztA+VgkdnchOn86Ai9+p2X69tlamOCmg2/Rb51+jIbsNZ+e0P23H/3y9aSLETXPRqSDsK29B7cr9fD5u1l1vPV9aLIybm+nVeOyg6eSp9VdB7y4W1+lDb3mD4Hyy0t1i1hxdFffYsMj1pt8eze42TXKbjfILHwc2pV/Wk5/B9V0yvPsUtCxqsdH36HrwOHvQTWecfwPRzMeXhp+4vV4xTRbY8c1QON++js7ZVZjot/75bbi6+2Jkf7vjdWt66QaBRVD0yYmJFfZGD7fmcMETP/orcTovMe3HcCisKSEs7h+AiPpYtkfQVwayXli8Ty+lhEZaXKl6y5KjuAAm1G55q6QWr5AERCNPFnN7Hgwsd+C0/dZAdwbt5uBCt3VjoPt603Vtp23XHLRFcQSxl7GYlr5Klt32z/sASepxYBHk2ioryBy4+o7FPhZYCdhYPo6McZhkksWN9Gm1nsVkbSUbMOLcJU3AWCw3qvI9E1fsKvdjAfkhdbcPqHsMhC4plPxeNjiXHc6FzMUjXhUiMRor3GBQyAmQlyTsmbbTRJymywRKpCjNoiKBxnK+rDKD+Pbf1DDhlXR8Make3ptxHX+rUyB1Iloq8DKWc5BlhBMzyKoDeRVw8+Ssqs37RUTL9yXzKXJKtkgOP720Sdkfux7pD/1wVIPe6f7C3R+98IfxmwaGf+B8+KfOZS1f30Tv5BMdl3LnKFrRPbf1HiBHmyS+bt2Ij7jx2ChWq6JqvbauWyiX5pHkdgOFQArJzE+TbAEM7UygDw3GHeojzzv5Ib5CzFkosIBUPhSlOn5gKwqBl1tRIF/45qMr14FLmTcBG3FK1kvk8lQifne/Ih4p9aR4JP/WWR69lOuErT0/Mk65CgnKZuWpHIFPbzQFyaRZKjk7y/eNnzJwyvmhcJfkHRYhu+m+EPD2F6Uk446KCckKJoK+Wgn2B0SFUzwtwXtRemWmGkLPW8WGv7lV/Hs5DCVVp1jd6dL/V9Zo1S4E1HJ5qbB01I1ckqVzNtsbSM8Aj2aSb5tO07Yu9L49aO3PJKvl72bSYSTdV+LXkr2cHr+H7n8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FF3A428543E0D4F6E0401F0A059936A4</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FF39F87A6F08F75FE0401F0A05994874</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>502</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FF39F87A6F08F75FE0401F0A05994874</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:FF39F87A6F08F75FE0401F0A05994874</con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:userid:org:dece:FF39F87A6F08F75FE0401F0A05994874&lt;/dece:Resource></con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77778</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE085C15ED78C3514E0401F0A0799420E</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FF3A428543E0D4F6E0401F0A059936A4</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FF39F87A6F08F75FE0401F0A05994874</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>32598a14-7c38-48bd-b70b-d0c6e925a714</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e1f04264-a95b-40f5-a6b1-da049964aa7f" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0c66e3eb-59da-41d0-bcfc-ff7f72c9e0d6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="08827c2f-7ab9-43e3-9609-972baff3fff0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="0abb241d-a311-4533-abd4-84bbdf22c6a7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGET" id="9ca1afb2-e403-43c3-9646-cbb573943783"><con:settings/><con:config service="Policy GET" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGET" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="d26e4cd7-9e45-4294-b2f1-278f25e9ef4a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGET');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="cb4dd5d5-703a-4108-b06a-11c88f60dd68"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass[0].text();
}

		
if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="96b2796f-935c-4321-9d82-596bbb0ef3a2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtc9o4EP7eX+FxP3aM/AbYnsCMA6HnHmk4TMglXzqKvAYFWyaWDKS//mQTEyAkl7YzzDBar3affdGze8ZxmpiezznkgmZMCfod9YcbuU4U6ViLTNfVbAubmgMtSzPxfXzfbhESt7GqBJwXEDAuMBMd1dQNW9PbmulMdNuzDM/WG2bbvlOVKeRcmpYqDV1VNmnCuFe57ahFzrwMc8o9hlPgniBe6F8OPanp4RqT2j3boqwc5t25EEsPIdKIgECSkAbJUnSGDnTOIu6FdMawKHJ49hnxjvp8d71eN9ZWI8tnyNR1HekukjoRp7PPavdTfRmigMXZ9tzDLGOU4IT+xCWoSxDzLFL8ZJblVMzTN0wbyNBL0xpsiEYMm31W0YuDCt0HLR2AzDnW+BwbtbExxJADI6Bcj4OO+vljFdzeneSY8TjLU350/jVIwFaQZEuINF5HVqP7uMUT6eqeAfECRpKC0xV8L9tkiQlwZZRDTDdDymXzRVypyq9suPzRusuA/EpZztA+VgkdnchOn86Ai9+p2X69tlamOCmg2/Rb51+jIbsNZ+e0P23H/3y9aSLETXPRqSDsK29B7cr9fD5u1l1vPV9aLIybm+nVeOyg6eSp9VdB7y4W1+lDb3mD4Hyy0t1i1hxdFffYsMj1pt8eze42TXKbjfILHwc2pV/Wk5/B9V0yvPsUtCxqsdH36HrwOHvQTWecfwPRzMeXhp+4vV4xTRbY8c1QON++js7ZVZjot/75bbi6+2Jkf7vjdWt66QaBRVD0yYmJFfZGD7fmcMETP/orcTovMe3HcCisKSEs7h+AiPpYtkfQVwayXli8Ty+lhEZaXKl6y5KjuAAm1G55q6QWr5AERCNPFnN7Hgwsd+C0/dZAdwbt5uBCt3VjoPt603Vtp23XHLRFcQSxl7GYlr5Klt32z/sASepxYBHk2ioryBy4+o7FPhZYCdhYPo6McZhkksWN9Gm1nsVkbSUbMOLcJU3AWCw3qvI9E1fsKvdjAfkhdbcPqHsMhC4plPxeNjiXHc6FzMUjXhUiMRor3GBQyAmQlyTsmbbTRJymywRKpCjNoiKBxnK+rDKD+Pbf1DDhlXR8Make3ptxHX+rUyB1Iloq8DKWc5BlhBMzyKoDeRVw8+Ssqs37RUTL9yXzKXJKtkgOP720Sdkfux7pD/1wVIPe6f7C3R+98IfxmwaGf+B8+KfOZS1f30Tv5BMdl3LnKFrRPbf1HiBHmyS+bt2Ij7jx2ChWq6JqvbauWyiX5pHkdgOFQArJzE+TbAEM7UygDw3GHeojzzv5Ib5CzFkosIBUPhSlOn5gKwqBl1tRIF/45qMr14FLmTcBG3FK1kvk8lQifne/Ih4p9aR4JP/WWR69lOuErT0/Mk65CgnKZuWpHIFPbzQFyaRZKjk7y/eNnzJwyvmhcJfkHRYhu+m+EPD2F6Uk446KCckKJoK+Wgn2B0SFUzwtwXtRemWmGkLPW8WGv7lV/Hs5DCVVp1jd6dL/V9Zo1S4E1HJ5qbB01I1ckqVzNtsbSM8Aj2aSb5tO07Yu9L49aO3PJKvl72bSYSTdV+LXkr2cHr+H7n8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FF3A428543E0D4F6E0401F0A059936A4</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FF39F87A6F08F75FE0401F0A05994874</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>502</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77779</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
      <Reason Language="en">The request is not authorized.</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC93F82EF6341003E0401F0A059965C9</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE085C15ED78C3514E0401F0A0799420E</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FF3A428543E0D4F6E0401F0A059936A4</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FF39F87A6F08F75FE0401F0A05994874</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bb4a3727-4679-4140-9818-a2468ce73779" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="870d67da-6dbb-4591-a06e-f2ebaae5c3c0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="d31aefc1-55c9-4426-911a-91286749d733"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="daa09e2d-7593-41e7-89e9-efc14f8f63dd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="1ebd9bc5-495e-4284-9e9a-b75f5622c0b0"><con:settings/><con:config service="Policy DELETE" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="3710_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="6a0905b0-8bad-4924-991e-e1b8a5c81990"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="39291f61-f706-4741-b265-7429194545d2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="3712c8d6-d3fb-4f95-81bb-20388c899973"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3710</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>nVdZc7LMEr73V1h+l5ZhEResJFWDoCLiBq43p3AYEGWTYdNffwaNvkneJCffudLp6el+eqHnmWdseC7bARijKHYCvyyLL5X/7DimaTKmUeM5ul7jrEazZkCDrTV2XIttNJFpmEylLGOcINnHseHHLxWWZuo1ulWjWZ2hO2yrw/BPDN/cVspLFGFimqg80ZVy7rk+7lzdvlSSyO8EBnZwxzc8hDsx7GhAHXWIZse4Y6q8Pt9QXh1Gr/s4DjsUBZ9MBJHrwicYeNQz9UHn2cQdzbF9I04i9ObTxC+Vt7NZlj1l9acgsimWpmmK5imiY2LH/qfyWrofRqbsW8Ft3TX8wHeg4ToXowClongfmGXg2kHkxHvvG9MMxdCF6RrKYQ0ynP9Phfrj4Irul5Y+gIywUcN7g7kbmyMLRciHqLyYyy+Vf35XwdtZPTJ8bAWRhz+t/x0k5KfIDUJk1vA9sju631v8Il2vzwh2ZB+6CXZSNC7aJDQgwuVphCwnHzmYNJ+Jy9fyl3N87zAE/01Jnqn3OAls6ovMiI6NcPz/1Ot9rW5WloaboNestzkvZGCvubq6PU8XnLCMrBYFZ8vFyxXCe+UbqEep39afG/XRV2+HLExzrcnw0N3AgHUHCjOOFrHEeSGnw43ePGA4X7BzXhpDzhpaGjYcCu2ndO4faWRxw/1cRVausF57Nw9KvFyVLClTUDwRd1nEHW1hM1Ha076iHsK0b0wogR859lhIqYm+G9KGRjH+RGxmZjs45WfpTJmXpeZOqqt0VqoP1NA3lHS3Po8dPsOZfHz5E9P7GIq4FHS+Bln8XzdoXjRi47HoFpPCIp9njF5VWe5WxW4XoK4NMlkAtiyMLmAs2MfT/uj0+YwWwGzRAyI4q3OQifZGXM5mipSZy6W7Xcq9nqDOuWwANmKJbIhSvhS3axLMahtu2B691QTBXM+DXX0YmoNjNtjDsaqr2ViXz+pByse6RK+uMjsn64t6UJmJvqiXVgeBV+dSJmZXj6KU7cfb1TzcLPgMXqSZCrg+YBZSd68OdG/JwPp8Dw/SSAXHq1zYq93lUs0lHUxLgj1ektj0bm8bQs8Md567f2d8QIzrZn953vXdZHuRDmpX6ne1U1+Td3VxJg3BfLPYrZZHY9VLS3AwBru7R6fhGOsgs7ftTJxthkqwlfcpHIOZJAgzQNJFA1XuD0HQF4DKASe/dA9CM+iavYwasrhU5d1+c312Tmts9GnXYNptZjNaNaenpij51a2S7A57db/uTaqKZqYLPuYvG5xW06bhMDAPrdlaGsRKbg1mWmk3FfM1HFRNe0i5F74Xqa0hiC7nvava83jVnODzzrGslbCecG7LctX6PLRcKzzjqh7MjhHdFFCdpTbnVIlLwFYFAPqHxUGYqUK7SKopZ7ONKhigJ8UJuBzYWGGXp+EgdeGmDoJcWU0Ox7fCmGImCVQ2k0hbSaW2CMyiCANtIfUOYCHYdiTYUk+YQRHMNrKSbUi+FgOi/DmPvWsebUkAUn0LmvygVF/QfDyJNY4DZ19Y+D1+r57yldn06NYJSSNtHHKZiseWv10FR9VzokWUaAtFGY/ynZ70jwcyqyxaU9L6tiSlxxA4Y0XfH8VANKbhZhOHVR9GMJZDT5Xzy2SLD21n59HDaoMRprQIW+zC22WLviFtlcjWGGUw96f1Fl/CiXUeeNVDO1tVda0Ztsyub4nnM7WNlnQAgh4/b5zMnGWP+0U2ambWEBx3BjvOXV4485Ky1WE2nykrzas2So10NPLoi05x43CSaf2Mk2azat0U9IGOw8jZJG07jya+yW6MuJlu6WXTCd0jzyZHnQvrS9sjxZqmZthSp6UZt4Zbz26FcEjNqRRILWsk98+7i3EJvQm8DdDP0+EhvM0P6v1k+TB67qRDI92KYHxfFheQLJZ75FYw4p8JTCFxzJp1Ve2EBQvCMfLjymtxqiAvnYRQHMfskCvjtpbodqPLNCSx1e7WGwwn0RzN9GhAt3ieY2npznJuKD5B7Aa+5RS+Ch53u6V+Bgi9Dka+iaJaGiRwj3DlB4tFvsqyPyfXb+BjpAeEJ7Kthii2eJZptbpSsydJjNRlACfV6wzba7QJ2xsH8cSfRMCKUfSRI9Y/cMQ5gk7ooIJIFrcpJtcpjklKTkaaxC7zlBpPPkoI1YwKttdhuXaDwo4XuqgATHmBmbjoKdyH1wRR+PbLEtKDr9J6i6Gv1/y38X3eu6eC6JhOoYCLYAREyom+YLv0PZK/Iua+ZMV38yAxneI2J3mNIwfekHzc+tMuRZ88eqUI6Y75ofrro8zfR6kfEFGfk/HwZKbOO793zk5oKCEqr/danoyn01OSpsm1eq2ChEXEPMVQdJPSEEwIkzrrwRH51MME9SsS+0D9yfND/hFfEu99LSaDwCO9Vr4uf/GC0RAuXjAy+Vby3z6PPrgkeYtRHn8l67rkoVMg/vEtBDuw0CPiKfnJgsj8U64vbL3zQ+IsJp/j28WqoKznb7oCBsSsQ6ZfEL03/pWBr5x/FD6S/MASk27aJTH6fqdcjLWXigFhkPixLFaugvej9oozPoeo80fpLzNX0vj2Csjxt6+AtTrSyNDzjMpD1/nfyjXn2i4QkVPYuWJ5qeTkQUuc+/a70f4G8JvpDn6a7h8jef1L/LfkXU4/fw+v/wU=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:E085C15ED78C3514E0401F0A0799420E</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77780</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085C15ED78A3514E0401F0A0799420E</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE085C15ED78C3514E0401F0A0799420E</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f205d4b6-4055-4cc4-ba96-ac1d2f8eb236" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0bccc962-9a42-413c-b210-709c0c2b4d9f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="04be9c5f-971c-4d36-9d31-fc7b06b8ee0f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="f02bade4-ae73-4e94-b6b8-b8aa58a35e71"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17", "US:MPAA:NR",
	"US:MPAA:M", "US:MPAA:GP", "US:MPAA:SMA","US:MPAA:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}US:MPAA:M":
	case "${urnRating}US:MPAA:NC-17":
	case "${urnRating}US:MPAA:R":
	case "${urnRating}US:MPAA:PG-13":
	case "${urnRating}US:MPAA:PG":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "&lt;dece:Resource>$rating&lt;/dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
	break;
	default:
		resourceXml = "&lt;dece:Resource>$resource&lt;/dece:Resource>";
	break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="3ca4fe8f-c537-4fcf-b1fd-fecb5d66b5fa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate Account" id="a47d0aa7-ba08-4633-8b8b-b6fa651e1a1b"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate Account" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="a6c4bf8c-3524-49f9-b96c-edee65fcfa60"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="604c7c04-66cb-4448-8ab4-5e8d51899241"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Request:PolicyClassInvalid">
      <Reason Language="en">The policy class is not valid.</Reason>
      <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:0F70B672D1667ECAE05307991F0A3820/Policy/urn:dece:type:policy:urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Request:PolicyClassInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish Manage account consent policy</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77781</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:accountid:org:dece:0F70B672D1667ECAE05307991F0A3820&lt;/dece:Resource></con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:accountid:org:dece:0F70B672D1667ECAE05307991F0A3820</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:0F70BC1DA56E7812E05305991F0AFFB7</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value>801</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:0F70BC1DA56E7812E05305991F0AFFB7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>0F70BC1DA56E7812E05305991F0AFFB7</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085B86D7AAED6B1E0401F0A07993148</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0F70B672D1667ECAE05307991F0A3820</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>0F70B672D1667ECAE05307991F0A3820</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVbrbuI8EH0VlP5chTiBEBoVpJSUihZavqa0u/1TGceAaeIE2+HSp187QMql7cfuSkjIk/HMmYvPzAWHcWS5HueYCZLQ0jKOKHdzaUPLGHUTyAl3KYwxdwVyA6/Xda0ycOH2ilbq+A3tdWSP6nWAa7oDLKxX6+dQH1ZMqFeGZhWMQqdmVmtSlfMMdygXkIqGZgHT1oGlm+ePpuUCW/7KtnX+opWeMOPStlQpA20Daskb2kSI1DWMxWJRXlTKCRsbFgCm8bPXDdAEx1BrXqwjyh2x5kYflUOMcBShMkpi48LY07kIuRuQMYUiY3jjK/zKFzDAuSF1Qk7GZ1pxF4cdOkryYwvShBIEI/IOVX56WEySsORF44QRMYm/DMIEyrCOl0hHZpWeacY+tBMN7SFkHOp8As2NrQc8wgxThEuDh05DOzutavnVRwYpHyUs5vvHP8OD6RxHSYpDnW/D2kA73eAnmWpeYOR2KIoyTub4TjVrChHmm2pidLqpUp/hEVl2CZcNuuQKnbEL7+C4zoZPxpiLvynQTnHWRp5glOHmGyRzz7gFQZtm95P+3fTnL96f9umgN2jkAHaVc0FR2vXxoCmLJlrfaF8PruOaac9rN+1xeLMcGt7sEnSDiN7Sm0Vt8UOQu/6k92v2fFMPoqcUrFKWxnP+0htOQz54D1bVXv8pfF/dj6+X/suz+SNttZf9/7z+wKdX46VP+EuFMTi88+0oG4PH1RMaPj876cSPZlMjaUe3C0jvo9tLq3/poMpLjECv41x3p4l/Z9xkT2yJJ9FsNHjwGkU4O/j3Zds3H2TDKUZie1Rt0PFLbVklKL4nMyUhoT7KVd1UkQ8XmAqtqW4p7nAzSXckdGUN12fQdsBly/Q9u3bl1E3rCtgVYJ+fm23gtduXzpZk1igOILYSOiLKl6Lcddt8DxDFLsc0xEyfJ5lkOq59Y9GHApY69EE+goRy/JhIeh4Oq2A6eXfewIoy5tgqUmuMmVa6S8Q9vWfeSGC2T8n2HiU/YERSghVvq7bmsq+5kKmYwXkmIrM8h2WKM8nsTJGsa1XrtsFJnEZYATXiJMwiXE4naZ4Yg6//LR0inksfrh7zx/ZlWIffthmQOiFRClzFcollFfHRbKm69jaQo4Brn86grXkvC4l6VzKdghG0RrL/6aNLVHsULeJ3vaC/BV3o/sHd11bwav6lge4/OO/+q3NZy+Obxjf5NA5LWTgK52TH7XbpkONLEl5z24gzWJ6Vs/k8y1vPUcTOpHlDNYEBLCPAKJOUvHpM3jA1CivGSfOvAH7gvJDvQ8zEhAYCChzLt1LKjycsPAHmauHpyDe+PHWb2nMpUyfwUnwma0VyWVOIv93nkIuUnhT35d8iYeFHxT6xteNHxin3HUHoWJ3U7Ft90RcokWaJZO2E7Rr/zMBnzveFRZILLEI21DAT+OsvJUXHDQ0ilGRUdHwtF+yOiBynWKXY/VA6MpNPoWItJf+/l+okbwGE5TLLSW5fbReuegJ0vDNmNk6PJk3NsXyzVnOuWl4+aZz1pKnULVAkZQ9d80h8LNnJ02GPN38D</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="aa56a104-b65b-4e04-a680-9d72ec0359d0" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="148977f8-d79b-4085-9289-50ee98cbf0a7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="64eb1851-b688-476f-99c6-e7e5ed9cd347"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));

tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("nodeid_rm",callTC.getPropertyValue("nodeid_rm"));

log.info tC.getPropertyValue("policyClass");

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="b85600cc-cebc-41bb-b088-a5c9bac67e90"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet Account" id="9409257a-ccf3-4f31-839b-e66529802e0f"><con:settings/><con:config service="Policy GET" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet Account" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="3ad96ced-23c9-474d-80f9-8d30cfc3d242"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="78d3e650-bd48-4743-b964-655c9e573a06"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");
def nodeid = context.expand( '${#TestCase#nodeid}' )
def nodeid_rm = context.expand( '${#TestCase#nodeid_rm}' )


String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
def reqEnty;
ArrayList&lt;String> roles=new ArrayList&lt;>();;
/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

//   int listOfRole myXML.Policy.RequestingEntity.size();
//   def x=0;
//   while(x&lt;=listOfRole)
//   {  
//   	roles.add(myXML.Policy.PolicyClass[x].text());
//   	def Rol=roles.get(x).
//   }
//    log.info roles.size();
	xmlPolicyClass = myXML.Policy.PolicyClass[0].text();
	reqEnty=myXML.Policy.RequestingEntity.text();
	log.info "reqEnty" +reqEnty
	log.info "xmlPolicyClass :$xmlPolicyClass"
	log.info "tcPolicyClass : $tcPolicyClass"
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}

tC.setPropertyValue("policyExists", policyWasFound);

log.info "policyExists setting is " + tC.getPropertyValue("policyExists");</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="ac812f19-d5c7-4ad4-92d6-b8d97d924256"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));

if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.w3.org/2000/09/xmldsig#" xmlns:ns3="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:146263FC8105291BE05307991F0A21CE">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:146263FC8038291BE05307991F0A21CE</Resource>
      <RequestingEntity>urn:dece:org:org:dece:RET</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-23T10:21:43.000Z" CreatedBy="urn:dece:userid:org:dece:146291BBE6C61BDEE05307991F0AE43F">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:1462A08302A67E2DE05307991F0A97E4">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:146263FC8038291BE05307991F0A21CE</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-23T10:21:46.000Z" CreatedBy="urn:dece:userid:org:dece:146291BBE6C61BDEE05307991F0AE43F">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:146263FC8125291BE05307991F0A21CE">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:146263FC8038291BE05307991F0A21CE</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP_CS_1</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-23T10:21:49.000Z" CreatedBy="urn:dece:userid:org:dece:146291BBE6C61BDEE05307991F0AE43F">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:146291BBE72B1BDEE05307991F0AE43F">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:146263FC8038291BE05307991F0A21CE</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-23T10:21:52.000Z" CreatedBy="urn:dece:userid:org:dece:146291BBE6C61BDEE05307991F0AE43F">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:146291BBE7391BDEE05307991F0AE43F">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:146263FC8038291BE05307991F0A21CE</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP_CS_1</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-23T10:21:55.000Z" CreatedBy="urn:dece:userid:org:dece:146291BBE6C61BDEE05307991F0AE43F">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:1462A08302C27E2DE05307991F0A97E4">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:146263FC8038291BE05307991F0A21CE</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP_CS_2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-23T10:22:04.000Z" CreatedBy="urn:dece:userid:org:dece:146291BBE6C61BDEE05307991F0AE43F">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:146263FC81C4291BE05307991F0A21CE">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:146263FC8038291BE05307991F0A21CE</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP_CS_2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-23T10:22:18.000Z" CreatedBy="urn:dece:userid:org:dece:146291BBE6C61BDEE05307991F0AE43F">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish Manage account consent policy</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77782</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>nodeid_rm</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:146291BBE6C61BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>146291BBE6C61BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE085B86D7AAED6B1E0401F0A07993148</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:146263FC8038291BE05307991F0A21CE</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>146263FC8038291BE05307991F0A21CE</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPq4E3IFkkxhhmtPuqUX0na6fekYR4Db4EDsBOivXztACpT2sLtPGSuy9En6LOmcoWlkek3GIOEkpqXlNKLMy6V1JU2oFyNGmEfRFJjHsRc0+1eeWdY9tL2ilPxOXXmp2WFoD6ug6nhkq3a16qouqoBq2LVKzXBMw3FBqDKWgk8ZR5TXFVM3Kqpuq6Z1b+ieaXiVatl2rWel9AgJE7aFSllXNqCWrK5MOJ95mrZYLMoLqxwnY83UdUN76l8FeAJTpDTO1xHljpLGRh+XQ8AQRbiM46l2ru3pnIfMC8iYIp4msPEVfuVL13RXEzohI+MzpbgLoU9HcX5sIxpTglFE3pHMTx/4JA5LzWgcJ4RPpl8GYejSsApLrGLDpmeKtg/tREN7CBOGVDZBxsbWAEaQAMVQehj4deXstKrlV+8TRNkoTqZs//hneIBmEMUzCFW2DWsD7XSDRzLVOAfs+RRHKSMZXEuyzhAGtqkm4NNNlW4TGJHlFWGCoEsm0Wm78A6O62x0yBgY/5sC7RRnbeQRRSk0lne/Rm/W5QXRLq0VC//rhSNn/hQG761FPQewq5wLitKujwekLEi0vtG0f0QTC8W1x8XDax87ZH5DHfLj1rbdztCq3FD283pQdZwMt5pL+lrr9XqP4XD+nD1DdHff/fmcNR8mrlZBb/MnZ/AaBtdBq2u+zzCMb7sr0l9l7sOF/ZolIfPTYEj6j4O3d+ozx45I1k3SzjO5u6wFb8Ebo5eV/q+u4Q8DNEhaDLnPduo39a5Om/HFY1uvF+Hs4N+Xbd98kA5fAfPtUdLA75R6okqIf9/MpISE6ihX9Way+TAOlCsNeUv2Di8V7Y6Enqjh+mzYVdM1Wq1utV01Wp1uV69Yes11jZ7e7NpWb9tk1igOILZjOiLSl2y5a9p8DxBPPQY0hETN4lR0OqZ8Y7GDOCr5dCAeQUwZ3MeiPRvJfKRXzdVkmI5X1WhFh9PErTmsopSuY35Db5LmiEOy35OtvZ48AExmBGTjlrxmgtiMi1zMUZbyyChnqEwhFa09kV3WM22nojEynUUgkWrTOEwjKM8mszwzGlt/TRVhlksH3fv8tX0Z1+G/bQqETkikApOxtECUEY4MF3sbyKeAq0eH0NZ8Mw2JfFginzwheI1k/9cHTSQ/Co50rprB7RZ0ofsHd1/awYvxlwau/sH51b86F7X8fFP7Jp/aYSkLR2FGdtxutw4xv0THa2yJOEdGeV5OsyzNuWfblpYI85okgaabWgA4FT15dR+/AdUKK9pJA7AAfuC8kO9DTPmEBhxxmIq3UsqPJ2w8ATC58fjikS9PXaf2XIrUcVjyY7J2JLY1ifjbhQ57WOoJ8a34LOIk/KjYEVs7fkScYuHhhI7lSQ6/1Re8wLEwS0TbjpNd48cMHHO+LyySXGDhglDDlMPXf0qyH9cVhHGcUu53lFywOyNynHw1A+9D6ZOZfAwVeyn5/8VUJTkFsNiBhX5uX64XnnwCdLwzZzZOD0dN1eq1Hd1y5MzZHTWm0e4WSdlD1/gk/izZydMhxxu/AQ==</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7f4c777a-6445-4e32-8a3d-c5457e914ffa" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="134670f0-5a86-4fea-8aca-bfd88451e277"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="e27d4a89-126d-44d6-b95c-6733ad744b2c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="92983584-2d50-4457-ad3c-30a4e2d084ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete Account" id="a0bd197a-31e2-41e0-a0a6-77d7cfaa4ac6"><con:settings/><con:config service="Policy DELETE" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete Account" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="60c37f75-995e-4b05-958f-323c6ee002a5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DELETE - PolicyDelete Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="8f49503f-7250-4599-9613-293c8832a8f9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="a8c49709-4af3-4c38-b9af-ee4ee360d05b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZbU+JKEP4rVHy0Qi4EQlJCVSSyJ4qXBXT1vFjjZAKjYRLnEsFff2YCRED0sLtPqen0dH/d/U13nzAwS20/YAxRjjNSm89SwvxS2tEEJX4GGGY+ATPEfA79UXA58O266YP1Fa0WhR3tMUkarpMktt6CbVd3XNPW27YH9abrum3g2O32U0OqMiZQRBgHhHc027SaulS03LFl+pbjN6261bD/1Wp3iDJpW6rUTW0Fas462pTz3DeMt7e3+lujntGJYZumZdxfDkZwimZA654sIyod0e5KH9ZjBFGawjrMZsaJsaVzEjN/hCcEcEHRylf8lS/TMD1D6sQMT4606i6KI5Jk5bEHSEYwBCl+Byo/l4hPs7gWpJOMYj6dfRmEZSrDOppDHVoOOdKMbWgHGtpCSBnQ2RRYK1tDlCCKCES122HU0Y4Oq1p5dUwBYUlGZ2z7+Ht4EClQmuUo1tk6rBW0ww3uyVT3BEE/IjAVDBfoSpE1BxCxVTURPNxU7YaiBM8HmEmCzplCZ2zC2zkusxHiCWL8Twq0UZylkTuQCtR98PKH5OLawRfFWHjgclREPxfBJT6PnU4JYFO5FFSlXR53SFmRaHnjCls4fEdOOu9jc/ggXuLBzf3D3CSF4WF6nrwWVu4W7dfj4Cb/9SooPabuRf+pzQeja3HfaAu7Gd4it/UrKm7N82nkmEYr54sfd4abnZ5eLQJ+9eOKttL0OrPvvGB4N41DgpwL2vPO0Vlki2TQvrxJ3X+O3x7Gz6PF2B489/rMffeeogFMb9Hpe1Scj6/vhz87VTgb+Ldl6zc/Ek/PCPL1UdEgCmt9WSXAv29mSoJjPSlV/Vw1H8YR4VpX3VK9wxey3eHYlzVcns2+0+o3m03Xc89aQat/ZjYbput5Vt8MTC9or5vMEsUOxF5GEqx8qZa7pM33AOHMZ4jEiOpFJmSnY9o3FkPAQS0iQ/kIMsLQOJPt2aImNRPvCTotLB+hiBvZC4DPc6DVrjJ+Ta5pkHBEt3tyY6snDxHEubzMl7xmktiMy1y8gkLw1KoXoE6QkK2dqi7r2067aTA8y1OkkBqzLBYpqufTvMyMwZZfWweQldLh2bh8bV/GtftvnQKpE2OlwFQsp0iWEe0ZLs46kE8Bt/YOobX5QMRYPSyZT04xXCLZ/vVBE8WPiiPhIBjdrEFXur9x97E3erT+0MDgL5wP/ta5rOXnm8Y3+TR2S1k5igu84Xa9dcj5JTted03EV1B/rYuiECX1XNXZqTRvKBIYpm2MEBSyJy/G2QsiRmXFOGgAVsB3nFfybYiCT8mIA45m8q3UyuMBG88IMbXxRPKRzw9dp7ZcytRxNOf7ZL1UbmsK8bcLHfSh0pPiG/l5y2j8UbE9tjb8yDjlwsMxmaiTGn6LL3gBM2kWy7ad0U3j+wzsc74trJJcYeGSUE+Co6//1FQ/7mgAwkwQHoVaKdicESVOvsiR/6H0yUw5hqq9FP//YqrjkgIQyW2W4dK+Wi989QTIZGPOrJx+GjVOL+w5ZihHTbg5avphr1clZQtd95P4s2QjT7sc7/4H</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0F46F4CDC40D6A6DE05307991F0AFDCC</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:0F46F555797E6A6FE05307991F0A09A8</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>805</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77783</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_34853 - StreamDelete - LLP - Stream delete by dlp_ManageAccountConsentNotPresent_SameOrg - 200 OK</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyInfoInURLNotValid">
      <Reason Language="en">The policy information in the URL is not valid.</Reason>
      <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:0F46F4CDC40D6A6DE05307991F0AFDCC/Policy/urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:PolicyInfoInURLNotValid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>0F46F4CDC40D6A6DE05307991F0AFDCC</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>0F46F555797E6A6FE05307991F0A09A8</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamDelete1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="a4c55726-19d0-4937-828b-a37391c6e7d6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c3d2d0e2-2fc8-422c-9b28-7d658178ef29"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamDelete",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="d21a9b08-9ade-437c-8bc2-8957bf74ba85"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectErrTypeStreamDelete",callTC.getPropertyValue("expectErrTypeStreamDelete"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "") {
	tC.setPropertyValue("counter","1");
}
if (tC.getPropertyValue("expectErrTypeStreamDelete") == "null" || 
	tC.getPropertyValue("expectErrTypeStreamDelete") == null) {
	tC.setPropertyValue("expectErrTypeStreamDelete","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="9e88e0f0-3e78-4144-871e-7378e58bd4c2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - StreamDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - StreamDelete" id="c1258db4-d03f-4471-a5d0-9ffe019c17ad"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - StreamDelete" mediaType="application/xml" sslKeystore="0910_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="8a61aa11-2c96-46f6-ae72-a6253f2fd68e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - StreamDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="1f1c7213-4493-4c32-acb1-f43d3e0935ed"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamDelete[" + tC.getPropertyValue("expectErrTypeStreamDelete") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamDelete")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "Policy:RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
		break;
	
		
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamDelete").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="4019c151-f2fc-4863-818a-722cad29d97f"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnErr = tP.getPropertyValue("urnError");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamDelete");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;






this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;
	case "METHOD_NOT_ALLOWED":
		expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
		XMLbodynull        = false;
		httpLocationHeader = false;
	break;


	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/${account}/Stream/$urnstream[0-9, A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
if(errorRespType == "METHOD_NOT_ALLOWED")
{
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
}
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if(errorRespType!= "METHOD_NOT_ALLOWED"){
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 
}
]]></script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="e3797f08-b77d-4088-bc1c-15a9d282be6c"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Return API resulting attributes" id="cf7442bf-7091-4cc1-b6c3-06e41d21e896"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def cnt = tC.getPropertyValue("counter");

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tC.getPropertyValue("expectErrTypeStreamDelete") == "SUCCESS") {
	log.info "Returning Status of Deleted";
	callTC.setPropertyValue("expectDBStatus","deleted");
	callTC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
			
	callTC.setPropertyValue("expectDBStatus_" + cnt,"deleted");
	callTC.setPropertyValue("expectDBDeletedBy_" + cnt,tC.getPropertyValue("nodeid"));
} </script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_b0e4c57e-5526-49b3-9b24-4d0252a5c891</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:C73B396D32AF4E67E0401F0A059951F3</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>97397C14A82BFA4CE0401F0A07996491</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:C73B396D32BB4E67E0401F0A059951F3</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_14850 - StreamDelete - LLP - StreamDelete using q host</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77775</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="9b037590-19d2-4db2-8f62-e69673e4f894"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9e908212-911e-4fc9-a48b-a1f5bb9760c9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="e060ab82-acea-43d2-9d3d-cda1ca023990"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="755a9690-45c6-48cb-a5d1-ce3966046bdc"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7","us:tvpg:tv-y7-fv","us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvpgRatingsreasoncodesUS = ["us:tvpg:v","us:tvpg:s","us:tvpg:l","us:tvpg:d","us:tvpg:fv"];
fabUS = ["us:fab:c","us:fab:f","us:fab:pd","us:fab:pd-m","us:fab:em","us:fab:ao"];
fabreasoncodesUS = ["us:fab:violence","us:fab:frightening","us:fab:sexual","us:fab:mildlang","us:fab:stronglang","us:fab:substance","us:fab:intense","us:fab:bnudity","us:fab:fnudity","us:fab:explicit","us:fab:erotica"];
esrbgamesUS = ["us:esrb:ec","us:esrb:e","us:esrb:e10+","us:esrb:t","us:esrb:m","us:esrb:ao","us:esrb:rp"];
mpaattrailersUS = ["us:mpaat:gb","us:mpaat:rb"];
tvmovieRatingsGB = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18"];
chvrsRatingsCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r"];
cbscRatingsCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+"];
filmtvifcoIE = ["ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
filmtvncsAU = ["au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
filmtvoflcNZ = ["nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
MocRatingFR = ["FR:MOC:U","FR:MOC:10","FR:MOC:12","FR:MOC:16","FR:MOC:18"];
FSKRatingDE = ["DE:FSK:0","DE:FSK:6","DE:FSK:12","DE:FSK:16","DE:FSK:18"];
FSKRatingAT = ["AT:FSK:0","AT:FSK:6","AT:FSK:12","AT:FSK:16","AT:FSK:18"];
FSKRatingCH = ["CH:FSK:0","CH:FSK:6","CH:FSK:12","CH:FSK:16","CH:FSK:18"];
KijkwijzerRatingBE= ["BE:KIJKWIJZER:AL","BE:KIJKWIJZER:6","BE:KIJKWIJZER:9","BE:KIJKWIJZER:12","BE:KIJKWIJZER:16"];
MocRatingLU = ["LU:MOC:U","LU:MOC:10","LU:MOC:12","LU:MOC:16","LU:MOC:18"];
FSKRatingLU= ["LU:FSK:0","LU:FSK:6","LU:FSK:12","LU:FSK:16","LU:FSK:18"];
KijkwijzerRatingNL= ["NL:KIJKWIJZER:AL","NL:KIJKWIJZER:6","NL:KIJKWIJZER:9","NL:KIJKWIJZER:12","NL:KIJKWIJZER:16"];


String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:g":
	case "${urnRating}us:mpaa:pg":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:nc-17":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}us:tvpg:v":
	case "${urnRating}us:tvpg:s":
	case "${urnRating}us:tvpg:l":
	case "${urnRating}us:tvpg:d":
	case "${urnRating}us:tvpg:fv":
		for (rating in tvpgRatingsreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:c":
	case "${urnRating}us:fab:f":
	case "${urnRating}us:fab:pd":
	case "${urnRating}us:fab:pd-m":
	case "${urnRating}us:fab:em":
	case "${urnRating}us:fab:ao":
        	for (rating in fabUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:violence":
	case "${urnRating}us:fab:frightening":
	case "${urnRating}us:fab:sexual":
	case "${urnRating}us:fab:mildlang":
	case "${urnRating}us:fab:stronglang":
        case "${urnRating}us:fab:substance":
	case "${urnRating}us:fab:intense":
	case "${urnRating}us:fab:bnudity":
	case "${urnRating}us:fab:fnudity":
	case "${urnRating}us:fab:explicit":
	case "${urnRating}us:fab:erotica":
		for (rating in fabreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:esrb:ec":
	case "${urnRating}us:esrb:e":
	case "${urnRating}us:esrb:e10+":
	case "${urnRating}us:esrb:t":
	case "${urnRating}us:esrb:m":
	case "${urnRating}us:esrb:ao":
        case "${urnRating}us:esrb:rp":
        	for (rating in esrbgamesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:mpaat:gb":
        case "${urnRating}us:mpaat:rb":
        	for (rating in mpaattrailersUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
   
     //case "${urnRating}gb:bbfc:e":  
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        
        case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r": 
	//case "${urnRating}ca:chvrs:e":   
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

         
        case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
        case "${urnRating}ca:cbsc:18+":
        //case "${urnRating}ca:cbsc:e":
      		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}ie:ifco:e": 
        case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
      		for (rating in filmtvifcoIE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}au:ncs:e": 
        case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
      		for (rating in filmtvncsAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
        //case "${urnRating}nz:oflc:e": 
        case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
        case "${urnRating}nz:oflc:r16": 
        case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
	      		for (rating in filmtvoflcNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
       case "${urnRating}FR:MOC:U":
	case "${urnRating}FR:MOC:10":
	case "${urnRating}FR:MOC:12":
	case "${urnRating}FR:MOC:16":
	case "${urnRating}FR:MOC:18":
      		for (rating in MocRatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

	case "${urnRating}DE:FSK:0":
	case "${urnRating}DE:FSK:6":
	case "${urnRating}DE:FSK:12":
	case "${urnRating}DE:FSK:16":
	case "${urnRating}DE:FSK:18":
      		for (rating in FSKRatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

			case "${urnRating}AT:FSK:0":
	case "${urnRating}AT:FSK:6":
	case "${urnRating}AT:FSK:12":
	case "${urnRating}AT:FSK:16":
	case "${urnRating}AT:FSK:18":
      		for (rating in FSKRatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

			case "${urnRating}CH:FSK:0":
	case "${urnRating}CH:FSK:6":
	case "${urnRating}CH:FSK:12":
	case "${urnRating}CH:FSK:16":
	case "${urnRating}CH:FSK:18":
      		for (rating in FSKRatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

     case "${urnRating}BE:KIJKWIJZER:AL":
	case "${urnRating}BE:KIJKWIJZER:6":
	case "${urnRating}BE:KIJKWIJZER:9":
	case "${urnRating}BE:KIJKWIJZER:12":
	case "${urnRating}BE:KIJKWIJZER:16":
      		for (rating in KijkwijzerRatingBE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:FSK:0":
	case "${urnRating}LU:FSK:6":
	case "${urnRating}LU:FSK:12":
	case "${urnRating}LU:FSK:16":
	case "${urnRating}LU:FSK:18":
      		for (rating in FSKRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:MOC:U":
	case "${urnRating}LU:MOC:10":
	case "${urnRating}LU:MOC:12":
	case "${urnRating}LU:MOC:16":
	case "${urnRating}LU:MOC:18":
      		for (rating in MocRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}NL:KIJKWIJZER:AL":
	case "${urnRating}NL:KIJKWIJZER:6":
	case "${urnRating}NL:KIJKWIJZER:9":
	case "${urnRating}NL:KIJKWIJZER:12":
	case "${urnRating}NL:KIJKWIJZER:16":
      		for (rating in KijkwijzerRatingNL) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);
]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="05d130c2-cb6d-471e-bbb0-cdfd59c38107"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="b26e5163-5249-4e66-99ef-2c64f85d342b"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlRating}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="39e34251-bae0-43d7-bda6-56a120474b01"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="f6909e5d-b69b-4239-8c53-f59d094c8652"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbvb9o8EP6+vyLKPlYhcSBAooJEoXQRtHRAWdcvU+oc4DaxIXZS1r/+tUOTAqV9u01CQr6c75774efulAdxZHsdziERhFHN77X0X9UmclCjWjfsOdhGzcLIuEeBZYR2zbXr9w3HQg1d8zlPwadcBFS0dNtCNcOSV2pThDy76VWtStNt3OnaDBIuTUuViqVrmzii3MvdtvQ0oR4LOOEeDWLgnsDepHM59KSmFxSY9PbpFmXuMGkvhVh5pokrIWCIIlzBLDZPzT2d05B7E7KggUgTePEZ8pb+cvfp6anyVK2wZGHalmWZlmtKnZCTxVe9/aW4DKFP52x77gaUUYKDiDwHCtQliCULtU60YAkRy/gd08hEljJtwAYbGNXoV918dZCj+6SlPZAJDwy+DFBhbAxzSIBi0G7Gfkv/+rkKbu9Ok4DyOUtifnD+M0hAM4jYCkKDF5EV6D5v8Ui62qeAPZ/iKOUkgyvVJqsAA9euE5iTzZBw2Xwh1/Lyaxsuf6ToMsB/UpZTcxerhG4eyU6PLICLv6nZbr22VmZBlEI7RXWfPdw894d84DZ+iM26cXc+G/186PBWDmFXeQuqLPfL+bBZy956uXSbEN8MpyeLYMAaF/Wf9u23i7R5N5j2nEd7dtsVoxRWYdf6WaPopHp2N4/P8Wi8iNDMbS4f/ZE5mvGL0LkZOoMfXzbXJ+zq5mHOHlMY3w2u4DJ+fr76PrwUzewscpcsG7gLjs5hgPprn34D7tc3vdkoi5uXsPgukL20e5uTUbzuDb/45GI2rVajx+8X36Zpd+FkndZrTLsx7AsLSpik9w+ARXFU7eH3tL6sVyA+phclIaExz1W9leIoLoAKva1uKWrxUklAJPRkMbfnftet9vt11+rUew3UdM6tmoX6VsdquG4N1d2Cg7YoDiB2GZ0T5Uux7LZ/PgaIY48DDSExMpbiJXD9A4u9QASaT8fycTDKYcoki6Oq01iH4RwnVWY9MDt24T6rNZKmrl0xMaKjpDMXkOxTd22PuseAyYqA4nfV4Fx2OBcyF+sgS0WEKllQoZDKCZAoEvbsWtMxOYlXESikZszCNILKarnKM2Py7b9tBJjn0vH5NH9478Z1+K1IgdQJiVLgKpYzkGWEIzPILgJ5E7BzdFYV5jtpSNT7kvkUCcFbJPufXttE9UfZI71hZ3JdgC51/+Dur+7kF/pLA8N/cD78V+eylm9vmh/k0zwsZekozMiO22IPkKNNEl+7aMR1UFlX0ixL89ZrKFJPpHlTcjsyJ4BTycy/p+wRqFmaMD81GEvUB55L+T6+VCzpRAQCYvlQtPz4ia1oAlxtRb584ZvPrlx7LmXeBGzEMVk3ksuTQvzhfoU9rPSk+Fr+PbEkfC3XEVs7fmScchUShC7USY3A3+80BWbSLJGczZJd48cMHHO+LyyTXGIRspvuUwHvf9EUGbf0AGOWUuH39FywOyBynOL3CrxXpTdm8iH0slVs+Ltbxe3lcCKpOg70Upf8v7JB8nbBoKvlJcfS0jdySZbO6WJnIL0AfDOTnGYdIVSrd51qOZMc13W61bMygXuRtN+I30p2cnr4Htr/AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC93F58611146C53E0401F0A05995C3B</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC93FF690A6D7185E0401F0A07994169</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC93F58611146C53E0401F0A05995C3B/User/urn:dece:userid:org:dece:FC93FF690A6D7185E0401F0A07994169/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC93FF690A6D7185E0401F0A07994169</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC93FF690A6D7185E0401F0A07994169</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:NL:KIJKWIJZER:16</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish Parental Control Rating</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value><![CDATA[<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:AL</dece:Resource>
<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:6</dece:Resource>
<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:9</dece:Resource>
<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:12</dece:Resource>
<dece:Resource>urn:dece:type:rating:NL:KIJKWIJZER:16</dece:Resource>
]]></con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC93F58611146C53E0401F0A05995C3B</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC93FF690A6D7185E0401F0A07994169</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalConrolRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="af7e47cb-7a66-4a15-ab2d-b77a83c4d9bf"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9aa35769-1cda-43d7-ad47-a2c612326119"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="dfe3649b-1774-4180-aee8-05d1ccb1d8b4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="920622d7-a4e9-41cf-b025-570bb1fc2486"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="60f6d23a-8f46-4108-b70f-1cfd4947b42d"><con:settings/><con:config service="Policy GET" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlRating}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="e2027c98-c30c-421f-b539-f62e94ad9c35"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="35f46e19-c0c9-4fd9-ba46-2cf83f4c5a50"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK" ) {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	
} else {
	log.info "ERROR!";
	assert 1 == 2;
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="bace4d1a-dbf1-4a17-bbc9-bda16efb7f1f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvM4ZbxgFrsCVQaykMKQC4RJ8pIScgNKbBksmSVfP5IBhy25zMyTS+3W6dOLuvuKoTAwHZcxiDmJaG4VBpQ5qbSqJDF1IsQIcygKgTkcO33XaztmXnfQ7oqSazWryqtRKujmaOyrRbOEVQtMW7Utu6gCKo3t8hjK2DKFKmMJtCjjiPKqYupGUdUtVS8M9KJjVRyrkC8XjBclN4SYCWyhkteVLakVqypTzmeOpi2Xy/yykI/iiWbquqE9ee0+nkKIlNrVxqPUUFzb6uO8DxiCAOdxFGpX2oHOlc+cPplQxJMYtrb8r2zpmm5rQsdnZPJDye6C36LjKD02EI0owSggH0jGxwM+jfycG0yimPBp+KUThi6BVVhhFRsW/aFoh9QuBDpgGDOksikytlg9GEMMFEPusdeqKj8uy1p6dRAjysZRHLLD45/xAbqAIJqBr7KdW1tqlwOeiVTtCrDTojhIGFlARxbrDGFg22wCvhwq9xDDmKzahIkCXTHJTtund3TcRKNJJsD43yRoLzkbkCEKEqh1e8byPmRT1uwkDQPfLWegudNfi+DBqqYE9pVTQZbazfGoKLMi2tzozAfTZVT5WfGnH//FxJt/oM7Ie/Qe2u9e2SpNRrZZuXt+vu3VK4suGb4QL3zm0djtTt6G8+6IlQPKZ7Sx7N086+Gs/WJbLiKF9XWXPJlW4f62aEALPw6bw9Cwjfr8/gkl0dx3veFbfD20Xzy72BmMbitdH+ECW/X7YUxHK7Ph/fJKC+RZdct9rnQ7P++eV241c2eP/6Fs9+b7yegNMN8dZRm0mrkbkSXEv29mUkJ8dZyqOjPZfBgHypWavCV7h5OIdkd8R+RwczbMRsMqFd16o25YRun6Wi8W9LJtGze6Wy/p9q7JbFgcUWxEdEykLdlyN2XzPUEcOgyoD7G6iBLR6ZjyDWITcZRr0Z54BBFlMIhkezZXEwLGW9Fal4L5ogzv4NP1W7JScp2Id2k3dscc4sOeXDnoyT3AZEZANm5Z10wUNuMiFnO0SHhg5BcoTyERrT2WXdYxrUpRYyScBSCZamHkJwHkZ9NZGhmNbb6mijBLpb3rQfravvTr+N8uBELHJ1KBSV/qINIIZ4ZLYefIicOls0NoB+8mPpEPS8STxwRvmBz++iwTWR9ZjTTbbv9hRzrT/YO7r43+q/GXAO1/MN7+V+Mil6c3tW/iqR2nMjPkL8ie2d3WIeaX6Hi1XSHOkZGf55PFIklrz7IKWizgNVkEmm5qfcCJ6MnrQfQOVMtQtIsGYEb8yHgmP6SY8Cntc8QhFG8llx4v2Hj6wOTG0xKPfHXpOnVgUoSOw4qfkzUCsa1Jxt8udNjBUk+IH8RnGcX+Z8bOYO3ZEX6KhYcTOpEnOfzWX9QFjgQsEW07ivfBzwGcM34ozIKcceGioEYJh6//5GQ/rioI4yihvNVUUsH+jEh58vUMnE+lE5h0DGV7Kfn/xVQlaQlgENssIym+XC8c+QToZG/ObI2ejJpyqaw36k2rYhb3R01JtwpZUA7Y1U7Ep5K9OB3XeO03</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:12CC47670CBD4825E05307991F0A6043</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:12CC465ABCB1416EE05307991F0AB609</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2001/04/xmlenc#" xmlns:ns4="http://www.w3.org/2000/09/xmldsig#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:12CC47670CBD4825E05307991F0A6043/User/urn:dece:userid:org:dece:12CC465ABCB1416EE05307991F0AB609/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC9440C3948B47E6E0401F0A059974AB</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC47670CBD4825E05307991F0A6043</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>12CC465ABCB1416EE05307991F0AB609</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="dea3a745-6b8d-4636-8165-c8be5b640686"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c3f1ef21-cefa-45ee-8b45-9bb329703c07"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="03d92b9a-f24e-46b6-b530-4e135f2dff57"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="67ce24eb-0e0c-4fff-bb51-45897313560b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="ab981fa2-c863-4cc4-a2ea-0ceb50869d64"><con:settings/><con:config service="Policy DELETE" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="a5f87e3a-e435-4ec1-bfe3-c6b6d7176706"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="ad2e6674-3bab-4af1-82ca-75cb062cf9fa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="ee2f0cb7-23be-4a33-9097-b6ee46a063f3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVbvb9o8EP6+vyLKPlYhcSBAooJEoXQRtHRAWdcvU+oc4DaxIXZS1r/+tUOTAqV9u01CQr6c75774efulAdxZHsdziERhFHN77X0X9UmclCjWjfsOdhGzcLIuEeBZYR2zbXr9w3HQg1d8zlPwadcBFS0dNtCNcOSV2pThDy76VWtStNt3OnaDBIuTUuViqVrmzii3MvdtvQ0oR4LOOEeDWLgnsDepHM59KSmFxSY9PbpFmXuMGkvhVh5pokrIWCIIlzBLDZPzT2d05B7E7KggUgTePEZ8pb+cvfp6anyVK2wZGHalmWZlmtKnZCTxVe9/aW4DKFP52x77gaUUYKDiDwHCtQliCULtU60YAkRy/gd08hEljJtwAYbGNXoV918dZCj+6SlPZAJDwy+DFBhbAxzSIBi0G7Gfkv/+rkKbu9Ok4DyOUtifnD+M0hAM4jYCkKDF5EV6D5v8Ui62qeAPZ/iKOUkgyvVJqsAA9euE5iTzZBw2Xwh1/Lyaxsuf6ToMsB/UpZTcxerhG4eyU6PLICLv6nZbr22VmZBlEI7RXWfPdw894d84DZ+iM26cXc+G/186PBWDmFXeQuqLPfL+bBZy956uXSbEN8MpyeLYMAaF/Wf9u23i7R5N5j2nEd7dtsVoxRWYdf6WaPopHp2N4/P8Wi8iNDMbS4f/ZE5mvGL0LkZOoMfXzbXJ+zq5mHOHlMY3w2u4DJ+fr76PrwUzewscpcsG7gLjs5hgPprn34D7tc3vdkoi5uXsPgukL20e5uTUbzuDb/45GI2rVajx+8X36Zpd+FkndZrTLsx7AsLSpik9w+ARXFU7eH3tL6sVyA+phclIaExz1W9leIoLoAKva1uKWrxUklAJPRkMbfnftet9vt11+rUew3UdM6tmoX6VsdquG4N1d2Cg7YoDiB2GZ0T5Uux7LZ/PgaIY48DDSExMpbiJXD9A4u9QASaT8fycTDKYcoki6Oq01iH4RwnVWY9MDt24T6rNZKmrl0xMaKjpDMXkOxTd22PuseAyYqA4nfV4Fx2OBcyF+sgS0WEKllQoZDKCZAoEvbsWtMxOYlXESikZszCNILKarnKM2Py7b9tBJjn0vH5NH9478Z1+K1IgdQJiVLgKpYzkGWEIzPILgJ5E7BzdFYV5jtpSNT7kvkUCcFbJPufXttE9UfZI71hZ3JdgC51/+Dur+7kF/pLA8N/cD78V+eylm9vmh/k0zwsZekozMiO22IPkKNNEl+7aMR1UFlX0ixL89ZrKFJPpHlTcjsyJ4BTycy/p+wRqFmaMD81GEvUB55L+T6+VCzpRAQCYvlQtPz4ia1oAlxtRb584ZvPrlx7LmXeBGzEMVk3ksuTQvzhfoU9rPSk+Fr+PbEkfC3XEVs7fmScchUShC7USY3A3+80BWbSLJGczZJd48cMHHO+LyyTXGIRspvuUwHvf9EUGbf0AGOWUuH39FywOyBynOL3CrxXpTdm8iH0slVs+Ltbxe3lcCKpOg70Upf8v7JB8nbBoKvlJcfS0jdySZbO6WJnIL0AfDOTnGYdIVSrd51qOZMc13W61bMygXuRtN+I30p2cnr4Htr/AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC93F58611146C53E0401F0A05995C3B</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC93FF690A6D7185E0401F0A07994169</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC9440C3948B47E6E0401F0A059974AB</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC93F58611146C53E0401F0A05995C3B</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC93FF690A6D7185E0401F0A07994169</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="e3493b52-1b23-4582-94cf-1e4cfeb81ab9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d3cb8e67-4843-4dca-ad83-a36a01ac9b06"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="16be9225-3691-4cf7-8f99-6834c869235a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="df4ded52-3a82-4ffc-a5ac-ea259a151462"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="42fa5c10-14b7-409e-9a36-7768fb31397e"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlBlockUnratedContent}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="8c49d7ea-58a7-4ec1-bf64-80514f27df69"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="9410d914-146d-4247-84e6-ae5b02adc1a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbb+I6EH7vr4iyj0chCYRLooJEE2jZhbYLbE/Vl5VxBnBJHLAdSPvrjx0aCpT2tLsSEvJkPPPNxd/MOUdxVPbanAMTJKFaL2jqvydOPazXyrYh/6uGg6uWMali25iiKgC2ak6j4upaj/MUepQLREVTL1u2Y1g1o1we27ZXqXtWpeS4tQdduwPGpWmpUrJ0LYsjyr3cbVNPGfUSxAn3KIqBewJ7o/ag70lNDxWY9Nb5FmXukLXmQiw908SlEDBEES7hJDbPzQOd85B7IzKjSKQMXnyGvKm/3N1sNqVNpZSwmVm2LMu0XFPqhJzMvumts+IyhD06TbZnH9GEEowi8owUqAGIeRJq7WiWMCLm8TumbdO2lGkDMmxg26HfdPPVQY7uk5YOQDKODD5HdmFsCFNgQDFov4a9pv7tcxXc3h0zRPk0YTE/On8NEtA1RMkSQoMXkRXoPm/xRLpa54C9HsVRyskarlWbLBEGrt0ymJKsT7hsvpBrefm1jMsfKboM8FfKcm7uY5XQzRPZCcgMuPiTmu3Xa2vlDkUptHpJylyn7/+8HN6WoTbtTOggyu6qj5tNM4ewr7wFtSv3y/m4WXe99XKpzQKWLAY/zfvp0zCouavakyWcBVsMWBhMu1fV+1Xqz349mFd3Ttj9t45i57mxuB/V+ZPTHf6cQGd5U/Ubz3R1MTgj/Q1dBD+e/Zhfmd/7S799MV9P6OVlnHZYBdtW5gdXZmf86Frx4zzj/rzf+Gfl/pg8RDe3/sJNnHbl8qp8mY3sq7Ps+geLrsfr/uhhNrsJfnF703yNaT+GQ2FBCaN08ghYFEfVHr1A68p6IfExvSgJCY1pruotFUdxAVToLXVLUYuXSgIioSeLuT13/dpFUOt0626lVm00go7lWHbXaltV161c1OsFB21RHEH0Ezolypdi2W3/fAwQxx4HGgIz1kmK58D1DywGSCCtR4fycSSUwziRLA7CfkbRlM0mlbkdMoxdTOdOZj/r2nUibugNa08FsEPqdg6oewiYLAkoflcNzmWHcyFzsULrVER2aY1KFFI5AZgiYa/sNKomJ/EyAoXUjJMwjaC0nC/zzJh8+182EOa5dNgZ5w/v3biOvxUpkDohUQpcxXIBsozwZgbVvGoRyJuAqydnVWG+nYZEvS+ZT8EI3iI5/PTaJqo/dj0S9Nuj2wL0TvcLd3/7o9/2Hxro/4Xz/t86l7V8e9P8IJ/mcSl3jsI12XNb7AFytEniaxWNuEKlVSldr9O89eqK1Jk0b0put80R4FQy89M4WQA1dybMTw3GHeojzzv5Ib5UzOlIIAGxfChafvzEVjQCrrainnzh2WdXrgOXMm8CMnFK5kdyeVKIP9yvsIeVnhTfyr9NwsLXcp2wtedHxilXIUHoTJ3UCHx6pylwIs0SydkJ2zd+ysAp54fCXZJ3WITspkkq4P0vmiLjpo4wTlIqeoGeC/YHRI5TPC3Be1V6YyYfQi9bRcbf3SruB/2RpOoY6Ttd8v/KBsnbBYOulpccS1PP5JIsndPZ3kB6AXhiJnXK7bbbuXBfZ1LddasVq7JL4EEkrTfit5K9nB6/h9Z/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6BD6EE2AA9EB9DE0401F0A07995303/User/urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>FC6BD6EE2AB1EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - General Policy Establishment</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="766db648-5c92-4803-8b75-ae3e8a54b733"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d0f88de0-2ea1-4bec-8662-2bcc2a9a1375"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="4e339e97-d858-4a39-90d4-8ad6714cc7d8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="ae5662ea-33e5-43c7-8d2f-063a36b244e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="cb875046-337c-47da-acd0-3a689ee81a8f"><con:settings/><con:config service="Policy GET" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlBlockUnratedContent}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="70a03281-097a-4382-ba45-5826551d2c4d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="a4bb9221-add9-458c-aa08-b2cfc5c9677e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	//tC.setPropertyValue("policyExists", policyWasFound);
} else {
	log.info "ERROR!";
	assert 1 == 2;
}




tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="4e1e0c7b-2162-427e-92ae-45cb3a9690b6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvM4ZbxgFrsCVQaykMKQC4RJ8pIScgNKbBksmSVfP5IBhy25zMyTS+3W6dOLuvuKoTAwHZcxiDmJaG4VBpQ5qbSqJDF1IsQIcygKgTkcO33XaztmXnfQ7oqSazWryqtRKujmaOyrRbOEVQtMW7Utu6gCKo3t8hjK2DKFKmMJtCjjiPKqYupGUdUtVS8M9KJjVRyrkC8XjBclN4SYCWyhkteVLakVqypTzmeOpi2Xy/yykI/iiWbquqE9ee0+nkKIlNrVxqPUUFzb6uO8DxiCAOdxFGpX2oHOlc+cPplQxJMYtrb8r2zpmm5rQsdnZPJDye6C36LjKD02EI0owSggH0jGxwM+jfycG0yimPBp+KUThi6BVVhhFRsW/aFoh9QuBDpgGDOksikytlg9GEMMFEPusdeqKj8uy1p6dRAjysZRHLLD45/xAbqAIJqBr7KdW1tqlwOeiVTtCrDTojhIGFlARxbrDGFg22wCvhwq9xDDmKzahIkCXTHJTtund3TcRKNJJsD43yRoLzkbkCEKEqh1e8byPmRT1uwkDQPfLWegudNfi+DBqqYE9pVTQZbazfGoKLMi2tzozAfTZVT5WfGnH//FxJt/oM7Ie/Qe2u9e2SpNRrZZuXt+vu3VK4suGb4QL3zm0djtTt6G8+6IlQPKZ7Sx7N086+Gs/WJbLiKF9XWXPJlW4f62aEALPw6bw9Cwjfr8/gkl0dx3veFbfD20Xzy72BmMbitdH+ECW/X7YUxHK7Ph/fJKC+RZdct9rnQ7P++eV241c2eP/6Fs9+b7yegNMN8dZRm0mrkbkSXEv29mUkJ8dZyqOjPZfBgHypWavCV7h5OIdkd8R+RwczbMRsMqFd16o25YRun6Wi8W9LJtGze6Wy/p9q7JbFgcUWxEdEykLdlyN2XzPUEcOgyoD7G6iBLR6ZjyDWITcZRr0Z54BBFlMIhkezZXEwLGW9Fal4L5ogzv4NP1W7JScp2Id2k3dscc4sOeXDnoyT3AZEZANm5Z10wUNuMiFnO0SHhg5BcoTyERrT2WXdYxrUpRYyScBSCZamHkJwHkZ9NZGhmNbb6mijBLpb3rQfravvTr+N8uBELHJ1KBSV/qINIIZ4ZLYefIicOls0NoB+8mPpEPS8STxwRvmBz++iwTWR9ZjTTbbv9hRzrT/YO7r43+q/GXAO1/MN7+V+Mil6c3tW/iqR2nMjPkL8ie2d3WIeaX6Hi1XSHOkZGf55PFIklrz7IKWizgNVkEmm5qfcCJ6MnrQfQOVMtQtIsGYEb8yHgmP6SY8Cntc8QhFG8llx4v2Hj6wOTG0xKPfHXpOnVgUoSOw4qfkzUCsa1Jxt8udNjBUk+IH8RnGcX+Z8bOYO3ZEX6KhYcTOpEnOfzWX9QFjgQsEW07ivfBzwGcM34ozIKcceGioEYJh6//5GQ/rioI4yihvNVUUsH+jEh58vUMnE+lE5h0DGV7Kfn/xVQlaQlgENssIym+XC8c+QToZG/ObI2ejJpyqaw36k2rYhb3R01JtwpZUA7Y1U7Ep5K9OB3XeO03</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:12CC47670CBD4825E05307991F0A6043</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:12CC465ABCB1416EE05307991F0AB609</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:12CC47670CBD4825E05307991F0A6043/User/urn:dece:userid:org:dece:12CC465ABCB1416EE05307991F0AB609/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC93F5910539967CE0401F0A05995C41</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC47670CBD4825E05307991F0A6043</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>12CC465ABCB1416EE05307991F0AB609</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="635fe61f-f44d-4a9d-8cbb-638b402d61f9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c830aec8-2593-4d98-acb8-3beb2a6acbb9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="25460083-64f3-471c-b415-0a1cfcc4a4f6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="115971ae-c23e-4db1-83ff-a421d0dbebc0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="5eebe7c3-d099-445b-be0b-c0bd3c33e7df"><con:settings/><con:config service="Policy DELETE" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="59c1220d-4b3a-4ba3-bb82-d9de674c5345"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="c40fca69-e042-4c5c-9d74-c9c3fa9e5b2d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="c32be0e4-5c1c-450d-a334-ef6e35fc1108"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZbb+I6EH7vr4iyj0chCYRLooJEE2jZhbYLbE/Vl5VxBnBJHLAdSPvrjx0aCpT2tLsSEvJkPPPNxd/MOUdxVPbanAMTJKFaL2jqvydOPazXyrYh/6uGg6uWMali25iiKgC2ak6j4upaj/MUepQLREVTL1u2Y1g1o1we27ZXqXtWpeS4tQdduwPGpWmpUrJ0LYsjyr3cbVNPGfUSxAn3KIqBewJ7o/ag70lNDxWY9Nb5FmXukLXmQiw908SlEDBEES7hJDbPzQOd85B7IzKjSKQMXnyGvKm/3N1sNqVNpZSwmVm2LMu0XFPqhJzMvumts+IyhD06TbZnH9GEEowi8owUqAGIeRJq7WiWMCLm8TumbdO2lGkDMmxg26HfdPPVQY7uk5YOQDKODD5HdmFsCFNgQDFov4a9pv7tcxXc3h0zRPk0YTE/On8NEtA1RMkSQoMXkRXoPm/xRLpa54C9HsVRyskarlWbLBEGrt0ymJKsT7hsvpBrefm1jMsfKboM8FfKcm7uY5XQzRPZCcgMuPiTmu3Xa2vlDkUptHpJylyn7/+8HN6WoTbtTOggyu6qj5tNM4ewr7wFtSv3y/m4WXe99XKpzQKWLAY/zfvp0zCouavakyWcBVsMWBhMu1fV+1Xqz349mFd3Ttj9t45i57mxuB/V+ZPTHf6cQGd5U/Ubz3R1MTgj/Q1dBD+e/Zhfmd/7S799MV9P6OVlnHZYBdtW5gdXZmf86Frx4zzj/rzf+Gfl/pg8RDe3/sJNnHbl8qp8mY3sq7Ps+geLrsfr/uhhNrsJfnF703yNaT+GQ2FBCaN08ghYFEfVHr1A68p6IfExvSgJCY1pruotFUdxAVToLXVLUYuXSgIioSeLuT13/dpFUOt0626lVm00go7lWHbXaltV161c1OsFB21RHEH0Ezolypdi2W3/fAwQxx4HGgIz1kmK58D1DywGSCCtR4fycSSUwziRLA7CfkbRlM0mlbkdMoxdTOdOZj/r2nUibugNa08FsEPqdg6oewiYLAkoflcNzmWHcyFzsULrVER2aY1KFFI5AZgiYa/sNKomJ/EyAoXUjJMwjaC0nC/zzJh8+182EOa5dNgZ5w/v3biOvxUpkDohUQpcxXIBsozwZgbVvGoRyJuAqydnVWG+nYZEvS+ZT8EI3iI5/PTaJqo/dj0S9Nuj2wL0TvcLd3/7o9/2Hxro/4Xz/t86l7V8e9P8IJ/mcSl3jsI12XNb7AFytEniaxWNuEKlVSldr9O89eqK1Jk0b0put80R4FQy89M4WQA1dybMTw3GHeojzzv5Ib5UzOlIIAGxfChafvzEVjQCrrainnzh2WdXrgOXMm8CMnFK5kdyeVKIP9yvsIeVnhTfyr9NwsLXcp2wtedHxilXIUHoTJ3UCHx6pylwIs0SydkJ2zd+ysAp54fCXZJ3WITspkkq4P0vmiLjpo4wTlIqeoGeC/YHRI5TPC3Be1V6YyYfQi9bRcbf3SruB/2RpOoY6Ttd8v/KBsnbBYOulpccS1PP5JIsndPZ3kB6AXhiJnXK7bbbuXBfZ1LddasVq7JL4EEkrTfit5K9nB6/h9Z/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC93F5910539967CE0401F0A05995C41</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="596d20d4-c874-4539-b019-906d9ccaaf4b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6fa6791b-8390-40d9-9edd-e4ff2a6b7766"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="1e74f6d3-fc90-49b0-bbb0-a891e0a4adac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="51706222-4eff-45e4-b862-339d1911551e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="76497bd8-3e2b-433b-9dff-61746b02a519"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlAllowAdult}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="09f5b67e-09d4-4245-8941-dadd9324c94c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="df8bb17a-87f4-41b7-bf7d-9cf0794707e3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbb+I6EH7vr4iyj0chCYRLooJEE2jZhbYLbE/Vl5VxBnBJHLAdSPvrjx0aCpT2tLsSEvJkPPPNxd/MOUdxVPbanAMTJKFaL2jqvydOPazXyrYh/6uGg6uWMali25iiKgC2ak6j4upaj/MUepQLREVTL1u2Y1g1o1we27ZXqXtWpeS4tQdduwPGpWmpUrJ0LYsjyr3cbVNPGfUSxAn3KIqBewJ7o/ag70lNDxWY9Nb5FmXukLXmQiw908SlEDBEES7hJDbPzQOd85B7IzKjSKQMXnyGvKm/3N1sNqVNpZSwmVm2LMu0XFPqhJzMvumts+IyhD06TbZnH9GEEowi8owUqAGIeRJq7WiWMCLm8TumbdO2lGkDMmxg26HfdPPVQY7uk5YOQDKODD5HdmFsCFNgQDFov4a9pv7tcxXc3h0zRPk0YTE/On8NEtA1RMkSQoMXkRXoPm/xRLpa54C9HsVRyskarlWbLBEGrt0ymJKsT7hsvpBrefm1jMsfKboM8FfKcm7uY5XQzRPZCcgMuPiTmu3Xa2vlDkUptHpJylyn7/+8HN6WoTbtTOggyu6qj5tNM4ewr7wFtSv3y/m4WXe99XKpzQKWLAY/zfvp0zCouavakyWcBVsMWBhMu1fV+1Xqz349mFd3Ttj9t45i57mxuB/V+ZPTHf6cQGd5U/Ubz3R1MTgj/Q1dBD+e/Zhfmd/7S799MV9P6OVlnHZYBdtW5gdXZmf86Frx4zzj/rzf+Gfl/pg8RDe3/sJNnHbl8qp8mY3sq7Ps+geLrsfr/uhhNrsJfnF703yNaT+GQ2FBCaN08ghYFEfVHr1A68p6IfExvSgJCY1pruotFUdxAVToLXVLUYuXSgIioSeLuT13/dpFUOt0626lVm00go7lWHbXaltV161c1OsFB21RHEH0Ezolypdi2W3/fAwQxx4HGgIz1kmK58D1DywGSCCtR4fycSSUwziRLA7CfkbRlM0mlbkdMoxdTOdOZj/r2nUibugNa08FsEPqdg6oewiYLAkoflcNzmWHcyFzsULrVER2aY1KFFI5AZgiYa/sNKomJ/EyAoXUjJMwjaC0nC/zzJh8+182EOa5dNgZ5w/v3biOvxUpkDohUQpcxXIBsozwZgbVvGoRyJuAqydnVWG+nYZEvS+ZT8EI3iI5/PTaJqo/dj0S9Nuj2wL0TvcLd3/7o9/2Hxro/4Xz/t86l7V8e9P8IJ/mcSl3jsI12XNb7AFytEniaxWNuEKlVSldr9O89eqK1Jk0b0put80R4FQy89M4WQA1dybMTw3GHeojzzv5Ib5UzOlIIAGxfChafvzEVjQCrrainnzh2WdXrgOXMm8CMnFK5kdyeVKIP9yvsIeVnhTfyr9NwsLXcp2wtedHxilXIUHoTJ3UCHx6pylwIs0SydkJ2zd+ysAp54fCXZJ3WITspkkq4P0vmiLjpo4wTlIqeoGeC/YHRI5TPC3Be1V6YyYfQi9bRcbf3SruB/2RpOoY6Ttd8v/KBsnbBYOulpccS1PP5JIsndPZ3kB6AXhiJnXK7bbbuXBfZ1LddasVq7JL4EEkrTfit5K9nB6/h9Z/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6BD6EE2AA9EB9DE0401F0A07995303/User/urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Allow Adult Policy Establishment</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="1dd8ea22-34cd-49ab-bfa6-d2422ff74f71"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="55e7a133-982a-4f38-8e0d-b9827730387d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="7690098f-6827-44b0-bb4d-b6789509c6af"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="e3302c8f-1785-4a78-909b-ec8db7586f36"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="29ed43c8-8816-4e88-a9ac-d77d3882d66e"><con:settings/><con:config service="Policy GET" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#Project#urnParentalControlAllowAdult}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="77086943-d8de-41c9-9d53-ae3ba7d4e0dc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="b8008727-a566-40ab-a8f5-e720419dad09"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	//tC.setPropertyValue("policyExists", policyWasFound);
} else {
	log.info "ERROR!";
	assert 1 == 2;
}




tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="4ec10934-1c8d-4f4d-b761-68f7d8537c0f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Allow Adult Policy Establishment</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbb+I6EH7vr4iyj0chCYRLooJEE2jZhbYLbE/Vl5VxBnBJHLAdSPvrjx0aCpT2tLsSEvJkPPPNxd/MOUdxVPbanAMTJKFaL2jqvydOPazXyrYh/6uGg6uWMali25iiKgC2ak6j4upaj/MUepQLREVTL1u2Y1g1o1we27ZXqXtWpeS4tQdduwPGpWmpUrJ0LYsjyr3cbVNPGfUSxAn3KIqBewJ7o/ag70lNDxWY9Nb5FmXukLXmQiw908SlEDBEES7hJDbPzQOd85B7IzKjSKQMXnyGvKm/3N1sNqVNpZSwmVm2LMu0XFPqhJzMvumts+IyhD06TbZnH9GEEowi8owUqAGIeRJq7WiWMCLm8TumbdO2lGkDMmxg26HfdPPVQY7uk5YOQDKODD5HdmFsCFNgQDFov4a9pv7tcxXc3h0zRPk0YTE/On8NEtA1RMkSQoMXkRXoPm/xRLpa54C9HsVRyskarlWbLBEGrt0ymJKsT7hsvpBrefm1jMsfKboM8FfKcm7uY5XQzRPZCcgMuPiTmu3Xa2vlDkUptHpJylyn7/+8HN6WoTbtTOggyu6qj5tNM4ewr7wFtSv3y/m4WXe99XKpzQKWLAY/zfvp0zCouavakyWcBVsMWBhMu1fV+1Xqz349mFd3Ttj9t45i57mxuB/V+ZPTHf6cQGd5U/Ubz3R1MTgj/Q1dBD+e/Zhfmd/7S799MV9P6OVlnHZYBdtW5gdXZmf86Frx4zzj/rzf+Gfl/pg8RDe3/sJNnHbl8qp8mY3sq7Ps+geLrsfr/uhhNrsJfnF703yNaT+GQ2FBCaN08ghYFEfVHr1A68p6IfExvSgJCY1pruotFUdxAVToLXVLUYuXSgIioSeLuT13/dpFUOt0626lVm00go7lWHbXaltV161c1OsFB21RHEH0Ezolypdi2W3/fAwQxx4HGgIz1kmK58D1DywGSCCtR4fycSSUwziRLA7CfkbRlM0mlbkdMoxdTOdOZj/r2nUibugNa08FsEPqdg6oewiYLAkoflcNzmWHcyFzsULrVER2aY1KFFI5AZgiYa/sNKomJ/EyAoXUjJMwjaC0nC/zzJh8+182EOa5dNgZ5w/v3biOvxUpkDohUQpcxXIBsozwZgbVvGoRyJuAqydnVWG+nYZEvS+ZT8EI3iI5/PTaJqo/dj0S9Nuj2wL0TvcLd3/7o9/2Hxro/4Xz/t86l7V8e9P8IJ/mcSl3jsI12XNb7AFytEniaxWNuEKlVSldr9O89eqK1Jk0b0put80R4FQy89M4WQA1dybMTw3GHeojzzv5Ib5UzOlIIAGxfChafvzEVjQCrrainnzh2WdXrgOXMm8CMnFK5kdyeVKIP9yvsIeVnhTfyr9NwsLXcp2wtedHxilXIUHoTJ3UCHx6pylwIs0SydkJ2zd+ysAp54fCXZJ3WITspkkq4P0vmiLjpo4wTlIqeoGeC/YHRI5TPC3Be1V6YyYfQi9bRcbf3SruB/2RpOoY6Ttd8v/KBsnbBYOulpccS1PP5JIsndPZ3kB6AXhiJnXK7bbbuXBfZ1LddasVq7JL4EEkrTfit5K9nB6/h9Z/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6BD6EE2AA9EB9DE0401F0A07995303/User/urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>816</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC93FF702F5B065AE0401F0A07994167</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="4b84f91c-b434-4760-82f6-787312809b4d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b156a043-c51b-47de-a391-6690cb44ccf2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="be3ed86d-8456-4aae-9ae1-1233e957f8b0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="ec0bb0f2-26ec-4397-a6ab-d091f7235ff0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="cd8ba2a8-36b9-473a-b9d9-986e93b56495"><con:settings/><con:config service="Policy DELETE" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="LLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="6be7505e-d379-4f0f-ad04-a528bad940ce"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="0655c822-4df2-462a-8b60-d797949be519"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="da99dd37-3caf-44cc-ba81-688fe5769f18"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove Allow Adult Policy</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZbb+I6EH7vr4iyj0chCYRLooJEE2jZhbYLbE/Vl5VxBnBJHLAdSPvrjx0aCpT2tLsSEvJkPPPNxd/MOUdxVPbanAMTJKFaL2jqvydOPazXyrYh/6uGg6uWMali25iiKgC2ak6j4upaj/MUepQLREVTL1u2Y1g1o1we27ZXqXtWpeS4tQdduwPGpWmpUrJ0LYsjyr3cbVNPGfUSxAn3KIqBewJ7o/ag70lNDxWY9Nb5FmXukLXmQiw908SlEDBEES7hJDbPzQOd85B7IzKjSKQMXnyGvKm/3N1sNqVNpZSwmVm2LMu0XFPqhJzMvumts+IyhD06TbZnH9GEEowi8owUqAGIeRJq7WiWMCLm8TumbdO2lGkDMmxg26HfdPPVQY7uk5YOQDKODD5HdmFsCFNgQDFov4a9pv7tcxXc3h0zRPk0YTE/On8NEtA1RMkSQoMXkRXoPm/xRLpa54C9HsVRyskarlWbLBEGrt0ymJKsT7hsvpBrefm1jMsfKboM8FfKcm7uY5XQzRPZCcgMuPiTmu3Xa2vlDkUptHpJylyn7/+8HN6WoTbtTOggyu6qj5tNM4ewr7wFtSv3y/m4WXe99XKpzQKWLAY/zfvp0zCouavakyWcBVsMWBhMu1fV+1Xqz349mFd3Ttj9t45i57mxuB/V+ZPTHf6cQGd5U/Ubz3R1MTgj/Q1dBD+e/Zhfmd/7S799MV9P6OVlnHZYBdtW5gdXZmf86Frx4zzj/rzf+Gfl/pg8RDe3/sJNnHbl8qp8mY3sq7Ps+geLrsfr/uhhNrsJfnF703yNaT+GQ2FBCaN08ghYFEfVHr1A68p6IfExvSgJCY1pruotFUdxAVToLXVLUYuXSgIioSeLuT13/dpFUOt0626lVm00go7lWHbXaltV161c1OsFB21RHEH0Ezolypdi2W3/fAwQxx4HGgIz1kmK58D1DywGSCCtR4fycSSUwziRLA7CfkbRlM0mlbkdMoxdTOdOZj/r2nUibugNa08FsEPqdg6oewiYLAkoflcNzmWHcyFzsULrVER2aY1KFFI5AZgiYa/sNKomJ/EyAoXUjJMwjaC0nC/zzJh8+182EOa5dNgZ5w/v3biOvxUpkDohUQpcxXIBsozwZgbVvGoRyJuAqydnVWG+nYZEvS+ZT8EI3iI5/PTaJqo/dj0S9Nuj2wL0TvcLd3/7o9/2Hxro/4Xz/t86l7V8e9P8IJ/mcSl3jsI12XNb7AFytEniaxWNuEKlVSldr9O89eqK1Jk0b0put80R4FQy89M4WQA1dybMTw3GHeojzzv5Ib5UzOlIIAGxfChafvzEVjQCrrainnzh2WdXrgOXMm8CMnFK5kdyeVKIP9yvsIeVnhTfyr9NwsLXcp2wtedHxilXIUHoTJ3UCHx6pylwIs0SydkJ2zd+ysAp54fCXZJ3WITspkkq4P0vmiLjpo4wTlIqeoGeC/YHRI5TPC3Be1V6YyYfQi9bRcbf3SruB/2RpOoY6Ttd8v/KBsnbBYOulpccS1PP5JIsndPZ3kB6AXhiJnXK7bbbuXBfZ1LddasVq7JL4EEkrTfit5K9nB6/h9Z/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC93FF702F5B065AE0401F0A07994167</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Configuration/Setup" disabled="true" id="aa8d4ae0-2cc3-40fe-af10-970f7dbb46ce"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authentication Contexts" searchProperties="true" id="b1b3cfa7-76a3-4030-aa3f-38d69ceef567"><con:settings/><con:testStep type="groovy" name="Data Setup when Stream Count Greater then 12 for Stream Service ON" id="da166d35-5d92-4ec6-a989-894d3073efc6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

def StreamCreateCount = tP.getPropertyValue("StreamCreateCount")

log.info "Stream Count from Proejct level......:" + StreamCreateCount;
log.info "Not required to create test data...."

def temp_username = callTC.getPropertyValue("username");

log.info "temp_username ... " + temp_username;

                if (temp_username == tP.getPropertyValue("UserName_FAU1"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_FAU1");
                }
                else if (temp_username == tP.getPropertyValue("UserName_FAU2"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_FAU2");
                }
                else if (temp_username == tP.getPropertyValue("UserName_SAU1"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_SAU1");
                }
                else if (temp_username == tP.getPropertyValue("UserName_SAU2"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_SAU2");
                }
                else if (temp_username == tP.getPropertyValue("UserName_BAU1"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_BAU1");
                }
                else if (temp_username == tP.getPropertyValue("UserName_BAU2"))
                {
                                tC.setPropertyValue("UserName_Property","UserName_BAU2");
                }

log.info "UserName property from Test Case ... " + tP.getPropertyValue(tC.getPropertyValue("UserName_Property"));

//run E2E when Stream count reached to 12 in the Account

if(StreamCreateCount>="12")
{     

                StreamCreateCount = 0;

                //update StreamCreateCount to Zero at project level.
                tP.setPropertyValue("StreamCreateCount",StreamCreateCount.toString())
                                
                def myTS = tP.getTestSuiteByName("E_2_E");
                
                def runnerTS = myTS.run( null , false )
                
                assert runnerTS.status == Status.FINISHED;
}

//Setting the desired user from the testcase
tC.setPropertyValue("username",tP.getPropertyValue(tC.getPropertyValue("UserName_Property")));

log.info tC.getPropertyValue("username");

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Properties from calling test case" id="78f9a66a-4880-4245-bb99-9bf6d5ee696c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC;

tC.setPropertyValue("nodeid", null);
//tC.setPropertyValue("username", null);

try {
	callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

	tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
//	tC.setPropertyValue("username",callTC.getPropertyValue("username"));
}
catch(Throwable e) {
	log.info "ERROR during getTestCaseByName - $e";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Authentication Context" id="89e82919-6910-4d76-86de-c17d47612690"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def dbAcct;

int lastColon;
def nodeID = tC.getPropertyValue("nodeid");
String userID = tC.getPropertyValue("username").toString();
String rturn = tP.getPropertyValue("urnRightsLocker").toString();
String useroid = "";
String acctoid = "";
String uuid = "";
String assertionAccountIdFULL = "";
String assertionUserIdFULL = "";
String assertion = "";
String rightslocker;

assert nodeID.length() > 0;
assert userID.length() > 0;

try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	useroid = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}
/*
*  Null calling test cases current Properties
*/
callTC.setPropertyValue("assert",null);
callTC.setPropertyValue("assertId",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionAccountIdFULL",null);
callTC.setPropertyValue("assertionAccountId",null);
callTC.setPropertyValue("assertionUserIdFULL",null);
callTC.setPropertyValue("assertionUserId",null);
callTC.setPropertyValue("accountoid",null);
callTC.setPropertyValue("useroid",null);
callTC.setPropertyValue("rightslockerFULL",null);
callTC.setPropertyValue("rightslocker",null);

/*
*  LP2 security contexts
*/

log.info "---- PROCESSING nodeID[$nodeID] userID[$userID]";

	switch (nodeID) {
		case tP.getPropertyValue("nodeoid10"):  // Retailer node	
		case tP.getPropertyValue("nodeoid11"):  // Linked LASP	
		case tP.getPropertyValue("nodeoid12"):  // Linked LASP	CS
		case tP.getPropertyValue("nodeoid13"):  // Dynamic LASP 	
		case tP.getPropertyValue("nodeoid14"):  // Dynamic LASP CS		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_1").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;

          case tP.getPropertyValue("nodeoid30"):
          case tP.getPropertyValue("nodeoid31"): // Dynamic lasp and his/her customer service node		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_3").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
          
          case tP.getPropertyValue("nodeoid20"):
           // Linked lasp and his/her customer service node		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_2").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;

		default:
			log.info "ERROR - NodeID supplied is not configured!";
			assert 1 == 2;
			break;
	}

log.info "---- PROCESSING COMPLETE";
/*
*  Get the account's rightslocker
*/
try {
	dbAcct = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbAccount - $e";
	assert 1 == 2;
}
finally {
	try {
		rightslocker = dbAcct.accountGetRightsLockerId(acctoid);

		log.info "rightslocker: $rightslocker";
	}
	catch(Throwable e) {
		log.info "ERROR - dbAcct.accountGetRightsLockerId - $e";
		assert 1 == 2;
	}
	finally {
		assert rightslocker.length() > 0;
	}
}
/*
*  If we are here then we lived.  Now we will populate all the other 
*  generic values everyone gets.
*/
callTC.setPropertyValue("accountoid",acctoid);
callTC.setPropertyValue("useroid",useroid)
callTC.setPropertyValue("assertId",uuid);
callTC.setPropertyValue("assertionUUID",uuid);
callTC.setPropertyValue("assertionAccountIdFULL",assertionAccountIdFULL);
callTC.setPropertyValue("assertionUserIdFULL",assertionUserIdFULL);
callTC.setPropertyValue("assert",assertion);
callTC.setPropertyValue("rightslocker",rightslocker);
callTC.setPropertyValue("rightslockerFULL", rturn + rightslocker);

lastColon = assertionAccountIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 1));
lastColon = assertionUserIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 1));

if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
lastColon = assertionAccountIdFULL.lastIndexOf('%');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 3));
lastColon = assertionUserIdFULL.lastIndexOf('%');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 3));
}
else
{
lastColon = assertionAccountIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 1));
lastColon = assertionUserIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 1));
}</script></con:config></con:testStep><con:properties><con:property><con:name>UserName_Property</con:name><con:value>UserName_FAU1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150611_071756</con:value></con:property><con:property><con:name>tName</con:name><con:value>RightsTokenCreate</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77784</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>da166d35-5d92-4ec6-a989-894d3073efc6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamDelete Response Body and HTTP Header Set Check" searchProperties="true" id="3ebccb07-0d79-4d76-824c-a7d344cfa977"><con:settings/><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="1b0449cb-9080-402e-b5c2-0a32eceb472c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("restSName",callTC.getPropertyValue("restSName"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("nodeuserid",callTC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("nodeaccountid",callTC.getPropertyValue("nodeaccountid"));
tC.setPropertyValue("loopuntil",callTC.getPropertyValue("loopuntil"));
tC.setPropertyValue("llpnodeid",callTC.getPropertyValue("llpnodeid"));
tC.setPropertyValue("dlpnodeid",callTC.getPropertyValue("dlpnodeid"));
tC.setPropertyValue("dlpnodeuserid",callTC.getPropertyValue("dlpnodeuserid"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("eNickPresent",callTC.getPropertyValue("eNickPresent"));
tC.setPropertyValue("eStatus",callTC.getPropertyValue("eStatus"));
tC.setPropertyValue("errorRespType",callTC.getPropertyValue("errorRespType"));
tC.setPropertyValue("bcMatchStreamHandleExact",callTC.getPropertyValue("bcMatchStreamHandleExact"));

if (tC.getPropertyValue("restSName") == null) {
	tC.setPropertyValue("restSName","DELETE - StreamDelete");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="76bb3f5d-5fc7-4bcd-96df-f625608fd0b4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def tStep  = callTC.getTestStepByName(tC.getPropertyValue("restSName"));
def expXML = tStep.httpRequest.response.getResponseContent();

tC.setPropertyValue("XMLbody", expXML);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="e9fa1b8a-3005-4130-83a2-be6a0abb9a21"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

boolean skipBodyCheck = false;
boolean contentLengthnotZero = true;
String step = testCase.getPropertyValue("restSName");
String expectContentType = "application/xml";
String errorID = "";
String errorReason = "";
String errorLink = "";
String orgRequest = "";
String connectionStatusExp = "close";          
/*
*  Extract the headers we need from the calling test case
*/
def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def status = callTC.getTestStepByName(step).httpRequest.response.responseHeaders["#status#"]; 
def connection = callTC.getTestStepByName(step).httpRequest.response.responseHeaders["Connection"];
def contentType = callTC.getTestStepByName(step).httpRequest.response.responseHeaders["Content-Type"];
def contentLocation = callTC.getTestStepByName(step).httpRequest.response.responseHeaders["Content-Location"];
def contentLength = callTC.getTestStepByName(step).httpRequest.response.responseHeaders["Content-Length"].toInteger();

def host = testProject.getPropertyValue("targetHost");
def port = testProject.getPropertyValue("targetPort");
def urnacct = testProject.getPropertyValue("urnaccount");
def urnstream = testProject.getPropertyValue("urnstream");
def accountId = testCase.getPropertyValue("nodeaccountid");
def streamhandle = testCase.getPropertyValue("streamhandle");
def contentProfile = testCase.getPropertyValue("ContentProfile");
def errorResponse = testCase.getPropertyValue("errorRespType");
def responseStatusAct = status;
def connectionStatusAct = connection;
def checkStreamHandlewithoutURN = testCase.getPropertyValue("bcMatchStreamHandleExact");

this.log.info "errorResponse is $errorResponse";

switch (errorResponse) {
	case "OK":
	case "SUCCESS":
		testCase.setPropertyValue("XMLbody","");
		responseStatusExp = "HTTP/1.1 200 OK";  
		skipBodyCheck = true;
		contentLengthnotZero = false;
	break;
	case "ACCOUNT_NOT_ACTIVE":
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "Account is not active";
		errorLink   = "http://error.decellc.org/en/AccountNotActive";    
		responseStatusExp = "HTTP/1.1 403 Forbidden";  
	break;
	case "ACCOUNT_NOT_MATCH":
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "Request Account ID not match";
		errorLink   = "http://error.decellc.org/en/AccountIdUnmatched";    
		responseStatusExp = "HTTP/1.1 403 Forbidden";  
	break;
	case "API_NOT_AUTH":
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "http://error.decellc.org/en/Security:RoleInvalid";    
		responseStatusExp = "HTTP/1.1 403 Forbidden";  
	break;       
	case "STREAM_NOT_FOUND":
		errorID     = "urn:dece:errorid:org:dece:StreamNotFound";
		errorReason = "Stream handle not found";
		errorLink   = "http://error.decellc.org/en/StreamNotFound";    
		responseStatusExp = "HTTP/1.1 404 Not Found";  
	break;        
	case "STREAM_INVALID":
		errorID     = "urn:dece:errorid:org:dece:StreamHandleIDInvalid";
		errorReason = "Stream Handle ID Invalid";
		errorLink   = "http://error.decellc.org/en/StreamHandleIDInvalid";    
		responseStatusExp = "HTTP/1.1 400 Bad Request";  
	break;  
	case "STREAM_OWNER_MISMATCH":
		errorID     = "urn:dece:errorid:org:dece:StreamOwnerMismatch";
		errorReason = "Stream Owner Mismatch";
		errorLink   = "http://error.decellc.org/en/StreamOwnerMismatch";    
		responseStatusExp = "HTTP/1.1 403 Forbidden";  
	break;   
	case "NODE_NOT_ACTIVE":
		errorID     = "urn:dece:errorid:org:dece:NodeNotActive";
		errorReason = "Node is not active";
		errorLink   = "http://error.decellc.org/en/NodeNotActive";    
		responseStatusExp = "HTTP/1.1 403 Forbidden";  
	break;      
	case "USER_NOT_ACTIVE":
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "http://error.decellc.org/en/UserNotActive";    
		responseStatusExp = "HTTP/1.1 403 Forbidden";  
	break;                     
	case "USER_PRIVILEGE_RESTRICTED":
		errorID     = "urn:dece:errorid:org:dece:UserPrivlegeAccessRestricted";
		errorReason = "User Privlege Access Restricted";
		errorLink   = "http://error.decellc.org/en/UserPrivlegeAccessRestricted";    
		responseStatusExp = "HTTP/1.1 403 Forbidden";  
	break; 
	case "URL_BAD":
		responseStatusExp = "HTTP/1.1 403 Forbidden";  
		skipBodyCheck = true;
	break; 
	case "RATING_POLICY_RESTRICTED":
		errorID     = "urn:dece:errorid:org:dece:Request:Policy:RatingPolicyExists";
		errorReason = "A rating Policy is restricting the user to view the content.";
		errorLink   = "http://error.decellc.org/en/Request:Policy:RatingPolicyExists";    
		responseStatusExp = "HTTP/1.1 401 Unauthorized";  
	break;      
}

if(port != "443") {
	port = ":" + port;
} else {
	port = "";
}
if (!checkStreamHandlewithoutURN) {
	orgRequest  = "https://" + host + port + "/dece/Account/" + urnacct + accountId + "/Stream/" + urnstream + streamhandle;    
} else {
	orgRequest  = "https://" + host + port + "/dece/Account/" + urnacct + accountId + "/Stream/" + streamhandle;    
}

/*
*  Now do actual body verification
*/
boolean iFailed = false;

this.log.info "responseStatusExp [$responseStatusExp]";
this.log.info "responseStatusAct [$responseStatusAct]";
assert responseStatusExp == responseStatusAct;


//  CONNECTION: header
assert connectionStatusExp == connectionStatusAct;

//  Content-Location Header -- Not Present
assert contentLocation == null;

//  Content-Type: header
assert contentType == expectContentType;

//  Content-Length
this.log.info "contentLength [$contentLength] - contentLengthnotZero [$contentLengthnotZero]";
if (contentLengthnotZero) {
	assert contentLength > 0;
} else {
	assert contentLength == 0;
}

def resXML = testCase.getPropertyValue("XMLbody");
if (resXML.length() > 0) 
{
     def myXML = new XmlSlurper().parseText(resXML);

     // Verify response sizes...
     assert myXML.Error.size() == 1;
     assert myXML.Error.Reason.size() == 1;
     assert myXML.Error.OriginalRequest.size() == 1;
     assert myXML.Error.ErrorLink.size() == 1;
                               
     // ErrorId
     try
     {
     		assert myXML.Error.@ErrorID.toString() == errorID;
     }
     catch(Throwable e)
	{
		log.info e;                            
		log.info errorID;
		log.info myXML.Error.@ErrorID.toString();
		iFailed = true;
	} 
                          
     // ErrorReason
     try
     {
                assert myXML.Error.Reason.toString() == errorReason;
	}
     catch(Throwable e)
                {
                                log.info e;                            
                                log.info errorReason;
                                log.info myXML.Error.Reason.toString();
                                iFailed = true;
                }
                
     // ErrorLink
     try
     {
                assert myXML.Error.ErrorLink.toString() == errorLink;
     }
     catch(Throwable e)
                {
                                log.info e;                            
                                log.info errorLink;
                                log.info myXML.Error.ErrorLink.toString();
                                iFailed = true;
                }
	// OriginalRequest
     try {
		assert myXML.Error.OriginalRequest.toString().replace("%3A", ":") == orgRequest;
     }
     catch(Throwable e) {
		log.info e;                            
		log.info orgRequest;
		log.info myXML.Error.OriginalRequest.toString().replace("%3A", ":");
		iFailed = true;
	}
} 


assert iFailed == false;

log.info 'Woohoo!';
</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason>Request Account ID not match</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/dece/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A100100/Stream/urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3A97397C14A870FA4CE0401F0A07996491</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/dece/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_01500 - StreamDelete - FUNC - LLASP - AccountIdUnmatched -vs- Assertion accountId MisMatch</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>97397C14A870FA4CE0401F0A07996491</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>97397C14A85FFA4CE0401F0A07996491</con:value></con:property><con:property><con:name>restSName</con:name><con:value>DELETE - StreamDelete</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>96D720451F844F56E0401F0A079921A9</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>96D720451F824F56E0401F0A079921A9</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>llpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>eStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorRespType</con:name><con:value>ACCOUNT_NOT_MATCH</con:value></con:property><con:property><con:name>eNickPresent</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpnodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>bcMatchStreamHandleExact</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77785</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamView Response Validator" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ee35596d-5ab1-4961-ad41-733155207abb"><con:settings/><con:testStep type="groovy" name="Extract Calling Test Case Properties old" disabled="true" id="fcda9061-7255-461d-b0d1-c806c928cb8c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue( "QC_ResultExportLevel", "off" )

tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("nodeuserid",callTC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("loopuntil",callTC.getPropertyValue("loopuntil"));
tC.setPropertyValue("llpnodeid",callTC.getPropertyValue("llpnodeid"));
tC.setPropertyValue("dlpnodeid",callTC.getPropertyValue("dlpnodeid"));
tC.setPropertyValue("dlpnodeuserid",callTC.getPropertyValue("dlpnodeuserid"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamCreator",callTC.getPropertyValue("streamCreator"));
tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("eNickPresent",callTC.getPropertyValue("eNickPresent"));
tC.setPropertyValue("eStatus",callTC.getPropertyValue("eStatus"));
tC.setPropertyValue("eGenericFlag",callTC.getPropertyValue("eGenericFlag"));
tC.setPropertyValue("eDECEDeleteFlag",callTC.getPropertyValue("eDECEDeleteFlag"));
tC.setPropertyValue("eDeletedByPresent",callTC.getPropertyValue("eDeletedByPresent"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body old" disabled="true" id="119ebcce-52a3-4e02-99a1-f82bee5f7d6c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def tStep  = callTC.getTestStepByName('GET StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

tC.setPropertyValue("XMLbody", expXML);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body old" disabled="true" id="739af166-f513-41f7-8c6d-df43e9e83965"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cBy   = "";
String dBy   = "";
String eUser = "";
String eStatusDesc = "";

def urnrt     = tP.getPropertyValue("urnRightsToken");
def urnnode   = tP.getPropertyValue("urnNode");
def urnuser   = tP.getPropertyValue("urnUser");
def urnstream = tP.getPropertyValue("urnstream");
def genericRT = tP.getPropertyValue("urnGenericRightsToken");

def streamCreator = tC.getPropertyValue("streamCreator");

switch (tC.getPropertyValue("nodetype")) {
	case "llp":
	case "llpcs":
	case "Portal":
		switch (streamCreator) {
			case "dlp":
				cBy = urnnode + tC.getPropertyValue("dlpnodeid");
			break;
			case "llpcs":
			case "llp":
			default:
				cBy = urnnode + tC.getPropertyValue("llpnodeid");
				dby = urnnode + tC.getPropertyValue("llpnodeid");
			break;
	}
	break;
	case "DLPOrg1Full1":
	case "DLPOrg1Standard1":
	case "DLPOrg1Basic1":
	case "dlp":
	case "dlpcs":
	case "PORTOrg1Full1":
	case "PORTOrg1Standard1":
	case "PORTOrg1Basic1":
		eUser = urnuser + tC.getPropertyValue("nodeuserid");
		dby = urnnode + tC.getPropertyValue("dlpnodeid");
		
		switch (streamCreator) {
			case "llp":
				cBy = urnnode + tC.getPropertyValue("llpnodeid");
			break;
			case "dlp":
			default:
				cBy = urnnode + tC.getPropertyValue("dlpnodeid");
				dby = urnnode + tC.getPropertyValue("dlpnodeid");
			break;
		}
	break;
}

def XMLbody = tC.getPropertyValue("XMLbody");

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def eStatus         = tC.getPropertyValue("eStatus");
def eNickPresent    = tC.getPropertyValue("eNickPresent");
def eGenericFlag    = tC.getPropertyValue("eGenericFlag");
def eDECEDeleteFlag = tC.getPropertyValue("eDECEDeleteFlag");
def eDeletedByPresent = tC.getPropertyValue("eDeletedByPresent");
def eRightsToken    = tC.getPropertyValue("rightstokenid");
def eNickName       = tC.getPropertyValue("nickname");
def ert             = urnrt + eRightsToken;
def eStreamHandle   = urnstream + tC.getPropertyValue("streamhandle");

switch (eStatus) {
	case "deleted":
		eStatusDesc = "Deleted";
		if (eDECEDeleteFlag != "true") {
			eDECEDeleteFlag = "false";
		} else {
			dby = tP.getPropertyValue("deceorgid");
		}
	break;
	case "active":
	default:
		eStatus = "active";
		eStatusDesc = "Active";
	break;
	
}

if (eNickPresent == null || eNickPresent != "true") {
	 eNickPresent = "false";
} 
if (eGenericFlag == null || eGenericFlag != "true") {
	 eGenericFlag = "false";
} 
if (eDeletedByPresent == null || eDeletedByPresent != "false") {
	 eDeletedByPresent = "true";
} 
if (eNickPresent == "true") {
	//  We need to escape special characters that may exist 
	//  in the nickname string for the string compare to 
	//  work.
	//eNickName = eNickName.replaceAll('&','2'); 
}


if (XMLbody.length() > 0) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Assert element counts
	assert myXML.ResourceStatus.size() == 1;
	assert myXML.ResourceStatus.Current.size() == 1;
	assert myXML.ResourceStatus.Current.Value.size() == 1;
	assert myXML.ResourceStatus.Current.Description.size() == 1;
	assert myXML.RightsTokenID.size() == 1;
	assert myXML.ExpirationDateTime.size() == 1;

	// Status and StreamHandle
	this.log.info "eStatus is " + eStatus + " and value is " + myXML.ResourceStatus.Current.Value.toString();
	assert myXML.ResourceStatus.Current.Value.toString() == eStatus;
	assert myXML.@StreamHandleID.toString() == eStreamHandle;

	//<CreatedBy>
	this.log.info "CreatedBy is " + myXML.ResourceStatus.Current.@CreatedBy.toString();
	this.log.info "cBy is $cBy";
	assert myXML.ResourceStatus.Current.@CreatedBy.toString() == cBy;

	// Additonal check is the stream is deleted
	if (eStatus == "deleted"&& eDeletedByPresent == "true") {
		this.log.info "DeletedBy is " + myXML.ResourceStatus.Current.@DeletedBy.toString();
		this.log.info "dby is $dby";
		assert myXML.ResourceStatus.Current.@DeletedBy.toString() == dby;
		assert myXML.ResourceStatus.Current.@DeletionDate.toString().length() > 0;
	}

	//<CreatedDate>
	assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

	//<Description>
	assert myXML.ResourceStatus.Current.Description.toString() == eStatusDesc;

	//<RequestingUserID>
	if (tC.getPropertyValue("nodetype") != "llp" && tC.getPropertyValue("nodetype") != "llpcs") {
		assert myXML.RequestingUserID.size() == 1;
		assert myXML.RequestingUserID.toString() == eUser;
	} else {
		assert myXML.RequestingUserID.size() == 0;
	}

	//<RightsTokenID>
	if (eGenericFlag == "false") {
		assert myXML.RightsTokenID.toString() == ert;
	} else {
		assert myXML.RightsTokenID.toString() == genericRT;
	}

	//<ExpirationDateTime>
	assert myXML.ExpirationDateTime.toString().length() > 0;

	switch (eNickPresent) {
		case "true":
			assert myXML.StreamClientNickname.size() == 1;
			assert myXML.StreamClientNickname.toString() == eNickName;
		break;
		case "false":
		default:
			assert myXML.StreamClientNickname.size() == 0;
		break;
	}
} else {
	return false;
}

tP.setPropertyValue( "QC_ResultExportLevel", "on" )
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case properties" id="a0074463-5d8e-4e6c-9e6b-47e0d249fca3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("loopuntil",null);
tC.setPropertyValue("llpnodeid",null);
tC.setPropertyValue("dlpnodeid",null);
tC.setPropertyValue("dlpnodeuserid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("eNickPresent",null);
tC.setPropertyValue("estatus", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);

tC.setPropertyValue("createNodeId",null);
tC.setPropertyValue("deleteNodeId",null);
tC.setPropertyValue("streamstatus",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="e616979f-0426-48c1-ac49-887b74afb3fd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue( "QC_ResultExportLevel", "on" )

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("nodeuserid",callTC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("nodeaccountid",callTC.getPropertyValue("nodeaccountid"));
//tC.setPropertyValue("createNodeId",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("createNodeId",callTC.getPropertyValue("streamcreatenodeid"));
tC.setPropertyValue("deleteNodeId",callTC.getPropertyValue("streamdeletenodeid"));
tC.setPropertyValue("loopuntil",callTC.getPropertyValue("loopuntil"));
tC.setPropertyValue("llpnodeid",callTC.getPropertyValue("llpnodeid"));
tC.setPropertyValue("dlpnodeid",callTC.getPropertyValue("dlpnodeid"));
tC.setPropertyValue("dlpnodeuserid",callTC.getPropertyValue("dlpnodeuserid"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("streamstatus",callTC.getPropertyValue("streamstatus"));
tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("eNickPresent",callTC.getPropertyValue("eNickPresent"));
tC.setPropertyValue("eStatus",callTC.getPropertyValue("eStatus"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="ec280f66-78c7-4a62-a363-33413717d5f8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC     = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def tStep         = callTC.getTestStepByName('GET - StreamView');


/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

def expXML = tStep.httpRequest.response.getResponseContent();

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="8abf00cc-3ffb-4f61-8777-23165b7533d2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");
def sh        = tC.getPropertyValue("streamhandle");
def nodetype  = tC.getPropertyValue("nodetype");
def expectErrType = tC.getPropertyValue("expectErrType");
def streamstatus  = tC.getPropertyValue("streamstatus");
def enickname     = tC.getPropertyValue("nickname");
def urnrt   = tP.getPropertyValue("urnRightsToken");
def urnuser = tP.getPropertyValue("urnUser");
def urnnode = tP.getPropertyValue("urnNode");
def XMLbody = tC.getPropertyValue("XMLbody");

String expectHTTPstatus = "HTTP/1.1 200 OK";
String expectHTTPconnection = "close";
String expectHTTPcontenttype = "application/xml";

boolean errResponse = false;
boolean requestUserReturned = true;

if (streamstatus == null) {
	streamstatus = "active";
}

switch (streamstatus) {
	case "deleted":
		streamstatusdesc = "Deleted";
	break;
	default:
		streamstatusdesc = "Active";
	break;
}

if (nodetype == "llp") {
	requestUserReturned = false;
} 

this.log.info "expectErrType is $expectErrType";

switch (expectErrType) {
	case "SUCCESS":
	case "OK":
		expectHTTPstatus = "HTTP/1.1 200 Forbidden";
	break;
	case "ACCOUNTID_MISMATCH":
		errResponse = true;
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "Request Account ID not match";
		errorLink   = "http://error.decellc.org/en/AccountIdUnmatched";
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	break;
	case "STREAM_NOT_FOUND":
		errResponse = true;
		errorID     = "urn:dece:errorid:org:dece:StreamNotFound";
		errorReason = "Stream handle not found";
		errorLink   = "http://error.decellc.org/en/StreamNotFound";
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
assert tC.getPropertyValue("connection") == expectHTTPconnection;

//Content-Length
//assert tC.getPropertyValue("contentLength").toInteger() > 0;
	
//No Content-Location
assert tC.getPropertyValue("contentLocation") == null;

//Content-Type
assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;

if (XMLbody.length() > 0) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (!errResponse) {
		// Verify response sizes...
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;
		if (requestUserReturned) {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		if (enickname.length()) {
			assert myXML.StreamClientNickname.size() == 1;
		} else {
			assert myXML.StreamClientNickname.size() == 0;
		}
		
		// CreatedBy
		def rCreatedBy = myXML.ResourceStatus.Current.@CreatedBy.toString();
		def eCreatedBy = urnnode + tC.getPropertyValue("createNodeId");
		this.log.info "rCreatedBy [$rCreatedBy] - eCreatedBy [$eCreatedBy]";
		assert eCreatedBy == rCreatedBy;

		if (streamstatus == "deleted") {
			// DeletedBy
			def rDeleteBy = myXML.ResourceStatus.Current.@DeletedBy.toString();
			def eDeletedBy = urnnode + tC.getPropertyValue("deleteNodeId").toString().replaceAll("^0*","");
			this.log.info "rDeleteBy [$rDeleteBy] - eDeletedBy [$eDeletedBy]";
			assert eDeletedBy == rDeleteBy;
		
			// DeletionDate
			def rDeleteDate = myXML.ResourceStatus.Current.@DeletionDate.toString();
			def eDeletedDate = "";
			this.log.info "rDeleteDate [$rDeleteDate] - eDeletedDate [$eDeletedDate]";
			assert rDeleteDate.length() > 0;
		}

		// Value
		def rValue = myXML.ResourceStatus.Current.Value.toString();
		this.log.info "rValue [$rValue] - streamstatus [$streamstatus]";
		assert rValue == streamstatus;

		// Value Description
		def rDesc = myXML.ResourceStatus.Current.Description.toString();
		this.log.info "rDesc [$rDesc] - streamstatusdesc [$streamstatusdesc]";
		assert rDesc == streamstatusdesc;

		//  RequestingUserID
		if (requestUserReturned) {
			def rUserid = myXML.RequestingUserID.toString();
			def eUserid = urnuser + tC.getPropertyValue("nodeuserid");
			this.log.info "rUserid [$rUserid] - eUserid [$eUserid]";
			assert rUserid == eUserid;
		}

		//  RightsTokenID
		def rRt = myXML.RightsTokenID.toString();
		def eRt = urnrt + tC.getPropertyValue("rightstokenid");
		this.log.info "rRt [$rRt] - eRt [$eRt]";
		assert rRt == eRt;

		//  ExpirationDateTime
		def rEtime = myXML.ExpirationDateTime.toString();
		assert rEtime.length() > 0;

		//  Nickname
		if (enickname.length()) {
			def rNic = myXML.StreamClientNickname.toString();
			this.log.info "rNic[$rNic] - enickname[$enickname]";
			assert rNic == enickname;
		} 
	} else {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	}
} else {
	return false;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>dlpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpnodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>eDECEDeleteFlag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>eGenericFlag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>eNickPresent</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>eStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>loopuntil</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value/></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>100600</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>93B56C6837A9E6CFE0401F0A07996329</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>streamCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value>93B4192C20B52CE6E0401F0A07995B71</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>StreamView for LLP</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:StreamNotFound">
      <Reason>Stream handle not found</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/dece/Account/urn:dece:accountid:org:dece:910600/Stream/urn:dece:streamhandleid:org:dece:93B4192C20B52CE6E0401F0A07995B71</OriginalRequest>
      <ErrorLink>http://error.decellc.org/en/StreamNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>eDeletedByPresent</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>910600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>642</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>createNodeId</con:name><con:value>910600</con:value></con:property><con:property><con:name>streamstatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deleteNodeId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77786</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamView Response Validator for Errors" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3c99cef8-1035-4b0c-800e-a11da5028ba1"><con:settings/><con:testStep type="groovy" name="Establish Test Case properties" id="60098235-7f5f-4baa-bb34-f7fb0b9562b4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="2e6a24ed-0e95-4c7f-bf03-e9ca183dc3f2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue( "QC_ResultExportLevel", "on" )

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("nodeuserid",callTC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("nodeaccountid",callTC.getPropertyValue("nodeaccountid"));
tC.setPropertyValue("loopuntil",callTC.getPropertyValue("loopuntil"));
tC.setPropertyValue("llpnodeid",callTC.getPropertyValue("llpnodeid"));
tC.setPropertyValue("dlpnodeid",callTC.getPropertyValue("dlpnodeid"));
tC.setPropertyValue("dlpnodeuserid",callTC.getPropertyValue("dlpnodeuserid"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("eNickPresent",callTC.getPropertyValue("eNickPresent"));
tC.setPropertyValue("eStatus",callTC.getPropertyValue("eStatus"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="c0f8483a-361f-4ed5-838c-8f176e7a03ab"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC     = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def tStep         = callTC.getTestStepByName('GET StreamView');


/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

def expXML = tStep.httpRequest.response.getResponseContent();

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="cb53a0db-b2e8-4f03-99b8-446bba12a09b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");
def sh        = tC.getPropertyValue("streamhandle");
def expectErrType = tC.getPropertyValue("expectErrType");

boolean bodyXML = true;
boolean doContentTypeHeader = true;
String errorID = "";
String errorReason = "";
String errorLink = "";
String orgRequest  = url + "/dece/Account/" + urnacct + acct + "/Stream/" + urnstream + sh;
String expectHTTPstatus = "";
String expectHTTPconnection = "close";
String expectHTTPcontenttype = "application/xml";

def urnrt   = tP.getPropertyValue("urnRightsToken");
def XMLbody = tC.getPropertyValue("XMLbody");

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "ACCOUNT_NOT_ACTIVE":
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "Account is not active";
		errorLink   = "http://error.decellc.org/en/AccountNotActive";
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	break;
	case "ACCOUNTID_MISMATCH":
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "Request Account ID not match";
		errorLink   = "http://error.decellc.org/en/AccountIdUnmatched";
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	break;
	case "API_NOT_AUTHORIZED":
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "http://error.decellc.org/en/Security:RoleInvalid";
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	break;
	case "METHOD_NOT_ALLOWED":
		bodyXML = false;
		doContentTypeHeader = false;
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	break;
	case "NODE_NOT_ACTIVE":
		errorID     = "urn:dece:errorid:org:dece:NodeNotActive";
		errorReason = "Node is not active";
		errorLink   = "http://error.decellc.org/en/NodeNotActive";
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	break;
	case "STREAM_NOT_FOUND":
		errorID     = "urn:dece:errorid:org:dece:StreamNotFound";
		errorReason = "Stream handle not found";
		errorLink   = "http://error.decellc.org/en/StreamNotFound";
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
	break;
	case "STREAM_NOT_ACTIVE":
		errorID     = "urn:dece:errorid:org:dece:StreamNotActive";
		errorReason = "Stream Not Active";
		errorLink   = "http://error.decellc.org/en/StreamNotActive";
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	break;
	case "STREAM_OWNER_MISMATCH":
		errorID     = "urn:dece:errorid:org:dece:StreamOwnerMismatch";
		errorReason = "Stream Owner Mismatch";
		errorLink   = "http://error.decellc.org/en/StreamOwnerMismatch";
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	break;
	case "USER_NOT_ACTIVE":
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "http://error.decellc.org/en/UserNotActive";
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
assert tC.getPropertyValue("connection") == expectHTTPconnection;

//Content-Length
//assert tC.getPropertyValue("contentLength").toInteger() > 0;
	
//No Content-Location
assert tC.getPropertyValue("contentLocation") == null;

//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

if (bodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>254</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>dlpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpnodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>eNickPresent</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>eStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">API_NOT_AUTHORIZED</con:value></con:property><con:property><con:name>llpnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>loopuntil</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>100119</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>100219</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3</con:value></con:property><con:property><con:name>sName</con:name><con:value>Authentication</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>3</con:value></con:property><con:property><con:name>synced</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>tName</con:name><con:value>testing of cert Copy of TC_DECE_00118 - StreamView - PERM - SecurityRoleInvalid - Invocation with Device</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<response>
	<dece_parameter name=dece_error_code>403</dece_parameter>
	<dece_parameter name=dece_error_text>Forbidden</dece_parameter>
	<dece_parameter name=dece_problem>Forbidden</dece_parameter>
</response>
]]></con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77787</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA row" searchProperties="true" id="a62f916d-9b3d-4a90-9070-f1f3e0e18f07"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ce5955e3-da52-4f5d-8ba3-7700384ffed8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="ddfb0bcf-232f-4fca-8398-555a197ce7ee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));

if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA row" id="a732bb20-556e-4e1c-8f26-8e5660c97e7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String sh = tC.getPropertyValue("streamhandle");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select 
to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.USER_OID)) USER_OID,
TRANSACTION_ID,
STATUS,
STREAM_CLIENT_NICKNAME,
EXPIRATION_DATE,
CLOSED_DATE,
CLOSED_BY_ORG_ID,
CREATED_DATE,
to_char(rawtohex(a.CREATED_BY)) CREATED_BY,
UPDATED_DATE,
to_char(rawtohex(a.UPDATED_BY)) UPDATED_BY 
from STREAM_DATA a where STREAM_HANDLE_OID =hextoraw('$sh')""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify DB Row Data" id="928cdc69-dd04-491d-ad87-51816ebb76ce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode   = tP.getPropertyValue("urnNode");
def acct      = tC.getPropertyValue("nodeaccountid");

String XMLbody = tC.getPropertyValue("dbxmlresponse");
String expectStreamHandle = tC.getPropertyValue("streamhandle");
String expectAccountOID   = tC.getPropertyValue("accountoid");
String expectRightsToken  = tC.getPropertyValue("rightstokenid");
String expectUserOID      = tC.getPropertyValue("expectDBCreateUser");
String expectStatus       = tC.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = tC.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType = tC.getPropertyValue("expectDBCreatedByNodeType");

log.info "streamCreateNodeType[$streamCreateNodeType]";
log.info "expectStatus[$expectStatus]";
String strcrtnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBCreatedBy")
def a = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem").toString());

String nodeoidcreate = a.nodeGetNodeId(strcrtnodeid);
log.info " Stream Created by node ....  " + nodeoidcreate

tC.setPropertyValue("expectDBCreatedBy",nodeoidcreate);

String strdelnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBDeletedBy")
b = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem").toString());
String nodeoiddelete = b.nodeGetNodeId(strdelnodeid,);
tC.setPropertyValue("expectDBDeletedBy",nodeoiddelete);

expectDBCreatedBy    = tC.getPropertyValue("expectDBCreatedBy");
expectDBDeletedBy = tC.getPropertyValue("expectDBDeletedBy");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle.toUpperCase() == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID] - streamCreateNodeType[$streamCreateNodeType]";
	if (streamCreateNodeType == "llpcs" || streamCreateNodeType == "dlpcs") {
		assert dbUserOid == "null";
	} else {
		assert dbUserOid == expectUserOID;
	}

	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "null";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedBy == "null";
	} else {
		assert dbClosedBy.length() > 0;
	}
} else {
	assert 1 == 2;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>useroid</con:name><con:value>0FBF81B4959708CCE05305991F0ABCBF</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_31501 - StreamDelete - LLP - StreamNotFound - Streamhandle already in deleted status - 404 Not Found</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>0FBF819D20A67741E05307991F0A0F26</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P2</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>0FBF816D76CA07FEE05305991F0A59DB</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectSQLwithTransactionLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithTransaction</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNicknameLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNickname</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLDefaultLLP</con:name><con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>*</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>${#TestCase#expectDBStatus}</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results> ]]></con:value></con:property><con:property><con:name>expectSQLDefault</con:name><con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>975DA31F89B0B21EE0401F0A059979D9</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>975DA31F899FB21EE0401F0A059979D9</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>0900</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>2010-12-15 11:29:52.337</EXPIRATION_DATE>             <CLOSED_DATE>2010-12-14 11:29:53.657</CLOSED_DATE>             <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:0910</CLOSED_BY_ORG_ID>             <CREATED_DATE>2010-12-14 11:29:52.335</CREATED_DATE>             <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results>]]></con:value></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectJDBCSQL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBDeleteUser</con:name><con:value>0FBF81B4959708CCE05305991F0ABCBF</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C0CEF8E08CD7C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0FBF81B4959708CCE05305991F0ABCBF</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>C0CEF8E08CD7C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HANDLE_OID>0FBF819D20A67741E05307991F0A0F26</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>0FBF816D76CA07FEE05305991F0A59DB</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0FBF23DCCD0806E8E05305991F0A35F5</ACCOUNT_OID>
      <USER_OID>0FBF81B4959708CCE05305991F0ABCBF</USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>deleted</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2015-02-23 16:06:36.179</EXPIRATION_DATE>
      <CLOSED_DATE>2015-02-23 10:06:47.595</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:LLASP</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2015-02-23 10:06:36.179</CREATED_DATE>
      <CREATED_BY>C0CEF8E08CD7C7D6E0401F0A0599120B</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>accountoid</con:name><con:value>0FBF23DCCD0806E8E05305991F0A35F5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77788</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA_HISTORY row" searchProperties="true" id="e71970b4-c278-4d51-be9d-32fee730c32b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="271e0644-f5e6-47ec-a2e4-a9ecac9564ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="cad6f4be-703c-4b85-bace-c9f3bc10aa73"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));


if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row" id="0776821c-50a3-48e3-8f92-1cf17327ae60"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String sh = tC.getPropertyValue("streamhandle");
String status = tC.getPropertyValue("expectDBStatus");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select 
to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
TRANSACTION_ID,
STATUS,
STREAM_CLIENT_NICKNAME,
EXPIRATION_DATE,
CLOSED_DATE,
CLOSED_BY_ORG_ID,
CREATED_DATE,
to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw('$sh') 
 and STATUS = '$status'""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;


try {
	def myXML = new XmlSlurper().parseText(results);
	log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
	assert myXML.ResultSet.Row.size() >= 1;
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}

</script></con:config></con:testStep><con:testStep type="jdbc" name="Extract the STREAM_DATA_HISTORY row" disabled="true" id="afc2893b-5804-4f11-8a39-f850f424ff22"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>select * from STREAM_DATA_HISTORY where STREAM_HANDLE_OID = :sh and STATUS = :status
</con:query><con:properties><con:property><con:name>sh</con:name><con:value>${#TestCase#streamhandle}</con:value></con:property><con:property><con:name>status</con:name><con:value>${#TestCase#expectDBStatus}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" disabled="true" id="fb15afe7-7271-4eab-8ada-6045c383d069"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false"><con:name>a</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract the STREAM_DATA_HISTORY row</con:sourceStep><con:targetType>dbxmlresponse</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Verify DB Row Data" id="1d44a31b-678a-4a85-83be-903f20a28e9d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode   = tP.getPropertyValue("urnNode");
def acct      = tC.getPropertyValue("nodeaccountid");

String XMLbody = tC.getPropertyValue("dbxmlresponse");
String expectStreamHandle = tC.getPropertyValue("streamhandle");
String expectAccountOID   = tC.getPropertyValue("accountoid");
String expectRightsToken  = tC.getPropertyValue("rightstokenid");
String expectUserOID      = tC.getPropertyValue("expectDBCreateUser");
String expectStatus       = tC.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = tC.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy   = urnnode + tC.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType = tC.getPropertyValue("expectDBCreatedByNodeType");
String strcrtnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBCreatedBy")
def a = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem").toString());
String nodeoidcreate = a.nodeGetNodeId(strcrtnodeid);
tC.setPropertyValue("expectDBCreatedBy",nodeoidcreate);

String strdelnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBDeletedBy")
b = new dbUtils.dbNode(log,tP.getPropertyValue("targetSystem").toString());
String nodeoiddelete = b.nodeGetNodeId(strdelnodeid);
tC.setPropertyValue("expectDBDeletedBy",nodeoiddelete);

expectDBCreatedBy    = tC.getPropertyValue("expectDBCreatedBy");
expectDBDeletedBy = tC.getPropertyValue("expectDBDeletedBy");
if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HISTORY_OID.size() == 1;
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY_USER_OID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.CREATED_BY_USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY_NODE_OID.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle.toUpperCase() == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
	if (streamCreateNodeType == "llpcs" || streamCreateNodeType == "dlpcs") {
		assert dbUserOid == "null";
	} else {
		assert dbUserOid == expectUserOID;
	}

	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectStatus[$expectStatus]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "null";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedBy == "null";
	} else {
		assert dbClosedBy.length() > 0;
	}
} else {
	assert 1 == 2;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>0FBF23DCCD0806E8E05305991F0A35F5</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>0FBF816D76D807FEE05305991F0A59DB</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>0FBF819D20A67741E05307991F0A0F26</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>0FBF816D76CA07FEE05305991F0A59DB</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>0FBF23DCCD0806E8E05305991F0A35F5</ACCOUNT_OID>
      <CREATED_BY_USER_OID>0FBF81B4959708CCE05305991F0ABCBF</CREATED_BY_USER_OID>
      <TRANSACTION_ID>null</TRANSACTION_ID>
      <STATUS>deleted</STATUS>
      <STREAM_CLIENT_NICKNAME>null</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2015-02-23 16:06:36.179</EXPIRATION_DATE>
      <CLOSED_DATE>2015-02-23 10:06:47.595</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:LLASP</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2015-02-23 10:06:36.179</CREATED_DATE>
      <CREATED_BY_NODE_OID>C0CEF8E08CD7C7D6E0401F0A0599120B</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>C0CEF8E08CD7C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>llp</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value>0FBF81B4959708CCE05305991F0ABCBF</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C0CEF8E08CD7C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>expectDBDeleteUser</con:name><con:value>0FBF81B4959708CCE05305991F0ABCBF</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectJDBCSQL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectSQLDefault</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLDefaultLLP</con:name><con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>             <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_BY/>             <UPDATED_DATE/>         </Row>     </ResultSet> </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNickname</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNicknameLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>       <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithTransaction</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithTransactionLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llp</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>0FBF816D76CA07FEE05305991F0A59DB</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P2</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>0FBF819D20A67741E05307991F0A0F26</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_31501 - StreamDelete - LLP - StreamNotFound - Streamhandle already in deleted status - 404 Not Found</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0FBF81B4959708CCE05305991F0ABCBF</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77789</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node.old" searchProperties="true" id="57a5d4ce-bb65-481c-91e4-f6e13f5e8198"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="61ed2fe6-f002-4a5b-ac12-6501be841bf6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="f6875818-a21b-48d5-a9e3-efc9ad9c4479"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" id="b25801b3-2b55-4610-9dd0-0a0cce5b8794"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="53b9a747-e1b8-42da-86c7-4e2193f67709"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent" id="9a7e180b-ebcf-47f0-955d-97f451b527c3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary" id="14a240e6-98c0-4032-bb89-5d5d27471ae2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" id="134753d8-c39d-4d0c-97c6-c6f8c4e95996"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" id="2fa3873e-4d7e-4f96-9541-e3f5b3d97a45"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" id="8166e2d0-26de-408d-bd38-7b9b204ea69c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" id="b12958c1-edf4-4e7f-a8c7-58fe7b2904ee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" id="ecfff94e-6bdc-4f46-9b2a-22b78fda9b29"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" id="72ba47a6-baca-4ed8-a33e-8f91575042be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>0910</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_14770 - StreamDelete - LLP - Policy - prohibitexplicitlyrics - US - Can delete stream when policy present</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:EnableManageUserConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node" searchProperties="true" id="c2ec18fe-e58f-4036-a47d-a916b80ceb06"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="49f1ad32-1363-4814-b8a2-f8560bea1ee6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="6172680e-9dc8-4125-abaa-a17be6c0cf8f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent" id="62bb706c-f89f-4ea5-8974-b35c4ab288c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary" id="37afad35-60f1-403f-926f-f9f8626b1ae1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" id="8c93f4ac-a145-4afb-9832-851d7201c3c9" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" id="9786919f-19c9-42ed-b59e-eefd3efb197c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent" id="edc707f5-fb53-4bdf-b5e7-21ef4b45abe1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary" id="842df68c-ad25-48e5-9e7a-dde006eaf764"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass","ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true" id="cb464040-5025-4434-9c5b-de770e40b241"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true" id="2396d5f1-802f-48e7-a43c-bf231f59cf7b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true" id="9f46e7db-7424-48a0-8741-b57ef8ea5a4c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true" id="9bfaa8ca-4d10-447e-aa67-e4c7ea08e23c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" id="3950b066-9b8b-45e0-a2cf-bd1472d549da"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" id="9c65bc1a-0c06-49f8-b641-7b293f916c91"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass","UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FF39F87A6F08F75FE0401F0A05994874</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FF3A428543E0D4F6E0401F0A059936A4</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_20019 - StreamDelete - LLP - Policy - Verification ParentalControl:RatingPolicy - CH - FSK - FSK:16 rating - Full User</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P2</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtc9o4EP7eX+FxP3aM/AbYnsCMA6HnHmk4TMglXzqKvAYFWyaWDKS//mQTEyAkl7YzzDBar3affdGze8ZxmpiezznkgmZMCfod9YcbuU4U6ViLTNfVbAubmgMtSzPxfXzfbhESt7GqBJwXEDAuMBMd1dQNW9PbmulMdNuzDM/WG2bbvlOVKeRcmpYqDV1VNmnCuFe57ahFzrwMc8o9hlPgniBe6F8OPanp4RqT2j3boqwc5t25EEsPIdKIgECSkAbJUnSGDnTOIu6FdMawKHJ49hnxjvp8d71eN9ZWI8tnyNR1HekukjoRp7PPavdTfRmigMXZ9tzDLGOU4IT+xCWoSxDzLFL8ZJblVMzTN0wbyNBL0xpsiEYMm31W0YuDCt0HLR2AzDnW+BwbtbExxJADI6Bcj4OO+vljFdzeneSY8TjLU350/jVIwFaQZEuINF5HVqP7uMUT6eqeAfECRpKC0xV8L9tkiQlwZZRDTDdDymXzRVypyq9suPzRusuA/EpZztA+VgkdnchOn86Ai9+p2X69tlamOCmg2/Rb51+jIbsNZ+e0P23H/3y9aSLETXPRqSDsK29B7cr9fD5u1l1vPV9aLIybm+nVeOyg6eSp9VdB7y4W1+lDb3mD4Hyy0t1i1hxdFffYsMj1pt8eze42TXKbjfILHwc2pV/Wk5/B9V0yvPsUtCxqsdH36HrwOHvQTWecfwPRzMeXhp+4vV4xTRbY8c1QON++js7ZVZjot/75bbi6+2Jkf7vjdWt66QaBRVD0yYmJFfZGD7fmcMETP/orcTovMe3HcCisKSEs7h+AiPpYtkfQVwayXli8Ty+lhEZaXKl6y5KjuAAm1G55q6QWr5AERCNPFnN7Hgwsd+C0/dZAdwbt5uBCt3VjoPt603Vtp23XHLRFcQSxl7GYlr5Klt32z/sASepxYBHk2ioryBy4+o7FPhZYCdhYPo6McZhkksWN9Gm1nsVkbSUbMOLcJU3AWCw3qvI9E1fsKvdjAfkhdbcPqHsMhC4plPxeNjiXHc6FzMUjXhUiMRor3GBQyAmQlyTsmbbTRJymywRKpCjNoiKBxnK+rDKD+Pbf1DDhlXR8Make3ptxHX+rUyB1Iloq8DKWc5BlhBMzyKoDeRVw8+Ssqs37RUTL9yXzKXJKtkgOP720Sdkfux7pD/1wVIPe6f7C3R+98IfxmwaGf+B8+KfOZS1f30Tv5BMdl3LnKFrRPbf1HiBHmyS+bt2Ij7jx2ChWq6JqvbauWyiX5pHkdgOFQArJzE+TbAEM7UygDw3GHeojzzv5Ib5CzFkosIBUPhSlOn5gKwqBl1tRIF/45qMr14FLmTcBG3FK1kvk8lQifne/Ih4p9aR4JP/WWR69lOuErT0/Mk65CgnKZuWpHIFPbzQFyaRZKjk7y/eNnzJwyvmhcJfkHRYhu+m+EPD2F6Uk446KCckKJoK+Wgn2B0SFUzwtwXtRemWmGkLPW8WGv7lV/Hs5DCVVp1jd6dL/V9Zo1S4E1HJ5qbB01I1ckqVzNtsbSM8Aj2aSb5tO07Yu9L49aO3PJKvl72bSYSTdV+LXkr2cHr+H7n8=</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FF39F87A6F08F75FE0401F0A05994874</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FF39F87A6F08F75FE0401F0A05994874</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC93F82EF6341003E0401F0A059965C9</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FF39F87A6F08F75FE0401F0A05994874</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FF3A428543E0D4F6E0401F0A059936A4</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish LockerViewAll" searchProperties="true" id="4ec6ec72-3dc6-4076-beac-4eb4e6935f60"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a0eec62d-dbe5-4dc0-b69d-ae984e34531a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass", "urn:dece:type:policy:LockerViewAllConsent");
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="32891d17-5752-4139-b5d7-b182f3e50137"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyResource") == null || tC.getPropertyValue("policyResource") == "") {
	tC.setPropertyValue("policyResource","urn:dece:rightslockerid:org:dece:0900");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}
if (tC.getPropertyValue("policyRequestEntity") == null || tC.getPropertyValue("policyRequestEntity") == "") {
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for LockerViewAll" id="d062b352-fce4-4a40-9a06-6bfdfa8fe467"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate LockerViewAll if necessary" disabled="true" id="ca9ad16f-2920-44f3-b134-640b6182b299"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def exists = tC.getPropertyValue("policyExists");

if (exists != "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtc9o4EP7eX+FxP3aM/AbYnsCMA6HnHmk4TMglXzqKvAYFWyaWDKS//mQTEyAkl7YzzDBar3affdGze8ZxmpiezznkgmZMCfod9YcbuU4U6ViLTNfVbAubmgMtSzPxfXzfbhESt7GqBJwXEDAuMBMd1dQNW9PbmulMdNuzDM/WG2bbvlOVKeRcmpYqDV1VNmnCuFe57ahFzrwMc8o9hlPgniBe6F8OPanp4RqT2j3boqwc5t25EEsPIdKIgECSkAbJUnSGDnTOIu6FdMawKHJ49hnxjvp8d71eN9ZWI8tnyNR1HekukjoRp7PPavdTfRmigMXZ9tzDLGOU4IT+xCWoSxDzLFL8ZJblVMzTN0wbyNBL0xpsiEYMm31W0YuDCt0HLR2AzDnW+BwbtbExxJADI6Bcj4OO+vljFdzeneSY8TjLU350/jVIwFaQZEuINF5HVqP7uMUT6eqeAfECRpKC0xV8L9tkiQlwZZRDTDdDymXzRVypyq9suPzRusuA/EpZztA+VgkdnchOn86Ai9+p2X69tlamOCmg2/Rb51+jIbsNZ+e0P23H/3y9aSLETXPRqSDsK29B7cr9fD5u1l1vPV9aLIybm+nVeOyg6eSp9VdB7y4W1+lDb3mD4Hyy0t1i1hxdFffYsMj1pt8eze42TXKbjfILHwc2pV/Wk5/B9V0yvPsUtCxqsdH36HrwOHvQTWecfwPRzMeXhp+4vV4xTRbY8c1QON++js7ZVZjot/75bbi6+2Jkf7vjdWt66QaBRVD0yYmJFfZGD7fmcMETP/orcTovMe3HcCisKSEs7h+AiPpYtkfQVwayXli8Ty+lhEZaXKl6y5KjuAAm1G55q6QWr5AERCNPFnN7Hgwsd+C0/dZAdwbt5uBCt3VjoPt603Vtp23XHLRFcQSxl7GYlr5Klt32z/sASepxYBHk2ioryBy4+o7FPhZYCdhYPo6McZhkksWN9Gm1nsVkbSUbMOLcJU3AWCw3qvI9E1fsKvdjAfkhdbcPqHsMhC4plPxeNjiXHc6FzMUjXhUiMRor3GBQyAmQlyTsmbbTRJymywRKpCjNoiKBxnK+rDKD+Pbf1DDhlXR8Make3ptxHX+rUyB1Iloq8DKWc5BlhBMzyKoDeRVw8+Ssqs37RUTL9yXzKXJKtkgOP720Sdkfux7pD/1wVIPe6f7C3R+98IfxmwaGf+B8+KfOZS1f30Tv5BMdl3LnKFrRPbf1HiBHmyS+bt2Ij7jx2ChWq6JqvbauWyiX5pHkdgOFQArJzE+TbAEM7UygDw3GHeojzzv5Ib5CzFkosIBUPhSlOn5gKwqBl1tRIF/45qMr14FLmTcBG3FK1kvk8lQifne/Ih4p9aR4JP/WWR69lOuErT0/Mk65CgnKZuWpHIFPbzQFyaRZKjk7y/eNnzJwyvmhcJfkHRYhu+m+EPD2F6Uk446KCckKJoK+Wgn2B0SFUzwtwXtRemWmGkLPW8WGv7lV/Hs5DCVVp1jd6dL/V9Zo1S4E1HJ5qbB01I1ckqVzNtsbSM8Aj2aSb5tO07Yu9L49aO3PJKvl72bSYSTdV+LXkr2cHr+H7n8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FF3A428543E0D4F6E0401F0A059936A4</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FF39F87A6F08F75FE0401F0A05994874</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:LockerViewAllConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FF39F87A6F08F75FE0401F0A05994874</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FF39F87A6F08F75FE0401F0A05994874</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:US:MPAA:G</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P2</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_34682 - StreamDelete - LLP - Policy - BlockUnratedContent - US - MMPA - PG-13 - unrated/unknown content blocked</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77795</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC93F82EF6341003E0401F0A059965C9</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove all Parental Control Policies" searchProperties="true" id="dc3292c9-2ad1-435b-aeb2-7a6e16f57e2d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6597342e-74a6-4378-9428-57843a712068"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="c2d24dde-861a-4d0f-8846-c759813d48b8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="3c2e39b3-99ec-4a5e-91f2-f98e4286fd04"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalConrolRating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" id="c7d6ad8f-53f4-41bb-a9df-0d8daa30e9e9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" id="d8a5fcdb-feef-45ad-9b14-c98975b94480"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlBlockUnratedContent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" id="d68e3c15-f66b-40b5-a1fc-0d1d13b9bf3b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="55500e7f-2308-4367-be1d-e9fc6d76a68b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="f7173c5f-9249-4587-badf-2f62f2dbe63f" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="removepolicies" disabled="true" id="fd942e13-1679-4189-a0b1-0d2ba089effb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));
log.info "useroid"+useroid;
a.policyDelete(302,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(304,useroid,"deleted")
</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvM4ZbxgFrsCVQaykMKQC4RJ8pIScgNKbBksmSVfP5IBhy25zMyTS+3W6dOLuvuKoTAwHZcxiDmJaG4VBpQ5qbSqJDF1IsQIcygKgTkcO33XaztmXnfQ7oqSazWryqtRKujmaOyrRbOEVQtMW7Utu6gCKo3t8hjK2DKFKmMJtCjjiPKqYupGUdUtVS8M9KJjVRyrkC8XjBclN4SYCWyhkteVLakVqypTzmeOpi2Xy/yykI/iiWbquqE9ee0+nkKIlNrVxqPUUFzb6uO8DxiCAOdxFGpX2oHOlc+cPplQxJMYtrb8r2zpmm5rQsdnZPJDye6C36LjKD02EI0owSggH0jGxwM+jfycG0yimPBp+KUThi6BVVhhFRsW/aFoh9QuBDpgGDOksikytlg9GEMMFEPusdeqKj8uy1p6dRAjysZRHLLD45/xAbqAIJqBr7KdW1tqlwOeiVTtCrDTojhIGFlARxbrDGFg22wCvhwq9xDDmKzahIkCXTHJTtund3TcRKNJJsD43yRoLzkbkCEKEqh1e8byPmRT1uwkDQPfLWegudNfi+DBqqYE9pVTQZbazfGoKLMi2tzozAfTZVT5WfGnH//FxJt/oM7Ie/Qe2u9e2SpNRrZZuXt+vu3VK4suGb4QL3zm0djtTt6G8+6IlQPKZ7Sx7N086+Gs/WJbLiKF9XWXPJlW4f62aEALPw6bw9Cwjfr8/gkl0dx3veFbfD20Xzy72BmMbitdH+ECW/X7YUxHK7Ph/fJKC+RZdct9rnQ7P++eV241c2eP/6Fs9+b7yegNMN8dZRm0mrkbkSXEv29mUkJ8dZyqOjPZfBgHypWavCV7h5OIdkd8R+RwczbMRsMqFd16o25YRun6Wi8W9LJtGze6Wy/p9q7JbFgcUWxEdEykLdlyN2XzPUEcOgyoD7G6iBLR6ZjyDWITcZRr0Z54BBFlMIhkezZXEwLGW9Fal4L5ogzv4NP1W7JScp2Id2k3dscc4sOeXDnoyT3AZEZANm5Z10wUNuMiFnO0SHhg5BcoTyERrT2WXdYxrUpRYyScBSCZamHkJwHkZ9NZGhmNbb6mijBLpb3rQfravvTr+N8uBELHJ1KBSV/qINIIZ4ZLYefIicOls0NoB+8mPpEPS8STxwRvmBz++iwTWR9ZjTTbbv9hRzrT/YO7r43+q/GXAO1/MN7+V+Mil6c3tW/iqR2nMjPkL8ie2d3WIeaX6Hi1XSHOkZGf55PFIklrz7IKWizgNVkEmm5qfcCJ6MnrQfQOVMtQtIsGYEb8yHgmP6SY8Cntc8QhFG8llx4v2Hj6wOTG0xKPfHXpOnVgUoSOw4qfkzUCsa1Jxt8udNjBUk+IH8RnGcX+Z8bOYO3ZEX6KhYcTOpEnOfzWX9QFjgQsEW07ivfBzwGcM34ozIKcceGioEYJh6//5GQ/rioI4yihvNVUUsH+jEh58vUMnE+lE5h0DGV7Kfn/xVQlaQlgENssIym+XC8c+QToZG/ObI2ejJpyqaw36k2rYhb3R01JtwpZUA7Y1U7Ep5K9OB3XeO03</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:12CC47670CBD4825E05307991F0A6043</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:12CC465ABCB1416EE05307991F0AB609</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:12CC47670CBD4825E05307991F0A6043/User/urn:dece:userid:org:dece:12CC465ABCB1416EE05307991F0AB609/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_30000 - StreamDelete - LLP - Establish Testing Stage</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77796</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC93F5910539967CE0401F0A05995C41</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>12CC465ABCB1416EE05307991F0AB609</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">12CC47670CBD4825E05307991F0A6043</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Parental Control Rating" searchProperties="true" id="89a873e0-5a69-481b-b790-b3d6519ee0f9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="75ed8139-bb15-4dd9-b3c2-c425d82a68ed"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:RatingPolicy");
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="719bb8a4-e38a-4f8e-8521-145bcdf9945d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="f323d4ff-451d-47fd-89b3-35246e785cbe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalConrolRating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy if necessary" id="63835aa0-ac30-489d-acf2-5a3042e6399a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ParentalControl:RatingPolicy" id="1c36aecc-c4d6-48e1-8561-638808901c27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass","ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>pVbvb9o8EP6+vyLKPlYhcSBAooJEoXQRtHRAWdcvU+oc4DaxIXZS1r/+tUOTAqV9u01CQr6c75774efulAdxZHsdziERhFHN77X0X9UmclCjWjfsOdhGzcLIuEeBZYR2zbXr9w3HQg1d8zlPwadcBFS0dNtCNcOSV2pThDy76VWtStNt3OnaDBIuTUuViqVrmzii3MvdtvQ0oR4LOOEeDWLgnsDepHM59KSmFxSY9PbpFmXuMGkvhVh5pokrIWCIIlzBLDZPzT2d05B7E7KggUgTePEZ8pb+cvfp6anyVK2wZGHalmWZlmtKnZCTxVe9/aW4DKFP52x77gaUUYKDiDwHCtQliCULtU60YAkRy/gd08hEljJtwAYbGNXoV918dZCj+6SlPZAJDwy+DFBhbAxzSIBi0G7Gfkv/+rkKbu9Ok4DyOUtifnD+M0hAM4jYCkKDF5EV6D5v8Ui62qeAPZ/iKOUkgyvVJqsAA9euE5iTzZBw2Xwh1/Lyaxsuf6ToMsB/UpZTcxerhG4eyU6PLICLv6nZbr22VmZBlEI7RXWfPdw894d84DZ+iM26cXc+G/186PBWDmFXeQuqLPfL+bBZy956uXSbEN8MpyeLYMAaF/Wf9u23i7R5N5j2nEd7dtsVoxRWYdf6WaPopHp2N4/P8Wi8iNDMbS4f/ZE5mvGL0LkZOoMfXzbXJ+zq5mHOHlMY3w2u4DJ+fr76PrwUzewscpcsG7gLjs5hgPprn34D7tc3vdkoi5uXsPgukL20e5uTUbzuDb/45GI2rVajx+8X36Zpd+FkndZrTLsx7AsLSpik9w+ARXFU7eH3tL6sVyA+phclIaExz1W9leIoLoAKva1uKWrxUklAJPRkMbfnftet9vt11+rUew3UdM6tmoX6VsdquG4N1d2Cg7YoDiB2GZ0T5Uux7LZ/PgaIY48DDSExMpbiJXD9A4u9QASaT8fycTDKYcoki6Oq01iH4RwnVWY9MDt24T6rNZKmrl0xMaKjpDMXkOxTd22PuseAyYqA4nfV4Fx2OBcyF+sgS0WEKllQoZDKCZAoEvbsWtMxOYlXESikZszCNILKarnKM2Py7b9tBJjn0vH5NH9478Z1+K1IgdQJiVLgKpYzkGWEIzPILgJ5E7BzdFYV5jtpSNT7kvkUCcFbJPufXttE9UfZI71hZ3JdgC51/+Dur+7kF/pLA8N/cD78V+eylm9vmh/k0zwsZekozMiO22IPkKNNEl+7aMR1UFlX0ixL89ZrKFJPpHlTcjsyJ4BTycy/p+wRqFmaMD81GEvUB55L+T6+VCzpRAQCYvlQtPz4ia1oAlxtRb584ZvPrlx7LmXeBGzEMVk3ksuTQvzhfoU9rPSk+Fr+PbEkfC3XEVs7fmScchUShC7USY3A3+80BWbSLJGczZJd48cMHHO+LyyTXGIRspvuUwHvf9EUGbf0AGOWUuH39FywOyBynOL3CrxXpTdm8iH0slVs+Ltbxe3lcCKpOg70Upf8v7JB8nbBoKvlJcfS0jdySZbO6WJnIL0AfDOTnGYdIVSrd51qOZMc13W61bMygXuRtN+I30p2cnr4Htr/AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC93F58611146C53E0401F0A05995C3B</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC93FF690A6D7185E0401F0A07994169</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC93F58611146C53E0401F0A05995C3B/User/urn:dece:userid:org:dece:FC93FF690A6D7185E0401F0A07994169/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC93FF690A6D7185E0401F0A07994169</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:NL:KIJKWIJZER:16</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_20040 - StreamDelete - LLP - Policy - Verification ParentalControl:RatingPolicy - NL - KIJKWIJZER - 16 rating - Full User</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77797</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC9440C3948B47E6E0401F0A059974AB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC93FF690A6D7185E0401F0A07994169</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC93F58611146C53E0401F0A05995C3B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - General Policy Establishment" searchProperties="true" id="df08520e-e3b3-429e-a266-8563c2b74523"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a6711df1-3873-4a3b-ba77-fe02b4ee4745"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="3a7dd9c0-88fd-46b9-97d7-d3dbb29a5334"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy" id="11cdcacd-83e3-4c53-9c60-4d1b4be24d51"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlBlockUnratedContent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="753b50f8-8de5-421a-b7a2-0413da1a0f0a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy" id="e3745a1f-c0b7-4ce1-802c-1b72222095b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbb+I6EH7vr4iyj0chCYRLooJEE2jZhbYLbE/Vl5VxBnBJHLAdSPvrjx0aCpT2tLsSEvJkPPPNxd/MOUdxVPbanAMTJKFaL2jqvydOPazXyrYh/6uGg6uWMali25iiKgC2ak6j4upaj/MUepQLREVTL1u2Y1g1o1we27ZXqXtWpeS4tQdduwPGpWmpUrJ0LYsjyr3cbVNPGfUSxAn3KIqBewJ7o/ag70lNDxWY9Nb5FmXukLXmQiw908SlEDBEES7hJDbPzQOd85B7IzKjSKQMXnyGvKm/3N1sNqVNpZSwmVm2LMu0XFPqhJzMvumts+IyhD06TbZnH9GEEowi8owUqAGIeRJq7WiWMCLm8TumbdO2lGkDMmxg26HfdPPVQY7uk5YOQDKODD5HdmFsCFNgQDFov4a9pv7tcxXc3h0zRPk0YTE/On8NEtA1RMkSQoMXkRXoPm/xRLpa54C9HsVRyskarlWbLBEGrt0ymJKsT7hsvpBrefm1jMsfKboM8FfKcm7uY5XQzRPZCcgMuPiTmu3Xa2vlDkUptHpJylyn7/+8HN6WoTbtTOggyu6qj5tNM4ewr7wFtSv3y/m4WXe99XKpzQKWLAY/zfvp0zCouavakyWcBVsMWBhMu1fV+1Xqz349mFd3Ttj9t45i57mxuB/V+ZPTHf6cQGd5U/Ubz3R1MTgj/Q1dBD+e/Zhfmd/7S799MV9P6OVlnHZYBdtW5gdXZmf86Frx4zzj/rzf+Gfl/pg8RDe3/sJNnHbl8qp8mY3sq7Ps+geLrsfr/uhhNrsJfnF703yNaT+GQ2FBCaN08ghYFEfVHr1A68p6IfExvSgJCY1pruotFUdxAVToLXVLUYuXSgIioSeLuT13/dpFUOt0626lVm00go7lWHbXaltV161c1OsFB21RHEH0Ezolypdi2W3/fAwQxx4HGgIz1kmK58D1DywGSCCtR4fycSSUwziRLA7CfkbRlM0mlbkdMoxdTOdOZj/r2nUibugNa08FsEPqdg6oewiYLAkoflcNzmWHcyFzsULrVER2aY1KFFI5AZgiYa/sNKomJ/EyAoXUjJMwjaC0nC/zzJh8+182EOa5dNgZ5w/v3biOvxUpkDohUQpcxXIBsozwZgbVvGoRyJuAqydnVWG+nYZEvS+ZT8EI3iI5/PTaJqo/dj0S9Nuj2wL0TvcLd3/7o9/2Hxro/4Xz/t86l7V8e9P8IJ/mcSl3jsI12XNb7AFytEniaxWNuEKlVSldr9O89eqK1Jk0b0put80R4FQy89M4WQA1dybMTw3GHeojzzv5Ib5UzOlIIAGxfChafvzEVjQCrrainnzh2WdXrgOXMm8CMnFK5kdyeVKIP9yvsIeVnhTfyr9NwsLXcp2wtedHxilXIUHoTJ3UCHx6pylwIs0SydkJ2zd+ysAp54fCXZJ3WITspkkq4P0vmiLjpo4wTlIqeoGeC/YHRI5TPC3Be1V6YyYfQi9bRcbf3SruB/2RpOoY6Ttd8v/KBsnbBYOulpccS1PP5JIsndPZ3kB6AXhiJnXK7bbbuXBfZ1LddasVq7JL4EEkrTfit5K9nB6/h9Z/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6BD6EE2AA9EB9DE0401F0A07995303/User/urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC6BD6EE2AB1EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_34684 - StreamDelete - LLP - Policy - BlockUnratedContent - US - MMPA - NC-17 - unrated/unknown content blocked</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77798</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC93F82F4946C992E0401F0A059965CD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true" id="800043e9-a166-4ccc-a9d1-cedbd6471511"><con:settings/><con:testStep type="groovy" name="Set a Property" id="6bcb553f-7a7c-4809-8ab0-7cac3b5c1982"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			/*nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "ErrorResponse";			
			if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			propertyValue = nodeRole;*/		
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="8e5fa3f5-a2b5-4186-b666-75cf47b34dbc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
tP.setPropertyValue("projectPath",projectDir);

log.info ""+projectDir</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>FUNC_USER_CONSENT_POLICIES</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>NumberOfPolicyRequestingEntities</con:value></con:property><con:property><con:name>PropertyValue</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true" id="5c442934-6ae8-4e29-9b8b-b36bf27d9aa8"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="1b6963e4-8128-4422-a107-f186e14f44ca"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
//def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Dynamic LASP Test Cases_P2"; 

def oldString = """tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());""";
def newString = """tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "Establish Test Case Properties") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					stepScript = testStepList[j].getScript();
					stepScript = stepScript.replace(oldString, newString);
					targetTestStep.setScript(stepScript);		

					/*
					*  Delete a step
					*/
					//targetTestCase.removeTestStep(targetTestStep);

					/*
					*  Replaces step's script completely
					*/
					//stepScript = """""";
					//targetTestStep.setScript(stepScript);		
				}

			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename a Step" searchProperties="true" disabled="true" id="6a949987-24c7-4e08-a82d-bf51b64141c7"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="e6307e05-81b1-4779-b22d-cbd40d152d92"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Linked LASP Customer Service Test Cases"; 
def stepName  = "Update CID's rating and invoke StreamCreate if necessary";
def stepNewName  = "Update CID's rating and invoke StreamDelete if necessary";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Renaming Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestStep.name = stepNewName;
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true" id="70dfb5cb-9865-4a56-ad87-074e160a2139"><con:settings/><con:testStep type="groovy" name="Rename Test Cases" id="eae28708-a12d-44cd-81bc-514b061af7ef"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Linked LASP Test Cases_P2";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		//newTestCaseName = oldTestCaseName.replace(" ", "");
		//newTestCaseName = newTestCaseName.replace("_POST_", "_GET_");
		//newTestCaseName = newTestCaseName.replace("_RTL_", "_RTL_CS_");
		newTestCaseName = oldTestCaseName.replace("DLP", "LLP");	
		/*	
		if (TCNum.toString().length() == 1)
			newTestCaseName = "TC_DECE_0000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 2)
			newTestCaseName = "TC_DECE_000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 3)
			newTestCaseName = "TC_DECE_00" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 4)
			newTestCaseName = "TC_DECE_0" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
			*/
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Step for all Testcases in a Suite" searchProperties="true" disabled="true" id="650ec4b5-db6f-4b37-a66a-e3ece01baed0"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="2f63f6c1-6739-4dfa-8c89-2a36ca1033b0"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Node Authentication Test Cases"; 
def stepName  = "Restore nodes actual role";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove Manage account consent policy" searchProperties="true" id="bdc7ad65-a616-4140-b3cb-60d248d6fd0b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e49350ab-f189-4e52-ba89-4c768adb0cf7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("username",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="619abbb1-ace2-4412-8775-796935650df1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));

tC.setPropertyValue("nodeid_rm",callTC.getPropertyValue("nodeid_rm"));</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="fdfff92d-e40b-4096-809f-9159f0a05241" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" id="727adea7-702c-4800-a0ac-a08b085d28f4" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" id="0bf6ab26-29b1-478d-84e1-55ba997c2939" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" id="64ce3191-ad2d-4bad-b362-e37a9434d084" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="8dbb9d98-58f5-4f6d-85fa-ad841028a473" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="e325317b-d748-4c91-943a-4b44c9ce76f6" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of PolicyGet for ManageAccountConsent" id="6257ef96-8203-48d7-9f55-f9454109e89e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass","ManageAccountConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="remove policies" id="99fd72b2-8c37-477d-9fbb-cac13dabbde6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def username = context.expand( '${#TestCase#username}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));

//a.policyDelete(105,useroid,"active")
//a.policyDelete(300,useroid,"deleted")
//a.policyDelete(302,useroid,"deleted")
a.policyDelete("105",username.toString())
</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>pVZdc6I8FP4rDnvZwQCiCFOdoX68tVXrqt12etOJIWBaCEiC2v76TVCpWtvX3b1icjg55zkfec65ZDAKDcdlDKecxLS0jkLKnFzaULKUOjFkhDkURpg5HDkTd9B3jLLmwN0VpdRrN5TnmYWqSKvVVGjXNdW0fV21PdtS/YrtG6aGNK+GhSpjGe5RxiHlDcXQ9KqqGapuT/WKU9GcarWsW/aTUvqFUyZsC5WypmxBrVlDmXOeOACsVqvyqlKO0wAYmqaDx0F/guY4gkrzchNR7ihtbvVR2cMIhyEqozgCl+BA59JjzoQEFPIsxVtf3le+NKDZQOh4jAQ/lOIu9nrUj/NjC9KYEgRD8g5lfgaYz2Ov5IZBnBI+j74MQtekYRWvkYp0k/5QwCG0Mw0dIEwZVNkc6ltbY+zjFFOES/fjXkP5cV7V8qvTFFLmx2nEDo9/hgfTJQ7jBHsq24W1hXa+wROZal5i5PQoCjNGlngomzWBCLNtNTE631RplGKfrPuEiQZdM4kO7MM7Om6y0SYBZvxvCrRXnI2RXzDMcHMAX16vvOzmqv6SVGnSG1roEUzHgYmDRg5gXzkXFKXdHI+asmiizY1An73qo1V3CuLByvD4krH1hV9fvqXdgAckW8Qta313kbh9axJ1K3aaPozNC7hOhtbjzZPpZ6Ftv10/gLvVtXV7Z4Zp9Um7HgK7VZu37rPu++hnB9LRbFZbgpeHUbSoBe7Yqlqrp7aPB1G0ZnSN2u1gQSvhTc+2b+u1dwThzf04Mnsv01v+X8Y6jyNKhtc/G0U4e/gPZbs3P8lmLxjx3VG2Qa9d6ooqQf49mUkJ8VQ/V3USST6MY8qVprwlucPJBN0RzxE13Jy1rqV3NNfoWK5r1d1OR6tWtKpt613N7VTNqx3JbFAcQWzF1CfSl6TcTdt8DxBFDsPUw6m6jDPBdEz5xmIbcljq0bF4BDFleBoLeqY61OZvWkWvVmqrmRHjmpmZcybYexjzO3qXuj7H6SEl1w4oeYwRSQiWvC3bmom+ZlykYgGXGQ/18hKWKc4Es6eSZB3DrFcBI1ESYgkURLGXhbiczJM8MYBtvoYKEcul4840f2xfhnX8b5cBoeMRqcBkLFdYVBGfmC3mLpBPAddOzqCdeTfziHxXIp08JWiD5PDXR5fI9ihapN13J6Md6EL3D+4+tybP+l8a6P+D8/6/Ohe1/HwTfJNPcFzKwpG3JHtud0uHGF+C8Jq7RlzA8qKcLZdZ3nqWJPZUmAeyCYBmgAlGmaDkt2n8iikorICz5l8B/Mh5IT+EmPE5nXDIcSTeSik/nrHwTDCTC09PvPH1udvUgUuROo7X/JSsFYplTSL+dp9DDpJ6QjwSn1Wceh8VO2Frz4+IU+w7nNBAnuTse/uiL1AszBLB2nG6b/yUgVPOD4VFkgssXDTULOP46z8lSccNBSIUZ5T32kou2B8ROU7+lmDnQ+mTmXwKFWsp+f+9VCV5CyCxAgv93L7cLhz5BGiwN2a2Tk9MGvOq5RqG1W7nk8baTJp6Ra8XSTlA1/wk/izZy9Nxjzd/Aw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0F71E0A4BCA227DDE05307991F0A8318</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:0F71E0A2E7AA78AEE05305991F0AE54B</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ManageAccountConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">    <Policy PolicyID="urn:dece:policyid:org:dece:CBA1F4F13FEEB33CE0401F0A07996ACF">       <PolicyClass>urn:dece:type:policy:ParentalControl:AllowAdult</PolicyClass>       <RequestingEntity>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</RequestingEntity>       <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>       <ResourceStatus>          <Current CreatedBy="urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA" CreationDate="2012-10-09T14:14:42.000Z">             <Value>urn:dece:type:status:active</Value>          </Current>       </ResourceStatus>    </Policy> </PolicyList>]]></con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81175</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_34851 - StreamDelete - LLP - Stream delete by dlpcs_ManageAccountConsentPresent_SameOrg - 200 OK</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150219_053633</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0F71E0A2E7AB78AEE05305991F0AE54B</con:value></con:property><con:property><con:name>nodeid_rm</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e49350ab-f189-4e52-ba89-4c768adb0cf7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6257ef96-8203-48d7-9f55-f9454109e89e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Manage account consent policy" searchProperties="true" id="f470f84f-2d10-4ceb-b0b2-a06109d6c3b0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d0113140-9379-40c1-b84a-c496696bf0d7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="ae1e0726-9a51-41dd-a893-53012c58becf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageAccountConsent");</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent" disabled="true" id="f83a015f-28de-40e7-aee4-863b5e8ba0f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary" disabled="true" id="aec884b3-303a-46b4-8d8d-bdf2a90a7925"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true" id="c695da4d-eb40-4089-b283-ff5178519061"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="7fd26816-c6bb-478a-af0a-73784682f06f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageAccountConsent" id="f4240afb-08f0-4d58-9b64-9bde8fa52425"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyGet for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageAccountConsent if necessary" id="07bf64c0-4f0c-4433-bb6b-2d19f1310381"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageAccountConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:accountid:org:dece:"+tC.getPropertyValue("assertionAccountId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true" id="aacf2a2c-81cf-42c6-bc67-5e0ef5b8aef8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true" id="9b7bdc05-8834-4b12-b5c8-af9cd817bdc7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true" id="441089c9-46d8-452c-a98e-72be28c26cb8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true" id="f8893ef8-936e-42c3-8c12-b32063a22b02"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" disabled="true" id="48a66a71-c397-487a-a0a2-502a3ff594eb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" disabled="true" id="92aaccbd-baef-4b22-a2e3-9ef7e7c6cb05"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>pVZbc+I6DP4rTPq4E3IFkkxhhmtPuqUX0na6fekYR4Db4EDsBOivXztACpT2sLtPGSuy9En6LOmcoWlkek3GIOEkpqXlNKLMy6V1JU2oFyNGmEfRFJjHsRc0+1eeWdY9tL2ilPxOXXmp2WFoD6ug6nhkq3a16qouqoBq2LVKzXBMw3FBqDKWgk8ZR5TXFVM3Kqpuq6Z1b+ieaXiVatl2rWel9AgJE7aFSllXNqCWrK5MOJ95mrZYLMoLqxwnY83UdUN76l8FeAJTpDTO1xHljpLGRh+XQ8AQRbiM46l2ru3pnIfMC8iYIp4msPEVfuVL13RXEzohI+MzpbgLoU9HcX5sIxpTglFE3pHMTx/4JA5LzWgcJ4RPpl8GYejSsApLrGLDpmeKtg/tREN7CBOGVDZBxsbWAEaQAMVQehj4deXstKrlV+8TRNkoTqZs//hneIBmEMUzCFW2DWsD7XSDRzLVOAfs+RRHKSMZXEuyzhAGtqkm4NNNlW4TGJHlFWGCoEsm0Wm78A6O62x0yBgY/5sC7RRnbeQRRSk0lne/Rm/W5QXRLq0VC//rhSNn/hQG761FPQewq5wLitKujwekLEi0vtG0f0QTC8W1x8XDax87ZH5DHfLj1rbdztCq3FD283pQdZwMt5pL+lrr9XqP4XD+nD1DdHff/fmcNR8mrlZBb/MnZ/AaBtdBq2u+zzCMb7sr0l9l7sOF/ZolIfPTYEj6j4O3d+ozx45I1k3SzjO5u6wFb8Ebo5eV/q+u4Q8DNEhaDLnPduo39a5Om/HFY1uvF+Hs4N+Xbd98kA5fAfPtUdLA75R6okqIf9/MpISE6ihX9Way+TAOlCsNeUv2Di8V7Y6Enqjh+mzYVdM1Wq1utV01Wp1uV69Yes11jZ7e7NpWb9tk1igOILZjOiLSl2y5a9p8DxBPPQY0hETN4lR0OqZ8Y7GDOCr5dCAeQUwZ3MeiPRvJfKRXzdVkmI5X1WhFh9PErTmsopSuY35Db5LmiEOy35OtvZ48AExmBGTjlrxmgtiMi1zMUZbyyChnqEwhFa09kV3WM22nojEynUUgkWrTOEwjKM8mszwzGlt/TRVhlksH3fv8tX0Z1+G/bQqETkikApOxtECUEY4MF3sbyKeAq0eH0NZ8Mw2JfFginzwheI1k/9cHTSQ/Co50rprB7RZ0ofsHd1/awYvxlwau/sH51b86F7X8fFP7Jp/aYSkLR2FGdtxutw4xv0THa2yJOEdGeV5OsyzNuWfblpYI85okgaabWgA4FT15dR+/AdUKK9pJA7AAfuC8kO9DTPmEBhxxmIq3UsqPJ2w8ATC58fjikS9PXaf2XIrUcVjyY7J2JLY1ifjbhQ57WOoJ8a34LOIk/KjYEVs7fkScYuHhhI7lSQ6/1Re8wLEwS0TbjpNd48cMHHO+LyySXGDhglDDlMPXf0qyH9cVhHGcUu53lFywOyNynHw1A+9D6ZOZfAwVeyn5/8VUJTkFsNiBhX5uX64XnnwCdLwzZzZOD0dN1eq1Hd1y5MzZHTWm0e4WSdlD1/gk/izZydMhxxu/AQ==</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>146263FC8038291BE05307991F0A21CE</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:146263FC8038291BE05307991F0A21CE</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>146291BBE6C61BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:146291BBE6C61BDEE05307991F0AE43F</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_34850 - StreamDelete - LLP - Stream delete by dlp_ManageAccountConsentPresent_SameOrg - 200 OK</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove Allow Adult Policy" searchProperties="true" id="c9399206-8eff-4d32-bde2-f086efec8683"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="da2344fe-c317-4733-8818-061c7499ab54"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="330593a5-b791-44bc-bacb-481e58a167f7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="b35d22ee-6fd7-43e3-abb1-d11c8d8c35be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlAllowAdult")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="df4badc9-705d-4647-a5ea-aac50c020c5c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="removepolicies" disabled="true" id="aa195a11-6586-4e38-bff3-229a070b63fb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));
log.info "useroid"+useroid;
a.policyDelete(302,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(304,useroid,"deleted")
</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbb+I6EH7vr4iyj0chCYRLooJEE2jZhbYLbE/Vl5VxBnBJHLAdSPvrjx0aCpT2tLsSEvJkPPPNxd/MOUdxVPbanAMTJKFaL2jqvydOPazXyrYh/6uGg6uWMali25iiKgC2ak6j4upaj/MUepQLREVTL1u2Y1g1o1we27ZXqXtWpeS4tQdduwPGpWmpUrJ0LYsjyr3cbVNPGfUSxAn3KIqBewJ7o/ag70lNDxWY9Nb5FmXukLXmQiw908SlEDBEES7hJDbPzQOd85B7IzKjSKQMXnyGvKm/3N1sNqVNpZSwmVm2LMu0XFPqhJzMvumts+IyhD06TbZnH9GEEowi8owUqAGIeRJq7WiWMCLm8TumbdO2lGkDMmxg26HfdPPVQY7uk5YOQDKODD5HdmFsCFNgQDFov4a9pv7tcxXc3h0zRPk0YTE/On8NEtA1RMkSQoMXkRXoPm/xRLpa54C9HsVRyskarlWbLBEGrt0ymJKsT7hsvpBrefm1jMsfKboM8FfKcm7uY5XQzRPZCcgMuPiTmu3Xa2vlDkUptHpJylyn7/+8HN6WoTbtTOggyu6qj5tNM4ewr7wFtSv3y/m4WXe99XKpzQKWLAY/zfvp0zCouavakyWcBVsMWBhMu1fV+1Xqz349mFd3Ttj9t45i57mxuB/V+ZPTHf6cQGd5U/Ubz3R1MTgj/Q1dBD+e/Zhfmd/7S799MV9P6OVlnHZYBdtW5gdXZmf86Frx4zzj/rzf+Gfl/pg8RDe3/sJNnHbl8qp8mY3sq7Ps+geLrsfr/uhhNrsJfnF703yNaT+GQ2FBCaN08ghYFEfVHr1A68p6IfExvSgJCY1pruotFUdxAVToLXVLUYuXSgIioSeLuT13/dpFUOt0626lVm00go7lWHbXaltV161c1OsFB21RHEH0Ezolypdi2W3/fAwQxx4HGgIz1kmK58D1DywGSCCtR4fycSSUwziRLA7CfkbRlM0mlbkdMoxdTOdOZj/r2nUibugNa08FsEPqdg6oewiYLAkoflcNzmWHcyFzsULrVER2aY1KFFI5AZgiYa/sNKomJ/EyAoXUjJMwjaC0nC/zzJh8+182EOa5dNgZ5w/v3biOvxUpkDohUQpcxXIBsozwZgbVvGoRyJuAqydnVWG+nYZEvS+ZT8EI3iI5/PTaJqo/dj0S9Nuj2wL0TvcLd3/7o9/2Hxro/4Xz/t86l7V8e9P8IJ/mcSl3jsI12XNb7AFytEniaxWNuEKlVSldr9O89eqK1Jk0b0put80R4FQy89M4WQA1dybMTw3GHeojzzv5Ib5UzOlIIAGxfChafvzEVjQCrrainnzh2WdXrgOXMm8CMnFK5kdyeVKIP9yvsIeVnhTfyr9NwsLXcp2wtedHxilXIUHoTJ3UCHx6pylwIs0SydkJ2zd+ysAp54fCXZJ3WITspkkq4P0vmiLjpo4wTlIqeoGeC/YHRI5TPC3Be1V6YyYfQi9bRcbf3SruB/2RpOoY6Ttd8v/KBsnbBYOulpccS1PP5JIsndPZ3kB6AXhiJnXK7bbbuXBfZ1LddasVq7JL4EEkrTfit5K9nB6/h9Z/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:FC93FF702F5B065AE0401F0A07994167">
      <PolicyClass>urn:dece:type:policy:ParentalControl:AllowAdult</PolicyClass>
      <RequestingEntity>urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2014-06-24T11:24:18.000Z" CreatedBy="urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_34751 - StreamDelete - LLP - Policy - AllowAdult - US - MMPA - Can delete stream that IS_ADULT = 'n' with policy - 200 OK</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77796</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC93FF702F5B065AE0401F0A07994167</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Allow Adult Policy Establishment" searchProperties="true" id="8d466cf9-82e8-4661-a19e-1fef68200fa2"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="00bfd5e1-e5e9-4c6a-a670-286c90e1a633"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="640e803a-3578-44e0-9ad7-5072313253c6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy" id="4e7ccc1b-360c-42c0-988f-d9caefc0768e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlAllowAdult")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="8d1a480e-6dcc-46d1-9d60-41953ae1f61a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy" id="fe77b319-3880-446f-9d4d-a31c16a737ca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass","ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbb+I6EH7vr4iyj0chCYRLooJEE2jZhbYLbE/Vl5VxBnBJHLAdSPvrjx0aCpT2tLsSEvJkPPPNxd/MOUdxVPbanAMTJKFaL2jqvydOPazXyrYh/6uGg6uWMali25iiKgC2ak6j4upaj/MUepQLREVTL1u2Y1g1o1we27ZXqXtWpeS4tQdduwPGpWmpUrJ0LYsjyr3cbVNPGfUSxAn3KIqBewJ7o/ag70lNDxWY9Nb5FmXukLXmQiw908SlEDBEES7hJDbPzQOd85B7IzKjSKQMXnyGvKm/3N1sNqVNpZSwmVm2LMu0XFPqhJzMvumts+IyhD06TbZnH9GEEowi8owUqAGIeRJq7WiWMCLm8TumbdO2lGkDMmxg26HfdPPVQY7uk5YOQDKODD5HdmFsCFNgQDFov4a9pv7tcxXc3h0zRPk0YTE/On8NEtA1RMkSQoMXkRXoPm/xRLpa54C9HsVRyskarlWbLBEGrt0ymJKsT7hsvpBrefm1jMsfKboM8FfKcm7uY5XQzRPZCcgMuPiTmu3Xa2vlDkUptHpJylyn7/+8HN6WoTbtTOggyu6qj5tNM4ewr7wFtSv3y/m4WXe99XKpzQKWLAY/zfvp0zCouavakyWcBVsMWBhMu1fV+1Xqz349mFd3Ttj9t45i57mxuB/V+ZPTHf6cQGd5U/Ubz3R1MTgj/Q1dBD+e/Zhfmd/7S799MV9P6OVlnHZYBdtW5gdXZmf86Frx4zzj/rzf+Gfl/pg8RDe3/sJNnHbl8qp8mY3sq7Ps+geLrsfr/uhhNrsJfnF703yNaT+GQ2FBCaN08ghYFEfVHr1A68p6IfExvSgJCY1pruotFUdxAVToLXVLUYuXSgIioSeLuT13/dpFUOt0626lVm00go7lWHbXaltV161c1OsFB21RHEH0Ezolypdi2W3/fAwQxx4HGgIz1kmK58D1DywGSCCtR4fycSSUwziRLA7CfkbRlM0mlbkdMoxdTOdOZj/r2nUibugNa08FsEPqdg6oewiYLAkoflcNzmWHcyFzsULrVER2aY1KFFI5AZgiYa/sNKomJ/EyAoXUjJMwjaC0nC/zzJh8+182EOa5dNgZ5w/v3biOvxUpkDohUQpcxXIBsozwZgbVvGoRyJuAqydnVWG+nYZEvS+ZT8EI3iI5/PTaJqo/dj0S9Nuj2wL0TvcLd3/7o9/2Hxro/4Xz/t86l7V8e9P8IJ/mcSl3jsI12XNb7AFytEniaxWNuEKlVSldr9O89eqK1Jk0b0put80R4FQy89M4WQA1dybMTw3GHeojzzv5Ib5UzOlIIAGxfChafvzEVjQCrrainnzh2WdXrgOXMm8CMnFK5kdyeVKIP9yvsIeVnhTfyr9NwsLXcp2wtedHxilXIUHoTJ3UCHx6pylwIs0SydkJ2zd+ysAp54fCXZJ3WITspkkq4P0vmiLjpo4wTlIqeoGeC/YHRI5TPC3Be1V6YyYfQi9bRcbf3SruB/2RpOoY6Ttd8v/KBsnbBYOulpccS1PP5JIsndPZ3kB6AXhiJnXK7bbbuXBfZ1LddasVq7JL4EEkrTfit5K9nB6/h9Z/</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:8001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6BD6EE2AA9EB9DE0401F0A07995303/User/urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Linked LASP Test Cases_P1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_34751 - StreamDelete - LLP - Policy - AllowAdult - US - MMPA - Can delete stream that IS_ADULT = 'n' with policy - 200 OK</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77798</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC93FF702F5B065AE0401F0A07994167</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6BD6EF7936588DE0401F0A05993B77</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6BD6EE2AA9EB9DE0401F0A07995303</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="HTTP Test Cases" disabled="true" id="f7459402-272f-4742-b430-9d2c66bce602"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00700 - StreamDelete - HTTP - API invocation with HTTP 1.0" searchProperties="true" id="0557501a-23eb-4b20-9689-a7d8c4fa46d1"><con:description> This test case will verify the proper response from the Application Tier layer when the stream handle supplied does not exist.</con:description><con:settings/><con:properties><con:property><con:name>userid</con:name><con:value>100215</con:value></con:property><con:property><con:name>accountid</con:name><con:value>100115</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>5011</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertLASPlinkedCS}</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77799</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00710 - StreamDelete - HTTP - API invocation with HTTP method HEAD" searchProperties="true" id="bb539dc5-b554-47d0-b655-3b9a3ea80a7f"><con:description> This test case will verify the proper response from the Application Tier layer when the stream handle supplied does not exist.</con:description><con:settings/><con:testStep type="jdbc" name="Extract account/user info based on Assertion UUID" id="f7e09726-d08e-47dd-8b8e-e20138551f72"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>select NODE_OID, NODE_USER_SAML_ASSERTION, NODE_USER_OID,NODE_ACCOUNT_OID from NODE_USER_SAML_ASSERTION where NODE_USER_SAML_UUID = :uuid</con:query><con:assertion type="XPath Match"><con:configuration><path>//Results[1]</path><content><![CDATA[<Results>
  <ResultSet fetchSize="10">
    <Row rowNumber="1">
      <NODE_OID>*</NODE_OID>
      <NODE_USER_SAML_ASSERTION>*</NODE_USER_SAML_ASSERTION>
      <NODE_USER_OID>*</NODE_USER_OID>
      <NODE_ACCOUNT_OID>*</NODE_ACCOUNT_OID>
    </Row>
  </ResultSet>
</Results>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:properties><con:property><con:name>uuid</con:name><con:value>${#TestCase#uuid}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="023b2044-f6b3-451b-b7db-3a558f6dac6d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>assert</con:name><con:sourceType>ResponseAsXML</con:sourceType><con:sourceStep>Extract account/user info based on Assertion UUID</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/NODE_USER_SAML_ASSERTION[1]</con:sourcePath><con:targetType>assert</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" entitize="false"><con:name>accountid</con:name><con:sourceType>ResponseAsXML</con:sourceType><con:sourceStep>Extract account/user info based on Assertion UUID</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/NODE_ACCOUNT_OID[1]</con:sourcePath><con:targetType>accountid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" entitize="false" transferToAll="false"><con:name>userid</con:name><con:sourceType>ResponseAsXML</con:sourceType><con:sourceStep>Extract account/user info based on Assertion UUID</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/NODE_USER_OID[1]</con:sourcePath><con:targetType>userid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="jdbc" name="Verify the stream handle is still 'active'" id="628ce19d-a297-451c-8ce5-a53cd9dde7c3"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>select * from STREAM_DATA where STREAM_HANDLE_OID = :streamhandle</con:query><con:assertion type="XPath Match"><con:configuration><path>//Results[1]</path><content><![CDATA[<Results>
  <ResultSet fetchSize="10">
    <Row rowNumber="1">
      <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>*</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>*</ACCOUNT_OID>
      <USER_OID>*</USER_OID>
      <TRANSACTION_ID>*</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>*</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>*</EXPIRATION_DATE>
      <CLOSED_DATE/>
      <CLOSED_BY_ORG_ID/>
      <CREATED_DATE>*</CREATED_DATE>
      <CREATED_BY>*</CREATED_BY>
      <UPDATED_DATE/>
      <UPDATED_BY/>
    </Row>
  </ResultSet>
</Results>]]></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:properties><con:property><con:name>streamhandle</con:name><con:value>${#TestCase#streamhandle}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="jdbc" name="Verify the stream handle is NOT in the STREAM_DATA_HISTORY table" id="d6575490-b5ca-4d14-ac26-4f5ddec9e529"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>select * from STREAM_DATA_HISTORY where STREAM_HANDLE_OID = :streamhandle</con:query><con:assertion type="XPath Match"><con:configuration><path>//Results[1]</path><content>&lt;Results>
  &lt;ResultSet fetchSize="10"/>
&lt;/Results></content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:properties><con:property><con:name>streamhandle</con:name><con:value>${#TestCase#streamhandle}</con:value></con:property></con:properties></con:config></con:testStep><con:properties><con:property><con:name>userid</con:name><con:value>100203</con:value></con:property><con:property><con:name>accountid</con:name><con:value>100103</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>3</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertLLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77800</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Setup" disabled="true" id="0f6edd3d-e939-4807-bec3-e95f9ad26286"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup" searchProperties="true" id="5699ce47-86cb-4ff1-890c-198627875f9a"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="c937bd82-bd18-40d6-b841-3f373f0ee33f"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#TestCase#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>${#Project#NodeValueRetailer}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>${#Project#Node_OID}</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccName_Gen" searchProperties="true" id="2e06c552-db5a-42eb-86c7-045b788c2e8c"><con:settings/><con:testStep type="datagen" name="AccName" id="92686e17-f2e2-4bcd-96f9-ed46ff8962b3"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Ashwin_Acc_Create_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>AccName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="d08e6f16-d56a-485d-8edb-5f0525ee1c14"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>AccName</con:sourceType><con:sourceStep>AccName</con:sourceStep><con:targetType>AccountDisplayName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete" searchProperties="true" id="7b9dacb4-e944-4454-8729-401916c1f1c5"><con:settings/><con:testStep type="jdbc" name="Delete_Account" id="06f3c38a-c271-4360-aa4d-75dbd45be674"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
accountid ACCOUNT.ACCOUNT_OID%TYPE;
newsfeedid NEWSFEED_EVENT.NEWSFEED_EVENT_OID%TYPE;
BEGIN
select ACCOUNT_OID into accountid from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}';
--select NEWSFEED_EVENT_OID into newsfeedid from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from RIGHTS_LOCKER where ACCOUNT_OID = accountid;
delete from NODE_ACCOUNT where ACCOUNT_OID = accountid;
delete from DRM_DOMAIN where ACCOUNT_OID = accountid;
delete from ACCOUNT_STATUS_HISTORY where ACCOUNT_OID = accountid;
--delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID = newsfeedid;
--delete from NEWSFEED_EVENT where ACCOUNT_OID = accountid;
delete from ACCOUNT where ACCOUNT_OID = accountid;
END;</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ACCID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get_User_Details" searchProperties="true" id="63a2e2bf-2e54-4e74-8b71-9590461c22ed"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="dabda657-77ed-42fa-b51d-12a2170fdf2c"><con:settings/><con:config><script>String userid;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def targetHost = testProject.getPropertyValue("targetHost");
//def nodeaccountId = testCase.getPropertyValue("nodertraccountid");

def a = testRunner.testCase.getTestStepByName('User_Create').httpRequest.response.responseHeaders["Content-Location"];
def b = a.toURL();
def urlStr = b.getPath();

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/dece/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9]*" );
//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

int lastSlash = urlStr.lastIndexOf(':');
accountid = urlStr.substring(lastSlash + 1);

//this.log.info "lastSlash is " +lastSlash + "and user id is " + userid ;

testProject.setPropertyValue("NODEUSERID",userid);
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserName_Gen" searchProperties="true" id="b002e41c-5126-494e-b9ea-e614cfaa66f1"><con:settings/><con:testStep type="datagen" name="UserName" id="180e4c7e-af01-45c0-beb2-c18566489d3d"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "stream_delete_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>UserName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="572d73c1-d3c8-4eec-a88a-f2e234ba90bf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>UserName</con:sourceType><con:sourceStep>UserName</con:sourceStep><con:targetType>UserName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:dece</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Delete" searchProperties="true" id="4924a2fb-3f4a-4dec-98b9-87d64574e615"><con:settings/><con:testStep type="jdbc" name="Delete_User" id="ed508f01-fb42-4592-9a7b-85e5da01cd32"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
MyAccount ACCOUNT.ACCOUNT_OID%TYPE;
MyUser ACCOUNT_USER.USER_OID% TYPE;
num NUMBER;
BEGIN
SELECT count(*) into num FROM ACCOUNT_USER where ACCOUNT_OID = (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}');
IF (num > 0)
THEN
for MyUser in (SELECT USER_OID FROM ACCOUNT_USER where ACCOUNT_OID= (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}'))
LOOP
Select ACCOUNT_OID into MyAccount from ACCOUNT_USER where USER_OID = MyUser.USER_OID;
--delete from node_user_saml_assertion where NODE_USER_OID = (select NODE_USER_OID from node_user where USER_OID = MyUser.USER_OID) ;
delete from node_user where USER_OID = MyUser.USER_OID;
delete from user_address where USER_OID = MyUser.USER_OID;
delete from user_alt_email where USER_OID = MyUser.USER_OID;
delete from user_language where USER_OID = MyUser.USER_OID;  
delete from user_status_history where USER_OID = MyUser.USER_OID;
delete from user_security_questions where USER_OID = MyUser.USER_OID;
delete from email_notification where USER_OID = MyUser.USER_OID;
delete from account_user_avatar where USER_OID = MyUser.USER_OID;
delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID in (select NEWSFEED_EVENT_OID from NEWSFEED_EVENT where ACCOUNT_OID = 
MyAccount);
delete from NEWSFEED_EVENT where ACCOUNT_OID = MyAccount;
delete from account_user where USER_OID = MyUser.USER_OID;
commit;
END LOOP;
END IF;
END;
</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set_PEM" searchProperties="true" id="3ad4ce3e-5556-45fa-ba4d-3569d8f24eb3"><con:settings/><con:testStep type="groovy" name="Set_Pem_File" id="148fdf60-963b-47ee-ba67-104c9b01723a"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup for streams" searchProperties="true" id="dea7d31f-6f7a-436c-87f1-4b271c25280f"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="7b24422d-b82a-4845-b9ae-186ab0022751"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#TestCase#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:lasp:linked</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>C381F9C22E4A41E6E0401F0A0599030B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="End_To_End" disabled="true" id="d462806b-b4d8-4863-aa1e-d97ad3179d9c"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountNameGeneration" searchProperties="true" id="8201b60d-6b4e-4bad-9428-8896d8af485c"><con:settings/><con:testStep type="calltestcase" name="AccName" id="f333b84f-6ba4-4792-8fcd-7b23580f722f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>2e06c552-db5a-42eb-86c7-045b788c2e8c</con:targetTestCase><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name></con:property><con:property><con:name>sName</con:name></con:property></con:properties><con:returnProperties><con:entry>synced</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E2E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0697308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate" searchProperties="true" id="73fa154d-0623-4913-aff3-939d58c3f25b"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Set pem" id="e78ef0da-894b-44b9-8f07-3751995baa97"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="83b5232b-c439-4a33-bf7b-c76ff3e874f7"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="discardResponse">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="03ecb40c-96be-49ac-b978-5200b11706c0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="0fd785f4-7147-4601-acb0-86e8ee138197"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="9a023148-336a-404e-9c49-ec17c16e7297"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def nodeacc = context.expand( '${#Project#NODEACCID}' )
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     if(minor == tP.getPropertyValue("versionUrlEncode"))
     {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeaccountid     = urlStr.substring(lastSlash + 1);
	accountid = urlStr.substring(lastColon + 3);
	
	tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",nodeaccountid);
     }
     else
     {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeaccountid     = urlStr.substring(lastSlash + 1);
	accountid = urlStr.substring(lastColon + 1);
	
	tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",nodeaccountid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:UserInformationRequired">
      <Reason Language="en"/>
      <OriginalRequest>http://qa1.p.uvvu.com/rest/2015/02/Account</OriginalRequest>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 500 Server Error</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>500500</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39da0c46-7f38-4527-b6be-af58fbc91aba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf0fa3e3-b1e7-4bf9-9635-da2c55ceeed9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0696f15b-f3ce-463e-b03b-33fc4c9d061d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserNameGeneration" searchProperties="true" id="7f1e7553-2f27-4580-940b-831794a1370a"><con:settings/><con:testStep type="groovy" name="SetCounter" id="19e95007-d4e5-4eb6-8658-c61299e40cae"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("UserNameCounter","1");
testCase.setPropertyValue("LoopUntil","6");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Get_UserName" id="c6804bcf-58dc-4800-8075-0a0bab1c208c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b002e41c-5126-494e-b9ea-e614cfaa66f1</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="8b89f2d3-98b6-4a09-a36e-1aabcd4e364d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="SetUserNames" id="165a3de1-c3f2-423f-a11f-8b6b1494f00b"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def UserName = testProject.getPropertyValue("UserName");

def count = testCase.getPropertyValue("UserNameCounter").toInteger();

if(count == 1)
{
	testProject.setPropertyValue("UserName_FAU1",UserName);
	log.info "==============="
}
if(count == 2)
{
	testProject.setPropertyValue("UserName_SAU1",UserName);
	log.info "==============="
}
if(count == 3)
{
	testProject.setPropertyValue("UserName_BAU1",UserName);
	log.info "==============="
}
if(count == 4)
{
	testProject.setPropertyValue("UserName_FAU2",UserName);
	log.info "==============="
}
if(count == 5)
{
	testProject.setPropertyValue("UserName_SAU2",UserName);
	log.info "==============="
}
if(count == 6)
{
	testProject.setPropertyValue("UserName_BAU2",UserName);
	log.info "==============="
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop again if necessary" id="1a8a68cc-85c2-453e-94d5-503e1a7eea57"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def counter = testCase.getPropertyValue("UserNameCounter").toInteger();
def loopuntil = testCase.getPropertyValue("LoopUntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("UserNameCounter",counter.toString());
    testRunner.gotoStepByName("Get_UserName");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0697308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate" searchProperties="true" id="dcc88388-8850-40ec-a6c1-a072a18a5f7b"><con:settings/><con:testStep type="groovy" name="Set properties from calling test case" id="ff32479b-075a-4e03-b85a-ed161f0dde20"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="d340c588-1036-4cee-871a-25c9c74ae4cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="7797fc52-db04-421b-8ce2-59c66568e070"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" methodName="AccountUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
	<DisplayName>${#Project#AccountDisplayName}</DisplayName>
	<Country>${#Project#Country}</Country>
	<UserList>
<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>uvtc_user</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>testing@uvvutesting.biz</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing1@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>testing</Password> 
	</Credentials>
</User>
</UserList>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="88d468a2-7a8d-4f46-a3d9-1db5ede864fb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="4fc13b01-c7af-4609-8220-8787c8e1186c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

                if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
                {                              
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");                             
                } else {
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
                }

                urlStr = URLDecoder.decode(urlStr);
                def arrayString = urlStr.split("Account/");
      arrayString= arrayString[1].split("/User/");
      log.info "Node_User_ID=="+arrayString[1]
      log.info "Node_Account_ID=="+arrayString[0]


      

       int lastColon = arrayString[1].lastIndexOf(':');
       accountid     = arrayString[0].substring(lastColon+4);
       userid     = arrayString[1].substring(lastColon +1);
       def useridfull = arrayString[1];    
       def accountidfull = arrayString[0];     
       log.info useridfull  
                                         
       
 
     tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",accountidfull);                           
	tP.setPropertyValue("USERID",userid);
	tP.setPropertyValue("USERIDFULL",useridfull);
	tP.setPropertyValue("NODEUSERID",useridfull);
	

     }
 else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:188A80E4A3487DADE0533E991F0ACA23/User/urn:dece:userid:org:dece:188A80E4A3497DADE0533E991F0ACA23</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_delete_20150615_01140</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Standard" searchProperties="true" id="fc5a9947-7a47-4285-9b6c-d02a719d7e31"><con:settings/><con:testStep type="groovy" name="Set properties for User" id="1f178bc5-cf19-4d5e-b2e0-998ceb9dce67"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));
testCase.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
testCase.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded)
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="c3ea18b6-c7ce-45c1-b22f-ad0b77b29abc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="a3e17c25-497b-4cb6-a823-f0e6dc1bb648"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="${#TestCase#UserClass}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>sau</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#primaryemail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
<!-- <DateOfBirth> depricated </DateOfBirth> -->      <LegalGuardian>${#TestCase#NODEUSERIDDecoded}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="690f9042-db04-4bf6-9bb8-0787aa7cf05d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="db5212f8-b0e1-477f-bb78-2052ff149f86"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");	
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
     }
     else
     {
     assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:EBB0A03EA11F8366E0401F0A0599504D/User/urn:dece:userid:org:dece:EBB0ABABC3897AD8E0401F0A05996465</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>ashwin_user_create_20131121_064246</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB93D9108325E854E0401F0A0799736D</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E085AF784BA232C7E0401F0A0599772F</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForFirstUser" searchProperties="true" id="b2d450d2-c53b-4c9e-8a4f-95d0cdb7f25b"><con:settings/><con:testStep type="groovy" name="Set pem" id="933d24fb-b9bd-45ba-8bf2-22406706d0bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("userIndex","0");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
//this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="2360e10b-f882-49b1-9bfc-9bdebe8abda2"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;



if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)

//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;	
}



</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="f3466180-f162-4784-b2b9-9c7bd4e8ff23"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="8c91d699-3871-4d72-b601-f01e2d7cabad"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="56a426b7-9f6a-4fb2-9a95-cd718057e62c"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="c0c66245-db89-487f-a005-cc087d5d28ea"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="deb3c208-b2c1-4ab6-aa87-9e7fd8266cc2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="f8d06a11-6ea4-40e5-af42-763582d8678f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c31e517-f3d1-4b5b-8698-6d855054e184</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForStandardUser" searchProperties="true" id="2360f4e4-4cd8-4e60-bbae-b0dfe60f11a7"><con:settings/><con:testStep type="groovy" name="Set pem" id="5d5ece5c-c202-4049-8ac1-d8f1fbb60326"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="97a728d4-b67d-4101-bb26-7a13cc75f5ca"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)
//
//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="7a2fc161-435b-4e81-8656-980729741f12"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="fc8828a2-3ce3-444b-8579-710870be3314"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="bdb8a94e-dab5-4be4-843b-b0be798adfb3"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="26d0852c-4e57-4fb3-beda-d0371d710369"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="a32fb144-826f-4b90-bbf7-7a65bad9274c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="02e0857c-3273-43ee-a08e-e20554033d09"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B98D77DD7311E0401F0A05991189</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/DLASP_CS_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95c44820-dc3d-41b1-aaeb-046ed883cdd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bebf0d96-3664-4297-8a60-39c898da110e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae07363f-1c5d-48de-93f1-d5ae9ad79a72</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="STS" searchProperties="true" id="c3632449-b655-4f0b-8a31-bd9a8e28b27d" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="bed3bfea-bc74-433c-a6f9-ce3341ea139e"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));

if(testProject.getPropertyValue("V2") == testProject.getPropertyValue("versionUrlEncode"))
{
	def audienceList = URLEncoder.encode(testProject.getPropertyValue("audienceList"),"UTF-8");
	testCase.setPropertyValue("audienceList",audienceList);
	def tokentype = URLEncoder.encode(testProject.getPropertyValue("tokentype"),"UTF-8");
	testCase.setPropertyValue("tokentype",tokentype);
}
else
{
	def audienceList = URLDecoder.decode(testProject.getPropertyValue("audienceList"),"UTF-8");
	testCase.setPropertyValue("audienceList",audienceList);
	def tokentype = URLDecoder.decode(testProject.getPropertyValue("tokentype"),"UTF-8");
	testCase.setPropertyValue("tokentype",tokentype);
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem1" id="9f648288-22b6-4d87-a654-280b73b38c85"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("STS - POST");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="6bc53bb1-09dc-4d54-87cf-3a4ed2e77b01"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#UserName}</Username> 
  <Password>${#TestCase#Password}</Password> 
</Credentials>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="fa7995e8-03c8-4191-840e-4453f03b89e4"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Rerun STS Post"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep = testCase.getTestStepByName("STS - POST");

log.info "#########################IN RERUN ######################" + tStep.getName();
String status = tStep.httpRequest.response.responseHeaders["#status#"]; 


if(!status.contains("201 Created"))
{
	log.info "STS Post not Sucessful Retrying...!";
	testRunner.runTestStepByName(tStep.getName());
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="f86517e7-55b4-4143-92e2-1dced6bbb359">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

tC.setPropertyValue("status",status[0]);
//tC.setPropertyValue("connection", connection[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
tC.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="51fb7b89-a2ac-4f83-a1a9-5d8be4d55dfd">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def major = tP.getPropertyValue("VersionMajor");
def minor = tP.getPropertyValue("VersionMinor");
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS" id="e7b187df-91bc-4406-a4f8-82b708f93ed2"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="31743bc4-b3c6-4521-8732-aa46248b343c"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="5f16edda-c002-4abb-9d90-807d57ee73ba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def callTSname = tC.getPropertyValue("sName");
//def callTCname = tC.getPropertyValue("tName");
//
//def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = tC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
//tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
//tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="5fc9724f-a677-428f-aa51-f67d320843cb"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);

//tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("Count")+"1", "SAML2 Assertion="+base64encodeStr);
tP.setPropertyValue("SAML",base64encodeStr);

//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store Account and User Info based on Assertion UUID" id="08ad1684-c241-44aa-954d-5ea1e6a7869f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

if(tP.getPropertyValue("count") != "1"){
if (expectErrType == "" || expectErrType == "SUCCESS") {
                if (XMLbody.length() > 0) {
                                def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

                                                // Verify response sizes...
                                                assert myXML.size() == 1;

                                                /*
                                                String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
                                                String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
                                                */
                                                String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
                                                String userId    = myXML."saml2:Subject"."saml2:NameID";
                                                
                                                this.log.info "accountId [$accountId]";
                                                this.log.info "userId [$userId]";

                                                tC.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
                                                tC.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
                                                tC.setPropertyValue("assertionAccountIdFULL",accountId);
                                                tC.setPropertyValue("assertionUserIdFULL",userId);
                                                tP.setPropertyValue("NODEACCOUNTID",accountId);
                                                tP.setPropertyValue("NODEUSERID",userId);

                                                def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID"); 
                                                int lastColon = nodeaccountid.lastIndexOf(':');
                                                def accountid = nodeaccountid.substring(lastColon + 1);
                                                tP.setPropertyValue("ACCOUNTID",accountid);
                                                def nodeuserid = tP.getPropertyValue("NODEUSERID"); 
                                                int lastSlash = nodeuserid.lastIndexOf(':');
                                                def userid = nodeuserid.substring(lastSlash + 1);
                                                tP.setPropertyValue("USERID",userid);
									     if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
										{
											def nodeacctid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
										     tP.setPropertyValue("NODEACCOUNTID",nodeacctid);
										     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
										     tP.setPropertyValue("NODEUSERID",nodeuseridfull);
										}
										else
										{
											def nodeaccid = tP.getPropertyValue("NODEACCOUNTID");
										     tP.setPropertyValue("NODEACCOUNTID",nodeaccid);
										     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
										     tP.setPropertyValue("NODEUSERID",nodeuseridfull);
										}
                                                this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
                                                this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
                } else {
                                return false;
                }
}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0F1A1CC2F69345E0401F0A07990CC5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb5gbp7AjAOEcEpDg5M0yUtHyGsQ2BKxZC799ZUMOEBIDm2fPFqvdr/d/bS7lxzFke16nEMiCKOFVRxR7mbShpYm1GWIE+5SFAN3BXZ971vftYumi3ZXtEKv3dB+mhUMULMrul0rWbpTdyp63SoFeuA49cqoalsoxFKV8xR6lAtERUOzTausmxXdKt+bVdcxXbterFRKL1rhERIubUuVoqltQa14Q5sIMXcNY7lcFpelIkvGhm2alvH0re/jCcRIa15uIsocJc2tPi4GgCGKcBGz2Lg0DnQuA+76ZEyRSBPY+go+8mUaZt2QOgEn4y9afheCHg1ZdmwhyijBKCK/kMrPNxATFhS8aMwSIibxh0FYpjKswwrr2HLoF804hHamoQOECUc6nyBra2sIISRAMRQehr2G9uW8qmVX7xNEeciSmB8e/wwP0AVEbA6BzndhbaGdb/BEppqXgN0exVHKyQJuFVnnCAPfVhPw+aYK3xMIyapPuCToiit0xj68o+MmG20yBi7+pkB7xdkYeURRCs3xr6dW52IVfh16X2+uYvIyuutWh/ZsVHYaGYB95UyQl3ZzPCJlTqLNjbCbGt1g7a1/sE6nZ04XJfPh2rtLWB2Y7f9gjw83refx3eQ1nr4Y4RhfRFAZeFZC+lcefrFuPL6KaLocPZW6/9WuX3wTL8bXlWh9U71ozR6mg+6yejV6GMwuqtbLdDn0F30fXeNXUvZxiG5/kedn5k27jn3xNHi4XZtfa1XnrmstJtP5qvP6fFMm1tVsFLWn6eCukYezh/9QtnvzfjqaAha7o6JBr124llVC4vNmpiQk0MNM1Z2r5sMFUKE11S3VO9xUtjsSuLKGm7NVq3k1s+N4JadebXvtjlkulTr1unVtei3PLu2azAbFEcQWoyFRvlTL3dDmc4A4djnQABJ9wVLZ6bj2icU2EqjQo0P5CBjlcM9ke55HM74ei6BkLkOrzCuhIyo1PJvI9n3LxIAOEi8UkBz0ZMs86MlDwGROQDVuxWsuic2FzMUrWqQisooLVKSQytaeqC7r2k6tbHASzyNQSI2YBWkExflknmXG4JuvrSPMM+mwc5+9tg/jOv63S4HUCYhS4CqWK5BlhBPDxdoF8i7gyskhtDPvpQFRD0vmUyQEb5Ac/nqjieJHzpF23/O/70Dnun9w92fL/2n9pYH+Pzjv/6tzWcv3N41P8mkclzJ3FCzIntvd1iHnl+x4zR0RX5FVfC2mi0Wacc9xSkYizRuKBIZpGz7gVPbk9T2bATVyK8ZZAzAHfuQ8lx9CTMWE+gIJiOVbKWTHMzYeH7jaeHryka/OXacOXMrUCViJU7JWJLc1hfjThQ67WOlJ8Xf5WbIkeKvYCVt7fmSccuERhI7VSQ2/9Qe8wEyaJbJts2Tf+CkDp5wfCvMk51iEJNQoFfDxn4Lqxw0NYcxSKnptLRPsz4gMp1jPwX1TemcmG0P5Xkr+fzHVSUYBDHKb5SSzr9YLVz0BOt6bM1unH4ya2mej5hBd8534vWQvT8ccb/4G</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_06cee826-2831-4946-913d-d4496b721afc</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_06cee826-2831-4946-913d-d4496b721afc</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>CE0F1A1CC2F19345E0401F0A07990CC5</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3512</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>CE0FA9BFE5F30C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_delete_20150615_01140</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0FA9BFE5F80C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml; charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_06cee826-2831-4946-913d-d4496b721afc</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_06cee826-2831-4946-913d-d4496b721afc" IssueInstant="2015-06-15T07:40:29.663Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_06cee826-2831-4946-913d-d4496b721afc"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>gzXCE+xfKRAKHBmiZbQG7R2kb54=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>fGu/GdyAyWoEEI0jv30UFAQro9eo2SWoVUHCYgQhqmjZ/fgc+le6OA1riLBAcZ1HAsxlnuwbX3GJ8FZS0cvgF6lyH7+CkUjOGw7BbUOk+71ZjwRSvLSaFcqi5ScfaNziYYoAjG42+XOUNy0K874QG1vhjpxEqYH5i1BkblDjuOQ=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:188A80E4A3497DADE0533E991F0ACA23</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_plksygtd30wf15s6f4t68ckhn" NotOnOrAfter="2015-06-15T10:40:29.663Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-06-15T07:40:19.663Z" NotOnOrAfter="2016-06-15T07:40:29.663Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_06cee826-2831-4946-913d-d4496b721afc</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-06-15T07:40:29.663Z" SessionIndex="_06cee826-2831-4946-913d-d4496b721afc"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:188A80E4A3487DADE0533E991F0ACA23</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value/></con:property><con:property><con:name>assertionUserId</con:name><con:value/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>800673c1-3147-4c8c-b0c1-58e0015b4b03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>175431f8-b1ab-411a-838d-f62e6ec865f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b4251c4-b0c9-4524-b11d-58f032477794</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad58565a-ea44-49b7-aab1-812ed0ed9584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c7be09-e6de-4048-88a8-4093708a9d7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a41302e2-c2f1-4384-92f7-153edc9522ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2fe33502-92b9-4bc5-9cab-1083378ddd6c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1adab77f-1cd6-4d9f-ac40-f99f00ddbb94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af3889f5-e9ad-4a18-837c-7ead87c1caed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdb00829-308f-406e-9775-a6c8de3621f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98f48738-f6c6-4056-be18-f24b60c6a023</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb39d541-2f26-4a00-9fc8-5a5ea810f40b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Basic" searchProperties="true" id="e056f1ed-d502-4735-9337-5848545c0810"><con:settings/><con:testStep type="groovy" name="Set properties for user" id="79161615-7360-4f17-9e82-a92905b0117e"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded)
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="1c7b8c42-7840-4664-8448-293e4eb0dfc0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="f88a68d8-6c07-458f-9416-5397886d80bd"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:basic" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>bau</SurName>
	</Name>	
	
  <!--<DisplayImage>
        <DisplayImageData>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAPAAA/+4ADkFk
b2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAM
DAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAY
GhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8f/8AAEQgANwBEAwERAAIRAQMRAf/EAKAAAAIDAQEAAAAAAAAA
AAAAAAMEAgUHAAYBAAIDAQEAAAAAAAAAAAAAAAABAgMEBgUQAAIBAwIEAwYE
BQUAAAAAAAECAxESBCETAEEiBTFCFFFhcTIjBoFichXBUjNDJOGCooMHEQAB
AgIGBggDBgcAAAAAAAABABEhAvAxQWESA1FxoeEEFIGRscHRMqITIrIj8UJS
coIFYpLC8jNjJP/aAAwDAQACEQMRAD8ApsDsnY/2/DaTt8e2qIFUxgzZE1tS
BdqEBqfHX3IOriOL4zPGdOBOfMbYSh6f3VVko57F2YGVWw8VZaXZU22m1joB
W1bhQvQ1qw/M2lqHPz+fD45msiXO77BFyh1Nex9kujZe2Q6gjExWQB3oKGWY
kFgoB5+HOrkKFz2fH6k15fYKbHJHRE+3uxMrIcWDbD0yckRqtzk27UIFbden
TUeAq9SA8fn14prg+009MCOqbtvdPtXun3Rl9lxezJHNAJI4MiRUMTNCTuM0
SqrL4dNWNaAdNTxvz8visrh5c2bNLFnDl41Rfrh1snFW57H9v2RsMGJ8dW+k
RGhlyZDr06KAnPkD7ox1Yee4h/PM+stKPGnmqTlDbsXZgZVbExVkAuypttNr
HQCtq3ChehrVh+ZtLU4Ofz4fHNdEud32CLlDrv2TsYaNh2yHUFcPFZAHegoZ
ZmILBQDz8OdXIUHPZ8fqTXl9gpsckdV37F2L9+s24q7Ft+19H1G7SlnyW+Sl
fHS6/Xj0ObzuUxOX9zTHDh0137WwpvBWeLIVhWko3UiUTZRoEx4rQ1ig1F5F
Ca/qbS1eMHGD608IY5oaS52fYIuUiiBwBEqxGyt2JiMSGdgamaYmpFCburUH
U1cgDM1cdZ7hT0uSkVHFJSZTbULl5a1DOwNBDCBUihNvTqDoKuSQNVDUO809
LBNQ7x33t3YMBO4dy6CPp9vwYwCQQvIDput+Zq0UdI/Nbw3CT8RPgk/VMabL
azcMsu7F94YWL93Znec3Cuxe4GUTwxmrIJnDsy/KHOlGBoCCeOr4r9umn4aX
Klm+KRmOlhs7lMiC1r1KToMuCZWWaJZfWeCQwOocBLvMVoTX4toFXjjjIZTh
IqLNpIhTZaVBLswAiURmypbExGJDOwNTNMTUihN3VqDqauQA2rjrPcKelyko
GUASs0ptqFzMtahnYGghhAqRQm3p1B0FXJYGGqGod5p6WCEGmR6+uxHt+ms9
HQf0bqbda2Xf8fL+bj0YcnWf8td+GvT323J2IMbkRwKYxprjYgIAdxqZpCKg
AMbvd46uVAr4sfWnj94uemoU2OUFTEoG6TKbahcvLWoZ2BoIYQKkUJppqDoK
uSRmaqGod5p6WCSZgZ9yNVRVmVf8fH/t48dLb3t0upoAP0rpc3CIhdadNN5s
Ca8n/wCiY69xm7fhQOSuPh5vcpZm8XCr83KoY49o5U8NKce3+zz+2JpzbNJJ
T+bxipBZ72nB9f3TEwrrPUzJFcBUi9gNB+PHR8Rm+3lzT/hBKkVsH2tnLl/a
naHA3Gji2YsbwrJAxW9zr0r0kez3taBxfH5WDiMwXu9xsp2OoFMyyAbpMptq
FyspahnINBDCBUihNNNQdBVySMwFUNQ7zT0sElAPJuRqqKs6r/j4/wDbx46W
3vboWI0AH6V0ubgYNdadNN5sCSWvxN/c+pZbd63S66tN+v8AL5a0tt5bfHpN
Nyjf7Kv01Ui/8SlYgxTR7JYSMIiFGRk+dqaCGK3XQm3p56DrJIq4sH3ptOKZ
h01mmxIoqyPuIqoqzKv0INNuBPlve3QtTQAfpXS5uMzBrrTppvNgQjQyxGPz
PjO3uMmU5H4Cyg+BHsQahBe/5d9PMhUX35n+iyPVSlDPl9omwEC6hXbJDMNd
dIpTrz49T9qyvclwiqXNE3p8QmFnHbctsLuOLmLo2NNHMp98bBv4cdNnZeOS
aX8QI61NbB2NIsbsjwx1hxY8vKXcAKu0e8TGiAa9SsKEe3p1NRxfFkzZrmMx
ll68MadagpySPuIqoomVfoQeSBPlva3S6mgp+ldLm4oYNdadNN5sCSX3YjF5
nxnb3GTKkI/AWUHwIHKMazYvf8u+nmqF2/P6z+unqbf6VRZX5tqtLvl6q+PO
lOnjbhHJ1Q9z+mumquKdiVjllO18rzhAYU1KRIRTcbwqzf6DS5uIcUB7k+jE
emNVNegIK4SxmPzPju3uL5LkfgLKD4EexBrSxe/5d9PMkmo533HZnUTAfWm8
kCfNat3m5mvxOlq8Rwhru2m4WlCX+6MfFy/tbOuhAlx4DJhVLiW3ejaVnFdQ
1K0YEg6nU0408BPNJxErGExjU1Rag7AmFluXgS42NhTsDZmxNMhIoOmV4iAf
+vjrcvNE00w/CW2A96mtkZ2SPGRApnMMcix06IjJGC8je0k1A93SKC48cOQ5
Ohz0sYCmvQq1XyyxNHzfHdvcXyXI/AWUHwI9iDWYlL3/AC76eZCiZn3HZnVZ
gv1p/JAnzWpdpdz1+LaWrwYQ12jTTcLShB3F3LfTnY2621bcturuU+a+7q8b
ufzacb2/5q4+50eWrVs6Ip2JWKRPTIGVhC1Kx+eeQjw18unPxA5INYcSD7s2
lz0R7aVoKLuve7M4EwH1pvJCnjatfNz1+J0tXijDC7tpuFpSRI5QBGAhtrXH
xzUFiDUyyk1Pia6/E1YgBEbz3CmxNMPXI7f3LHDBjLiZCy5B0BdYmZUQclVh
+HvNeCQ4Z5Domlh0im5kJHtUEj967ZlwuDD2nsuNssfBZ8mMgaChu62f/b48
a+InAyp5TXmZ03VKdwHShOzZKSISxaSGRqknV8lyPw6dPgR7EGuMStr+WlIo
S8kz3uxcCYD603khTxtWvm56/E6WrwxLC7tpuFpQh7gpGAhtrXHxjUFiDUyy
k1OhNdfiasQA23nuFNiSDvD1tPUNu203aGzcupbT5bfLSvjzv143N/y1Qx7M
PbSpOxKQ5LBIgBJvSJpJtN0RilQi0NTqKn2+PJeJZ+QTPMXlbEfvDbGnWUMp
erQJcInMUb2xRlXo0l1LnYg63/E111bQV8vNplf8w2RpqQyKmQTIY6S3sA08
ojcMQSQqqAKquh/hqSRE8OWd5bvil8aaoIZGizIXx33YpBjTwSRARqyiKB4m
DyA2lbhHU+ymnhVuDl5hMGMuIEHzCJeAr00dghkTDftWPFlNE+ZLi+nx0ngk
jEiyCKEjGkEg29kFK6G4MLuXDzsvNmZ8AmxTMRMzOfiDRxR1EQtQgyZcu4Kr
IJ5AasI3O2gpUICuupGtPeeS8IcPCuVvzDbGm1DJdstAlwik2o3tiisejSXU
udiDrf8AE111agEuXOmV/wAw8aakMuGQTI0dJb2AbIlEbhiCSFVQBVV8f4dR
JC5cs7y3fFL401QQyB676u5s/wCPsV2ttqbNfCtLfDX+Xl+bjX7B9nC4fHW4
ral9qbL/2Q==</DisplayImageData>-->
<!--DisplayImageData>jfdkjdkfgdgd</DisplayImageData-->
<!--DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=avatar&amp;nodeId=urn:dece:org:org:dece:500500&amp;nodeUserId=urn:dece:userid:org:dece:B2F5D0FFF1B7BEC4E0401F0A0599368E</DisplayImageURL-->
<!--DisplayImageURL>www.yahoo1.com</DisplayImageURL-->
    <!--</DisplayImage>-->
<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#primaryemail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
<!-- <DateOfBirth> depricated </DateOfBirth> -->       <LegalGuardian>urn:dece:userid:org:dece:${#Project#USERIDFULL}</LegalGuardian>
       <Credentials> 

               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="68570173-dfbe-4615-a596-86e8b80a3563"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="e0d65a00-a426-47de-9751-485e17069c1a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	}
	else
	{
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:EBB0A03EA11F8366E0401F0A0599504D/User/urn:dece:userid:org:dece:EBB0AEF27BAFF645E0401F0A0599777F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>ashwin_user_create_20131121_064248</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB8F0F6588921CE6E0401F0A05991E36</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E085AF784BA232C7E0401F0A0599772F</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForBasicUser" searchProperties="true" id="2eb92ded-54b2-4a84-b410-3bf466c60b9e"><con:settings/><con:testStep type="groovy" name="Set pem" id="2184fb9a-f02b-4d16-afc1-e908eaac93ce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_COPPA");
//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="9aa49a9f-e647-42f4-b1f3-dc6fc71dcc88"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

def testStep1 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" )
if( testStep1.disabled )
  testStep1.disabled = false;

def testStep2 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_ManageUserConsent" )
if( testStep2.disabled )
  testStep2.disabled = false;

if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)
//
//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_ManageUserConsent" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = true;
}</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="16a8bbaa-8550-4928-b89f-9f1b18939115"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = true;
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = true;
	
}
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_CLGAttestation" id="d8a122a8-3073-4be1-a4a6-617969a17296"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_CLGAttestation" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}CLGAttestation"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="136d088a-2bec-42d6-8c96-c57a9384cb01"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_COPPA" id="94b31b17-70ac-428c-b569-b6a7cdce0a16"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_COPPA" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}GeoPrivacyAssent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="4421910d-8b44-47fe-b67b-125c317ab4b4"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="52d2fdf8-f241-479a-9795-e3f417e50ff2" disabled="true"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_2_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="b8bd0681-c7c2-4b4e-b85d-805504eaa174"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="5aeff55d-dc60-498a-a666-24433039c962"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = false;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = false;
</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B98D789E7311E0401F0A05991189</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certificates\/DLASP_CS_2_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>538eac1e-267d-47ba-b194-f9953171618c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bac177f5-5586-4318-b970-cc997f810ec4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2dc8a3b-c62a-4c6a-a101-634c57a370ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>41774e16-4267-4acd-bbcd-b821f3f16b23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="12294e1d-d433-47b0-bb57-551687a24acc"><con:settings/><con:testStep type="groovy" name="Set Pem" id="9041ae31-1ed0-466b-9947-cae9dd7e843c"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#nodeid}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set Pem" disabled="true" id="f4f441a9-0190-49e1-8355-3b80e0b3ad8e"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>STS</con:value></con:property><con:property><con:name>sName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Copy of PoliciesForFirstUser_without MAC" searchProperties="true" id="af89cc44-c7be-4aca-a7be-ff471cc83f81"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("userIndex","0");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
//RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
//RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
//this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;



if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)

//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;	
}



</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
//RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
//RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c31e517-f3d1-4b5b-8698-6d855054e184</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="E_2_E" disabled="true" id="9cfa7184-c863-4116-ba33-30cde7a0129c"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="End_To_End" searchProperties="true" id="e977cf45-a6f2-4ae0-a5d9-0536ca0179ce"><con:settings/><con:testStep type="groovy" name="Set ALID CID Properties" id="e2691eed-0f44-4b61-b78d-6ceaba2fb910" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("V2") == "07")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_315037.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_315037.txt");
}
else if(tP.getPropertyValue("V2") == "11")
{
	tP.setPropertyValue("alid","urn:dece:alid:eidr-s:512F-4CA1-D6E8-D57D-5012-I");
	tP.setPropertyValue("cid","urn:dece:cid:eidr-s:512F-4CA1-D6E8-D57D-5012-I");
}
else if(tP.getPropertyValue("V2") == "21")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_828445.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_828445.txt");
}


if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	tP.setPropertyValue("urnParentalControlRating","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ABlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult")
	tP.setPropertyValue("urnPolicyID","urn%3Adece%3Apolicyid%3Aorg%3Adece%3A");
	tP.setPropertyValue("urnPolicy","urn%3Adece%3Atype%3Apolicy%3A");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");	
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}
else
{
	tP.setPropertyValue("urnParentalControlRating","urn:dece:type:policy:ParentalControl:RatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn:dece:type:policy:ParentalControl:BlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn:dece:type:policy:ParentalControl:AllowAdult")
	tP.setPropertyValue("urnPolicy","urn:dece:type:policy:");
	tP.setPropertyValue("urnPolicyID","urn:dece:policyid:org:dece:");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set Initial Values" id="e1006d6a-76cb-4180-8977-76e9631548c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","3");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdLLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdLLASPCS"));
tP.setPropertyValue("nodeoid13",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid14",tP.getPropertyValue("nodeIdDLASPCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS")+";");

tP.setPropertyValue("nodeoid20",tP.getPropertyValue("nodeIdLLASPCS2"));
tP.setPropertyValue("audiencelist2","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS2"));

tP.setPropertyValue("nodeoid30",tP.getPropertyValue("nodeIdDLASPCS2"));
tP.setPropertyValue("audiencelist3","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS2"));







</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="89d5135a-ab00-4f75-9579-7944292d2922"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="129044cf-f488-4bd0-b9cf-c9776f25fd83"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="c010e04d-fb86-47d7-acd2-4e175cc58243" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="00fa8b2c-2538-4445-beda-ecf39b6330a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="89c6c976-4710-4902-a0d4-d971753d3bf6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
			tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
		def accountid = tP.getPropertyValue("ACCOUNTID");
		tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="256e3fde-8b53-469b-9967-1fecc5e2f138"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="6dd0299c-0c86-4127-92c4-fc43ab4b8e2b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_FAU1" id="7d79a311-1aee-4fa5-85f7-e0d4c220a543"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);

if(tP.getPropertyValue("count") != "1")
{
	def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop if necessary" id="8d35f450-3681-4429-ade4-270c00a76cf8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunner;
import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunContext;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int loopuntil = tP.getPropertyValue("loop").toInteger();
int counter   = tP.getPropertyValue("Count").toInteger();


if (counter &lt; loopuntil) {
	counter++;
    tP.setPropertyValue("Count",counter.toString());
    log.info "============================= $counter =============================";
    testRunner.gotoStepByName("Set NodeID and counter");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>stream_delete_20150615_010916</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f524a7af-4278-406d-9a4d-e50ccabff836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="E_2_E_without_MAC" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="End_To_End" searchProperties="true" id="05caae5e-400d-4791-a538-71839415e047"><con:settings/><con:testStep type="groovy" name="Set ALID CID Properties" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("V2") == "07")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_315037.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_315037.txt");
}
else if(tP.getPropertyValue("V2") == "11")
{
	tP.setPropertyValue("alid","urn:dece:alid:eidr-s:512F-4CA1-D6E8-D57D-5012-I");
	tP.setPropertyValue("cid","urn:dece:cid:eidr-s:512F-4CA1-D6E8-D57D-5012-I");
}
else if(tP.getPropertyValue("V2") == "21")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_828445.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_828445.txt");
}


if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	tP.setPropertyValue("urnParentalControlRating","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ABlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult")
	tP.setPropertyValue("urnPolicyID","urn%3Adece%3Apolicyid%3Aorg%3Adece%3A");
	tP.setPropertyValue("urnPolicy","urn%3Adece%3Atype%3Apolicy%3A");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");	
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}
else
{
	tP.setPropertyValue("urnParentalControlRating","urn:dece:type:policy:ParentalControl:RatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn:dece:type:policy:ParentalControl:BlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn:dece:type:policy:ParentalControl:AllowAdult")
	tP.setPropertyValue("urnPolicy","urn:dece:type:policy:");
	tP.setPropertyValue("urnPolicyID","urn:dece:policyid:org:dece:");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set Initial Values"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","3");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdLLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdLLASPCS"));
tP.setPropertyValue("nodeoid13",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid14",tP.getPropertyValue("nodeIdDLASPCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS")+";");

tP.setPropertyValue("nodeoid20",tP.getPropertyValue("nodeIdLLASPCS2"));
tP.setPropertyValue("audiencelist2","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS2"));

tP.setPropertyValue("nodeoid30",tP.getPropertyValue("nodeIdDLASPCS2"));
tP.setPropertyValue("audiencelist3","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS2"));







</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
			tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
		def accountid = tP.getPropertyValue("ACCOUNTID");
		tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Copy of PoliciesForFirstUser_without MAC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);

if(tP.getPropertyValue("count") != "1")
{
	def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunner;
import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunContext;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int loopuntil = tP.getPropertyValue("loop").toInteger();
int counter   = tP.getPropertyValue("Count").toInteger();


if (counter &lt; loopuntil) {
	counter++;
    tP.setPropertyValue("Count",counter.toString());
    log.info "==========================================================";
    testRunner.gotoStepByName("Set NodeID and counter");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_delete_20150615_01140</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f524a7af-4278-406d-9a4d-e50ccabff836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>AccountDisplayName</con:name><con:value>Ashwin_Acc_Create_20150615_01140</con:value></con:property><con:property><con:name>ACCOUNTID</con:name><con:value>188A80E4A3487DADE0533E991F0ACA23</con:value></con:property><con:property><con:name>ACCOUNTID_1</con:name><con:value>188A80E4A3487DADE0533E991F0ACA23</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_368915851.txt</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>apid</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt%3A487811501</con:value></con:property><con:property><con:name>APItestSuite</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;</con:value></con:property><con:property><con:name>audiencelist1</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;</con:value></con:property><con:property><con:name>audiencelist2</con:name><con:value>urn:dece:org:org:dece:LLASP_CS_2</con:value></con:property><con:property><con:name>audiencelist3</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_2</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa1.b.uvvu.com</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property><con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property><con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property><con:property><con:name>certspath</con:name><con:value>C:\certificates\</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_596034053.txt</con:value></con:property><con:property><con:name>clusterNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coords</con:name><con:value>FALKY,COORD-10000,COORD-3034,COORD-2999,COORD-2509,COORD-627,UV-135,UV-340,Coord-2180</con:value></con:property><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp1db_23</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA1_APP</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com</con:value></con:property><con:property><con:name>disablePriority</con:name><con:value>P3,CHILD,CLG</con:value></con:property><con:property><con:name>DMR_ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>DMR_APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>DMR_BID</con:name><con:value>urn:dece:bid:org:200002</con:value></con:property><con:property><con:name>DMR_CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>enableFlakyScript</con:name><con:value>false</con:value></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>false</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>expectHTTPcontenttype</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>ExpirationDateTime</con:name><con:value>2013-11-21T22:21:02.329Z</con:value></con:property><con:property><con:name>FLAKYSELECTOR</con:name><con:value>without_flaky</con:value></con:property><con:property><con:name>Flaky_Disabled</con:name><con:value>false</con:value></con:property><con:property><con:name>idempotentdelaymillisecs</con:name><con:value>60000</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:@stdeqp-clu2-scan.va.neustar.com:2115/stdecqa.neustar.com</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>DECEOracle</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>loop</con:name><con:value>3</con:value></con:property><con:property><con:name>microService</con:name><con:value>ON</con:value></con:property><con:property><con:name>NODEACCOUNTID</con:name><con:value>urn:dece:accountid:org:dece:188A80E4A3487DADE0533E991F0ACA23</con:value></con:property><con:property><con:name>NODEACCOUNTID_1</con:name><con:value>urn:dece:accountid:org:dece:188A80E4A3487DADE0533E991F0ACA23</con:value></con:property><con:property><con:name>NODEACCOUNTID_2</con:name><con:value/></con:property><con:property><con:name>NODEACCOUNTID_3</con:name><con:value/></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeoid10</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeoid11</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeoid12</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeoid13</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeoid14</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeoid20</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeoid21</con:name><con:value>3611</con:value></con:property><con:property><con:name>nodeoid30</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeoid31</con:name><con:value>3711</con:value></con:property><con:property><con:name>NODEUSERID</con:name><con:value>urn:dece:userid:org:dece:188A80E4A3497DADE0533E991F0ACA23</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_1</con:name><con:value>urn:dece:userid:org:dece:EBB0A5E473493153E0401F0A0599646D</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_2</con:name><con:value>urn:dece:userid:org:dece:EBB0AEF27D27F645E0401F0A0599777F</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_3</con:name><con:value>urn:dece:userid:org:dece:EBB0AEF27D27F645E0401F0A0599777F</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_1</con:name><con:value>urn:dece:userid:org:dece:EBB0AEF27BAFF645E0401F0A0599777F</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_2</con:name><con:value>urn:dece:userid:org:dece:EBB0AEF27D5AF645E0401F0A0599777F</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_3</con:name><con:value>urn:dece:userid:org:dece:EBB0AEF27D5AF645E0401F0A0599777F</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_1</con:name><con:value>urn:dece:userid:org:dece:188A80E4A3497DADE0533E991F0ACA23</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_2</con:name><con:value/></con:property><con:property><con:name>NODEUSERIDFAU1_3</con:name><con:value/></con:property><con:property><con:name>NODEUSERIDFAU2_1</con:name><con:value>urn:dece:userid:org:dece:EBB0ABABC3307AD8E0401F0A05996465</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_2</con:name><con:value>urn:dece:userid:org:dece:EBB0AEF27D34F645E0401F0A0599777F</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_3</con:name><con:value>urn:dece:userid:org:dece:EBB0AEF27D34F645E0401F0A0599777F</con:value></con:property><con:property><con:name>NODEUSERIDFULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE085AF784BA232C7E0401F0A0599772F</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_1</con:name><con:value>urn:dece:userid:org:dece:EBB0A5E472F33153E0401F0A0599646D</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_2</con:name><con:value>urn:dece:userid:org:dece:EBB0AEF27D14F645E0401F0A0599777F</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_3</con:name><con:value>urn:dece:userid:org:dece:EBB0AEF27D14F645E0401F0A0599777F</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_1</con:name><con:value>urn:dece:userid:org:dece:EBB0ABABC3897AD8E0401F0A05996465</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_2</con:name><con:value>urn:dece:userid:org:dece:EBB0AEF27D47F645E0401F0A0599777F</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_3</con:name><con:value>urn:dece:userid:org:dece:EBB0AEF27D47F645E0401F0A0599777F</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>RET</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>policy_TOU</con:name><con:value>https://qa1.c.uvvu.com/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>portalnodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>primaryemail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>projectPath</con:name><con:value>E:\StreamProjectsNoEncodingR4_4.1_backup\107\StreamprojectR4newtestcases</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa1.p.uvvu.com</con:value></con:property><con:property><con:name>QC_AutoMapping</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_BulkUpdate</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>QC_password</con:name><con:value>******</con:value></con:property><con:property><con:name>QC_Project</con:name><con:value>DECE</con:value></con:property><con:property><con:name>QC_ProjectPath</con:name><con:value/></con:property><con:property><con:name>QC_ReExport</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_ResultExportLevel</con:name><con:value>off</con:value></con:property><con:property><con:name>QC_RunName</con:name><con:value/></con:property><con:property><con:name>QC_soapUI_ARGS</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value>Root\DECE_API\DECE_API_1.0.1.9.B</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value>Subject\DECE_1.0_Release\DECE_API\APIs\StreamDelete</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>StreamDelete</con:value></con:property><con:property><con:name>QC_TestType</con:name><con:value>MANUAL</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>http://stprqc01.va.neustar.com:8080/qcbin</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>pgentry</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa1.q.uvvu.com</con:value></con:property><con:property><con:name>Rights_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_233695895.txt</con:value></con:property><con:property><con:name>Rights_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt%3A828402846</con:value></con:property><con:property><con:name>Rights_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_196237681.txt</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>SAML</con:name><con:value>pVZbc9o6EP4rjPuYMb5gbp7AjAOEcEpDg5M0yUtHyGsQ2BKxZC799ZUMOEBIDm2fPFqvdr/d/bS7lxzFke16nEMiCKOFVRxR7mbShpYm1GWIE+5SFAN3BXZ971vftYumi3ZXtEKv3dB+mhUMULMrul0rWbpTdyp63SoFeuA49cqoalsoxFKV8xR6lAtERUOzTausmxXdKt+bVdcxXbterFRKL1rhERIubUuVoqltQa14Q5sIMXcNY7lcFpelIkvGhm2alvH0re/jCcRIa15uIsocJc2tPi4GgCGKcBGz2Lg0DnQuA+76ZEyRSBPY+go+8mUaZt2QOgEn4y9afheCHg1ZdmwhyijBKCK/kMrPNxATFhS8aMwSIibxh0FYpjKswwrr2HLoF804hHamoQOECUc6nyBra2sIISRAMRQehr2G9uW8qmVX7xNEeciSmB8e/wwP0AVEbA6BzndhbaGdb/BEppqXgN0exVHKyQJuFVnnCAPfVhPw+aYK3xMIyapPuCToiit0xj68o+MmG20yBi7+pkB7xdkYeURRCs3xr6dW52IVfh16X2+uYvIyuutWh/ZsVHYaGYB95UyQl3ZzPCJlTqLNjbCbGt1g7a1/sE6nZ04XJfPh2rtLWB2Y7f9gjw83refx3eQ1nr4Y4RhfRFAZeFZC+lcefrFuPL6KaLocPZW6/9WuX3wTL8bXlWh9U71ozR6mg+6yejV6GMwuqtbLdDn0F30fXeNXUvZxiG5/kedn5k27jn3xNHi4XZtfa1XnrmstJtP5qvP6fFMm1tVsFLWn6eCukYezh/9QtnvzfjqaAha7o6JBr124llVC4vNmpiQk0MNM1Z2r5sMFUKE11S3VO9xUtjsSuLKGm7NVq3k1s+N4JadebXvtjlkulTr1unVtei3PLu2azAbFEcQWoyFRvlTL3dDmc4A4djnQABJ9wVLZ6bj2icU2EqjQo0P5CBjlcM9ke55HM74ei6BkLkOrzCuhIyo1PJvI9n3LxIAOEi8UkBz0ZMs86MlDwGROQDVuxWsuic2FzMUrWqQisooLVKSQytaeqC7r2k6tbHASzyNQSI2YBWkExflknmXG4JuvrSPMM+mwc5+9tg/jOv63S4HUCYhS4CqWK5BlhBPDxdoF8i7gyskhtDPvpQFRD0vmUyQEb5Ac/nqjieJHzpF23/O/70Dnun9w92fL/2n9pYH+Pzjv/6tzWcv3N41P8mkclzJ3FCzIntvd1iHnl+x4zR0RX5FVfC2mi0Wacc9xSkYizRuKBIZpGz7gVPbk9T2bATVyK8ZZAzAHfuQ8lx9CTMWE+gIJiOVbKWTHMzYeH7jaeHryka/OXacOXMrUCViJU7JWJLc1hfjThQ67WOlJ8Xf5WbIkeKvYCVt7fmSccuERhI7VSQ2/9Qe8wEyaJbJts2Tf+CkDp5wfCvMk51iEJNQoFfDxn4Lqxw0NYcxSKnptLRPsz4gMp1jPwX1TemcmG0P5Xkr+fzHVSUYBDHKb5SSzr9YLVz0BOt6bM1unH4ya2mej5hBd8534vWQvT8ccb/4G</con:value></con:property><con:property><con:name>SAMLBAU1_1</con:name><con:value>pVZbc9o6EH7vr/C4jx0j+UrwBGYcwMQJCSmQ5vLSUWQBSoxsLBkIv76yiQm35KQ9Tx6tV7vfXvTtnnI0jQzX45ykgsZMCVp19bdjwxE+qULNcnBNs0KCNaTbuqafoCpCRq3q2LaqBJxnJGBcICbqqgF1U9N1zdCHuunqlgtrlRp0HlXlF0m5NC1VKlBVltOIcbdwW1ezlLkx4pS7DE0JdwV2B95V15WaLioxqY3TNcrCYdqYCJG4AOCKxEWiCFdwPAWnYEfnNOTugI4ZEllK3nyGvK6+3V0sFpWFWYnTMTAghADWgNQJOR1/VxvfysskDNgoXp+biMWMYhTRFcpBXRExiUPFi8ZxSsVk+oFpHegwN62RJdawbrHvKnh3UKD7oqUdkClHGp8gvTTWJyOSEoaJctsP6ur3r1VwfXeYIsZHcTrle+e/g0TYnERxQkKNl5GV6L5u8Ui6GqcEuwHDUcbpnFznbZIgTLhyk5IRXXYpl80XcqUov7LkZYcR/DclOQXbOCVscCQzLTomXPxLvbZrtbbyC0UZacDLB+/HDQgn7c5Fz/7xsmxPSHD92rm0HuoFhG3lNahNqd/O+4266au3S7ezydOw0+pdjlfZxa0164ymz77dXVV96F85d79ujefzef8nfPB7BA074C54emku8F0qVo+3wNfPV30fr8DFeatnfet3q214D+aPd33RmXADGxfzYPYzOGs99sfQPLsJqg+LxSB4hM7kMrr2s6jmv553785Xj/ehnui9++FVB1+G3uW9/q268gFbvQZJmoysBb9JzNv6e0zbMewKSzoYZE/PBIvymLdG0FJ8WS8kPqeWXEJDbVSouknOT1wQJtRGfiunFTeT5ENDVxZzfW6fnUHPbltV06qZum22oQV1H3rQrtUcy2mV/LNGsQexGbMRzX3lDLvun88B4qnLCQtJqs3jDE8IVz+x2EICKQHry4cRM06GsWRwaHiGY7W9dtXxmq3qSdtonjRNx7flwTRquqpcx6LHeqk3EiTdZW9nh737BNOEkpzi8z7nstG5kCmZoXkmIr0yRxVGMjkE0pyHXcM6sQGn0yQiOWAwjcMsIpVkkhQJAnz9NTSEeSHtt4fF+/swvP1/ZSakTkhzBZ7HckZkNcnBGDJduwzkIGDr6LgqzXtZSPNnJtMqUorXSHZ/vXdL3iabVml1vcFNCXqj+xd3fzcHv/V/NND9vwZkPQ5vgk9yAvbLsXEUzumW23KcywklOaxRNtMMVWaVbD7Pivap5vycSvNAB7AKBgRnkmRfh/ELYWBjAnxpvm1Q73neyHfxZWLCBgIJMpXNrhTHLyw3A8Lz5SaQj3X51c1px6XMmyBLcUzWjOQOlCP+dE3CLs71pPhGfhZxGr6X64itLT8yTrnRCMrG+SmfZq8fNAWOpVkq6TdOt40fM3DM+a5wk+QNFiG76SkT5OM/Ss6rdRVhHGdMBC21EGxzfYFTvCbEfVc6MFPMk7cFYck/XBDur7oDybpTpG506X8ra7RoF0zkLU4LLHV1KXdd6ZyNt2bLG8CD8QLNtqfr/onpONvjxYbWZrzsRtI4EB9KtnK6/x4afwA=</con:value></con:property><con:property><con:name>SAMLBAU1_2</con:name><con:value>nVZdU9s6EH3vr/C4j53En8Sxh2QmIR/XU2iBBGh56Qh57QhsOViSE/j1V3KwSULg0vvk0Xq1e3b36EjHDGWpHQwYg4KTnGrhqKf/wRh1EPLNloV8aLlHrt9CuGu1bCt2HNuPwfZcXQsZExBSxhHlPd02LadlKZ+55QRWJ3Ccttft3OraNRRMhpYubVPX1llKWVCl7emioEGOGGEBRRmwgONgNjg7DaRngGpMev94g7JKWPQXnC8Dw8DtCDCkKW7jPDOOjR2f44gFM5JQxEUBLzkj1tNf9q5Wq/bKaedFYtimaRqmb0ifiJHkq97/Um+GKKRxvlmfIJpTglFKnpECdQZ8kUfaIE3ygvBF9k5oy7BMFboFa9zClku/6sZrggrdJyPtgCwYarEFsupglxBDARSDdnUZ9vSvn5vgZu+8QJTFeZGxvfXfQQJaQpovIWqxurIa3ecjHmhX/xhwEFKcCkZK+KFoskQYmHZeQEzWp4RJ8kVMq8avrVnNMMB/M5JjYxunhG0c6MyIJMD4/5nX9qw2Ua5RKqA/vLLi3LXuE1GuVufXD94sid3FFY7Hea+CsO28AdWM+mW9T9SGVy+byMi1ptfZPz/mzj2Bch6h7jS/+52yaUmu75czk/O5bQ3jwc8HK+lMLy+en28MMJPuvRC/PfL7u3czLqbJr6UYF1/Wq2l09nSRjtOoiwUsLs6/xafZLb4b3Rh+KLKQ2GLYfTbOv9tX7LsXCupf8OH1BCI3HJpPj9zxF2e3s9R4eC6/sNKZmskCX04X2dPtQ+fbmdl7rWm7hl1jLQczcXcPmNdLRY1wpE3kvBD/WFqUhUStuHINlkqfGAfK9b7apWQlEFJ8SBTIYW7W4+HQHIwntjeyvUnHPRqbrmlNzIF55Pue501q/dmg2IN4ktOYqFxKYTf8+RggzgIGNIKiVeYCL4DpH0QcIY60kF7Kg5FTBvNcKrhzYrquP/FH/pHb9Ue2BOsP3ZHj+KY3MZV6/8j5T/qzGMQcil317uyo9yVgsiSgJF7xnEmiMy5b8ohKwVOrXaI2BSEvgULpcGC73SODkWyZggJsZHkkUmgvF8uqQQbbfG0pR6yynp4OZud/TmZ/7OoYvlvl/r+6IdInIsqBqZKGIIcKB24ju67nnbrtvVurDj8QEVGnTXaXFwRvkOz+eiWNYkvDmNfCauTNhn3DTnBjv64mX1QS3LC/ubKl4ktN6NfDeUTtx7YoS1GNw1N6V8jwhmWYnjEDLKRoPc3zB6BGE8L41H3RoN7L3Nh38Qm+oDOOOGSSPFq1/MRjYQZMPRZCSf71Z18iOyll3zis+SHbSSrfFArxh88OHGDlJ83n8rPKi+h1XAdibeWRdcoXAic0USt1Ozy9ww2cy7BEyllebAc/FOBQ8l1j0+QGC5dsuhMc3v+jKZ3q6QjjXFAejvTKsK2dFU7+tITg1elNmEqfXy7cNXv3wv11djqTKpYhvfEl/+3cIhVdMMhdjFRYevpavh1lcppsafULwINyfeIcfSTXu5X035jfWrZ6un8e+v8C</con:value></con:property><con:property><con:name>SAMLBAU1_3</con:name><con:value>nVZdU/I6EL73V3TqpVP6SQsdYaZQOaKgIohHb5yQphBtU2xSQH/9mxRaAdHDe6462W52n9198iTnFMSR4XqUopThhEhdvyG/gIlhIj0IlcAMgWLZ5kSp1W1bqVl2WK+CyUQPbVnqUpqhLqEMENaQDU03FV1XDH2km67uuNVaxarVn2VpjFLKQ3OXiiZLqzgi1M3TNuQsJW4CKKYuATGiLoPu0Ov3XO7pggKT3Dxfo8wTps0ZY3NXVWElQBBFEazAJFbP1R2f84C6QzwlgGUp2uQMaEPe7F0ul5WlWUnSqWpomqZqdZX7BBRPT+XmSbEZBV0SJut1G5CEYAgi/AkEqD5isySQvGiapJjN4h9C66quidAKWkEF6hY5ldWvBDm6IyPtgEwpUOgM6EWwexSiFBGIpIf7bkM+PW6C672jFBAaJmlM99Z/BwmRBYqSOQoUWlRWoDs+4oF2Nc8RdLsERhnFC3QjaDIHEFHpLkUhXvUw5eQLqJSPX1rRgmEI/s1IztVtnBy2eqAzPp4iyv7PvLZntY4yBlGGmqrVxn318u4ZOtH8Ke6eDQPj2WMj3Xpr5BC2ndegylFv1vtELXm12RT27GWgrXrh5TC6nV+P8e00fXwe2bUaIjefg+j1H6qvMm8SLD66MHUmmTM+AxlwklkNr25fL+3P1hybo8XVkl6e4I+xMbiada6tuhc8eOrw6d2MHsfLZeJf++Ed087sZSt2Olr82g9Xpqcb17VoYPgXz0/vIEr6aXhmT/321SDwHk50PwCPVwPHfxu3BgzefF4/NL5q2q5h11jIwTCbvCLIiqWgRteXOnxegP0uLcKCAyXMXd250CfKEGFyU+wSsuJmXHxw4PJhrtcXrZbmXXQMxzecjm1VLzRL0zuap1XrdcdxOoX+rFHsQWwnJMQil1DYNX9+BwhjlyISoFRZJBmcISr/EtEHDEhdcs8PRkIoGiVcwTXH0q2a0fH1qqP7lmmbulHV/HbVqjmeaemydJOwW3KbeiFD6a562zvqfY8gnmMkJF7wnHKiU8Zb8g4WGYv0ygJUCMr4JZAKHXYNq1ZVKY7nERKA1TgJsghV5rN53iCVrr+GAiDNrX7PG969tIcvRn4Mf6xy/1/REO4TYOFARUktxIeKDtxGVlHPt7qtg7dWEd7LAixOG+8uSzFcI9n99UUawZaSMV+FFcjLDfuGneDqfl1lvmCBYcn+8srmis81oVkM5x1U3ivZYpHl43CE3qU8vKqrmqMOEcy4aH2MkjdE1DKEetR9UaLey1zad/FlbEaGDDAUc/JI+fKIx8IQUfFY6HLyr459ieyk5H1jaMUO2doRf1MIxL8+O6ALhR833/HPMkmDr3EdiLWVh9fJXwgMk6lYidvh4wduwISHxVzOknQ7+KEAh5LvGssml1gYZ9MkY+jnP5LQqYYMIEwywrq+nBu2tTPHyT7myP1y+hYm1+fNhbuiP164//Z7Q65iMZBLX/zfzgrO6QIR30VxjqUhr/jbkScn0y2t3gA8KNdts/qbXO9W0vxm/m7Z6un+eWj+AQ==</con:value></con:property><con:property><con:name>SAMLBAU2_1</con:name><con:value>pVbbcqpKEH3PV1DkMYVcBBUqWoWgCTnmstXc9ktqMrQ6OzAYZlCSrz8DBqPG5CT7PFHT9HSvvszqPmYojgzHZQxSThIqBX5bfkB2Q2s1sKG0Hi1bMU30qKAQg2JPxLlpWQZotiwFjGUQUMYR5W3Z0PS6ouuKoY/1uqNbjmXULNP6LUs3kDJhWqjUNFnK44gyp3TblrOUOglihDkUxcAcjp2Rez5whKaDKkxy53iFsnSYdmaczx1VxbUQMEQRruEkVo/VLZ3jkDkjMqWIZym8+QxZW367u1wua8t6LUmnqqFpmqrZqtAJGZkeyp2D6jKEAZ0kq7OHaEIJRhF5RQWoc+CzJJTcaJqkhM/iT0zrqq4VphXIsYJ1kx7K6ruDEt03LW2BTBlS2AzplbEhTCAFikG6HgZt+fB7FVzdHaeIskmSxmzn/DNIQBcQJXMIFVZFVqH7vsU96eocA3YCiqOMkQVcFG0yRxiYdJXChOQDwkTzhUwqyy/lrOowwD8pybG6iVPAVvdkxidTYPxv6rVZq5WVGxRl0DFP1EZye+09E+/eOyOL8fzu5NY6q9/EZruEsKm8ArUu9dt5t1HXffV2aR692IOTcRcdaeM0n/Tnd6EXNW9HQ886471G77nnLXTj/rZ75eZ9ej7yUTwd26e/rNklufrVbKCn0R9iJsx/uckPzk/tFh/YZ6HXmBqvy9PfF5MhebzLrwLtcti9Pr0/g6deSwuSnjp48uvZmQ9aHFyi5J/z26fB+I972T1pHh2N43w6PPD16UVAEL5ogvrip6/XS7f9HtNmDNvCig5G2eMfwLw6Fq0R+FJf1Avxr6mlkJBQmZSqzrzgJ8aBcrlT3CpoxckE+ZDQEcVcnXvdrub2+kaz6/b7DdPqaaam9zVXs2y72Wz2K/5ZodiB6CV0QgpfBcOu+udrgDh2GNAQUmWRZHgGTP7Coo84kgI6FA8joQzGiWDwnuW2Wq7d9T3Da3ldw7aaXavVbbmtnu+aDU+WLhJ+SS9Td8Ih3WbvxhZ7DwGTOYGC4os+Z6LRGRcpeUaLjEd6bYFqFDIxBNKChx3DbFkqI/E8ggKwGidhFkFtPpuXCVLZ6msoCLNSOuyNy/f3aXi7/6pMCJ2QFAqsiKULopqwZwyZVSAfAjb3jqvKvJuFpHhmIq08JXiFZPvXe7cUbbJuFX/gjq4q0GvdH9x98EYP+l8aGPxfA6IeH2+qX+RE3S3H2lG4IBtuq3EuJpTgsE7VTM+o9lzLFousbJ9mwc+pMK/qqtZUR4AzQbIv4+QJqLo2oX5rvq1R73hey7fxZXxGRxxxiEWzS+XxG8vNCFix3ATisebf3Zy2XIq8ccj5PpkXiR2oQPzlmoQdXOgJ8ZX4LJM0fC/XHlsbfkScYqPhhE6LUzHNXj5pCpwIs0TQb5JuGt9nYJ/zbeE6yWssXHTTY8bh8z9SwattGWGcZJQHvlwKNrm+xMlf5uC8K30wU86TtwUhZ58uCHfng5Fg3RjJa13y38oKKdsFg7jFSImlLedi1xXO6XRjtrwB/DBetHrP1fV+q95obI4XSzP9dQK3Iul8EH+UbOR09z10/gU=</con:value></con:property><con:property><con:name>SAMLBAU2_2</con:name><con:value>nVZdU+JKEH33V6TioxUmCR+BlFAVPrLGi+IC6q4v1jjpwLDJBDMTQH/9nQQTAdHr3heo6fR0n+4+c2bOOY5C03Y4h0TQmClev60+VnUfsGURrfaEA/lTb2q4hrHWNPyqblYNqOmGqnicp+AxLjATbdXUjapmGJppTI2qbVi2Uas0W8aDqtxBwmVo6VLRVWUThYzbedq2mibMjjGn3GY4Am4LYk+cq6EtPW1cYFI751uUecKkMxdiaSNEKj4QCENSIXGEztGez7nP7QmdMSzSBN5y+rytvu1dr9eVdbUSJzNk6rqO9BaSPj6ns1O1c1JsBt9jQbxd9zCLGSU4pK84A3UFYh77ihPO4oSKefRJaAMZehZagw3RiFFjpyp6T5Cj+2akPZAJxxqfY6MINoYAEmAElNux11ZPvzfB7d5pghkP4iTiB+u/gwRsBWG8BF/jRWUFuu9HPNKuzjkQ22MkTDldwXVGkyUmwJWbBAK6GVIuyedzJR+/suEFw4D8zUjO0S5OCRsd6UyfzoCL/zOv3Vlto9zhMIWOT/+JJj+CdbpYLVYjLiyBxMz/cf96/7udQ9h13oIqR/22PiRqyau3TdevsRGj+lzvulPXRA0TnV2GD5ej4MK5hYbQ1wFOva4gDf9p/ods7lrXQ0KoVfN/RZG5XgQhvhmP4YouaHN9Etw93E4fbq76AV5DPJmii+VyYPjufRBfPy8vnMEiGnjQ24xq8LN7m85uo3B4cW14vQRu0+bZ4ufvy2YwdvHFCJ2dRIbQwzO3uWq9XI6Gly4d1drvNe3WsG8s5GCSPi2AiGKZUcPrK66cFxZfS0tmob4W5K72MtMnLoAJtZPtymTFTqX4UN+Ww9yuB92u7gxc0+rXHbdRqw90eYJc3dHrrZZlWW6hP1sUBxB7MQtolitT2C1/vgZIIpsD8yHRVnFK5sDVLyL2scCKx8byYMSMwzSWCt5wB0a10XX0br9X7Vo1R29YrmNWrUGj33Nblqpcx2LERokTCEj21buxp95jIHRJIZP4jOdcEp0L2ZJnvEpFaFRWuMIglZdAkumwbdaadcRptAwhA4yi2E9DqCzny7xBiG//TQ0TnluHQ2dy89ibPJr5Mfy0ysNvRUOkj08zB56V1AU5VDhyG+lFPZ/UbR7cWkV4J/Vpdtpkd0VCyRbJ/qd30mRsKRnzXliBvNxwaNgLjg7rKvP5K0pK9pdXtlR8qQmdYjjPuPJcSVerNB+HleldIsMjA+kWmgBJpWi9TOM/wFAZAn3rvihRH2Qu7fv4UjFnE4EFRJI8Sr78xmNhAjx7LHiS/JvvvkT2Usq+CdiIY7ZeKN8UGeIvnx3EJpmfNN/Iv3Wc+O/jOhJrJ4+sU74QBGWzbJXdDi+fcIPEMiyVchYnu8GPBTiWfN9YNrnEIiSbnlIBn39RMp1qq5iQOGXC66u5YVc7c5ziZQn2u9OHMLk+v124G/7phfvrajiRKhZhtfSl/+2s0ZwuBOQuTnMsbXUj344yOZvtaPUbwKNy3avWv5Lr/Uo6H8wfLTs9PTwPnX8B</con:value></con:property><con:property><con:name>SAMLBAU2_3</con:name><con:value>nVZRd6I6EH7fX8FhHz0IERTlVM9BrVtb3e1Ft9vty54YBk0LQUlQ66+/AQtVa3u794mTYTLzzcyXL7ngOAprjss5JILGTBn22+ofH9vGrBnYWquJTM0yIdBayLA000ek2WgiYjZmqjLkPIUh4wIz0VZrhnRFSKuhKTId1HQss4qsxoOq3EHCZWjpUjVUZRuFjDt52raaJsyJMafcYTgC7gjiTNzxyJGeDi4wqZ2LPco8YdJZCLF0dJ1UfSAQhqRK4ki/0I98LnzuTOicYZEm8JLT5231Ze9ms6luzGqczPWaYRi60dKlj8/p/Kva+VJsBn/Igni/7mEWM0pwSHc4AzUGsYh9xQ3ncULFInonNNKRkYXWYEs0giz2VdVfE+ToPhnpCGTCscYXGBXBPAggAUZA+ekN2+rXz01wv3eaYMaDOIn4yfrvIAFbQxgvwdd4UVmB7vMRz7SrcwHEGTISppyu4XtGkyUmwJXbBAK6HVEuyedzJR+/suUFw4D8zUgu9EOcErZ+pjN9Ogcu/s+8Dme1j3KHwxQ6lasbxH70ycPVOPo+C3D4yzcE3CMRXbZzCIfOe1DlqF/Wp0QtefWyydv5HkxHY88i8O1655tuOoWnX/cuemrcNMStmM+WQYU2fv4S4RQq8e/RqLdw+aXn2q1KsOxuu3fzkf7gP949P3+xd+uHe2p6vyuPAnevJ+HimzexreBp1wjgepV6ccW/WlmoZZu721G4BPSPP7zezXb8qnLtbTYevW/yb7erVSNwvzyy4UI8jHuCXffHdzc2+R23X2s6rOHYWMjBJJ09AhHFMqPGsK8M5Lyw+FhaMgv1tSB3dZaZPnEBTKidbFcmK04qxYf6jhzmfn3Z7Rru5aBm9+vuoGHVLw3LQAPDNeqtlm3bg0J/9ihOIPZiFtAsV6awe/58DJBEDgfmQ6Kt45QsgKsfROxjgZUh8+TBiBmHaSwVvNa0Bq5h1tHANAb13qWNuv16o2n2rcEAdZs9Vfkeix/sR+IGApJj9W4cqbcHhC4pZBKf8ZxLonMhW7LC61SEqLrGVQapvASSTIedmtWs65xGyxAywHoU+2kI1eVimTdI5/tvTcOE59b+yJ3c/ulN/tTyY/hulaf/ioZIH59mDjwrqQtyqHDmNjKLet7UbZ29tYrwburT7LTJ7oqEkj2S41+vpMnYUjLmtbACebnh1HAUXD+tq8znrykp2V9e2VLxpSZ0iuGscHVVTdfrNB+HneldIsPrSDdsfQIklaL1PI2fgOllCP1T90WJ+iRzaT/Gl4oFmwgsIJLkUfLlJx4LE+DZY2Eoyb/97EvkKKXsm4CtOGfrhfJNkSH+8NlBHJL5SfOt/GzixH8d15lYB3lknfKFICibZ6vsdnh+hxsklmGplLM4OQx+LsC55MfGssklFiHZNEsFvP9HyXSqrWJC4pSJYV/NDYfameMUz0twXp3ehMn1+eXC3fJ3L9z78WgiVSzCaulL/9tZozldCMhdnOZY2upWvh1lcjY/0OoXgGflumfWP5Lr40o6b8xvLQc9PT0PnX8B</con:value></con:property><con:property><con:name>SAMLFAU1_1</con:name><con:value>pVZbc9o6EP4rjPuYMb5gbp7AjAOEcEpDg5M0yUtHyGsQ2BKxZC799ZUMOEBIDm2fPFqvdr/d/bS7lxzFke16nEMiCKOFVRxR7mbShpYm1GWIE+5SFAN3BXZ971vftYumi3ZXtEKv3dB+mhUMULMrul0rWbpTdyp63SoFeuA49cqoalsoxFKV8xR6lAtERUOzTausmxXdKt+bVdcxXbterFRKL1rhERIubUuVoqltQa14Q5sIMXcNY7lcFpelIkvGhm2alvH0re/jCcRIa15uIsocJc2tPi4GgCGKcBGz2Lg0DnQuA+76ZEyRSBPY+go+8mUaZt2QOgEn4y9afheCHg1ZdmwhyijBKCK/kMrPNxATFhS8aMwSIibxh0FYpjKswwrr2HLoF804hHamoQOECUc6nyBra2sIISRAMRQehr2G9uW8qmVX7xNEeciSmB8e/wwP0AVEbA6BzndhbaGdb/BEppqXgN0exVHKyQJuFVnnCAPfVhPw+aYK3xMIyapPuCToiit0xj68o+MmG20yBi7+pkB7xdkYeURRCs3xr6dW52IVfh16X2+uYvIyuutWh/ZsVHYaGYB95UyQl3ZzPCJlTqLNjbCbGt1g7a1/sE6nZ04XJfPh2rtLWB2Y7f9gjw83refx3eQ1nr4Y4RhfRFAZeFZC+lcefrFuPL6KaLocPZW6/9WuX3wTL8bXlWh9U71ozR6mg+6yejV6GMwuqtbLdDn0F30fXeNXUvZxiG5/kedn5k27jn3xNHi4XZtfa1XnrmstJtP5qvP6fFMm1tVsFLWn6eCukYezh/9QtnvzfjqaAha7o6JBr124llVC4vNmpiQk0MNM1Z2r5sMFUKE11S3VO9xUtjsSuLKGm7NVq3k1s+N4JadebXvtjlkulTr1unVtei3PLu2azAbFEcQWoyFRvlTL3dDmc4A4djnQABJ9wVLZ6bj2icU2EqjQo0P5CBjlcM9ke55HM74ei6BkLkOrzCuhIyo1PJvI9n3LxIAOEi8UkBz0ZMs86MlDwGROQDVuxWsuic2FzMUrWqQisooLVKSQytaeqC7r2k6tbHASzyNQSI2YBWkExflknmXG4JuvrSPMM+mwc5+9tg/jOv63S4HUCYhS4CqWK5BlhBPDxdoF8i7gyskhtDPvpQFRD0vmUyQEb5Ac/nqjieJHzpF23/O/70Dnun9w92fL/2n9pYH+Pzjv/6tzWcv3N41P8mkclzJ3FCzIntvd1iHnl+x4zR0RX5FVfC2mi0Wacc9xSkYizRuKBIZpGz7gVPbk9T2bATVyK8ZZAzAHfuQ8lx9CTMWE+gIJiOVbKWTHMzYeH7jaeHryka/OXacOXMrUCViJU7JWJLc1hfjThQ67WOlJ8Xf5WbIkeKvYCVt7fmSccuERhI7VSQ2/9Qe8wEyaJbJts2Tf+CkDp5wfCvMk51iEJNQoFfDxn4Lqxw0NYcxSKnptLRPsz4gMp1jPwX1TemcmG0P5Xkr+fzHVSUYBDHKb5SSzr9YLVz0BOt6bM1unH4ya2mej5hBd8534vWQvT8ccb/4G</con:value></con:property><con:property><con:name>SAMLFAU1_2</con:name><con:value>pVZbc+I6DP4rTPZxJzg3bpnCTAq0y5Z2acP29tJxHQFug01jh9uvP3aAFCjtYXefMlZk6ZP0WdKJwOPY8QMhIJGUs8J8HDPhZ9K6kSbM51hQ4TM8BuFL4ofBZdd3ipaPN1eMQqdVN568mutapWrZtKNy1fTKZWw+E8szrUGpGtll9dcGpSpECh0mJGaybjiWXTItdaXUtyq+W/Ntr+hWvEejcAuJULaVStEy1qDmom6MpJz4CM1ms+LMLfJkiBzLstH9ZTckIxhjo3GyiihzlDTW+qQYAYE4JkXCx+gE7eicRMIP6ZBhmSaw9hV95stCVg0pnUjQ4TcjvwtRhw14dmxixhklOKZLrPNzCXLEo0IQD3lC5Wj8aRC2pQ2bMCcmsT32zUC70I40tIMwEdgUI2yvbd3AABJgBAq/bzp149txVcuu9hPMxIAnY7F7/DM8wKYQ8wlEptiEtYZ2vMEDmWqcAPE7jMSpoFO40mSdYAJiXU0gx5sq9BIY0HmXCkXQudDo0Da8veMqGy06BCH/pkBbxVkZucVxCo3z9H75O5oky5d29/vLRD5f8p59djq1L17rGYBt5UyQl3Z13CNlTqLVjbvFxXJ49zhc3ARNtCxxC7vP1+zifvbodOc1UXkgD73XR6/142d5UAkn7ZCjhzc38DzrtMbu4oeLclsGtxyf2zE5a/euAx7alCxHp2HFulrAd5b0Lyo/SbPfxaOzcOi2o6UTltzB1V0lstGPEK5n56PYeY7Lc1RhnZ5sodsBr5Z7L+yc9MD98VK+at9Bk5wN63k4W/h3ZZs3H6bPL0Dk5qhp0GkVzlSVsPy6mWkJjcxBpupPdPMREpg0GvqW7h1+qtodjXxVw9XZrlaDqtX2AufUq7SCVtsquW67VrPPrKAZOO6myaxQ7EFscjag2pduuSvafA2QjH0BLILEnPJUdTphfGGxhSUudNiNegScCehz1Z6TeGxZM868mNZqTjRfJouyM1INs3DF5S/2KwkGEpKdlmxbOy35BgidUNB9W9NaKF4LqVLxhqepjO3iFBcZpKqzJ7rJ+o5XLSFBx5MYNFA05lEaQ3EymmSJQWL1dUxMRCa9afezx/ZpWPv/NhlQOhHVCkLHcgqqinBgtlibQD4EXD44gzbmgzSi+l2pdMqEkhWS3V/vLNH0yCnS6gZhbwM61/2Du0/N8Mn+SwPdf3De/VfnqpYfb6Iv8on2S5k7iqZ0y+1m6VDjSzW8xoaIb9guvhXT6TTNuOd5LkqUeaRJgCwHhUBS1ZIXff4KDOVW0FHzLwe+5zyX70JM5YiFEksYq7dSyI5HLDwhCL3wdNQbnx+7Te24VKmTMJeHZM1YLWsa8Zf7HPGJ1lPinvrMeBK9V+yArS0/Kk6170jKhvqkZ9/iE14QrsxS1bV5sm38kIFDzneFeZJzLFIR6jmV8Pmfgm7HdQMTwlMmOy0jE2yPiAynXEzAf1f6YCabQvlaSv9/LzVpRgGiVmCln9nX24WvnwAbbo2ZtdNPJo371aTZRdf4IP4o2crTPscb/wE=</con:value></con:property><con:property><con:name>SAMLFAU1_3</con:name><con:value>pVZbc+I6DP4rTPZxJzg3bpnCTAq0y5Z2acP29tJxHQFug01jh9uvP3aAFCjtYXefMlZk6ZP0WdKJwOPY8QMhIJGUs8J8HDPhZ9K6kSbM51hQ4TM8BuFL4ofBZdd3ipaPN1eMQqdVN568mutapWrZtKNy1fTKZWw+E8szrUGpGtll9dcGpSpECh0mJGaybjiWXTItdaXUtyq+W/Ntr+hWvEejcAuJULaVStEy1qDmom6MpJz4CM1ms+LMLfJkiBzLstH9ZTckIxhjo3GyiihzlDTW+qQYAYE4JkXCx+gE7eicRMIP6ZBhmSaw9hV95stCVg0pnUjQ4TcjvwtRhw14dmxixhklOKZLrPNzCXLEo0IQD3lC5Wj8aRC2pQ2bMCcmsT32zUC70I40tIMwEdgUI2yvbd3AABJgBAq/bzp149txVcuu9hPMxIAnY7F7/DM8wKYQ8wlEptiEtYZ2vMEDmWqcAPE7jMSpoFO40mSdYAJiXU0gx5sq9BIY0HmXCkXQudDo0Da8veMqGy06BCH/pkBbxVkZucVxCo3z9H75O5oky5d29/vLRD5f8p59djq1L17rGYBt5UyQl3Z13CNlTqLVjbvFxXJ49zhc3ARNtCxxC7vP1+zifvbodOc1UXkgD73XR6/142d5UAkn7ZCjhzc38DzrtMbu4oeLclsGtxyf2zE5a/euAx7alCxHp2HFulrAd5b0Lyo/SbPfxaOzcOi2o6UTltzB1V0lstGPEK5n56PYeY7Lc1RhnZ5sodsBr5Z7L+yc9MD98VK+at9Bk5wN63k4W/h3ZZs3H6bPL0Dk5qhp0GkVzlSVsPy6mWkJjcxBpupPdPMREpg0GvqW7h1+qtodjXxVw9XZrlaDqtX2AufUq7SCVtsquW67VrPPrKAZOO6myaxQ7EFscjag2pduuSvafA2QjH0BLILEnPJUdTphfGGxhSUudNiNegScCehz1Z6TeGxZM868mNZqTjRfJouyM1INs3DF5S/2KwkGEpKdlmxbOy35BgidUNB9W9NaKF4LqVLxhqepjO3iFBcZpKqzJ7rJ+o5XLSFBx5MYNFA05lEaQ3EymmSJQWL1dUxMRCa9afezx/ZpWPv/NhlQOhHVCkLHcgqqinBgtlibQD4EXD44gzbmgzSi+l2pdMqEkhWS3V/vLNH0yCnS6gZhbwM61/2Du0/N8Mn+SwPdf3De/VfnqpYfb6Iv8on2S5k7iqZ0y+1m6VDjSzW8xoaIb9guvhXT6TTNuOd5LkqUeaRJgCwHhUBS1ZIXff4KDOVW0FHzLwe+5zyX70JM5YiFEksYq7dSyI5HLDwhCL3wdNQbnx+7Te24VKmTMJeHZM1YLWsa8Zf7HPGJ1lPinvrMeBK9V+yArS0/Kk6170jKhvqkZ9/iE14QrsxS1bV5sm38kIFDzneFeZJzLFIR6jmV8Pmfgm7HdQMTwlMmOy0jE2yPiAynXEzAf1f6YCabQvlaSv9/LzVpRgGiVmCln9nX24WvnwAbbo2ZtdNPJo371aTZRdf4IP4o2crTPscb/wE=</con:value></con:property><con:property><con:name>SAMLFAU2_1</con:name><con:value>pVZbU+JKEH7fX5GKj1bIHUhKqAogR1yQBbwcfdkaJx2YNZmBzARwf/1OgkFA9Oiep9R0erq/vszXfcZRElt+wDmkgjCq9DoN9acLBnZqkaPVrVpVc2ruo1Z3Q6xhBwH26jaEbk1Vepxn0KNcICoaqmWYtmaammVem7ZvOr5jVupW/UFVbiHl0rRUqRiqsk5iyv3CbUPNUuozxAn3KUqA+wL7k2DQ96Wmj0pMavNsg7JwmDZnQsx9XceVEDDEMa5gluhn+p7OWcj9CZlSJLIUXnyGvKG+3F2tVpWVXWHpVLcMw9ANT5c6ISfTE7X5rbwMYY9GbHNuI8oowSgmv1EOagBixkIliKcsJWKWvGPa1E0jN63BWqbPdOiJqr86KNB90tIeyJQjjc+QWRobQwQpUAzKzbjXUE8+V8HN3esUUR6xNOEH569BArqEmM0h1HgZWYnu8xaPpKt5BtjvURxnnCzhKm+TOcLAlR8pRGTdJ1w2X8iVovzKmpcdBvgrJTnTd3FK2PqRzHTIFLj4m3rt1mpj5RbFGTSHp3eDK8++N1HmdUj8/bk2mCzdp/DX/ahRQNhV3oDalvrlfNio2756uYSri97vB2MwNEhi9ofrVXy3GHj/BPr9RbxYGd2HcbyMnrqth7rjXqFxh3Fg41N6tYrM4aQHTmJ7CHgQ6jcs/La+m9nByLHu9cunm6wr7MzzhqdO2xv1+ci6p7dR+zbrJnheo96iWru8iryIefX04u43GnVrj5fGHbLmndP5d330rZW5K3v29Hyxvn68uX++GPFR4zWm3Rj2hSUdTLLHX4BFecxbo9dRurJeSHxMLbmEhFpUqPrznJ+4ACrUZn4rpxU/k+RDQl8Wc3M+b7WMoBW02rZt1IJO/dxwDLNrBIbreVWn6pb8s0FxALHNaERyXznDbvrnY4A48TnQEFJtyTI8A65+YLGDBFJ6dCwfBqMcrplkcNMzOk672/UMr2W61nm32rXMoGYG544jw3BV5YqJIR2mQSQg3Wfv6h57jwGTOYGc4vM+57LRuZApWaBlJmKzskQVCpkcAmnOw77l1F2dk2QeQw5YT1iYxVCZz+ZFgnS++VoawryQjs+vi/f3bniH/8pMSJ2Q5Ao8j6UFsppwZAzZZSBvAnaOjqvSfJCFJH9mMq0iJXiDZP/Xa7fkbbJtlU4/mPwoQW91v3D3Z3vy0/xLA/3/a0DW4+1N/YOc6Ifl2DoKl2THbTnO5YSSHNYsm2mBKotKtlxmRfvUcn5OpXnd1I2aPgGcSZJ9vmZPQPWtCf1T822L+sDzVr6PLxMzOhFIQCKbXSmOn1huJsDz5aYnH+v6s5vTnkuZNwFrcUzWjuUOlCP+cE3CPs71pPiH/KxYGr6W64itHT8yTrnRCEKn+SmfZs/vNAVm0iyR9MvSXePHDBxzvi/cJnmLRchueswEvP9HyXm1oSKMWUZFr6MWgl2uL3CK5zn4r0pvzBTz5GVBWPN3F4R/B/2JZN0EqVtd8t/KGinaBYO8xUmBpaGu5a4rndPpzmx5AfhmvBj2eWCa3bpdre6OF9dwOtsE7kXSfCN+K9nJ6eF7aP4B</con:value></con:property><con:property><con:name>SAMLFAU2_2</con:name><con:value>nVbbcuI4EH3PV7g8j1vGVzB2BaoIl4TcA0wuvEwJuQFNbIlIsiH5+pVNTIAh2cw+udRqdZ/uPj7SsUBJ7IQtIYBLwqjW7zT0X/4UTZwAqoY3sSeGF7l1A1Wr2LBsFyI7CmwrqOpaX4gU+lRIRGVDd9SmYduGY49sN7RroVev2IE71rV74EKFVi4VS9dWSUxFWKRt6CmnIUOCiJCiBEQocThsXV2GyjNEJSa9ebxGWSTkzbmUi9A0cSUCDHGMK5gl5rG543MciXBIZhTJlMN7zkg09Pezy+WysnQrjM9Mx7Is0wpM5RMJMvuhN4/KwxD16ZSt121EGSUYxeQN5aCuQM5ZpLXiGeNEzpNPQtumbeWhDVhhA9se/aGbHwkKdN+MtAOSC2SIObLLYAOYAgeKQfs56Df0H9+b4PrsiCMqpownYm/9d5CAZhCzBUSGKCsr0X0/4oF2NY8Bh32K41SQDK5zmiwQBqHdcpiS1SURinyR0IrxaytRMgzw34zk2NzGqWCbBzrTITMQ8v/Ma3tW6yj3KE6heX6R3d6x2nIpzv85Of05kjhJlrejZ57UGwWEbec1qM2o39f7RN3w6v3QInhj/MLN6CKVnJ9en7PqKjgf3+HrYHppumh2Polu/FrNeyDcteoXT9PbdFk/G9wnwaK3nFDn+bU7jp+y7CZ5PHo6HZ/R+s15cGdf/fbO2Lw7e2LeaoBOxzW+fJnM4+fX/r0V+3KU3rfGF+1HfDbvunPpw8PJ4C2rns7YI6vZdl8kRy+9mzf3YZwNYcmH3cgHZ9b4qGm7hl1jKQfDdPIbsCyXOTX6Ha2n5oXk19KSW0hkTAvXcJHrk5BApd7MT+WyEqZKfEgUqmGu192TE6vV7Tl+x/V6Na/atTzL7lktqxoEvu/3Sv1Zo9iD2GZ0SvJcucKu+fM1QJyEAmgE3MhYiucg9C8idpBEWp8O1I/BqIARUwre6rarXrtzErh1x/PrVa/nuUEtaHe9juN2fEfXrpm8oTe8NZXAd9W7tqPeA8BkQSCX+JznQhFdSNWSF5SlMrYrGapQSNUlwHMdDh2vXjUFSRYx5IDNhEVpDJXFfFE0yBTrr2MgLArr5WVrePurPfzlFL/hp1Xu75UNUT4RyR1EXtIJqKHCgdvILev5pG5n79Yqw7fSiOR/m+qu5ASvkexufZAmZ8uGMR+Flcg3B/YNO8HN/bo2+aKM4A37N1e2UnylCc1yOC+o8lJJsywtxuHnesdVeNM2Ld8cAk6VaL2O2DNQcxPC/NZ9sUG9l3lj38WXyjkdSiQhUeTRiuU3HgtDEPljoa/Iv/ruS2QnpeqbhJU8ZGvH6k2RI/7y2YFDnPsp8636LBmPPsZ1INZWHlWneiFIQmf5Kr8dXj/hBmYqLFFyxvh28EMBDiXfNW6avMEiFZsmqYTPd7Rcpxo6wpilVPY7emHY1s4Cp3xdQPjh9EeYQp/fL9yV+PTCfby6HCoVS5C+8SX/7WyQgi4Y1ClBCiwNfaXejio5nW1p9TvAg3LddqtfyfVuJc0/zH9atnq6/z80/wU=</con:value></con:property><con:property><con:name>SAMLFAU2_3</con:name><con:value>nVZbV+o6EH73V3TVR1fphXuXsBZQkCqKgrKPvLhCOkD2blNoUi7++pMUWgHR4z5PXZlOZr6Z+fIl1wwFvmU3GIOIk5AqrlNT3yxkTDEULc2CMtYKlmloVcObaKhQLnmQR6hSKaqKy1gMLmUcUV5TLcPMa6apWeazmbfNim3mc8WqOVaVEURMhBYuOUNVNoFPmZ2kralxRO0QMcJsigJgNsf2sHHfs4WnjVJMav16hzJJGNXnnC9sXcc5DzD4Ps7hMNCv9SOfa4/ZQzKjiMcR7HN6rKbu967X69w6nwujmW4ZhqEbVV34eIzMLtX6RboZPJdOw926hWhICUY+eUcS1D3weegpDX8WRoTPgy9Cm7ppyNAabLCGzQK9VPWPBAm6H0Y6AhkxpLE5MtNgA5hCBBSD8jJwa+rlzya42/scIcqmYRSwk/XfQQK6Aj9cgKextLIU3c8jnmlX/Rqw7VLsx4ys4EHSZIEwMOUxginZ9AgT5POYkoxf2bCUYYD/ZiTX+iFOAVs/0xmHzIDx/zOvw1ntooyQH0O9Mu2W5v27l+l2fVOcVfqTmVMqvOKtG93XEgiHzjtQ2aj361OiZrzabxr5f15+of6mfQ9X6GkV9ru/noLm3CvcjSfRiLdHZPuwIstKTDwWjt5vrlqv2F/2269+DznV5ZZat6/rHnFH20n1YlAqzO/GQa+CS5FbvKHl6qI7vTWCq96QEUyX7/k/V+y9O1lGwZUzudtaT3513uGGviyS7c1ruK1Y4D6RzVPld/fivXt7A3Q8LrGr8WDoPAzmuPZR02ENx8ZUDobx5Ddgni4lNVxH6Yh5If69tEgL8bRp4movpD4xDpSrdblLyoodC/Ehni2GuVu3m02j0e5YZSdf6JQKxbZRMMyO0TCK1Wq5XO6k+rNDcQKxFdIpkbmkwu748z1AHNgMqAeRtgpjPAemfhPRQRwpLh2IgxFSBs+hUPB2s2W2SsVK2zCbltmsVh3LKebb7UrT7LRbLaHDDyHv037UmHKIjtW7dKTeA8BkQUBKvOQ5E0RnXLRkiVYx983cCuUoxOISiKQO21ahUtQZCRY+SMB6EHqxD7nFfJE0SGe7r6UhzBKr02sMH99awzcrOYZfVnn6L22I8PGIdGCypCaIocKZ28hI6/lUd+HsrZWGb8QekadNdJdHBO+QHP/6II1kS8aYj8JS5NmGU8NRcP20riyftyI4Y392ZQvFF5pQT4ezRLllLl6t4mQcZal3kQivm7pR1oeAYyFa2+fwD1A9C6H/6L7IUJ9kzuzH+GI+p0OOOASCPEqy/MFjYQhMPhZcQf7NT18iRylF3zhs+DlbyxdvCon422cHtrH0E+ZH8VmHkfcxrjOxDvKIOsULgRM6kyt5O2y/4AYORVgi5CyMDoOfC3Au+bExa3KGhQs2TWIOX/9RpE7VVIRxGFPuOmpiONTOBCffLsD+cPoUJtHn/YW7YV9euP/c94ZCxQKkZr7kv501ktAFg9jFSIKlpm7E21Ekp7MDrd4DPCvXrXzxO7k+rqT+yfzZctDT0/NQ/xc=</con:value></con:property><con:property><con:name>SAMLFULL</con:name><con:value>pVZbc9o6EP4rjPuYMb5gbp7AjAOEcEpDg5M0yUtHyGsQ2BKxZC799ZUMOEBIDm2fPFqvdr/d/bS7lxzFke16nEMiCKOFVRxR7mbShpYm1GWIE+5SFAN3BXZ971vftYumi3ZXtEKv3dB+mhUMULMrul0rWbpTdyp63SoFeuA49cqoalsoxFKV8xR6lAtERUOzTausmxXdKt+bVdcxXbterFRKL1rhERIubUuVoqltQa14Q5sIMXcNY7lcFpelIkvGhm2alvH0re/jCcRIa15uIsocJc2tPi4GgCGKcBGz2Lg0DnQuA+76ZEyRSBPY+go+8mUaZt2QOgEn4y9afheCHg1ZdmwhyijBKCK/kMrPNxATFhS8aMwSIibxh0FYpjKswwrr2HLoF804hHamoQOECUc6nyBra2sIISRAMRQehr2G9uW8qmVX7xNEeciSmB8e/wwP0AVEbA6BzndhbaGdb/BEppqXgN0exVHKyQJuFVnnCAPfVhPw+aYK3xMIyapPuCToiit0xj68o+MmG20yBi7+pkB7xdkYeURRCs3xr6dW52IVfh16X2+uYvIyuutWh/ZsVHYaGYB95UyQl3ZzPCJlTqLNjbCbGt1g7a1/sE6nZ04XJfPh2rtLWB2Y7f9gjw83refx3eQ1nr4Y4RhfRFAZeFZC+lcefrFuPL6KaLocPZW6/9WuX3wTL8bXlWh9U71ozR6mg+6yejV6GMwuqtbLdDn0F30fXeNXUvZxiG5/kedn5k27jn3xNHi4XZtfa1XnrmstJtP5qvP6fFMm1tVsFLWn6eCukYezh/9QtnvzfjqaAha7o6JBr124llVC4vNmpiQk0MNM1Z2r5sMFUKE11S3VO9xUtjsSuLKGm7NVq3k1s+N4JadebXvtjlkulTr1unVtei3PLu2azAbFEcQWoyFRvlTL3dDmc4A4djnQABJ9wVLZ6bj2icU2EqjQo0P5CBjlcM9ke55HM74ei6BkLkOrzCuhIyo1PJvI9n3LxIAOEi8UkBz0ZMs86MlDwGROQDVuxWsuic2FzMUrWqQisooLVKSQytaeqC7r2k6tbHASzyNQSI2YBWkExflknmXG4JuvrSPMM+mwc5+9tg/jOv63S4HUCYhS4CqWK5BlhBPDxdoF8i7gyskhtDPvpQFRD0vmUyQEb5Ac/nqjieJHzpF23/O/70Dnun9w92fL/2n9pYH+Pzjv/6tzWcv3N41P8mkclzJ3FCzIntvd1iHnl+x4zR0RX5FVfC2mi0Wacc9xSkYizRuKBIZpGz7gVPbk9T2bATVyK8ZZAzAHfuQ8lx9CTMWE+gIJiOVbKWTHMzYeH7jaeHryka/OXacOXMrUCViJU7JWJLc1hfjThQ67WOlJ8Xf5WbIkeKvYCVt7fmSccuERhI7VSQ2/9Qe8wEyaJbJts2Tf+CkDp5wfCvMk51iEJNQoFfDxn4Lqxw0NYcxSKnptLRPsz4gMp1jPwX1TemcmG0P5Xkr+fzHVSUYBDHKb5SSzr9YLVz0BOt6bM1unH4ya2mej5hBd8534vWQvT8ccb/4G</con:value></con:property><con:property><con:name>SAMLSAU1_1</con:name><con:value>pVZbc9o6EH7vr/C4jx3jC7bBnsAM15ZT06SY5tKXjpAXUGtkx5KA5tcfycQECMlJe2aYYbRe7X7a/fStLhhapU7YYQwKTjKqjfot/UfdSzw8dwLDd72m4c4CMJp1sA2EE9dr2Amq27aujRgTMKKMI8pbumPZdcO2Dcee2vVQ/pyg5vnWd127hoLJ0NKlZunadpVSFpZpW7ooaJghRlhI0QpYyHEYd8ZRKD1DVGHS2xc7lGXCor3kPA9NE9cSwJCmuIazlXlhHvlcJCyMyYIiLgp4zJmwlv64d7PZ1Db1WlYsTMeyLNMKTOmTMLJ4r7ffVZshGdF5tlv3EM0owSglD0iBGgNfZonWSRdZQfhy9UJo27QtFdqALTaw7dL3uvmUoET3xkhHIAuGDLZEdhVsAnMogGLQvk1GLf392zq42zstEGXzrFixk/WfQQK6hjTLITFYdbIK3dsjnilX+wJwOKI4FYys4YuiSY4wMO2qgDnZRoRJ8iVMK9uvbVnFMMB/0pIL8xCnhG2eqUyfLIDxv+nXYa92Ua5RKqC9/vzhJu5FwlvPrkzIxeQrjm++fJveTaxWCeHQeQdq3+rH9SlR97x63DRD6JKSYHJ5Ez30ej8X3e3ws/8NU1N0Lh/uZhHzrmbBZtqNJpwEQe5/xNlsIj59H33sL+3oWngL2r+ZTXHRsebv7pub28kg30RO8RU17iImyzmOoww+jN2vDbxY8ILcChiMrue/kts0h/jzZS6a3eQhmXlpb5u4D9/vHmjPXf7D393RgRP7t9dr9mmM+sF4yDatpzMdnuHYWMlBLGY/AfNqqagx6mtD2S/EX5cWZSGJMS9dw1zpE+NAud5Wu5SshEKKD0lC2czdetDtWh1v4DacYb1ue/WB5Vr20OpYXhD4rt+v9GeH4gRiL6NzonIphd3x53WAeBUyoAkUxjoTeAlMfyViH3GkjehEXoyMMphmUsEHQbPbHPqB1e10+12n5w67Ddd2HEnMge/5A137kvFLell05hyKY/X2j9R7ApjkBJTEK54zSXTGZUnu0Vrw1K6tUY2CkEOgUDocOm7TMxlZ5SkowOYqS0QKtXyZlwUy2e7fkUrESutkMC3v34vHO/1WVUL6JEQ5MHWWLshuwpkxZFcHeXZg9+y4qsJ3RELUNZNllaTGOyTHn57Yomiyp0o/6sRXFei97x/s/dGLf9h/GSD6vwFkP57vNF+piXnajn2iZE0O0lbjXE4oqWHtikz3qHZfE+u1KOnTUPpcyPCmbVoNMwYspMj+nma/gJr7EOab5tse9Unmvf0Yn+BLGnPEYSXJrpXLNzxuYmDqcTOSl3X71pfTUUpZNw5bfs7WS+UbSCF+9ZmEQ6z8pPlK/m2yInlq15lYB3nkOeWLhhO6UCs1zX6/QAqcybBEym9WHAY/F+Bc8mPjvsh7LFyyaSY4vPxFU7ra0hHGmaB81NdLw6HWlzj57xzCJ6dnYcp58vhA2LIXHwi34yiWqrtC+t6X/LezQUq6YJC7GCmxtPStfOvK5HRxMFseAT4bL1Z90LHtYbPu+4fjxbPc/Xg5Pkn7mfm55aCmp/eh/S8=</con:value></con:property><con:property><con:name>SAMLSAU1_2</con:name><con:value>nVbbcuI4EH2fr3A5jykj21wMrkAVlzjrGUhIgGTCy5SQBWhiS0SSgczXr2RiBwjJZvbJpXar+3T30ZEuBExi128LgbkkjBphr2n+Qrbn1CJYteyG3bAqs0bDmtVxw8IzF5cRdGp1r2waoRApDqmQkMqm6dpO2XIcy3XGTtl3ar7rlqoNb2oa95gLFVq5lGzT2CYxFX6WtmmmnPoMCiJ8ChMsfIn8UXvQ95WnD3NMZutihzJLyFtLKVc+AKgUYYTjGJUQS8AFOPC5iIQ/IgsKZcrxa85INM3XvZvNprQplxhfANe2bWA3gPKJBFmcma1v+WYchXTOdusupIwSBGPyB2pQAyyXLDLa8YJxIpfJB6Ed4Ng6tIW3yEJOhZ6Z4C1Bhu6LkQ5AcgEtsYROHuwOzzHHFGFjchc2zbOvTXC3d8whFXPGE3G0/jtImK5xzFY4skReWY7u6xFPtKt1gZEfUhSngqzxtabJCiIsjCHHc7LtE6HIFwkjG7+xFTnDMPqbkVyAfZwKNjjRmR5ZYCH/z7z2Z7WLcg/jFLfgePJ4dd3jNVZZwnHDWfa2o+eH+sMDv21mEPadd6CKUb+uj4la8Op106T7w7uqJjcvwRPcDPjt+j50HoPej+Sch3eL76SXLjdisXm6vpq+TMf9yu/6fNh/JCigGzD1pj/Z42RGo9ng+uYH+BaQYHzrKVv74bz+E3Y6zrrz/GcQTOvb+0icRz101auOwf2qO6jePI03T4TfXvNgyJAb1cUK3YHpn/PoPvxnMnv5xjqTPny+GiaATYZzPi8j0Xyrab+GQ2MuB6N09hsjmS81NcKeEah5Qfm5tGgLiax55uqvtD4Jiak0W3qXlhU/VeJDIl8Nc7e+7HTs9mXgej2nEtQq1Uu7YjuB3barjYbneUGuPzsURxC7jM6JzqUVdsefzwGixBeYRphba5aiJRbmJxF7UEIjpHfqYDAq8JgpBa92Gu1OrXMZONVKu1xRKtC2K17g1QLb9modpd7XTN7QG96eS8wP1bt2oN53GJEVwVriNc+FIrqQqiXPcJ3K2CmtYYniVF0CXOuw71bqVSBIsoqxBgwSFqUxLq2Wq6xBQOy+rgWRyKz9fns0/NUd/XKzY/hhlcf/8oYon4hoB6FL6mA1VHziNnLyej6o2z26tfLw7TQi+rSp7kpO0A7J4a830mi2FIx5KyxHXmw4NhwEB8d1FfmiNUEF+4srWym+0oRWPpxnWHoupet1mo3D03rHVXjgANsDI4xSJVovY/aEKShCgC/dFwXqo8yF/RBfKpd0JKHEiSKPkS2/8FgYYaEfC6Ei//arL5GDlKpvEm/lKVs3Vm8KjfjTZwfykfZT5qH6bBiP3sZ1ItZeHlWneiFIQhd6pW+Hlw+4gZgKS5ScMb4f/FSAU8kPjUWTCyxSsWmWSvzxH0PrVNOECLGUyrBnZoZ97cxwypcV9t+c3oXJ9Pn1wt2KDy/cn4P+SKlYAs3Cl/y3s0UyuiCsdgmSYWmaW/V2VMnpYk+rXwGelOtuufqZXB9W0npnfm/Z6+nxeWj9Cw==</con:value></con:property><con:property><con:name>SAMLSAU1_3</con:name><con:value>nVZdc6JKEH3Pr6DIYwoBwS8qWoVfWe+axFVjsvuSGodWJ4EBmUFJfv2dwUDUmNzsfaKm6ek+3X3mzFwyFPhlx2UMYk5Cqgy6TfWxUasio2J7mm3guWZ7Xl2rg1nVKuWyOZ8vyvUKVFRlwFgCA8o4oryplg3T0kxTK5tT03LMmmNXS0bd/KMqM4iZCC1cSoaqpIFPmZOlbapJTJ0QMcIcigJgDsfOxL0eOsLTQTkmtXW5Q5kljFsrziNH13HJAwy+j0s4DPRL/cDn0mPOhCwp4kkMbzk91lTf9m6329LWKoXxUi8bhqEbDV34eIwsz9XWWb4ZvAFdhLt1B9GQEox88ookqGvgq9BTXH8ZxoSvgk9Cm7ppyNAapFjDpk3PVf09QYbum5EOQMYMaWyFzDzYGBYQA8Wg3I0HTfX8exPc7Z3GiLJFGAfsaP13kIBuwA8j8DSWV5aj+37EE+1qXQJ2BhT7CSMbuJE0iRAGpoxiWJB0SJggn8eUbPxKynKGAf6bkVzq+zgFbP1EZ7pkCYz/n3ntz2oXZYb8BFpP0eLZ1lfR88JOzB8dm636rsWvU+smbGYQ9p13oIpRv62PiVrw6m1T2hmNG7P563JIhldx2pilsQ2WcTssX7luOwjRa/xj1PX48td1kI7r03ubjLfrbnV0OyfPs+2AVqv1yv3V5uXitXo2dP2b3mbS5j/T1WxdTXvVWuep1k8v3Dtrtl1N76PGpr2ZPnR+WqT9NJz9NqKt+efeWgfX/f7DhYXbT4slSYi/etLPLn6bsfdrfLEdGf9Mt8iA7V3zvab9Gg6NuRxMkvkTYJ4vJTUGXaUv5oX419IiLcTTFpmrE0l9YhwoV1tyl5QVJxHiQzxHDHO37rXbhtvrl2td0+5X7UrPsA2zb7hGpdGo1Wr9XH92KI4gdkK6IDKXVNgdf74GiAOHAfUg1jZhglfA1C8idhFHyoCOxcEIKYNpKBXcrfTMTrVv1Ot2t9bpNirdutmrV0zDrVkdQ6j3Tchv6W3sLjjEh+pdPVDvMWASEZASL3nOBNEZFy1Zo03CfbO0QSUKibgEYqnDTtmuV3RGgsgHCVgPQi/xoRStoqxBOtt9yxrCLLN2h+5k9NiZPJazY/hplcf/8oYIH49IByZLaoMYKpy4jay8ng912ydvrTy8m3hEnjbRXR4TvENy+OudNJItBWPeC8uRFxuODQfB9eO6inzehuCC/cWVLRRfaEIrH84aldalZLNJsnHUpN7FIrxu6kZNnwBOhGi9TMNnoHoRQv/WfVGgPspc2A/xJXxFJxxxCAR5lGz5jcfCBJh8LAwE+dPvvkQOUoq+cUj5KVvHF28KifjLZwd2sPQT5pH4bMPYex/XiVh7eUSd4oXACV3KlbwdXj7hBg5FWCLkLIz3g58KcCr5obFocoGFCzbNEw6f/1GkTjVVhHGYUD7oqplhXzsznPwlAufd6UOYTJ/fLtyUfXrhPlwPJ0LFAqQWvuS/nTWS0QWD2MVIhqWppuLtKJLT5Z5WvwE8Kdcdq/KVXB9W0vpg/mjZ6+nxeWj9Cw==</con:value></con:property><con:property><con:name>SAMLSAU2_1</con:name><con:value>pVZbc9o6EH7vr/C4jx3jO9iewIy5pHVDEw7QNu1LR8gL1qmRwZIN9NdXMjEBQnLSnhlmGK1Xu99e9O1eMbRMrSBkDHJOMqpE/bb6w8Ke6c08W5uDb2uOG8eab818DRktw2uajuuCoyoRYwVElHFEeVu1DNPWTFOzzKlpB6YbmE7Dtp3vqvIFciZMC5WGoSrbZUpZULltq0VOgwwxwgKKlsACjoNJ+GkYCM0A1ZjUztUeZeUw7yScrwJdx40YMKQpbuBsqV/pJzpXMQsmZEERL3J48Bmztvpwd7PZNDZ2I8sXumUYhm74utCJGVm8VTtv6ssQR3Se7c89RDNKMErJLyRBfQKeZLESpossJzxZPmPa1E1DmtZgizVsOvStqj86qNC90tIJyJwhjSXIrI2NYQ45UAzK53HUVt++roL7u9McUTbP8iU7O/8ZJKAlpNkKYo3VkdXoXm/xQro6V4CDiOK0YKSEW9kmK4SBKaMc5mQ7JEw0X8yUqvzKltUdBvhPSnKlH+MUsPULmemTBTD+N/U6rtXeyheUFtAh0TqZ3IfFhxLy9YewHH8fthbU5Cs0aFcQjpX3oA6lfjifN+qhrx4urcrZOze2Pnfvh+58cOMP5z/NeWT19PQ6Gcc0GX0uorFj3ya3a2/5pcxIuv72dclxOPiYJ7vhzfuW36TUmY5HKHkzcwsWfns3nPHCec91IrD/o6cfo1m3n5DmZrywzdEvP51+z8E0hzH178CLm4ube3+UFsVmg5LcsnbDr3dfx+mbSes939nTaek7/g55mXsbth9jOo7hVFjTwaSY/QuY10fZGlFfuRb1QvxlapESEmvzSjVYSX5iHChXO/KWpJWgEORD4kAUc38edLtG2A27PdvzW2HfGxiOYV4boeH6ftNpujX/7FGcQexldE6kL8mw+/55GSBeBgxoDLlWZgVOgKkvWOwjjpSIjsXDyCiDaSYZvOf13GvPdD2r2XS9bt/uda+NbstpDmxH/FTlNuN39C4P5xzyU/ZunrD3GDBZEZAUL/uciUZnXKRkjcqCp2ajRA0KhRgCueThwHI8V2dkuUpBAtaXWVyk0FglqypBOtv/WxrCrJKOB9Pq/T0b3vm3OhNCJyZSgclYuiCqCRfGkFEH8iRg5+K4qs2HRUzkMxNp5TnBeySnnx67RbbJoVX6w3AyqkEfdP/g7o/e5If5lwaG/9eAqMfTm/oLOdHPy3FwFJfkyG09zsWEEhzWqZtpjRrrRlGWRdU+LcnPuTCvm7rR0ieAC0Gyu2n2E6h+MKG/ar4dUJ95PshP8RU8oROOOCxFsyvV8RXLzQSYXG4i8Vi3r92cTlyKvHHY8kuyXip2IIn4xTUJB1jqCfFI/G2yPH4s1wVbR35EnGKj4YQu5ElOs90zTYEzYZYI+s3yY+OXDFxyfio8JPmAhYtumhUcnv+iSF5tqwjjrKA86quV4JjrK5x8t4LgUemJmWqePCwIW/bsgnD/aTgRrLtE6kGX/LeyRqp2wSBuMVJhaatbsesK53RxNFseAD4ZL4Y9CE3z2rObzePx4hpO/5DAk0g6T8RPJUc5PX8Pnd8=</con:value></con:property><con:property><con:name>SAMLSAU2_2</con:name><con:value>nVbfc6o6EH7vX8HQxzNIQBBlqjOotcdztLZif52XTgxR0wuJJUFt//qbYKFqbW/PfWKybHa/3f3yJWccJrHtB5zjVBBGtX63qT/WnZoHXeQZU2g7huMA16jXwcyIQDWyZwC7AFi61uc8w33KBaSiqdvAqhqWZdjWxKr6lucDu+JV7T+6dotTLkNLlwrQtU0SU+7naZt6llKfQU64T2GCuS+QHwbDgS89fVhg0ltnW5R5wrS1EGLpmyaqRBjhOEYVxBLzzNzzOYu4H5I5hSJL8VvOiDf1t73r9bqyrlZYOjdtAIAJGqb0iTiZn+qtk2Izjvp0xrbrDqSMEgRj8goVqCEWCxZpQTxnKRGL5JPQlmkBFdrAG2Qgy6GnuvmeIEf3zUh7IFMODb6AVhFsjGc4xRRh7Wbcb+qn35vgdu8khZTPWJrwg/XfQcJ0hWO2xJHBi8oKdN+PeKRdrTOM/D5FccbJCl8qmiwhwly7SvGMbAaES/JFXMvHr214wTCM/mYkZ+YuTgnbPNKZLpljLv7PvHZntY1yC+MMt0ZT9yezqs+XF7Y5je86v8dX3lo0wKZz3cwh7DpvQZWjflsfErXk1dumzr2AS9fhV7evGQ3Sl+TnxdPVmLMnGz04wY8xngNy4YBFL3N6CLBx44alN0+3WRLZo8Fdl8RTOIph6s3D9t3J8M/kIk069w+j6wwMumS2Xo8HbjC6uJ9k02n8azyJqtNBfehNw9fL60XIbqu9Cb8brPq/7R+Dl/OXtlXNVpELHs5vT8LerHt9U++G9fF9nZtP996w+V7Tbg37xkIOwmz6hJEolooa/a7Wk/OC4mtpURYSGbPc1V8qfeICU6G31C4lK34mxYdEvhzmdn3eboPgvGd7Xcfr1Rz3HDjA6oEAuI2G53m9Qn+2KA4gdhidEZVLKeyWP18DRInPMY1waqxYhhaY619E7EIBtT4dy4PBKMcTtlVwt1Y9t3q1rtMIgF1rBB2v23bqbsdpe7W2rl0yMaKjNJgJnO6rd21PvccYkSXBSuIVz7kkOheyJc9wlYnYqqxgheJMXgKp0mHflilMTpJljBVgM2FRFuPKcrHMG2Ty7dc2IOK5dTAIwqvHTvho58fw0yoP/xUNkT4RUQ5cldTGcqj4w21U892ink/qtg9urSJ8kEVEnTbZXZEStEWy/+udNIotJWPeCyuQlxsODXvBzcO6ynzRiqCS/eWVLRVfakKrGM4zrDxXstUqy8fhKb1LZXjTMoFnhhhlUrReJuwfTM0yhPmt+6JEfZC5tO/jy8SChgIKnEjyaPnyG4+FEHP1WOhL8m+++xLZSyn7JvBGHLN1YvmmUIi/fHYgHyk/ab6SnzVLo/dxHYm1k0fWKV8IgtC5Wqnb4eUTbiAmwxIpZyzdDX4swLHk+8ayySUWIdk0zQT+/I+mdKqpQ4RYRkW/q+eGXe3McYqXJfbfnT6EyfX57cLd8E8v3PvhIJQqlkC99CX/7WyQnC4Iy12c5Fia+ka+HWVyOt/R6jeAR+W6U3W/kuv9SlofzB8tOz09PA+tfwE=</con:value></con:property><con:property><con:name>SAMLSAU2_3</con:name><con:value>nVZRV6M6EH7fX8HBRw8lUFoKx/YcLHaXbbWudV2vL3timEJWGloSsPrrb6CCba1e9z5xMkxmvpn58iUnHC8S0/U4h0zQlCmB31d/28iet+e2oXUscq9ZIcaagw2sdexup902nW4bQFUCznMIGBeYib5qIqOtGYZmGtdG2zV6rtlrmd3OnarcQMZlaOnSQqqyXiSMu1XavppnzE0xp9xleAHcFcSdeecTV3q6uMakDk42KKuE2SAWYunqOmmFQCBJSIukC/1E3/E5Cbk7oxHDIs/gJWfI++rL3sfHx9Zju5VmkW4ihHTk6NIn5DQ6Ugdf6s0QBmyebtZDzFJGCU7oMy5BnYOI01DxkijNqIgX74Q2dAOVoTVYE40YFjtS9dcEFbpPRtoBmXGs8RgbdbArmEMGjIDy8yroq0efm+Bm73WGGZ+n2YLvrf8OErACknQJocbrymp0n494oF2DEyBuwEiSc1rARUmTJSbAlcsM5nQ9oVySL+RKNX5lzWuGAfmbkZzo2zglbP1AZ3waARf/Z17bs9pEucFJDoNOp21Ns/FY+M6aToMoGtrQoTer81uvX0HYdt6Aakb9st4nasOrl03+jSF+FZNTZps9gpK7/IfzNMxG6NYJg1ESoOufv74/TMV6euHko8L6OvoW5Zfz9vH44XIE98PjyfprHNmWH9zej78YzAmGq+zaeCbF8CGCc8v6Y1n/WGb8fHeWjI+N5NsV1tfHZ45ejHvjIPToeftJxPf5cpp9fU5YhOK72Y/bCfqjfxk/r4JAD+LbPEFxcQnf05/915q2a9g11nIwy+//ABH1sqRG4CsjOS8sPpaW0kJDbV65ustSn7gAJtRBuauUFTeX4kNDVw5zsz47PUXe2ci0fcseda3OGbKQMUIe6jiObdujWn82KPYgDlM2p2WuUmE3/PkYIFm4HFgImVakOYmBqx9E9LHASsCu5MFIGYfrVCo4crrWme/ZHvI6vnnaHfWQ7aBTzzdNb2ShnqpcpGLKppk3F5Dtqnd3R72vgNAlhVLiS55zSXQuZEtWuMhFYrQK3GKQy0sgK3XYNa1eR+d0sUygBKwv0jBPoLWMl1WDdL75mhomvLL6E292+Xs4+21Wx/DdKvf/1Q2RPiEtHXhZ0inIocKB28io63lTt3Xw1qrDe3lIy9MmuysySjZIdn+9kqZkS8OY18Jq5M2GfcNOcH2/riZfWFDSsL+5sqXiS00Y1MNZ4daqlRdFXo3DLvUuk+F1Q0e2PgOSS9F6uk4fgOlNCP1T90WDei9zY9/Fl4uYzQQWsJDkUarlJx4LM+DlYyGQ5F9/9iWyk1L2TcBaHLINE/mmKBF/+OwgLin9pPlSfh7TLHwd14FYW3lknfKFICiLylV5Ozy9ww2SyrBUylmabQc/FOBQ8l1j0+QGi5Bsus8FvP9HKXWqr2JC0pyJwFcrw7Z2VjjF0xLcV6c3YSp9frlw1/zdC/f2fDKTKrbAauNL/9tZoxVdiHxqSv8KS19dy7ejTM6iLa1+AXhQroftzkdyvVvJ4I35rWWrp/vnYfAv</con:value></con:property><con:property><con:name>SchemaNameSpace</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\Scripts</con:value></con:property><con:property><con:name>StreamCreateCount</con:name><con:value>1</con:value></con:property><con:property><con:name>Streams_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_368915851.txt</con:value></con:property><con:property><con:name>Streams_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt%3A487811501</con:value></con:property><con:property><con:name>Streams_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_596034053.txt</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targethost</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostB</con:name><con:value>qa1.b.uvvu.com</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa1.q.uvvu.com</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>targetjdbc</con:name><con:value>jdbc:oracle:thin:DEQA1_APP/lp1db_23@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>targetport</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>443</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>tester</con:name><con:value>pjg</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>TOU</con:name><con:value>qa.c.uvvu.com</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20140811</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnGenericRightsToken</con:name><con:value>urn:dece:stream:generic</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urnParentalControlAllowAdult</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>urnParentalControlBlockUnratedContent</con:name><con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>urnParentalControlRating</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>urnPolicy</con:name><con:value>urn:dece:type:policy:</con:value></con:property><con:property><con:name>urnPolicyID</con:name><con:value>urn:dece:policyid:org:dece:</con:value></con:property><con:property><con:name>urnRating</con:name><con:value>urn:dece:type:rating:</con:value></con:property><con:property><con:name>urnRightsLocker</con:name><con:value/></con:property><con:property><con:name>urnRightsToken</con:name><con:value>urn:dece:rightstokenid:org:dece:</con:value></con:property><con:property><con:name>urnstream</con:name><con:value>urn:dece:streamhandleid:org:dece:</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>userBasic1Org1Name</con:name><con:value>streamdeletebau</con:value></con:property><con:property><con:name>userBasic1Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userBasic2Org1Name</con:name><con:value>pjgorg1basic2</con:value></con:property><con:property><con:name>userBasic2Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userFull1Org1Name</con:name><con:value>streamdeletefau</con:value></con:property><con:property><con:name>userFull1Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userFull2Org1Name</con:name><con:value>pjgorg1full2</con:value></con:property><con:property><con:name>userFull2Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>USERID</con:name><con:value>188A80E4A3497DADE0533E991F0ACA23</con:value></con:property><con:property><con:name>USERIDBAU1_1</con:name><con:value>EBB0A5E473493153E0401F0A0599646D</con:value></con:property><con:property><con:name>USERIDBAU2_1</con:name><con:value>EBB0AEF27BAFF645E0401F0A0599777F</con:value></con:property><con:property><con:name>USERIDFAU1_1</con:name><con:value>188A80E4A3497DADE0533E991F0ACA23</con:value></con:property><con:property><con:name>USERIDFAU2_1</con:name><con:value>EBB0ABABC3307AD8E0401F0A05996465</con:value></con:property><con:property><con:name>USERIDFULL</con:name><con:value>urn:dece:userid:org:dece:188A80E4A3497DADE0533E991F0ACA23</con:value></con:property><con:property><con:name>USERIDSAU1_1</con:name><con:value>EBB0A5E472F33153E0401F0A0599646D</con:value></con:property><con:property><con:name>USERIDSAU2_1</con:name><con:value>EBB0ABABC3897AD8E0401F0A05996465</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>0</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_delete_20150615_01145</con:value></con:property><con:property><con:name>UserName_BAU1</con:name><con:value>stream_delete_20150615_01142</con:value></con:property><con:property><con:name>UserName_BAU2</con:name><con:value>stream_delete_20150615_01145</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>stream_delete_20150615_01140</con:value></con:property><con:property><con:name>UserName_FAU2</con:name><con:value>stream_delete_20150615_01143</con:value></con:property><con:property><con:name>UserName_SAU1</con:name><con:value>stream_delete_20150615_01141</con:value></con:property><con:property><con:name>UserName_SAU2</con:name><con:value>stream_delete_20150615_01144</con:value></con:property><con:property><con:name>userPropertyNameArray</con:name><con:value>UserName_FAU1,UserName_SAU1,UserName_FAU2,UserName_SAU2,UserName_BAU1,UserName_BAU2</con:value></con:property><con:property><con:name>userStandard1Org1Name</con:name><con:value>streamdeletesau</con:value></con:property><con:property><con:name>userStandard1Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>userStandard2Org1Name</con:name><con:value>pjgorg1standard1</con:value></con:property><con:property><con:name>userStandard2Org1Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>V1</con:name><con:value>2015</con:value></con:property><con:property><con:name>V2</con:name><con:value>02</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>2015</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>02</con:value></con:property><con:property><con:name>versionUrlEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>ï»¿CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_729880294.txt</con:value></con:property></con:properties><con:encryptedContent xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>if(testStepResult.getTestStep().config.type.toString() == "restrequest")
{
                byte [] tempByteArrRequest = testStepResult.getRawRequestData();
                String tempRequest = new String(tempByteArrRequest);

                log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Request>--------------------------------");
                log.info(tempRequest);
                log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Request>--------------------------------");

                byte [] tempByteArrResponse = testStepResult.getRawResponseData();
                String tempResponse = new String(tempByteArrResponse);


                log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
                log.info(tempResponse);
                log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
}
</con:script></con:eventHandlers><con:sensitiveInformation/></con:soapui-project>