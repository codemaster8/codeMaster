<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="StreamRenewLASP" resourceRoot="" soapui-version="4.6.1" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Authentication/Permission Test Cases"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="Copy of TC_DECE_10004 - StreamRenew - FUNC - DLP - AccountIdInvalid - accountId archived"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Documents and Settings\ashwin.tikle\Desktop\stream renew report"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="StreamDelete" type="rest" id="3b492f67-115a-413d-b988-3f95ade5b4a3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>https://${#Project#targetURL}</con:endpoint></con:endpoints><con:resource name="StreamDelete" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="80184fc8-e203-475a-bf4d-962fecb8f6e5"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="58df498a-480e-4619-8885-ffc42f359884"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="StreamDelete" mediaType="application/xml" id="e35ade99-ec4e-467e-bbc0-5f1630c0dde7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="RightsTokenCreate" path="/rest/{MAJOR}/{MINOR}/Account/${#TestCase#assertionAccountIdFULL}/RightsToken" id="fd240b30-e4f1-4205-a37d-baef7d1f9e1f"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="9150af14-9d36-4664-873e-3c25c093eda9"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="RightsTokenCreate" mediaType="application/xml" postQueryString="false" id="8c1437a4-b2a5-4b06-9b3e-fa2b9c91ee11"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#rtrassert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:RightsTokenData xmlns:dece="http://www.decellc.org/schema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema dece.xsd ">
  <dece:ALID>${#Project#alid}</dece:ALID>
  <dece:CID>${#Project#CID}</dece:CID>
  <dece:SoldAs>
    <dece:DisplayName Language="en">Avatar</dece:DisplayName>
    <dece:CID>${#Project#CID}</dece:CID>
  </dece:SoldAs>
  <dece:RightsProfiles>
    <dece:PurchaseProfile Profile="urn:dece:type:mediaprofile:highdefinition">
      <dece:BurnsLeft>0</dece:BurnsLeft>
      <dece:CanDownload>true</dece:CanDownload>
      <dece:CanStream>true</dece:CanStream>
    </dece:PurchaseProfile>
  <!--  <dece:RentalProfile>
      <dece:AbsoluteExpiration>2001-12-31T12:00:00</dece:AbsoluteExpiration> 
      <dece:DownloadToPlayMax>PT1004199059S</dece:DownloadToPlayMax>
      <dece:PlayDurationMax>PT130S</dece:PlayDurationMax>
    </dece:RentalProfile> -->     
  </dece:RightsProfiles>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/aaaa</dece:Location>
    <dece:Preference>2</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:LicenseAcqLoc DRMType="urn:dece:drm:playready:11">
    <dece:Location>https://dl.bestbuy.com/p/bbbb</dece:Location>
    <dece:Preference>3</dece:Preference>
  </dece:LicenseAcqLoc>
  <dece:FulfillmentWebLoc xsi:type="dece:ResourceLocation-type">
    <dece:Location>https://dl.bestbuy.com/p/cccc</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:FulfillmentWebLoc>
  <dece:FulfillmentManifestLoc xsi:type="dece:ResourceLocation-type">
    <dece:Location>https://dl.bestbuy.com/p/dddddd</dece:Location>
    <dece:Preference>1</dece:Preference>
  </dece:FulfillmentManifestLoc>
  <dece:PurchaseInfo>
    <dece:RetailerID>urn:dece:org:org:dece:${#Project#rtrorgid}</dece:RetailerID>
    <dece:RetailerTransaction>99-${=(int)(Math.random()*100000)}-${=(int)(Math.random()*100000)}</dece:RetailerTransaction>
    <dece:PurchaseAccount>urn:dece:accountid:org:dece:${#Project#rtrnodeaccountid}</dece:PurchaseAccount>
    <dece:PurchaseUser>urn:dece:userid:org:dece:${#Project#rtrnodeuserid}</dece:PurchaseUser>
    <dece:PurchaseTime>2010-11-29T08:44:01Z</dece:PurchaseTime>
  </dece:PurchaseInfo>
  <dece:TokenInfo CreatedBy="urn:dece:userid:org:dece:${#Project#rtrnodeuserid}" CreatedDateTime="2001-12-31T12:00:00" LastModifiedBy="urn:dece:userid:org:dece:${#Project#nodertruserid}"   LastModifiedDateTime="2001-12-31T12:00:00">
    <dece:TransactionInfo CreatedBy="urn:dece:userid:org:dece:${#Project#rtrnodeuserid}" CreatedDateTime="2001-12-31T12:00:00" LastModifiedBy="urn:dece:userid:org:dece:${#Project#nodertruserid}" LastModifiedDateTime="2001-12-31T12:00:00">dece:TransactionInfo</dece:TransactionInfo>
  </dece:TokenInfo>
  <dece:ViewControl>
    <dece:AllowedUser></dece:AllowedUser>
  </dece:ViewControl>
</dece:RightsTokenData>
]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamCreate" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" id="dd5fd66d-5678-437e-9cba-e6fb38a75aa0"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="22046f80-b8c3-4c9c-a06c-5c667531dfc0"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 409 404 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="StreamCreate" mediaType="application/xml" postQueryString="false" id="62c3b47d-a1df-482c-9060-0d4e33d92d65"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamView" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" id="fdc6e249-958b-43c1-91bf-e2adb2f9325e"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>SH</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="fbaa00bc-8c4b-4edd-9ac9-1d10f9332e7b"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>405 400 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400 404 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:Stream</con:element></con:representation><con:request name="StreamView" mediaType="application/xml" id="5002a010-eb0d-4c0d-82bd-04c3cb5bbfbb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS" path="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" id="129712ca-9cab-4cfe-addc-795001251aa3"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="657f9c5f-8ffa-4845-87fe-c5672c848bea"><con:settings/><con:parameters><con:parameter><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#tokentype}</con:default></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>201 0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="STS" mediaType="application/xml" postQueryString="false" id="c3786d89-a247-411b-802f-01d1cd063a26"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="http://www.decellc.org/schema">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
</Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS GET" path="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" id="33871f82-c8b7-4a0e-a076-876a6185a1d5"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUUID}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="44eff4f0-0c62-495a-b27d-6b4ab6d4c124"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="STS GET" mediaType="application/xml" id="4c2ee6f6-af8e-4fa0-940c-f4b28b1ba84f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamRenew" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="5b05f51d-deb8-4d66-be91-c806d93d4542"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="PUT" method="PUT" id="268c8d0d-1842-4c37-ac16-7e561843c62a"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>409 400 404 403 500</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="StreamRenew" mediaType="application/xml" postQueryString="false" id="5c698983-54ec-4732-a21a-2251e4f88bd5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreate Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="4be65c79-a60c-4736-8e28-23c32824dd0b"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="8abdd04c-1749-4f96-b918-b23d6c729583"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:request name="PolicyCreate Account" mediaType="application/xml" postQueryString="false" id="c8c9180d-aa19-47d6-beaa-dacea4c7bc36"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#SchemaNameSpace} dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreate User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="35a2a3de-ff8f-4bad-bc38-5483e592706f"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="949e64ec-abe9-4d77-89c5-90ecd5a7dd64"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 0</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="PolicyCreate User" mediaType="application/xml" postQueryString="false" id="8940d944-f256-45c9-af87-507712e5da12"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#SchemaNameSpace} dece.xsd" xmlns:dece="${#Project#SchemaNameSpace}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamRenew1" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/Renew" id="a87bc8b9-1e47-4db5-8a47-cf7d9f206a3e"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="84b12514-97fa-49ad-97e8-97a7fe62f626"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Stream</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="StreamRenew" mediaType="application/xml" postQueryString="false" id="d952e693-2475-4bf6-bfa9-cd503aa79001"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Coordinator APIs" type="rest" basePath="" id="6b31786a-1831-470f-a7bd-4a0861cac4bc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>https://${#Project#targetURL}</con:endpoint></con:endpoints><con:resource name="PolicyGet Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="9a91959b-1a89-4ad4-ae4d-edbb32affeb7"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="4cd3bc2f-1b75-4384-ae55-ecba93fb5ce6"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PolicyGet Account" mediaType="application/xml" id="b0cb64be-d218-447b-8e97-3fca21872c75"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Projec#targetPort}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGet User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="1cafd11e-319c-4004-96cf-03e20049f655"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="586acae4-ba53-4e8b-a4b3-d3a953cacc3d"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200 0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PolicyGet User" mediaType="application/xml" id="07c1feae-c8a3-48b6-ba28-896b041f5f6e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Projec#targetPort}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policies" type="rest" basePath="" id="69ae8af0-72c8-49bf-b5a4-11bb0660603b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyDelete Account" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="322213e7-6560-44ee-8969-ea8bc0fa6971"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="5888a93f-7ca6-4d78-adf3-41f979c02a03"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="PolicyDelete Account" mediaType="application/xml" id="5127be76-edea-4c6a-8ed3-f613c212a4bc"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyDelete User" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="397b694d-8187-4306-97c6-7a0b1f3eb609"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#VersionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="c598961d-ea5b-4bda-a2dc-2654b58468e5"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/082012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="PolicyDelete User" mediaType="application/xml" id="087c1282-9555-4123-ad79-3ff8847cbbc0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="E2E" type="rest" basePath="" definitionUrl="E:\COmmon\E2E_1.wadl" id="8f406d0a-0c15-400c-bba3-b5d655e13ad9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/E:/COmmon/E2E_1.wadl"><con:part><con:url>file:/E:/COmmon/E2E_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="E2E"/>
  <resources base="">
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="AccountCreate">
      <doc xml:lang="en" title="AccountCreate"/>
      <method name="POST" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <request/>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" id="UserCreate">
      <doc xml:lang="en" title="UserCreate"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="UserCreate">
        <doc xml:lang="en" title="UserCreate"/>
        <request>
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" id="STSCreate">
      <doc xml:lang="en" title="STSCreate"/>
      <param name="tokentype" default="urn:dece:type:tokentype:usernamepassword" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="audience" default="${#TestCase#audienceList}" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="STSCreate">
        <doc xml:lang="en" title="STSCreate"/>
        <request>
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" id="STSGet">
      <doc xml:lang="en" title="STSGet"/>
      <param name="ASSERTION" default="${#TestCase#assertionUUID}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="STSGet">
        <doc xml:lang="en" title="STSGet"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml;charset=ISO-8859-1"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="PolicyCreateUser">
      <doc xml:lang="en" title="PolicyCreateUser"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateUser">
        <doc xml:lang="en" title="PolicyCreateUser"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="PolicyCreateAccount">
      <doc xml:lang="en" title="PolicyCreateAccount"/>
      <param name="NodeAccountId" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateAccount">
        <doc xml:lang="en" title="PolicyCreateAccount"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="AccountCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="f471421b-22d7-4b32-be30-80e7648ff7f2"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="95dbbea2-2fc4-4f8d-b5f5-36bb1b1a4f4d"><con:settings/><con:parameters/><con:request name="Request 1" id="c710871f-141a-4e69-a0af-a868d639e5f2" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" id="c727fab6-a36c-43dc-b000-5a00571a34d0"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST" id="85e166c4-2b59-4aad-923d-5daea8d1d158"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="7a25fdad-3e8e-4cdd-8b8c-63c0efd727f7" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSCreate" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" id="8ef31604-1139-4a6a-b830-ede6dbf30f22"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#tokentype}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value>${#TestCase#audienceList}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#audienceList}</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST" id="15e95400-d530-49ab-a05f-8f6b6d89edbe"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="c6ca80f4-c6df-4fd2-86b3-0225503bda49" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" id="e8057867-42db-423e-a972-72894fc5a6df"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:value>${#TestCase#assertionUUID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionUUID}</con:default></con:parameter></con:parameters><con:method name="STSGet" method="GET" id="3d5cb182-9855-449e-bc5f-4602153d2bb3"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="a03eb043-c47b-42b1-abbb-0695f5b79df0" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateUser" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="b01af1f3-e22b-453c-ac44-65be69c59569"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateUser" method="POST" id="48562408-72e9-4fe8-81dc-5b0bd37c8410"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="eb861623-135e-4cfa-9764-679fdcc4ae06" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateAccount" path="rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="3518959b-4690-471b-9a05-49e9c7dbe85d"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateAccount" method="POST" id="f430e6e3-b374-4def-b909-0ac5adfc7947"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="973c51cc-5717-43a4-8ad4-38915cad277c" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountUserCreate" path="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" id="c727fab6-a36c-43dc-b000-5a00571a34d0"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="AccountUserCreate" method="POST" id="85e166c4-2b59-4aad-923d-5daea8d1d158"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="7a25fdad-3e8e-4cdd-8b8c-63c0efd727f7" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="ResourceStatusUpdate" type="rest" basePath="${#Project#Provision_HostName}" definitionUrl="C:\Users\sourabh.verma\Desktop\ResourceStatusUpdate_1.wadl" id="110fe7d7-f298-4927-972c-d7b03d8a1e37" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/sourabh.verma/Desktop/ResourceStatusUpdate_1.wadl"><con:part><con:url>file:/C:/Users/sourabh.verma/Desktop/ResourceStatusUpdate_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="ResourceStatusUpdate"/>
  <resources base="${#Project#Provision_HostName}">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Metadata/Basic/${#TestCase#CID_GET_DELETE}/ResourceStatus/Current/Update" id="BasicResourceStatusUpdate">
      <doc xml:lang="en" title="BasicResourceStatusUpdate"/>
      <method name="PUT" id="PUT-BasicResourceStatusUpdate">
        <doc xml:lang="en" title="PUT-BasicResourceStatusUpdate"/>
        <request>
          <representation mediaType="application/xml" element="proj:ResourceStatus" xmlns:proj="${#Project#Coordinator_Schema}"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="proj:ResourceStatus" xmlns:proj="${#Project#Coordinator_Schema}"/>
        </response>
        <response status="409">
          <representation mediaType="application/xml; charset=UTF-8"/>
        </response>
        <response status="303">
          <representation mediaType="application/xml; charset=UTF-8"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="BasicResourceStatusUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Asset/Metadata/Basic/${#TestCase#CID_GET_DELETE}/ResourceStatus/Current/Update" id="cefa5592-33c5-411e-8b21-5e273224644d"><con:settings/><con:parameters/><con:method name="PUT-BasicResourceStatusUpdate" method="PUT" id="f64c8705-ea6e-4624-bd8c-e1f46893631d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#Coordinator_Schema}">proj:ResourceStatus</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#Coordinator_Schema}">proj:ResourceStatus</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" id="13ab56b4-7bbb-4799-9349-6e38e214ca9e"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="00SetupScripts" id="76daaa90-2625-46dd-a4f9-d3cf2c552f37"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="abade124-3da3-4542-9f3e-88e42b6351fa"><con:settings/><con:testStep type="groovy" name="Set ENV Properties" id="5a868eb1-7dde-459d-9179-5eb994a4b33c"><con:settings/><con:config><script>	def tC = testRunner.getTestCase();
	def tS = tC.getTestSuite();
	def tP = tS.getProject();

	log.info("Set Environment properties!!!");
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def projectPath = groovyUtils.projectPath
	log.info("Project Path : '" + projectPath + "'");

	def eNV = context.expand( '${#Project#ENV}' )
	log.info("Environment: '" + eNV+ "'");

	def propertiesPath = null;

	if (System.properties['os.name'].toLowerCase().contains('windows')) 
		{
				log.info "it's Windows OS!!";
				File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
				propertiesPath = temp.getCanonicalPath();
		} 
	else 
		{
				log.info "it's Linux OS!!";
				File temp = new File(projectPath + "/../../../Properties/");
				propertiesPath = temp.getCanonicalPath();
		}
		
	log.info("Properties File Location : '" + propertiesPath+ "'");


	def propMap=[:]
	BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));
	log.info("Load property file : '" + propertiesPath + "/" + eNV +"project.properties"+ "'");
	String line;
	while ((line = reader.readLine()) != null)
		{
			if (line.trim().length()==0) continue;
			if (line.charAt(0)=='#') continue;

			int delimPosition = line.indexOf("=");
			String key = line.substring(0, delimPosition-0).trim();
			String value = line.substring(delimPosition+1).trim();
			propMap.put(key, value);
		}

	propMap.each{ k, v -> tP.setPropertyValue(k,v)}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema" id="0b9fc693-0482-480e-b2cf-5241fa96808d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "V2: "+tP.getPropertyValue("VersionMinor");

def v2 = context.expand( '${#Project#VersionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;

//a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));
//assert a.cidSetStatusActive('urn:dece:cid:eidr-s:512F-4CA1-D6E8-D57D-5012-I')==1</script></con:config></con:testStep><con:testStep type="datasource" name="Country" id="3eeed780-fd5a-42c3-9808-b73093a586dd"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup" id="71eb10a4-236e-4788-8ae7-b7994a36db4c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" disabled="true" id="695377a8-661e-49c7-a47b-e6bd3b6cb5bd"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Policy Resource" id="ce4c9942-2c93-4166-9678-fa289251e17b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def policy_TOU = context.expand( '${#Project#Policy_TOU}' )


String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");
</script></con:config></con:testStep><con:testStep type="groovy" name="MicroService Enable/Disable Testcases" id="fb398d30-7cd3-41e3-a819-9a5b543f1ae0"><con:settings/><con:config><script><![CDATA[
//TestCase
def testCase  = testRunner.getTestCase();
def microService = context.expand( '${#Project#microService}' ).toString();
ArrayList<String> Suit_lst=new ArrayList<String>();
//Get Arguments
 
def project = context.testCase.testSuite.project;

for (suiteName in project.testSuiteList) {
log.info suiteName.name;
Suit_lst.add(suiteName.name);
  
}

//log.info "suit"+Suit_lst.get(1);





ArrayList<String> Tstep=new ArrayList<String>();

def TStep1  = "Remove Account's StreamHandles";
def TStep2 = "Verify STREAM_DATA_HISTORY row";
def TStep3 = "Verify STREAM_DATA, STREAM_HISTORY row counts for the Account";
def TStep4 = "Post Test Cleanup";
def TStep5 ="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts"
def TStep6 ="Verify STREAM_DATA row"
def TStep7 = "Remove account's stream handles"
def TStep8 =  "Post Test Execution cleanup"
def TStep9 ="Remove all Parental Control Policies"

Tstep.add(TStep1);
Tstep.add(TStep2);
Tstep.add(TStep3);
Tstep.add(TStep4);
Tstep.add(TStep5);
Tstep.add(TStep6);
Tstep.add(TStep7);
Tstep.add(TStep8);
Tstep.add(TStep9);

for (String suit : Suit_lst)
{  def testSuite = suit;
     def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
     def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

   for(i = 0; i <= TCCount - 1; i++)
     {                                              
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
                testStepList  = targetTestCase.getTestStepList();
                testStepCount = targetTestCase.getTestStepCount();
                if(targetTestCase.isDisabled() == false)
                {
                                for(j = 0; j <= testStepCount - 1; j++)
                                {              
                                	      def q=0;  
                                                try
                                                {     
                                                          for (String T_step : Tstep)	
					                                {
                                                                if (testStepList[j].name == T_step) {
                                                                                
                                                                                targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
                                                                                //targetTestCase.removeTestStep(targetTestStep);
                                                                                if(microService=="ON")
																				{  
																				   targetTestStep.setDisabled(true)
																				   log.info "Disabled Step " + testStepList[j].name;
																				}
																				else
																				{  
																				   targetTestStep.setDisabled(false)
																				   log.info "Enabled Step " + testStepList[j].name;
																				}
                                                                         }
													q++;
																  
												}
                                                                
                                                                //stepScript = testStepList[j].getScript();
                                                                //stepScript = stepScript.replace(oldString, newString);
                                                                //targetTestStep.setScript(stepScript);                  
                                                }
                                                catch(Throwable e)
                                                {
                                                                log.info "ERROR:" + e;
                                                }              
                                }
                }
    } 
}                                                                                             
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Identify Flaky Testcases" id="ac7dbfe3-246d-4246-803e-ffbcbecddd57"><con:settings/><con:config><script>//Project Level Variable name – FLAKYSELECTOR.
//Possible Values – all, only_flaky, without_flaky
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tc_condition  = context.expand( '${#Project#FLAKYSELECTOR}' ).toString();
log.info tc_condition

tP.getTestSuiteList().each
{
      if(!it.getName().toLowerCase().contains("setup") &amp;&amp; !it.isDisabled())
       {
                it.getTestCaseList().each
         {
             if(tc_condition.toLowerCase()=="all")
             {
                                
                 if(it.getName().toLowerCase().contains("migrated"))
                       it.setDisabled(true);  
                   else 
                         if (!it.isDisabled()) {
                               it.setDisabled(false);
                           }
                                                                                                              
                }
                                                                
             else if(tc_condition.toLowerCase()=="only_flaky")
               {
                  if(it.getName().toLowerCase().contains("flaky"))
                                                it.setDisabled(false);  
                  else
                         it.setDisabled(true);
                }
                else
                {
                   if(it.getName().toLowerCase().contains("migrated") || it.getName().toLowerCase().contains("flaky"))
                                           it.setDisabled(true);  
                   else
                        if (!it.isDisabled()) {
                                it.setDisabled(false);
                                 }
 
                }
           }
        }
}

</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140811</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>396d1d6b-33dd-48d6-b41d-40fc4be4bc57</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="P0 Test Cases" id="b5c1dfee-0c95-4df4-854b-66af11e66743"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00000 - StreamRenew - DLP - Test Suite Staging" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ed480236-8baf-4fe6-8150-1c1cbb8e1005"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish data for RET,LLASP,DLASP" id="57585dd3-3048-4302-9957-b017eeaf5719"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E");

def runnerTS = myTS.run( null , false )

assert runnerTS.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="b33f7226-2106-4d87-842d-b3f518b385d0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="918479f8-bb1b-4a02-acac-9d926d083750"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="dcf2df4f-5383-4d08-8e48-ae46c0470727"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("CID");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="588c0f9c-d3ee-43dc-aae1-029bfeeffb6f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="4764a101-2255-4438-a1bd-9cda4d00f306"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c8fd1ca6-a81d-409c-bb37-03aaf2a9b39d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


//def tC = testRunner.getTestCase();


//a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="bfc173f9-3e02-4703-b221-1680c40e5e7a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="bcd720ec-6f55-4358-9f3e-c6e345da2897"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="ba29af1e-37ba-4331-bd10-035c83739e3d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_114044</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147311CEEEEB3D2EE05307991F0AF7ED</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14731259851679BAE05305991F0A7001</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPt4xtgyuIAnMEMDpKS5Q0mal44ir41SW3IkGQi//kgGXCAkh/bwwmi9+vbbi3b3ROI08YKulCAU5ayySBMmg0LatnLBAo4llQHDKchAkWDUvbwIvKob4M0VqzLsta2fLiHgRg1sN1EU2nVcB7vpN5HtN2turdHAqN5oalUpcxgyqTBTbctzkW+7ddurj93PgdsMEKoiHz1alQkIqbG1StW11qQWsm1NlcoCx5nP59V5rcpF7Hiui5yHy4sRmUKKrc7JyqPCkOis9Uk1BAJJQqqEp86Js6NzEspgRGOGVS5gbSt8z5bruC1H64SSxp+s8i6EQxbx4niKGWeU4IQusYnPJagpDyvdJOaCqmn6rhPINcA2LIhNUJ19spxdakcC7TAUEttyitEa6w4iEMAIVL7fDdvWp+OyVlwdC8xkxEUqd49/xgfYDBKeQWjLjVtrascDHohU5wRIMGQkySWdwZUp1gwTkOtsAjkeqnIjIKKLCyp1gS6kYeds09s7rqLRozFI9TcJ2krOCmSCkxw6i1hcjidp6wmdxyi7Tb+Q6+vTR8Zy57ZdENhWLgRlalfHvaIsi2h149v95ezp+Qynubrn8Bw1X+rQbY3y19nkcbEUjeRrM2r1LunFWYtMVTQZz8WPq2XmZN8eyRj3rhcLQknWqHlfw8n5gN0+10Rvenu1/N67//pwfn81Gk7F0Fl26+doIM4HwzGdPzfG/mDu/ONO/BveffT7D2c8frqt343CX6k/y+7DH/7ZQJ7FfMnxUjzFLnp49T7326U7W/x3ZZs3P8qfnoGozdGUwbBXGegsYfVxMzMSGtpRoRpkpvlIBUxZHXPL9I4g1+2OhoHO4eqsX0YNeX6r6SO/0frS7bt+zfVbLTRwuw1dWZsms2KxR/GUs4gaW6blrsrmY4IkDSSwEIQ947nudNL6ALGHFa4M2Z1+BJxJGHPdnlEUQ9wERF7BSxCJa79eEIufmy/Kqlxxdc2uRTdSIHabcmunKd8BoRkF07lNYUtd2VLpYLzgWa4SVJ3hKoNc93Zh2mzg1Zu+I2maJWCoOikP8wSq2TQrQuPI1b9nYyIL6V1/XDy3dx3b/7aJgdYJqVGQxpcvoPMIB6aLu3HkjcOfD06hDXw3D6l5WTqgSlCyYrL76XedmAIpi6R30R3dbEiXun9w9+fp6Cf6S4CL/wug8/H2pvNBTJz9dJSGwhndMrtZHfQQ0m2rsymmF4yqL9V8NsuL+qnXa47Q8I5JpON6zghIrhvr65j/AuaUKM5RU6wkvme8lO9SzNWUjRRWkOp6rxTHI9aWEUiztgz1S10cuxPtmNShU7BQh2SniV65DOMPtzISEKOnxTf6b85F+DtjB7C27Gg/9daiKIvNyUyw13fqgnANS3Xv5WIb/BDAIeO7wjLIJRelC+opV/D+l4ppqm0LE8JzpoY9qxBsN/qCp3rNIPit9AammCXlckn/e7u0aVECBPRKKmmBb3aEwDwBFm8Ni7XRN/MCnfb1r1vref1iXjRW82LQ6PfKoOyw67wRv5VsxWm/xjv/Ag==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14731259851579BAE05305991F0A7001</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14731259851579BAE05305991F0A7001</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147311CEEEEA3D2EE05307991F0AF7ED</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:147311CEEEEA3D2EE05307991F0AF7ED</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147311CEEEF23D2EE05307991F0AF7ED</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:147311CEEEF23D2EE05307991F0AF7ED</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81219</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>750b6e2e-c17b-4c09-9a71-ad88f105a18f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57585dd3-3048-4302-9957-b017eeaf5719</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12053 - StreamRenew - DLP - Full user can renew full-user created stream-200 OK" searchProperties="true" id="a34a2cce-5d85-45da-9bf4-269010a204e6"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="189d86db-9353-4e31-826b-74df89218a51"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="2865b2e9-6bd5-479a-acb7-680295a875bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="081b31df-b670-4e31-9ed6-af0671c84962" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d2d764f7-3d70-401b-b6ad-759154cdc808"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="c1dbc385-4c05-4aec-b620-7339dc3ff760"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="c8d9f205-8ea3-49e9-ae2b-8ffe3972bd14"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="7b935edb-9a26-436e-aba9-ec47f08f2ef8"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="a72a624b-e6ee-4a9d-ac56-0290ef1d3a78"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="22daf7f8-7c57-4981-a5cc-abf792b1474c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="47e50739-a5fb-4139-abc3-f164ab591ac8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="981766dd-8cc1-40f1-a969-0679e68f1844" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="644c8f78-7be3-4156-8bce-62e11d2dc607" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>AB97CD2437C1401D85AC9645EE1607EA</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbbcuI4EP0VyvOYMr4b7ApUMUASZoCEy4TZvKSELIMSWwZLNiZfv5IBBxOSZWafXGq3Tp++qLuvKQgD3W1RimKGI1LJwoBQN5c2pCQmbgQopi4BIaIug+6kNei7elV1weGKVOl1GtJzzXYczzY82bEMTTZtXZMdzdBly/NtCDTVUYHHVSlNUI9QBghrSLqqWbJqypo9VW3XtF3DqtYs+0mqPKKYcmyuUlWlPamMNqQlYytXUTabTXVjVKN4oeiqqim/B/0JXKIQSM3rnUe5obi514dVD0EUBLAKo1C5Vko61x51J3hBAEtitLflfWZLVVRH4ToexYtvUnEXeT3iR/mxDUhEMAQBfgMiPgPElpFXaQWLKMZsGX7qhKYKYBllUIaaSb5JSpnahUAlhjEFMl0CbY81Rj6KEYGo8mvca0jfLstafnUaA0L9KA5p+fhnfBBJURCtkCfTg1t7apcDnolU8xpBt0dgkFCcoqEo1hWAiO6zieDlUJWHGPk462PKCzSjgp1yTO/kuItGBy8QZX+ToKPk7EAeQZCg5m2i2gt72r3S/fWPANvh6G2e3M1/Jka9kRM4Vs4FRWp3x5OiLIpodyNU7Vr9rWveAsP6sRrS2PlnDCbWaOJ5xMrCX2Y6XL52sxF7engAy87LU+2lRRczsB5n/tQcLu9nvYf+/e975y0IPWRuxs6VylBb7d4t6m2F9pyRY2Uz07756ePBNrWH6Xb+tBlE6K39OnxLZ7OXkfmYXr3M5lPsRyqMgT+47QyCO3i16PYVkCXdRzzqYcveNAp3jviXZYc3P0nmLwiyw1GUQa9TueFZAuzrZiYk2JP9XNVdieZDGSJMaopbone4CW932HN5Dndnzejo37V2zWm3OpajmV3VMlTLcbQbtWUYLevQZHYsTii2I+JjYUu03F3ZfE0Qhi5FxEOxnEYJ73RU+gKxAxio9MiYP4KIUDSNeHvWwDwDtq1na2MFt3VmG4m2xsC3pcowYvfkPm75DMXlnuyUevIYQbzCSDRuUdeUFzZlPBZrkCYs0KopqBKU8NYeiy7r6mbdUigOVwESTJUw8pIAVVfLVR4Zhe6+ugwgzaXj7jR/bZ/6dfrvEAKu42GhQIUv3xFPIzozXPSDIx8cts8OoQN8K/GweFg8nizGcMek/Ou9TER9FDXS6bcmDwfShe4f3H1uT561vwTo/18Ano+PN5UvYqKcpqMw5KX4yOxhc+AziHet5qGY1kCrrqtJmiZ5/ZimocQcXhGJVFRdmSCY8L66nUaviCgFinLRECuInxgv5GWKCVuSCQMMhbzeK/nxgq1lgqjYWnr8oWaXrkQlkzx0DGXsnKwd8I1LMP5yKYMuFHpc/MA/myh+d/wc1pEd7idfWhgmC3ESA2z7SV3AiMNi3nqj+Bj8HMA542VhEeSCC+MFNU8Y+vxPRfTUhgQgjBLCeh0pFxz3+Zwn266Q+670ASYfJcVuif97uZRxXgIQ8Y2U4hxfrAiueAJkcTQr9kZPx0Wt3jJv6k5X1+s3pXHRMmtFUErsmh/EHyVHcTqt8ea/</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C79D5A5914E05305991F0A33A5</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024623</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:AB97CD2437C1401D85AC9645EE1607EA</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C79D5A5914E05305991F0A33A5</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F89F228FE05305991F0A3A47</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79CAE5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F8A6228FE05305991F0A3A47</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D278A4F8A6228FE05305991F0A3A47</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c8d9f205-8ea3-49e9-ae2b-8ffe3972bd14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22053 - StreamRenew - DLPCS - Full user can renew full-user created stream - 200 OK" searchProperties="true" id="b9a79d82-3975-4977-ae0f-8b51b72435bb"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1e79e320-53d6-4de6-ba32-babbf9a6909e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="01ce7510-338b-4a70-8d52-d1db4c7967dd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="5918d859-8b0b-4a96-a66a-e7b0e5e3bcf2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="146b013e-880c-490d-9885-c881bb6d7abb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="b3746b09-3a10-44e2-be48-bd0c934730a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="b43b8758-f6ea-4603-90da-8ba5ea43029c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="26d35fa1-1453-423c-90b6-a2af294d7f9d"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
Date d1;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
d1=new Date(new Date().getTime());
log.info d1
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);
//String s1=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d1);
//log.info 's1=='+s1
log.info 's=='+s



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="b8c21f69-e76b-4afc-aa92-999b5421417c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="9eff5413-5ccc-47f6-b228-be5727da7c05" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

//log.info "@@@@@@" + streamGetStreamDataRowCount;
log.info "@@@@ ACC ID@@@"  + acct;

assert a.streamGetStreamDataRowCount(acct) == 1;

assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="f8779184-9ed4-4132-9fb6-7cc6fbf721a6" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="38c49eae-ec92-4fb8-b58b-2c3ac44da3ab" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="29419051-84b2-4399-9c37-35c7ee938e5d" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F89F228FE05305991F0A3A47</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbbcuI4EP0VyvOYMr4b7ApUMUASZoCEy4TZvKSELIMSWwZLNiZfv5IBBxOSZWafXGq3Tp++qLuvKQgD3W1RimKGI1LJwoBQN5c2pCQmbgQopi4BIaIug+6kNei7elV1weGKVOl1GtJzzXYczzY82bEMTTZtXZMdzdBly/NtCDTVUYHHVSlNUI9QBghrSLqqWbJqypo9VW3XtF3DqtYs+0mqPKKYcmyuUlWlPamMNqQlYytXUTabTXVjVKN4oeiqqim/B/0JXKIQSM3rnUe5obi514dVD0EUBLAKo1C5Vko61x51J3hBAEtitLflfWZLVVRH4ToexYtvUnEXeT3iR/mxDUhEMAQBfgMiPgPElpFXaQWLKMZsGX7qhKYKYBllUIaaSb5JSpnahUAlhjEFMl0CbY81Rj6KEYGo8mvca0jfLstafnUaA0L9KA5p+fhnfBBJURCtkCfTg1t7apcDnolU8xpBt0dgkFCcoqEo1hWAiO6zieDlUJWHGPk462PKCzSjgp1yTO/kuItGBy8QZX+ToKPk7EAeQZCg5m2i2gt72r3S/fWPANvh6G2e3M1/Jka9kRM4Vs4FRWp3x5OiLIpodyNU7Vr9rWveAsP6sRrS2PlnDCbWaOJ5xMrCX2Y6XL52sxF7engAy87LU+2lRRczsB5n/tQcLu9nvYf+/e975y0IPWRuxs6VylBb7d4t6m2F9pyRY2Uz07756ePBNrWH6Xb+tBlE6K39OnxLZ7OXkfmYXr3M5lPsRyqMgT+47QyCO3i16PYVkCXdRzzqYcveNAp3jviXZYc3P0nmLwiyw1GUQa9TueFZAuzrZiYk2JP9XNVdieZDGSJMaopbone4CW932HN5Dndnzejo37V2zWm3OpajmV3VMlTLcbQbtWUYLevQZHYsTii2I+JjYUu03F3ZfE0Qhi5FxEOxnEYJ73RU+gKxAxio9MiYP4KIUDSNeHvWwDwDtq1na2MFt3VmG4m2xsC3pcowYvfkPm75DMXlnuyUevIYQbzCSDRuUdeUFzZlPBZrkCYs0KopqBKU8NYeiy7r6mbdUigOVwESTJUw8pIAVVfLVR4Zhe6+ugwgzaXj7jR/bZ/6dfrvEAKu42GhQIUv3xFPIzozXPSDIx8cts8OoQN8K/GweFg8nizGcMek/Ou9TER9FDXS6bcmDwfShe4f3H1uT561vwTo/18Ano+PN5UvYqKcpqMw5KX4yOxhc+AziHet5qGY1kCrrqtJmiZ5/ZimocQcXhGJVFRdmSCY8L66nUaviCgFinLRECuInxgv5GWKCVuSCQMMhbzeK/nxgq1lgqjYWnr8oWaXrkQlkzx0DGXsnKwd8I1LMP5yKYMuFHpc/MA/myh+d/wc1pEd7idfWhgmC3ESA2z7SV3AiMNi3nqj+Bj8HMA542VhEeSCC+MFNU8Y+vxPRfTUhgQgjBLCeh0pFxz3+Zwn266Q+670ASYfJcVuif97uZRxXgIQ8Y2U4hxfrAiueAJkcTQr9kZPx0Wt3jJv6k5X1+s3pXHRMmtFUErsmh/EHyVHcTqt8ea/</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81347</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F8A6228FE05305991F0A3A47</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D278A4F8A6228FE05305991F0A3A47</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2A366C1D80FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366C1D80FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>zVdZd6rKEn73V7jcj1mGQUmiK/GsZhBRUUHA4Y2hGZRBaRDk159Wo9tkZ0/33of7kBW7qOGrqq+7q1//KaOwfoApCpL4rUE9ko06jO3ECWLvraFr/eZL459e7RWZUUh3AUIwzbBmXeLfGq5lOQ5N0k27bZvNNmSem1aLNpsUSWJpoy4hlEMpRpkZZ28NmqTIJvnUpBmNancZukuTj9TLy7pRN67R6VN0jCdG3XO8t0aext3ERAHqxmYEUTezu3Mgj7tYs2tewTR67/DOAVOi9+qg7jzwYjPLU/ju0EFvDT/Ldl2CKIrisWg9JqlH0CRJEmSHwDoOCrxvDZzquzF0pNhNLmvOjJM4sM0wqMxTRBlmfuLUQeglaZD50U9cUwRFnlw3YWk3baodf2sQ3wOc0f2hpw8gU2Q2kW9SV2cqdGGKmwbruiq9Nb79pi8XIy01Y+QmaYQ+rf8OC4wPMEx20Gmia0pXWH/u8Ys69V6h3ZViO8xRcICTU/N3pg1RfZZCNyjHAcKUclD93Ph6ia68gfbf9OKVuMeJYRNfVIYPPIiy/6RR9026eDHMMIe9XUkSnbHeWs4iv9Q2yVFOBlsrYrVn4e0M4V75AurW4/f1Z4beCPVu5MyNdcsrHBsVNiQGnLoaz81CtHhqSYhUQpqW20bT4iHoT5dT85hxxrTUGIV294yV5az7zIViW6Ce9GqCasKSPDLLZD+mt9IMyEaHMlJtzA8OB6MFwNO845rsoWVR8r6kJ53RwTnYwTjkaEi7D3t7V3nPPFPBOIz8WVJ7Svw1yR3zuFz4es623a389j2n+xxOeY3g8Zzk6feSITu8mZm3BXfa/y7elxnsyZLE5xXHgePcA4XEAg//bcCE9bZ7fxuInYJkgaL0Ac+x4UYYy2ArAkoXWF/mDEMuuQoMWW9iYEOtBsI1K6tCwRcr3lCUgVD4miMaR0sM83UlTGSAzsacLwuqYPCqJsgySC6yUuYtsdzIc7mQlBVfww54odxVjtjJoFgGNi0x8pyhV3MmXy8NLO8fx9HkYGlCKHOyyM334lyyWrwiDIG6Wth0P8e21TjaJbWVzt4ZDXdwA2C/IHFMUMnatpA1nZ7wqnmWaR9lsiQOZQUVnHLOSqwJxdDQq++14FiZcyKhFDQwu9TC1rj+hFwvh8hcMLGsgoL3zsYjoXCmVyCyQhY17lKrsVCogqpP+rIqFQI4y3ihCJFFT3xL9A92SymHGtjcN4ZThEU/xt9j9WAfmX3NFPvAigzKbqm+HTCBuUwKb/1S8MpqOErWEnYzAYrAsgrAgEhwSg3XnwVj1mCmu6BDB3Ds9pMI+mlNppLR9lCV5EvQmnqzyYLh3e3zTAxmLdPxCSm06U1rCyQJOiPKV0xHXREqHwfV03SkL2GQrqpswijUU/DC1NRFri/5JHx2BsuVPnooV7aiTWdzfTGrynKy37xUYTaYsoN0PpR5bzqBcIbsB4I0+6z2wjPcarDBfHJVEjI14MksAOLG84QAE5gdbC4kHKiygMkLZK4QuQUnzoEoPggSyyuK2/epmS0auU5NZElwQlym42qphrU1x/K4U6S5WO9WdJ9ca8A5O1PaQt9TdOZhuIRrZRJqRgaKneHGFEWKO2XgyoVnyycGOFIxZ/EuYmu5BHRzuhuS5ch4Iqm94oTDeQforXJOb8up762PW2+9xU1Z3W2dlQZCQ7vjmIQptqgpmqDK4OWy30pZ0ltqaEflzorsktdwz87GicYKal8h9ZLnwegiQxqgS7SqhI3MCWf7GihlE9PiYC19tIonwVQTckza/I4uG4smf8uxE8VqHzm254ACPnNMuHBMAO7+QXrhKcQ8cTu0KDxWFPbKszEednakshxva+xDn/CyIGxP45dCGz0sqGPx7G+UxaIj8T73ELsrv2VlLGlWtgKH22cxULd8/NQOj/JYVhg9IMIjuYH7Ao1rE4mKhVZW9YlOmj+w0TqIqqrVpvVoNs8Pkm6OEHX0rf2iU2xmgyeCSMUjUz2vD0p/mdiryz3y+ZC8CS/HKHF/wH44ga8T1Ty3NtDOrsvTPSzx9T6+HM3s59MZ9UidJYHTdM+q3TxGO2hjGNBp9NwUOskrce/yUzwuid3gZHgaNS83769nQTvqWtBMYdr4hadT0nUpVvEokcQIaslbA+ETIo+DfY6x+viCbdQnSTaNpylwM5ieh1bq66FVxensAniabO8GAVia0S6Ej3YSEaZtJ3mcIfwDnWeNnwL7/O2aA9ZxgpMCOsFiIS4m/DxIt5hu+4rpD7Ff3YPcCU4jBS5Ilgb2BcnHT7333FDmQHtvHswd9XgwH2OY46k+Pad5xX4z+Sz44J74nNktonMI7Bvvbg8NiceTTw+wHC/c/H789tkCz8An8Qk4wsgxbnjDawUVcXs2oH/wI8a0bAf+4Pndx03+EVue+fE8w/spwu2vn5e/f+V8sMbpZ7DMvpJxIQZ4Cv7Lp4/dtU96WDzD/4okdb5X/QtfX338KLzlc8OU4aZZeQZ//qV+2rtvjXeeB07jLLgeDne74r78vMAJBLiYSHzjB6fn2e99mC9/9majiKU8nts+jMzGTTf4vXIzOPfJxvsc63ez4w7jL/FrEwePvUaPoltt5laXD5B6P4h/lPwXRUyv8/3flFEV+v93JQR9nuVwHfFV1Wr/T0r5eXP2/gU=</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value>79C4FB2C0DF54676AB6E7503513F326A</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:79C4FB2C0DF54676AB6E7503513F326A</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024623</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79CAE5914E05305991F0A33A5</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>26d35fa1-1453-423c-90b6-a2af294d7f9d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b43b8758-f6ea-4603-90da-8ba5ea43029c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_42053 - StreamRenew - LLPCS - Full user can renew full-user created stream" searchProperties="true" id="48f09614-9451-4273-a8fd-25eabdb3d732"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="03ee8750-ad29-46b6-9b8c-a016216fd585"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f3c3a364-b6ab-4406-abc1-e64fc836e2b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c63d9708-7f98-4326-ba54-2738b0dcff50" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="7aa61978-ac61-4f64-ba33-0bbe0cc85390"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="12c9c0b0-5034-454c-8bbf-9f095d93426e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="3828be74-c9c2-4042-af73-ff65e445bc5a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="e7064ed4-0cab-4fc9-9b0a-b239198af10d"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="126053cd-b792-4cdd-a5de-943a9ce60881"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="3b58df86-8815-4752-9620-82e3c3ea7321" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="0060a2b5-c6f7-4bb6-962d-28060091a279" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="f1e7ca60-dead-4cc0-bc08-446aaf3b8c97" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="a18e45d6-4163-40dd-8362-bca1f0701136" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F89F228FE05305991F0A3A47</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbbcuI4EP0VyvOYMr4b7ApUMUASZoCEy4TZvKSELIMSWwZLNiZfv5IBBxOSZWafXGq3Tp++qLuvKQgD3W1RimKGI1LJwoBQN5c2pCQmbgQopi4BIaIug+6kNei7elV1weGKVOl1GtJzzXYczzY82bEMTTZtXZMdzdBly/NtCDTVUYHHVSlNUI9QBghrSLqqWbJqypo9VW3XtF3DqtYs+0mqPKKYcmyuUlWlPamMNqQlYytXUTabTXVjVKN4oeiqqim/B/0JXKIQSM3rnUe5obi514dVD0EUBLAKo1C5Vko61x51J3hBAEtitLflfWZLVVRH4ToexYtvUnEXeT3iR/mxDUhEMAQBfgMiPgPElpFXaQWLKMZsGX7qhKYKYBllUIaaSb5JSpnahUAlhjEFMl0CbY81Rj6KEYGo8mvca0jfLstafnUaA0L9KA5p+fhnfBBJURCtkCfTg1t7apcDnolU8xpBt0dgkFCcoqEo1hWAiO6zieDlUJWHGPk462PKCzSjgp1yTO/kuItGBy8QZX+ToKPk7EAeQZCg5m2i2gt72r3S/fWPANvh6G2e3M1/Jka9kRM4Vs4FRWp3x5OiLIpodyNU7Vr9rWveAsP6sRrS2PlnDCbWaOJ5xMrCX2Y6XL52sxF7engAy87LU+2lRRczsB5n/tQcLu9nvYf+/e975y0IPWRuxs6VylBb7d4t6m2F9pyRY2Uz07756ePBNrWH6Xb+tBlE6K39OnxLZ7OXkfmYXr3M5lPsRyqMgT+47QyCO3i16PYVkCXdRzzqYcveNAp3jviXZYc3P0nmLwiyw1GUQa9TueFZAuzrZiYk2JP9XNVdieZDGSJMaopbone4CW932HN5Dndnzejo37V2zWm3OpajmV3VMlTLcbQbtWUYLevQZHYsTii2I+JjYUu03F3ZfE0Qhi5FxEOxnEYJ73RU+gKxAxio9MiYP4KIUDSNeHvWwDwDtq1na2MFt3VmG4m2xsC3pcowYvfkPm75DMXlnuyUevIYQbzCSDRuUdeUFzZlPBZrkCYs0KopqBKU8NYeiy7r6mbdUigOVwESTJUw8pIAVVfLVR4Zhe6+ugwgzaXj7jR/bZ/6dfrvEAKu42GhQIUv3xFPIzozXPSDIx8cts8OoQN8K/GweFg8nizGcMek/Ou9TER9FDXS6bcmDwfShe4f3H1uT561vwTo/18Ano+PN5UvYqKcpqMw5KX4yOxhc+AziHet5qGY1kCrrqtJmiZ5/ZimocQcXhGJVFRdmSCY8L66nUaviCgFinLRECuInxgv5GWKCVuSCQMMhbzeK/nxgq1lgqjYWnr8oWaXrkQlkzx0DGXsnKwd8I1LMP5yKYMuFHpc/MA/myh+d/wc1pEd7idfWhgmC3ESA2z7SV3AiMNi3nqj+Bj8HMA542VhEeSCC+MFNU8Y+vxPRfTUhgQgjBLCeh0pFxz3+Zwn266Q+670ASYfJcVuif97uZRxXgIQ8Y2U4hxfrAiueAJkcTQr9kZPx0Wt3jJv6k5X1+s3pXHRMmtFUErsmh/EHyVHcTqt8ea/</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81536</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F8A6228FE05305991F0A3A47</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D278A4F8A6228FE05305991F0A3A47</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2A366C1E40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366C1E40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value>CEACD82F903849D98EEDB28A446821C8</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:CEACD82F903849D98EEDB28A446821C8</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024623</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79CAE5914E05305991F0A33A5</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3828be74-c9c2-4042-af73-ff65e445bc5a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7064ed4-0cab-4fc9-9b0a-b239198af10d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Dynamic LASP Test Cases_P1" id="2af6cdea-6fd0-4c39-9710-3fa738301f99"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00000 - StreamRenew - DLP - Test Suite Staging" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="60315afb-970d-4ca1-b73a-d8b28418630c"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b0810e37-6668-404d-ad62-c08897d481e2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="eb1d18d7-db75-4052-b783-d25c5e7a3b96"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="70e497e4-a967-42e1-b19b-fff835dfa2eb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="9b2604f8-df3d-4a57-b072-26339460b34a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="76b2df35-bd83-4fb0-b4bd-ca48f73f939f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="312db355-668e-4982-b319-b0c92f3bfed6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="6bfef0e4-d70f-4647-bf14-eeca8e22718d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="d1f489dd-80f7-445b-978f-c576d6da0d4c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="3482723e-39be-4d17-baea-4b77ce3deca4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Call StreamView" id="fb55c33f-e82b-4d8b-b289-dffab9d76853" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024623</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F89F228FE05305991F0A3A47</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79CAE5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbbcuI4EP0VyvOYMr4b7ApUMUASZoCEy4TZvKSELIMSWwZLNiZfv5IBBxOSZWafXGq3Tp++qLuvKQgD3W1RimKGI1LJwoBQN5c2pCQmbgQopi4BIaIug+6kNei7elV1weGKVOl1GtJzzXYczzY82bEMTTZtXZMdzdBly/NtCDTVUYHHVSlNUI9QBghrSLqqWbJqypo9VW3XtF3DqtYs+0mqPKKYcmyuUlWlPamMNqQlYytXUTabTXVjVKN4oeiqqim/B/0JXKIQSM3rnUe5obi514dVD0EUBLAKo1C5Vko61x51J3hBAEtitLflfWZLVVRH4ToexYtvUnEXeT3iR/mxDUhEMAQBfgMiPgPElpFXaQWLKMZsGX7qhKYKYBllUIaaSb5JSpnahUAlhjEFMl0CbY81Rj6KEYGo8mvca0jfLstafnUaA0L9KA5p+fhnfBBJURCtkCfTg1t7apcDnolU8xpBt0dgkFCcoqEo1hWAiO6zieDlUJWHGPk462PKCzSjgp1yTO/kuItGBy8QZX+ToKPk7EAeQZCg5m2i2gt72r3S/fWPANvh6G2e3M1/Jka9kRM4Vs4FRWp3x5OiLIpodyNU7Vr9rWveAsP6sRrS2PlnDCbWaOJ5xMrCX2Y6XL52sxF7engAy87LU+2lRRczsB5n/tQcLu9nvYf+/e975y0IPWRuxs6VylBb7d4t6m2F9pyRY2Uz07756ePBNrWH6Xb+tBlE6K39OnxLZ7OXkfmYXr3M5lPsRyqMgT+47QyCO3i16PYVkCXdRzzqYcveNAp3jviXZYc3P0nmLwiyw1GUQa9TueFZAuzrZiYk2JP9XNVdieZDGSJMaopbone4CW932HN5Dndnzejo37V2zWm3OpajmV3VMlTLcbQbtWUYLevQZHYsTii2I+JjYUu03F3ZfE0Qhi5FxEOxnEYJ73RU+gKxAxio9MiYP4KIUDSNeHvWwDwDtq1na2MFt3VmG4m2xsC3pcowYvfkPm75DMXlnuyUevIYQbzCSDRuUdeUFzZlPBZrkCYs0KopqBKU8NYeiy7r6mbdUigOVwESTJUw8pIAVVfLVR4Zhe6+ugwgzaXj7jR/bZ/6dfrvEAKu42GhQIUv3xFPIzozXPSDIx8cts8OoQN8K/GweFg8nizGcMek/Ou9TER9FDXS6bcmDwfShe4f3H1uT561vwTo/18Ano+PN5UvYqKcpqMw5KX4yOxhc+AziHet5qGY1kCrrqtJmiZ5/ZimocQcXhGJVFRdmSCY8L66nUaviCgFinLRECuInxgv5GWKCVuSCQMMhbzeK/nxgq1lgqjYWnr8oWaXrkQlkzx0DGXsnKwd8I1LMP5yKYMuFHpc/MA/myh+d/wc1pEd7idfWhgmC3ESA2z7SV3AiMNi3nqj+Bj8HMA542VhEeSCC+MFNU8Y+vxPRfTUhgQgjBLCeh0pFxz3+Zwn266Q+670ASYfJcVuif97uZRxXgIQ8Y2U4hxfrAiueAJkcTQr9kZPx0Wt3jJv6k5X1+s3pXHRMmtFUErsmh/EHyVHcTqt8ea/</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F8A6228FE05305991F0A3A47</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D278A4F8A6228FE05305991F0A3A47</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81219</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>750b6e2e-c17b-4c09-9a71-ad88f105a18f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_11000 - StreamRenew - DLP - StreamHandleInvalid - Stream handle malformed-404 Not Found_MIGRATED" searchProperties="true" id="c7c0527b-5e2c-4981-9258-833fac4ca252"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9ae15978-1190-4e30-98e5-930ba7e0fca0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","10");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="620ab39a-8376-4c21-875b-3854509b6409"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tP.setPropertyValue("StreamCreateCount","12");
def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c1355694-48d5-4bb1-8125-557930e546b9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3f866038-7a62-474e-a687-4ab17fdcde46"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="f319277b-2b4e-48c5-b71c-a30a7874cdf8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="fb55c33f-e82b-4d8b-b289-dffab9d76853" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasource" name="Grid of malformed stream handles" id="41108f89-b801-41b7-a56d-e99da6424759"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:B&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:aaaaaaBBBBBcccccc&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:!!!!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:1000-a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:a399999&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:111111111111111111111111111111111111111111111111111111111&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:1a999-333-ss&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:urn::&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:urn::aaa1332&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece::-------&lt;/con:entry></row></con:configuration></con:dataSource><con:property>streamhandle</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="737147ef-fb1c-456a-8940-23c66d1ced8e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>streamhandle</con:name><con:sourceType>streamhandle</con:sourceType><con:sourceStep>Grid of malformed stream handles</con:sourceStep><con:sourcePath/><con:targetType>streamhandleFULL</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="9ac9c77b-0c02-4cb8-86db-cf3bcbeddef3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Process next stream handle in Grid" id="7d957383-2dc9-49f8-b8f6-4a408ff98963"><con:settings/><con:config><dataSourceStep>Grid of malformed stream handles</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="42bed993-ba10-46b1-b088-60e537101ff0" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:properties><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>useroid</con:name><con:value>13D2B1C79CAE5914E05305991F0A33A5</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024623</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL_body</con:name><con:value>urn:dece:streamhandleid:org:dece:1166D62A7A563BB8E05305991F0AB57C</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece::-------</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>3522AA9B662A40DFA3B89028EEC2EBF0</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C79D685914E05305991F0A33A5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C79D685914E05305991F0A33A5</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:13D278A4F8A6228FE05305991F0A3A47</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>13D278A4F8A6228FE05305991F0A3A47</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81220</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>10</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assert</con:name><con:value>pVbbcuI4EP0VyvOYMr4b7ApUMUASZoCEy4TZvKSELIMSWwZLNiZfv5IBBxOSZWafXGq3Tp++qLuvKQgD3W1RimKGI1LJwoBQN5c2pCQmbgQopi4BIaIug+6kNei7elV1weGKVOl1GtJzzXYczzY82bEMTTZtXZMdzdBly/NtCDTVUYHHVSlNUI9QBghrSLqqWbJqypo9VW3XtF3DqtYs+0mqPKKYcmyuUlWlPamMNqQlYytXUTabTXVjVKN4oeiqqim/B/0JXKIQSM3rnUe5obi514dVD0EUBLAKo1C5Vko61x51J3hBAEtitLflfWZLVVRH4ToexYtvUnEXeT3iR/mxDUhEMAQBfgMiPgPElpFXaQWLKMZsGX7qhKYKYBllUIaaSb5JSpnahUAlhjEFMl0CbY81Rj6KEYGo8mvca0jfLstafnUaA0L9KA5p+fhnfBBJURCtkCfTg1t7apcDnolU8xpBt0dgkFCcoqEo1hWAiO6zieDlUJWHGPk462PKCzSjgp1yTO/kuItGBy8QZX+ToKPk7EAeQZCg5m2i2gt72r3S/fWPANvh6G2e3M1/Jka9kRM4Vs4FRWp3x5OiLIpodyNU7Vr9rWveAsP6sRrS2PlnDCbWaOJ5xMrCX2Y6XL52sxF7engAy87LU+2lRRczsB5n/tQcLu9nvYf+/e975y0IPWRuxs6VylBb7d4t6m2F9pyRY2Uz07756ePBNrWH6Xb+tBlE6K39OnxLZ7OXkfmYXr3M5lPsRyqMgT+47QyCO3i16PYVkCXdRzzqYcveNAp3jviXZYc3P0nmLwiyw1GUQa9TueFZAuzrZiYk2JP9XNVdieZDGSJMaopbone4CW932HN5Dndnzejo37V2zWm3OpajmV3VMlTLcbQbtWUYLevQZHYsTii2I+JjYUu03F3ZfE0Qhi5FxEOxnEYJ73RU+gKxAxio9MiYP4KIUDSNeHvWwDwDtq1na2MFt3VmG4m2xsC3pcowYvfkPm75DMXlnuyUevIYQbzCSDRuUdeUFzZlPBZrkCYs0KopqBKU8NYeiy7r6mbdUigOVwESTJUw8pIAVVfLVR4Zhe6+ugwgzaXj7jR/bZ/6dfrvEAKu42GhQIUv3xFPIzozXPSDIx8cts8OoQN8K/GweFg8nizGcMek/Ou9TER9FDXS6bcmDwfShe4f3H1uT561vwTo/18Ano+PN5UvYqKcpqMw5KX4yOxhc+AziHet5qGY1kCrrqtJmiZ5/ZimocQcXhGJVFRdmSCY8L66nUaviCgFinLRECuInxgv5GWKCVuSCQMMhbzeK/nxgq1lgqjYWnr8oWaXrkQlkzx0DGXsnKwd8I1LMP5yKYMuFHpc/MA/myh+d/wc1pEd7idfWhgmC3ESA2z7SV3AiMNi3nqj+Bj8HMA542VhEeSCC+MFNU8Y+vxPRfTUhgQgjBLCeh0pFxz3+Zwn266Q+670ASYfJcVuif97uZRxXgIQ8Y2U4hxfrAiueAJkcTQr9kZPx0Wt3jJv6k5X1+s3pXHRMmtFUErsmh/EHyVHcTqt8ea/</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>13D278A4F89F228FE05305991F0A3A47</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3f866038-7a62-474e-a687-4ab17fdcde46</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_11001 - StreamRenew - DLP - StreamNotFound - Stream handle does not exist-404 Not Found_MIGRATED" searchProperties="true" id="dde67f15-11a7-49f1-8ab6-486fc3dfb39e"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a nonexistent stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2a24e27f-4f16-43fc-8ad1-53713bc6ec56"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="63bc1d1c-e473-41f3-8993-30f70f84d746"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tP.setPropertyValue("StreamCreateCount","12");

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d763123b-328f-4c20-85a7-c9926f2ae301" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d5e21936-b3ab-422d-adb2-5a3a553b9459"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Create nonexistent stream handle" id="d93c2391-9de3-4bb8-8fa6-7b0fc65eea51"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new generalUtils.generalUtils(log);

String x = a.randomHexString(40);
String b = tP.getPropertyValue("urnstream") + x;

tC.setPropertyValue("streamhandleFULL",b);
//tC.setPropertyValue("streamhandleFULL_body",b);
//streamhandleFULL_body

this.log.info "a[$a] b[$b] x[$x]";</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="d97d63db-53ad-42a9-bb16-d40461b0b46b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="51c9be89-ed26-4d75-a38b-eb608d4b10fd" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:testStep type="groovy" name="Generate another request if necessary" id="bb9e05af-caf4-46c9-b793-17c9da421bcb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Create nonexistent stream handle");
}</script></con:config></con:testStep><con:properties><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>13D278A4F89F228FE05305991F0A3A47</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVbbcuI4EP0VyvOYMr4b7ApUMUASZoCEy4TZvKSELIMSWwZLNiZfv5IBBxOSZWafXGq3Tp++qLuvKQgD3W1RimKGI1LJwoBQN5c2pCQmbgQopi4BIaIug+6kNei7elV1weGKVOl1GtJzzXYczzY82bEMTTZtXZMdzdBly/NtCDTVUYHHVSlNUI9QBghrSLqqWbJqypo9VW3XtF3DqtYs+0mqPKKYcmyuUlWlPamMNqQlYytXUTabTXVjVKN4oeiqqim/B/0JXKIQSM3rnUe5obi514dVD0EUBLAKo1C5Vko61x51J3hBAEtitLflfWZLVVRH4ToexYtvUnEXeT3iR/mxDUhEMAQBfgMiPgPElpFXaQWLKMZsGX7qhKYKYBllUIaaSb5JSpnahUAlhjEFMl0CbY81Rj6KEYGo8mvca0jfLstafnUaA0L9KA5p+fhnfBBJURCtkCfTg1t7apcDnolU8xpBt0dgkFCcoqEo1hWAiO6zieDlUJWHGPk462PKCzSjgp1yTO/kuItGBy8QZX+ToKPk7EAeQZCg5m2i2gt72r3S/fWPANvh6G2e3M1/Jka9kRM4Vs4FRWp3x5OiLIpodyNU7Vr9rWveAsP6sRrS2PlnDCbWaOJ5xMrCX2Y6XL52sxF7engAy87LU+2lRRczsB5n/tQcLu9nvYf+/e975y0IPWRuxs6VylBb7d4t6m2F9pyRY2Uz07756ePBNrWH6Xb+tBlE6K39OnxLZ7OXkfmYXr3M5lPsRyqMgT+47QyCO3i16PYVkCXdRzzqYcveNAp3jviXZYc3P0nmLwiyw1GUQa9TueFZAuzrZiYk2JP9XNVdieZDGSJMaopbone4CW932HN5Dndnzejo37V2zWm3OpajmV3VMlTLcbQbtWUYLevQZHYsTii2I+JjYUu03F3ZfE0Qhi5FxEOxnEYJ73RU+gKxAxio9MiYP4KIUDSNeHvWwDwDtq1na2MFt3VmG4m2xsC3pcowYvfkPm75DMXlnuyUevIYQbzCSDRuUdeUFzZlPBZrkCYs0KopqBKU8NYeiy7r6mbdUigOVwESTJUw8pIAVVfLVR4Zhe6+ugwgzaXj7jR/bZ/6dfrvEAKu42GhQIUv3xFPIzozXPSDIx8cts8OoQN8K/GweFg8nizGcMek/Ou9TER9FDXS6bcmDwfShe4f3H1uT561vwTo/18Ano+PN5UvYqKcpqMw5KX4yOxhc+AziHet5qGY1kCrrqtJmiZ5/ZimocQcXhGJVFRdmSCY8L66nUaviCgFinLRECuInxgv5GWKCVuSCQMMhbzeK/nxgq1lgqjYWnr8oWaXrkQlkzx0DGXsnKwd8I1LMP5yKYMuFHpc/MA/myh+d/wc1pEd7idfWhgmC3ESA2z7SV3AiMNi3nqj+Bj8HMA542VhEeSCC+MFNU8Y+vxPRfTUhgQgjBLCeh0pFxz3+Zwn266Q+670ASYfJcVuif97uZRxXgIQ8Y2U4hxfrAiueAJkcTQr9kZPx0Wt3jJv6k5X1+s3pXHRMmtFUErsmh/EHyVHcTqt8ea/</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>astreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>25</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81221</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>13D278A4F8A6228FE05305991F0A3A47</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:13D278A4F8A6228FE05305991F0A3A47</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D29822ABA24AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D29822ABA24AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>3</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:B5A19B1ADCD6A2F267C14F5553A716A8A6B51D52</con:value></con:property><con:property><con:name>streamhandleFULL_body</con:name><con:value>urn:dece:streamhandleid:org:dece:6FA7AADC749A27384492489DAF3B4A37667E225A</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>100</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024623</con:value></con:property><con:property><con:name>useroid</con:name><con:value>13D2B1C79CAE5914E05305991F0A33A5</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name><![CDATA[Issue :- StreamRenew API responded inconsistently for Stream micro service ON & OFF  when requesting URL have invalid StreamHandleOid .  StreamRenew API responded inconsistently for 1-11 and 2015-02 when requesting URL have invalid StreamHandleOid.  API responded '400 Bad Request' when stream micro service OFF and '404 Not found' for stream  micro service ON.   2015-02 for stream ON and OFF    *************************** Stream Service OFF ***********************************************************************************************************  PUT https://qa.p.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:1126E87F86DF209BE05305991F0A9E04/Stream/urn:dece:streamhandleid:org:dece:a HTTP/1.1 Connection: close Content-Type: application/xml Authorization: SAML2 assertion=pVbbcuI4EP0VynlMGV+4GLsCVVx3nSGQYJLN5CUl5DYoY8vGkoHk61cywQFCsszsk0vtVvfpi073FUNRaDptxiDlJKalTRRS5uTSppKl1IkRI8yhKALmcOx47ZuhY5Z1B+2uKCW311SeK8jWG7MgUK0ZWGrVapjqzA6Qalb0ekOvzmbGTBeqjGXgUsYR5U3F1I2aqldUozLVLUe3HdMoW3XrSSk9QMqEbaFSFre2oDasqSw4TxxNW6/X5XWlHKdzzdR1Q3u8GXp4ARFSWlfbiHJHaetdH5d9wBCGuIzjSLvSDnSufOZ4ZE4Rz1J49+V/5UvXdFsTOj4j8wuluAu+S4M4P3YRjSnBKCRvSObnBvgi9kvtcB6nhC+iL4MwdGlYhQ1WsVGlF4p2CO1MQwcIU4ZUtkDGu60JBJACxVC6n7hN5eK8quVXpymiLIjTiB0efw8P0BWEcQK+ynZhvUM73+CJTLWuADsuxWHGyApGslkThIG9VxPw+aZKtykEZDMkTDTohkl02j68o+M2Gz0yB8b/pEB7xdkaeUBhBq0a8d3x019r/c0aXVN3ok0e+PK1cj9d9Js5gH3lXFCUdns8asqiibY3UjpeDM3BclqtW2RMjB9xYtu13j/1URBoxgh7T959r7esLB87D78qyRuz3OCS9W+9p37b7CI7c+cvyY0/6ogUolrV4FX3OtSuX8a9p443Qt1gNZxfXjONTFaPVne5vKR3bYIrrrvI6M+7l3tk9+8oHT9NgkEGcDeuxdjzIgIr+2/Wu55OO2xVS6xJLXj82SzC2cN/KNu9eS+bvQDmu6NsA7dXGogqIf49mUkJ8dUgV3USST6MA+VKS96S3OFkgu6I74gabs+GYdb7jbZuDbq2qdt2X69V9JptGwO9rbcr9o5ktiiOIHZjGhDpS1Lutm2+B4gjhwH1IVVXcSaYjinfWOwhjkounYhHEFMG01jQ8wY3loE+w2laQQauWsuIrV83jflGKY1iPqbjtB1wSA842dAPOHkCmCQEJHHLvmaisRkXuViiVcZDo7xCZQqZoPZUsqxjVhs1jZEoCUEi1aLYz0IoJ4skz4zGtl9TRZjl0kl/mr+2L+M6/rdLgdDxiVRgMpYOiDLCieFi7AL5FHD95BDamW9nPpEPS+STpwRvkRz++mgT2R9Fj/SGbe92B7rQ/Y27z13v2fhDA8P/a0DU4/NN7ZucaMflKBz5K7Lndrc5iBkkWKu1a6YlKi/L2WqV5e1jSXZOhXlNFlLTTc0DnAlefZ3Gv4BqhRXtrCFWAD9yXsgPIWZ8QT2OOESi30v58YytxQMmtxZXPNTNuSvRgUuROg4bfkrWDcXGJRF/u5RhB0s9Ib4Vn3Wc+h8VO2Frz4+IUywtnNC5PMkB9vpFX+BYmCWCeuN03/gpA6ecHwqLJBdYuGioWcbh6z8lyalNBWEcZ5S7PSUX7PN8jpO/JuB8KH0yk4+SYrck/71cqiRvAQxiI2Ukty9XBEc+ATrfmxXvTj+PC2vQqPcGYlx09seFmB3VIikH6FqfxJ8le3k67vHWvw== If-Match: * Content-Length: 810 Host: qa.p.uvvu.com:7001 User-Agent: Apache-HttpClient/4.1.1 (java 1.5)  <Stream xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" StreamHandleID="urn:dece:streamhandleid:org:dece:a">        <StreamClientNickname>Release 4</StreamClientNickname>         <RequestingUserID>urn:dece:userid:org:dece:1126E8A07FC92099E05305991F0A0A39</RequestingUserID>        <RightsTokenID>urn:dece:rightstokenid:org:dece:112714B8E93967C2E05307991F0A79BB</RightsTokenID>         <TransactionID>Sprint 4.1</TransactionID> <ExpirationDateTime>2015-03-12T19:27:57.904Z</ExpirationDateTime> <SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation>  </Stream>   HTTP/1.1 400 Bad Request Date: Fri, 13 Mar 2015 07:14:43 GMT Server: Jetty(8.1.14.v20131031) Content-Type: application/xml; charset=UTF-8 x-Transaction-Info: t=1426230883 VQKOYgofmIgAAF0cSasAAAAu urn:dece:org:org:dece:DLASP 10.31.173.1 Content-Length: 769 Vary: Accept-Encoding Connection: close  <?xml version="1.0" encoding="UTF-8" standalone="yes"?> <ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">     <Error ErrorID="urn:dece:errorid:org:dece:StreamHandleIDNotValid">         <Reason Language="en">The stream handle ID is not valid.</Reason>         <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:1126E87F86DF209BE05305991F0A9E04/Stream/urn:dece:streamhandleid:org:dece:a</OriginalRequest>         <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#StreamHandleIDNotValid</ErrorLink>     </Error> </ErrorList>   PUT https://qa.p.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:11273D3ED9E159FFE05305991F0A4817/Stream/urn:dece:streamhandleid:org:dece:a HTTP/1.1 Connection: close Content-Type: application/xml Authorization: SAML2 assertion=pVbZcuI6EP0VyvNIGVs2qytQRVgSwhIGmBDmJSVkAQq2bCwZDF8/kgEHCMll5j651G51n150uu8YdB3DqjKGA048mopchzIrlpaVMKCWBxlhFoUuZhZH1rDa7VhGRrfg8YqSatXLylvBhAZAdkG19WJOzRbzQIWgWFSzJThFed3W8xgLVcZC3KKMQ8rLiqGDnKqbKjBHesEygGWCTD6v/1ZSLzhgwrZQyejKAVTEysqCc9/StM1mk9mYGS+Ya4auA+212xmiBXahUrnbRxQ7CioHfZSxMcKOgzLIc7U77UznzmbWkMwp5GGAD77sr3zpml7ShI7NyPyHktzFdovOvPhYg9SjBEGH7KDMTxfzhWenqs7cCwhfuF8GAXRpWMURUhHI0h+Kdg7tRkNnCAMGVbaA4GBrgGc4wBTh1K9Bq6z8uK1q8dVRACmbeYHLzo9/hwfTNXY8H9sqO4Z1gHa7wSuZqtxhZLUockJG1rgnm9WHCLNDNTG63VSqH+AZiTqEiQaNmESnncK7OO6zUSdzzPi/FOikOHsjL9AJcSWK2o31Yy98bG/vHw20LIxMf9Zr0vbDphwDOFWOBUlp98eLpkyaaH/j/XkydkdT1x400/q4ud310/lGYfYKoDbRn546tV52/u4/ldrt+ut4PuK/yXw72i5BL9/6GY2D+/Tyod0p+T9zhbHTDNxxut9+ry7Xbg1P0sXCQ3VeS++ouXyv95vTRm36i7MdqXXDJ2der9kcdAed1bQ/ed6+vAD9wXTMHEG0ZXTtqtZtbieLuuPo22hDXyMwKSfhnOA/lx3f/DCcvmPEj0fZBq16qimqBPn3ZCYlxFZnsarlS/JhHFOuVOQtyR1WKOiO2Jao4f4MgFHINvPVUtE08rmq0dBzpl4olUBTr+p5AxxJZo/iAmLNozMifUnK3bfN9wCRazFMbRyoay8UTMeUbyzWIYepFh2IR+BRhkeeoGeaXbjvqxXZ7nYUZH1zV1wuwp2xQEqq5/Fn+hxUZxwHZ5wM9DNOHmBEfIIlccu+ZqKxGRe5WMF1yB2QWcMMxaGg9kCyrGVkizmNEdd3sESquZ4dOjjjL/w4Mxrbfw0VIhZLB41R/Nq+jOvy3zEFQscmUoHJWO6xKCO+MlyMYyCfAs5fHUJH89XQJvJhiXzygKA9kvNfH20i+yPpkXqnOuwfQSe6f3H3rTZ8A/9ooPN/DYh6fL6pfZMT7bIciSN7TU7cHjcHMYMEa1WOzbSCmVUmXK/DuH0Kkp0DYV4TJA20IUahINXtyFtiqiUmtJsmWIL6wnMiP8cX8gUdcsixK5o9FR9vWFmGmMmVpSVeaXTrPnTmUuSN44hfk9UcsW5JxN9uZMhCUk+I++Kz8QL7o1xXbJ34EXGKjYUTOpcnOb22XzQF8oRZInjXC06NXzNwzfm5MElygoWLbpqGHH/9JyUJtaxAhLyQ8lZdiQWnJB/j5FsfWx9Kn8zEcyRZLMl/b5YqiVsAiSVW6Mf25X5gyf6n85NBcXB6OSvMutmolxogV2o241mR28+KbBEUkqScoat8En+WnOTpsscrfwA= If-Match: * Content-Length: 810 Host: qa.p.uvvu.com:7001 User-Agent: Apache-HttpClient/4.1.1 (java 1.5)  <Stream xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" StreamHandleID="urn:dece:streamhandleid:org:dece:a">        <StreamClientNickname>Release 4</StreamClientNickname>         <RequestingUserID>urn:dece:userid:org:dece:11274F6A983265A2E05307991F0A0621</RequestingUserID>        <RightsTokenID>urn:dece:rightstokenid:org:dece:1127833262F66B90E05307991F0A3CC2</RightsTokenID>         <TransactionID>Sprint 4.1</TransactionID> <ExpirationDateTime>2014-09-10T22:00:28.352Z</ExpirationDateTime> <SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation>  </Stream>  HTTP/1.1 400 Bad Request Date: Fri, 13 Mar 2015 07:35:18 GMT Server: Jetty(8.1.14.v20131031) Content-Type: application/xml; charset=UTF-8 x-Transaction-Info: t=1426232118 VQKTNQofmIgAAC6tyC8AAAA3 urn:dece:org:org:dece:DLASP 10.31.173.1 Content-Length: 763 Vary: Accept-Encoding Connection: close  <?xml version="1.0" encoding="UTF-8" standalone="yes"?> <ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">     <Error ErrorID="urn:dece:errorid:org:dece:StreamHandleIDNotValid">         <Reason Language="en">The stream handle ID is not valid.</Reason>         <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/1/11/Account/urn:dece:accountid:org:dece:11273D3ED9E159FFE05305991F0A4817/Stream/urn:dece:streamhandleid:org:dece:a</OriginalRequest>         <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#StreamHandleIDNotValid</ErrorLink>     </Error> </ErrorList>    ********************* Stream Service ON ***********************************************  PUT https://qa.p.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:1126E87F86DF209BE05305991F0A9E04/Stream/urn:dece:streamhandleid:org:dece:a HTTP/1.1 Connection: close Content-Type: application/xml Authorization: SAML2 assertion=pVbbcuI4EP0VynlMGV+4GLsCVVx3nSGQYJLN5CUl5DYoY8vGkoHk61cywQFCsszsk0vtVvfpi073FUNRaDptxiDlJKalTRRS5uTSppKl1IkRI8yhKALmcOx47ZuhY5Z1B+2uKCW311SeK8jWG7MgUK0ZWGrVapjqzA6Qalb0ekOvzmbGTBeqjGXgUsYR5U3F1I2aqldUozLVLUe3HdMoW3XrSSk9QMqEbaFSFre2oDasqSw4TxxNW6/X5XWlHKdzzdR1Q3u8GXp4ARFSWlfbiHJHaetdH5d9wBCGuIzjSLvSDnSufOZ4ZE4Rz1J49+V/5UvXdFsTOj4j8wuluAu+S4M4P3YRjSnBKCRvSObnBvgi9kvtcB6nhC+iL4MwdGlYhQ1WsVGlF4p2CO1MQwcIU4ZUtkDGu60JBJACxVC6n7hN5eK8quVXpymiLIjTiB0efw8P0BWEcQK+ynZhvUM73+CJTLWuADsuxWHGyApGslkThIG9VxPw+aZKtykEZDMkTDTohkl02j68o+M2Gz0yB8b/pEB7xdkaeUBhBq0a8d3x019r/c0aXVN3ok0e+PK1cj9d9Js5gH3lXFCUdns8asqiibY3UjpeDM3BclqtW2RMjB9xYtu13j/1URBoxgh7T959r7esLB87D78qyRuz3OCS9W+9p37b7CI7c+cvyY0/6ogUolrV4FX3OtSuX8a9p443Qt1gNZxfXjONTFaPVne5vKR3bYIrrrvI6M+7l3tk9+8oHT9NgkEGcDeuxdjzIgIr+2/Wu55OO2xVS6xJLXj82SzC2cN/KNu9eS+bvQDmu6NsA7dXGogqIf49mUkJ8dUgV3USST6MA+VKS96S3OFkgu6I74gabs+GYdb7jbZuDbq2qdt2X69V9JptGwO9rbcr9o5ktiiOIHZjGhDpS1Lutm2+B4gjhwH1IVVXcSaYjinfWOwhjkounYhHEFMG01jQ8wY3loE+w2laQQauWsuIrV83jflGKY1iPqbjtB1wSA842dAPOHkCmCQEJHHLvmaisRkXuViiVcZDo7xCZQqZoPZUsqxjVhs1jZEoCUEi1aLYz0IoJ4skz4zGtl9TRZjl0kl/mr+2L+M6/rdLgdDxiVRgMpYOiDLCieFi7AL5FHD95BDamW9nPpEPS+STpwRvkRz++mgT2R9Fj/SGbe92B7rQ/Y27z13v2fhDA8P/a0DU4/NN7ZucaMflKBz5K7Lndrc5iBkkWKu1a6YlKi/L2WqV5e1jSXZOhXlNFlLTTc0DnAlefZ3Gv4BqhRXtrCFWAD9yXsgPIWZ8QT2OOESi30v58YytxQMmtxZXPNTNuSvRgUuROg4bfkrWDcXGJRF/u5RhB0s9Ib4Vn3Wc+h8VO2Frz4+IUywtnNC5PMkB9vpFX+BYmCWCeuN03/gpA6ecHwqLJBdYuGioWcbh6z8lyalNBWEcZ5S7PSUX7PN8jpO/JuB8KH0yk4+SYrck/71cqiRvAQxiI2Ukty9XBEc+ATrfmxXvTj+PC2vQqPcGYlx09seFmB3VIikH6FqfxJ8le3k67vHWvw== If-Match: * Content-Length: 810 Host: qa.p.uvvu.com:7001 User-Agent: Apache-HttpClient/4.1.1 (java 1.5)  <Stream xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" StreamHandleID="urn:dece:streamhandleid:org:dece:a">        <StreamClientNickname>Release 4</StreamClientNickname>         <RequestingUserID>urn:dece:userid:org:dece:1126E8A07FC92099E05305991F0A0A39</RequestingUserID>        <RightsTokenID>urn:dece:rightstokenid:org:dece:112714B8E93967C2E05307991F0A79BB</RightsTokenID>         <TransactionID>Sprint 4.1</TransactionID> <ExpirationDateTime>2015-03-12T19:27:57.904Z</ExpirationDateTime> <SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation>  </Stream>    HTTP/1.1 404 Not Found Date: Fri, 13 Mar 2015 07:16:13 GMT Server: Jetty(8.1.14.v20131031) Content-Type: application/xml; charset=UTF-8 x-Transaction-Info: t=1426230973 VQKOvAofmIgAAD9kKJgAAAAU urn:dece:org:org:dece:DLASP 10.31.173.1 Content-Length: 744 Vary: Accept-Encoding Connection: close  <?xml version="1.0" encoding="UTF-8" standalone="yes"?> <ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">     <Error ErrorID="urn:dece:errorid:org:dece:StreamNotFound">         <Reason Language="en">The stream was not found.</Reason>         <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:1126E87F86DF209BE05305991F0A9E04/Stream/urn:dece:streamhandleid:org:dece:a</OriginalRequest>         <ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#StreamNotFound</ErrorLink>     </Error> </ErrorList>   PUT https://qa.p.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:11273D3ED9E159FFE05305991F0A4817/Stream/urn:dece:streamhandleid:org:dece:a HTTP/1.1 Connection: close Content-Type: application/xml Authorization: SAML2 assertion=pVbZcuI6EP0VyvNIGVs2qytQRVgSwhIGmBDmJSVkAQq2bCwZDF8/kgEHCMll5j651G51n150uu8YdB3DqjKGA048mopchzIrlpaVMKCWBxlhFoUuZhZH1rDa7VhGRrfg8YqSatXLylvBhAZAdkG19WJOzRbzQIWgWFSzJThFed3W8xgLVcZC3KKMQ8rLiqGDnKqbKjBHesEygGWCTD6v/1ZSLzhgwrZQyejKAVTEysqCc9/StM1mk9mYGS+Ya4auA+212xmiBXahUrnbRxQ7CioHfZSxMcKOgzLIc7U77UznzmbWkMwp5GGAD77sr3zpml7ShI7NyPyHktzFdovOvPhYg9SjBEGH7KDMTxfzhWenqs7cCwhfuF8GAXRpWMURUhHI0h+Kdg7tRkNnCAMGVbaA4GBrgGc4wBTh1K9Bq6z8uK1q8dVRACmbeYHLzo9/hwfTNXY8H9sqO4Z1gHa7wSuZqtxhZLUockJG1rgnm9WHCLNDNTG63VSqH+AZiTqEiQaNmESnncK7OO6zUSdzzPi/FOikOHsjL9AJcSWK2o31Yy98bG/vHw20LIxMf9Zr0vbDphwDOFWOBUlp98eLpkyaaH/j/XkydkdT1x400/q4ud310/lGYfYKoDbRn546tV52/u4/ldrt+ut4PuK/yXw72i5BL9/6GY2D+/Tyod0p+T9zhbHTDNxxut9+ry7Xbg1P0sXCQ3VeS++ouXyv95vTRm36i7MdqXXDJ2der9kcdAed1bQ/ed6+vAD9wXTMHEG0ZXTtqtZtbieLuuPo22hDXyMwKSfhnOA/lx3f/DCcvmPEj0fZBq16qimqBPn3ZCYlxFZnsarlS/JhHFOuVOQtyR1WKOiO2Jao4f4MgFHINvPVUtE08rmq0dBzpl4olUBTr+p5AxxJZo/iAmLNozMifUnK3bfN9wCRazFMbRyoay8UTMeUbyzWIYepFh2IR+BRhkeeoGeaXbjvqxXZ7nYUZH1zV1wuwp2xQEqq5/Fn+hxUZxwHZ5wM9DNOHmBEfIIlccu+ZqKxGRe5WMF1yB2QWcMMxaGg9kCyrGVkizmNEdd3sESquZ4dOjjjL/w4Mxrbfw0VIhZLB41R/Nq+jOvy3zEFQscmUoHJWO6xKCO+MlyMYyCfAs5fHUJH89XQJvJhiXzygKA9kvNfH20i+yPpkXqnOuwfQSe6f3H3rTZ8A/9ooPN/DYh6fL6pfZMT7bIciSN7TU7cHjcHMYMEa1WOzbSCmVUmXK/DuH0Kkp0DYV4TJA20IUahINXtyFtiqiUmtJsmWIL6wnMiP8cX8gUdcsixK5o9FR9vWFmGmMmVpSVeaXTrPnTmUuSN44hfk9UcsW5JxN9uZMhCUk+I++Kz8QL7o1xXbJ34EXGKjYUTOpcnOb22XzQF8oRZInjXC06NXzNwzfm5MElygoWLbpqGHH/9JyUJtaxAhLyQ8lZdiQWnJB/j5FsfWx9Kn8zEcyRZLMl/b5YqiVsAiSVW6Mf25X5gyf6n85NBcXB6OSvMutmolxogV2o241mR28+KbBEUkqScoat8En+WnOTpsscrfwA= If-Match: * Content-Length: 810 Host: qa.p.uvvu.com:7001 User-Agent: Apache-HttpClient/4.1.1 (java 1.5)  <Stream xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" StreamHandleID="urn:dece:streamhandleid:org:dece:a">        <StreamClientNickname>Release 4</StreamClientNickname>         <RequestingUserID>urn:dece:userid:org:dece:11274F6A983265A2E05307991F0A0621</RequestingUserID>        <RightsTokenID>urn:dece:rightstokenid:org:dece:1127833262F66B90E05307991F0A3CC2</RightsTokenID>         <TransactionID>Sprint 4.1</TransactionID> <ExpirationDateTime>2014-09-10T22:00:28.352Z</ExpirationDateTime> <SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation>  </Stream>   HTTP/1.1 404 Not Found Date: Fri, 13 Mar 2015 07:33:16 GMT Server: Jetty(8.1.14.v20131031) Content-Type: application/xml; charset=UTF-8 x-Transaction-Info: t=1426231996 VQKSuwofmIgAAD9mKh0AAAAW urn:dece:org:org:dece:DLASP 10.31.173.1 Content-Length: 738 Vary: Accept-Encoding Connection: close  <?xml version="1.0" encoding="UTF-8" standalone="yes"?> <ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">     <Error ErrorID="urn:dece:errorid:org:dece:StreamNotFound">         <Reason Language="en">The stream was not found.</Reason>         <OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/1/11/Account/urn:dece:accountid:org:dece:11273D3ED9E159FFE05305991F0A4817/Stream/urn:dece:streamhandleid:org:dece:a</OriginalRequest>         <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#StreamNotFound</ErrorLink>     </Error> </ErrorList>  ]]></con:name></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d5e21936-b3ab-422d-adb2-5a3a553b9459</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_11010 - StreamRenew - DLP - StreamNotActive - Verification of stream status 'deleted' when EXPIRATION_DATE exceeded-403 Forbidden_MIGRATED" searchProperties="true" id="eadd3575-d953-45ea-9d5b-68471c090e8c"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a stream handle owned by the same account but a different LASP</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f833e515-6cfb-4df8-8cbc-25064de10113"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="6e6bec39-9217-452b-b511-c0c063fc796a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="3814b6b8-1a67-48a7-a6f7-20182c3b29a2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b9a07b84-f6c1-4954-949f-c908e8de93e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="52c5eecd-9ff6-4c80-8740-6505e5086042"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Change STREAM_DATA.EXPIRATION to past" id="8852025a-956a-4bcf-ad78-4159ffecb1d6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.streamSetExpireTime(tC.getPropertyValue("streamhandle"),"hours",-2) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="e2110e4d-d84b-46b9-ade1-239d5663413b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="124e76f9-7d4d-4e2e-ba5c-81817ce773d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="24bf6cb8-00a6-4c1f-838e-44340044cd0a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" disabled="true" id="053715c7-54b7-4a41-83bd-9ff0537f555f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="b13242ef-0282-44f3-9e72-7312dacdc19d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="3804e75d-7aa7-46ed-be05-6948d9548749" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>8D293A327BA8440E81D9753BC8C3E122</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbbcuI4EP0VyvOYMr4b7ApUMUASZoCEy4TZvKSELIMSWwZLNiZfv5IBBxOSZWafXGq3Tp++qLuvKQgD3W1RimKGI1LJwoBQN5c2pCQmbgQopi4BIaIug+6kNei7elV1weGKVOl1GtJzzXYczzY82bEMTTZtXZMdzdBly/NtCDTVUYHHVSlNUI9QBghrSLqqWbJqypo9VW3XtF3DqtYs+0mqPKKYcmyuUlWlPamMNqQlYytXUTabTXVjVKN4oeiqqim/B/0JXKIQSM3rnUe5obi514dVD0EUBLAKo1C5Vko61x51J3hBAEtitLflfWZLVVRH4ToexYtvUnEXeT3iR/mxDUhEMAQBfgMiPgPElpFXaQWLKMZsGX7qhKYKYBllUIaaSb5JSpnahUAlhjEFMl0CbY81Rj6KEYGo8mvca0jfLstafnUaA0L9KA5p+fhnfBBJURCtkCfTg1t7apcDnolU8xpBt0dgkFCcoqEo1hWAiO6zieDlUJWHGPk462PKCzSjgp1yTO/kuItGBy8QZX+ToKPk7EAeQZCg5m2i2gt72r3S/fWPANvh6G2e3M1/Jka9kRM4Vs4FRWp3x5OiLIpodyNU7Vr9rWveAsP6sRrS2PlnDCbWaOJ5xMrCX2Y6XL52sxF7engAy87LU+2lRRczsB5n/tQcLu9nvYf+/e975y0IPWRuxs6VylBb7d4t6m2F9pyRY2Uz07756ePBNrWH6Xb+tBlE6K39OnxLZ7OXkfmYXr3M5lPsRyqMgT+47QyCO3i16PYVkCXdRzzqYcveNAp3jviXZYc3P0nmLwiyw1GUQa9TueFZAuzrZiYk2JP9XNVdieZDGSJMaopbone4CW932HN5Dndnzejo37V2zWm3OpajmV3VMlTLcbQbtWUYLevQZHYsTii2I+JjYUu03F3ZfE0Qhi5FxEOxnEYJ73RU+gKxAxio9MiYP4KIUDSNeHvWwDwDtq1na2MFt3VmG4m2xsC3pcowYvfkPm75DMXlnuyUevIYQbzCSDRuUdeUFzZlPBZrkCYs0KopqBKU8NYeiy7r6mbdUigOVwESTJUw8pIAVVfLVR4Zhe6+ugwgzaXj7jR/bZ/6dfrvEAKu42GhQIUv3xFPIzozXPSDIx8cts8OoQN8K/GweFg8nizGcMek/Ou9TER9FDXS6bcmDwfShe4f3H1uT561vwTo/18Ano+PN5UvYqKcpqMw5KX4yOxhc+AziHet5qGY1kCrrqtJmiZ5/ZimocQcXhGJVFRdmSCY8L66nUaviCgFinLRECuInxgv5GWKCVuSCQMMhbzeK/nxgq1lgqjYWnr8oWaXrkQlkzx0DGXsnKwd8I1LMP5yKYMuFHpc/MA/myh+d/wc1pEd7idfWhgmC3ESA2z7SV3AiMNi3nqj+Bj8HMA542VhEeSCC+MFNU8Y+vxPRfTUhgQgjBLCeh0pFxz3+Zwn266Q+670ASYfJcVuif97uZRxXgIQ8Y2U4hxfrAiueAJkcTQr9kZPx0Wt3jJv6k5X1+s3pXHRMmtFUErsmh/EHyVHcTqt8ea/</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D29822ABAE4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)}</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>righstokenid</con:name><con:value>141711</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024623</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:8D293A327BA8440E81D9753BC8C3E122</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F89F228FE05305991F0A3A47</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79CAE5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79CAD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D278A4F89E228FE05305991F0A3A47</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D29822ABAE4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>expectDBClosedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D278A4F8A6228FE05305991F0A3A47</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D278A4F8A6228FE05305991F0A3A47</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e2110e4d-d84b-46b9-ade1-239d5663413b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12051 - StreamRenew - DLP - Stream renewal allowed for 'controlled' userId-200 OK_MIGRATED" searchProperties="true" id="54b0d0d9-2229-4a3a-bc67-d48544cbe49b"><con:description>This test case will verify that a controlled userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="91daf4fc-aa1b-400a-b8e7-d401a753f999"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="dd82d1ec-323d-4bb0-b2a6-d5cb7b87fe11"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="f47acd22-12b3-4a17-81bc-fc4055eba607" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="04ff4d34-1ee7-4c5d-91ef-39816a3ab0df"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e2d27240-6592-44b9-8937-91c6308289f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="73e0b842-d08e-46cb-92c7-8edd8f1b3e8b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="91039a32-6155-4a56-baad-7c647d753f59"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="b3cc4104-ddc2-4573-873f-3bf548458586"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f1be5147-b5f7-4d3f-96fb-bb1a4591f892" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="89296e55-a0e0-4751-9287-80007c45eef5" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="40f2c9f7-5816-4e54-9bc1-78153ead4fcb" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="1c7c162c-b990-4618-896f-fabd0145670c" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>6889ED16943E4CF8BF0C8A0E273A3E66</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtc+I4DP4rTPZjJzhvvCRTmAHCdui0lALlevtlxzgKeEkciB0K/fVnB8gCpT32ji+MFVl6JD2WdMtxHFlei3NIBU1YaRNHjHu5tKFlKfMSzCn3GI6Be4J4o9bjg2eVDQ8frmilnt/Qfk7rBuAwxHrFqju640wret2pOjq2wmqlWnWJi0Gqcp5Bj3GBmWholmFWdMPRLWdsVD2j7tn1slWt/9BKE0i5tC1Vyoa2B7XhDW0uxNJD6O3trfxml5N0hizDMNHr48OIzCHGWvN2F1HuKG3u9Uk5AAJRRMokidEtOtG5Dbg3ojOGRZbC3lfwmS8DGS6SOgGns29acReCHguT/NjBLGGU4Ii+Y5WfRxDzJCi1olmSUjGPPw3CNJRhHTZEJ6bDvmnoFNqVhk4QphzrfI7Nva0hhJACI1B6GfYa2rfrqpZfHaeY8TBJY356/DM8wNYQJUsIdH4Iaw/teoMXMtW8BeL1GIkyTtfQV2RdYgJ8X00g15sqDVII6eaBcknQDVfo0DG8s+MuGz6dARf/pUBHxdkZmeAog2aULZ5709iNRsFddzXY3osbMb8JZyjkjRzAsXIuKEq7O56RsiDR7say/RjaAPbGZ+9bvh7bz+9o02H9wWKwwfTppR/fj6ZOul3Ru0F10e8ymrqjRxO9PL8a/afXyf2TP2m7cHMfvm7QWzurDaoiDLcTAS+bYDvJfnUGPXPg+sZLNUiq9rN46fV/9P2ATqad4dNde7pKW/BX/PdwWF8HtV/PBnf997k/ttCS3TD7xziMFlk72N4tFo0inCP8p7LDmx9l019AxOGoaNDzS99llbD4upkpCQ30MFf1lqr5cAFMaE11S/UOL5PtjgaerOHubDo127Qqbr1i12tuu9U1KrZRcV3zu9GqSWYdmswOxRnETsJCqnyplrujzdcASexxYAGk+jrJZKfj2hcWfSxwqceG8hEkjMM4ke3ZjI3tolqLK0FgZBWLrAJhm0DrQiv1E/HEntJWKCA97cnuSU8eAqFLCqpxK15zSWwuZC5WeJ2JyCyvcZlBJlt7qrqsZzn1CuI0XkagkKI4CbIIysv5Ms8M4rt/S8eE59Jhd5y/tk/jOv92SIHUCahS4CqWNsgywoXhYh0C+RBw9eIQOphvZQFVD0vmU6SU7JCcfvpNE8WPgiP+Q2s0OIAudP/g7s/O6Kf5Hw08/F8Dsh4fb6IvcoLOy1E4Ctb0yO1hc5AzSHat5oFMK2yWV+Vsvc5y/jiOjVJpHqlCIsNCIyCZ7KvbcbIAhgor6KohVgA/c17ITyFmYs5GAguIJd9L+fGKrWUEXG0tPflQN9euRCcuZeoEbMQlWSeSG5dC/OVSRjyi9KR4IP/ekjT4XbELto78yDjl0iIom6mTGmDbT3hBEmmWytabpMfGLxm45PxUWCS5wCIkoaaZgM+/lFRPbWiYkCRjoudrueC4z+c4xXYJ3m+lD2byUVLslvTfl0ud5hQgco+V+rl9tSJ46gmw2dGs2Dv9MC7MTlf+WrZvdfNxUduNi++1rl8k5QRd84P4o+QoT+ccb/4D</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>1473126A4E8A734BE05307991F0AC196</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:28:07</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:23:07.102</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:28:07.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:23:07.102Z</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:09:36.769</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:09:36.769</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:09:37</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:09:36.769</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_114046</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:6889ED16943E4CF8BF0C8A0E273A3E66</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1473126A4E8A734BE05307991F0AC196</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147311CEEEEB3D2EE05307991F0AF7ED</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14731259853979BAE05305991F0A7001</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14731259853879BAE05305991F0A7001</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14731259853879BAE05305991F0A7001</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147311CEEEEA3D2EE05307991F0AF7ED</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:147311CEEEEA3D2EE05307991F0AF7ED</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B65694912BCFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147311CEEEF23D2EE05307991F0AF7ED</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:147311CEEEF23D2EE05307991F0AF7ED</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>73e0b842-d08e-46cb-92c7-8edd8f1b3e8b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91039a32-6155-4a56-baad-7c647d753f59</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12054 - StreamRenew - DLP - UserIdUnmatched - Full user cannot renew standard-user created stream - 200 OK_MIGRATED" searchProperties="true" id="22384d79-aaf6-4efd-8286-e118e2ecde25"><con:description>This test case will verify that a basic userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3fb77729-ba6e-4b45-8d30-6863a9becd9b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="3a2c6684-b7af-4b9d-8cfb-0c4b720337ce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="21ebe389-9365-494c-9c3a-b564595ff731" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="44bac7c0-5f2f-49d2-8df1-8745540dec5f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="5b9563d4-dfbc-4b92-adf9-82cc0efe9c84"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="0c5f6044-f64e-400b-93c6-f36a7f18aa34"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="bf2974a2-94bd-49c4-952a-472b101d2d4c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as Full User" id="8af88a97-9f0d-4661-89b3-c5bc86e2c95d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  As my full account user created the stream, i will
*  need to save it's useroid for STREAM table row
*  validations
*/
String useroid = tC.getPropertyValue("useroid");

tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("useroid", useroid);


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6039bb18-0a1b-46f9-b39b-182cd39aceb9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="493dafe5-0459-4a52-8973-c05ffbf04b63" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="c6caa4b0-72f3-412b-853d-6b314bb7d4d6" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>13D29822ABBE4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:19:27.56</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:19:27</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbb+I6EP4rKPsMzg0WooIUSC/Z0wuFtrR9WRlnAG8TG2KHS3/9sQNkgdIedo+EhDwZf/PNxTNzJnAS254vBKSSclZaJjETXi5tGlnKPI4FFR7DCQhPEq/v31x7dsX08PaKUQqDpvETnOp3x6pFZewMa2V35EK5YZpuGer16rBed8B2iVIVIoOQCYmZbBq2aVXLSseqPZg1z62rX+W767wapSdIhcJWKhXT2JBaiqYxkXLqIbRYLCoLp8LTMbJN00LPN9d9MoEEG62ztUe5obS10SeVCAjEMakQnqAztKdzFgmvT8cMyyyFja3oM1smMhtI6USCjr8ZxV2IQjbi+bGDGWeU4Ji+Yx2fG5ATHpX8eMxTKifJp05YpgYuw5KUieWybwbap3Yi0B7DVOCymGBrg9WDEaTACJQee2HT+HZa1vKrDylmYsTTROwf/4wPsDnEfApRWWzd2lA7HfBIpFpnQLyQkTgTdA63ulinmIDYZBPI6VClbgojurymQhXoUmh2aJfewXEdjYCOQci/SdBOctYgTzjOoDVpj+rhIPLrTy//mCM0cMRMLC/D6vzlpZkT2FXOBUVq18eDoiyKaH2j9/xGpwORnN9e9sy7oNG+uJ02Hp3Yf77vZr71GIzt1fsi4o83909XZve5/0Zf8dXLAE3sWvrKRuR15bhu/PqDvLEhGfTPLx8XaWJZbei+jf2rbhsljFO79nTFf+DO8CYMF5e9uw7rKIOPgzvEJwvz/pdKzUN/0ZtPXu5e69IfBEknRe2L+EcU3swX1zOW3Qd+s3Bnh/++bPvm+9nwFxC5PeoyCIPShcoSll83My2hUXmUq3pT3XyEBCaNlr6le4eXqXZHI0/lcH22nMD2nVqtY1245sV5cG5WHbPaaFgXpn/eaH/fNpk1iwOKHc5GVNvSLXddNl8TJIkngEWQluc8U51OGF8gBljiUsh66hFwJuCBq/a8mr6bbyTmWX0lWW2Y2YTNZqNZwyjdcnnH7lJ/JCHdb8mNvZbcA0KnFHTf1mUtVF0LqUIxw/NMxlZljisMMtXZU91kPdutV5GgyTQGTRQlPMpiqEwn0zwwSKz/7TImIpf2zh/yx/apW4ffthFQOhHVCkL70gaVRTgyW5ytIx8crh2dQVt4P4uoflcqnDKlZM1k/9PvKtHlUZRIcO33u1vShe4f3P3Z6f+0/hLg+v8CqHx8vIm+iAk6TEdhKJrTHbPbxUGNINW0WttimmGrMqtk83mW14/rOihV8EgnEpk26gPJVFtdPfA3YKhAQSfNsIL4gfFCvk8xkxPWl1hCouq9lB9PWFr6IPTSEqp3ujx1I9ozqUInYSmPyTqxWrg04y93MuIRrafEXfW34Gn0O2NHsHbsKD/VziIpG+uTnl+rT+qCcAVLVefl6S74MYBjxveFRZALLlIV1DCT8PmXkm6pTQMTwjMmw8DIBbttPucpV1Pwfit9gMknSbFa0v/eLcs0LwECaiEVNMfXG4KnnwAb74yKjdHDadGo27bfbgeu327sTou66RTTYp9d64P4o2QnToc13voX</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:19:27.56</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:19:27.56</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81254</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C79E105914E05305991F0A33A5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C79E105914E05305991F0A33A5</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>zVdZd6rKEn73V7jcj1mGQUmiK/GsZhBRUUHA4Y2hGZRBaRDk159Wo9tkZ0/33of7kBW7qOGrqq+7q1//KaOwfoApCpL4rUE9ko06jO3ECWLvraFr/eZL459e7RWZUUh3AUIwzbBmXeLfGq5lOQ5N0k27bZvNNmSem1aLNpsUSWJpoy4hlEMpRpkZZ28NmqTIJvnUpBmNancZukuTj9TLy7pRN67R6VN0jCdG3XO8t0aext3ERAHqxmYEUTezu3Mgj7tYs2tewTR67/DOAVOi9+qg7jzwYjPLU/ju0EFvDT/Ldl2CKIrisWg9JqlH0CRJEmSHwDoOCrxvDZzquzF0pNhNLmvOjJM4sM0wqMxTRBlmfuLUQeglaZD50U9cUwRFnlw3YWk3baodf2sQ3wOc0f2hpw8gU2Q2kW9SV2cqdGGKmwbruiq9Nb79pi8XIy01Y+QmaYQ+rf8OC4wPMEx20Gmia0pXWH/u8Ys69V6h3ZViO8xRcICTU/N3pg1RfZZCNyjHAcKUclD93Ph6ia68gfbf9OKVuMeJYRNfVIYPPIiy/6RR9026eDHMMIe9XUkSnbHeWs4iv9Q2yVFOBlsrYrVn4e0M4V75AurW4/f1Z4beCPVu5MyNdcsrHBsVNiQGnLoaz81CtHhqSYhUQpqW20bT4iHoT5dT85hxxrTUGIV294yV5az7zIViW6Ce9GqCasKSPDLLZD+mt9IMyEaHMlJtzA8OB6MFwNO845rsoWVR8r6kJ53RwTnYwTjkaEi7D3t7V3nPPFPBOIz8WVJ7Svw1yR3zuFz4es623a389j2n+xxOeY3g8Zzk6feSITu8mZm3BXfa/y7elxnsyZLE5xXHgePcA4XEAg//bcCE9bZ7fxuInYJkgaL0Ac+x4UYYy2ArAkoXWF/mDEMuuQoMWW9iYEOtBsI1K6tCwRcr3lCUgVD4miMaR0sM83UlTGSAzsacLwuqYPCqJsgySC6yUuYtsdzIc7mQlBVfww54odxVjtjJoFgGNi0x8pyhV3MmXy8NLO8fx9HkYGlCKHOyyM334lyyWrwiDIG6Wth0P8e21TjaJbWVzt4ZDXdwA2C/IHFMUMnatpA1nZ7wqnmWaR9lsiQOZQUVnHLOSqwJxdDQq++14FiZcyKhFDQwu9TC1rj+hFwvh8hcMLGsgoL3zsYjoXCmVyCyQhY17lKrsVCogqpP+rIqFQI4y3ihCJFFT3xL9A92SymHGtjcN4ZThEU/xt9j9WAfmX3NFPvAigzKbqm+HTCBuUwKb/1S8MpqOErWEnYzAYrAsgrAgEhwSg3XnwVj1mCmu6BDB3Ds9pMI+mlNppLR9lCV5EvQmnqzyYLh3e3zTAxmLdPxCSm06U1rCyQJOiPKV0xHXREqHwfV03SkL2GQrqpswijUU/DC1NRFri/5JHx2BsuVPnooV7aiTWdzfTGrynKy37xUYTaYsoN0PpR5bzqBcIbsB4I0+6z2wjPcarDBfHJVEjI14MksAOLG84QAE5gdbC4kHKiygMkLZK4QuQUnzoEoPggSyyuK2/epmS0auU5NZElwQlym42qphrU1x/K4U6S5WO9WdJ9ca8A5O1PaQt9TdOZhuIRrZRJqRgaKneHGFEWKO2XgyoVnyycGOFIxZ/EuYmu5BHRzuhuS5ch4Iqm94oTDeQforXJOb8up762PW2+9xU1Z3W2dlQZCQ7vjmIQptqgpmqDK4OWy30pZ0ltqaEflzorsktdwz87GicYKal8h9ZLnwegiQxqgS7SqhI3MCWf7GihlE9PiYC19tIonwVQTckza/I4uG4smf8uxE8VqHzm254ACPnNMuHBMAO7+QXrhKcQ8cTu0KDxWFPbKszEednakshxva+xDn/CyIGxP45dCGz0sqGPx7G+UxaIj8T73ELsrv2VlLGlWtgKH22cxULd8/NQOj/JYVhg9IMIjuYH7Ao1rE4mKhVZW9YlOmj+w0TqIqqrVpvVoNs8Pkm6OEHX0rf2iU2xmgyeCSMUjUz2vD0p/mdiryz3y+ZC8CS/HKHF/wH44ga8T1Ty3NtDOrsvTPSzx9T6+HM3s59MZ9UidJYHTdM+q3TxGO2hjGNBp9NwUOskrce/yUzwuid3gZHgaNS83769nQTvqWtBMYdr4hadT0nUpVvEokcQIaslbA+ETIo+DfY6x+viCbdQnSTaNpylwM5ieh1bq66FVxensAniabO8GAVia0S6Ej3YSEaZtJ3mcIfwDnWeNnwL7/O2aA9ZxgpMCOsFiIS4m/DxIt5hu+4rpD7Ff3YPcCU4jBS5Ilgb2BcnHT7333FDmQHtvHswd9XgwH2OY46k+Pad5xX4z+Sz44J74nNktonMI7Bvvbg8NiceTTw+wHC/c/H789tkCz8An8Qk4wsgxbnjDawUVcXs2oH/wI8a0bAf+4Pndx03+EVue+fE8w/spwu2vn5e/f+V8sMbpZ7DMvpJxIQZ4Cv7Lp4/dtU96WDzD/4okdb5X/QtfX338KLzlc8OU4aZZeQZ//qV+2rtvjXeeB07jLLgeDne74r78vMAJBLiYSHzjB6fn2e99mC9/9majiKU8nts+jMzGTTf4vXIzOPfJxvsc63ez4w7jL/FrEwePvUaPoltt5laXD5B6P4h/lPwXRUyv8/3flFEV+v93JQR9nuVwHfFV1Wr/T0r5eXP2/gU=</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:23:25.955</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:28:25</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value>8AD0471004924F7CA642F98E9148208B</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:8AD0471004924F7CA642F98E9148208B</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:23:25.955Z</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:28:25.000Z</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024836</con:value></con:property><con:property><con:name>useroid</con:name><con:value>13D2A366C2170FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>0c5f6044-f64e-400b-93c6-f36a7f18aa34</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf2974a2-94bd-49c4-952a-472b101d2d4c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12055 - StreamRenew - DLP - UserIdUnmatched - Standard user cannot renew full-user created stream - 200 OK_MIGRATED" searchProperties="true" id="6dfde216-7524-46ac-8c9c-564d1d08cce7"><con:description>This test case will verify that a basic userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="99188e53-fb26-4f10-b5df-70f1d8719bda"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="7a6a502f-51ab-495a-bf5c-8e2cbbba430a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="07f88a98-9f80-4b5f-b346-993a17ccdda4" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="e891ec4b-9acd-4001-8872-2500f9e80ba4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="fcd8068f-ed40-496c-a823-e269093a03a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="f4c52088-5b0c-435a-95b3-1d5e86d1e1ec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="dcf281a0-2a0d-4669-a06f-48c03a6e6793"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as Standard User" id="2137a39f-7b24-492c-921b-df5c089a2ff7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  As my full account user created the stream, i will
*  need to save it's useroid for STREAM table row
*  validations
*/
String useroid = tC.getPropertyValue("useroid");

tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("useroid", useroid);


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="5827352d-356e-40cf-bb1a-c9ffb151938a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="790d82b0-10a8-4516-8806-1f70bb9582bc" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="52b53243-a442-474b-a602-e78148451ffb" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9B65694912BCFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>useroid</con:name><con:value>13D2A366C1F50FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024837</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:28:25.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:23:25.955Z</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:A894209311FF4274B5978EABF8202952</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>A894209311FF4274B5978EABF8202952</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:28:25</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:23:25.955</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C79E1D5914E05305991F0A33A5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C79E1D5914E05305991F0A33A5</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81257</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:19:27.56</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:19:27.56</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D2A366C2160FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D2A366C2160FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assert</con:name><con:value>pVZrU+I8FP4rTP3olF4ohXaEmULVQVEU8LL7ZSemKWRtk5qkXPz1mxSogOjL7vupk9OT5zznknPOGQdpYvsB54gJTEllkSaE+4W0peWM+BRwzH0CUsR9Af1RcNP37arpg80VrdILW9ovF1ie59o13bViqDvNGOjNF+DpjUZkIgdZXuw6UpXzHPUIF4CIlmabVl03Hd1yx6brO02/7lRty/2pVR4R4xJbqlRNbU1qwVvaVIjMN4z5fF6d16qUTQzbNC3j+aY/glOUAq19tvKoMMTaa31YjRBESQKrkKbGmbGjcxZxf4QnBIicobWt6CtbpmF6htSJOJ6caOVdFPVITItjFxBKMAQJfgcqPjdITGlUCZIJZVhM0y+dsEwFrKMF1KHlkBPN2KV2JNAOQ8aBzqfAWmMNUYwYIhBVHoa9lnZyXNaKq2MGCI8pS/nu8e/4IDJDCc1QpPONW2tqxwMeiFT7DEG/R2CSczxDt6pYMwARX2cTweOhKncMxXjRx1wW6IIrdsY2vb3jKhohniAu/iVBW8lZgTyCJEdtENyi08C6flos7h5+gvPH6ax7+T5tBI3XVkFgW7kQlKldHfeKsiyi1Y0H9zlp2PWuXX+6HIX9Uf7Tury4RDm7CGqDAF4vp51scPV7cNt8foiva1P6PrGu7u8pYO+PcXcSwuW7YY6DqHaKl0O7eUqNLPKa9RfEskGadFjvrdmvjwV2wtkzpO/1mGXXQvK5acxGt9c/bp4ff8wbz7RxvqxdPJy+Wr+XYcZg/uPJGFjszrm6vovdobWc3oN5q3Rni/+ubPPmR/nLbwTF5qjKoBdWLmSWgPi+mSkJjvS4UPUz1Xy4QERobXVL9Q4/l+0OR77M4eps1UI7qLluVzYs8+I8PDfrNbPuedaFGZx7ncamyaxY7FHsUhJjZUu13FXZfE8Qpj5HJEJMn9FcdjqufYMYAgEqPTKUj4ASjsZUtucGpbXXxRw3Yw/X8Ruz66ZDU9fWKrdUDMiABbFAbLclezsteYggzjBSfVuVNZd1zYUMxRuY5SKxqjNQJSiXnZ2pJuvbTrNucJxmCVJEjZRGeYKq2TQrAmPw1dfWAeSFdHg+Lh7bl27t/9tEQOpEWClw5UsHySyiA7PF2TjyyWH34AzawAd5hNW7kuEUDMMVk91fH1WiyqMskbAfjO42pEvdv7j7qzv6Zf0jQP//Ash8fL5pfBMTYz8dpaFohrfMbhYHOYJk02pviukNWNW3aj6b5UX9OE7NYBLeUIk0TNsYIZjLtroc01dEjBLFOGqGlcT3jJfyXYq5mJKRAAKlst4rxfGIpWWEuFpaevKdLo7diHZMytAJtBCHZN1ELlyK8bc7GfSh0pPiO/mZUxZ9ZOwA1pYd6afcWQQmE3VS82v5RV1AKmGx7LyUbYMfAjhkfFdYBrnkImRBveQCff2nolpqSwMQ0pyIXqgVgu02X/AUywz5H0qfYIpJUq6W+L93Sx0XJQCRXEg5LvDVhuCrJ0AmW6NibXR/WnhN2w46ndAJOt72tGiatXJa7LJrfxJ/lmzFab/G238A</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:19:27</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:19:27.56</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>13D29822ABBE4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f4c52088-5b0c-435a-95b3-1d5e86d1e1ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dcf281a0-2a0d-4669-a06f-48c03a6e6793</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12054 - StreamRenew - DLP - UserIdUnmatched - Standard user can renew standard-user created stream - 200 OK_MIGRATED" searchProperties="true" id="e85c709e-126e-4177-9faf-378238d4edd7"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e515a34f-0b4d-4ed4-8f06-131699eaa1de"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="e302a475-288c-469a-b163-7740feb33bb6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="5a2677cb-03ec-4f70-b084-09fecb2e6709" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="06885d28-24dd-46ee-a755-5362cb6e86c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="ee5c0174-3da7-4f81-9fde-1ad8f78145d0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="09b02d1e-5ddb-4b85-862d-c905cccb1a98"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="e8452be2-cb31-4107-9978-04320e2e1624"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="b925b758-ee80-4478-a112-e48db8ba1424"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="4c10024f-2e61-4137-9750-a01744cf42c1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="6e43b627-fe9b-4eb5-acd4-614ba805763f" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9B65694912BCFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>useroid</con:name><con:value>13D2A366C2170FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024837</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:A759FE8B22A64D1BA9ED178C10296730</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>A759FE8B22A64D1BA9ED178C10296730</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B46AE9D26E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B46AE9D26E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81256</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D2A366C2160FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D2A366C2160FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assert</con:name><con:value>pVZrU+I8FP4rTP3olF4ohXaEmULVQVEU8LL7ZSemKWRtk5qkXPz1mxSogOjL7vupk9OT5zznknPOGQdpYvsB54gJTEllkSaE+4W0peWM+BRwzH0CUsR9Af1RcNP37arpg80VrdILW9ovF1ie59o13bViqDvNGOjNF+DpjUZkIgdZXuw6UpXzHPUIF4CIlmabVl03Hd1yx6brO02/7lRty/2pVR4R4xJbqlRNbU1qwVvaVIjMN4z5fF6d16qUTQzbNC3j+aY/glOUAq19tvKoMMTaa31YjRBESQKrkKbGmbGjcxZxf4QnBIicobWt6CtbpmF6htSJOJ6caOVdFPVITItjFxBKMAQJfgcqPjdITGlUCZIJZVhM0y+dsEwFrKMF1KHlkBPN2KV2JNAOQ8aBzqfAWmMNUYwYIhBVHoa9lnZyXNaKq2MGCI8pS/nu8e/4IDJDCc1QpPONW2tqxwMeiFT7DEG/R2CSczxDt6pYMwARX2cTweOhKncMxXjRx1wW6IIrdsY2vb3jKhohniAu/iVBW8lZgTyCJEdtENyi08C6flos7h5+gvPH6ax7+T5tBI3XVkFgW7kQlKldHfeKsiyi1Y0H9zlp2PWuXX+6HIX9Uf7Tury4RDm7CGqDAF4vp51scPV7cNt8foiva1P6PrGu7u8pYO+PcXcSwuW7YY6DqHaKl0O7eUqNLPKa9RfEskGadFjvrdmvjwV2wtkzpO/1mGXXQvK5acxGt9c/bp4ff8wbz7RxvqxdPJy+Wr+XYcZg/uPJGFjszrm6vovdobWc3oN5q3Rni/+ubPPmR/nLbwTF5qjKoBdWLmSWgPi+mSkJjvS4UPUz1Xy4QERobXVL9Q4/l+0OR77M4eps1UI7qLluVzYs8+I8PDfrNbPuedaFGZx7ncamyaxY7FHsUhJjZUu13FXZfE8Qpj5HJEJMn9FcdjqufYMYAgEqPTKUj4ASjsZUtucGpbXXxRw3Yw/X8Ruz66ZDU9fWKrdUDMiABbFAbLclezsteYggzjBSfVuVNZd1zYUMxRuY5SKxqjNQJSiXnZ2pJuvbTrNucJxmCVJEjZRGeYKq2TQrAmPw1dfWAeSFdHg+Lh7bl27t/9tEQOpEWClw5UsHySyiA7PF2TjyyWH34AzawAd5hNW7kuEUDMMVk91fH1WiyqMskbAfjO42pEvdv7j7qzv6Zf0jQP//Ash8fL5pfBMTYz8dpaFohrfMbhYHOYJk02pviukNWNW3aj6b5UX9OE7NYBLeUIk0TNsYIZjLtroc01dEjBLFOGqGlcT3jJfyXYq5mJKRAAKlst4rxfGIpWWEuFpaevKdLo7diHZMytAJtBCHZN1ELlyK8bc7GfSh0pPiO/mZUxZ9ZOwA1pYd6afcWQQmE3VS82v5RV1AKmGx7LyUbYMfAjhkfFdYBrnkImRBveQCff2nolpqSwMQ0pyIXqgVgu02X/AUywz5H0qfYIpJUq6W+L93Sx0XJQCRXEg5LvDVhuCrJ0AmW6NibXR/WnhN2w46ndAJOt72tGiatXJa7LJrfxJ/lmzFab/G238A</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>13D29822ABBE4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>09b02d1e-5ddb-4b85-862d-c905cccb1a98</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e8452be2-cb31-4107-9978-04320e2e1624</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12070 - StreamRenew - DLP - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of deleted cannot be renewed-403 Forbidden" searchProperties="true" id="b406f264-509b-4dfd-a373-82bc85d68fd9" disabled="true"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d2a3267c-cb33-4810-84ae-97db412b64a3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="149b6154-d5c4-49ba-a273-4cf38508e46f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="db94169f-b235-4b47-b014-a5e0fa1c75bf" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="6a1f7c15-3456-464d-912b-571dae574b04"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="edd288e9-6481-44c4-8ede-880bf31ab5fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d9eb01fe-ee15-494c-a34e-3890fa21205d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="eeb10329-6a3e-4f68-b670-2c083e153d86"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to deleted" id="34171451-55f6-41bf-9de5-b0ae5ad4ec46"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert b.rightsTokenSetStatusDeleted(tC.getPropertyValue("rightstokenid")) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="50379158-44b0-4463-b21f-2f781971414c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b1c7f1ac-1d6a-49ff-b2fc-012b8e34d8ba" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="f6edbf68-18df-489a-bbf7-13043e2f70bf" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="ed41ec8c-da71-401a-aa5c-861fad48e3c4" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150313_063023</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:2AD69A4286D44B93BED7F787340160DB</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:112C214C50494CF3E05305991F0AF1AD</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB04943D721DE05305991F0A8A58</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB04F33B722DE05305991F0A281D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbbcuI4EP0VyvOYMr6AwbgCVQbCLpncFrJJZl6mhNw22hjJSDIw8/UrGfBgQrLM7JNL7dbpo+7WUV8KtEjdIBQCuCSM1jaLlIqgsHaNnNOAIUFEQNECRCBxMA1vbwK3bgdov8WojYdd41uM26jTjNpmBF7HbCLfN2d4hk2vgVsOnvnNuBUrVyFyGFMhEZVdw7Udz7QbptN4dNzA8wO7U2/7zlej9gRcKGzlUreNHamN6BpzKbPAstbrdX3dqDOeWK5tO9bL7c0Uz2GBjN7l9kRFIN7b+eN6BBjSFNcxW1iXVsXnMhLBlCQUyZzDLlb0XizbsjuW8okEST4Z5V6IxjRmxXKAKKMEo5T8QDo/tyDnLKqFacI4kfPFu4dwbA1swgab2GnST4ZVpXYmUIUhF8gUc+TssCYQAweKofb3ZNw1Pp1XtWLrI0dUxIwvRHX5a3yAriBlGUSm2B9rR+18wBOZ6l0CDsYUp7kgK7jTzZohDGJXTcDnQ9UeOMRkc0OEatCN0OysQ3pHy202hiQBIX+nQAfF2YI8oTSH3tS98ZM49ZI/W+moM/pMvM7T80MGz5HfLQgcOheGsrTb5VFTlk203RGG+EsrXmXL9XrDB0nj2nX5EEbtkPbvrcZL6zmkg9ngdRymeApiOUiu7l2v5XzGTRG6dPUHrCdPMRpMR18GG3kfyf4cPs/Zj9FFFIcbV3654GKSvVhA+tcXU4wfri+aq+sYJbjvjq4i3xszsURf79Dw5ar5l2CT1sRnbjLpe527tpVePL8+XPO7l9uL+DXplsc54F+17e/8NJ/9A1jul7oNxsPaSFUJyY/FTFtIZMaFa5Bp8RESqDR6epfWjiBXckeiQNVwu3Yct9/v281RoxG2XXd4ZXsN2+t0nJEdur4z3IvMlsURxQGjMdGxtORu2+ZjgngRCKARcHPFcqV0wvgAcYgkqo3pRF0CRgU8MiXPjifsyGd8Q7K87Xh0NhNYLhdNqeT1jsl7es/DWAKvirJXEeUJYJIR0MqtG1uozhZSJWOJVrlMnfoK1SnkStu5ltnAbfqeJcgiS0FTtRYsylOoZ/OsSI0ltl/XRFgU1snVY3Hd3j3Y8b99DpRPRLSD0Gfpg6ojvHld2oG3P8ibA7dOvkJ7+DCPiL5ZKqGSE7xlUv31s090g5RNMrwJpw970qXvL+z9Nph+c34T4Ob/Aqh6vN1pfZAT67gcZaBoRQ7C7kcH9Qgp2ertm2mJ6st6vlrlRfu0tTxzBW/pQlq2a00B50pYvz+yV6BWiWKd9YqVxI+Cl/YqxVzO6VQiCQvV77ViecbYosRSjy1jdVM3585ElZAqdRI28pRtkKqRSzP+cCrDAdZ+yvygPmvGo58VO4F1EEedU00tktBEr/QL9v2dvsBMwRKlvYwfgp8COBW8aiyTXHKRqqFmuYT3/9S0qHYNhDHLqRwPjcJwKPQFT/k9g+Cn0xuY4i0ph0vy39OlSYoWwKBGUkEKfD0jBPoK0OTgsdgFPfVedJqNQdt1Ku+FH3p+mZQKu94b81vLQZ6Oe7z3Lw==</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:112BBB04F33A722DE05305991F0A281D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB04F33A722DE05305991F0A281D</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB04943C721DE05305991F0A8A58</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:112BBB04943C721DE05305991F0A8A58</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>112C214C50494CF3E05305991F0AF1AD</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>2AD69A4286D44B93BED7F787340160DB</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB049444721DE05305991F0A8A58</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81262</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:112BBB049444721DE05305991F0A8A58</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d9eb01fe-ee15-494c-a34e-3890fa21205d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eeb10329-6a3e-4f68-b670-2c083e153d86</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12085 - StreamRenew - DLP - ContentIDNotActive - MD_BASIC CID status of 'deleted'-403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="456d288c-6f48-4c05-848c-df578c0abb48" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0c3aa1c3-751b-4565-8412-ab1068e22606"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","CID_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="39863fe7-4611-4931-ab14-2195138e4deb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="f9da5a63-5ab3-429b-bfdc-b764015a6554"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="1b76b11e-ea88-4727-8678-92b75d623ec4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e19d6cdd-86d9-4bbf-94e4-c346c9fd29c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="a628090d-de83-48fe-b289-008d0f9e0bc1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="86f991e8-f8d4-4142-95b1-876839ab66a6"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'deleted'" id="c427c0ca-fe82-46c8-92e4-7dc973c7d79e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusDeleted(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6d80e651-f571-4caf-a618-e65ff3f93235"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="59046eb0-c674-4c2e-9c8f-1be997e3df90"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="82fd3702-df7c-4be6-8b36-750e8ed5afc7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="3439934c-aa97-40f7-851b-c1fb971d6bbf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="97769302-572d-4405-9528-60b2b0d78689"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="806176dc-7d3e-4d8e-8bdb-3b644e0e276a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>CID_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D194E765D8F1FE0401F0A059949B6</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D19411310D281E0401F0A07994972</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a628090d-de83-48fe-b289-008d0f9e0bc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>86f991e8-f8d4-4142-95b1-876839ab66a6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12086 - StreamRenew - DLP - ContentIDNotActive - MD_BASIC CID status of 'suspended'-403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b67d99c0-d798-4c42-a96d-a933e3a99cb0" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f08404d2-fe6c-4559-a970-c877d689042a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","CID_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9809f860-46b4-47ab-bf84-65cb171c27b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c19acd74-f995-4116-9440-39b2d5ee1a6a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="ba834f74-2f63-450f-b115-03a0c81e3086"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="f74508d6-21ab-48aa-8884-176117986e47"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="d5ec9990-c127-408e-9416-3be4ae92d47d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="ca1964fc-99ee-4c1f-b71b-8ae35cdd8520"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'suspended'" id="e12cb4af-7769-470d-908e-68f7ffea3c2e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusSuspended(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f9eadcfa-cbec-43e4-80db-07bd9b42a85f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c5e65c2e-1a21-4e12-938d-02a79f2fe0ca"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="79b904c3-a1fd-4b5f-8764-ab077f8721e3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="528e914f-9320-4960-b266-43f6217bfd4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="a136cf01-2865-4234-9363-c256e85a6bb9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="9c9e548d-64b5-4885-9d91-d7408cb7b9e9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>CID_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D19526364E3B5E0401F0A059949B4</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D194EF38B720AE0401F0A059949B8</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d5ec9990-c127-408e-9416-3be4ae92d47d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ca1964fc-99ee-4c1f-b71b-8ae35cdd8520</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12095 - StreamRenew - DLP - StreamRightsNotGranted - PURCHASE_PROFILE.STREAM value of  'N'-403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9518c7d4-d42e-4160-8b25-cf37276be1eb"><con:description>This test case will verify proper StreamCreate behavior when the PURCHASE_PROFILE.STREAM value associated with the RightsToken is 'N'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="be7f00c5-0902-4374-b1b8-952aa3b00393"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","CID_NOT_GRANTED");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="df319842-afc3-4702-885a-90d51eca5ba6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="ea5c55c1-b9ac-4b9f-916b-6177ed79d255" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="fd784e89-7b57-4307-8818-8a52bc254810"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="bb904bc2-5537-49ed-b7d4-d16af17a3979"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="f50c443f-abbf-4d7f-a515-bdd0dabd88d1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="d43acc2b-c0fc-459a-9a75-682a4305f2a8"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken PURCHASE_PROFILE.STREAM to 'N'" id="10cf2e51-e7f2-4d73-9a94-427baa441355"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsPurchaseProfileStreamOff(rt) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f37d5f52-0301-429f-a49b-f3f6dbc9c116"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="88a35c91-5dc2-42f5-ab03-c754064118e9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="805dc1ee-11e6-4527-a410-74d6be2ddf40" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="370f1022-acad-4ab7-afca-c3bf1991fa64" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken PURCHASE_PROFILE.STREAM to 'Y'" id="210945b2-1c41-4f79-8e87-77ffaa10b42d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsPurchaseProfileStreamOn(rt) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="eeb4d558-4349-4799-8893-0da58b7d4dc7" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>rightstokenid</con:name><con:value>13D2A366C3790FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPCSuuid_member}</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2BF0FB6BF99247F88DC97B5E727F9EC1</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountid</con:name><con:value>900</con:value></con:property><con:property><con:name>userid</con:name><con:value>600</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbb+I6EP4rKPsMzg0WooIUSC/Z0wuFtrR9WRlnAG8TG2KHS3/9sQNkgdIedo+EhDwZf/PNxTNzJnAS254vBKSSclZaJjETXi5tGlnKPI4FFR7DCQhPEq/v31x7dsX08PaKUQqDpvETnOp3x6pFZewMa2V35EK5YZpuGer16rBed8B2iVIVIoOQCYmZbBq2aVXLSseqPZg1z62rX+W767wapSdIhcJWKhXT2JBaiqYxkXLqIbRYLCoLp8LTMbJN00LPN9d9MoEEG62ztUe5obS10SeVCAjEMakQnqAztKdzFgmvT8cMyyyFja3oM1smMhtI6USCjr8ZxV2IQjbi+bGDGWeU4Ji+Yx2fG5ATHpX8eMxTKifJp05YpgYuw5KUieWybwbap3Yi0B7DVOCymGBrg9WDEaTACJQee2HT+HZa1vKrDylmYsTTROwf/4wPsDnEfApRWWzd2lA7HfBIpFpnQLyQkTgTdA63ulinmIDYZBPI6VClbgojurymQhXoUmh2aJfewXEdjYCOQci/SdBOctYgTzjOoDVpj+rhIPLrTy//mCM0cMRMLC/D6vzlpZkT2FXOBUVq18eDoiyKaH2j9/xGpwORnN9e9sy7oNG+uJ02Hp3Yf77vZr71GIzt1fsi4o83909XZve5/0Zf8dXLAE3sWvrKRuR15bhu/PqDvLEhGfTPLx8XaWJZbei+jf2rbhsljFO79nTFf+DO8CYMF5e9uw7rKIOPgzvEJwvz/pdKzUN/0ZtPXu5e69IfBEknRe2L+EcU3swX1zOW3Qd+s3Bnh/++bPvm+9nwFxC5PeoyCIPShcoSll83My2hUXmUq3pT3XyEBCaNlr6le4eXqXZHI0/lcH22nMD2nVqtY1245sV5cG5WHbPaaFgXpn/eaH/fNpk1iwOKHc5GVNvSLXddNl8TJIkngEWQluc8U51OGF8gBljiUsh66hFwJuCBq/a8mr6bbyTmWX0lWW2Y2YTNZqNZwyjdcnnH7lJ/JCHdb8mNvZbcA0KnFHTf1mUtVF0LqUIxw/NMxlZljisMMtXZU91kPdutV5GgyTQGTRQlPMpiqEwn0zwwSKz/7TImIpf2zh/yx/apW4ffthFQOhHVCkL70gaVRTgyW5ytIx8crh2dQVt4P4uoflcqnDKlZM1k/9PvKtHlUZRIcO33u1vShe4f3P3Z6f+0/hLg+v8CqHx8vIm+iAk6TEdhKJrTHbPbxUGNINW0WttimmGrMqtk83mW14/rOihV8EgnEpk26gPJVFtdPfA3YKhAQSfNsIL4gfFCvk8xkxPWl1hCouq9lB9PWFr6IPTSEqp3ujx1I9ozqUInYSmPyTqxWrg04y93MuIRrafEXfW34Gn0O2NHsHbsKD/VziIpG+uTnl+rT+qCcAVLVefl6S74MYBjxveFRZALLlIV1DCT8PmXkm6pTQMTwjMmw8DIBbttPucpV1Pwfit9gMknSbFa0v/eLcs0LwECaiEVNMfXG4KnnwAb74yKjdHDadGo27bfbgeu327sTou66RTTYp9d64P4o2QnToc13voX</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>nickname</con:name><con:value/></con:property><con:property><con:name>beforeAPIstreamrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>beforeAPIstreamhistoryrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>afterAPIstreamhistoryrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>afterAPIstreamrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>nodertraccountid</con:name><con:value>100102</con:value></con:property><con:property><con:name>nodertruserid</con:name><con:value>100202</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpuuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>llpuuid</con:name><con:value>${#Project#assertLLPuuid}</con:value></con:property><con:property><con:name>rtruuid</con:name><con:value>${#Project#assertRTRuuid}</con:value></con:property><con:property><con:name>streamcntbefore</con:name><con:value>10</con:value></con:property><con:property><con:name>streamcntafter</con:name><con:value>10</con:value></con:property><con:property><con:name>streamhistorybefore</con:name><con:value>0</con:value></con:property><con:property><con:name>streamhistoryafter</con:name><con:value>0</con:value></con:property><con:property><con:name>rtraccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>rtruserid</con:name><con:value>600</con:value></con:property><con:property><con:name>rtrorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeorgid</con:name><con:value>3</con:value></con:property><con:property><con:name>llpnodeaccountid</con:name><con:value>910600</con:value></con:property><con:property><con:name>llpassert</con:name><con:value>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</con:value></con:property><con:property><con:name>llpaccountid</con:name><con:value>3</con:value></con:property><con:property><con:name>llpuserid</con:name><con:value>3</con:value></con:property><con:property><con:name>llpnodeid</con:name><con:value>910</con:value></con:property><con:property><con:name>llpnodeuserid</con:name><con:value>100600</con:value></con:property><con:property><con:name>llporgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpnodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpnodeuserid</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpaccountid</con:name><con:value/></con:property><con:property><con:name>dlpuserid</con:name><con:value/></con:property><con:property><con:name>dlpnodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>dlporgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>interations</con:name><con:value>3</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value>13370</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value>13372</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>13364</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>errorRespType</con:name><con:value>CID_NOT_GRANTED</con:value></con:property><con:property><con:name>coorcsnodeuserid</con:name><con:value>10060007</con:value></con:property><con:property><con:name>streamdeletenodeaccount</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>llpcsnodeaccountid</con:name><con:value>9109115</con:value></con:property><con:property><con:name>coorcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>llpaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>orgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>912</con:value></con:property><con:property><con:name>portOrg1Full1_nodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>portalnodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>portOrg1Basic1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>streamcreateassert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F50FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>portalnodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_10550 - StreamCreate - FUNC - DLP - StreamRightsNotGranted - PURCHASE_PROFILE.STREAM value of  'N'</con:value></con:property><con:property><con:name>dlpOrg1Full1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Basic1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Full1_nodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>dlpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Standard1_useroid</con:name><con:value>602</con:value></con:property><con:property><con:name>portOrg1Full1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeuserid</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeuserid</con:name><con:value>1006042</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>portaluserid</con:name><con:value>600</con:value></con:property><con:property><con:name>coorcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>portalaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>portalassert</con:name><con:value>zVdZd6rKEn73V7jcj66EQU2MK3pWM4ioqExObwgttCIgDYL8+tNqdGt29nTvfbgPWbGLGr6q+rq7+v2ffOeXDzDGKAzaFeaZrpRhYIcOCtx2xTS6T83KP53SO7Z2PtsCGMM4IZplWWhXwthlnhiafqFphpjJGKdQDnBiBUm7whLZE918YmsGU2vVm61647n+Si8r5ek1GHsKRsIHuHV2366kcdAKLYxwK7B2ELcSu6UDZdgimi3rGrvS+UBzDhhTnXcHt3TkBlaSxvDDoYPbFS9JohZFZVn2nNWeCVqKpWmaot8oouNg5H6rkMw+jKEjB+vwsuatIAyQbfmosE4RFZh4oVMGvhvGKPF2P3HNUAx9cv0Ec/vJZurBtwr1PcAZ3R96egAZY+sJexZzdabBNYxJj2DZ1OR25dtjGy46RmwFeB3GO/xp/XehYXCAfhhB5wlfM7ii+HOPX5Sl8w7tlhzYforRAY5OvY4sG+LyJIZrlA8RJgxycPnc53KOrzSB9t+U/p26x0lgU19URkAuxMl/0pf7nly8TC0/hZ01aLxoG52N9ulmjVBfnQRKGMLmbCG2zxDulS+gbi39WH8m5I0/H0bgxYkm/Xrf96LBazaY6tWALbiiTtWacKEf1hwwx6uF4o7o3nSfcGAeHRrCxG30zKSYNXe9+DACmkxpuV5floZ2Nq/nLMRjdiLMB17CAGb2IhuWOo5NNqylou9vVnSoUIfqoN80Fg2bryGja1uRNJnPiyNKX5CoZzqzfy2ZIcZgYlUHHmJrEiOrS7X9Paf7HE55DeDxnOTp97xBvwlWYt0W/Gm7r8k2TGBHkWUhLXgeHHUXZDIHXPK3ASPO3e69LZLeMpoDqtoFAs/5G3GogK0EGFPkPIWfTpWcL0Cfc0dTYmiUgL/kFE3MhGwhTFW1J2ae4UjT40ry02UhjhSAz8a8p4iaOBU0Q1QUEF5kuSKspHyj6EomqwuhRBwIYh4VjvSWQClHNis3FL3BLvRGupxPibx7HO5Gh5Uh+gqvSLy+l3R5VRNUsQ+0xcxmuymxLYa7KCwtTO7OqB/BDYDdjCYxQaEY20wxTHYkaNZZZjzKFFnqKyrOePWclVQSs/7ULL7XgucU3tmJuWiAyaUWtsF3R/Ry3sfWrBEoGsgE92w8EDNnfAWiqHRW4i+1GoqZJmrmqKtociaCs0wQMx+v2JG3kryDXVPzvgE2943hVXHWDcj3QDvYx8a+ZEldsNpNGbumeTZqIGseZu6ymQnqoj8IlzJxMwKqyHEqIIBocEqN1J8DQ27aGEfojUVwuO6GO+jFJYUJB9tDkdNNVBu7k9GsIay3rxMJTWqW41Gyb7Ob2hbIMnQGjKdajragNCFAxct4YM4hihdFMmqozAtqNkraLDXnQui/Or35whxU84WtGuOJbs4mRZ6P9ptm4Se9MdeL9b4iuOMRhBNsVyna6nJGU2jwi96G8Gmt0bBRAq7CASBtXFdEhMBcb3MhYU9TREJeoPCZxM94SQeSVBVlTlDVdddjJrY0TU1mpMii45MyHRdzzS8teU4gnaKt2TJasF16aQDn7Eyti11XNRvV/hwu1ZFvTBOQRdN1wDC0FKm9tZK5tnJigCNnOkd2EVdKZWBa46hP54PpC83sVcfv62/ArOU6u83Hnrs8bt3lljRlcbd1Fgbwp8Ydx2RCsVlJNURNAc3LfssV2axpvr3Lo9XOzgWD9OxsHBqcqHVV2swFAQwuMmwANseLQtwovHi2L4FcsQgtDqu5hxfBCI0NMSWkTe/oslmx9G85dqJY6ZFjex6o4DPHxAvHRLDeV+WmwODGCx/hWeZykrhXX6fD/ltEq/PhtsRVu5SbIL8+DpqZMajOmGP26m3U2exNFjy+GqwXXm2VcLRV2Crsb18lpG2F4KXuH5WhojZMRPlHegP3GR6WRjITiLWk6FJvcVrldku0K4panTV3Ez09yKY1wMzRW+1nb9lm0nuhqFg6NorX5UHtzkN7cblHPh+SN+HlGKXuD9iHE/g6QOnpagPt5Lo83cOyUO6Sy9FKfj6MMc/MWYKcp/VZtZUGOII2gQGdSmcdQyd8p+5dforHh8EanQxPg+Tl5v316GfvWitoxTCu/MLTKemyHGhklAgDDI2wXcHkhEgDtE8JVo9csJXyKEzGwTgG6wTG5xmV+XpG1Ug6EYKnQfZuEIC5tYt8+GyHO8qy7TANEkx+4POs8VNgn79dcyA6Djop4BMsDpJiws9zc41t0VdMf4j96h6kDjqNFKQgSYzsC5LHT52P3HDiQHtvHayIeT5YzwFMyRAfn9O8Yr+ZfBY8uKc+Z3aL6ByQfePd7RkhC2Ty6QCOF8Sb38dvny3IyHsSn4Bjgpzghje8K1RQt1cC/oc8UayV7cAfPH/4uMkfsaWJF+gJ2U870v7yefn7R82DNUk/gXnylYz3CcBT8F++dOyWfdIj4gn5l4Wx873qX/j66uOj8JbPDVNCmrZKE/jzL+XT3m1XPniOnMpZcD0c7nbFffkFkRcpcDGRhcoPTs+z38cwn//sicZQc2Wo2x7cWZWbLvq98hM698km+5zot5JjRPDn5HFJggdupcOwtXrjVpcHSJ0fxD9K/osixtf5/m/KqInd/7sSgq7A8aSO5Kqq1f8npfy8OTv/Ag==</con:value></con:property><con:property><con:name>streamcreaterequestuser</con:name><con:value>100604</con:value></con:property><con:property><con:name>streamcreatrequestuser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeuserid</con:name><con:value>10060210</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpcsnodeuserid</con:name><con:value>10060016</con:value></con:property><con:property><con:name>portOrg1Full1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>dlpOrg1Basic1_useroid</con:name><con:value>604</con:value></con:property><con:property><con:name>portalnodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeuserid</con:name><con:value>1006044</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBE4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>dlpcsnodeid</con:name><con:value>9116</con:value></con:property><con:property><con:name>usernodeid</con:name><con:value/></con:property><con:property><con:name>rtrnodeaccountid</con:name><con:value>910602</con:value></con:property><con:property><con:name>portOrg1Basic1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>coorcsnodeid</con:name><con:value>9107</con:value></con:property><con:property><con:name>dlpOrg1Basic1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>streamdeleterequestuser</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpOrg1Standard1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpOrg1Full1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>coorcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Basic1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Full1_useroid</con:name><con:value>600</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>coorcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>portOrg1Standard1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpOrg1Full1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>dlpOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Full1_useroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Full1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>llpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Basic1_useroid</con:name><con:value>604</con:value></con:property><con:property><con:name>streamcreateuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>skipRemoveStreamsFlag</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>llpcsnodeuserid</con:name><con:value>10060015</con:value></con:property><con:property><con:name>coorcsnodeaccountid</con:name><con:value>9109107</con:value></con:property><con:property><con:name>rtrnodeuserid</con:name><con:value>100602</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>llpcsnodeid</con:name><con:value>9115</con:value></con:property><con:property><con:name>dlpcsnodeaccountid</con:name><con:value>9109116</con:value></con:property><con:property><con:name>dlpOrg1Basic1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreatenodeaccount</con:name><con:value>910604</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeuserid</con:name><con:value>10060410</con:value></con:property><con:property><con:name>portOrg1Standard1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>dlpOrg1Standard1_useroid</con:name><con:value>602</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>llpuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Full1_nodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>streamdeleteassert</con:name><con:value>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</con:value></con:property><con:property><con:name>portalorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpcsaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>dlpOrg1Standard1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024836</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>CID_NOT_GRANTED</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:2BF0FB6BF99247F88DC97B5E727F9EC1</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366C3790FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>CID_NOT_GRANTED</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f50c443f-abbf-4d7f-a515-bdd0dabd88d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d43acc2b-c0fc-459a-9a75-682a4305f2a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14800 - StreamRenew - DLP - AccountNotActive - ACCOUNT.STATUS of pending-403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="23d4ba94-0c2c-442b-ae11-854d025cb0e8"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e5d1e7ec-911b-4998-898a-c6b464fdd27a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="efde0a07-a937-4e65-8b16-cafc062e9fda"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="c0b19295-584c-493e-bb1a-f6e5da74711f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="e5bd1032-fb3f-4830-9b8a-dc87f5feca1a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="1575e52f-e838-499a-ac64-b88e39e8df42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="ab11e454-0f0d-4af8-91d8-115880812f6f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to pending" id="509d1497-f508-4e60-a366-f62a6e41625b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "pending");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="af86bd63-3e53-4e5c-82c0-3125066acec0"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f103222f-c566-4488-8ad9-9753dfd237b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="da00fa6c-daa3-44a1-b9bd-0357124561aa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="5244e7e9-ab81-46e3-a197-9b787358091a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81296</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024836</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBE4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F50FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbb+I6EP4rKPsMzg0WooIUSC/Z0wuFtrR9WRlnAG8TG2KHS3/9sQNkgdIedo+EhDwZf/PNxTNzJnAS254vBKSSclZaJjETXi5tGlnKPI4FFR7DCQhPEq/v31x7dsX08PaKUQqDpvETnOp3x6pFZewMa2V35EK5YZpuGer16rBed8B2iVIVIoOQCYmZbBq2aVXLSseqPZg1z62rX+W767wapSdIhcJWKhXT2JBaiqYxkXLqIbRYLCoLp8LTMbJN00LPN9d9MoEEG62ztUe5obS10SeVCAjEMakQnqAztKdzFgmvT8cMyyyFja3oM1smMhtI6USCjr8ZxV2IQjbi+bGDGWeU4Ji+Yx2fG5ATHpX8eMxTKifJp05YpgYuw5KUieWybwbap3Yi0B7DVOCymGBrg9WDEaTACJQee2HT+HZa1vKrDylmYsTTROwf/4wPsDnEfApRWWzd2lA7HfBIpFpnQLyQkTgTdA63ulinmIDYZBPI6VClbgojurymQhXoUmh2aJfewXEdjYCOQci/SdBOctYgTzjOoDVpj+rhIPLrTy//mCM0cMRMLC/D6vzlpZkT2FXOBUVq18eDoiyKaH2j9/xGpwORnN9e9sy7oNG+uJ02Hp3Yf77vZr71GIzt1fsi4o83909XZve5/0Zf8dXLAE3sWvrKRuR15bhu/PqDvLEhGfTPLx8XaWJZbei+jf2rbhsljFO79nTFf+DO8CYMF5e9uw7rKIOPgzvEJwvz/pdKzUN/0ZtPXu5e69IfBEknRe2L+EcU3swX1zOW3Qd+s3Bnh/++bPvm+9nwFxC5PeoyCIPShcoSll83My2hUXmUq3pT3XyEBCaNlr6le4eXqXZHI0/lcH22nMD2nVqtY1245sV5cG5WHbPaaFgXpn/eaH/fNpk1iwOKHc5GVNvSLXddNl8TJIkngEWQluc8U51OGF8gBljiUsh66hFwJuCBq/a8mr6bbyTmWX0lWW2Y2YTNZqNZwyjdcnnH7lJ/JCHdb8mNvZbcA0KnFHTf1mUtVF0LqUIxw/NMxlZljisMMtXZU91kPdutV5GgyTQGTRQlPMpiqEwn0zwwSKz/7TImIpf2zh/yx/apW4ffthFQOhHVCkL70gaVRTgyW5ytIx8crh2dQVt4P4uoflcqnDKlZM1k/9PvKtHlUZRIcO33u1vShe4f3P3Z6f+0/hLg+v8CqHx8vIm+iAk6TEdhKJrTHbPbxUGNINW0WttimmGrMqtk83mW14/rOihV8EgnEpk26gPJVFtdPfA3YKhAQSfNsIL4gfFCvk8xkxPWl1hCouq9lB9PWFr6IPTSEqp3ujx1I9ozqUInYSmPyTqxWrg04y93MuIRrafEXfW34Gn0O2NHsHbsKD/VziIpG+uTnl+rT+qCcAVLVefl6S74MYBjxveFRZALLlIV1DCT8PmXkm6pTQMTwjMmw8DIBbttPucpV1Pwfit9gMknSbFa0v/eLcs0LwECaiEVNMfXG4KnnwAb74yKjdHDadGo27bfbgeu327sTou66RTTYp9d64P4o2QnToc13voX</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">76683FB9ECA140B6A26EF3F008D06F1A</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AE9E36E30E05305991F0A10A3</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B46AE9E36E30E05305991F0A10A3</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:76683FB9ECA140B6A26EF3F008D06F1A</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ab11e454-0f0d-4af8-91d8-115880812f6f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af86bd63-3e53-4e5c-82c0-3125066acec0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14840 - StreamRenew - DLP - UserNotActive - ACCOUNT_USER.STATUS of pending-403 Forbidden : User No more in pending status" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bc93ba77-ea17-4bed-87e4-8d1f92b9c71f" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="00763a4b-57fb-4c4f-94b6-9155585f22ac"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","UserNotActive");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="528cb2de-2048-4e5a-968f-4f54b7c6f77e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="7720777b-fc41-449f-9b5b-fe10dbd8b4ae" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="1d8f2846-b7af-432c-9919-f568bee15284"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="5eb57cfa-5890-4ada-857c-36df1ed82a89"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="fa5f389e-5ad0-4453-ac74-60b365db4376"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="c62d66ad-9eb8-46b4-acf9-6577a77fd1ee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="7c92e97f-4a19-49a3-babf-652dfb1df5dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to pending" id="67ee67a6-b34f-4747-9279-0f8f8bc88378"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "pending");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="42f367fc-6ea7-4fc9-9410-7cd0421da0e5"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="0cef66d7-5e5b-4d07-adc8-750adc3b9176"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="50f71924-19e6-4251-93d4-48ddc06dc3ad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="59a03171-5d28-4c31-9e8b-f5e03290cf39" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81304</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150313_063023</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB04943D721DE05305991F0A8A58</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB04F33B722DE05305991F0A281D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbbcuI4EP0VyvOYMr6AwbgCVQbCLpncFrJJZl6mhNw22hjJSDIw8/UrGfBgQrLM7JNL7dbpo+7WUV8KtEjdIBQCuCSM1jaLlIqgsHaNnNOAIUFEQNECRCBxMA1vbwK3bgdov8WojYdd41uM26jTjNpmBF7HbCLfN2d4hk2vgVsOnvnNuBUrVyFyGFMhEZVdw7Udz7QbptN4dNzA8wO7U2/7zlej9gRcKGzlUreNHamN6BpzKbPAstbrdX3dqDOeWK5tO9bL7c0Uz2GBjN7l9kRFIN7b+eN6BBjSFNcxW1iXVsXnMhLBlCQUyZzDLlb0XizbsjuW8okEST4Z5V6IxjRmxXKAKKMEo5T8QDo/tyDnLKqFacI4kfPFu4dwbA1swgab2GnST4ZVpXYmUIUhF8gUc+TssCYQAweKofb3ZNw1Pp1XtWLrI0dUxIwvRHX5a3yAriBlGUSm2B9rR+18wBOZ6l0CDsYUp7kgK7jTzZohDGJXTcDnQ9UeOMRkc0OEatCN0OysQ3pHy202hiQBIX+nQAfF2YI8oTSH3tS98ZM49ZI/W+moM/pMvM7T80MGz5HfLQgcOheGsrTb5VFTlk203RGG+EsrXmXL9XrDB0nj2nX5EEbtkPbvrcZL6zmkg9ngdRymeApiOUiu7l2v5XzGTRG6dPUHrCdPMRpMR18GG3kfyf4cPs/Zj9FFFIcbV3654GKSvVhA+tcXU4wfri+aq+sYJbjvjq4i3xszsURf79Dw5ar5l2CT1sRnbjLpe527tpVePL8+XPO7l9uL+DXplsc54F+17e/8NJ/9A1jul7oNxsPaSFUJyY/FTFtIZMaFa5Bp8RESqDR6epfWjiBXckeiQNVwu3Yct9/v281RoxG2XXd4ZXsN2+t0nJEdur4z3IvMlsURxQGjMdGxtORu2+ZjgngRCKARcHPFcqV0wvgAcYgkqo3pRF0CRgU8MiXPjifsyGd8Q7K87Xh0NhNYLhdNqeT1jsl7es/DWAKvirJXEeUJYJIR0MqtG1uozhZSJWOJVrlMnfoK1SnkStu5ltnAbfqeJcgiS0FTtRYsylOoZ/OsSI0ltl/XRFgU1snVY3Hd3j3Y8b99DpRPRLSD0Gfpg6ojvHld2oG3P8ibA7dOvkJ7+DCPiL5ZKqGSE7xlUv31s090g5RNMrwJpw970qXvL+z9Nph+c34T4Ob/Aqh6vN1pfZAT67gcZaBoRQ7C7kcH9Qgp2ertm2mJ6st6vlrlRfu0tTxzBW/pQlq2a00B50pYvz+yV6BWiWKd9YqVxI+Cl/YqxVzO6VQiCQvV77ViecbYosRSjy1jdVM3585ElZAqdRI28pRtkKqRSzP+cCrDAdZ+yvygPmvGo58VO4F1EEedU00tktBEr/QL9v2dvsBMwRKlvYwfgp8COBW8aiyTXHKRqqFmuYT3/9S0qHYNhDHLqRwPjcJwKPQFT/k9g+Cn0xuY4i0ph0vy39OlSYoWwKBGUkEKfD0jBPoK0OTgsdgFPfVedJqNQdt1Ku+FH3p+mZQKu94b81vLQZ6Oe7z3Lw==</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">817C9AB3210E4C4B9D83CF730E2EBC1A</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112C81D8EC506034E05305991F0AB2F1</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:112BBB04943C721DE05305991F0A8A58</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB04943C721DE05305991F0A8A58</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:112BBB04F33A722DE05305991F0A281D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB04F33A722DE05305991F0A281D</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:112BBB049444721DE05305991F0A8A58</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB049444721DE05305991F0A8A58</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:112C81D8EC506034E05305991F0AB2F1</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:817C9AB3210E4C4B9D83CF730E2EBC1A</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7c92e97f-4a19-49a3-babf-652dfb1df5dc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>42f367fc-6ea7-4fc9-9410-7cd0421da0e5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14846 - StreamRenew - DLP - UserNotActive - ACCOUNT_USER.STATUS of blocked:tou-200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c2dc5b78-871d-4627-9f75-b0394c78d4a4" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5d074e65-3b00-4052-bebc-08ca61c0cbe7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="57c66c0a-36f8-4753-8010-3c0ae3d8412f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="f4fdd720-85c3-4fb8-8e2f-6c5b30bccf51" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="984222a7-a412-4735-92f9-afef11664bf7"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="952cd01e-7115-4ab4-a2fd-60ebc6310fce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="32fb45bf-e36e-4946-989e-230aec8d64a5"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="f2709129-7530-4eb3-884d-733ceaa0d5ba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="14ae5aff-a339-4f47-be5c-3e820e49d68a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to blocked:tou" id="19388bc2-fb67-43d4-9e18-42c2d6135cba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "blocked:tou");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="b8de0c43-014c-4f2f-a6b8-444d297bc033"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="d620cddd-3985-4267-b672-e0b333c20266"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="2ada32b9-f2da-4831-bd53-0ac30484ff79"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b290b683-76fa-422e-b000-28eba8c0c11a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150313_063023</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB04943D721DE05305991F0A8A58</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB04F33B722DE05305991F0A281D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbbcuI4EP0VyvOYMr6AwbgCVQbCLpncFrJJZl6mhNw22hjJSDIw8/UrGfBgQrLM7JNL7dbpo+7WUV8KtEjdIBQCuCSM1jaLlIqgsHaNnNOAIUFEQNECRCBxMA1vbwK3bgdov8WojYdd41uM26jTjNpmBF7HbCLfN2d4hk2vgVsOnvnNuBUrVyFyGFMhEZVdw7Udz7QbptN4dNzA8wO7U2/7zlej9gRcKGzlUreNHamN6BpzKbPAstbrdX3dqDOeWK5tO9bL7c0Uz2GBjN7l9kRFIN7b+eN6BBjSFNcxW1iXVsXnMhLBlCQUyZzDLlb0XizbsjuW8okEST4Z5V6IxjRmxXKAKKMEo5T8QDo/tyDnLKqFacI4kfPFu4dwbA1swgab2GnST4ZVpXYmUIUhF8gUc+TssCYQAweKofb3ZNw1Pp1XtWLrI0dUxIwvRHX5a3yAriBlGUSm2B9rR+18wBOZ6l0CDsYUp7kgK7jTzZohDGJXTcDnQ9UeOMRkc0OEatCN0OysQ3pHy202hiQBIX+nQAfF2YI8oTSH3tS98ZM49ZI/W+moM/pMvM7T80MGz5HfLQgcOheGsrTb5VFTlk203RGG+EsrXmXL9XrDB0nj2nX5EEbtkPbvrcZL6zmkg9ngdRymeApiOUiu7l2v5XzGTRG6dPUHrCdPMRpMR18GG3kfyf4cPs/Zj9FFFIcbV3654GKSvVhA+tcXU4wfri+aq+sYJbjvjq4i3xszsURf79Dw5ar5l2CT1sRnbjLpe527tpVePL8+XPO7l9uL+DXplsc54F+17e/8NJ/9A1jul7oNxsPaSFUJyY/FTFtIZMaFa5Bp8RESqDR6epfWjiBXckeiQNVwu3Yct9/v281RoxG2XXd4ZXsN2+t0nJEdur4z3IvMlsURxQGjMdGxtORu2+ZjgngRCKARcHPFcqV0wvgAcYgkqo3pRF0CRgU8MiXPjifsyGd8Q7K87Xh0NhNYLhdNqeT1jsl7es/DWAKvirJXEeUJYJIR0MqtG1uozhZSJWOJVrlMnfoK1SnkStu5ltnAbfqeJcgiS0FTtRYsylOoZ/OsSI0ltl/XRFgU1snVY3Hd3j3Y8b99DpRPRLSD0Gfpg6ojvHld2oG3P8ibA7dOvkJ7+DCPiL5ZKqGSE7xlUv31s090g5RNMrwJpw970qXvL+z9Nph+c34T4Ob/Aqh6vN1pfZAT67gcZaBoRQ7C7kcH9Qgp2ertm2mJ6st6vlrlRfu0tTxzBW/pQlq2a00B50pYvz+yV6BWiWKd9YqVxI+Cl/YqxVzO6VQiCQvV77ViecbYosRSjy1jdVM3585ElZAqdRI28pRtkKqRSzP+cCrDAdZ+yvygPmvGo58VO4F1EEedU00tktBEr/QL9v2dvsBMwRKlvYwfgp8COBW8aiyTXHKRqqFmuYT3/9S0qHYNhDHLqRwPjcJwKPQFT/k9g+Cn0xuY4i0ph0vy39OlSYoWwKBGUkEKfD0jBPoK0OTgsdgFPfVedJqNQdt1Ku+FH3p+mZQKu94b81vLQZ6Oe7z3Lw==</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9EBCFDDE224A40CCA0E4DF174AD65005</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112C47E134425E32E05307991F0A8C8D</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:112BBB04943C721DE05305991F0A8A58</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB04943C721DE05305991F0A8A58</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:112BBB04F33A722DE05305991F0A281D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB04F33A722DE05305991F0A281D</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:112BBB049444721DE05305991F0A8A58</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">112BBB049444721DE05305991F0A8A58</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:112C47E134425E32E05307991F0A8C8D</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:9EBCFDDE224A40CCA0E4DF174AD65005</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>14ae5aff-a339-4f47-be5c-3e820e49d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b8de0c43-014c-4f2f-a6b8-444d297bc033</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44851 - StreamRenew - DLP - Stream_renew _by_DLP_Manage account consent present-200 OK_MIGRATED" searchProperties="true" id="bfc57809-2409-4ea3-9168-61d35b44f26d"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9ffe5fd5-c493-4b2b-8e67-daa2c82feb85"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8a627ca2-3ebf-48eb-a711-80d39bbff4e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="af3f5a66-7fd3-48d4-9973-30c38ec83beb" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="d1542098-cf19-49dc-8271-05c6bd5babae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="daad333d-0ced-4a2f-b6b0-f66bb6e171fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a195a68e-9137-4dc0-9f40-ec4ca1cef115"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="8cd0ab31-cbe6-4a6e-80ef-d0de073db8bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="9475b0bf-816d-4a37-b797-f415b0fd3932"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="73bacd88-da29-4569-a883-13df5112b964"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="b112f68a-6b8f-4350-8ea2-551290b663f8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e5c06eca-ba0f-4151-b4ac-61944d6185c5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="a0297c9e-7858-4a70-ab84-2adda280be60" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="766b6428-8740-44c3-a69d-43ca230681fd" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="98269f37-580a-4fbc-8a7d-e2998019ef29" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>39837B3B6B614C19889AFF5797CF6BA6</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbb+I6EP4rKPsMzg0WooIUSC/Z0wuFtrR9WRlnAG8TG2KHS3/9sQNkgdIedo+EhDwZf/PNxTNzJnAS254vBKSSclZaJjETXi5tGlnKPI4FFR7DCQhPEq/v31x7dsX08PaKUQqDpvETnOp3x6pFZewMa2V35EK5YZpuGer16rBed8B2iVIVIoOQCYmZbBq2aVXLSseqPZg1z62rX+W767wapSdIhcJWKhXT2JBaiqYxkXLqIbRYLCoLp8LTMbJN00LPN9d9MoEEG62ztUe5obS10SeVCAjEMakQnqAztKdzFgmvT8cMyyyFja3oM1smMhtI6USCjr8ZxV2IQjbi+bGDGWeU4Ji+Yx2fG5ATHpX8eMxTKifJp05YpgYuw5KUieWybwbap3Yi0B7DVOCymGBrg9WDEaTACJQee2HT+HZa1vKrDylmYsTTROwf/4wPsDnEfApRWWzd2lA7HfBIpFpnQLyQkTgTdA63ulinmIDYZBPI6VClbgojurymQhXoUmh2aJfewXEdjYCOQci/SdBOctYgTzjOoDVpj+rhIPLrTy//mCM0cMRMLC/D6vzlpZkT2FXOBUVq18eDoiyKaH2j9/xGpwORnN9e9sy7oNG+uJ02Hp3Yf77vZr71GIzt1fsi4o83909XZve5/0Zf8dXLAE3sWvrKRuR15bhu/PqDvLEhGfTPLx8XaWJZbei+jf2rbhsljFO79nTFf+DO8CYMF5e9uw7rKIOPgzvEJwvz/pdKzUN/0ZtPXu5e69IfBEknRe2L+EcU3swX1zOW3Qd+s3Bnh/++bPvm+9nwFxC5PeoyCIPShcoSll83My2hUXmUq3pT3XyEBCaNlr6le4eXqXZHI0/lcH22nMD2nVqtY1245sV5cG5WHbPaaFgXpn/eaH/fNpk1iwOKHc5GVNvSLXddNl8TJIkngEWQluc8U51OGF8gBljiUsh66hFwJuCBq/a8mr6bbyTmWX0lWW2Y2YTNZqNZwyjdcnnH7lJ/JCHdb8mNvZbcA0KnFHTf1mUtVF0LqUIxw/NMxlZljisMMtXZU91kPdutV5GgyTQGTRQlPMpiqEwn0zwwSKz/7TImIpf2zh/yx/apW4ffthFQOhHVCkL70gaVRTgyW5ytIx8crh2dQVt4P4uoflcqnDKlZM1k/9PvKtHlUZRIcO33u1vShe4f3P3Z6f+0/hLg+v8CqHx8vIm+iAk6TEdhKJrTHbPbxUGNINW0WttimmGrMqtk83mW14/rOihV8EgnEpk26gPJVFtdPfA3YKhAQSfNsIL4gfFCvk8xkxPWl1hCouq9lB9PWFr6IPTSEqp3ujx1I9ozqUInYSmPyTqxWrg04y93MuIRrafEXfW34Gn0O2NHsHbsKD/VziIpG+uTnl+rT+qCcAVLVefl6S74MYBjxveFRZALLlIV1DCT8PmXkm6pTQMTwjMmw8DIBbttPucpV1Pwfit9gMknSbFa0v/eLcs0LwECaiEVNMfXG4KnnwAb74yKjdHDadGo27bfbgeu327sTou66RTTYp9d64P4o2QnToc13voX</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2CFD285F10EFFE05307991F0AE210</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024836</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:39837B3B6B614C19889AFF5797CF6BA6</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD285F10EFFE05307991F0AE210</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBE4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F50FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>daad333d-0ced-4a2f-b6b0-f66bb6e171fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d1542098-cf19-49dc-8271-05c6bd5babae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>73bacd88-da29-4569-a883-13df5112b964</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9475b0bf-816d-4a37-b797-f415b0fd3932</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44852 - StreamRenew - DLP - StreamOwnerMismatch - Stream_Renew_By_DLPCS_ManageAccountConsentPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6cee7927-fd86-4b0f-89a5-133b350ea73b"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7a0b1108-487e-4ad7-8d4e-a5a4c6de5706"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="cd007419-2c66-47d1-a0eb-52bb8b5ab2b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d52d23f0-6d1b-4ef1-b1b2-d1d8f7b64aaf" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="12ee29f4-dc35-41fd-92f4-9fab97ef52f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="54ddf234-3cd0-48c4-b0cc-ffcb31948d3b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="1422b4d3-0e36-49bf-b286-ade539186860"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="5ee6b059-e948-4925-a6bb-0b72ad66ed8b"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="74c6ceaf-ec52-40b2-b137-b0b09b606d01"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="3bfc1a35-0c6d-4273-9245-8704d557c2c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="46bbdd21-ac6d-4cf8-8f4c-f46d64f22bcf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="80891cbe-de96-48b7-a05d-ca91becc462d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="824417cc-cca5-4023-8fd3-c9074b8d10e7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="f66ef5b5-c9ad-4f26-b8c4-86301465c306" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="ed9b7977-1834-404b-a9a4-936cc38bd2d2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="2976aaf8-ccab-42e5-9a3f-add865fc5430" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024836</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:8597CBADBBD048B295EA97033EE0FDB5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD285FD0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBE4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F50FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbb+I6EP4rKPsMzg0WooIUSC/Z0wuFtrR9WRlnAG8TG2KHS3/9sQNkgdIedo+EhDwZf/PNxTNzJnAS254vBKSSclZaJjETXi5tGlnKPI4FFR7DCQhPEq/v31x7dsX08PaKUQqDpvETnOp3x6pFZewMa2V35EK5YZpuGer16rBed8B2iVIVIoOQCYmZbBq2aVXLSseqPZg1z62rX+W767wapSdIhcJWKhXT2JBaiqYxkXLqIbRYLCoLp8LTMbJN00LPN9d9MoEEG62ztUe5obS10SeVCAjEMakQnqAztKdzFgmvT8cMyyyFja3oM1smMhtI6USCjr8ZxV2IQjbi+bGDGWeU4Ji+Yx2fG5ATHpX8eMxTKifJp05YpgYuw5KUieWybwbap3Yi0B7DVOCymGBrg9WDEaTACJQee2HT+HZa1vKrDylmYsTTROwf/4wPsDnEfApRWWzd2lA7HfBIpFpnQLyQkTgTdA63ulinmIDYZBPI6VClbgojurymQhXoUmh2aJfewXEdjYCOQci/SdBOctYgTzjOoDVpj+rhIPLrTy//mCM0cMRMLC/D6vzlpZkT2FXOBUVq18eDoiyKaH2j9/xGpwORnN9e9sy7oNG+uJ02Hp3Yf77vZr71GIzt1fsi4o83909XZve5/0Zf8dXLAE3sWvrKRuR15bhu/PqDvLEhGfTPLx8XaWJZbei+jf2rbhsljFO79nTFf+DO8CYMF5e9uw7rKIOPgzvEJwvz/pdKzUN/0ZtPXu5e69IfBEknRe2L+EcU3swX1zOW3Qd+s3Bnh/++bPvm+9nwFxC5PeoyCIPShcoSll83My2hUXmUq3pT3XyEBCaNlr6le4eXqXZHI0/lcH22nMD2nVqtY1245sV5cG5WHbPaaFgXpn/eaH/fNpk1iwOKHc5GVNvSLXddNl8TJIkngEWQluc8U51OGF8gBljiUsh66hFwJuCBq/a8mr6bbyTmWX0lWW2Y2YTNZqNZwyjdcnnH7lJ/JCHdb8mNvZbcA0KnFHTf1mUtVF0LqUIxw/NMxlZljisMMtXZU91kPdutV5GgyTQGTRQlPMpiqEwn0zwwSKz/7TImIpf2zh/yx/apW4ffthFQOhHVCkL70gaVRTgyW5ytIx8crh2dQVt4P4uoflcqnDKlZM1k/9PvKtHlUZRIcO33u1vShe4f3P3Z6f+0/hLg+v8CqHx8vIm+iAk6TEdhKJrTHbPbxUGNINW0WttimmGrMqtk83mW14/rOihV8EgnEpk26gPJVFtdPfA3YKhAQSfNsIL4gfFCvk8xkxPWl1hCouq9lB9PWFr6IPTSEqp3ujx1I9ozqUInYSmPyTqxWrg04y93MuIRrafEXfW34Gn0O2NHsHbsKD/VziIpG+uTnl+rT+qCcAVLVefl6S74MYBjxveFRZALLlIV1DCT8PmXkm6pTQMTwjMmw8DIBbttPucpV1Pwfit9gMknSbFa0v/eLcs0LwECaiEVNMfXG4KnnwAb74yKjdHDadGo27bfbgeu327sTou66RTTYp9d64P4o2QnToc13voX</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2CFD285FD0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>8597CBADBBD048B295EA97033EE0FDB5</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>46bbdd21-ac6d-4cf8-8f4c-f46d64f22bcf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3bfc1a35-0c6d-4273-9245-8704d557c2c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1422b4d3-0e36-49bf-b286-ade539186860</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ee6b059-e948-4925-a6bb-0b72ad66ed8b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44853 - StreamRenew - DLP - StreamOwnerMismatch - Stream_Renew_By_DLPCS_ManageAccountConsentPresent_diffOrg - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a718a91b-ab79-482c-9395-f9809775a5d5" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9f0bd9b9-351f-484e-8782-9a3f313023ef"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="05051ee4-79d3-49d2-96af-c9feab9fb7e9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="601780f1-a544-450b-8c9c-39ae9a76163e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="0b312a78-9ea6-44ad-8829-b4c605ba54a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4e2321d9-d80e-4d8a-934d-2c2006eb481f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="de864c17-d9b9-4b25-af3a-e3b5f1e20f64"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="61cc5ced-3520-4adb-989b-dc88a7f93c2e"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="525bad16-7c2d-4ec0-89f9-099a9ce32b2c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="a735f92d-a98c-447b-adcd-d236efdf0fe0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="debdd447-3195-4f74-b15f-358b2def1be1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="9510374c-b601-41c0-a479-8e05bc3c42fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="57c3225d-43a5-462a-b027-15d3d30c8627" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="a33418d2-fcaf-4db4-a508-3914af34d695" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="d3589c4d-a07c-472e-a4ab-2ff0e801f6d0" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="33d5ee57-03e5-4927-9556-534f606c02b1" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150312_04433</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:11170253EE4561FFE05307991F0ADA96</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1116423CEBC92ECBE05307991F0A891F</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">111641972AC10796E05305991F0A8B37</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VynmcMl4IYFyBKjBJxhMgBJhsLykhyaDElsCSweTrRzLgACG5zNwXKLVb3acXne4LDqLQdpuc41gQRgtpFFLuZtK6lsTUZYAT7lIQYe4K6A6b3Y5rF00XbK9oBb9d114sVAlKACK9ZiJbP68FNX0cVCs6KqHKOLCRUy2VpSrnCfYpF4CKumabVlk3S7pljyzLtUy37BQrlvmsFe5xzKVtqVI0tQ2olNe1qRAz1zCWy2VxWSqyeGLYpmkZj93OEE5xBLTGxTqizFHc2OjDIsIQhyEsQhYZF8aezgXi7pBMKBBJjDe+0Fe+TMOsGVIHcTI50/K7GPk0YNnRA5RRAkFI3oHKTxeLKUOFZjhhMRHT6MsgLFMZ1nEKdWid0zPN2Id2oqE9hDEHOp8Ca2NrgAMcYwpx4ffAr2tnp1UtuzqKAeUBiyO+f/w7PJgucMhmGOl8G9YG2ukGj2SqcYGh61MYJpwscE816wxAzDfVxPB0U4V+jAOSdgiXDZpyhc7YhXdwXGejTSaYi38p0E5x1kbuQZjgxvX99Km7HEfz6gD4xtIxad95Zuy2d8PqGYBd5UyQl3Z9PGjKvInWNx4GoPuaJm9B7+r1rT1c3Vdu03tMkmer1+G3VxUjublaPcRwjqbp2B+gG++RDt6CrufVestHw4mXk45xXbG66VXrtTlBg8B6+LUcE5S+O6tWmty14inxH29eH/r3YFTqru7Yk1X1n99fWfJjmpjl9jutDa9/pv1wcverN/UGv+Mfk6eBgN5Sfr+DzmL1+DN6AHOznoezg39ftn3zw2T8iqHYHlUb+O3ClawSEN+TmZIQpAeZqjtT5MMFpkJrqFuKO9xE0h1Brqzh+mxZVuXcqlXtpmea1Vrl0iyXzHKtZl2ZTadVqm5JZo3iAKLHaECUL0W567b5HiCMXI4pwrG+YIlkOq59Y7ENBCj4dCAfAaMcj5ii50iENrfKizdnUVstKog743TJqkQr9Ji4pbdxMxA43ufk8z1OHmBIZgQr4lZ9zWVjcyFzMQeLRIRWcQGKFCeS2mPFsq597pQNTqJZiBVSI2IoCXFxNp1lmTH4+t/WAeSZdHA5yl7bl3EdftumQOogohS4iqWFZRnxkeFyvg3kU8CVo0Noa76ZIKIelsyniAlcI9n/9NEmqj/yHml3msP+FnSu+xd3X7zhi/WPBjr/14Csx+ebxjc5MQ7LkTtCC7Ljdrs5yBkkWauxbaY5KM6LyWKRZO1TVewcS/OGKqRh2sYQw0Ty6mrE3jA1civGSUMsB37gPJfvQ0zElA4FEDiS/V7IjidsLUPM1dbiy4eanroS7bmUqRM4FcdkXig3LoX426UMulDpSXFf/i1ZjD4qdsTWjh8Zp1xaBKETdVIDbPVFX0AmzRJJvSzeNX7MwDHn+8I8yTkWIRtqnAj89ZeC4tS6BiBkCRV+W8sEuzyf4RSrGXY/lD6ZyUZJvluS/14udZK1AMRyI+Uks69WBFc9ATrZmRUbp5/GhV3yLlueY196rWxcVDfjQv7mSdlD1/gk/izZydNhjzf+AA==</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1116423CEBC82ECBE05307991F0A891F</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1116423CEBC82ECBE05307991F0A891F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:111641972AC00796E05305991F0A8B37</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">111641972AC00796E05305991F0A8B37</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>11170253EE4561FFE05307991F0ADA96</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D194475BE4DB5E0401F0A07994978</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1116423CEBD02ECBE05307991F0A891F</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1116423CEBD02ECBE05307991F0A891F</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>debdd447-3195-4f74-b15f-358b2def1be1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a735f92d-a98c-447b-adcd-d236efdf0fe0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>de864c17-d9b9-4b25-af3a-e3b5f1e20f64</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>61cc5ced-3520-4adb-989b-dc88a7f93c2e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44854 - StreamRenew - DLP - StreamOwnerMismatch - Stream_Renew_By_LLPCS_ManageAccountConsentPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="faa92633-4b1c-41b3-9b90-96a7b54540cc"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e6319326-5b9a-466c-b768-562fe127f9af"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="165bf1f3-c22e-41c6-b676-fb61a7e5af27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="bf8ac476-6084-4928-8e26-a008b3bb4d02" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a710f89b-9024-4dd9-9bac-eb980097fe8b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="74ad35e0-653f-4e5d-a5f2-0486b8c1f56c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="2a93f22f-b34d-48e2-880b-f2b02cb8e42b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="3c51dcb3-f479-4a43-b1c0-70216276db99"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to LLPCS" id="715634d7-9e15-4728-9534-2dfa7ab1189a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="3c38bd67-6efa-4e10-b77e-4550be7a75fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="51797c53-b1c9-4b34-a932-1bd26a91d1e1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6708b4e3-2389-4aa4-ad59-a6fe6bbbd990"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="d77b390c-c856-4935-b890-1f1089f2ca72" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="e8156d5f-9424-4800-84e8-a907b6a9c4ce" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="7e2a34bc-303c-40dc-bb9b-310768042aa2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="3a840ec1-859d-4a8c-8796-fa093fed273d" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024836</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:1BE14B780AE1471781D305BCCDD3DDE8</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366C3D10FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBE4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F50FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbb+I6EP4rKPsMzg0WooIUSC/Z0wuFtrR9WRlnAG8TG2KHS3/9sQNkgdIedo+EhDwZf/PNxTNzJnAS254vBKSSclZaJjETXi5tGlnKPI4FFR7DCQhPEq/v31x7dsX08PaKUQqDpvETnOp3x6pFZewMa2V35EK5YZpuGer16rBed8B2iVIVIoOQCYmZbBq2aVXLSseqPZg1z62rX+W767wapSdIhcJWKhXT2JBaiqYxkXLqIbRYLCoLp8LTMbJN00LPN9d9MoEEG62ztUe5obS10SeVCAjEMakQnqAztKdzFgmvT8cMyyyFja3oM1smMhtI6USCjr8ZxV2IQjbi+bGDGWeU4Ji+Yx2fG5ATHpX8eMxTKifJp05YpgYuw5KUieWybwbap3Yi0B7DVOCymGBrg9WDEaTACJQee2HT+HZa1vKrDylmYsTTROwf/4wPsDnEfApRWWzd2lA7HfBIpFpnQLyQkTgTdA63ulinmIDYZBPI6VClbgojurymQhXoUmh2aJfewXEdjYCOQci/SdBOctYgTzjOoDVpj+rhIPLrTy//mCM0cMRMLC/D6vzlpZkT2FXOBUVq18eDoiyKaH2j9/xGpwORnN9e9sy7oNG+uJ02Hp3Yf77vZr71GIzt1fsi4o83909XZve5/0Zf8dXLAE3sWvrKRuR15bhu/PqDvLEhGfTPLx8XaWJZbei+jf2rbhsljFO79nTFf+DO8CYMF5e9uw7rKIOPgzvEJwvz/pdKzUN/0ZtPXu5e69IfBEknRe2L+EcU3swX1zOW3Qd+s3Bnh/++bPvm+9nwFxC5PeoyCIPShcoSll83My2hUXmUq3pT3XyEBCaNlr6le4eXqXZHI0/lcH22nMD2nVqtY1245sV5cG5WHbPaaFgXpn/eaH/fNpk1iwOKHc5GVNvSLXddNl8TJIkngEWQluc8U51OGF8gBljiUsh66hFwJuCBq/a8mr6bbyTmWX0lWW2Y2YTNZqNZwyjdcnnH7lJ/JCHdb8mNvZbcA0KnFHTf1mUtVF0LqUIxw/NMxlZljisMMtXZU91kPdutV5GgyTQGTRQlPMpiqEwn0zwwSKz/7TImIpf2zh/yx/apW4ffthFQOhHVCkL70gaVRTgyW5ytIx8crh2dQVt4P4uoflcqnDKlZM1k/9PvKtHlUZRIcO33u1vShe4f3P3Z6f+0/hLg+v8CqHx8vIm+iAk6TEdhKJrTHbPbxUGNINW0WttimmGrMqtk83mW14/rOihV8EgnEpk26gPJVFtdPfA3YKhAQSfNsIL4gfFCvk8xkxPWl1hCouq9lB9PWFr6IPTSEqp3ujx1I9ozqUInYSmPyTqxWrg04y93MuIRrafEXfW34Gn0O2NHsHbsKD/VziIpG+uTnl+rT+qCcAVLVefl6S74MYBjxveFRZALLlIV1DCT8PmXkm6pTQMTwjMmw8DIBbttPucpV1Pwfit9gMknSbFa0v/eLcs0LwECaiEVNMfXG4KnnwAb74yKjdHDadGo27bfbgeu327sTou66RTTYp9d64P4o2QnToc13voX</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2A366C3D10FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>1BE14B780AE1471781D305BCCDD3DDE8</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>51797c53-b1c9-4b34-a932-1bd26a91d1e1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3c38bd67-6efa-4e10-b77e-4550be7a75fd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2a93f22f-b34d-48e2-880b-f2b02cb8e42b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3c51dcb3-f479-4a43-b1c0-70216276db99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12053 - StreamRenew - DLP - StreamExpirationDateTimeExceedsMaximumRenewalTimeAllowed - Stream Renew not allowed for ExpraionDateTime above MaxAddHours - 400 Bad Request_MIGRATED" searchProperties="true" id="e23b7d56-7165-4530-87c3-011156701d78"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9cdf5b38-5d7d-40ce-9f66-e92c83fbf4a2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_EXPIRATION_DATE_TIME_EXCEEDS_MAXIMUM_RENEWAL_TIME_ALLOWED");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8e3b3ab4-07ee-48bf-ba56-aa6e174109ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="bc7c07ba-cebf-4420-ba87-6429f3944d7b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="f23138ae-ca5b-4dfc-bd95-d5379d3bd1f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="89c9b32f-6682-4175-a0f9-643322f52050"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="b25d29c7-5143-44d1-a599-cc486fbd3e74"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 7 hours" id="8977b12f-ba34-4908-b086-8046429197b6"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+28800000);
	}
else
	{
d=new Date(new Date().getTime()+72000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6ee1c57f-9ddd-49b9-9074-7a1c0331a502"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="63922507-d6e1-4247-bf33-e4f79fe5b57c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="3c8884e3-fdaf-4fca-b6f7-0ff6ee8a6975" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="f0824528-5eb6-45ea-ab2f-d375752c6074" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f9518c49-ab87-4532-8c96-577544c08876" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>A107019EB4FD45719AD991EE8137DA6B</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbb+I6EP4rKPsMzg0WooIUSC/Z0wuFtrR9WRlnAG8TG2KHS3/9sQNkgdIedo+EhDwZf/PNxTNzJnAS254vBKSSclZaJjETXi5tGlnKPI4FFR7DCQhPEq/v31x7dsX08PaKUQqDpvETnOp3x6pFZewMa2V35EK5YZpuGer16rBed8B2iVIVIoOQCYmZbBq2aVXLSseqPZg1z62rX+W767wapSdIhcJWKhXT2JBaiqYxkXLqIbRYLCoLp8LTMbJN00LPN9d9MoEEG62ztUe5obS10SeVCAjEMakQnqAztKdzFgmvT8cMyyyFja3oM1smMhtI6USCjr8ZxV2IQjbi+bGDGWeU4Ji+Yx2fG5ATHpX8eMxTKifJp05YpgYuw5KUieWybwbap3Yi0B7DVOCymGBrg9WDEaTACJQee2HT+HZa1vKrDylmYsTTROwf/4wPsDnEfApRWWzd2lA7HfBIpFpnQLyQkTgTdA63ulinmIDYZBPI6VClbgojurymQhXoUmh2aJfewXEdjYCOQci/SdBOctYgTzjOoDVpj+rhIPLrTy//mCM0cMRMLC/D6vzlpZkT2FXOBUVq18eDoiyKaH2j9/xGpwORnN9e9sy7oNG+uJ02Hp3Yf77vZr71GIzt1fsi4o83909XZve5/0Zf8dXLAE3sWvrKRuR15bhu/PqDvLEhGfTPLx8XaWJZbei+jf2rbhsljFO79nTFf+DO8CYMF5e9uw7rKIOPgzvEJwvz/pdKzUN/0ZtPXu5e69IfBEknRe2L+EcU3swX1zOW3Qd+s3Bnh/++bPvm+9nwFxC5PeoyCIPShcoSll83My2hUXmUq3pT3XyEBCaNlr6le4eXqXZHI0/lcH22nMD2nVqtY1245sV5cG5WHbPaaFgXpn/eaH/fNpk1iwOKHc5GVNvSLXddNl8TJIkngEWQluc8U51OGF8gBljiUsh66hFwJuCBq/a8mr6bbyTmWX0lWW2Y2YTNZqNZwyjdcnnH7lJ/JCHdb8mNvZbcA0KnFHTf1mUtVF0LqUIxw/NMxlZljisMMtXZU91kPdutV5GgyTQGTRQlPMpiqEwn0zwwSKz/7TImIpf2zh/yx/apW4ffthFQOhHVCkL70gaVRTgyW5ytIx8crh2dQVt4P4uoflcqnDKlZM1k/9PvKtHlUZRIcO33u1vShe4f3P3Z6f+0/hLg+v8CqHx8vIm+iAk6TEdhKJrTHbPbxUGNINW0WttimmGrMqtk83mW14/rOihV8EgnEpk26gPJVFtdPfA3YKhAQSfNsIL4gfFCvk8xkxPWl1hCouq9lB9PWFr6IPTSEqp3ujx1I9ozqUInYSmPyTqxWrg04y93MuIRrafEXfW34Gn0O2NHsHbsKD/VziIpG+uTnl+rT+qCcAVLVefl6S74MYBjxveFRZALLlIV1DCT8PmXkm6pTQMTwjMmw8DIBbttPucpV1Pwfit9gMknSbFa0v/eLcs0LwECaiEVNMfXG4KnnwAb74yKjdHDadGo27bfbgeu327sTou66RTTYp9d64P4o2QnToc13voX</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D29822AD7A4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024836</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:A107019EB4FD45719AD991EE8137DA6B</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D29822AD7A4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBE4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F50FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_EXPIRATION_DATE_TIME_EXCEEDS_MAXIMUM_RENEWAL_TIME_ALLOWED</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c8d9f205-8ea3-49e9-ae2b-8ffe3972bd14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12054 - StreamRenew - DLP - StreamExpirationDateTimeBelowLowerBoundary - Stream Renew not allowed for ExpraionDateTime below previous ExpirationDateTime  - 400 Bad Request_MIGRATED" searchProperties="true" id="60574221-d9ab-4f1f-acd4-aeab25761809"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b54dbe06-a012-4447-8ab5-7f5450b7fcb0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_EXPIRATION_DATE_TIME_BELOW_LOWER_BOUNDARY");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9a8dbac0-b9b6-4007-8866-0fc55f947fb2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="56b560f8-6306-44fd-ba95-3338e26ccbb1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b7e954c4-aee3-4e0d-8553-b0fe22ed7aec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="2c6f8f4b-6b2b-46df-a055-80bfef1059ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="9d42cea8-5d3c-46f2-b030-3191beb081a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate - 1 hours" id="552b19d9-ff4b-4a1a-abb3-ff813142bc96"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Date d=new Date(new Date().getTime()-3600000);

String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="194aa1fb-b340-469e-ac95-5e5a7740450a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b023c680-3d47-4903-a72a-f2e26c740c85" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="458b3a9c-fd13-4b5a-89bf-3d7a3521ea60" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="60df80e6-a579-420e-8922-b345e1f37857" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="89c6dd1a-f168-4df2-828e-cddf3d9dee22" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>F79BB11A8C6141FB82D04A1F822DAC50</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbb+I6EP4rKPsMzg0WooIUSC/Z0wuFtrR9WRlnAG8TG2KHS3/9sQNkgdIedo+EhDwZf/PNxTNzJnAS254vBKSSclZaJjETXi5tGlnKPI4FFR7DCQhPEq/v31x7dsX08PaKUQqDpvETnOp3x6pFZewMa2V35EK5YZpuGer16rBed8B2iVIVIoOQCYmZbBq2aVXLSseqPZg1z62rX+W767wapSdIhcJWKhXT2JBaiqYxkXLqIbRYLCoLp8LTMbJN00LPN9d9MoEEG62ztUe5obS10SeVCAjEMakQnqAztKdzFgmvT8cMyyyFja3oM1smMhtI6USCjr8ZxV2IQjbi+bGDGWeU4Ji+Yx2fG5ATHpX8eMxTKifJp05YpgYuw5KUieWybwbap3Yi0B7DVOCymGBrg9WDEaTACJQee2HT+HZa1vKrDylmYsTTROwf/4wPsDnEfApRWWzd2lA7HfBIpFpnQLyQkTgTdA63ulinmIDYZBPI6VClbgojurymQhXoUmh2aJfewXEdjYCOQci/SdBOctYgTzjOoDVpj+rhIPLrTy//mCM0cMRMLC/D6vzlpZkT2FXOBUVq18eDoiyKaH2j9/xGpwORnN9e9sy7oNG+uJ02Hp3Yf77vZr71GIzt1fsi4o83909XZve5/0Zf8dXLAE3sWvrKRuR15bhu/PqDvLEhGfTPLx8XaWJZbei+jf2rbhsljFO79nTFf+DO8CYMF5e9uw7rKIOPgzvEJwvz/pdKzUN/0ZtPXu5e69IfBEknRe2L+EcU3swX1zOW3Qd+s3Bnh/++bPvm+9nwFxC5PeoyCIPShcoSll83My2hUXmUq3pT3XyEBCaNlr6le4eXqXZHI0/lcH22nMD2nVqtY1245sV5cG5WHbPaaFgXpn/eaH/fNpk1iwOKHc5GVNvSLXddNl8TJIkngEWQluc8U51OGF8gBljiUsh66hFwJuCBq/a8mr6bbyTmWX0lWW2Y2YTNZqNZwyjdcnnH7lJ/JCHdb8mNvZbcA0KnFHTf1mUtVF0LqUIxw/NMxlZljisMMtXZU91kPdutV5GgyTQGTRQlPMpiqEwn0zwwSKz/7TImIpf2zh/yx/apW4ffthFQOhHVCkL70gaVRTgyW5ytIx8crh2dQVt4P4uoflcqnDKlZM1k/9PvKtHlUZRIcO33u1vShe4f3P3Z6f+0/hLg+v8CqHx8vIm+iAk6TEdhKJrTHbPbxUGNINW0WttimmGrMqtk83mW14/rOihV8EgnEpk26gPJVFtdPfA3YKhAQSfNsIL4gfFCvk8xkxPWl1hCouq9lB9PWFr6IPTSEqp3ujx1I9ozqUInYSmPyTqxWrg04y93MuIRrafEXfW34Gn0O2NHsHbsKD/VziIpG+uTnl+rT+qCcAVLVefl6S74MYBjxveFRZALLlIV1DCT8PmXkm6pTQMTwjMmw8DIBbttPucpV1Pwfit9gMknSbFa0v/eLcs0LwECaiEVNMfXG4KnnwAb74yKjdHDadGo27bfbgeu327sTou66RTTYp9d64P4o2QnToc13voX</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2CFD1E25004F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024836</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F79BB11A8C6141FB82D04A1F822DAC50</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD1E25004F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBE4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F50FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_EXPIRATION_DATE_TIME_BELOW_LOWER_BOUNDARY</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c8d9f205-8ea3-49e9-ae2b-8ffe3972bd14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12055 - StreamRenew - DLP - StreamExpirationDateTimeExceedsUpperBoundary - Stream Renew not allowed for ExpraionDateTime above 24 Hours - 400 Bad Request_MIGRATED" searchProperties="true" id="7993d263-fc34-4423-bc70-1e692db7e562"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="160f6bf3-5137-4775-9ba2-797a7ba67a84"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="4286f4a5-41c3-4a35-b672-35abcc3a47ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="6a41a1e1-4aa5-40f9-a310-9c06992e65b5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="ac40b294-107b-48fd-897c-79c241ecb9e3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7d7ef5fe-8203-49cc-b3af-1c44af1a9de2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="7e845ade-1919-440d-8148-661c835857c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 5 hours" id="473dec68-250c-489e-9f4a-28d2f82acbbc"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+19200000);
	}
else
	{
d=new Date(new Date().getTime()+60000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
log.info s
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew 1" id="80eb2443-302d-4a6b-86c6-3fdc205bd7a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 10 hours" id="d575863a-2e49-44ff-b2a4-09cabfd914a0"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+38400000);
	}
else
	{
d=new Date(new Date().getTime()+80000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew 2" id="e04d7313-adc3-45b3-baa7-03a22841bc26"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 15 hours" id="1091a795-3d13-43da-8dc5-8ac6fbc57e0c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+57600000);
	}
else
	{
d=new Date(new Date().getTime()+90000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew 3" id="98e0e839-8141-406b-b4ad-0c75d6c03ef1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 20 hours" id="52caaa0d-26c8-48af-aa5a-9b601e59eb9d"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+76800000);
	}
else
	{
d=new Date(new Date().getTime()+110000000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);

tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_EXPIRATION_DATE_TIME_EXCEEDS_UPPER_BOUNDARY");




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew 4" id="52998a27-ec13-44b2-95f4-3946bd692600"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="6d88a0b7-8c1c-46d2-ad6e-6f9d86fef86e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" disabled="true" id="ba1ea203-5606-4cc6-8d84-4e08186d99cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" disabled="true" id="c65c1640-ef6d-4d8c-8f54-bd64130a50f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="d0c562f3-8a0b-4873-a08d-3fa5e313981e" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>13D29822ABBE4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVZbb+I6EP4rKPsMzg0WooIUSC/Z0wuFtrR9WRlnAG8TG2KHS3/9sQNkgdIedo+EhDwZf/PNxTNzJnAS254vBKSSclZaJjETXi5tGlnKPI4FFR7DCQhPEq/v31x7dsX08PaKUQqDpvETnOp3x6pFZewMa2V35EK5YZpuGer16rBed8B2iVIVIoOQCYmZbBq2aVXLSseqPZg1z62rX+W767wapSdIhcJWKhXT2JBaiqYxkXLqIbRYLCoLp8LTMbJN00LPN9d9MoEEG62ztUe5obS10SeVCAjEMakQnqAztKdzFgmvT8cMyyyFja3oM1smMhtI6USCjr8ZxV2IQjbi+bGDGWeU4Ji+Yx2fG5ATHpX8eMxTKifJp05YpgYuw5KUieWybwbap3Yi0B7DVOCymGBrg9WDEaTACJQee2HT+HZa1vKrDylmYsTTROwf/4wPsDnEfApRWWzd2lA7HfBIpFpnQLyQkTgTdA63ulinmIDYZBPI6VClbgojurymQhXoUmh2aJfewXEdjYCOQci/SdBOctYgTzjOoDVpj+rhIPLrTy//mCM0cMRMLC/D6vzlpZkT2FXOBUVq18eDoiyKaH2j9/xGpwORnN9e9sy7oNG+uJ02Hp3Yf77vZr71GIzt1fsi4o83909XZve5/0Zf8dXLAE3sWvrKRuR15bhu/PqDvLEhGfTPLx8XaWJZbei+jf2rbhsljFO79nTFf+DO8CYMF5e9uw7rKIOPgzvEJwvz/pdKzUN/0ZtPXu5e69IfBEknRe2L+EcU3swX1zOW3Qd+s3Bnh/++bPvm+9nwFxC5PeoyCIPShcoSll83My2hUXmUq3pT3XyEBCaNlr6le4eXqXZHI0/lcH22nMD2nVqtY1245sV5cG5WHbPaaFgXpn/eaH/fNpk1iwOKHc5GVNvSLXddNl8TJIkngEWQluc8U51OGF8gBljiUsh66hFwJuCBq/a8mr6bbyTmWX0lWW2Y2YTNZqNZwyjdcnnH7lJ/JCHdb8mNvZbcA0KnFHTf1mUtVF0LqUIxw/NMxlZljisMMtXZU91kPdutV5GgyTQGTRQlPMpiqEwn0zwwSKz/7TImIpf2zh/yx/apW4ffthFQOhHVCkL70gaVRTgyW5ytIx8crh2dQVt4P4uoflcqnDKlZM1k/9PvKtHlUZRIcO33u1vShe4f3P3Z6f+0/hLg+v8CqHx8vIm+iAk6TEdhKJrTHbPbxUGNINW0WttimmGrMqtk83mW14/rOihV8EgnEpk26gPJVFtdPfA3YKhAQSfNsIL4gfFCvk8xkxPWl1hCouq9lB9PWFr6IPTSEqp3ujx1I9ozqUInYSmPyTqxWrg04y93MuIRrafEXfW34Gn0O2NHsHbsKD/VziIpG+uTnl+rT+qCcAVLVefl6S74MYBjxveFRZALLlIV1DCT8PmXkm6pTQMTwjMmw8DIBbttPucpV1Pwfit9gMknSbFa0v/eLcs0LwECaiEVNMfXG4KnnwAb74yKjdHDadGo27bfbgeu327sTou66RTTYp9d64P4o2QnToc13voX</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D29822ABBD4AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D2A366C1F40FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_EXPIRATION_DATE_TIME_EXCEEDS_UPPER_BOUNDARY</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:13D29822ABC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D29822AD864AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D29822AD864AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value>A74C33260D5145BFA3C6B944CF1C818D</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:A74C33260D5145BFA3C6B944CF1C818D</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024836</con:value></con:property><con:property><con:name>useroid</con:name><con:value>13D2A366C1F50FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c8d9f205-8ea3-49e9-ae2b-8ffe3972bd14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d575863a-2e49-44ff-b2a4-09cabfd914a0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e04d7313-adc3-45b3-baa7-03a22841bc26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1091a795-3d13-43da-8dc5-8ac6fbc57e0c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98e0e839-8141-406b-b4ad-0c75d6c03ef1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52caaa0d-26c8-48af-aa5a-9b601e59eb9d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52998a27-ec13-44b2-95f4-3946bd692600</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_20041 - StreamRenew - DLP - AccountIdUnmatched - Full user can renew full-user created stream - 403 Forbidden_MIGRATED" searchProperties="true" id="cd4bb786-e219-4cb4-a7d3-cd0870f0ece2"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9ab58137-8681-431c-ac0c-557039a26be7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_ACCOUNTID_MISMATCH");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9ab40299-37d5-4659-96e5-11e602039cb9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="88493590-e9bf-4d41-8a07-1061caf678c7" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="9e95de2c-3cef-40c8-9f44-f728b63e17ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4e63d263-8e07-4054-9915-f49f27041395"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="86067fac-afb4-4cb2-b260-0255035b3259"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="cb920195-cb4c-4ceb-838b-a79e2ee44802"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Change the assertionAccountIdFULL value" id="218c136d-d1b9-496a-8355-29e9f2f4ed84"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = tP.getPropertyValue("urnaccount");

tC.setPropertyValue("assertionAccountIdFULL","${a}100100");</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="4efb618b-266f-4784-920f-187feb7335c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b5577fc5-53fd-4b80-89bd-894190517a58" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="e561897a-a7d1-4a0f-917c-eb3e63650387" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>C4B7D32645584FA5BC00AD4B44BA1FF1</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb5hwJ7AjMulhZAbkLSnLxkhr0GJLTuWbCC//kgGXCAkh/Y8ebReffvtRbt7yVAUmq7HGKScxLSyikLK3ELaUrKUujFihLkURcBcjt2Jdz1yzaruot0VpTLotpQnPcB1ABurlt0w1Zpfr6uzphmoDqrNcNOoYbteE6qMZTCgjCPKW4qpG7aq11SjPtXrrm24hlm1ms1fSuURUiawhUpVV7akVqylLDhPXE1bLpfVpVWN07lm6rqh/bweTfACIqS0LzceFYbS9lYfV33AEIa4iuNIu9QOdC595k7InCKepbC15X9kS9d0RxM6PiPzL0p5F/wBDeLi2EE0pgSjkLwhGZ9r4IvYr3jhPE4JX0QfOmHoEliFFVaxUaNfFO2Q2plABwxThlS2QMYWawwBpEAxVB7Gg5by5bysFVenKaIsiNOIHR7/jA/QHMI4AV9lO7e21M4HPBGp9iVgd0BxmDGSw40s1gRhYNtsAj4fqnKXQkBWI8JEga6YZKft0zs6bqLRJXNg/G8StJecDcgjCjNo10h3mC3S4c33XvJw+xYsc/3XyPnpvHzvtQoC+8qFoEzt5nhUlGURbW5Aknt4/Hb/Pbme5QaeXdXXI5uzC46BvA7z+YszjOFqMrVydqe/pcH0mnvRanwz/OnNbr/59eE6aPAL0r2fdJ+HU4tmdG69es5L/SLoZxeJ0x+YcPtjzh6ugm9NhOwfyXNzeT0wuZdcPX6jjR++dWM8vN32Z6v79DmwH+l8PrjjD34v8F8flv+MJnfIiN46z9O4Vbqzx/9Qtnvzk2z2DJjvjrIMBt1KX2QJ8c+bmZQQXw0KVTeRzYdxoFxpy1uyd7iZaHfEd0UON2fD6pqdftds1vW+3uv3e7pt6Q3HMfq61zMNfddkNiyOKHZiGhBpS7bcTdl8ThBHLgPqQ6rmcSY6HVM+QewijioDOhaPIKYMRAyVp3WD+JTMshVnDm+8zNZNlBDeWCqVm5jf0tvUCzikhy3ZOWjJY8AkISD7tixrJuqacRGKV5RnPDSqOapSyERnT2WTdc1a09YYiZIQJFEtiv0shGqySIrAaGzzNVWEWSEd96bFY/vQreN/uwgIHZ9IBSZ9+Qoii3Bitug7R945XD85g3bwXuYT+a5EOHlK8IbJ4a/fVSLLoyyR7sib3O1Il7p/cPepM3ky/hJg9H8BRD7e39Q+iYl2nI7SkJ+TPbO7xUGMING02rtiekVG9bWa5XlW1E+tZmmpgNdkIjXd1CaAM9FW19P4BahWomhnzbCS+JHxUn5IMeMLOuGIQyTqvVIcz1haJsDk0jIQ73R17kZ0YFKEjsOKn5J1QrFwScaf7mTYxVJPiO/EZxmn/u+MncDasyP8FDsLJ3QuT3J+rT+oCxwLWCI6b5zug58COGX8UFgGueTCRUHNMg4f/6nIltpSEMZxRvmgqxSC/TZf8OTrBNzfSu9giklSrpbkv3dLlRQlgEEspIwU+HJDcOUToPO9UbE1ejwtvhqdhtPrWrZj1IppYW+mhWV5dhmUA3btd+L3kr04Hdd4+18=</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D29822AEB84AB9E05305991F0A8037</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_024836</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:C4B7D32645584FA5BC00AD4B44BA1FF1</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D29822AEB84AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79ED45914E05305991F0A33A5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD286100EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD2860F0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD2860F0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79ED35914E05305991F0A33A5</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:100100</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79EDB5914E05305991F0A33A5</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B1C79EDB5914E05305991F0A33A5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c8d9f205-8ea3-49e9-ae2b-8ffe3972bd14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>218c136d-d1b9-496a-8355-29e9f2f4ed84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44855 - StreamRenew - DLP - Stream_renew _by_DLP_Manage account consent not present-200 OK_MIGRATED" searchProperties="true" id="ee42a295-4205-4e0c-bd8b-98c0846f018f"><con:description>This test case will verify that a full userId can invoked the StreamRenew API without Manage user consent policy.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="21b421d9-7866-49dc-8a2f-8f336b8d73c5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="910a8355-b66d-46c4-a3bb-d6ffcc13b27c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="794527e2-7016-4cfd-9660-9de959025d14" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="8d3479a4-b4de-47cb-bcb1-69dee997188c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="8f71e2af-7985-4adb-bb2b-a15a9b510146"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="6fe8ec6f-48b5-4488-8aea-7a5009ac137a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="e541b6b8-4dde-453d-a920-95bafb7cc9a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="a8fdebff-0ccf-46a2-a292-9f606070712c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="ff3f3510-4d81-4076-9110-b96d11903a89"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="8af69bdc-fb0b-41b0-9c8d-a46e82e305e4" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="51673fd1-0e67-4bdf-ae42-9439b2728977" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="76cc4710-4b22-4804-aee2-d6a7097b8d2b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="4c1aceee-63f8-4d55-869c-c05351263027" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>D2AC6571D5894B0CBC5528DCC11977C3</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb5hwJ7AjMulhZAbkLSnLxkhr0GJLTuWbCC//kgGXCAkh/Y8ebReffvtRbt7yVAUmq7HGKScxLSyikLK3ELaUrKUujFihLkURcBcjt2Jdz1yzaruot0VpTLotpQnPcB1ABurlt0w1Zpfr6uzphmoDqrNcNOoYbteE6qMZTCgjCPKW4qpG7aq11SjPtXrrm24hlm1ms1fSuURUiawhUpVV7akVqylLDhPXE1bLpfVpVWN07lm6rqh/bweTfACIqS0LzceFYbS9lYfV33AEIa4iuNIu9QOdC595k7InCKepbC15X9kS9d0RxM6PiPzL0p5F/wBDeLi2EE0pgSjkLwhGZ9r4IvYr3jhPE4JX0QfOmHoEliFFVaxUaNfFO2Q2plABwxThlS2QMYWawwBpEAxVB7Gg5by5bysFVenKaIsiNOIHR7/jA/QHMI4AV9lO7e21M4HPBGp9iVgd0BxmDGSw40s1gRhYNtsAj4fqnKXQkBWI8JEga6YZKft0zs6bqLRJXNg/G8StJecDcgjCjNo10h3mC3S4c33XvJw+xYsc/3XyPnpvHzvtQoC+8qFoEzt5nhUlGURbW5Aknt4/Hb/Pbme5QaeXdXXI5uzC46BvA7z+YszjOFqMrVydqe/pcH0mnvRanwz/OnNbr/59eE6aPAL0r2fdJ+HU4tmdG69es5L/SLoZxeJ0x+YcPtjzh6ugm9NhOwfyXNzeT0wuZdcPX6jjR++dWM8vN32Z6v79DmwH+l8PrjjD34v8F8flv+MJnfIiN46z9O4Vbqzx/9Qtnvzk2z2DJjvjrIMBt1KX2QJ8c+bmZQQXw0KVTeRzYdxoFxpy1uyd7iZaHfEd0UON2fD6pqdftds1vW+3uv3e7pt6Q3HMfq61zMNfddkNiyOKHZiGhBpS7bcTdl8ThBHLgPqQ6rmcSY6HVM+QewijioDOhaPIKYMRAyVp3WD+JTMshVnDm+8zNZNlBDeWCqVm5jf0tvUCzikhy3ZOWjJY8AkISD7tixrJuqacRGKV5RnPDSqOapSyERnT2WTdc1a09YYiZIQJFEtiv0shGqySIrAaGzzNVWEWSEd96bFY/vQreN/uwgIHZ9IBSZ9+Qoii3Bitug7R945XD85g3bwXuYT+a5EOHlK8IbJ4a/fVSLLoyyR7sib3O1Il7p/cPepM3ky/hJg9H8BRD7e39Q+iYl2nI7SkJ+TPbO7xUGMING02rtiekVG9bWa5XlW1E+tZmmpgNdkIjXd1CaAM9FW19P4BahWomhnzbCS+JHxUn5IMeMLOuGIQyTqvVIcz1haJsDk0jIQ73R17kZ0YFKEjsOKn5J1QrFwScaf7mTYxVJPiO/EZxmn/u+MncDasyP8FDsLJ3QuT3J+rT+oCxwLWCI6b5zug58COGX8UFgGueTCRUHNMg4f/6nIltpSEMZxRvmgqxSC/TZf8OTrBNzfSu9giklSrpbkv3dLlRQlgEEspIwU+HJDcOUToPO9UbE1ejwtvhqdhtPrWrZj1IppYW+mhWV5dhmUA3btd+L3kr04Hdd4+18=</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C79FB45914E05305991F0A33A5</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025058</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:D2AC6571D5894B0CBC5528DCC11977C3</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C79FB45914E05305991F0A33A5</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79ED45914E05305991F0A33A5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD286100EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD2860F0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD2860F0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79ED35914E05305991F0A33A5</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B1C79ED35914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79EDB5914E05305991F0A33A5</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B1C79EDB5914E05305991F0A33A5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>daad333d-0ced-4a2f-b6b0-f66bb6e171fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8d3479a4-b4de-47cb-bcb1-69dee997188c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e541b6b8-4dde-453d-a920-95bafb7cc9a9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a8fdebff-0ccf-46a2-a292-9f606070712c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44857 - StreamRenew - DLP - StreamOwnerMismatch - Stream_Renew_By_DLPCS_ManageAccountConsentnotPresent_diffOrg - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8388fe81-22f3-44ec-a355-86401dad58c6" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="891d47d2-d0f2-4ddd-a83d-49b334c0b2d6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="efb906dd-2efa-4aa0-a64c-2bb27b3c968e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="06be10d7-d83f-4556-a1e0-b2caf9aafb5b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="51ad0595-2b5e-47de-b2a1-28aa09ee388d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="9025e021-71e5-4882-8fd8-7e96815a1ebf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="2943b884-608c-4c6e-8ebf-f5df3e152d3c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="82636c2e-af54-4b6e-b5f5-06cac0344b75"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="9a215d17-9725-4a1c-84df-dd80f6d6a36c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="58009b69-602f-45ec-b1c0-df2dd9bba210"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="97d6a84d-f527-4bd4-b63d-ba708ebaf8d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e4745a81-8035-4461-bcf1-714c91fb81be" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="29b0505d-b951-49d1-b5e6-ec7ce77be2c0" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="87ef3da9-d22f-4063-944c-34f69b7b404d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="1426c3ab-39b6-4baf-b2bc-1aaef313cecb" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150312_04433</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1116423CEBC92ECBE05307991F0A891F</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">111641972AC10796E05305991F0A8B37</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VynmcMl4IYFyBKjBJxhMgBJhsLykhyaDElsCSweTrRzLgACG5zNwXKLVb3acXne4LDqLQdpuc41gQRgtpFFLuZtK6lsTUZYAT7lIQYe4K6A6b3Y5rF00XbK9oBb9d114sVAlKACK9ZiJbP68FNX0cVCs6KqHKOLCRUy2VpSrnCfYpF4CKumabVlk3S7pljyzLtUy37BQrlvmsFe5xzKVtqVI0tQ2olNe1qRAz1zCWy2VxWSqyeGLYpmkZj93OEE5xBLTGxTqizFHc2OjDIsIQhyEsQhYZF8aezgXi7pBMKBBJjDe+0Fe+TMOsGVIHcTI50/K7GPk0YNnRA5RRAkFI3oHKTxeLKUOFZjhhMRHT6MsgLFMZ1nEKdWid0zPN2Id2oqE9hDEHOp8Ca2NrgAMcYwpx4ffAr2tnp1UtuzqKAeUBiyO+f/w7PJgucMhmGOl8G9YG2ukGj2SqcYGh61MYJpwscE816wxAzDfVxPB0U4V+jAOSdgiXDZpyhc7YhXdwXGejTSaYi38p0E5x1kbuQZjgxvX99Km7HEfz6gD4xtIxad95Zuy2d8PqGYBd5UyQl3Z9PGjKvInWNx4GoPuaJm9B7+r1rT1c3Vdu03tMkmer1+G3VxUjublaPcRwjqbp2B+gG++RDt6CrufVestHw4mXk45xXbG66VXrtTlBg8B6+LUcE5S+O6tWmty14inxH29eH/r3YFTqru7Yk1X1n99fWfJjmpjl9jutDa9/pv1wcverN/UGv+Mfk6eBgN5Sfr+DzmL1+DN6AHOznoezg39ftn3zw2T8iqHYHlUb+O3ClawSEN+TmZIQpAeZqjtT5MMFpkJrqFuKO9xE0h1Brqzh+mxZVuXcqlXtpmea1Vrl0iyXzHKtZl2ZTadVqm5JZo3iAKLHaECUL0W567b5HiCMXI4pwrG+YIlkOq59Y7ENBCj4dCAfAaMcj5ii50iENrfKizdnUVstKog743TJqkQr9Ji4pbdxMxA43ufk8z1OHmBIZgQr4lZ9zWVjcyFzMQeLRIRWcQGKFCeS2mPFsq597pQNTqJZiBVSI2IoCXFxNp1lmTH4+t/WAeSZdHA5yl7bl3EdftumQOogohS4iqWFZRnxkeFyvg3kU8CVo0Noa76ZIKIelsyniAlcI9n/9NEmqj/yHml3msP+FnSu+xd3X7zhi/WPBjr/14Csx+ebxjc5MQ7LkTtCC7Ljdrs5yBkkWauxbaY5KM6LyWKRZO1TVewcS/OGKqRh2sYQw0Ty6mrE3jA1civGSUMsB37gPJfvQ0zElA4FEDiS/V7IjidsLUPM1dbiy4eanroS7bmUqRM4FcdkXig3LoX426UMulDpSXFf/i1ZjD4qdsTWjh8Zp1xaBKETdVIDbPVFX0AmzRJJvSzeNX7MwDHn+8I8yTkWIRtqnAj89ZeC4tS6BiBkCRV+W8sEuzyf4RSrGXY/lD6ZyUZJvluS/14udZK1AMRyI+Uks69WBFc9ATrZmRUbp5/GhV3yLlueY196rWxcVDfjQv7mSdlD1/gk/izZydNhjzf+AA==</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1116423CEBC82ECBE05307991F0A891F</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1116423CEBC82ECBE05307991F0A891F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:111641972AC00796E05305991F0A8B37</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">111641972AC00796E05305991F0A8B37</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D1959A0C1A57DE0401F0A0799496E</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D194114DDD281E0401F0A07994972</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1116423CEBD02ECBE05307991F0A891F</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1116423CEBD02ECBE05307991F0A891F</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>51ad0595-2b5e-47de-b2a1-28aa09ee388d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>82636c2e-af54-4b6e-b5f5-06cac0344b75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9a215d17-9725-4a1c-84df-dd80f6d6a36c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44856 - StreamRenew - DLP - StreamOwnerMismatch - Stream_Renew_By_DLPCS_ManageAccountConsentnotPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a8c7c73e-266c-4fad-b203-b750c64eabda"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="77db495a-4fa8-4d32-bc8f-d241dbdb0313"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="10379d7a-482f-4916-9855-3a77d32071bc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="a2f42386-fd32-4102-8eb3-548e86394b94" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="bc8d8670-a420-46f9-af0e-7335976768fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="5df92fd8-dea6-4423-b321-e144b47db23b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a2af0ba3-a122-43ec-97f0-a43ba98a6fb4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="94c3bc62-52ae-4c27-84d8-144eaed8e8b3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="aa72e430-2b45-443d-b9b8-620a7ad172cb"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="9e172f5d-9a70-4338-9005-08374126c6ca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="d60d9fe8-034d-454c-bc2f-ca63cdc80870"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f7918c56-0e4d-4de8-bb94-39fd5bea7070" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="c654801f-f18e-4bfa-98ba-d41aaf315d21" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="74d5b879-aee9-4fcc-9ae4-644732636a8a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="e90ac9b6-9b4a-4e37-85db-be0bfea99410" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025058</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:94465CADCE7F4A84AFE527D1EA5C24DD</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D29822AEC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79ED45914E05305991F0A33A5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD286100EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb5hwJ7AjMulhZAbkLSnLxkhr0GJLTuWbCC//kgGXCAkh/Y8ebReffvtRbt7yVAUmq7HGKScxLSyikLK3ELaUrKUujFihLkURcBcjt2Jdz1yzaruot0VpTLotpQnPcB1ABurlt0w1Zpfr6uzphmoDqrNcNOoYbteE6qMZTCgjCPKW4qpG7aq11SjPtXrrm24hlm1ms1fSuURUiawhUpVV7akVqylLDhPXE1bLpfVpVWN07lm6rqh/bweTfACIqS0LzceFYbS9lYfV33AEIa4iuNIu9QOdC595k7InCKepbC15X9kS9d0RxM6PiPzL0p5F/wBDeLi2EE0pgSjkLwhGZ9r4IvYr3jhPE4JX0QfOmHoEliFFVaxUaNfFO2Q2plABwxThlS2QMYWawwBpEAxVB7Gg5by5bysFVenKaIsiNOIHR7/jA/QHMI4AV9lO7e21M4HPBGp9iVgd0BxmDGSw40s1gRhYNtsAj4fqnKXQkBWI8JEga6YZKft0zs6bqLRJXNg/G8StJecDcgjCjNo10h3mC3S4c33XvJw+xYsc/3XyPnpvHzvtQoC+8qFoEzt5nhUlGURbW5Aknt4/Hb/Pbme5QaeXdXXI5uzC46BvA7z+YszjOFqMrVydqe/pcH0mnvRanwz/OnNbr/59eE6aPAL0r2fdJ+HU4tmdG69es5L/SLoZxeJ0x+YcPtjzh6ugm9NhOwfyXNzeT0wuZdcPX6jjR++dWM8vN32Z6v79DmwH+l8PrjjD34v8F8flv+MJnfIiN46z9O4Vbqzx/9Qtnvzk2z2DJjvjrIMBt1KX2QJ8c+bmZQQXw0KVTeRzYdxoFxpy1uyd7iZaHfEd0UON2fD6pqdftds1vW+3uv3e7pt6Q3HMfq61zMNfddkNiyOKHZiGhBpS7bcTdl8ThBHLgPqQ6rmcSY6HVM+QewijioDOhaPIKYMRAyVp3WD+JTMshVnDm+8zNZNlBDeWCqVm5jf0tvUCzikhy3ZOWjJY8AkISD7tixrJuqacRGKV5RnPDSqOapSyERnT2WTdc1a09YYiZIQJFEtiv0shGqySIrAaGzzNVWEWSEd96bFY/vQreN/uwgIHZ9IBSZ9+Qoii3Bitug7R945XD85g3bwXuYT+a5EOHlK8IbJ4a/fVSLLoyyR7sib3O1Il7p/cPepM3ky/hJg9H8BRD7e39Q+iYl2nI7SkJ+TPbO7xUGMING02rtiekVG9bWa5XlW1E+tZmmpgNdkIjXd1CaAM9FW19P4BahWomhnzbCS+JHxUn5IMeMLOuGIQyTqvVIcz1haJsDk0jIQ73R17kZ0YFKEjsOKn5J1QrFwScaf7mTYxVJPiO/EZxmn/u+MncDasyP8FDsLJ3QuT3J+rT+oCxwLWCI6b5zug58COGX8UFgGueTCRUHNMg4f/6nIltpSEMZxRvmgqxSC/TZf8OTrBNzfSu9giklSrpbkv3dLlRQlgEEspIwU+HJDcOUToPO9UbE1ejwtvhqdhtPrWrZj1IppYW+mhWV5dhmUA3btd+L3kr04Hdd4+18=</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B1C79ED35914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79ED35914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD2860F0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD2860F0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D29822AEC54AB9E05305991F0A8037</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>94465CADCE7F4A84AFE527D1EA5C24DD</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B1C79EDB5914E05305991F0A33A5</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79EDB5914E05305991F0A33A5</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>bc8d8670-a420-46f9-af0e-7335976768fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94c3bc62-52ae-4c27-84d8-144eaed8e8b3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>aa72e430-2b45-443d-b9b8-620a7ad172cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44858 - StreamRenew - DLP - StreamOwnerMismatch - Stream_Renew_By_LLPCS_ManageAccountConsentnotPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8150ee9b-56a6-4107-b182-948132f4c151"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="821c6525-146f-4d03-b031-1b0557072254"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="175e859e-b3a1-4a4d-9e3c-43ca6b28b64b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="78185601-6774-40db-b8af-1c2b2c93fc2e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="724b80a6-26d1-4bed-a229-6b767a2f6b15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="184c61b4-c356-4a77-a725-bdc1449a0201"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="8887bd32-9a24-4260-aa7c-d616b048334d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="5a24527f-ff78-44d4-811d-cadbae47bce0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="657fa368-2ce2-41f6-93d0-f23f06755a59"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to LLPCS" id="063f3166-c67d-41c4-a726-f6ca705c1e99"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f4f0c7f1-eb73-4508-9260-d8e5d37edf69"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="4676f0d4-dd7b-4224-bbbf-f9631f4a0030" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="750542e9-76e3-4e4a-9394-238a4a1ee60d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="6698db5f-fa39-4454-9475-3f7ce2449689" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="8ea99eb4-7938-4394-8f4e-0713ebf6c9d7" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025058</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F5126B969E3445779C7C441C4842106D</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2A366C4560FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79ED45914E05305991F0A33A5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD286100EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb5hwJ7AjMulhZAbkLSnLxkhr0GJLTuWbCC//kgGXCAkh/Y8ebReffvtRbt7yVAUmq7HGKScxLSyikLK3ELaUrKUujFihLkURcBcjt2Jdz1yzaruot0VpTLotpQnPcB1ABurlt0w1Zpfr6uzphmoDqrNcNOoYbteE6qMZTCgjCPKW4qpG7aq11SjPtXrrm24hlm1ms1fSuURUiawhUpVV7akVqylLDhPXE1bLpfVpVWN07lm6rqh/bweTfACIqS0LzceFYbS9lYfV33AEIa4iuNIu9QOdC595k7InCKepbC15X9kS9d0RxM6PiPzL0p5F/wBDeLi2EE0pgSjkLwhGZ9r4IvYr3jhPE4JX0QfOmHoEliFFVaxUaNfFO2Q2plABwxThlS2QMYWawwBpEAxVB7Gg5by5bysFVenKaIsiNOIHR7/jA/QHMI4AV9lO7e21M4HPBGp9iVgd0BxmDGSw40s1gRhYNtsAj4fqnKXQkBWI8JEga6YZKft0zs6bqLRJXNg/G8StJecDcgjCjNo10h3mC3S4c33XvJw+xYsc/3XyPnpvHzvtQoC+8qFoEzt5nhUlGURbW5Aknt4/Hb/Pbme5QaeXdXXI5uzC46BvA7z+YszjOFqMrVydqe/pcH0mnvRanwz/OnNbr/59eE6aPAL0r2fdJ+HU4tmdG69es5L/SLoZxeJ0x+YcPtjzh6ugm9NhOwfyXNzeT0wuZdcPX6jjR++dWM8vN32Z6v79DmwH+l8PrjjD34v8F8flv+MJnfIiN46z9O4Vbqzx/9Qtnvzk2z2DJjvjrIMBt1KX2QJ8c+bmZQQXw0KVTeRzYdxoFxpy1uyd7iZaHfEd0UON2fD6pqdftds1vW+3uv3e7pt6Q3HMfq61zMNfddkNiyOKHZiGhBpS7bcTdl8ThBHLgPqQ6rmcSY6HVM+QewijioDOhaPIKYMRAyVp3WD+JTMshVnDm+8zNZNlBDeWCqVm5jf0tvUCzikhy3ZOWjJY8AkISD7tixrJuqacRGKV5RnPDSqOapSyERnT2WTdc1a09YYiZIQJFEtiv0shGqySIrAaGzzNVWEWSEd96bFY/vQreN/uwgIHZ9IBSZ9+Qoii3Bitug7R945XD85g3bwXuYT+a5EOHlK8IbJ4a/fVSLLoyyR7sib3O1Il7p/cPepM3ky/hJg9H8BRD7e39Q+iYl2nI7SkJ+TPbO7xUGMING02rtiekVG9bWa5XlW1E+tZmmpgNdkIjXd1CaAM9FW19P4BahWomhnzbCS+JHxUn5IMeMLOuGIQyTqvVIcz1haJsDk0jIQ73R17kZ0YFKEjsOKn5J1QrFwScaf7mTYxVJPiO/EZxmn/u+MncDasyP8FDsLJ3QuT3J+rT+oCxwLWCI6b5zug58COGX8UFgGueTCRUHNMg4f/6nIltpSEMZxRvmgqxSC/TZf8OTrBNzfSu9giklSrpbkv3dLlRQlgEEspIwU+HJDcOUToPO9UbE1ejwtvhqdhtPrWrZj1IppYW+mhWV5dhmUA3btd+L3kr04Hdd4+18=</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B1C79ED35914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79ED35914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD2860F0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD2860F0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2A366C4560FEDE05305991F0AE9B7</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>F5126B969E3445779C7C441C4842106D</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B1C79EDB5914E05305991F0A33A5</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C79EDB5914E05305991F0A33A5</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>724b80a6-26d1-4bed-a229-6b767a2f6b15</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a24527f-ff78-44d4-811d-cadbae47bce0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>657fa368-2ce2-41f6-93d0-f23f06755a59</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Dynamic LASP Test Cases_P1_without MAC" id="a6f21765-b907-4fa2-96f2-b1d9a6f0fc5a"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24855 - StreamRenew - DLPCS - Stream_renew _by_DLPCS_Manage account consent not present - 200 OK_MIGRATED" searchProperties="true" id="2c546edd-40d8-4e5d-9a66-a131ad67cdfe"><con:description>This test case will verify that a full userId can invoked the StreamRenew API without Manage user consent policy.</con:description><con:settings/><con:testStep type="groovy" name="Establish data and LLP without MAC" id="c86004b8-0826-40e7-a291-80f3008c325e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E_without_MAC");

def runnerTS = myTS.run( null , false )

assert runnerTS.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="e084d2f3-5dc0-4a5a-adfe-febf601516c4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="16a88bcf-689c-4d96-af4a-3131e43b4514"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="5c0d6739-8908-4a3d-b783-dda65784ce55" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="bf3485e5-4b9b-40d6-9051-3a03e960b893"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a970a07e-f69d-4119-b7f3-5e3f862c74ec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="33069685-4971-42c2-936d-355664afa7d0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="498b6176-92bd-457e-b9e0-e69495886a54"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="641bdf66-c4c4-4451-9655-f4ac8a3cf422"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="25f6165f-58f3-4227-aba7-1a3a17e27341" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="a4ccfd2a-9e2a-45c4-9fcf-cc80bfd9053f" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="9bc773ef-6516-40d7-bc59-6e10ed1108c8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="1f7949d9-4b87-4fb6-a18a-5b693ec80c2e" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>F38388CACF1047AF8394A6450F6F3EBF</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMpYXNlegymw3ZA+Q9SVlZBkrsSUiyYbk60cy4AAhuczMk0vt1unTi7r7mPtJbLke54gJTElpkcSEu7m0qaWMuNTnmLvETxB3BXRH3sW5a5WB66+vaKVBt6k9WyioVYENdThpWLpTsyy9btsTvQ5r9XoATccOK1KV8xQNCBc+EU3NAmZFB45uVseg6lYst+KUbavxpJXuEOMSW6qUgbYiteBNLRJi5hrGfD4vz+0yZVPDAsA0Hi7ORzBCia+1jpce5YZYa6UPywGCKI5hGdLEODa2dI4D7o7wlPgiZWhlK/jOFjBAw5A6AcfTX1pxFwUDEtL82PEJJRj6Mf7wVXwukIhoUPLiKWVYRMm3TphAAetoIWNoOuSXZmxTOxBoiyHjvs4j31xhDVGIGCIQlW6Hg6b267Cs5VfHzCc8pCzh28c/44NIhmI6Q4HO126tqB0OuCdSrWME3QGBccpxhi5Vsc58iPgqmwgeDlW6ZijEi3PMZYEuuGJnbNLbOS6j0cVTxMXfJGgjOUuQOz9OUWsQDU9uLu7aA3gD75KHeyoewPyxTkGDNnMCm8q5oEjt8rhTlEURLW/AUz6d2jVjzs68Rye64EdnlfQyCzM6Tp/OTtpH9VcY3g1F3Ej5xQBWIuf+jFq3pw1kOjAeClAZeymOM3YPSSexO/89VE+m/aj38hgwkdyKTi0RH+Dh/vQFJuLIu+r2XidvcdKNpt2u9TC6/wBR9uH1DOfxhj3dzr3a/KoPwx4K435dpFBcVdOn6yg+ermGzcKdDf7bsvWbH6WTFwTF+qjKYNAt9WWWfPFzM1MSHOhhrurOVPPhAhGhtdQt1TvcVLY7HLgyh8uzaXetTr9r9myzBpx+owcqNqg1GmYfeE4bdNZNZslih2KHkhArW6rlLsvmZ4IwcTkiAWJ6RlPZ6bj2A2LXF35pQIbyEVDC0ZjK9mxSEsfRPIvfktnEfGHJW/QqwqgWL7TSJRVX5Ip5oUBsuyk3tpryEEE8w0h1blXYXFY2FzIYb36WitgsZ36ZoFT2dqbarGs59YrBcTKLkaJqJDRIY1SeRbM8NAZffi3dhzyXDnvj/Ll969juv3UMpE6AlQJXvrSRzCPaM12ctSNfHK7unUJreC8NsHpZMqCCYbhksv3rs05UgRRF0j33Rtdr0oXuH9x97oyezb8EOP8H4+f/alzm8utN44d4GrupLAwFGd4wu1475ACTLa+1LsQ33yy/ldMsS/PacxzbYBLeUEVgAMsYIZjKpvw+pq+IGAWKcdAELIjvGC/k2xRTEZGR8AVK5Fsp5ccDVp4R4mrlGchXvjh0n9oyKUMn0ELsk3Viua4pxj9udNCFSk+Kr+VnTlnwmbE9WBt2pJ9y4xGYTNVJTb/3b+oCUgmLZd+mbBN8H8A+49vCIsgFFyELapIK9P2fkmrITc2HkKZEDLpaLtgcEjlP8T5D7qfSF5h8DhWLKf7/zVTHeQlAJNdZjnN8tV+46gmQ6cagWRndnTVtp+r12qBe7dkgnzWV5awxgWcXQdli1/oi/irZiNNujbd+Aw==</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2CFD1E34104F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025239</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F38388CACF1047AF8394A6450F6F3EBF</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD1E34104F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB096E30E05305991F0A10A3</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31804F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>daad333d-0ced-4a2f-b6b0-f66bb6e171fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8d3479a4-b4de-47cb-bcb1-69dee997188c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>498b6176-92bd-457e-b9e0-e69495886a54</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24858 - StreamRenew - DLPCS - Stream_Renew_By_LLPCS_ManageAccountConsentnotPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3307efc4-96a6-429a-a266-89faa79b3dc4"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="77696bb1-9061-4391-8378-b8893b250547"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="536077da-64c9-4b80-8ff5-0c2d2ed9540a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="66615127-a55c-45a3-bd9e-1b7956f0c748" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="cb5413c8-7499-4bc9-978d-f89d1ad6e91d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4da8cff8-2389-48b6-b48b-40d7ed507810"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="5aa67c73-e3bf-4269-b2e4-645040b6eb9e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="ed0a091e-ba31-448f-b8f0-d0e24713428f"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to LLPCS" id="21d5229e-ff0b-4645-ba6c-b23c56dcb21d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f3b40064-4765-4d01-97fd-9ec734a8b163"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="7e61f801-890d-4b62-9fa1-45acf3ab0462" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="2deac975-445c-49e2-85c6-32d943133680" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="d3b02dbe-bac2-40e9-b9af-84626ac85e8a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="8d6e9140-883c-40c1-a991-cbb780adb2e6" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025239</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:641C551D196646C88C750106A6FD9747</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D29822AEF44AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB096E30E05305991F0A10A3</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31804F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMpYXNlegymw3ZA+Q9SVlZBkrsSUiyYbk60cy4AAhuczMk0vt1unTi7r7mPtJbLke54gJTElpkcSEu7m0qaWMuNTnmLvETxB3BXRH3sW5a5WB66+vaKVBt6k9WyioVYENdThpWLpTsyy9btsTvQ5r9XoATccOK1KV8xQNCBc+EU3NAmZFB45uVseg6lYst+KUbavxpJXuEOMSW6qUgbYiteBNLRJi5hrGfD4vz+0yZVPDAsA0Hi7ORzBCia+1jpce5YZYa6UPywGCKI5hGdLEODa2dI4D7o7wlPgiZWhlK/jOFjBAw5A6AcfTX1pxFwUDEtL82PEJJRj6Mf7wVXwukIhoUPLiKWVYRMm3TphAAetoIWNoOuSXZmxTOxBoiyHjvs4j31xhDVGIGCIQlW6Hg6b267Cs5VfHzCc8pCzh28c/44NIhmI6Q4HO126tqB0OuCdSrWME3QGBccpxhi5Vsc58iPgqmwgeDlW6ZijEi3PMZYEuuGJnbNLbOS6j0cVTxMXfJGgjOUuQOz9OUWsQDU9uLu7aA3gD75KHeyoewPyxTkGDNnMCm8q5oEjt8rhTlEURLW/AUz6d2jVjzs68Rye64EdnlfQyCzM6Tp/OTtpH9VcY3g1F3Ej5xQBWIuf+jFq3pw1kOjAeClAZeymOM3YPSSexO/89VE+m/aj38hgwkdyKTi0RH+Dh/vQFJuLIu+r2XidvcdKNpt2u9TC6/wBR9uH1DOfxhj3dzr3a/KoPwx4K435dpFBcVdOn6yg+ermGzcKdDf7bsvWbH6WTFwTF+qjKYNAt9WWWfPFzM1MSHOhhrurOVPPhAhGhtdQt1TvcVLY7HLgyh8uzaXetTr9r9myzBpx+owcqNqg1GmYfeE4bdNZNZslih2KHkhArW6rlLsvmZ4IwcTkiAWJ6RlPZ6bj2A2LXF35pQIbyEVDC0ZjK9mxSEsfRPIvfktnEfGHJW/QqwqgWL7TSJRVX5Ip5oUBsuyk3tpryEEE8w0h1blXYXFY2FzIYb36WitgsZ36ZoFT2dqbarGs59YrBcTKLkaJqJDRIY1SeRbM8NAZffi3dhzyXDnvj/Ll969juv3UMpE6AlQJXvrSRzCPaM12ctSNfHK7unUJreC8NsHpZMqCCYbhksv3rs05UgRRF0j33Rtdr0oXuH9x97oyezb8EOP8H4+f/alzm8utN44d4GrupLAwFGd4wu1475ACTLa+1LsQ33yy/ldMsS/PacxzbYBLeUEVgAMsYIZjKpvw+pq+IGAWKcdAELIjvGC/k2xRTEZGR8AVK5Fsp5ccDVp4R4mrlGchXvjh0n9oyKUMn0ELsk3Viua4pxj9udNCFSk+Kr+VnTlnwmbE9WBt2pJ9y4xGYTNVJTb/3b+oCUgmLZd+mbBN8H8A+49vCIsgFFyELapIK9P2fkmrITc2HkKZEDLpaLtgcEjlP8T5D7qfSF5h8DhWLKf7/zVTHeQlAJNdZjnN8tV+46gmQ6cagWRndnTVtp+r12qBe7dkgnzWV5awxgWcXQdli1/oi/irZiNNujbd+Aw==</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D29822AEF44AB9E05305991F0A8037</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>641C551D196646C88C750106A6FD9747</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB106E30E05305991F0A10A3</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>bc8d8670-a420-46f9-af0e-7335976768fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ed0a091e-ba31-448f-b8f0-d0e24713428f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24856 - StreamRenew - DLPCS - Stream_Renew_By_DLP_ManageAccountConsentnotPresent_sameOrg - 403 Forbidden_FLAKY_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="21575ca3-0802-4aaa-9941-dea16b123d08"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="96e7626e-6c17-4750-8e2d-0971629d8117"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="b859e9c2-268f-4b1c-9d26-373e26483d2e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="f770f60f-5f88-450e-9cb1-b415b57bc560" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="9d62e507-221b-4204-a4f0-3c126aa6bcb5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="879799c7-46b1-48ec-a9e4-8d625851df42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="75cfe993-9929-4cc1-81ad-d4edaf1c4d56"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="b3c63c11-24b8-487c-8a53-51879fda4883"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLP" id="df36fdae-6e32-4a89-80cd-ac11ce990fc3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="d8c7dadb-9605-4994-a1e3-4cfea5368b2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f5f95043-9a08-41b4-b1f9-2a80ddb17b7f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="bd9a2174-a673-41d8-a20a-440514b9a0b7" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="51f1520c-5b3c-438a-87c3-b9bed481f782" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="9a34f8a1-b29a-4c34-87fa-dcaee41abea4" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025239</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:6C47893B8CF542AC9345865365DF2CF2</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D29822AF004AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB096E30E05305991F0A10A3</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31804F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMpYXNlegymw3ZA+Q9SVlZBkrsSUiyYbk60cy4AAhuczMk0vt1unTi7r7mPtJbLke54gJTElpkcSEu7m0qaWMuNTnmLvETxB3BXRH3sW5a5WB66+vaKVBt6k9WyioVYENdThpWLpTsyy9btsTvQ5r9XoATccOK1KV8xQNCBc+EU3NAmZFB45uVseg6lYst+KUbavxpJXuEOMSW6qUgbYiteBNLRJi5hrGfD4vz+0yZVPDAsA0Hi7ORzBCia+1jpce5YZYa6UPywGCKI5hGdLEODa2dI4D7o7wlPgiZWhlK/jOFjBAw5A6AcfTX1pxFwUDEtL82PEJJRj6Mf7wVXwukIhoUPLiKWVYRMm3TphAAetoIWNoOuSXZmxTOxBoiyHjvs4j31xhDVGIGCIQlW6Hg6b267Cs5VfHzCc8pCzh28c/44NIhmI6Q4HO126tqB0OuCdSrWME3QGBccpxhi5Vsc58iPgqmwgeDlW6ZijEi3PMZYEuuGJnbNLbOS6j0cVTxMXfJGgjOUuQOz9OUWsQDU9uLu7aA3gD75KHeyoewPyxTkGDNnMCm8q5oEjt8rhTlEURLW/AUz6d2jVjzs68Rye64EdnlfQyCzM6Tp/OTtpH9VcY3g1F3Ej5xQBWIuf+jFq3pw1kOjAeClAZeymOM3YPSSexO/89VE+m/aj38hgwkdyKTi0RH+Dh/vQFJuLIu+r2XidvcdKNpt2u9TC6/wBR9uH1DOfxhj3dzr3a/KoPwx4K435dpFBcVdOn6yg+ermGzcKdDf7bsvWbH6WTFwTF+qjKYNAt9WWWfPFzM1MSHOhhrurOVPPhAhGhtdQt1TvcVLY7HLgyh8uzaXetTr9r9myzBpx+owcqNqg1GmYfeE4bdNZNZslih2KHkhArW6rlLsvmZ4IwcTkiAWJ6RlPZ6bj2A2LXF35pQIbyEVDC0ZjK9mxSEsfRPIvfktnEfGHJW/QqwqgWL7TSJRVX5Ip5oUBsuyk3tpryEEE8w0h1blXYXFY2FzIYb36WitgsZ36ZoFT2dqbarGs59YrBcTKLkaJqJDRIY1SeRbM8NAZffi3dhzyXDnvj/Ll969juv3UMpE6AlQJXvrSRzCPaM12ctSNfHK7unUJreC8NsHpZMqCCYbhksv3rs05UgRRF0j33Rtdr0oXuH9x97oyezb8EOP8H4+f/alzm8utN44d4GrupLAwFGd4wu1475ACTLa+1LsQ33yy/ldMsS/PacxzbYBLeUEVgAMsYIZjKpvw+pq+IGAWKcdAELIjvGC/k2xRTEZGR8AVK5Fsp5ccDVp4R4mrlGchXvjh0n9oyKUMn0ELsk3Viua4pxj9udNCFSk+Kr+VnTlnwmbE9WBt2pJ9y4xGYTNVJTb/3b+oCUgmLZd+mbBN8H8A+49vCIsgFFyELapIK9P2fkmrITc2HkKZEDLpaLtgcEjlP8T5D7qfSF5h8DhWLKf7/zVTHeQlAJNdZjnN8tV+46gmQ6cagWRndnTVtp+r12qBe7dkgnzWV5awxgWcXQdli1/oi/irZiNNujbd+Aw==</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D29822AF004AB9E05305991F0A8037</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>6C47893B8CF542AC9345865365DF2CF2</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB106E30E05305991F0A10A3</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>bc8d8670-a420-46f9-af0e-7335976768fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b3c63c11-24b8-487c-8a53-51879fda4883</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24857 - StreamRenew - DLPCS - Stream_Renew_By_DLPCS_ManageAccountConsentnotPresent_diffOrg - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="84b0ad82-d4ac-4bdf-a053-4324e75c61f2" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="52783401-642e-4c22-a047-dc0672fb1a9a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="0c6e5496-e8b6-4550-a7c2-4434cf95a07c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="3988eae1-4352-4f8a-b116-bc11fc535a2c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="cf35248c-e653-4a95-a21a-8f509bd4a77d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="1760db17-6a4a-49d2-8621-7b7d99dc497f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="fa4919e3-74ce-4df7-9a1f-5460c9bab926"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="9378e07b-3527-420a-a7df-572e63168c82"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="ea03884d-a56d-4d27-82a1-564aedf16782"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="2a843bcc-09c6-419a-a06f-43a9e3044e7c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="de9824a7-6e12-406d-8aba-66eb43069e15" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="9e129912-d0eb-4185-990b-14cbac4ba1db" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="4e2dea13-e825-4e04-9b98-b2a4ee52133a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="08c9f10c-b224-4d91-b1b1-22939cd96b9f" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150316_02356</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:BDCFEDF8AACE45A5B875973EB77FCEDE</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:11651BEE3444520FE05305991F0AE96E</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11651BEB6F22520DE05305991F0A2520</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11651C663CEA0626E05307991F0A8853</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbbcuI4EP0VyvM4ZSw7NhdXoIpAmCWTC7dkSV5SQm6DMrbsWDKYfP1KJjiYkCy7Ty61W92nu4+OdM5xGFhuh3NIBI1YJQsDxt3c2tLShLkR5pS7DIfAXUHcSefm2rWqyMW7LVpl0Gtpz6bvIN9Elt7AjZpuO6iuN+dNU8cI7LmNsOlhU7pynsKAcYGZaGkWMh0dnelmbYoartN0z5yqY9pPWuUBEi5jS5cq0t5BZbylLYWIXcNYr9fV9Vk1ShaGhZBpzG6uJ2QJIdba59uK8kRJ+92fVD0gEASkSqLQODdKPucedyd0wbBIE3jP5X2VCxmoaUgfj9PFD63YC96A+VG+7GIWMUpwQN+w6s8NiGXkVTrBIkqoWIZfFmEiFViHjOjEtNkPzShDOzFQCWHCsc6XsvPbWGPwIQFGoHI/HrS0H6dNLd86TTDjfpSEvLz8b3iArSCIYvB0vivrHdrpAY90qn0OxB0wEqScruBWkTXGBPj7NIGcHqoyTMCn2TXlkqAZV+iMfXgHy203enQBXPyfAe0NZxvkAQcptE1xeTfO7u2M+MPV6Kr36MyWs/qoTgVp5QD2nXNDMdrt8oCUBYm2O66GKOtFL9Tu3PcTc/Po3L7M/tzEV/dGjUyBnV1ORs6yS+31uO6E9ts6+DUU2WiyfvHXEIgwmGe1qY+cYLh54pd3Hjz+asDy9/gCi2voXkyGU+PCtKYjw5j9zPpW/7r29Nsfob/u0Nv6pw3DzcK212+083gXzoJNSp2Hv69WePb09rAgjYf1VbIKN1nYH8XoT9QqytnDX7btzvwknb8AEbulosGgV+nLKWHxvZgpC/V0P3d1YyU+XAATWlvtUtrhplLuqOfKGW7XpllzUK9vO43+5ZnTdC6Rc4acZtPso06/V+/uRGaL4gBiN2I+VbmU5G5p8z1AErocmAeJvopSqXRc+yZiDwtcGbCxPAQR4zCNlDwvGWOBmK8YCmIzFtY8SYNa82Up9fs2EnfsLun4ApKSKJtmSZTHQGhMQSm3IjaXzOZCNuMVr1IRmNUVrjJIpbYnSmZdy244BqdhHICCaoSRlwZQjZdx3hqDb7+WjgnPrb3rzmT43J08W/mp+7K+w3+7VkgfjyoHrkq6ADlOOHLJWLt6PtVdO3oZ7cJ3Uo+qAyb7KhJKtkjKvz7oonhScOWjsB3yYsOhoRTcOKyryOetKCl4X9zeUtSlDLR3w3nF1ddqulql+TjqSu4SGd5QHTGQZUyApFKoNtPoDzCjiGKcdCsUwA+SF/YyxFQs2URgAaHkTyVfnvAMmABXz4CBZH526hujlFK2TkAmjtm6gXzCKMTfvnKIS5SfNA/lZx0l3sfEjsTayyPrlK8AQdlCrdSNsPmCHiSSYanUsijZD34swLHkZWPR5AKLkISapwK+/lNRItXSMCFRysSgp+WGfeHMcYpNDO6H06cwuTYXjzX67681neYUICCfeJzm8dWd66ojwBZ74vue9Ij+1qxO3ZT629zXX9St14qmlNC1P5k/W/b6dMjx9j8=</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:11650DF62A713599E05305991F0A0C76</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11650DF62A713599E05305991F0A0C76</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:11650DF458FE3595E05305991F0AFD7C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11650DF458FE3595E05305991F0AFD7C</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>11651BEE3444520FE05305991F0AE96E</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>BDCFEDF8AACE45A5B875973EB77FCEDE</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:11651BEB6F29520DE05305991F0A2520</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11651BEB6F29520DE05305991F0A2520</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>bc8d8670-a420-46f9-af0e-7335976768fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9378e07b-3527-420a-a7df-572e63168c82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c86004b8-0826-40e7-a291-80f3008c325e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Dynamic LASP Test Cases_P2" id="8591f263-d2e8-4514-811d-f17ca9a76145"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">D:\StreamR3_1061N\StrmRnew</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00000 - StreamRenew - DLP - Test Suite Staging" searchProperties="true" id="5e1a9e9e-9e42-4504-9aff-7cc474298234" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b8d6d2d6-6ffc-4459-9b99-afcf9165bf9c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="334c7b7a-9745-4ab9-aec6-0dfb14fb3e32"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="b2060051-1644-4048-8fe4-7a2550c847a0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="106ed04e-dab4-4fb2-a92c-c3ad0271692b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="12f96343-49f9-4816-8aa1-96cb4f716d52"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="6b8d1d4d-c15b-4f67-83bc-1e20241c72ed" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="750b6e2e-c17b-4c09-9a71-ad88f105a18f" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="f326fa97-0e09-49fd-b216-acdecef15989"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="57fbd923-90ac-4139-84a4-60e075604e27"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025239</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB096E30E05305991F0A10A3</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31804F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMpYXNlegymw3ZA+Q9SVlZBkrsSUiyYbk60cy4AAhuczMk0vt1unTi7r7mPtJbLke54gJTElpkcSEu7m0qaWMuNTnmLvETxB3BXRH3sW5a5WB66+vaKVBt6k9WyioVYENdThpWLpTsyy9btsTvQ5r9XoATccOK1KV8xQNCBc+EU3NAmZFB45uVseg6lYst+KUbavxpJXuEOMSW6qUgbYiteBNLRJi5hrGfD4vz+0yZVPDAsA0Hi7ORzBCia+1jpce5YZYa6UPywGCKI5hGdLEODa2dI4D7o7wlPgiZWhlK/jOFjBAw5A6AcfTX1pxFwUDEtL82PEJJRj6Mf7wVXwukIhoUPLiKWVYRMm3TphAAetoIWNoOuSXZmxTOxBoiyHjvs4j31xhDVGIGCIQlW6Hg6b267Cs5VfHzCc8pCzh28c/44NIhmI6Q4HO126tqB0OuCdSrWME3QGBccpxhi5Vsc58iPgqmwgeDlW6ZijEi3PMZYEuuGJnbNLbOS6j0cVTxMXfJGgjOUuQOz9OUWsQDU9uLu7aA3gD75KHeyoewPyxTkGDNnMCm8q5oEjt8rhTlEURLW/AUz6d2jVjzs68Rye64EdnlfQyCzM6Tp/OTtpH9VcY3g1F3Ej5xQBWIuf+jFq3pw1kOjAeClAZeymOM3YPSSexO/89VE+m/aj38hgwkdyKTi0RH+Dh/vQFJuLIu+r2XidvcdKNpt2u9TC6/wBR9uH1DOfxhj3dzr3a/KoPwx4K435dpFBcVdOn6yg+ermGzcKdDf7bsvWbH6WTFwTF+qjKYNAt9WWWfPFzM1MSHOhhrurOVPPhAhGhtdQt1TvcVLY7HLgyh8uzaXetTr9r9myzBpx+owcqNqg1GmYfeE4bdNZNZslih2KHkhArW6rlLsvmZ4IwcTkiAWJ6RlPZ6bj2A2LXF35pQIbyEVDC0ZjK9mxSEsfRPIvfktnEfGHJW/QqwqgWL7TSJRVX5Ip5oUBsuyk3tpryEEE8w0h1blXYXFY2FzIYb36WitgsZ36ZoFT2dqbarGs59YrBcTKLkaJqJDRIY1SeRbM8NAZffi3dhzyXDnvj/Ll969juv3UMpE6AlQJXvrSRzCPaM12ctSNfHK7unUJreC8NsHpZMqCCYbhksv3rs05UgRRF0j33Rtdr0oXuH9x97oyezb8EOP8H4+f/alzm8utN44d4GrupLAwFGd4wu1475ACTLa+1LsQ33yy/ldMsS/PacxzbYBLeUEVgAMsYIZjKpvw+pq+IGAWKcdAELIjvGC/k2xRTEZGR8AVK5Fsp5ccDVp4R4mrlGchXvjh0n9oyKUMn0ELsk3Viua4pxj9udNCFSk+Kr+VnTlnwmbE9WBt2pJ9y4xGYTNVJTb/3b+oCUgmLZd+mbBN8H8A+49vCIsgFFyELapIK9P2fkmrITc2HkKZEDLpaLtgcEjlP8T5D7qfSF5h8DhWLKf7/zVTHeQlAJNdZjnN8tV+46gmQ6cagWRndnTVtp+r12qBe7dkgnzWV5awxgWcXQdli1/oi/irZiNNujbd+Aw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81219</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>750b6e2e-c17b-4c09-9a71-ad88f105a18f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_11008 - StreamRenew - DLP - StreamNotFound - Stream handle owned by another account-404 Not Found_MIGRATED" searchProperties="true" id="6eb9ce9a-95d1-48f3-a183-eaa58206c684"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a stream handle owned by another account.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5b81e5b8-812b-4836-be74-594078882292"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="02d93c4f-1746-41bc-9940-1e96a4108dca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="1023d6e3-c296-47f7-86ac-19ac7cfb600a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b34d7de0-1874-4391-bd27-c778042ce869"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7e02d15d-e2df-4769-8c3e-365ec38fa4ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="208e23a2-60df-4599-8978-793d8e6a7455"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Change STREAM_HANDLE.ACCOUNT_OID" id="cc168b8c-fec5-4ef4-b293-3a264ee2117b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamSetAccountOID(tC.getPropertyValue("streamhandle"),"01") == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="c8bc7a4f-706e-477e-8a9c-30ea217443e3"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);


def streamhandleFULL=tC.getPropertyValue("streamhandleFULL");
streamhandleFULL=streamhandleFULL+"1";
tC.setPropertyValue("streamhandleFULL",streamhandleFULL);
log.info streamhandleFULL

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="5aeca678-6c72-4ed5-8c0e-924c37fdb4fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="8abdbe91-b79d-4dcf-b625-e58f77622d2a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>useroid</con:name><con:value>13D2CFD1E31804F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025239</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:467F56ACBBDF4A649F288CFA4062C0971</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>467F56ACBBDF4A649F288CFA4062C097</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2011/03/13 12:53:11</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B46AEB296E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B46AEB296E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81228</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZc6pME773V1iey1TCJm6VpGpYJKiorC53CKOgCMiAoL/+GzAak5OTc97vImWm6eWZ7md6ep6RvQ/oHkAIJqkfhXVZeGmsWqRLsrTzyHTt5mPToanHldNqPXba9nq9ttdux2026jJCGZRDlNph+tKgSYp6JJlHijEoqkc3e1Tzqdlhlo26BROEPWOVJ7JRL/ZBiHpV1JdGloS9yEY+6oX2HqJe6vR0oIx6WLNnXyE1Xp8vIKuAyauXpnGPIJwnFzowCJwnJ9oTz8QnnWcX9XR/E9pplsD3mC56abzb5nn+lDNPUbIhaJIkCbJLYB0X+Ztfjdfa1Ri6criOLmveDqPQd+zAP9slKAWmXuTWQbCJEj/19n9wTREUWbp+hIXz6FDN8FeD+AhQoftHT59AJsh+RJ5NXZ1pcA0TGDqwbmryS+PXPxXwYmokdojWUbJHX9b/DREMjzCIYug+ouvGruD+3eM32Xp9hk5PDp0gQ/4RjkuWxLYDUX2awLVfjHyEueeielX9eoGuBIPOf6nIM3GPE8MmvsmM4G8gSv+fct2X6uLFsoMMvuqt07qw5m1i1tKlhUtIp0muxfaiG8ovFYR75QuoW6Xf1195eqPVu9Fwvcvgw14Z2IPpcSoEIM6KxUCgCcOSAps9hH2ZOZ3G5iSxnPWbRwFpfPJMtj1eyEtregbW3NLNYfg2D6bLGlzx5xUY2p3mPOYJAF1/yEDKiCaDbHVgzBnnNzldH7CGdBygE6vsovlRkLfD4ZJhvBDwA+d03qkO8otxp7Y1mWXK7tFEb42UiBeVk/Lysaf7PZT7GsJTtcny/zlLdgU7tW8LvmwUa3w6U/iqyLKQnXkenPQNyGUObPDfFoy5ze7g7Xypm5McUNU+EHgu2IojBewkQJki5ym8ZSkFfwYDbjO2sKFRA8GSUzQxF/KFYKnqm5h7hitZp5UUZMuzOFYAqox5TxE10RI0Q1QUEF1khSKspGKr6Eouqwuhhh0IYhGfXambQqnwHVpmFZ2lFzqbLecWlvdPo/34uDLEQOEVidcPki6vGEEVB0BbzBy6n2Hb82gfR7WFyd0ZDWK4BbCfkzgmOCvGLlcMkx4Lml3JjM8yRZYGiopyXq12JdXEfGCZ549c8JzCu3uxEA0wveTCMfj+mFzOB8iesaGigVzYVMZDMXcnVyCKSuY1/pKrkZhromaO+4om5yKoZIKYB2hFj72V5B0dRi0GBtjeF4ZXxVk/xN9D7eic2EPNlvpgtbcoh9E8x2d9ex7lm2UnF9TFYBgtZexmDFSR41SAAZGg3BrOPwdGnMVOYr9L+3C07kd76CU1hYqGu+O5IDs+M9lMxzNWWO/aU8mfMrbrEXLg0FtmB2QZukPKU21XWxCaEPrn1mRozqGfLM7pmFWplt9ha9osM+dCFLTdt/nCHD4UC0c1JlPdnE3PRTE+bDvnIH2bcG+JPlCEzWQM4RQ5DwRp9zmjI7D84m2L+bTWSMjWwEbhAJC2m43oYwJzb9sLCd80RcTkBQqfS/yMl3QgSQ+izAmquu571NSRrMykxoosugFO02kx14LakucEXCnSni3jBd0nlwZwK2dqU+xvVJN9GMzhUh0HhpWCPLbWIUWRUqy+rZV84yglA1w51zl8irhaJgPTnsQDshhaLZI6qG4w0LvAZAqd3hUTb7M87TbLHS7K4u7oLAwQWMYdx2RMsVlNNURNAZ3LeSsU2WS0wNkX8WrvFIKBa1YZRwYnan2VNAtBAMOLDBmALtDiLG4VXqzsa6BQbEyL42ruoUU49ieGmGHSZnd02a5o8q8cKylW+8yxAw9U8JVj4oVjIlgfHuSOQCG2xcdolm84STyobWs06MakOh/tatxDn9ikftCchJ3cGD7MqFPe9rbqbNaVBY9/CNcLj1mlHGmfHRUOdm3J13ZC2GoGJ2WkqKzpE8GJ3MJDjka1sUyFIpOe+0Q3yR64/dLfn89Mkzb3Uz07yqY9RNTJWx1m3Xw7fWsRRCKd2HN7eVT788hZXO6Rr03yJry0UeK+wX7qwNfRS89WW+ik12V5D8tCvY8vRzv9eYwrJb77uK5Ue3E5C6IUhmnjtbQqR7hehgc93+3hm/Oy7nKtFkuzHOi32iTFciLZJKk+CUi2223SPLjOehcUXyDyUbj2y1jlMHu5rH8G6Ox7K2gnMGn84KnMU10ONTx9RCGCRvTS6HA01W4zJOBJsot/hFanzbRAh21yGHS33aiPo3QSThKwTmFyNyA3vw7IGnT82IflFP0+S6AUJ+JgH7M0oJ6O9lMIMzxmJ+Wkiy07bJUAws32sYM/4O6WxBFKn2IvroaZP27j67frjrGO65cKqATNQVwt+M1IT14R/7Yz+tvR/+oeZK5fziw4fWniOxcknz99sKGkwY0KZJdqXjHfVP/NtEtRrd9NiR8QEV+TcYvkHv27uNeHCZ618ThWvUcQLtrBfjo8ZcdjVpWpTZI0kWD3BEWQhA6dDI+LJyPawZC4eSD+ZVC/Yf4S9yb/jC5LvVBP8SnfY0bVq+XfH2mfrHECUlik38n4AD/LyuA/vtycnlPqYfEU/+RR4n7k/Rtfd3Ew5LJD+eGmXJUT9ulzed9PQs+JsFcfN6kouff9nf13sT8Lb+m6QUkxK1ZZCv/8pV52n5eG7ThRFqay0KgE9x2xwpyeYtj7UPrNTTXivr9ZCvTHN8tcGemOB/d246br/1350a8K70BshfwKy0ujwK9vHDzc3HXgd4B/aMLsT034805efxP/LrnL6Vdmv/4P</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>bstreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-03 19:46:48.304</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-02 19:46:48.304</con:value></con:property><con:property><con:name>astreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assert</con:name><con:value>pVbZcuI6EP0VyvOYMpYXNlegymw3ZA+Q9SVlZBkrsSUiyYbk60cy4AAhuczMk0vt1unTi7r7mPtJbLke54gJTElpkcSEu7m0qaWMuNTnmLvETxB3BXRH3sW5a5WB66+vaKVBt6k9WyioVYENdThpWLpTsyy9btsTvQ5r9XoATccOK1KV8xQNCBc+EU3NAmZFB45uVseg6lYst+KUbavxpJXuEOMSW6qUgbYiteBNLRJi5hrGfD4vz+0yZVPDAsA0Hi7ORzBCia+1jpce5YZYa6UPywGCKI5hGdLEODa2dI4D7o7wlPgiZWhlK/jOFjBAw5A6AcfTX1pxFwUDEtL82PEJJRj6Mf7wVXwukIhoUPLiKWVYRMm3TphAAetoIWNoOuSXZmxTOxBoiyHjvs4j31xhDVGIGCIQlW6Hg6b267Cs5VfHzCc8pCzh28c/44NIhmI6Q4HO126tqB0OuCdSrWME3QGBccpxhi5Vsc58iPgqmwgeDlW6ZijEi3PMZYEuuGJnbNLbOS6j0cVTxMXfJGgjOUuQOz9OUWsQDU9uLu7aA3gD75KHeyoewPyxTkGDNnMCm8q5oEjt8rhTlEURLW/AUz6d2jVjzs68Rye64EdnlfQyCzM6Tp/OTtpH9VcY3g1F3Ej5xQBWIuf+jFq3pw1kOjAeClAZeymOM3YPSSexO/89VE+m/aj38hgwkdyKTi0RH+Dh/vQFJuLIu+r2XidvcdKNpt2u9TC6/wBR9uH1DOfxhj3dzr3a/KoPwx4K435dpFBcVdOn6yg+ermGzcKdDf7bsvWbH6WTFwTF+qjKYNAt9WWWfPFzM1MSHOhhrurOVPPhAhGhtdQt1TvcVLY7HLgyh8uzaXetTr9r9myzBpx+owcqNqg1GmYfeE4bdNZNZslih2KHkhArW6rlLsvmZ4IwcTkiAWJ6RlPZ6bj2A2LXF35pQIbyEVDC0ZjK9mxSEsfRPIvfktnEfGHJW/QqwqgWL7TSJRVX5Ip5oUBsuyk3tpryEEE8w0h1blXYXFY2FzIYb36WitgsZ36ZoFT2dqbarGs59YrBcTKLkaJqJDRIY1SeRbM8NAZffi3dhzyXDnvj/Ll969juv3UMpE6AlQJXvrSRzCPaM12ctSNfHK7unUJreC8NsHpZMqCCYbhksv3rs05UgRRF0j33Rtdr0oXuH9x97oyezb8EOP8H4+f/alzm8utN44d4GrupLAwFGd4wu1475ACTLa+1LsQ33yy/ldMsS/PacxzbYBLeUEVgAMsYIZjKpvw+pq+IGAWKcdAELIjvGC/k2xRTEZGR8AVK5Fsp5ccDVp4R4mrlGchXvjh0n9oyKUMn0ELsk3Viua4pxj9udNCFSk+Kr+VnTlnwmbE9WBt2pJ9y4xGYTNVJTb/3b+oCUgmLZd+mbBN8H8A+49vCIsgFFyELapIK9P2fkmrITc2HkKZEDLpaLtgcEjlP8T5D7qfSF5h8DhWLKf7/zVTHeQlAJNdZjnN8tV+46gmQ6cagWRndnTVtp+r12qBe7dkgnzWV5awxgWcXQdli1/oi/irZiNNujbd+Aw==</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-03 19:46:48.304</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-02 19:46:48.304</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>13D2B46AEB096E30E05305991F0A10A3</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>208e23a2-60df-4599-8978-793d8e6a7455</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c8bc7a4f-706e-477e-8a9c-30ea217443e3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_11049 - StreamRenew - DLP - StreamNotActive - StreamRenew attempt after StreamDelete API invocation-403 Forbidden" searchProperties="true" id="4c1afa30-fb68-416a-b826-cf994eb4642b"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a stream handle that is in 'deleted' status.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2f7e6464-8671-4740-a8e9-4940afc55c67"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="56ed1675-e796-4953-8bdb-900451c430d1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="3198bbb0-fb93-4a78-ae07-6b3eabbad006" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="136d4696-d58b-4eb1-9563-e04fd1a8f27c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="18566abd-9a8d-4982-a30b-8e8d7ec9d4f1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="9578fb59-7f88-4a4a-a46f-439b504ec698"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="176c739a-9aaa-4443-aba3-630edff4f140"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="a9d305fe-a7eb-4f14-8fc2-e731d0fdde16"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="984774bb-d12d-4391-aba9-a6587e4d4db1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="b6f96868-0ba2-400f-a0ab-8c32d89f5a9c" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="3a0c97ef-d1c3-4765-9484-88ad5fee3283" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="8ecda26a-dddc-4902-a104-0f875c06f0d2" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB096E30E05305991F0A10A3</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMpYXNlegymw3ZA+Q9SVlZBkrsSUiyYbk60cy4AAhuczMk0vt1unTi7r7mPtJbLke54gJTElpkcSEu7m0qaWMuNTnmLvETxB3BXRH3sW5a5WB66+vaKVBt6k9WyioVYENdThpWLpTsyy9btsTvQ5r9XoATccOK1KV8xQNCBc+EU3NAmZFB45uVseg6lYst+KUbavxpJXuEOMSW6qUgbYiteBNLRJi5hrGfD4vz+0yZVPDAsA0Hi7ORzBCia+1jpce5YZYa6UPywGCKI5hGdLEODa2dI4D7o7wlPgiZWhlK/jOFjBAw5A6AcfTX1pxFwUDEtL82PEJJRj6Mf7wVXwukIhoUPLiKWVYRMm3TphAAetoIWNoOuSXZmxTOxBoiyHjvs4j31xhDVGIGCIQlW6Hg6b267Cs5VfHzCc8pCzh28c/44NIhmI6Q4HO126tqB0OuCdSrWME3QGBccpxhi5Vsc58iPgqmwgeDlW6ZijEi3PMZYEuuGJnbNLbOS6j0cVTxMXfJGgjOUuQOz9OUWsQDU9uLu7aA3gD75KHeyoewPyxTkGDNnMCm8q5oEjt8rhTlEURLW/AUz6d2jVjzs68Rye64EdnlfQyCzM6Tp/OTtpH9VcY3g1F3Ej5xQBWIuf+jFq3pw1kOjAeClAZeymOM3YPSSexO/89VE+m/aj38hgwkdyKTi0RH+Dh/vQFJuLIu+r2XidvcdKNpt2u9TC6/wBR9uH1DOfxhj3dzr3a/KoPwx4K435dpFBcVdOn6yg+ermGzcKdDf7bsvWbH6WTFwTF+qjKYNAt9WWWfPFzM1MSHOhhrurOVPPhAhGhtdQt1TvcVLY7HLgyh8uzaXetTr9r9myzBpx+owcqNqg1GmYfeE4bdNZNZslih2KHkhArW6rlLsvmZ4IwcTkiAWJ6RlPZ6bj2A2LXF35pQIbyEVDC0ZjK9mxSEsfRPIvfktnEfGHJW/QqwqgWL7TSJRVX5Ip5oUBsuyk3tpryEEE8w0h1blXYXFY2FzIYb36WitgsZ36ZoFT2dqbarGs59YrBcTKLkaJqJDRIY1SeRbM8NAZffi3dhzyXDnvj/Ll969juv3UMpE6AlQJXvrSRzCPaM12ctSNfHK7unUJreC8NsHpZMqCCYbhksv3rs05UgRRF0j33Rtdr0oXuH9x97oyezb8EOP8H4+f/alzm8utN44d4GrupLAwFGd4wu1475ACTLa+1LsQ33yy/ldMsS/PacxzbYBLeUEVgAMsYIZjKpvw+pq+IGAWKcdAELIjvGC/k2xRTEZGR8AVK5Fsp5ccDVp4R4mrlGchXvjh0n9oyKUMn0ELsk3Viua4pxj9udNCFSk+Kr+VnTlnwmbE9WBt2pJ9y4xGYTNVJTb/3b+oCUgmLZd+mbBN8H8A+49vCIsgFFyELapIK9P2fkmrITc2HkKZEDLpaLtgcEjlP8T5D7qfSF5h8DhWLKf7/zVTHeQlAJNdZjnN8tV+46gmQ6cagWRndnTVtp+r12qBe7dkgnzWV5awxgWcXQdli1/oi/irZiNNujbd+Aw==</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeleteddBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C7A0845914E05305991F0A33A5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C7A0845914E05305991F0A33A5</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2010/12/19 12:32</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>3136E15E65AB418E91758D5BC6AE5CA5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:3136E15E65AB418E91758D5BC6AE5CA5</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>100</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025239</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31804F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81233</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>176c739a-9aaa-4443-aba3-630edff4f140</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12071 - StreamRenew - DLP - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of suspended cannot be renewed-403 Forbidden" searchProperties="true" id="1daa10de-9486-4f10-940e-95f4c3a83a87" disabled="true"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9b09b5d1-53dc-4bc9-87b0-3db03d8fcc1d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="fa318d56-82b5-4f7b-8e63-e7aa288d450b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="1a306866-cf2c-4549-861d-d230f2f31e42" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="02477c38-b950-423e-bf0e-7a66104e9128"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="669490e6-52a7-4803-9535-78b231f8ebff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to suspended" id="668d13aa-9ffa-4daf-ab96-ed12ad7e1714"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert b.rightsTokenSetStatusSuspended(tC.getPropertyValue("rightstokenid")) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="7c8bd37b-b1c6-4730-a412-0ee4a55d62ef"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6b2fb57b-a639-46a3-a2ad-cb1835e1b009"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="dc31415a-0b0c-4b43-bc7a-0aa5808d1066" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="7a017891-9b48-440e-837c-42f7fc076bca" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="6510c301-2ee4-470b-bec9-66fca639314e" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D65DDC4349180E0401F0A07994A11</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D656FCB24E2C1E0401F0A059964F8</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81263</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7c8bd37b-b1c6-4730-a412-0ee4a55d62ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12072 - StreamRenew - DLP - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of other cannot be renewed-403 Forbidden" searchProperties="true" id="e7b97e58-a64a-4964-a716-7e031836cabc" disabled="true"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b84744a6-7d8d-4779-8db7-7b4876af0786"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="48ce6ebc-024a-4453-a359-c4bfa4a7fcf1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="09684d21-8e89-4172-a433-eff0c56ffe0e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="6ecc5461-d533-420b-b5aa-4d0d51e4cac1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a9080d04-1cb9-4adf-992b-78c1dcef005d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to other" id="dc544c42-4750-47ff-aca2-0b2882df6552"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

//assert b.rightsTokenSetStatusOther(tC.getPropertyValue("rightstokenid")) == 1;



def rightstokenid=tC.getPropertyValue("rightstokenid")
rightstokenid=rightstokenid+"1";
tC.setPropertyValue("rightstokenid",rightstokenid);</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="cc82b194-f298-4805-b6fe-c27669bcf923"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="fa72500e-6ae1-4c74-a207-54f18d55d322"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="5e981383-88ed-4a10-8527-0a47cb1dc14e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="1dc6e89c-6176-4c2c-b914-4200b433dddb" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="7c435a8b-7d50-4f55-89b3-85d99a3bd5f0" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150316_02356</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:1165B0420DD47CCBE05307991F0AB7D6</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1165AFF9D1AE4B9BE05305991F0A9059</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11651BEB6F22520DE05305991F0A2520</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11651C663CEA0626E05307991F0A8853</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMfINMJ7ADOFyygnkAqTN9KUj5AWU2JKxZCD99ZUMuFySHNrz5NF69e23F+3ulcBx5AQtISCVlLPSJo6YCHJpw8hSFnAsqAgYjkEEkgTj1nAQOGUrwPsrRqnfaRg/pjXfr/uua06ntm16M88ycd0Dc+ZUPXCm4BHXUapCZNBnQmImG4Zj2RXTck27OrHqgeUGll227dp3o/QVUqGwlUrZMnakNqJhLKRMAoTW63V57ZZ5OkeOZdnoaTgYkwXE2GhebT3KDaXNnT4ph0AgikiZ8BhdoSOdq1AEYzpnWGYp7GyF79mykFVHSicUdP7JKO5C2Gcznh/bmHFGCY7oT6zjMwS54GGpFc15SuUiftcJ29LAJmyISWyPfTLQMbULgY4YpgKbYoHtHdYIZpACI1B6HPUbxqfLspZfnaSYiRlPY3F8/DM+wFYQ8QRCU+zd2lG7HPCNSDWvgAR9RqJM0BXc6mJNMAGxyyaQy6FK9ynM6GZAhSrQjdDs0CG9k+M2Gh06ByH/JkEHydmCfMVRBs1p2+p9efK9n5P6t5fpukZf2D+j3gO1n/1GTuBQORcUqd0eT4qyKKLtjc2Ds7LFKAml//NLkjk+subdb0n9Nnqcs5GLVq37dHD3tCDzL+GkZ7N/p73Piwd0O57bMloPvzEFcrO5/Zyy67i+fG5zsNrDTdztfH+ZidSnyGd3K2sSIu9G9ON+5RG+Pz/1W9HKfqnejzvjmnt3sxw9uC3oZGxQ/+wN8bPlhnfLudsdjNrEv28/todfZ8uENwp3Dvgfy/ZvfpxNn4HI/VGXQb9T6qksYflxM9MSGpqzXDVIdPMREpg0mvqW7h1BptodDQOVw+3ZtqsVu12tuu1u3ao61a5Vca1avW73rJbvV9x9k9myOKHY5mxGtS3dcrdl8zFBEgcCWAipueKZ6nTC+ACxgyUu9dlIPQLOBEy4as+sPvNDz6/xV1hUNsSphVWPeGtulG65vGN3aWsmIT1qybZz1JJHQGhCQfdtXdZC1bWQKhRLvMpkZJdXuMwgU5091U02cDy/ggSNkwg0URTzMIugnCySPDBIbL+OiYnIpaPuJH9s77p1+m8fAaUTUq0gtC/XoLIIZ7PFCSp7R84crr45g/bwrSyk+l2pcMqUki2T41+/q0SXR1EinUFrfL8nXej+wd0f7fEP+y8BBv8XQOXj/Cb6ICboNB2FoXBFD8zuFwc1glTTau6LaYnLy3K2WmV5+dR0c04VPNKJRJaDxkAy1VZfJ/wFGCpQ0EUzrCB+YryQH1PM5IKNJZYQq3ov5ccLlpYxCL209NU73Vy6ER2ZVKGTsJFvydqRWrg04w93MhIQrafE9+qz5mn4O2NvYB3YUX6qnUVSNtcnPb9e36kLwhUsVZ2Xp4fgbwG8ZfxYWAS54CJVQU0zCe//KemW2jAwITxjst8xcsFhm895ytcEgt9KZzD5JClWS/rfu6VJ8xIgoBZSQXN8vSEE+gmw+cGo2Bk9mxbX3etqz7ErjtXJp0VlOy0cJSiCcsSueSY+lxzE6bTGm78A</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:11651C663CE90626E05307991F0A8853</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11651C663CE90626E05307991F0A8853</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11651BEB6F21520DE05305991F0A2520</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:11651BEB6F21520DE05305991F0A2520</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>1165AFF9D1AE4B9BE05305991F0A90591</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>1165B0420DD47CCBE05307991F0AB7D6</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11651BEB6F29520DE05305991F0A2520</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81264</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:11651BEB6F29520DE05305991F0A2520</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1dc6e89c-6176-4c2c-b914-4200b433dddb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cc82b194-f298-4805-b6fe-c27669bcf923</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12073 - StreamRenew - DLP - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of pending cannot be renewed-403 Forbidden" searchProperties="true" id="5c51e8e5-b0fa-4220-9a62-dcb4fe979b23" disabled="true"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="83a786bf-205a-40b1-ac04-d6bd3696d263"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="80fafffa-11ec-4361-ac89-2f6eda98a7db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="56132a84-c841-42fe-bfa1-3fd89c884740" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="51a93bc7-a2de-467d-8456-e21312b009ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="b540ce74-e5ea-4dcd-a7ce-35b25776e5e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to pending" id="137b4abf-7fe0-4dd8-8c48-a22a3e143757"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert b.rightsTokenSetStatusPending(tC.getPropertyValue("rightstokenid")) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="cb26eb64-810d-43ca-9451-083b77155935"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="92adb2f5-8c47-41ea-bbfc-8d3256c7c318"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="0eda989c-6f0f-402f-9b38-772c6771a96f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="7daf0fba-ac9f-4fbc-8488-c82f615fbd5a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="bca79656-8358-419d-82bd-1dd95f924539" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D1966B80AE395E0401F0A059949BA</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D65833B829C85E0401F0A07994A15</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81265</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cb26eb64-810d-43ca-9451-083b77155935</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12080 - StreamRenew - DLP - AssetLogicalIDNotActive - ASSET_LP_MAP status of 'deleted'-200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="82d30322-234a-43cb-a83a-0a792a60fc06" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID whos ASSET_LP_MAP status is 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5cfd0cba-5e1e-430a-86f9-f2226bbe2920"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
//tC.setPropertyValue("expectErrTypeStreamRenew","LOGICAL_ASSET_NOT_ACTIVE");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="66aa4279-01c7-449d-9a3b-71a5d5e3ca10"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="fc345725-c9cd-46f7-a68e-e14688a2123c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d4b3c861-1e15-45bb-ae1a-2a82f0ac8537"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="f2a41bae-03f7-47f1-ba44-81d7f9c43b5a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'deleted'" id="02131bfc-e841-43c2-aa38-e7efb6f0f70c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusDeleted(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="2b00d801-ea50-48bf-bce9-eca6939343ab"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="b1740c7d-c39f-477f-9be0-569149f4a58f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="8ebd3a2c-278c-4660-abc6-f0bc52ac5ed0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="90aa90a4-fd6c-4d0f-890f-4c189c4fd620"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="be16a45f-ac09-4fe3-9d7d-b98b1405669d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="dd9a73ed-68ce-4835-8433-defab258c5cb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="571c99bd-cc6c-4d6d-86a2-1e43acade857"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D1941991B5EC7E0401F0A0799496A</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D65A5ABEACC80E0401F0A05996502</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2b00d801-ea50-48bf-bce9-eca6939343ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12081 - StreamRenew - DLP - AssetLogicalIDNotActive - ASSET_LP_MAP status of 'suspended'-200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="08d45bb9-63c8-4d75-b3cb-7b67e61af003" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID whos ASSET_LP_MAP status is 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="79d16f0e-fd83-4d5d-8c58-776655fb81c6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
//tC.setPropertyValue("expectErrTypeStreamRenew","LOGICAL_ASSET_NOT_ACTIVE");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="ff28afe0-6646-4261-bd2f-58c1d2e4c21d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="f082bed4-3fed-4f92-982f-0f4b67425843"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="68e9ede9-fc75-4c95-ae03-d0fe68e861be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a7e8e7cb-713b-4d10-a5e0-f01f8eea1e92"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'suspended'" id="448be70c-4338-4ae8-a35e-3a781bf18eed"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusSuspended(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="4664c25e-e1b2-40f7-ac86-245786ec3977"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f47e2bac-bd3a-4688-9553-ed5e6c64078f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="cf52340e-d01e-4c63-b149-9338522f916f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="06adaa65-de76-4f0e-af58-668746b32aae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="61a434d7-f304-40b2-a79d-5e22e02e130d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="5bc34765-109b-4f22-b71b-1f36c60c16ce"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="ea4bdf65-5652-478e-8699-e4c84f3df86d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D19412693D281E0401F0A07994972</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D1940CDD80B60E0401F0A059949A8</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4664c25e-e1b2-40f7-ac86-245786ec3977</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12082 - StreamRenew - DLP - AssetLogicalIDNotActive - ASSET_LP_MAP status of 'other'-200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7dde1ed6-7434-40ef-ad11-e698f10060ef" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID whos ASSET_LP_MAP status is 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="fe709ce3-e5f5-4521-95e2-64dcec62924c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
//tC.setPropertyValue("expectErrTypeStreamRenew","LOGICAL_ASSET_NOT_ACTIVE");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="e990f781-0bc9-4272-a1df-ba3b45fab95a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="bf3d2272-4b3a-4394-b665-2c15f919715b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4df48b9d-d871-442f-936d-446aeaa0d941"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="91328855-ed64-4165-87fc-2536088722a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'other'" id="8dcc0e11-37ad-4367-ac0a-5f8677616819"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusOther(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="5db44403-00bf-4011-bdbf-b2e3cf7fa8b7"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="04403165-101c-420d-b651-fec8bb1f106f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="a4b621b3-29a1-41c4-82e2-ffc322737a28"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="d050631d-1575-4e5c-a48c-b3c3f2861781"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="b2fab6cf-c06a-4996-a070-67e18da7866b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="bdc692bd-06bf-4720-a90c-7a3d09eb0cee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="22964dac-cf97-431f-a191-84db26bb2e72"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D19682FC560D3E0401F0A0799497A</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D65A58307F3DBE0401F0A05996500</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5db44403-00bf-4011-bdbf-b2e3cf7fa8b7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12087 - StreamRenew - DLP - ContentIDNotActive - MD_BASIC CID status of 'other'-403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="659f3da4-c41f-4ced-8d8e-907a8490f35b" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="33799e5e-a9a3-43e8-b967-3a30daee16d3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","CID_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="25cd0181-5454-480e-9069-4b5bdfb2e54f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="ed796959-ebb4-4dad-bae7-c74e88aaf107"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="902b9faf-b3d1-496a-a6dc-537e27ac995a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="f8d97a60-3392-4328-a920-684d8f3fd7a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'other'" id="612b05c9-abb6-4c74-a3ed-0f0c50437550"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusOther(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="30c97a88-9eb0-4b2d-b6a6-2654eb3d7dd3"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="bae05dcf-d24e-4223-b938-0ed214142e4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="38581b2c-05ec-40bb-bee3-3198011daee4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="b7847dcb-5f4a-4820-b54e-6dbd1316a52b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="ad1f734f-2efc-467a-b6c4-e40fc16d861b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="65beb3a7-9df3-47db-88b8-31122586ef0c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="31f002cf-5001-4469-b6c9-476c410eeeaa"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>CID_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZc6pME773V1iey1TCJm6VpGpYJKiorC53CKOgCMiAoL/+GzAak5OTc97vImWm6eWZ7md6ep6RvQ/oHkAIJqkfhXVZeGmsWqRLsrTzyHTt5mPToanHldNqPXba9nq9ttdux2026jJCGZRDlNph+tKgSYp6JJlHijEoqkc3e1Tzqdlhlo26BROEPWOVJ7JRL/ZBiHpV1JdGloS9yEY+6oX2HqJe6vR0oIx6WLNnXyE1Xp8vIKuAyauXpnGPIJwnFzowCJwnJ9oTz8QnnWcX9XR/E9pplsD3mC56abzb5nn+lDNPUbIhaJIkCbJLYB0X+Ztfjdfa1Ri6criOLmveDqPQd+zAP9slKAWmXuTWQbCJEj/19n9wTREUWbp+hIXz6FDN8FeD+AhQoftHT59AJsh+RJ5NXZ1pcA0TGDqwbmryS+PXPxXwYmokdojWUbJHX9b/DREMjzCIYug+ouvGruD+3eM32Xp9hk5PDp0gQ/4RjkuWxLYDUX2awLVfjHyEueeielX9eoGuBIPOf6nIM3GPE8MmvsmM4G8gSv+fct2X6uLFsoMMvuqt07qw5m1i1tKlhUtIp0muxfaiG8ovFYR75QuoW6Xf1195eqPVu9Fwvcvgw14Z2IPpcSoEIM6KxUCgCcOSAps9hH2ZOZ3G5iSxnPWbRwFpfPJMtj1eyEtregbW3NLNYfg2D6bLGlzx5xUY2p3mPOYJAF1/yEDKiCaDbHVgzBnnNzldH7CGdBygE6vsovlRkLfD4ZJhvBDwA+d03qkO8otxp7Y1mWXK7tFEb42UiBeVk/Lysaf7PZT7GsJTtcny/zlLdgU7tW8LvmwUa3w6U/iqyLKQnXkenPQNyGUObPDfFoy5ze7g7Xypm5McUNU+EHgu2IojBewkQJki5ym8ZSkFfwYDbjO2sKFRA8GSUzQxF/KFYKnqm5h7hitZp5UUZMuzOFYAqox5TxE10RI0Q1QUEF1khSKspGKr6Eouqwuhhh0IYhGfXambQqnwHVpmFZ2lFzqbLecWlvdPo/34uDLEQOEVidcPki6vGEEVB0BbzBy6n2Hb82gfR7WFyd0ZDWK4BbCfkzgmOCvGLlcMkx4Lml3JjM8yRZYGiopyXq12JdXEfGCZ549c8JzCu3uxEA0wveTCMfj+mFzOB8iesaGigVzYVMZDMXcnVyCKSuY1/pKrkZhromaO+4om5yKoZIKYB2hFj72V5B0dRi0GBtjeF4ZXxVk/xN9D7eic2EPNlvpgtbcoh9E8x2d9ex7lm2UnF9TFYBgtZexmDFSR41SAAZGg3BrOPwdGnMVOYr9L+3C07kd76CU1hYqGu+O5IDs+M9lMxzNWWO/aU8mfMrbrEXLg0FtmB2QZukPKU21XWxCaEPrn1mRozqGfLM7pmFWplt9ha9osM+dCFLTdt/nCHD4UC0c1JlPdnE3PRTE+bDvnIH2bcG+JPlCEzWQM4RQ5DwRp9zmjI7D84m2L+bTWSMjWwEbhAJC2m43oYwJzb9sLCd80RcTkBQqfS/yMl3QgSQ+izAmquu571NSRrMykxoosugFO02kx14LakucEXCnSni3jBd0nlwZwK2dqU+xvVJN9GMzhUh0HhpWCPLbWIUWRUqy+rZV84yglA1w51zl8irhaJgPTnsQDshhaLZI6qG4w0LvAZAqd3hUTb7M87TbLHS7K4u7oLAwQWMYdx2RMsVlNNURNAZ3LeSsU2WS0wNkX8WrvFIKBa1YZRwYnan2VNAtBAMOLDBmALtDiLG4VXqzsa6BQbEyL42ruoUU49ieGmGHSZnd02a5o8q8cKylW+8yxAw9U8JVj4oVjIlgfHuSOQCG2xcdolm84STyobWs06MakOh/tatxDn9ikftCchJ3cGD7MqFPe9rbqbNaVBY9/CNcLj1mlHGmfHRUOdm3J13ZC2GoGJ2WkqKzpE8GJ3MJDjka1sUyFIpOe+0Q3yR64/dLfn89Mkzb3Uz07yqY9RNTJWx1m3Xw7fWsRRCKd2HN7eVT788hZXO6Rr03yJry0UeK+wX7qwNfRS89WW+ik12V5D8tCvY8vRzv9eYwrJb77uK5Ue3E5C6IUhmnjtbQqR7hehgc93+3hm/Oy7nKtFkuzHOi32iTFciLZJKk+CUi2223SPLjOehcUXyDyUbj2y1jlMHu5rH8G6Ox7K2gnMGn84KnMU10ONTx9RCGCRvTS6HA01W4zJOBJsot/hFanzbRAh21yGHS33aiPo3QSThKwTmFyNyA3vw7IGnT82IflFP0+S6AUJ+JgH7M0oJ6O9lMIMzxmJ+Wkiy07bJUAws32sYM/4O6WxBFKn2IvroaZP27j67frjrGO65cKqATNQVwt+M1IT14R/7Yz+tvR/+oeZK5fziw4fWniOxcknz99sKGkwY0KZJdqXjHfVP/NtEtRrd9NiR8QEV+TcYvkHv27uNeHCZ618ThWvUcQLtrBfjo8ZcdjVpWpTZI0kWD3BEWQhA6dDI+LJyPawZC4eSD+ZVC/Yf4S9yb/jC5LvVBP8SnfY0bVq+XfH2mfrHECUlik38n4AD/LyuA/vtycnlPqYfEU/+RR4n7k/Rtfd3Ew5LJD+eGmXJUT9ulzed9PQs+JsFcfN6kouff9nf13sT8Lb+m6QUkxK1ZZCv/8pV52n5eG7ThRFqay0KgE9x2xwpyeYtj7UPrNTTXivr9ZCvTHN8tcGemOB/d246br/1350a8K70BshfwKy0ujwK9vHDzc3HXgd4B/aMLsT034805efxP/LrnL6Vdmv/4P</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6D65A5AC23CC80E0401F0A05996502</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6D194486434DB5E0401F0A07994978</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>30c97a88-9eb0-4b2d-b6a6-2654eb3d7dd3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14801 - StreamRenew - DLP - AccountNotActive - ACCOUNT.STATUS of deleted-403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="83df2843-2ed8-4dab-a030-b2e8073334ae"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b73fe3c4-8f2f-4540-b45d-a2cbc4caab72"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f9dfad4d-0533-431d-83cb-c6bd0fcf1f26"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="79e7991c-6f6c-4bb3-9616-653096436dec" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="53a75696-b0a2-48c2-89f1-990ffae01b20"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="bf2d2fa5-195a-495f-b744-66d9d7ab2bb9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to deleted" id="66e87ce1-08de-4f5f-85dc-963f1ca299ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="491ff6e7-5d8c-4333-960d-be1a5dcf408c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="25821199-fd38-4779-b858-ad576135e41f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="80ff3b1e-eb6e-4020-9333-07b15057b953"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="3c032648-23fa-48b6-bcca-7f1943c53ce9" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025239</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB096E30E05305991F0A10A3</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31804F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMpYXNlegymw3ZA+Q9SVlZBkrsSUiyYbk60cy4AAhuczMk0vt1unTi7r7mPtJbLke54gJTElpkcSEu7m0qaWMuNTnmLvETxB3BXRH3sW5a5WB66+vaKVBt6k9WyioVYENdThpWLpTsyy9btsTvQ5r9XoATccOK1KV8xQNCBc+EU3NAmZFB45uVseg6lYst+KUbavxpJXuEOMSW6qUgbYiteBNLRJi5hrGfD4vz+0yZVPDAsA0Hi7ORzBCia+1jpce5YZYa6UPywGCKI5hGdLEODa2dI4D7o7wlPgiZWhlK/jOFjBAw5A6AcfTX1pxFwUDEtL82PEJJRj6Mf7wVXwukIhoUPLiKWVYRMm3TphAAetoIWNoOuSXZmxTOxBoiyHjvs4j31xhDVGIGCIQlW6Hg6b267Cs5VfHzCc8pCzh28c/44NIhmI6Q4HO126tqB0OuCdSrWME3QGBccpxhi5Vsc58iPgqmwgeDlW6ZijEi3PMZYEuuGJnbNLbOS6j0cVTxMXfJGgjOUuQOz9OUWsQDU9uLu7aA3gD75KHeyoewPyxTkGDNnMCm8q5oEjt8rhTlEURLW/AUz6d2jVjzs68Rye64EdnlfQyCzM6Tp/OTtpH9VcY3g1F3Ej5xQBWIuf+jFq3pw1kOjAeClAZeymOM3YPSSexO/89VE+m/aj38hgwkdyKTi0RH+Dh/vQFJuLIu+r2XidvcdKNpt2u9TC6/wBR9uH1DOfxhj3dzr3a/KoPwx4K435dpFBcVdOn6yg+ermGzcKdDf7bsvWbH6WTFwTF+qjKYNAt9WWWfPFzM1MSHOhhrurOVPPhAhGhtdQt1TvcVLY7HLgyh8uzaXetTr9r9myzBpx+owcqNqg1GmYfeE4bdNZNZslih2KHkhArW6rlLsvmZ4IwcTkiAWJ6RlPZ6bj2A2LXF35pQIbyEVDC0ZjK9mxSEsfRPIvfktnEfGHJW/QqwqgWL7TSJRVX5Ip5oUBsuyk3tpryEEE8w0h1blXYXFY2FzIYb36WitgsZ36ZoFT2dqbarGs59YrBcTKLkaJqJDRIY1SeRbM8NAZffi3dhzyXDnvj/Ll969juv3UMpE6AlQJXvrSRzCPaM12ctSNfHK7unUJreC8NsHpZMqCCYbhksv3rs05UgRRF0j33Rtdr0oXuH9x97oyezb8EOP8H4+f/alzm8utN44d4GrupLAwFGd4wu1475ACTLa+1LsQ33yy/ldMsS/PacxzbYBLeUEVgAMsYIZjKpvw+pq+IGAWKcdAELIjvGC/k2xRTEZGR8AVK5Fsp5ccDVp4R4mrlGchXvjh0n9oyKUMn0ELsk3Viua4pxj9udNCFSk+Kr+VnTlnwmbE9WBt2pJ9y4xGYTNVJTb/3b+oCUgmLZd+mbBN8H8A+49vCIsgFFyELapIK9P2fkmrITc2HkKZEDLpaLtgcEjlP8T5D7qfSF5h8DhWLKf7/zVTHeQlAJNdZjnN8tV+46gmQ6cagWRndnTVtp+r12qBe7dkgnzWV5awxgWcXQdli1/oi/irZiNNujbd+Aw==</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AEFF8DBF892B466B9DB0495D0431BF29</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C7A0915914E05305991F0A33A5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C7A0915914E05305991F0A33A5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:AEFF8DBF892B466B9DB0495D0431BF29</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81297</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB106E30E05305991F0A10A3</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>491ff6e7-5d8c-4333-960d-be1a5dcf408c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14806 - StreamRenew - DLP - AccountNotActive - ACCOUNT.STATUS of blocked:tou-403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7f0f892f-a47a-41a2-a659-0627ee07c67c"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4b9fc2e3-dcbe-4063-81e8-8907ab248465"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f8dada4d-eb4a-49cb-bbd9-fae93f7e6053"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="7f9d82b7-7718-425f-b98b-e509cb6fafc9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="be20b00c-46d3-4a6f-b3e9-209111666649"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="9d27c8c3-47b1-40b6-b1bb-92a35696fdf5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked:tou" id="db680b2b-30d3-40b2-948d-42ebd0388f39"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "blocked:tou");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="ea87e0cd-3c2d-45f4-87ea-4c043c57c764"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="10a8d43f-50fa-4377-b7c3-aebbb683c4ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="2f6de345-84e8-4e88-a9e8-ecd4b94a5a20"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="7d1cb928-a231-4cc2-8c6a-00265a3af131" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025239</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB096E30E05305991F0A10A3</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31804F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMpYXNlegymw3ZA+Q9SVlZBkrsSUiyYbk60cy4AAhuczMk0vt1unTi7r7mPtJbLke54gJTElpkcSEu7m0qaWMuNTnmLvETxB3BXRH3sW5a5WB66+vaKVBt6k9WyioVYENdThpWLpTsyy9btsTvQ5r9XoATccOK1KV8xQNCBc+EU3NAmZFB45uVseg6lYst+KUbavxpJXuEOMSW6qUgbYiteBNLRJi5hrGfD4vz+0yZVPDAsA0Hi7ORzBCia+1jpce5YZYa6UPywGCKI5hGdLEODa2dI4D7o7wlPgiZWhlK/jOFjBAw5A6AcfTX1pxFwUDEtL82PEJJRj6Mf7wVXwukIhoUPLiKWVYRMm3TphAAetoIWNoOuSXZmxTOxBoiyHjvs4j31xhDVGIGCIQlW6Hg6b267Cs5VfHzCc8pCzh28c/44NIhmI6Q4HO126tqB0OuCdSrWME3QGBccpxhi5Vsc58iPgqmwgeDlW6ZijEi3PMZYEuuGJnbNLbOS6j0cVTxMXfJGgjOUuQOz9OUWsQDU9uLu7aA3gD75KHeyoewPyxTkGDNnMCm8q5oEjt8rhTlEURLW/AUz6d2jVjzs68Rye64EdnlfQyCzM6Tp/OTtpH9VcY3g1F3Ej5xQBWIuf+jFq3pw1kOjAeClAZeymOM3YPSSexO/89VE+m/aj38hgwkdyKTi0RH+Dh/vQFJuLIu+r2XidvcdKNpt2u9TC6/wBR9uH1DOfxhj3dzr3a/KoPwx4K435dpFBcVdOn6yg+ermGzcKdDf7bsvWbH6WTFwTF+qjKYNAt9WWWfPFzM1MSHOhhrurOVPPhAhGhtdQt1TvcVLY7HLgyh8uzaXetTr9r9myzBpx+owcqNqg1GmYfeE4bdNZNZslih2KHkhArW6rlLsvmZ4IwcTkiAWJ6RlPZ6bj2A2LXF35pQIbyEVDC0ZjK9mxSEsfRPIvfktnEfGHJW/QqwqgWL7TSJRVX5Ip5oUBsuyk3tpryEEE8w0h1blXYXFY2FzIYb36WitgsZ36ZoFT2dqbarGs59YrBcTKLkaJqJDRIY1SeRbM8NAZffi3dhzyXDnvj/Ll969juv3UMpE6AlQJXvrSRzCPaM12ctSNfHK7unUJreC8NsHpZMqCCYbhksv3rs05UgRRF0j33Rtdr0oXuH9x97oyezb8EOP8H4+f/alzm8utN44d4GrupLAwFGd4wu1475ACTLa+1LsQ33yy/ldMsS/PacxzbYBLeUEVgAMsYIZjKpvw+pq+IGAWKcdAELIjvGC/k2xRTEZGR8AVK5Fsp5ccDVp4R4mrlGchXvjh0n9oyKUMn0ELsk3Viua4pxj9udNCFSk+Kr+VnTlnwmbE9WBt2pJ9y4xGYTNVJTb/3b+oCUgmLZd+mbBN8H8A+49vCIsgFFyELapIK9P2fkmrITc2HkKZEDLpaLtgcEjlP8T5D7qfSF5h8DhWLKf7/zVTHeQlAJNdZjnN8tV+46gmQ6cagWRndnTVtp+r12qBe7dkgnzWV5awxgWcXQdli1/oi/irZiNNujbd+Aw==</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DFD2D74663E24A95924B1D9F34EB75CD</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF594AB9E05305991F0A8037</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D29822AF594AB9E05305991F0A8037</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:DFD2D74663E24A95924B1D9F34EB75CD</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ea87e0cd-3c2d-45f4-87ea-4c043c57c764</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14807 - StreamRenew - DLP - AccountNotActive - ACCOUNT.STATUS of blocked-403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c7cf5fac-79e7-4061-8ca2-a933fd6724b3"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6927b362-f50f-4ff7-bfe4-66276dc351c2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="da453f63-153a-464a-8f5e-d71c67181b75"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="79ab92d9-079a-4d2e-be1c-ea36c64f637f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="1c23d374-05e6-4f49-a00d-099f013d4c45"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="eb39a658-b3cf-4200-ace6-0afd0fff1742"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked" id="f60d861f-392d-4d91-83bc-f6658b05ca8b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "blocked");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="993329cf-3d8c-4fd8-9cac-728611316294"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="a28920db-b1eb-4d1e-bb2f-092735401648"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="595b1a4c-0924-488d-a0c0-77e39d0a5dcf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="2fc003da-1057-477f-8be1-f5e0a8967ac9" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81303</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025239</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB096E30E05305991F0A10A3</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31804F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvOYMpYXNlegymw3ZA+Q9SVlZBkrsSUiyYbk60cy4AAhuczMk0vt1unTi7r7mPtJbLke54gJTElpkcSEu7m0qaWMuNTnmLvETxB3BXRH3sW5a5WB66+vaKVBt6k9WyioVYENdThpWLpTsyy9btsTvQ5r9XoATccOK1KV8xQNCBc+EU3NAmZFB45uVseg6lYst+KUbavxpJXuEOMSW6qUgbYiteBNLRJi5hrGfD4vz+0yZVPDAsA0Hi7ORzBCia+1jpce5YZYa6UPywGCKI5hGdLEODa2dI4D7o7wlPgiZWhlK/jOFjBAw5A6AcfTX1pxFwUDEtL82PEJJRj6Mf7wVXwukIhoUPLiKWVYRMm3TphAAetoIWNoOuSXZmxTOxBoiyHjvs4j31xhDVGIGCIQlW6Hg6b267Cs5VfHzCc8pCzh28c/44NIhmI6Q4HO126tqB0OuCdSrWME3QGBccpxhi5Vsc58iPgqmwgeDlW6ZijEi3PMZYEuuGJnbNLbOS6j0cVTxMXfJGgjOUuQOz9OUWsQDU9uLu7aA3gD75KHeyoewPyxTkGDNnMCm8q5oEjt8rhTlEURLW/AUz6d2jVjzs68Rye64EdnlfQyCzM6Tp/OTtpH9VcY3g1F3Ej5xQBWIuf+jFq3pw1kOjAeClAZeymOM3YPSSexO/89VE+m/aj38hgwkdyKTi0RH+Dh/vQFJuLIu+r2XidvcdKNpt2u9TC6/wBR9uH1DOfxhj3dzr3a/KoPwx4K435dpFBcVdOn6yg+ermGzcKdDf7bsvWbH6WTFwTF+qjKYNAt9WWWfPFzM1MSHOhhrurOVPPhAhGhtdQt1TvcVLY7HLgyh8uzaXetTr9r9myzBpx+owcqNqg1GmYfeE4bdNZNZslih2KHkhArW6rlLsvmZ4IwcTkiAWJ6RlPZ6bj2A2LXF35pQIbyEVDC0ZjK9mxSEsfRPIvfktnEfGHJW/QqwqgWL7TSJRVX5Ip5oUBsuyk3tpryEEE8w0h1blXYXFY2FzIYb36WitgsZ36ZoFT2dqbarGs59YrBcTKLkaJqJDRIY1SeRbM8NAZffi3dhzyXDnvj/Ll969juv3UMpE6AlQJXvrSRzCPaM12ctSNfHK7unUJreC8NsHpZMqCCYbhksv3rs05UgRRF0j33Rtdr0oXuH9x97oyezb8EOP8H4+f/alzm8utN44d4GrupLAwFGd4wu1475ACTLa+1LsQ33yy/ldMsS/PacxzbYBLeUEVgAMsYIZjKpvw+pq+IGAWKcdAELIjvGC/k2xRTEZGR8AVK5Fsp5ccDVp4R4mrlGchXvjh0n9oyKUMn0ELsk3Viua4pxj9udNCFSk+Kr+VnTlnwmbE9WBt2pJ9y4xGYTNVJTb/3b+oCUgmLZd+mbBN8H8A+49vCIsgFFyELapIK9P2fkmrITc2HkKZEDLpaLtgcEjlP8T5D7qfSF5h8DhWLKf7/zVTHeQlAJNdZjnN8tV+46gmQ6cagWRndnTVtp+r12qBe7dkgnzWV5awxgWcXQdli1/oi/irZiNNujbd+Aw==</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C1DAFAF09DEE4DBABE953AEBB56ED225</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C7A09E5914E05305991F0A33A5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB086E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E31704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB106E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C7A09E5914E05305991F0A33A5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:C1DAFAF09DEE4DBABE953AEBB56ED225</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993329cf-3d8c-4fd8-9cac-728611316294</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14841 - StreamRenew - DLP - UserNotActive - ACCOUNT_USER.STATUS of deleted-403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="634cc64f-a10e-48ec-ae54-52ebf91bba6e"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c3537385-c843-4c8f-8ac1-a46229fe2013"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","UserNotActive");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8bb65426-798e-4d75-9495-00675d2f027d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="148c5970-6a22-4d33-8a06-e8ee61f2b2d2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="61feb45e-d7bb-4372-84f5-5b9d622424af"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="915520b4-bf86-46d9-8792-82889bd2e602"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="56661965-8c28-48be-a557-61df5bc14adb"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="8fcadcf5-fe8c-4889-b78a-e52a45538cb5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to deleted" id="4c39bc36-4205-4f37-92a5-9a0537fc1852"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="161627bb-d1dd-4be1-806d-5c544f392f0f"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="63b51619-cd07-4b10-a4bc-240f646bf464"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="332c22a5-7829-406a-893e-fea3d4425dba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="ff1f2c31-66f2-4dd9-be23-a9232286185a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025239</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF694AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3C6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZRc9o4EP4rjPvYMbKxIcYTmDEB7phCmgJJk750hLQGHbbsWDKQ/PqTDLhASI72njxar779tPtptdcCx1HND4SATLKEVzZxxIVfWFtGnnE/wYIJn+MYhC+JPwlGQ79WtXy832JUBt2W8bPhObbnUNe0LOfKdC3qmN6MgDmjdiOs49Cq4SvlKkQOAy4k5rJl1Cy7blquaTemVsOvu77rVOuu98OoPEAmFLZyqVrGjtRGtIyFlKmP0Hq9rq6dapLNUc2ybPQ4Gk7IAmJstK+3JyoCZe2dP6lSIBBFpEqSGF2jI59rKvwJm3Ms8wx2seh7sSxkNZHyoYLNPxnlXqADHibF8gbzhDOCI/aKdX5GIBcJrQTRPMmYXMTvHsK2NLAJG2IS2+WfDHRM7UKgI4aZwKZYYHuHNYYQMuAEKvfjQcv4dFnViq3TDHMRJlksjpe/xwf4CqIkBWqK/bF21C4HPJOp9jUQf8BJlAu2glst1hQTELtqArkcqnKXQcg2QyaUQDdCs0OH9E6W22x02RyE/JMCHRRnC/KAoxzad0Q0AuX+Uu/UluvX79NZ/oS+TL/QHmkVBA6dC0NZ2u3yRJSliLY7njbw+b7vhtbLuMOaj2vvaTxa/u3xf0R4Hz/S29F0dDXk95+Xd4+3i4WcfJ06chYgl16lHcSexq+38eNg8nnw4H0DTund9MfoYfgwyFZ/QT2D6VUHTZ560mrW3Zcb7zvcWOGCgnU7nuevi1n6La+PoRPPSJ/0v3lL+76Tvv546NkL9JR6/e9f6Kq/Gbt2n0T2ldsqj3PA/9i2v/OTfPYPELlfahkMupW+qhKWHzczbWHUDAtXP9XNR0jg0mjrXbp3+Llqd4z6qobbte10ax23EfQ6TqfRc6yeVXeserNp963AtgJn32S2LE4o3iQ8ZDqWbrlb2XxMkMS+UJmGzFwluep0wvgAsYslrgz4WF2ChAuYJqo92/PlyiLx8pmv1qEt44xuEi8mmLpG5TaRX/nXLAglZMdNuXnUlMdAWMpAd24tbKGULaRKxjNe5TKyqytc5ZCr3p7pNuvXXK+OBIvTCDRVFCc0j6CaLtIiNUhsvzUTE1FYx71pcd3ePdjpv30OlA9l2kHos3RA1RHOvC7O/iBvDtw4+wrt4YOcMn2zVEJlxsiWyfGvXzrRAilF0h0Gk7s96dL3N/b+vJn8tP8QYPh/AVQ93u5EH+QEnZajDERX7CDsfnRQj5BqW+29mJ6xXX2u5qtVXujHdR2UKXikC4msGpoAyVVjfZkmS+CoREEXvWIl8ZPgpf2YYi4XfCKxhFjpvVIsLxhbJiD02DJQN3Vz6Ux0FFKlTsJGnrPdRGrk0ow/nMqIT7SfMt+pzzrJ6K+KncE6iKPOqaYWyfhcr/QL9vKOLkiiYJnqvUl2CH4O4FzwY2OZ5JKLVIKa5RLe/1PRTbVlYEKSnMtB1ygMh42+4ClfUvB/Ob2BKd6Scrhk/z1dmqyQAAE1kgpW4OsZwddXgM8PHotd0NP3ounVakG/4blBp3n4XnhKHmVSjti135jfWg7ydKrx9r8=</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">64338CE242174F738F491928F1B0984D</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C7A1A45914E05305991F0A33A5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C7A1A45914E05305991F0A33A5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:64338CE242174F738F491928F1B0984D</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81305</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF704AB9E05305991F0A8037</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>161627bb-d1dd-4be1-806d-5c544f392f0f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14845 - StreamRenew - DLP - UserNotActive - ACCOUNT_USER.STATUS of blocked-403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6ca15f40-2dbf-40d6-88c6-75d4db9175d5"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="fda0a168-cedd-4d2b-b4a7-b729253ba01e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","UserNotActive");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="5de2c822-97f9-4672-8b46-94defc0bec83"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="3597142b-e12f-4b4c-a1a3-a259a1f15e7e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="ffcfe1f9-2f6d-4160-a0e3-a91911326a19"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="1dc723a8-8f03-40ab-8a62-131baf1a21c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="f057127d-1ed8-4ea4-91ee-11f51b3c8e4d"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="375f13c8-f670-40d5-9501-c07811a3d72d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to blocked" id="def342d4-4e56-45c0-aacf-be37baf1729b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "blocked");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="b142aecb-70e7-429e-bff2-0fbe7208b766"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="b3a495fb-f542-4069-ae5b-dd7dea37189b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="fa01dc40-b95a-451c-8bc6-4a0b4113dd3e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c8e5e1b1-a385-4007-b6df-66f1c12fb703" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81309</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025429</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF694AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3C6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZRc9o4EP4rjPvYMbKxIcYTmDEB7phCmgJJk750hLQGHbbsWDKQ/PqTDLhASI72njxar779tPtptdcCx1HND4SATLKEVzZxxIVfWFtGnnE/wYIJn+MYhC+JPwlGQ79WtXy832JUBt2W8bPhObbnUNe0LOfKdC3qmN6MgDmjdiOs49Cq4SvlKkQOAy4k5rJl1Cy7blquaTemVsOvu77rVOuu98OoPEAmFLZyqVrGjtRGtIyFlKmP0Hq9rq6dapLNUc2ybPQ4Gk7IAmJstK+3JyoCZe2dP6lSIBBFpEqSGF2jI59rKvwJm3Ms8wx2seh7sSxkNZHyoYLNPxnlXqADHibF8gbzhDOCI/aKdX5GIBcJrQTRPMmYXMTvHsK2NLAJG2IS2+WfDHRM7UKgI4aZwKZYYHuHNYYQMuAEKvfjQcv4dFnViq3TDHMRJlksjpe/xwf4CqIkBWqK/bF21C4HPJOp9jUQf8BJlAu2glst1hQTELtqArkcqnKXQcg2QyaUQDdCs0OH9E6W22x02RyE/JMCHRRnC/KAoxzad0Q0AuX+Uu/UluvX79NZ/oS+TL/QHmkVBA6dC0NZ2u3yRJSliLY7njbw+b7vhtbLuMOaj2vvaTxa/u3xf0R4Hz/S29F0dDXk95+Xd4+3i4WcfJ06chYgl16lHcSexq+38eNg8nnw4H0DTund9MfoYfgwyFZ/QT2D6VUHTZ560mrW3Zcb7zvcWOGCgnU7nuevi1n6La+PoRPPSJ/0v3lL+76Tvv546NkL9JR6/e9f6Kq/Gbt2n0T2ldsqj3PA/9i2v/OTfPYPELlfahkMupW+qhKWHzczbWHUDAtXP9XNR0jg0mjrXbp3+Llqd4z6qobbte10ax23EfQ6TqfRc6yeVXeserNp963AtgJn32S2LE4o3iQ8ZDqWbrlb2XxMkMS+UJmGzFwluep0wvgAsYslrgz4WF2ChAuYJqo92/PlyiLx8pmv1qEt44xuEi8mmLpG5TaRX/nXLAglZMdNuXnUlMdAWMpAd24tbKGULaRKxjNe5TKyqytc5ZCr3p7pNuvXXK+OBIvTCDRVFCc0j6CaLtIiNUhsvzUTE1FYx71pcd3ePdjpv30OlA9l2kHos3RA1RHOvC7O/iBvDtw4+wrt4YOcMn2zVEJlxsiWyfGvXzrRAilF0h0Gk7s96dL3N/b+vJn8tP8QYPh/AVQ93u5EH+QEnZajDERX7CDsfnRQj5BqW+29mJ6xXX2u5qtVXujHdR2UKXikC4msGpoAyVVjfZkmS+CoREEXvWIl8ZPgpf2YYi4XfCKxhFjpvVIsLxhbJiD02DJQN3Vz6Ux0FFKlTsJGnrPdRGrk0ow/nMqIT7SfMt+pzzrJ6K+KncE6iKPOqaYWyfhcr/QL9vKOLkiiYJnqvUl2CH4O4FzwY2OZ5JKLVIKa5RLe/1PRTbVlYEKSnMtB1ygMh42+4ClfUvB/Ob2BKd6Scrhk/z1dmqyQAAE1kgpW4OsZwddXgM8PHotd0NP3ounVakG/4blBp3n4XnhKHmVSjti135jfWg7ydKrx9r8=</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E6832F1CF6994914A8E7F2F8184DBA07</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E50204F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>UserNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD1E50204F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:E6832F1CF6994914A8E7F2F8184DBA07</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b142aecb-70e7-429e-bff2-0fbe7208b766</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Dynamic LASP Customer Service Test Cases_P1" id="264f1e74-ba4f-4f23-89f7-cf97144d6a08"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00000 - StreamRenew - DLPCS - Test Suite Staging" searchProperties="true" id="711f7606-06d1-40b5-bd5f-699bcfe6e406"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d6593c0e-f5f3-4886-a06f-a3f01f2fee12"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="cf178e6b-e5dc-451a-84eb-6bb7e72de87f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="ecfad7b0-f14f-476f-8a2c-9ac6acadd6fa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="9f0028f3-7303-43f5-b4c3-1ee553be32b3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="66f6fa00-91c1-4fbd-b4a1-f3ab93aa310e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="f4b310b8-4e2a-418c-ba51-08b99a607701" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="709f9358-8511-49b3-beb2-3a67a3140946" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150420_080747</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1429BE81A0C91D9CE05307991F0A9F62</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1429BE425946799BE05307991F0ABA89</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbdcto8EH0Vxr3sGP9gA/YEZgg0qVOSppgmLTcdRV5AwZaIJAPp01cy4AAh+Wi/K9B6dfbsj3b3TKAsdcOOEMAlYbSyylIqwkLaMnJOQ4YEESFFGYhQ4jDuXPdDt2qHaHvFqES9lvGrHrjNcQPZJq77ddOreTUTNRLP9LxaEniOi+tJQ6kKkUNEhURUtgzXdnzT9kzXHjpeWPND36s2a87IqNwBFwpbqVRtY0NqJVrGVMp5aFnL5bK6rFUZn1iubTvWj+t+jKeQIaN9tvaoMMTbG31cTQBDmuIqZpl1Zu3pnCUijMmEIplz2NhK3rJlW3ZgKZ1EkMkHo7wLSUTHrDh2EWWUYJSS30jH5xrklCWVTjphnMhp9qYTjq2BTVhhEzse/WBY+9ROBNpjyAUyxRQ5G6wBjIEDxVD5PohaxofTslZcHXJExZjxTOwf/44P0AWkbA6JKbZubaidDngkUu0zwGFEcZoLsoAbXaxzhEFssgn4dKjKLYcxWfWJUAW6EpqdtUvv4LiORo9MQMh/SdBOctYgdyjNoe1dZ9/kIO302QQu0ZcZi65+XsDAfriJWgWBXeVCUKZ2fTwoyrKI1jdY3+IjiKZuMKjPboIfyXD04zO9cjBZ2iKeXfVHMxwhxNnqji3Ifez2nv3v54C+jkgSfybNydWXQTejQyd5HHXx58nSdR5Ggzggi8v4kt/c9bD/PI6Y/W21/Dj7Ur8/v3Q/3o5BiOHjw/MT7ceEB/LxEU+bPn6004ek49+NngbkN2nwe/9nP7tk9Ua9eT0nG3cP+O/Ltm8+zh8eAcvtUZdB1KtcqCwh+X4z0xKSmONCNZzr5iMkUGm09S3dO8JctTuShCqH67PjucH5J8/1A89vBOqv7dds9ce5sDvnnWawbTJrFgcUu4yOibalW+66bN4niLNQAE2AmwuWq04njHcQe0iiSkQH6hEwKmDIVHt2cgLjmQiayEmpQl+O8ZNnu3JpVG6Y/Eq/8s5YAt/vyY29njwATOYEdOPWdS1UYQupYvGEFrlMneoCVSnkqrVz3WVD12v6liDZPAXN1MpYkqdQnU/nRWQssf51TYRFIR18Ghav7U2/Dr9tQ6B0EqIVhPblHFQa4chw8baOvHK4fnQIbeE7eUL0w1LxlJzgNZP9Ty9louujrJFevxPfbkmXun9x91c3/uX8I0D//wKofLy+ab0TE+swHaWhZEF2zG43BzWDVNdqb4vpCTnVp2q+WORF/agRZHEFb+lEWrZrxYBz1Vefh2wG1CpRrJOGWEn8wHgp36eYyymNJZKQqXqvFMcTtpZYdTgFHamHujp1JdozqUInYSWPybqp2rg043eXMhxirafEt+pnyXjykrEjWDt2lJ9qaZGETvRJD7DnN+oCMwVLVOtlfBf8GMAx4/vCMsglF6kK6iGX8PaXiu6pLQNhzHIqo55RCHb7fMFTPs8hfFF6BVOMknK3JP+9XJqkKAEMaiMVpMDXK0KonwCd7MyKjdHX46LpdOxu0+kF3d1xEVzU3TIoe+zar8SvJTtxOqzx9h8=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1429BE425945799BE05307991F0ABA89</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1429BE425945799BE05307991F0ABA89</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZc6pME773V1iey1TCJm6VpGpYJKiorC53CKOgCMiAoL/+GzAak5OTc97vImWm6eWZ7md6ep6RvQ/oHkAIJqkfhXVZeGmsWqRLsrTzyHTt5mPToanHldNqPXba9nq9ttdux2026jJCGZRDlNph+tKgSYp6JJlHijEoqkc3e1Tzqdlhlo26BROEPWOVJ7JRL/ZBiHpV1JdGloS9yEY+6oX2HqJe6vR0oIx6WLNnXyE1Xp8vIKuAyauXpnGPIJwnFzowCJwnJ9oTz8QnnWcX9XR/E9pplsD3mC56abzb5nn+lDNPUbIhaJIkCbJLYB0X+Ztfjdfa1Ri6criOLmveDqPQd+zAP9slKAWmXuTWQbCJEj/19n9wTREUWbp+hIXz6FDN8FeD+AhQoftHT59AJsh+RJ5NXZ1pcA0TGDqwbmryS+PXPxXwYmokdojWUbJHX9b/DREMjzCIYug+ouvGruD+3eM32Xp9hk5PDp0gQ/4RjkuWxLYDUX2awLVfjHyEueeielX9eoGuBIPOf6nIM3GPE8MmvsmM4G8gSv+fct2X6uLFsoMMvuqt07qw5m1i1tKlhUtIp0muxfaiG8ovFYR75QuoW6Xf1195eqPVu9Fwvcvgw14Z2IPpcSoEIM6KxUCgCcOSAps9hH2ZOZ3G5iSxnPWbRwFpfPJMtj1eyEtregbW3NLNYfg2D6bLGlzx5xUY2p3mPOYJAF1/yEDKiCaDbHVgzBnnNzldH7CGdBygE6vsovlRkLfD4ZJhvBDwA+d03qkO8otxp7Y1mWXK7tFEb42UiBeVk/Lysaf7PZT7GsJTtcny/zlLdgU7tW8LvmwUa3w6U/iqyLKQnXkenPQNyGUObPDfFoy5ze7g7Xypm5McUNU+EHgu2IojBewkQJki5ym8ZSkFfwYDbjO2sKFRA8GSUzQxF/KFYKnqm5h7hitZp5UUZMuzOFYAqox5TxE10RI0Q1QUEF1khSKspGKr6Eouqwuhhh0IYhGfXambQqnwHVpmFZ2lFzqbLecWlvdPo/34uDLEQOEVidcPki6vGEEVB0BbzBy6n2Hb82gfR7WFyd0ZDWK4BbCfkzgmOCvGLlcMkx4Lml3JjM8yRZYGiopyXq12JdXEfGCZ549c8JzCu3uxEA0wveTCMfj+mFzOB8iesaGigVzYVMZDMXcnVyCKSuY1/pKrkZhromaO+4om5yKoZIKYB2hFj72V5B0dRi0GBtjeF4ZXxVk/xN9D7eic2EPNlvpgtbcoh9E8x2d9ex7lm2UnF9TFYBgtZexmDFSR41SAAZGg3BrOPwdGnMVOYr9L+3C07kd76CU1hYqGu+O5IDs+M9lMxzNWWO/aU8mfMrbrEXLg0FtmB2QZukPKU21XWxCaEPrn1mRozqGfLM7pmFWplt9ha9osM+dCFLTdt/nCHD4UC0c1JlPdnE3PRTE+bDvnIH2bcG+JPlCEzWQM4RQ5DwRp9zmjI7D84m2L+bTWSMjWwEbhAJC2m43oYwJzb9sLCd80RcTkBQqfS/yMl3QgSQ+izAmquu571NSRrMykxoosugFO02kx14LakucEXCnSni3jBd0nlwZwK2dqU+xvVJN9GMzhUh0HhpWCPLbWIUWRUqy+rZV84yglA1w51zl8irhaJgPTnsQDshhaLZI6qG4w0LvAZAqd3hUTb7M87TbLHS7K4u7oLAwQWMYdx2RMsVlNNURNAZ3LeSsU2WS0wNkX8WrvFIKBa1YZRwYnan2VNAtBAMOLDBmALtDiLG4VXqzsa6BQbEyL42ruoUU49ieGmGHSZnd02a5o8q8cKylW+8yxAw9U8JVj4oVjIlgfHuSOQCG2xcdolm84STyobWs06MakOh/tatxDn9ikftCchJ3cGD7MqFPe9rbqbNaVBY9/CNcLj1mlHGmfHRUOdm3J13ZC2GoGJ2WkqKzpE8GJ3MJDjka1sUyFIpOe+0Q3yR64/dLfn89Mkzb3Uz07yqY9RNTJWx1m3Xw7fWsRRCKd2HN7eVT788hZXO6Rr03yJry0UeK+wX7qwNfRS89WW+ik12V5D8tCvY8vRzv9eYwrJb77uK5Ue3E5C6IUhmnjtbQqR7hehgc93+3hm/Oy7nKtFkuzHOi32iTFciLZJKk+CUi2223SPLjOehcUXyDyUbj2y1jlMHu5rH8G6Ox7K2gnMGn84KnMU10ONTx9RCGCRvTS6HA01W4zJOBJsot/hFanzbRAh21yGHS33aiPo3QSThKwTmFyNyA3vw7IGnT82IflFP0+S6AUJ+JgH7M0oJ6O9lMIMzxmJ+Wkiy07bJUAws32sYM/4O6WxBFKn2IvroaZP27j67frjrGO65cKqATNQVwt+M1IT14R/7Yz+tvR/+oeZK5fziw4fWniOxcknz99sKGkwY0KZJdqXjHfVP/NtEtRrd9NiR8QEV+TcYvkHv27uNeHCZ618ThWvUcQLtrBfjo8ZcdjVpWpTZI0kWD3BEWQhA6dDI+LJyPawZC4eSD+ZVC/Yf4S9yb/jC5LvVBP8SnfY0bVq+XfH2mfrHECUlik38n4AD/LyuA/vtycnlPqYfEU/+RR4n7k/Rtfd3Ew5LJD+eGmXJUT9ulzed9PQs+JsFcfN6kouff9nf13sT8Lb+m6QUkxK1ZZCv/8pV52n5eG7ThRFqay0KgE9x2xwpyeYtj7UPrNTTXivr9ZCvTHN8tcGemOB/d246br/1350a8K70BshfwKy0ujwK9vHDzc3HXgd4B/aMLsT034805efxP/LrnL6Vdmv/4P</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1429BE81A0C81D9CE05307991F0A9F62</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1429BE81A0C81D9CE05307991F0A9F62</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1429BE81A0D01D9CE05307991F0A9F62</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81313</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1429BE81A0D01D9CE05307991F0A9F62</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_21001 - StreamRenew - DLPCS - StreamNotFound - Stream handle does not exist in DB - 404 Not Found_MIGRATED" searchProperties="true" id="ce9d2fd5-a5fe-47a4-a39d-9485d719d85f"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a nonexistent stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="bd26774b-b302-4be0-b3b1-d8e8b9406436"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="aa9ce948-3510-4030-829d-0221b739eaa4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="26b14332-0681-4856-aacd-807e6fd72848" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4d7ec9fe-dfe0-4fdd-9315-ee5ab6fe20ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Create nonexistent stream handle" id="86e0fe34-ea09-4dc3-b728-754ec5e61093"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new generalUtils.generalUtils(log);

String x = a.randomHexString(40);
String b = tP.getPropertyValue("urnstream") + x;

tC.setPropertyValue("streamhandleFULL",b);

this.log.info "a[$a] b[$b] x[$x]";</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="c3b2eb54-b30d-450c-8190-04d04faa688a"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="9f4a7af3-4b65-44c1-b20c-168bb5ad006a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="ac96135c-3cd8-442a-a583-dfa0ceb0e122" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:testStep type="groovy" name="Generate another request if necessary" id="9d63d62c-8188-4b97-8e3f-c207894269e9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Create nonexistent stream handle");
}</script></con:config></con:testStep><con:properties><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>3</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZRc9o4EP4rjPvYMbKxIcYTmDEB7phCmgJJk750hLQGHbbsWDKQ/PqTDLhASI72njxar779tPtptdcCx1HND4SATLKEVzZxxIVfWFtGnnE/wYIJn+MYhC+JPwlGQ79WtXy832JUBt2W8bPhObbnUNe0LOfKdC3qmN6MgDmjdiOs49Cq4SvlKkQOAy4k5rJl1Cy7blquaTemVsOvu77rVOuu98OoPEAmFLZyqVrGjtRGtIyFlKmP0Hq9rq6dapLNUc2ybPQ4Gk7IAmJstK+3JyoCZe2dP6lSIBBFpEqSGF2jI59rKvwJm3Ms8wx2seh7sSxkNZHyoYLNPxnlXqADHibF8gbzhDOCI/aKdX5GIBcJrQTRPMmYXMTvHsK2NLAJG2IS2+WfDHRM7UKgI4aZwKZYYHuHNYYQMuAEKvfjQcv4dFnViq3TDHMRJlksjpe/xwf4CqIkBWqK/bF21C4HPJOp9jUQf8BJlAu2glst1hQTELtqArkcqnKXQcg2QyaUQDdCs0OH9E6W22x02RyE/JMCHRRnC/KAoxzad0Q0AuX+Uu/UluvX79NZ/oS+TL/QHmkVBA6dC0NZ2u3yRJSliLY7njbw+b7vhtbLuMOaj2vvaTxa/u3xf0R4Hz/S29F0dDXk95+Xd4+3i4WcfJ06chYgl16lHcSexq+38eNg8nnw4H0DTund9MfoYfgwyFZ/QT2D6VUHTZ560mrW3Zcb7zvcWOGCgnU7nuevi1n6La+PoRPPSJ/0v3lL+76Tvv546NkL9JR6/e9f6Kq/Gbt2n0T2ldsqj3PA/9i2v/OTfPYPELlfahkMupW+qhKWHzczbWHUDAtXP9XNR0jg0mjrXbp3+Llqd4z6qobbte10ax23EfQ6TqfRc6yeVXeserNp963AtgJn32S2LE4o3iQ8ZDqWbrlb2XxMkMS+UJmGzFwluep0wvgAsYslrgz4WF2ChAuYJqo92/PlyiLx8pmv1qEt44xuEi8mmLpG5TaRX/nXLAglZMdNuXnUlMdAWMpAd24tbKGULaRKxjNe5TKyqytc5ZCr3p7pNuvXXK+OBIvTCDRVFCc0j6CaLtIiNUhsvzUTE1FYx71pcd3ePdjpv30OlA9l2kHos3RA1RHOvC7O/iBvDtw4+wrt4YOcMn2zVEJlxsiWyfGvXzrRAilF0h0Gk7s96dL3N/b+vJn8tP8QYPh/AVQ93u5EH+QEnZajDERX7CDsfnRQj5BqW+29mJ6xXX2u5qtVXujHdR2UKXikC4msGpoAyVVjfZkmS+CoREEXvWIl8ZPgpf2YYi4XfCKxhFjpvVIsLxhbJiD02DJQN3Vz6Ux0FFKlTsJGnrPdRGrk0ow/nMqIT7SfMt+pzzrJ6K+KncE6iKPOqaYWyfhcr/QL9vKOLkiiYJnqvUl2CH4O4FzwY2OZ5JKLVIKa5RLe/1PRTbVlYEKSnMtB1ygMh42+4ClfUvB/Ob2BKd6Scrhk/z1dmqyQAAE1kgpW4OsZwddXgM8PHotd0NP3ounVakG/4blBp3n4XnhKHmVSjti135jfWg7ydKrx9r8=</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C7A2DC5914E05305991F0A33A5</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>100</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>bstreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025429</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:32FFBB5F9CF749644CFAAAA344AA71EFEE482D88</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF694AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3C6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>25</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81315</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C7A2DC5914E05305991F0A33A5</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4d7ec9fe-dfe0-4fdd-9315-ee5ab6fe20ac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3b2eb54-b30d-450c-8190-04d04faa688a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_21008 - StreamRenew - DLPCS - StreamNotFound - Stream handle owned by another account - 404 Not Found_MIGRATED" searchProperties="true" id="ec81611f-2f04-447a-8ec2-e96e1d05b111"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a stream handle owned by another account.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d25e3fb9-cf7a-45be-b432-cc78285455d6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9d1e2761-46a1-48f3-9d87-4abd9e5c9835"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9431956a-a56b-4ada-9ea8-fe15bb5b6b03" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="2a03d3a2-09c3-4420-a9b3-cb04e2132474"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a423c3f1-523d-4437-9ffc-cde84ac55a4d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Change STREAM_HANDLE.ACCOUNT_OID" id="8b060902-0e7b-4466-9096-980f399f8d42"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamSetAccountOID(tC.getPropertyValue("streamhandle"),"01") == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="7004e1a4-a139-49ca-8042-d42607f19973"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="447b284a-fcf8-430f-994a-1468a36705c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="518d98c6-5eeb-46d9-bc75-98bd3c71dc4f" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>367DB79D5E91425DBB05B3BCF3E50AC5</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZRc9o4EP4rjPvYMbKxIcYTmDEB7phCmgJJk750hLQGHbbsWDKQ/PqTDLhASI72njxar779tPtptdcCx1HND4SATLKEVzZxxIVfWFtGnnE/wYIJn+MYhC+JPwlGQ79WtXy832JUBt2W8bPhObbnUNe0LOfKdC3qmN6MgDmjdiOs49Cq4SvlKkQOAy4k5rJl1Cy7blquaTemVsOvu77rVOuu98OoPEAmFLZyqVrGjtRGtIyFlKmP0Hq9rq6dapLNUc2ybPQ4Gk7IAmJstK+3JyoCZe2dP6lSIBBFpEqSGF2jI59rKvwJm3Ms8wx2seh7sSxkNZHyoYLNPxnlXqADHibF8gbzhDOCI/aKdX5GIBcJrQTRPMmYXMTvHsK2NLAJG2IS2+WfDHRM7UKgI4aZwKZYYHuHNYYQMuAEKvfjQcv4dFnViq3TDHMRJlksjpe/xwf4CqIkBWqK/bF21C4HPJOp9jUQf8BJlAu2glst1hQTELtqArkcqnKXQcg2QyaUQDdCs0OH9E6W22x02RyE/JMCHRRnC/KAoxzad0Q0AuX+Uu/UluvX79NZ/oS+TL/QHmkVBA6dC0NZ2u3yRJSliLY7njbw+b7vhtbLuMOaj2vvaTxa/u3xf0R4Hz/S29F0dDXk95+Xd4+3i4WcfJ06chYgl16lHcSexq+38eNg8nnw4H0DTund9MfoYfgwyFZ/QT2D6VUHTZ560mrW3Zcb7zvcWOGCgnU7nuevi1n6La+PoRPPSJ/0v3lL+76Tvv546NkL9JR6/e9f6Kq/Gbt2n0T2ldsqj3PA/9i2v/OTfPYPELlfahkMupW+qhKWHzczbWHUDAtXP9XNR0jg0mjrXbp3+Llqd4z6qobbte10ax23EfQ6TqfRc6yeVXeserNp963AtgJn32S2LE4o3iQ8ZDqWbrlb2XxMkMS+UJmGzFwluep0wvgAsYslrgz4WF2ChAuYJqo92/PlyiLx8pmv1qEt44xuEi8mmLpG5TaRX/nXLAglZMdNuXnUlMdAWMpAd24tbKGULaRKxjNe5TKyqytc5ZCr3p7pNuvXXK+OBIvTCDRVFCc0j6CaLtIiNUhsvzUTE1FYx71pcd3ePdjpv30OlA9l2kHos3RA1RHOvC7O/iBvDtw4+wrt4YOcMn2zVEJlxsiWyfGvXzrRAilF0h0Gk7s96dL3N/b+vJn8tP8QYPh/AVQ93u5EH+QEnZajDERX7CDsfnRQj5BqW+29mJ6xXX2u5qtVXujHdR2UKXikC4msGpoAyVVjfZkmS+CoREEXvWIl8ZPgpf2YYi4XfCKxhFjpvVIsLxhbJiD02DJQN3Vz6Ux0FFKlTsJGnrPdRGrk0ow/nMqIT7SfMt+pzzrJ6K+KncE6iKPOqaYWyfhcr/QL9vKOLkiiYJnqvUl2CH4O4FzwY2OZ5JKLVIKa5RLe/1PRTbVlYEKSnMtB1ygMh42+4ClfUvB/Ob2BKd6Scrhk/z1dmqyQAAE1kgpW4OsZwddXgM8PHotd0NP3ounVakG/4blBp3n4XnhKHmVSjti135jfWg7ydKrx9r8=</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2DF5E693A5D94E05307991F0A13B0</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-02 19:46:48.304</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-03 19:46:48.304</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-03 19:46:48.304</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-02 19:46:48.304</con:value></con:property><con:property><con:name>bstreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025429</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:367DB79D5E91425DBB05B3BCF3E50AC5</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF694AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3C6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2DF5E693A5D94E05307991F0A13B0</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2011/03/13 12:53:11</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81322</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822AF704AB9E05305991F0A8037</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7004e1a4-a139-49ca-8042-d42607f19973</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_21049 - StreamRenew - DLPCS - StreamNotActive - StreamRenew attempt after StreamDelete API invocation - 403 Forbidden_FLAKY" searchProperties="true" id="817ee429-0f6a-440d-8528-0443f9599f70"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a stream handle that is in 'deleted' status.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="06cf25d3-3acb-45c4-bde5-e57d9223606c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f697e74f-d5a7-4658-9894-edca8134c8ca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="75b2fb5a-dedf-4986-a3a2-57082a2fd9d8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="8c6b2761-6fb1-4b0a-bd14-537cb0421667"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="0ec1463f-dc45-406f-8e74-20dfae03d615"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="5f94bb78-fbdc-4ddc-b260-bea57c3a093b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="7e007659-b525-4997-b439-4b4a627d3a7c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="639e6719-41eb-4363-a0c0-262cbc54be5a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b77f4cd8-c6d8-4c58-9838-0924d9c14b8c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="a7ac2a73-2480-422e-9491-ba9eaf4bae41" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="77236a1c-c2af-4f47-b784-00cbd07773be" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f8a09d15-3308-47f6-ad80-b811e1528be3" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF694AB9E05305991F0A8037</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZRc9o4EP4rjPvYMbKxIcYTmDEB7phCmgJJk750hLQGHbbsWDKQ/PqTDLhASI72njxar779tPtptdcCx1HND4SATLKEVzZxxIVfWFtGnnE/wYIJn+MYhC+JPwlGQ79WtXy832JUBt2W8bPhObbnUNe0LOfKdC3qmN6MgDmjdiOs49Cq4SvlKkQOAy4k5rJl1Cy7blquaTemVsOvu77rVOuu98OoPEAmFLZyqVrGjtRGtIyFlKmP0Hq9rq6dapLNUc2ybPQ4Gk7IAmJstK+3JyoCZe2dP6lSIBBFpEqSGF2jI59rKvwJm3Ms8wx2seh7sSxkNZHyoYLNPxnlXqADHibF8gbzhDOCI/aKdX5GIBcJrQTRPMmYXMTvHsK2NLAJG2IS2+WfDHRM7UKgI4aZwKZYYHuHNYYQMuAEKvfjQcv4dFnViq3TDHMRJlksjpe/xwf4CqIkBWqK/bF21C4HPJOp9jUQf8BJlAu2glst1hQTELtqArkcqnKXQcg2QyaUQDdCs0OH9E6W22x02RyE/JMCHRRnC/KAoxzad0Q0AuX+Uu/UluvX79NZ/oS+TL/QHmkVBA6dC0NZ2u3yRJSliLY7njbw+b7vhtbLuMOaj2vvaTxa/u3xf0R4Hz/S29F0dDXk95+Xd4+3i4WcfJ06chYgl16lHcSexq+38eNg8nnw4H0DTund9MfoYfgwyFZ/QT2D6VUHTZ560mrW3Zcb7zvcWOGCgnU7nuevi1n6La+PoRPPSJ/0v3lL+76Tvv546NkL9JR6/e9f6Kq/Gbt2n0T2ldsqj3PA/9i2v/OTfPYPELlfahkMupW+qhKWHzczbWHUDAtXP9XNR0jg0mjrXbp3+Llqd4z6qobbte10ax23EfQ6TqfRc6yeVXeserNp963AtgJn32S2LE4o3iQ8ZDqWbrlb2XxMkMS+UJmGzFwluep0wvgAsYslrgz4WF2ChAuYJqo92/PlyiLx8pmv1qEt44xuEi8mmLpG5TaRX/nXLAglZMdNuXnUlMdAWMpAd24tbKGULaRKxjNe5TKyqytc5ZCr3p7pNuvXXK+OBIvTCDRVFCc0j6CaLtIiNUhsvzUTE1FYx71pcd3ePdjpv30OlA9l2kHos3RA1RHOvC7O/iBvDtw4+wrt4YOcMn2zVEJlxsiWyfGvXzrRAilF0h0Gk7s96dL3N/b+vJn8tP8QYPh/AVQ93u5EH+QEnZajDERX7CDsfnRQj5BqW+29mJ6xXX2u5qtVXujHdR2UKXikC4msGpoAyVVjfZkmS+CoREEXvWIl8ZPgpf2YYi4XfCKxhFjpvVIsLxhbJiD02DJQN3Vz6Ux0FFKlTsJGnrPdRGrk0ow/nMqIT7SfMt+pzzrJ6K+KncE6iKPOqaYWyfhcr/QL9vKOLkiiYJnqvUl2CH4O4FzwY2OZ5JKLVIKa5RLe/1PRTbVlYEKSnMtB1ygMh42+4ClfUvB/Ob2BKd6Scrhk/z1dmqyQAAE1kgpW4OsZwddXgM8PHotd0NP3ounVakG/4blBp3n4XnhKHmVSjti135jfWg7ydKrx9r8=</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeleteddBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2CFD1E64B04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD1E64B04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2010/12/19 12:32</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>0B8ACBE8EBF946EAA9F50A2CB5AB2FF3</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:0B8ACBE8EBF946EAA9F50A2CB5AB2FF3</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>100</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025429</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3C6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81327</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822AF704AB9E05305991F0A8037</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7e007659-b525-4997-b439-4b4a627d3a7c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22050 - StreamRenew - DLPCS - Stream renewal allowed for 'full' userId - 200 OK_MIGRATED" searchProperties="true" id="c7c83710-85d0-4d09-bd8f-21d7d003b603"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b7141c67-a59f-4618-9db3-4a1f5b099cd0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="a7b90e9c-6293-45ca-ba21-a983d21fcbf3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="e17cbd09-a536-4974-8f8c-3ff2b8861bbb" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b1ebf2d1-f1cc-462b-917a-8aa7ad5da7ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="ef0b2508-1719-4863-b42d-3887589311c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="777fb0a3-d050-4a9a-b5f6-a4e62e1ebdfa"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6cfdc101-574f-4ec0-8cbe-b8bd6c988095"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="7dd8adf9-6ac4-4367-ac39-872b447d0f40" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="756739ef-71ad-4345-a144-ffe761019c71" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="eacda4cf-2e75-49c7-a2cc-0f6611e65bf1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="6c585954-0177-4ba0-887d-1fa487d4b2db" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>C43CAC61DBAB49FBBB5493214119D3EA</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZRc9o4EP4rjPvYMbKxIcYTmDEB7phCmgJJk750hLQGHbbsWDKQ/PqTDLhASI72njxar779tPtptdcCx1HND4SATLKEVzZxxIVfWFtGnnE/wYIJn+MYhC+JPwlGQ79WtXy832JUBt2W8bPhObbnUNe0LOfKdC3qmN6MgDmjdiOs49Cq4SvlKkQOAy4k5rJl1Cy7blquaTemVsOvu77rVOuu98OoPEAmFLZyqVrGjtRGtIyFlKmP0Hq9rq6dapLNUc2ybPQ4Gk7IAmJstK+3JyoCZe2dP6lSIBBFpEqSGF2jI59rKvwJm3Ms8wx2seh7sSxkNZHyoYLNPxnlXqADHibF8gbzhDOCI/aKdX5GIBcJrQTRPMmYXMTvHsK2NLAJG2IS2+WfDHRM7UKgI4aZwKZYYHuHNYYQMuAEKvfjQcv4dFnViq3TDHMRJlksjpe/xwf4CqIkBWqK/bF21C4HPJOp9jUQf8BJlAu2glst1hQTELtqArkcqnKXQcg2QyaUQDdCs0OH9E6W22x02RyE/JMCHRRnC/KAoxzad0Q0AuX+Uu/UluvX79NZ/oS+TL/QHmkVBA6dC0NZ2u3yRJSliLY7njbw+b7vhtbLuMOaj2vvaTxa/u3xf0R4Hz/S29F0dDXk95+Xd4+3i4WcfJ06chYgl16lHcSexq+38eNg8nnw4H0DTund9MfoYfgwyFZ/QT2D6VUHTZ560mrW3Zcb7zvcWOGCgnU7nuevi1n6La+PoRPPSJ/0v3lL+76Tvv546NkL9JR6/e9f6Kq/Gbt2n0T2ldsqj3PA/9i2v/OTfPYPELlfahkMupW+qhKWHzczbWHUDAtXP9XNR0jg0mjrXbp3+Llqd4z6qobbte10ax23EfQ6TqfRc6yeVXeserNp963AtgJn32S2LE4o3iQ8ZDqWbrlb2XxMkMS+UJmGzFwluep0wvgAsYslrgz4WF2ChAuYJqo92/PlyiLx8pmv1qEt44xuEi8mmLpG5TaRX/nXLAglZMdNuXnUlMdAWMpAd24tbKGULaRKxjNe5TKyqytc5ZCr3p7pNuvXXK+OBIvTCDRVFCc0j6CaLtIiNUhsvzUTE1FYx71pcd3ePdjpv30OlA9l2kHos3RA1RHOvC7O/iBvDtw4+wrt4YOcMn2zVEJlxsiWyfGvXzrRAilF0h0Gk7s96dL3N/b+vJn8tP8QYPh/AVQ93u5EH+QEnZajDERX7CDsfnRQj5BqW+29mJ6xXX2u5qtVXujHdR2UKXikC4msGpoAyVVjfZkmS+CoREEXvWIl8ZPgpf2YYi4XfCKxhFjpvVIsLxhbJiD02DJQN3Vz6Ux0FFKlTsJGnrPdRGrk0ow/nMqIT7SfMt+pzzrJ6K+KncE6iKPOqaYWyfhcr/QL9vKOLkiiYJnqvUl2CH4O4FzwY2OZ5JKLVIKa5RLe/1PRTbVlYEKSnMtB1ygMh42+4ClfUvB/Ob2BKd6Scrhk/z1dmqyQAAE1kgpW4OsZwddXgM8PHotd0NP3ounVakG/4blBp3n4XnhKHmVSjti135jfWg7ydKrx9r8=</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B46AECF26E30E05305991F0A10A3</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZc6pME773V1iey1TCJm6VpGpYJKiorC53CKOgCMiAoL/+GzAak5OTc97vImWm6eWZ7md6ep6RvQ/oHkAIJqkfhXVZeGmsWqRLsrTzyHTt5mPToanHldNqPXba9nq9ttdux2026jJCGZRDlNph+tKgSYp6JJlHijEoqkc3e1Tzqdlhlo26BROEPWOVJ7JRL/ZBiHpV1JdGloS9yEY+6oX2HqJe6vR0oIx6WLNnXyE1Xp8vIKuAyauXpnGPIJwnFzowCJwnJ9oTz8QnnWcX9XR/E9pplsD3mC56abzb5nn+lDNPUbIhaJIkCbJLYB0X+Ztfjdfa1Ri6criOLmveDqPQd+zAP9slKAWmXuTWQbCJEj/19n9wTREUWbp+hIXz6FDN8FeD+AhQoftHT59AJsh+RJ5NXZ1pcA0TGDqwbmryS+PXPxXwYmokdojWUbJHX9b/DREMjzCIYug+ouvGruD+3eM32Xp9hk5PDp0gQ/4RjkuWxLYDUX2awLVfjHyEueeielX9eoGuBIPOf6nIM3GPE8MmvsmM4G8gSv+fct2X6uLFsoMMvuqt07qw5m1i1tKlhUtIp0muxfaiG8ovFYR75QuoW6Xf1195eqPVu9Fwvcvgw14Z2IPpcSoEIM6KxUCgCcOSAps9hH2ZOZ3G5iSxnPWbRwFpfPJMtj1eyEtregbW3NLNYfg2D6bLGlzx5xUY2p3mPOYJAF1/yEDKiCaDbHVgzBnnNzldH7CGdBygE6vsovlRkLfD4ZJhvBDwA+d03qkO8otxp7Y1mWXK7tFEb42UiBeVk/Lysaf7PZT7GsJTtcny/zlLdgU7tW8LvmwUa3w6U/iqyLKQnXkenPQNyGUObPDfFoy5ze7g7Xypm5McUNU+EHgu2IojBewkQJki5ym8ZSkFfwYDbjO2sKFRA8GSUzQxF/KFYKnqm5h7hitZp5UUZMuzOFYAqox5TxE10RI0Q1QUEF1khSKspGKr6Eouqwuhhh0IYhGfXambQqnwHVpmFZ2lFzqbLecWlvdPo/34uDLEQOEVidcPki6vGEEVB0BbzBy6n2Hb82gfR7WFyd0ZDWK4BbCfkzgmOCvGLlcMkx4Lml3JjM8yRZYGiopyXq12JdXEfGCZ549c8JzCu3uxEA0wveTCMfj+mFzOB8iesaGigVzYVMZDMXcnVyCKSuY1/pKrkZhromaO+4om5yKoZIKYB2hFj72V5B0dRi0GBtjeF4ZXxVk/xN9D7eic2EPNlvpgtbcoh9E8x2d9ex7lm2UnF9TFYBgtZexmDFSR41SAAZGg3BrOPwdGnMVOYr9L+3C07kd76CU1hYqGu+O5IDs+M9lMxzNWWO/aU8mfMrbrEXLg0FtmB2QZukPKU21XWxCaEPrn1mRozqGfLM7pmFWplt9ha9osM+dCFLTdt/nCHD4UC0c1JlPdnE3PRTE+bDvnIH2bcG+JPlCEzWQM4RQ5DwRp9zmjI7D84m2L+bTWSMjWwEbhAJC2m43oYwJzb9sLCd80RcTkBQqfS/yMl3QgSQ+izAmquu571NSRrMykxoosugFO02kx14LakucEXCnSni3jBd0nlwZwK2dqU+xvVJN9GMzhUh0HhpWCPLbWIUWRUqy+rZV84yglA1w51zl8irhaJgPTnsQDshhaLZI6qG4w0LvAZAqd3hUTb7M87TbLHS7K4u7oLAwQWMYdx2RMsVlNNURNAZ3LeSsU2WS0wNkX8WrvFIKBa1YZRwYnan2VNAtBAMOLDBmALtDiLG4VXqzsa6BQbEyL42ruoUU49ieGmGHSZnd02a5o8q8cKylW+8yxAw9U8JVj4oVjIlgfHuSOQCG2xcdolm84STyobWs06MakOh/tatxDn9ikftCchJ3cGD7MqFPe9rbqbNaVBY9/CNcLj1mlHGmfHRUOdm3J13ZC2GoGJ2WkqKzpE8GJ3MJDjka1sUyFIpOe+0Q3yR64/dLfn89Mkzb3Uz07yqY9RNTJWx1m3Xw7fWsRRCKd2HN7eVT788hZXO6Rr03yJry0UeK+wX7qwNfRS89WW+ik12V5D8tCvY8vRzv9eYwrJb77uK5Ue3E5C6IUhmnjtbQqR7hehgc93+3hm/Oy7nKtFkuzHOi32iTFciLZJKk+CUi2223SPLjOehcUXyDyUbj2y1jlMHu5rH8G6Ox7K2gnMGn84KnMU10ONTx9RCGCRvTS6HA01W4zJOBJsot/hFanzbRAh21yGHS33aiPo3QSThKwTmFyNyA3vw7IGnT82IflFP0+S6AUJ+JgH7M0oJ6O9lMIMzxmJ+Wkiy07bJUAws32sYM/4O6WxBFKn2IvroaZP27j67frjrGO65cKqATNQVwt+M1IT14R/7Yz+tvR/+oeZK5fziw4fWniOxcknz99sKGkwY0KZJdqXjHfVP/NtEtRrd9NiR8QEV+TcYvkHv27uNeHCZ618ThWvUcQLtrBfjo8ZcdjVpWpTZI0kWD3BEWQhA6dDI+LJyPawZC4eSD+ZVC/Yf4S9yb/jC5LvVBP8SnfY0bVq+XfH2mfrHECUlik38n4AD/LyuA/vtycnlPqYfEU/+RR4n7k/Rtfd3Ew5LJD+eGmXJUT9ulzed9PQs+JsFcfN6kouff9nf13sT8Lb+m6QUkxK1ZZCv/8pV52n5eG7ThRFqay0KgE9x2xwpyeYtj7UPrNTTXivr9ZCvTHN8tcGemOB/d246br/1350a8K70BshfwKy0ujwK9vHDzc3HXgd4B/aMLsT034805efxP/LrnL6Vdmv/4P</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025429</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:C43CAC61DBAB49FBBB5493214119D3EA</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B46AECF26E30E05305991F0A10A3</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF694AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3C6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822AF704AB9E05305991F0A8037</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>777fb0a3-d050-4a9a-b5f6-a4e62e1ebdfa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22051 - StreamRenew - DLPCS - Stream renewal allowed for 'controlled' userId - 200 OK_MIGRATED" searchProperties="true" id="39560469-ab1b-4c16-ace2-090f79568dbd"><con:description>This test case will verify that a controlled userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="264e7ad3-077b-4936-bfec-438262ed1e58"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="3feffc2c-da3e-4b3f-8dae-f459c59ddfd2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="0d692b65-c19f-48f3-9c51-eb019f1c368b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="e573d52c-567b-41fc-97bb-058781909030"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a3d99178-7da4-4065-8051-85340c3e17d6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="791fad7b-abba-42bf-b3b7-84e30f1911d7"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="84dac549-b007-4a1d-a839-f8631539d681"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="6bb3a913-ade5-4949-8e66-b1d084dead63" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="d8266db2-adad-43f6-b313-a14fd499d2d1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="bb7cd703-9a70-4cbb-8541-1921de63b6c8" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="5c48e5be-b3c5-490d-84a7-4531295f496b" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>2B623D720204496D8D70DB8F6C8034D7</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvIGPkK2BOYIaGkNIRkgKSneeko8gIqtmwsGZz8+iMZcICQHNrz5NF69e23F+3uBcdRaPkdziEVNGaVPAoZ9wtpS8tS5seYU+4zHAH3BfHHnduBb9UMH++uaJV+t6X9ak6nTc+FZz0IHE93PK+ue4RMddc13GZgmA1s1aUq5xn0GReYiZZmGaarG45u1idG3Xcd3/Fqll1/0iqPkHKJLVVqhrYllfOWNhci8RFar9e1tV2L0xmyDMNE/9wOxmQOEdbaFxuPCkNpe6tPagEQCENSI3GELtCBzkXA/TGdMSyyFLa2go9sGcjwkNQJOJ190cq7EPTZNC6OV5jFjBIc0les4nMLYh4HlU44i1Mq5tGHTpiGAtYhJzoxHfZFQ4fUzgQ6YJhyrPM5NrdYI5hCCoxA5WHUb2lfzstacXWSYsancRrxw+Of8QG2gjBOIND5zq0ttfMBT0SqfQHE7zMSZpyuYKiKNcEE+DabQM6HqtynMKX5gHJZoDlX7NA+vaPjJhpdOgMu/iZBe8nZgDziMIP2/e34R9Ogye8gfVle3q3XVnU+Mh97D9HPVkFgX7kQlKndHI+KsiyizQ0c3CyWIobePWRRQFPWGExvo2qvdz382Qvz2Y0H172n2fdq7wXZK9R0H77n/OFh4d57cDkIsM0EymeDtOHcvDReZ9Sp3izMpJ5dd+4W84z9XAxz6ykZzr6/Po6jfOL2zXyIJteiSubmt/H1fFSdpFaYD5NrihavdLn40burfjOXzJ4ifjNhOO0mT9+cm8Zr3Crd2eN/KNu9+XH2/BuI2B1VGfS7lZ7MEhafNzMloYE+LVT9RDUfLoAJra1uqd7hZ7Ld0cCXOdycTbtrXZpXjY5xeeV6pvPVcG3D9TyzZ3Rsu+PumsyGxRHFq5hNqbKlWu6mbD4nSCKfAwsg1VdxJjsd1z5B7GKBK302ko8gZhwmsWzP5mpt2E03tEg9Yaabx9NGzhbPjUakVYaxuGN3aWcqID1syt5BUx4BoQkF1blVYXNZ2VzIYCzxKhOhWVvhGoNM9vZUtVnfcpou4jRKQlBUURQHWQi1ZJ4UoUF887V0THghHX2dFM/tQ8eO/+1iIHUCqhS48uUSZB7hxHSxd468c7h+cgrt4DtZQNXLkgEVKSUbJoe/3upEFUhZJN1BZ3y/I13q/sHdX1fjX+ZfAgz+L4DMx/ub6JOYoON0lIaCFd0zu1sd5BCSbau9K6YlNmvLWrZaZUX9OI6NUgmPVCKRYaExkEw21pdJvACGShR01hQriR8ZL+WHFDMxZ2OBBUSy3ivF8Yy1ZQxcrS19+VLzc3eiA5MydAJycUp2FcqVSzH+dCsjPlF6UnwvP+s4Dd4ydgJrz470U24tgrKZOqkJ9vJBXZBYwlLZe+N0H/wUwCnjh8IyyCUXIQvqORPw8Z+KaqotDRMSZ0z0u1oh2G/0BU/xkoD/pvQOppgl5XJJ/3u71GlRAgTkSsppga92BF89ATbbGxZbo8fzwmtaVqdXbzqdS29/XjQNu1EG5YBd+534vWQvTsc13v4X</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2DF5E69535D94E05307991F0A13B0</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:28:07</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:23:07.102</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:28:07.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:23:07.102Z</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:09:36.769</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:09:36.769</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:09:37</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:09:36.769</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025430</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:2B623D720204496D8D70DB8F6C8034D7</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2DF5E69535D94E05307991F0A13B0</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF694AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C7A0BD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C7A0BC5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C7A0BC5914E05305991F0A33A5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B65694912BCFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822AF704AB9E05305991F0A8037</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>791fad7b-abba-42bf-b3b7-84e30f1911d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22052 - StreamRenew - DLPCS - Stream renewal allowed for 'basic' userId - 200 OK__MIGRATED" searchProperties="true" id="876d5772-d922-45c4-9a6b-66f433fd0599" disabled="true"><con:description>This test case will verify that a controlled userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ffd7f8e0-9566-4316-9d77-99ebccaae91e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="3b35cf2d-581b-459a-a3a9-2c750a5b5cba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="b47cce5c-4594-41ea-a15c-a77be89cd5bc" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d0bbaf4a-bb2a-417c-a08e-233c39d6495a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="fcc2481f-ffb1-492d-94cb-a6a7b5899f32"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="8b061016-2b0f-433f-b36e-70e3396803e5"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as Basic User" id="d7f08b39-deff-441c-9ac7-e03b4791df41"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  As my full account user created the stream, i will
*  need to save it's useroid for STREAM table row
*  validations
*/
String useroid = tC.getPropertyValue("useroid");

tC.setPropertyValue("username",tP.getPropertyValue("UserName_BAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userBasic1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("useroid", useroid);


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="2067ecd4-5927-4b47-93f2-9dcfc9d54861"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="9600bfbd-016d-4845-8914-d3454061c1af" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="d471f3a8-1a84-4d8d-b0c7-a93b176cc0d0" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="7b3b645a-65cf-4cae-8a13-1d6a7bd97fc2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="fb196d4e-bed0-4db7-9ed6-c8caeb775c64" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150421_04175</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FA7B6ADC50AB43689BC49E1C6255A0CA</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:143AB97C02C42687E05307991F0A0818</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">143AADE0468D51BEE05307991F0A2BBB</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">143A62056CCD25AFE05307991F0A233C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMbKNMcETmDGXtDRAXCBNT186iixAjS05kszt1x/JgIvJ5dCeJ4/Wq91vL/p2rwVMYscPhMBcEkYrmySmws+lLSPj1GdQEOFTmGDhS+RPg9HQd6qWD49XjMqg1zJ+Qq/R8KDrmY0I1kzX8x5NeOUg06mjOW7W5g3UwEpViAwPqJCQypbhWHbdtFzTsWe25bueb9Wqtuv9MCrfMBfKtlKpWsYB1Ea0jKWUqQ/Aer2urmtVxhfAsSwbfB8Np2iJE2i0r/cR5Y54+6CPqhFGOI5RFbEEXIOSznUk/ClZUCgzjg++ord8WcBqAqUTCbL4YBR3cTSgc5Yfu5AyShCMyQ7q/IywXLKoEsQLxolcJm8GYVvasIk3yES2Sz8YoAztQkMlhFxAUyyhfbA1wXPMMUW4cj8ZtIwPl1UtvzrjkIo544koH/8MD6YrHLMUR6Y4hnWAdrnBVzLVvsbIH1AUZ4Ks8Fg3awoRFodqYnS5qUrI8ZxshkSoBt0IjQ6cwjs77rPRIwss5N8U6KQ4eyPfYJzhNpvA0ehpbEWQu/2HUQLGoZyPnfW9vG/lAE6Vc0FR2v3xrCmLJtrf6M1qj10RMrkLvt2lInRmrjP7hED/c+N70xrdfP8nxJLL6WjeFXcoCj/fpvHHWdLZRfDLOrh/2FmbMfnYvA2zGxzGD2Gtg2sw6GzX636E7cFNbOHdr80w/DLr2SAOr8DtrjO57a6/fklim6lwvPB2+uD8GD3PPnnbGR92IdvJ6TC5v+cxGYN+YwDmW/crHw1aRTgn+Muy45ufZo+/MJLHo26DQa9yo6oE5ftkpiUkMue5qp9q8hESU2m09S3NHX6m6I5Evqrh/my7tcBzrHrD7gVOPbjpW/Wa1Wg27RsrcGq17pFk9ijOIHYZnRPtS1Puvm3eB4gSX2AaYW6uWKaYThjvWOxBCSsDOlGPgFGBZ0zRs920dqnHU/G0TZ+SLUSMraJfawcZlTGTd/SOB3OJeZmTayVOnmBEUoI1ceu+FqqxhVS5eIarTMZ2dQWrFGeK2rlmWd9xr+pAkCSNsUYKEhZlMa6myzTPDBD7r2NCJHLppD/LX9ubcZ3/O6ZA6UREKwgdSwerMuIXw6Xu14+BvAjYe3UIHc0HWUT0w1L5lJygPZLyr99tovuj6JHeMJiGR9CF7h/c/dmd/rT/0sDw/xpQ9Xh5E7yTE3BejsJRtCInbo+bg5pBirXax2Z6hnb1uZqtVlneP65bA1yZB7qQwHLAFKNM8ep2xp4wBYUVcNEQK4CfOS/kZYiZXNKphBInqt8r+fGCrWWKhd5aBuqhbi5diUouVeok3sjXZN1YbVwa8btLGfKR1lPiUH3WjEe/K/aKrRM/Kk61tEhCF/qkB9j2jb5Q1MEjoqiX8VPjrxl4zXlZWCS5wCJVQz1mEr/9p6I5tWVAhFhG5aBn5IJTns9xym2K/d9KL8zko6TYLcl/L5cmyVsAqT1W6ef29Yrg6ydAFyez4uD0fFwEvb7lelfdut3pl8ZFp9MpklJC134hfik5ydN5j7f/BQ==</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">143AADE0468C51BEE05307991F0A2BBB</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">143AADE0469451BEE05307991F0A2BBB</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">143A620571DA25AFE05307991F0A233C</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BB290015BE0401F0A059942CA</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:143A620571DA25AFE05307991F0A233C</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:143AADE0468C51BEE05307991F0A2BBB</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>143AB97C02C42687E05307991F0A0818</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FA7B6ADC50AB43689BC49E1C6255A0CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:143AADE0469451BEE05307991F0A2BBB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d7f08b39-deff-441c-9ac7-e03b4791df41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b061016-2b0f-433f-b36e-70e3396803e5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22054 - StreamRenew - DLPCS - UserIdUnmatched - Full user cannot renew standard-user created stream -200 OK_MIGRATED" searchProperties="true" id="d25792bd-fc94-4ed2-8c37-7ff53e391c20"><con:description>This test case will verify that a basic userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="12c69c80-9276-43c9-8a9b-76746cbaf5a1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="0995bc4d-c679-4f61-9b6b-f65397dc103a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="8885ec5f-723f-4456-b3fb-1133bb51b11d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="e3eb04f7-ed4e-461a-800f-58a736736714"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="9db83f08-63ce-40f2-b529-d391b8be0a27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as Full User" id="f3524500-a2aa-44fe-a4fa-ebf57dbd13a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  As my full account user created the stream, i will
*  need to save it's useroid for STREAM table row
*  validations
*/
String useroid = tC.getPropertyValue("useroid");

tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("useroid", useroid);


</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="7d5f96ea-51dd-45e9-b296-f38bba797900"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="53114cae-a85e-4bcc-8e89-78faa9280cbc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="853c804e-5ee9-45ee-a093-40233b06ffb8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="fd2cd068-1dd7-4dfc-953c-429481a27f58" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>616D86ABDED64C76A412028297AB0465</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZRc9o4EP4rjPvYMbKxIcYTmDEB7phCmgJJk750hLQGHbbsWDKQ/PqTDLhASI72njxar779tPtptdcCx1HND4SATLKEVzZxxIVfWFtGnnE/wYIJn+MYhC+JPwlGQ79WtXy832JUBt2W8bPhObbnUNe0LOfKdC3qmN6MgDmjdiOs49Cq4SvlKkQOAy4k5rJl1Cy7blquaTemVsOvu77rVOuu98OoPEAmFLZyqVrGjtRGtIyFlKmP0Hq9rq6dapLNUc2ybPQ4Gk7IAmJstK+3JyoCZe2dP6lSIBBFpEqSGF2jI59rKvwJm3Ms8wx2seh7sSxkNZHyoYLNPxnlXqADHibF8gbzhDOCI/aKdX5GIBcJrQTRPMmYXMTvHsK2NLAJG2IS2+WfDHRM7UKgI4aZwKZYYHuHNYYQMuAEKvfjQcv4dFnViq3TDHMRJlksjpe/xwf4CqIkBWqK/bF21C4HPJOp9jUQf8BJlAu2glst1hQTELtqArkcqnKXQcg2QyaUQDdCs0OH9E6W22x02RyE/JMCHRRnC/KAoxzad0Q0AuX+Uu/UluvX79NZ/oS+TL/QHmkVBA6dC0NZ2u3yRJSliLY7njbw+b7vhtbLuMOaj2vvaTxa/u3xf0R4Hz/S29F0dDXk95+Xd4+3i4WcfJ06chYgl16lHcSexq+38eNg8nnw4H0DTund9MfoYfgwyFZ/QT2D6VUHTZ560mrW3Zcb7zvcWOGCgnU7nuevi1n6La+PoRPPSJ/0v3lL+76Tvv546NkL9JR6/e9f6Kq/Gbt2n0T2ldsqj3PA/9i2v/OTfPYPELlfahkMupW+qhKWHzczbWHUDAtXP9XNR0jg0mjrXbp3+Llqd4z6qobbte10ax23EfQ6TqfRc6yeVXeserNp963AtgJn32S2LE4o3iQ8ZDqWbrlb2XxMkMS+UJmGzFwluep0wvgAsYslrgz4WF2ChAuYJqo92/PlyiLx8pmv1qEt44xuEi8mmLpG5TaRX/nXLAglZMdNuXnUlMdAWMpAd24tbKGULaRKxjNe5TKyqytc5ZCr3p7pNuvXXK+OBIvTCDRVFCc0j6CaLtIiNUhsvzUTE1FYx71pcd3ePdjpv30OlA9l2kHos3RA1RHOvC7O/iBvDtw4+wrt4YOcMn2zVEJlxsiWyfGvXzrRAilF0h0Gk7s96dL3N/b+vJn8tP8QYPh/AVQ93u5EH+QEnZajDERX7CDsfnRQj5BqW+29mJ6xXX2u5qtVXujHdR2UKXikC4msGpoAyVVjfZkmS+CoREEXvWIl8ZPgpf2YYi4XfCKxhFjpvVIsLxhbJiD02DJQN3Vz6Ux0FFKlTsJGnrPdRGrk0ow/nMqIT7SfMt+pzzrJ6K+KncE6iKPOqaYWyfhcr/QL9vKOLkiiYJnqvUl2CH4O4FzwY2OZ5JKLVIKa5RLe/1PRTbVlYEKSnMtB1ygMh42+4ClfUvB/Ob2BKd6Scrhk/z1dmqyQAAE1kgpW4OsZwddXgM8PHotd0NP3ounVakG/4blBp3n4XnhKHmVSjti135jfWg7ydKrx9r8=</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C7A3325914E05305991F0A33A5</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:28:25</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:23:25.955</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:28:25.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:23:25.955Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:19:27.56</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:19:27.56</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:19:27</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:19:27.56</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025429</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:616D86ABDED64C76A412028297AB0465</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C7A3325914E05305991F0A33A5</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF694AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C7A0BD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81348</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7d5f96ea-51dd-45e9-b296-f38bba797900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22054 - StreamRenew - DLPCS - Standard user can renew standard-user created stream - 200 OK" searchProperties="true" id="4abaf190-08a5-405d-b766-4d95f209d714"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cb3c6971-ee75-4b98-ae2b-436ae72f2c4e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="6d64ee03-5f3f-489c-9b24-5e16eb0b0f7b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="6c93d18f-ec4e-468b-87b8-6cfa4153b557" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a65913f5-8bf6-4964-a9d1-cf6f768ce39a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e2ebfbae-945e-4e5a-8e4f-c204b500a42d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="cdf7ab67-2253-46d4-b89e-67895a469c1e"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="1d916df0-43d3-4969-b74f-56ff8f952766"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="40308d70-2d7a-4b7d-9567-b39ae275401e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="390787df-4362-4497-aea1-677458feed74" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="8983cb27-2c97-4e5b-8133-b19b9b0cf849" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="d72192c1-73cc-4c95-8106-c58ed2dfee9a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>8E7FBF585DDC46E6AAD21A52785FF5B5</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvIGPkK2BOYIaGkNIRkgKSneeko8gIqtmwsGZz8+iMZcICQHNrz5NF69e23F+3uBcdRaPkdziEVNGaVPAoZ9wtpS8tS5seYU+4zHAH3BfHHnduBb9UMH++uaJV+t6X9ak6nTc+FZz0IHE93PK+ue4RMddc13GZgmA1s1aUq5xn0GReYiZZmGaarG45u1idG3Xcd3/Fqll1/0iqPkHKJLVVqhrYllfOWNhci8RFar9e1tV2L0xmyDMNE/9wOxmQOEdbaFxuPCkNpe6tPagEQCENSI3GELtCBzkXA/TGdMSyyFLa2go9sGcjwkNQJOJ190cq7EPTZNC6OV5jFjBIc0les4nMLYh4HlU44i1Mq5tGHTpiGAtYhJzoxHfZFQ4fUzgQ6YJhyrPM5NrdYI5hCCoxA5WHUb2lfzstacXWSYsancRrxw+Of8QG2gjBOIND5zq0ttfMBT0SqfQHE7zMSZpyuYKiKNcEE+DabQM6HqtynMKX5gHJZoDlX7NA+vaPjJhpdOgMu/iZBe8nZgDziMIP2/e34R9Ogye8gfVle3q3XVnU+Mh97D9HPVkFgX7kQlKndHI+KsiyizQ0c3CyWIobePWRRQFPWGExvo2qvdz382Qvz2Y0H172n2fdq7wXZK9R0H77n/OFh4d57cDkIsM0EymeDtOHcvDReZ9Sp3izMpJ5dd+4W84z9XAxz6ykZzr6/Po6jfOL2zXyIJteiSubmt/H1fFSdpFaYD5NrihavdLn40burfjOXzJ4ifjNhOO0mT9+cm8Zr3Crd2eN/KNu9+XH2/BuI2B1VGfS7lZ7MEhafNzMloYE+LVT9RDUfLoAJra1uqd7hZ7Ld0cCXOdycTbtrXZpXjY5xeeV6pvPVcG3D9TyzZ3Rsu+PumsyGxRHFq5hNqbKlWu6mbD4nSCKfAwsg1VdxJjsd1z5B7GKBK302ko8gZhwmsWzP5mpt2E03tEg9Yaabx9NGzhbPjUakVYaxuGN3aWcqID1syt5BUx4BoQkF1blVYXNZ2VzIYCzxKhOhWVvhGoNM9vZUtVnfcpou4jRKQlBUURQHWQi1ZJ4UoUF887V0THghHX2dFM/tQ8eO/+1iIHUCqhS48uUSZB7hxHSxd468c7h+cgrt4DtZQNXLkgEVKSUbJoe/3upEFUhZJN1BZ3y/I13q/sHdX1fjX+ZfAgz+L4DMx/ub6JOYoON0lIaCFd0zu1sd5BCSbau9K6YlNmvLWrZaZUX9OI6NUgmPVCKRYaExkEw21pdJvACGShR01hQriR8ZL+WHFDMxZ2OBBUSy3ivF8Yy1ZQxcrS19+VLzc3eiA5MydAJycUp2FcqVSzH+dCsjPlF6UnwvP+s4Dd4ydgJrz470U24tgrKZOqkJ9vJBXZBYwlLZe+N0H/wUwCnjh8IyyCUXIQvqORPw8Z+KaqotDRMSZ0z0u1oh2G/0BU/xkoD/pvQOppgl5XJJ/3u71GlRAgTkSsppga92BF89ATbbGxZbo8fzwmtaVqdXbzqdS29/XjQNu1EG5YBd+534vWQvTsc13v4X</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C7A3405914E05305991F0A33A5</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025430</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:8E7FBF585DDC46E6AAD21A52785FF5B5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C7A3405914E05305991F0A33A5</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF694AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C7A0BD5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C7A0BC5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C7A0BC5914E05305991F0A33A5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B65694912BCFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81350</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cdf7ab67-2253-46d4-b89e-67895a469c1e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22055 - StreamRenew - DLPCS - UserIdUnmatched - Standard user cannot renew full-user created stream - 200 OK_MIGRATED" searchProperties="true" id="61450c9b-39f2-420f-8001-ba17b78732ce"><con:description>This test case will verify that a basic userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="07ee7ee0-4e0f-4775-92bd-025ff0162892"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="d56e9152-277d-4dba-9d65-b203743a5632"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="7d17d26c-56c0-4610-8dd7-d18af224942b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="26fa5ddc-fd34-42fb-9d18-4d108e72bed1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="adf5ff95-8274-4673-8da2-456e3ea4a2a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as Standard User" id="6abe3d0f-895a-4fcb-b8c8-b071ddc68f87"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  As my full account user created the stream, i will
*  need to save it's useroid for STREAM table row
*  validations
*/
String useroid = tC.getPropertyValue("useroid");

tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("useroid", useroid);


</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="b8d50d63-9f67-47cd-979c-ab86e2f60bea"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="7559704e-7ebd-4e6d-b039-660d22ddd33c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="9c814f5d-aaf0-4f3e-b97c-a990a403b962"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="d1bc0d43-f7be-4d81-966c-beeb28a9da8d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f2b44c9e-69a3-4de2-85ac-b4a555a330c8" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>69B17F6D06014DB6AFBB18A4631A7864</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvIGPkK2BOYIaGkNIRkgKSneeko8gIqtmwsGZz8+iMZcICQHNrz5NF69e23F+3uBcdRaPkdziEVNGaVPAoZ9wtpS8tS5seYU+4zHAH3BfHHnduBb9UMH++uaJV+t6X9ak6nTc+FZz0IHE93PK+ue4RMddc13GZgmA1s1aUq5xn0GReYiZZmGaarG45u1idG3Xcd3/Fqll1/0iqPkHKJLVVqhrYllfOWNhci8RFar9e1tV2L0xmyDMNE/9wOxmQOEdbaFxuPCkNpe6tPagEQCENSI3GELtCBzkXA/TGdMSyyFLa2go9sGcjwkNQJOJ190cq7EPTZNC6OV5jFjBIc0les4nMLYh4HlU44i1Mq5tGHTpiGAtYhJzoxHfZFQ4fUzgQ6YJhyrPM5NrdYI5hCCoxA5WHUb2lfzstacXWSYsancRrxw+Of8QG2gjBOIND5zq0ttfMBT0SqfQHE7zMSZpyuYKiKNcEE+DabQM6HqtynMKX5gHJZoDlX7NA+vaPjJhpdOgMu/iZBe8nZgDziMIP2/e34R9Ogye8gfVle3q3XVnU+Mh97D9HPVkFgX7kQlKndHI+KsiyizQ0c3CyWIobePWRRQFPWGExvo2qvdz382Qvz2Y0H172n2fdq7wXZK9R0H77n/OFh4d57cDkIsM0EymeDtOHcvDReZ9Sp3izMpJ5dd+4W84z9XAxz6ykZzr6/Po6jfOL2zXyIJteiSubmt/H1fFSdpFaYD5NrihavdLn40burfjOXzJ4ifjNhOO0mT9+cm8Zr3Crd2eN/KNu9+XH2/BuI2B1VGfS7lZ7MEhafNzMloYE+LVT9RDUfLoAJra1uqd7hZ7Ld0cCXOdycTbtrXZpXjY5xeeV6pvPVcG3D9TyzZ3Rsu+PumsyGxRHFq5hNqbKlWu6mbD4nSCKfAwsg1VdxJjsd1z5B7GKBK302ko8gZhwmsWzP5mpt2E03tEg9Yaabx9NGzhbPjUakVYaxuGN3aWcqID1syt5BUx4BoQkF1blVYXNZ2VzIYCzxKhOhWVvhGoNM9vZUtVnfcpou4jRKQlBUURQHWQi1ZJ4UoUF887V0THghHX2dFM/tQ8eO/+1iIHUCqhS48uUSZB7hxHSxd468c7h+cgrt4DtZQNXLkgEVKSUbJoe/3upEFUhZJN1BZ3y/I13q/sHdX1fjX+ZfAgz+L4DMx/ub6JOYoON0lIaCFd0zu1sd5BCSbau9K6YlNmvLWrZaZUX9OI6NUgmPVCKRYaExkEw21pdJvACGShR01hQriR8ZL+WHFDMxZ2OBBUSy3ivF8Yy1ZQxcrS19+VLzc3eiA5MydAJycUp2FcqVSzH+dCsjPlF6UnwvP+s4Dd4ydgJrz470U24tgrKZOqkJ9vJBXZBYwlLZe+N0H/wUwCnjh8IyyCUXIQvqORPw8Z+KaqotDRMSZ0z0u1oh2G/0BU/xkoD/pvQOppgl5XJJ/3u71GlRAgTkSsppga92BF89ATbbGxZbo8fzwmtaVqdXbzqdS29/XjQNu1EG5YBd+534vWQvTsc13v4X</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B46AF3110CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:28:25</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:23:25.955</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:28:25.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:23:25.955Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:19:27.56</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:19:27.56</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:19:27</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:19:27.56</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025430</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:69B17F6D06014DB6AFBB18A4631A7864</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B46AF3110CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF694AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3C6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B1C7A0BC5914E05305991F0A33A5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B1C7A0BC5914E05305991F0A33A5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B65694912BCFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81351</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b8d50d63-9f67-47cd-979c-ab86e2f60bea</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22070 - StreamRenew - DLPCS - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of deleted cannot be renewed - 403 Forbidden_FLAKY" searchProperties="true" id="e94e1df2-38c1-471a-b307-dc1370f7ce17"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="172b4c20-7814-4a2e-9606-02eeb277e68d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="8da9fc5a-8fae-493a-98fa-6fe169d69095"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d9acfb87-fce7-4a3e-881f-f7f1bd7b49cc" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="359c384b-678e-442d-a456-29641b9dea55"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="20744c51-72e3-4459-af15-e44e1306ae03"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="196f17f0-8540-4c33-aef0-02598eb47838"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to deleted" id="b5c1c4c6-6114-44d4-800b-5097fcfd1d35"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert b.rightsTokenSetStatusDeleted(tC.getPropertyValue("rightstokenid")) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="d6582b9e-ca39-481b-9c89-1f63b57ce29c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="758bc21b-161a-421c-833d-e521b120b8ef" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="2ec1640c-5dd6-4efa-b233-91673026a75e" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="1103053f-4092-49b0-aaff-515b0a85f351" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_025429</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FAC17598C9A74E13AD39EAE0A1462FBE</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B1C7A34F5914E05305991F0A33A5</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF694AB9E05305991F0A8037</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3C6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZRc9o4EP4rjPvYMbKxIcYTmDEB7phCmgJJk750hLQGHbbsWDKQ/PqTDLhASI72njxar779tPtptdcCx1HND4SATLKEVzZxxIVfWFtGnnE/wYIJn+MYhC+JPwlGQ79WtXy832JUBt2W8bPhObbnUNe0LOfKdC3qmN6MgDmjdiOs49Cq4SvlKkQOAy4k5rJl1Cy7blquaTemVsOvu77rVOuu98OoPEAmFLZyqVrGjtRGtIyFlKmP0Hq9rq6dapLNUc2ybPQ4Gk7IAmJstK+3JyoCZe2dP6lSIBBFpEqSGF2jI59rKvwJm3Ms8wx2seh7sSxkNZHyoYLNPxnlXqADHibF8gbzhDOCI/aKdX5GIBcJrQTRPMmYXMTvHsK2NLAJG2IS2+WfDHRM7UKgI4aZwKZYYHuHNYYQMuAEKvfjQcv4dFnViq3TDHMRJlksjpe/xwf4CqIkBWqK/bF21C4HPJOp9jUQf8BJlAu2glst1hQTELtqArkcqnKXQcg2QyaUQDdCs0OH9E6W22x02RyE/JMCHRRnC/KAoxzad0Q0AuX+Uu/UluvX79NZ/oS+TL/QHmkVBA6dC0NZ2u3yRJSliLY7njbw+b7vhtbLuMOaj2vvaTxa/u3xf0R4Hz/S29F0dDXk95+Xd4+3i4WcfJ06chYgl16lHcSexq+38eNg8nnw4H0DTund9MfoYfgwyFZ/QT2D6VUHTZ560mrW3Zcb7zvcWOGCgnU7nuevi1n6La+PoRPPSJ/0v3lL+76Tvv546NkL9JR6/e9f6Kq/Gbt2n0T2ldsqj3PA/9i2v/OTfPYPELlfahkMupW+qhKWHzczbWHUDAtXP9XNR0jg0mjrXbp3+Llqd4z6qobbte10ax23EfQ6TqfRc6yeVXeserNp963AtgJn32S2LE4o3iQ8ZDqWbrlb2XxMkMS+UJmGzFwluep0wvgAsYslrgz4WF2ChAuYJqo92/PlyiLx8pmv1qEt44xuEi8mmLpG5TaRX/nXLAglZMdNuXnUlMdAWMpAd24tbKGULaRKxjNe5TKyqytc5ZCr3p7pNuvXXK+OBIvTCDRVFCc0j6CaLtIiNUhsvzUTE1FYx71pcd3ePdjpv30OlA9l2kHos3RA1RHOvC7O/iBvDtw4+wrt4YOcMn2zVEJlxsiWyfGvXzrRAilF0h0Gk7s96dL3N/b+vJn8tP8QYPh/AVQ93u5EH+QEnZajDERX7CDsfnRQj5BqW+29mJ6xXX2u5qtVXujHdR2UKXikC4msGpoAyVVjfZkmS+CoREEXvWIl8ZPgpf2YYi4XfCKxhFjpvVIsLxhbJiD02DJQN3Vz6Ux0FFKlTsJGnrPdRGrk0ow/nMqIT7SfMt+pzzrJ6K+KncE6iKPOqaYWyfhcr/QL9vKOLkiiYJnqvUl2CH4O4FzwY2OZ5JKLVIKa5RLe/1PRTbVlYEKSnMtB1ygMh42+4ClfUvB/Ob2BKd6Scrhk/z1dmqyQAAE1kgpW4OsZwddXgM8PHotd0NP3ounVakG/4blBp3n4XnhKHmVSjti135jfWg7ydKrx9r8=</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AEB3B6E30E05305991F0A10A3</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D29822AF684AB9E05305991F0A8037</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B1C7A34F5914E05305991F0A33A5</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FAC17598C9A74E13AD39EAE0A1462FBE</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D29822AF704AB9E05305991F0A8037</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81356</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D29822AF704AB9E05305991F0A8037</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>196f17f0-8540-4c33-aef0-02598eb47838</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22095 - StreamRenew - DLPCS - StreamRightsNotGranted - PURCHASE_PROFILE.STREAM value of  'N' - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="445d41d1-762f-4ab3-91c5-a0a97bf9c480"><con:description>This test case will verify proper StreamCreate behavior when the PURCHASE_PROFILE.STREAM value associated with the RightsToken is 'N'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="076dded6-829c-4d9a-a47c-5e454fcb64c3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","CID_NOT_GRANTED");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="b7a7b239-280c-4c70-9e3b-3f1f1bc7f6ce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="4409ffae-93ba-4988-a7b4-33d32f0451b5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="9f6ab345-89cf-4868-9854-59c685b3f4cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="188873f9-e803-442c-9b95-670419ff0fa8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken PURCHASE_PROFILE.STREAM to 'N'" id="8051879e-0630-47f4-b7e5-768b8736e721"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsPurchaseProfileStreamOff(rt) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="6592b504-d1aa-4c08-a152-1ffc87171fc1"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="355e7cc1-2b2e-4265-bce5-ef97fceb9218"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="40e797de-e0bb-40b1-abf2-5d8e8eefb35b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="af832e70-7f92-45c9-958c-bd9ab3ab7eec" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="7798ed3b-ef3d-4a14-b8d4-b17af4485e23" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken PURCHASE_PROFILE.STREAM to 'Y'" id="7abb8139-f5cd-4813-aaba-89874e0464bc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsPurchaseProfileStreamOn(rt) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="d906904b-ee40-4579-8cb9-6edd17158840" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>rightstokenid</con:name><con:value>13D2B46AF4150CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPCSuuid_member}</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4CAFDC3C5853430199A291A33D7825CE</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountid</con:name><con:value>900</con:value></con:property><con:property><con:name>userid</con:name><con:value>600</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb4T8ARmzC11C0kKNMnJS0bIa1Bjy8aSgeTXH8mAC4Tk0J4nj9arb7+9aHevGIoj0/UYg4yThFbWcUSZW0ibSp5RN0GMMJeiGJjLsTv2hgPXrOou2l1RKn63qTwbDcPULxFSDX3qqHZgYbVhOXW17kydwAnsWugEQpWxHHzKOKK8qZi64ai6rRq1iX7p6qZrGtWa3nhSKveQMYEtVKq6siW1Zk1lznnqatpqtaqurGqSzTRT1w3tcTgY4znESGldbTwqDGWtrT6uBoAhinAVJ7F2pR3oXAXMHZMZRTzPYGsr+MiWrukNTegEjMy+KOVdCHwaJsWxg2hCCUYReUMyPkPg8ySoeNEsyQifxx86YegSWIU1VrFh0y+KdkjtTKADhhlDKpsjY4s1ghAyoBgqP0d+U/lyXtaKq5MMURYmWcwOj3/GB+gSoiSFQGU7t7bUzgc8EanWFWDXpzjKGVnCjSzWFGFg22wCPh+qcpdBSNYDwkSBrplkp+3TOzpuotElM2D8bxK0l5wNyD2Kcmh12/66PySLxdtTenMRPnijfrxq25G3GjYLAvvKhaBM7eZ4VJRlEW1u5DPTmvPJd+vhbX09CKbDxmDa9aZff6DhZfpovWb/PF78GHyf5vULHX+DgdOLHq3527Xzo+bcPPW/hRAPRoNral944zhbsNWLz7QHz+jXn8x16o9uA0oM8+Lenzrcjqxoxp3ebVR7GaOVb0y791B/MRo8+zkf3Iedb/y23u+FjWgxpXV4mj6ancnFVy9p9351Hrxm6c4e/0PZ7s2P8+kvwHx3lGXgdyt9kSXEP29mUkICNSxU3VQ2H8aBcqUlb8ne4eai3ZHAFTncnA2ra3b6XaNXa7d1u9/o6Y6lXzYaRl/37Lbe2TWZDYsjip2EhkTaki13UzafE8Sxy4AGkKnLJBedjimfIHYRRxWfjsQjSCiDSSLac5jSyLbMl2j5xg16+TpLL408azRqSuUm4bf0NvNCDtlBTzb0g548AkxSArJxy7pmorAZF7FYoGXOI6O6RFUKuWjtmeyyrmnXHY2ROI1AMtXiJMgjqKbztIiMxjZfU0WYFdJRb1K8tg/9Ov63C4HQCYhUYNKXNog0wonhYuwceedw7eQQ2sF7eUDkwxLx5BnBGyaHv36XiayPska6A298tyNd6v7B3efO+Nn4S4DB/wUQ+Xh/U/skJtpxOkpDwZLsmd1tDmIGia7V2hXTAhnVRTVfLvOifmzb0jIBr8lEarqpjQHnoq++TpIXoFqJop01xEriR8ZL+SHFnM/pmCMOsaj3SnE8Y2sZA5Nbiy8e6vrclejApAgdhzU/JetEYuOSjD9dyrCLpZ4Q34nPKsl+O34Ka8+O8FMsLZzQmTzJAfb6QV3gRMAS0XqTbB/8FMAp44fCMsglFy4Kappz+PhPRfbUpoIwTnLK/a5SCPb7fMGTv6bg/lZ6B1OMknK3JP+9XKqkKAEMYiNlpMCXK4IrnwCd7c2KrdHjcdG2a17fMm290zaKceFsxkWt7nXLoBywa70Tv5fsxem4xlv/Ag==</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>nickname</con:name><con:value/></con:property><con:property><con:name>beforeAPIstreamrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>beforeAPIstreamhistoryrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>afterAPIstreamhistoryrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>afterAPIstreamrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>nodertraccountid</con:name><con:value>100102</con:value></con:property><con:property><con:name>nodertruserid</con:name><con:value>100202</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpuuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>llpuuid</con:name><con:value>${#Project#assertLLPuuid}</con:value></con:property><con:property><con:name>rtruuid</con:name><con:value>${#Project#assertRTRuuid}</con:value></con:property><con:property><con:name>streamcntbefore</con:name><con:value>10</con:value></con:property><con:property><con:name>streamcntafter</con:name><con:value>10</con:value></con:property><con:property><con:name>streamhistorybefore</con:name><con:value>0</con:value></con:property><con:property><con:name>streamhistoryafter</con:name><con:value>0</con:value></con:property><con:property><con:name>rtraccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>rtruserid</con:name><con:value>600</con:value></con:property><con:property><con:name>rtrorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeorgid</con:name><con:value>3</con:value></con:property><con:property><con:name>llpnodeaccountid</con:name><con:value>910600</con:value></con:property><con:property><con:name>llpassert</con:name><con:value>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</con:value></con:property><con:property><con:name>llpaccountid</con:name><con:value>3</con:value></con:property><con:property><con:name>llpuserid</con:name><con:value>3</con:value></con:property><con:property><con:name>llpnodeid</con:name><con:value>910</con:value></con:property><con:property><con:name>llpnodeuserid</con:name><con:value>100600</con:value></con:property><con:property><con:name>llporgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpnodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpnodeuserid</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpaccountid</con:name><con:value/></con:property><con:property><con:name>dlpuserid</con:name><con:value/></con:property><con:property><con:name>dlpnodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>dlporgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>interations</con:name><con:value>3</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value>13370</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value>13372</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>13364</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>errorRespType</con:name><con:value>CID_NOT_GRANTED</con:value></con:property><con:property><con:name>coorcsnodeuserid</con:name><con:value>10060007</con:value></con:property><con:property><con:name>streamdeletenodeaccount</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>llpcsnodeaccountid</con:name><con:value>9109115</con:value></con:property><con:property><con:name>coorcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>llpaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>orgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>912</con:value></con:property><con:property><con:name>portOrg1Full1_nodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>portalnodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>portOrg1Basic1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>streamcreateassert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E6BC04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>portalnodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_10550 - StreamCreate - FUNC - DLP - StreamRightsNotGranted - PURCHASE_PROFILE.STREAM value of  'N'</con:value></con:property><con:property><con:name>dlpOrg1Full1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Basic1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Full1_nodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>dlpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Standard1_useroid</con:name><con:value>602</con:value></con:property><con:property><con:name>portOrg1Full1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeuserid</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeuserid</con:name><con:value>1006042</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>portaluserid</con:name><con:value>600</con:value></con:property><con:property><con:name>coorcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>portalaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>portalassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreaterequestuser</con:name><con:value>100604</con:value></con:property><con:property><con:name>streamcreatrequestuser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeuserid</con:name><con:value>10060210</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpcsnodeuserid</con:name><con:value>10060016</con:value></con:property><con:property><con:name>portOrg1Full1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>dlpOrg1Basic1_useroid</con:name><con:value>604</con:value></con:property><con:property><con:name>portalnodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeuserid</con:name><con:value>1006044</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF3250CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>dlpcsnodeid</con:name><con:value>9116</con:value></con:property><con:property><con:name>usernodeid</con:name><con:value/></con:property><con:property><con:name>rtrnodeaccountid</con:name><con:value>910602</con:value></con:property><con:property><con:name>portOrg1Basic1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>coorcsnodeid</con:name><con:value>9107</con:value></con:property><con:property><con:name>dlpOrg1Basic1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>streamdeleterequestuser</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpOrg1Standard1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpOrg1Full1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>coorcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Basic1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Full1_useroid</con:name><con:value>600</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>coorcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>portOrg1Standard1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpOrg1Full1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>dlpOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Full1_useroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Full1_assert</con:name><con:value>zVdZd6rKEn73V7jcj66EQU2MK3pWM4ioqExObwgttCIgDYL8+tNqdGt29nTvfbgPWbGLGr6q+rq7+v2ffOeXDzDGKAzaFeaZrpRhYIcOCtx2xTS6T83KP53SO7Z2PtsCGMM4IZplWWhXwthlnhiafqFphpjJGKdQDnBiBUm7whLZE918YmsGU2vVm61647n+Si8r5ek1GHsKRsIHuHV2366kcdAKLYxwK7B2ELcSu6UDZdgimi3rGrvS+UBzDhhTnXcHt3TkBlaSxvDDoYPbFS9JohZFZVn2nNWeCVqKpWmaot8oouNg5H6rkMw+jKEjB+vwsuatIAyQbfmosE4RFZh4oVMGvhvGKPF2P3HNUAx9cv0Ec/vJZurBtwr1PcAZ3R96egAZY+sJexZzdabBNYxJj2DZ1OR25dtjGy46RmwFeB3GO/xp/XehYXCAfhhB5wlfM7ii+HOPX5Sl8w7tlhzYforRAY5OvY4sG+LyJIZrlA8RJgxycPnc53KOrzSB9t+U/p26x0lgU19URkAuxMl/0pf7nly8TC0/hZ01aLxoG52N9ulmjVBfnQRKGMLmbCG2zxDulS+gbi39WH8m5I0/H0bgxYkm/Xrf96LBazaY6tWALbiiTtWacKEf1hwwx6uF4o7o3nSfcGAeHRrCxG30zKSYNXe9+DACmkxpuV5floZ2Nq/nLMRjdiLMB17CAGb2IhuWOo5NNqylou9vVnSoUIfqoN80Fg2bryGja1uRNJnPiyNKX5CoZzqzfy2ZIcZgYlUHHmJrEiOrS7X9Paf7HE55DeDxnOTp97xBvwlWYt0W/Gm7r8k2TGBHkWUhLXgeHHUXZDIHXPK3ASPO3e69LZLeMpoDqtoFAs/5G3GogK0EGFPkPIWfTpWcL0Cfc0dTYmiUgL/kFE3MhGwhTFW1J2ae4UjT40ry02UhjhSAz8a8p4iaOBU0Q1QUEF5kuSKspHyj6EomqwuhRBwIYh4VjvSWQClHNis3FL3BLvRGupxPibx7HO5Gh5Uh+gqvSLy+l3R5VRNUsQ+0xcxmuymxLYa7KCwtTO7OqB/BDYDdjCYxQaEY20wxTHYkaNZZZjzKFFnqKyrOePWclVQSs/7ULL7XgucU3tmJuWiAyaUWtsF3R/Ry3sfWrBEoGsgE92w8EDNnfAWiqHRW4i+1GoqZJmrmqKtociaCs0wQMx+v2JG3kryDXVPzvgE2943hVXHWDcj3QDvYx8a+ZEldsNpNGbumeTZqIGseZu6ymQnqoj8IlzJxMwKqyHEqIIBocEqN1J8DQ27aGEfojUVwuO6GO+jFJYUJB9tDkdNNVBu7k9GsIay3rxMJTWqW41Gyb7Ob2hbIMnQGjKdajragNCFAxct4YM4hihdFMmqozAtqNkraLDXnQui/Or35whxU84WtGuOJbs4mRZ6P9ptm4Se9MdeL9b4iuOMRhBNsVyna6nJGU2jwi96G8Gmt0bBRAq7CASBtXFdEhMBcb3MhYU9TREJeoPCZxM94SQeSVBVlTlDVdddjJrY0TU1mpMii45MyHRdzzS8teU4gnaKt2TJasF16aQDn7Eyti11XNRvV/hwu1ZFvTBOQRdN1wDC0FKm9tZK5tnJigCNnOkd2EVdKZWBa46hP54PpC83sVcfv62/ArOU6u83Hnrs8bt3lljRlcbd1Fgbwp8Ydx2RCsVlJNURNAc3LfssV2axpvr3Lo9XOzgWD9OxsHBqcqHVV2swFAQwuMmwANseLQtwovHi2L4FcsQgtDqu5hxfBCI0NMSWkTe/oslmx9G85dqJY6ZFjex6o4DPHxAvHRLDeV+WmwODGCx/hWeZykrhXX6fD/ltEq/PhtsRVu5SbIL8+DpqZMajOmGP26m3U2exNFjy+GqwXXm2VcLRV2Crsb18lpG2F4KXuH5WhojZMRPlHegP3GR6WRjITiLWk6FJvcVrldku0K4panTV3Ez09yKY1wMzRW+1nb9lm0nuhqFg6NorX5UHtzkN7cblHPh+SN+HlGKXuD9iHE/g6QOnpagPt5Lo83cOyUO6Sy9FKfj6MMc/MWYKcp/VZtZUGOII2gQGdSmcdQyd8p+5dforHh8EanQxPg+Tl5v316GfvWitoxTCu/MLTKemyHGhklAgDDI2wXcHkhEgDtE8JVo9csJXyKEzGwTgG6wTG5xmV+XpG1Ug6EYKnQfZuEIC5tYt8+GyHO8qy7TANEkx+4POs8VNgn79dcyA6Djop4BMsDpJiws9zc41t0VdMf4j96h6kDjqNFKQgSYzsC5LHT52P3HDiQHtvHayIeT5YzwFMyRAfn9O8Yr+ZfBY8uKc+Z3aL6ByQfePd7RkhC2Ty6QCOF8Sb38dvny3IyHsSn4Bjgpzghje8K1RQt1cC/oc8UayV7cAfPH/4uMkfsaWJF+gJ2U870v7yefn7R82DNUk/gXnylYz3CcBT8F++dOyWfdIj4gn5l4Wx873qX/j66uOj8JbPDVNCmrZKE/jzL+XT3m1XPniOnMpZcD0c7nbFffkFkRcpcDGRhcoPTs+z38cwn//sicZQc2Wo2x7cWZWbLvq98hM698km+5zot5JjRPDn5HFJggdupcOwtXrjVpcHSJ0fxD9K/osixtf5/m/KqInd/7sSgq7A8aSO5Kqq1f8npfy8OTv/Ag==</con:value></con:property><con:property><con:name>llpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Basic1_useroid</con:name><con:value>604</con:value></con:property><con:property><con:name>streamcreateuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>skipRemoveStreamsFlag</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>llpcsnodeuserid</con:name><con:value>10060015</con:value></con:property><con:property><con:name>coorcsnodeaccountid</con:name><con:value>9109107</con:value></con:property><con:property><con:name>rtrnodeuserid</con:name><con:value>100602</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>llpcsnodeid</con:name><con:value>9115</con:value></con:property><con:property><con:name>dlpcsnodeaccountid</con:name><con:value>9109116</con:value></con:property><con:property><con:name>dlpOrg1Basic1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreatenodeaccount</con:name><con:value>910604</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeuserid</con:name><con:value>10060410</con:value></con:property><con:property><con:name>portOrg1Standard1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>dlpOrg1Standard1_useroid</con:name><con:value>602</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>llpuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Full1_nodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>streamdeleteassert</con:name><con:value>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</con:value></con:property><con:property><con:name>portalorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpcsaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>dlpOrg1Standard1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_03025</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>CID_NOT_GRANTED</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:4CAFDC3C5853430199A291A33D7825CE</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B46AF4150CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>CID_NOT_GRANTED</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E6BB04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E6BB04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF3240CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AF3240CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF32C0CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AF32C0CB1E05305991F0A68AD</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6592b504-d1aa-4c08-a152-1ffc87171fc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24800 - StreamRenew - DLPCS - AccountNotActive - ACCOUNT.STATUS of pending - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="17d9b85f-877a-4d52-b678-c85069139060"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="463eeb82-5898-4989-b276-f3e6af059267"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f49ff97d-77e7-4d4d-9035-3eaf7bd0fa0f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="29b5caff-d7e0-4bc7-9869-01d8f303a018" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="0c8a1d01-044b-4b63-af5c-5386a7b12d80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="cdf787f1-91be-412b-97fb-0388dd7901cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to pending" id="0f55cfed-3b7e-40b2-836d-45d639304dbf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "pending");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="0ebf9520-2e06-48ce-8686-f6f7de427517"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="a409b8f9-8632-47a7-b11d-985874217b47"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="befd27db-ff3d-4674-9672-236423e12ce2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="5885eac0-730d-42ac-96fb-108e09d6dd2c" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81390</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_03025</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF3250CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E6BC04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb4T8ARmzC11C0kKNMnJS0bIa1Bjy8aSgeTXH8mAC4Tk0J4nj9arb7+9aHevGIoj0/UYg4yThFbWcUSZW0ibSp5RN0GMMJeiGJjLsTv2hgPXrOou2l1RKn63qTwbDcPULxFSDX3qqHZgYbVhOXW17kydwAnsWugEQpWxHHzKOKK8qZi64ai6rRq1iX7p6qZrGtWa3nhSKveQMYEtVKq6siW1Zk1lznnqatpqtaqurGqSzTRT1w3tcTgY4znESGldbTwqDGWtrT6uBoAhinAVJ7F2pR3oXAXMHZMZRTzPYGsr+MiWrukNTegEjMy+KOVdCHwaJsWxg2hCCUYReUMyPkPg8ySoeNEsyQifxx86YegSWIU1VrFh0y+KdkjtTKADhhlDKpsjY4s1ghAyoBgqP0d+U/lyXtaKq5MMURYmWcwOj3/GB+gSoiSFQGU7t7bUzgc8EanWFWDXpzjKGVnCjSzWFGFg22wCPh+qcpdBSNYDwkSBrplkp+3TOzpuotElM2D8bxK0l5wNyD2Kcmh12/66PySLxdtTenMRPnijfrxq25G3GjYLAvvKhaBM7eZ4VJRlEW1u5DPTmvPJd+vhbX09CKbDxmDa9aZff6DhZfpovWb/PF78GHyf5vULHX+DgdOLHq3527Xzo+bcPPW/hRAPRoNral944zhbsNWLz7QHz+jXn8x16o9uA0oM8+Lenzrcjqxoxp3ebVR7GaOVb0y791B/MRo8+zkf3Iedb/y23u+FjWgxpXV4mj6ancnFVy9p9351Hrxm6c4e/0PZ7s2P8+kvwHx3lGXgdyt9kSXEP29mUkICNSxU3VQ2H8aBcqUlb8ne4eai3ZHAFTncnA2ra3b6XaNXa7d1u9/o6Y6lXzYaRl/37Lbe2TWZDYsjip2EhkTaki13UzafE8Sxy4AGkKnLJBedjimfIHYRRxWfjsQjSCiDSSLac5jSyLbMl2j5xg16+TpLL408azRqSuUm4bf0NvNCDtlBTzb0g548AkxSArJxy7pmorAZF7FYoGXOI6O6RFUKuWjtmeyyrmnXHY2ROI1AMtXiJMgjqKbztIiMxjZfU0WYFdJRb1K8tg/9Ov63C4HQCYhUYNKXNog0wonhYuwceedw7eQQ2sF7eUDkwxLx5BnBGyaHv36XiayPska6A298tyNd6v7B3efO+Nn4S4DB/wUQ+Xh/U/skJtpxOkpDwZLsmd1tDmIGia7V2hXTAhnVRTVfLvOifmzb0jIBr8lEarqpjQHnoq++TpIXoFqJop01xEriR8ZL+SHFnM/pmCMOsaj3SnE8Y2sZA5Nbiy8e6vrclejApAgdhzU/JetEYuOSjD9dyrCLpZ4Q34nPKsl+O34Ka8+O8FMsLZzQmTzJAfb6QV3gRMAS0XqTbB/8FMAp44fCMsglFy4Kappz+PhPRfbUpoIwTnLK/a5SCPb7fMGTv6bg/lZ6B1OMknK3JP+9XKqkKAEMYiNlpMCXK4IrnwCd7c2KrdHjcdG2a17fMm290zaKceFsxkWt7nXLoBywa70Tv5fsxem4xlv/Ag==</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3DFCB73C9F274B2AA102CDF7598A24A5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E7F704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AF3240CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF3240CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E6BB04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E6BB04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AF32C0CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF32C0CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD1E7F704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:3DFCB73C9F274B2AA102CDF7598A24A5</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>0ebf9520-2e06-48ce-8686-f6f7de427517</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24840 - StreamRenew - DLPCS - ACCOUNT_USER.STATUS of pending - 200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a986efcc-8707-4e68-ad3d-a7ddb5f12622" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7434fa82-01f5-4815-b5be-2a7d6d45b650"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="5b89cec3-a461-4f50-99a3-179eab44e987"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="42c8fa72-0c39-4baf-9b3c-aa3b224d1638" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="c9f24b04-46b5-4ed4-8f0c-530c43ac9df6"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="2cbf28b7-6712-47dd-abcf-d03cd6cfa006"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="06333c39-7b13-4511-8983-2e71cc3be761"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="4d443f54-3690-4e4a-ac0d-4749ba717724"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to pending" id="c053d791-5c44-4743-bf1a-4096d506574d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "pending");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="9f3aaec6-0c1b-4d7e-91e1-cb3a55859dbd"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="96f4aaa6-9515-4457-8f8b-44c398f34403"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="abb8a013-666a-4a26-8147-1f0dd82247a2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="897d5939-b93f-43e9-8be1-7028f5aec4ee" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81398</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC010EC8D92450F1E0401F0A05997B94</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FBFE63D1C81AF2E3E0401F0A0799676E</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>9f3aaec6-0c1b-4d7e-91e1-cb3a55859dbd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24846 - StreamRenew - DLPCS - ACCOUNT_USER.STATUS of blocked:tou - 200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b8a6c040-1f88-4c86-8a20-5380180e8848" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e519925d-3cc6-4584-9cca-1422dcf43250"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="faf60d1b-c39b-4551-afeb-9f5d5de4a616"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="1471f9ce-6a10-4082-957d-5f3ae21bac54" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="9594e2e3-a74d-429e-b729-d45a95306177"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="2e6ad639-bab1-4ad1-aab8-b174eae446b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="a51142f6-41cf-4d2d-92f2-dbb694101656"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="e0934e8a-6a26-4bbc-9590-7fcc1877bd56"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to blocked:tou" id="85cfbc5b-8f0e-4387-a850-5a9f458096d2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "blocked:tou");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="b393e1cf-680b-4b39-bfe6-5c6c0985771d"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="ed9cedb1-eedc-460d-950d-5fa284a04e39"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="55a54a4a-2060-4d20-b402-dec315787a85"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="2235a8e3-1b09-421e-aacc-f37956e860f3" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC010ECDEC3C7AE8E0401F0A05997B96</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FBFA770A8F20D2D0E0401F0A07990C24</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b393e1cf-680b-4b39-bfe6-5c6c0985771d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24851 - StreamRenew - DLPCS - Stream_renew _by_DLPCS_Manage account consent present - 200 OK_MIGRATED" searchProperties="true" id="502bb322-6019-40bb-94f8-c47eb3a4a136"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="483567a0-f916-4189-9c11-2912ef36edbb"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="d0297b48-bed4-4135-bb6d-a587fe24e598"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="ed7fabb2-e61d-4f96-9d17-00e85554cf59" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="a4a6e498-1035-49d8-a097-792a6c272868"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="1a346319-77a5-4c54-828e-b99e36bae32c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="346936e5-fffb-415d-9f2d-b5dac2b55dc9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="6f48331c-fb5d-43bf-ac35-213c5e32727b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="2bccfc39-1d4b-41b9-adb3-4fbc87d30ab4"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="d5453c9c-8b1e-413e-b9af-1b8e36116777"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="99f0eded-90ce-4ea1-b5d3-11afa646253a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="6232308c-40a1-424c-94d4-609bfa9d9873" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="052a9ea8-05ee-4836-b8cb-e3cfa92e7198" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="935bdce2-4d5c-4509-aac1-7c35d83ebc2a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>274471E5F0584F028DF83D9FDE96D44D</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb4T8ARmzC11C0kKNMnJS0bIa1Bjy8aSgeTXH8mAC4Tk0J4nj9arb7+9aHevGIoj0/UYg4yThFbWcUSZW0ibSp5RN0GMMJeiGJjLsTv2hgPXrOou2l1RKn63qTwbDcPULxFSDX3qqHZgYbVhOXW17kydwAnsWugEQpWxHHzKOKK8qZi64ai6rRq1iX7p6qZrGtWa3nhSKveQMYEtVKq6siW1Zk1lznnqatpqtaqurGqSzTRT1w3tcTgY4znESGldbTwqDGWtrT6uBoAhinAVJ7F2pR3oXAXMHZMZRTzPYGsr+MiWrukNTegEjMy+KOVdCHwaJsWxg2hCCUYReUMyPkPg8ySoeNEsyQifxx86YegSWIU1VrFh0y+KdkjtTKADhhlDKpsjY4s1ghAyoBgqP0d+U/lyXtaKq5MMURYmWcwOj3/GB+gSoiSFQGU7t7bUzgc8EanWFWDXpzjKGVnCjSzWFGFg22wCPh+qcpdBSNYDwkSBrplkp+3TOzpuotElM2D8bxK0l5wNyD2Kcmh12/66PySLxdtTenMRPnijfrxq25G3GjYLAvvKhaBM7eZ4VJRlEW1u5DPTmvPJd+vhbX09CKbDxmDa9aZff6DhZfpovWb/PF78GHyf5vULHX+DgdOLHq3527Xzo+bcPPW/hRAPRoNral944zhbsNWLz7QHz+jXn8x16o9uA0oM8+Lenzrcjqxoxp3ebVR7GaOVb0y791B/MRo8+zkf3Iedb/y23u+FjWgxpXV4mj6ancnFVy9p9351Hrxm6c4e/0PZ7s2P8+kvwHx3lGXgdyt9kSXEP29mUkICNSxU3VQ2H8aBcqUlb8ne4eai3ZHAFTncnA2ra3b6XaNXa7d1u9/o6Y6lXzYaRl/37Lbe2TWZDYsjip2EhkTaki13UzafE8Sxy4AGkKnLJBedjimfIHYRRxWfjsQjSCiDSSLac5jSyLbMl2j5xg16+TpLL408azRqSuUm4bf0NvNCDtlBTzb0g548AkxSArJxy7pmorAZF7FYoGXOI6O6RFUKuWjtmeyyrmnXHY2ROI1AMtXiJMgjqKbztIiMxjZfU0WYFdJRb1K8tg/9Ov63C4HQCYhUYNKXNog0wonhYuwceedw7eQQ2sF7eUDkwxLx5BnBGyaHv36XiayPska6A298tyNd6v7B3efO+Nn4S4DB/wUQ+Xh/U/skJtpxOkpDwZLsmd1tDmIGia7V2hXTAhnVRTVfLvOifmzb0jIBr8lEarqpjQHnoq++TpIXoFqJop01xEriR8ZL+SHFnM/pmCMOsaj3SnE8Y2sZA5Nbiy8e6vrclejApAgdhzU/JetEYuOSjD9dyrCLpZ4Q34nPKsl+O34Ka8+O8FMsLZzQmTzJAfb6QV3gRMAS0XqTbB/8FMAp44fCMsglFy4Kappz+PhPRfbUpoIwTnLK/a5SCPb7fMGTv6bg/lZ6B1OMknK3JP+9XKqkKAEMYiNlpMCXK4IrnwCd7c2KrdHjcdG2a17fMm290zaKceFsxkWt7nXLoBywa70Tv5fsxem4xlv/Ag==</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2CFD28A0B0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_03025</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:274471E5F0584F028DF83D9FDE96D44D</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD28A0B0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF3250CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E6BC04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E6BB04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E6BB04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF3240CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AF3240CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF32C0CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AF32C0CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>daad333d-0ced-4a2f-b6b0-f66bb6e171fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1a346319-77a5-4c54-828e-b99e36bae32c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a4a6e498-1035-49d8-a097-792a6c272868</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2bccfc39-1d4b-41b9-adb3-4fbc87d30ab4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24852 - StreamRenew - DLPCS - Stream_Renew_By_DLP_ManageAccountConsentPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e2521805-5c9d-4e14-a5f4-c8fb8245f669"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="35cfadd8-940f-47cc-b086-1d881114e3cf"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="4b84895c-d987-4ce5-a879-d6b3d9b6b288"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="246e4108-1f4c-4b23-9de2-f8d557571cbc" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="1d54b278-44bd-4c19-8b03-3fd11afe9ed5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="b8277576-d1ab-4651-8141-81151217abcc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="c17e32fa-09e2-4918-8844-51bb21e71666"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLP" id="e4e76f3a-9ed3-483f-b223-be7ac2b75e01"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="317e499f-7548-4953-899d-a982e0f639c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="60f5576b-98a9-482d-910e-76ae7a59e264"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="90ee9e72-86dd-44b8-8aa7-db0f7cee5bfa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="eed0996d-57cf-4fdd-b059-44ff81e48580" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="e7df96dd-7686-44d5-8b53-d1b1048695f6" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="df0dd554-2ded-4d25-8c0f-71e3cb68880b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="26c172d3-612e-41df-adfa-d7e9f6353aac" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_03025</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:2301BEC9D7CD4E18B6E4A1BB1967926B</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D30B56887567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF3250CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E6BC04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb4T8ARmzC11C0kKNMnJS0bIa1Bjy8aSgeTXH8mAC4Tk0J4nj9arb7+9aHevGIoj0/UYg4yThFbWcUSZW0ibSp5RN0GMMJeiGJjLsTv2hgPXrOou2l1RKn63qTwbDcPULxFSDX3qqHZgYbVhOXW17kydwAnsWugEQpWxHHzKOKK8qZi64ai6rRq1iX7p6qZrGtWa3nhSKveQMYEtVKq6siW1Zk1lznnqatpqtaqurGqSzTRT1w3tcTgY4znESGldbTwqDGWtrT6uBoAhinAVJ7F2pR3oXAXMHZMZRTzPYGsr+MiWrukNTegEjMy+KOVdCHwaJsWxg2hCCUYReUMyPkPg8ySoeNEsyQifxx86YegSWIU1VrFh0y+KdkjtTKADhhlDKpsjY4s1ghAyoBgqP0d+U/lyXtaKq5MMURYmWcwOj3/GB+gSoiSFQGU7t7bUzgc8EanWFWDXpzjKGVnCjSzWFGFg22wCPh+qcpdBSNYDwkSBrplkp+3TOzpuotElM2D8bxK0l5wNyD2Kcmh12/66PySLxdtTenMRPnijfrxq25G3GjYLAvvKhaBM7eZ4VJRlEW1u5DPTmvPJd+vhbX09CKbDxmDa9aZff6DhZfpovWb/PF78GHyf5vULHX+DgdOLHq3527Xzo+bcPPW/hRAPRoNral944zhbsNWLz7QHz+jXn8x16o9uA0oM8+Lenzrcjqxoxp3ebVR7GaOVb0y791B/MRo8+zkf3Iedb/y23u+FjWgxpXV4mj6ancnFVy9p9351Hrxm6c4e/0PZ7s2P8+kvwHx3lGXgdyt9kSXEP29mUkICNSxU3VQ2H8aBcqUlb8ne4eai3ZHAFTncnA2ra3b6XaNXa7d1u9/o6Y6lXzYaRl/37Lbe2TWZDYsjip2EhkTaki13UzafE8Sxy4AGkKnLJBedjimfIHYRRxWfjsQjSCiDSSLac5jSyLbMl2j5xg16+TpLL408azRqSuUm4bf0NvNCDtlBTzb0g548AkxSArJxy7pmorAZF7FYoGXOI6O6RFUKuWjtmeyyrmnXHY2ROI1AMtXiJMgjqKbztIiMxjZfU0WYFdJRb1K8tg/9Ov63C4HQCYhUYNKXNog0wonhYuwceedw7eQQ2sF7eUDkwxLx5BnBGyaHv36XiayPska6A298tyNd6v7B3efO+Nn4S4DB/wUQ+Xh/U/skJtpxOkpDwZLsmd1tDmIGia7V2hXTAhnVRTVfLvOifmzb0jIBr8lEarqpjQHnoq++TpIXoFqJop01xEriR8ZL+SHFnM/pmCMOsaj3SnE8Y2sZA5Nbiy8e6vrclejApAgdhzU/JetEYuOSjD9dyrCLpZ4Q34nPKsl+O34Ka8+O8FMsLZzQmTzJAfb6QV3gRMAS0XqTbB/8FMAp44fCMsglFy4Kappz+PhPRfbUpoIwTnLK/a5SCPb7fMGTv6bg/lZ6B1OMknK3JP+9XKqkKAEMYiNlpMCXK4IrnwCd7c2KrdHjcdG2a17fMm290zaKceFsxkWt7nXLoBywa70Tv5fsxem4xlv/Ag==</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AF3240CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF3240CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E6BB04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E6BB04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D30B56887567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>2301BEC9D7CD4E18B6E4A1BB1967926B</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AF32C0CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF32C0CB1E05305991F0A68AD</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>60f5576b-98a9-482d-910e-76ae7a59e264</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>317e499f-7548-4953-899d-a982e0f639c4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c17e32fa-09e2-4918-8844-51bb21e71666</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24853 - StreamRenew - DLPCS - Stream_Renew_By_DLPCS_ManageAccountConsentPresent_diffOrg - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="89ea0ffb-d730-4a16-831e-9bda5162591d" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0e3208f9-e352-47c6-9938-e565485ec9e5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="21a97fed-ea65-44e6-b900-09b5cb725776"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="68c13f07-1dba-4fb8-a218-29f5e08052ea" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d7f226c2-615e-4acb-9c11-bd7866754bda"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e572fb0f-e429-461d-b3a6-99ac2b69969b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="887c9603-2d89-45f5-a2c2-9938b284a45e"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="e45fe3ec-ac60-4e7d-807d-35add15a4d34"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="6607f57b-0b37-4f40-a769-55f5f4ff18ba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="16e72b5d-20bf-4441-8b4d-d32e270b506c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="e7e6f2f4-b4cc-42c6-a582-2f5dbe4178c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="d1292a28-567b-4f1d-bdf6-2178b7921ff6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="ba43a48d-e139-4099-aed0-53a554dbeb03" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="b7f44fa5-45cd-4899-b21b-3dc860782792" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="5e918632-9840-4f8b-910d-e0f37c331c35" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FBFE63BB2FDCD097E0401F0A05995054</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FBFFA359883ACA08E0401F0A0799755B</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>16e72b5d-20bf-4441-8b4d-d32e270b506c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6607f57b-0b37-4f40-a769-55f5f4ff18ba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>887c9603-2d89-45f5-a2c2-9938b284a45e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24854 - StreamRenew - DLPCS - Stream_Renew_By_LLPCS_ManageAccountConsentPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9d9e4c02-07be-4571-b9c3-ebaad9a8a5c7"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="fec03262-7b0b-4aea-a760-a7c72cc2e7f2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="40687fd4-ca1d-4ca7-9894-af99547dab19"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="382749b9-7d33-4aca-93e0-a480500797fa" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="8a69b8e8-8f7c-41a6-b55b-1babc534318c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="640d7c15-0af5-44b3-8994-aea5063ec3b4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="d68dd4f6-5b6d-4bde-8cf0-254a77230fd9"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to LLPCS" id="9aae0a19-1097-4a3e-b348-88480e3afe62"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="4e382222-3e9e-4174-b343-0762a27a07cf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="86e622e3-5237-4a1d-a1ae-9352d6f2e3c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="8a7f0b84-636c-4168-bb87-c6e0631e1c36"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="5b3b0a04-96ff-40f5-b1ac-a9d5b26f786b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="5bcc33a4-28c2-4de4-b78a-8ae8cdfc2e90" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="5cc52b2e-1de2-4add-a203-399fad79e2fd" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="e69899aa-2f28-465a-a0ee-372d579a7aa9" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_03025</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FFEDEB38CB254626800A033416C09D5E</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD1E80B04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF3250CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E6BC04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb4T8ARmzC11C0kKNMnJS0bIa1Bjy8aSgeTXH8mAC4Tk0J4nj9arb7+9aHevGIoj0/UYg4yThFbWcUSZW0ibSp5RN0GMMJeiGJjLsTv2hgPXrOou2l1RKn63qTwbDcPULxFSDX3qqHZgYbVhOXW17kydwAnsWugEQpWxHHzKOKK8qZi64ai6rRq1iX7p6qZrGtWa3nhSKveQMYEtVKq6siW1Zk1lznnqatpqtaqurGqSzTRT1w3tcTgY4znESGldbTwqDGWtrT6uBoAhinAVJ7F2pR3oXAXMHZMZRTzPYGsr+MiWrukNTegEjMy+KOVdCHwaJsWxg2hCCUYReUMyPkPg8ySoeNEsyQifxx86YegSWIU1VrFh0y+KdkjtTKADhhlDKpsjY4s1ghAyoBgqP0d+U/lyXtaKq5MMURYmWcwOj3/GB+gSoiSFQGU7t7bUzgc8EanWFWDXpzjKGVnCjSzWFGFg22wCPh+qcpdBSNYDwkSBrplkp+3TOzpuotElM2D8bxK0l5wNyD2Kcmh12/66PySLxdtTenMRPnijfrxq25G3GjYLAvvKhaBM7eZ4VJRlEW1u5DPTmvPJd+vhbX09CKbDxmDa9aZff6DhZfpovWb/PF78GHyf5vULHX+DgdOLHq3527Xzo+bcPPW/hRAPRoNral944zhbsNWLz7QHz+jXn8x16o9uA0oM8+Lenzrcjqxoxp3ebVR7GaOVb0y791B/MRo8+zkf3Iedb/y23u+FjWgxpXV4mj6ancnFVy9p9351Hrxm6c4e/0PZ7s2P8+kvwHx3lGXgdyt9kSXEP29mUkICNSxU3VQ2H8aBcqUlb8ne4eai3ZHAFTncnA2ra3b6XaNXa7d1u9/o6Y6lXzYaRl/37Lbe2TWZDYsjip2EhkTaki13UzafE8Sxy4AGkKnLJBedjimfIHYRRxWfjsQjSCiDSSLac5jSyLbMl2j5xg16+TpLL408azRqSuUm4bf0NvNCDtlBTzb0g548AkxSArJxy7pmorAZF7FYoGXOI6O6RFUKuWjtmeyyrmnXHY2ROI1AMtXiJMgjqKbztIiMxjZfU0WYFdJRb1K8tg/9Ov63C4HQCYhUYNKXNog0wonhYuwceedw7eQQ2sF7eUDkwxLx5BnBGyaHv36XiayPska6A298tyNd6v7B3efO+Nn4S4DB/wUQ+Xh/U/skJtpxOkpDwZLsmd1tDmIGia7V2hXTAhnVRTVfLvOifmzb0jIBr8lEarqpjQHnoq++TpIXoFqJop01xEriR8ZL+SHFnM/pmCMOsaj3SnE8Y2sZA5Nbiy8e6vrclejApAgdhzU/JetEYuOSjD9dyrCLpZ4Q34nPKsl+O34Ka8+O8FMsLZzQmTzJAfb6QV3gRMAS0XqTbB/8FMAp44fCMsglFy4Kappz+PhPRfbUpoIwTnLK/a5SCPb7fMGTv6bg/lZ6B1OMknK3JP+9XKqkKAEMYiNlpMCXK4IrnwCd7c2KrdHjcdG2a17fMm290zaKceFsxkWt7nXLoBywa70Tv5fsxem4xlv/Ag==</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2B46AF3240CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF3240CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E6BB04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E6BB04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2CFD1E80B04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FFEDEB38CB254626800A033416C09D5E</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AF32C0CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF32C0CB1E05305991F0A68AD</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>86e622e3-5237-4a1d-a1ae-9352d6f2e3c7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4e382222-3e9e-4174-b343-0762a27a07cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d68dd4f6-5b6d-4bde-8cf0-254a77230fd9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_20041 - StreamRenew - DLPCS - AccountIdUnmatched - Full user can renew full-user created stream - 403 Forbidden_MIGRATED" searchProperties="true" id="38587a42-dd86-4a1b-9005-80532fe0238b"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="38d70c75-b504-45d9-a850-f0d1a5599567"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_ACCOUNTID_MISMATCH");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="c6930d15-2850-4b98-9900-5c4046802d7b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="02a68743-cee7-4014-89a3-b00817caf8ad" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="6129489d-f8d9-47a2-bbd0-db6b5501ec11"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4b11cd0f-070a-4ed4-8bc9-71179781e6f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="0a6b0c52-322a-4f9a-93a4-97363ef31588"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="79672a78-10b8-4faf-a830-334ffb041ea8"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Change the assertionAccountIdFULL value" id="a5115f15-b3b8-4c13-b7c4-a5edfd03f38d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = tP.getPropertyValue("urnaccount");

tC.setPropertyValue("assertionAccountIdFULL","${a}100100");</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f676c2b6-2577-4624-8c45-ad16b77cab39"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="dc17a6dc-6988-4dc7-969b-b3fb92ef90d6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="41974333-613f-498c-bce2-fcbae2f5ad15" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>AB222F9483FE4592AD8AAA0214057D23</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPuYMb4T8ARmzC11C0kKNMnJS0bIa1Bjy8aSgeTXH8mAC4Tk0J4nj9arb7+9aHevGIoj0/UYg4yThFbWcUSZW0ibSp5RN0GMMJeiGJjLsTv2hgPXrOou2l1RKn63qTwbDcPULxFSDX3qqHZgYbVhOXW17kydwAnsWugEQpWxHHzKOKK8qZi64ai6rRq1iX7p6qZrGtWa3nhSKveQMYEtVKq6siW1Zk1lznnqatpqtaqurGqSzTRT1w3tcTgY4znESGldbTwqDGWtrT6uBoAhinAVJ7F2pR3oXAXMHZMZRTzPYGsr+MiWrukNTegEjMy+KOVdCHwaJsWxg2hCCUYReUMyPkPg8ySoeNEsyQifxx86YegSWIU1VrFh0y+KdkjtTKADhhlDKpsjY4s1ghAyoBgqP0d+U/lyXtaKq5MMURYmWcwOj3/GB+gSoiSFQGU7t7bUzgc8EanWFWDXpzjKGVnCjSzWFGFg22wCPh+qcpdBSNYDwkSBrplkp+3TOzpuotElM2D8bxK0l5wNyD2Kcmh12/66PySLxdtTenMRPnijfrxq25G3GjYLAvvKhaBM7eZ4VJRlEW1u5DPTmvPJd+vhbX09CKbDxmDa9aZff6DhZfpovWb/PF78GHyf5vULHX+DgdOLHq3527Xzo+bcPPW/hRAPRoNral944zhbsNWLz7QHz+jXn8x16o9uA0oM8+Lenzrcjqxoxp3ebVR7GaOVb0y791B/MRo8+zkf3Iedb/y23u+FjWgxpXV4mj6ancnFVy9p9351Hrxm6c4e/0PZ7s2P8+kvwHx3lGXgdyt9kSXEP29mUkICNSxU3VQ2H8aBcqUlb8ne4eai3ZHAFTncnA2ra3b6XaNXa7d1u9/o6Y6lXzYaRl/37Lbe2TWZDYsjip2EhkTaki13UzafE8Sxy4AGkKnLJBedjimfIHYRRxWfjsQjSCiDSSLac5jSyLbMl2j5xg16+TpLL408azRqSuUm4bf0NvNCDtlBTzb0g548AkxSArJxy7pmorAZF7FYoGXOI6O6RFUKuWjtmeyyrmnXHY2ROI1AMtXiJMgjqKbztIiMxjZfU0WYFdJRb1K8tg/9Ov63C4HQCYhUYNKXNog0wonhYuwceedw7eQQ2sF7eUDkwxLx5BnBGyaHv36XiayPska6A298tyNd6v7B3efO+Nn4S4DB/wUQ+Xh/U/skJtpxOkpDwZLsmd1tDmIGia7V2hXTAhnVRTVfLvOifmzb0jIBr8lEarqpjQHnoq++TpIXoFqJop01xEriR8ZL+SHFnM/pmCMOsaj3SnE8Y2sZA5Nbiy8e6vrclejApAgdhzU/JetEYuOSjD9dyrCLpZ4Q34nPKsl+O34Ka8+O8FMsLZzQmTzJAfb6QV3gRMAS0XqTbB/8FMAp44fCMsglFy4Kappz+PhPRfbUpoIwTnLK/a5SCPb7fMGTv6bg/lZ6B1OMknK3JP+9XKqkKAEMYiNlpMCXK4IrnwCd7c2KrdHjcdG2a17fMm290zaKceFsxkWt7nXLoBywa70Tv5fsxem4xlv/Ag==</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2B46AF4810CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_03025</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:AB222F9483FE4592AD8AAA0214057D23</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2B46AF4810CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF3250CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E6BC04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2CFD1E6BB04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E6BB04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF3240CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:100100</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2B46AF32C0CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2B46AF32C0CB1E05305991F0A68AD</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c8d9f205-8ea3-49e9-ae2b-8ffe3972bd14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>218c136d-d1b9-496a-8355-29e9f2f4ed84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Dynamic LASP Customer Service Test Cases_P2" id="4fff53e9-8707-4a19-8fde-8d7206c89824"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\ashwin.tikle\Desktop\Reports\Reports 106.2.3\LP1_R3\Stream Renew</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00000 - StreamRenew - DLPCS - Test Suite Staging" searchProperties="true" id="5a7685bd-ce20-45a0-9efb-4510a5a51255"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="30ee2eb4-577d-4868-a74d-6ac986b575ca"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
tP.setPropertyValue("StreamCreateCount","12");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9cce0250-30df-4efe-85ce-9bb96df9765b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="f7aee74c-9d2e-41b2-b207-c953e690b561"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="952bf366-2797-42a2-a0dd-397660fd3e84"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="9aff4ae2-8ac9-4ea0-8833-596bd84f6889"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="0c3cb797-ea42-420c-8f4a-e63792a72799" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="64ba672e-46bc-4de9-9ca1-343882b4c458" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_114044</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7832B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AF72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMfI1gCcwAzi0pKS5QNKcvGSMvAYltuRYsiH8+iMZcIFcDu158mi9+vbbi3b3lAdJbHldziEThNHaMokp90ppW8sz6rGAE+7RIAHuCeyNuxcjz6obXrC9otWGflt7jKBhW8aJrTuADd1xWqE+tVxXt6dgTs2WEYWNSKpynsOQchFQ0dYsw3R1w9EtZ2K0PMPyDKNuN5wHrXYHGZfYUqVuaBtSS97W5kKkHkKLxaK+sOssmyHLMEx0fzEa4zkkgdY5XXtUGso6G31cDwFDHOM6Zgk6RXs6pyH3xmRGA5FnsLEVfmTLQEYLSZ2Qk9kXrboL4ZBGrDz2A8oowUFMVoGKzwWIOQtr3XjGMiLmyYdOmIYC1mGJdWw69IuG9qkdCbTHMOOBzueBucG6gQgyoBhqtzfDtvbluKyVVydZQHnEsoTvH/+MD9ACYpZCqPOtWxtqxwO+E6nOKWBvSHGcc1LAT1WsaYCBb7IJ+Hio2lUGEVmOCJcFuuSKHdqld3BcR8MnM+DibxK0k5w1yF0Q59Bp0nOn/zJrWr3Cde8Wl/x6EF/8ujgJ57N2SWBXuRRUqV0fD4qyKqL1jetzcmunrRfSmwwWkW3kUDyv0GV+NW2trHu4S9FJZj0UPwbfblvno0Z/aF88TeEbI6hIJ8mC5SxN4rPR1x/+r/B8uMiWVq+5errFiFlFiqYP/op+/z58HY4fmHs+uMXXvWJiGe7YMvon0Y9BPLjr21fR6jo4vxxfo8bZQwOcQbR8vv/nqdn9avqr/uD7k4+jBntuV+7s8N+Xbd/8OJ8+ARbboyqDoV8byCwF4vNmpiQk1KNS1UtV8+ECqNA66pbqHV4u2x0JPZnD9dl0Gq7bG3Qtt3vWsHzzzHBto9FqmQOj2/Jtf9tk1iwOKPYZjYiypVruumw+J4gTjwMNIdMLlstOx7VPEP1ABLUhvZGPgFEOEybbs7lkC7qyMrZ6NuYsesrnznwBs9jSaj+ZuKSXWTcSkO31ZNPa68k3gElKQDVuVddcFjYXMhYvQZGL2KwXQZ1CLlt7prqsZzlNF3GSpDEopihhYR5DPZ2nZWQQX38tPcC8lN6cTcrX9qFfh/+2IZA6IVEKXPnSA5lGeDNcTM/dOvLG4ZN3h9AWvpuHRD0sGU+REbxmsv/rd5mo+qhqxB91x1db0pXuH9x97I8fzb8EGP1fAJmPtzfRJzFBh+moDIUF2TG73RzkDJJdq7MtppfArL/U86LIy/pxHBtlEh6pRCLDQmPAueyrrxP2DBRVKOioIVYRPzBeyfcp5mJOxyIQkMh6r5XHI7aWMXC1tQzlQ10euxLtmZShE7AU78n6sdy4FONPlzLsYaUnxVfys2BZ+Dtj72Dt2JF+yqVFEDpTJzXAXj+oC8wkLJGtl2W74O8BvGd8X1gFueIiZEFNcwEf/6mpntrWAoxZTsXQ10rBbp8veYrXFLzfSm9gylFS7Zbkv5dLnZQlgEFupJyU+GpF8NQToLOdWbExejguThpu76zRtKyePSjHhbsZF4OmXQVlj13njfitZCdOhzXe+Rc=</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81313</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1475675BE78A2B3FE05305991F0A9F83</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_21009 - StreamRenew - DLPCS - StreamOwnerMismatch - Stream handle same account/user CREATED_BY different LASP - 403 Forbidden_MIGRATED" searchProperties="true" id="89c9f5ee-67bf-4fc8-a396-03cd010a06dc"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a stream handle owned by the same account but a different LASP</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2e4781f3-ee6e-4d84-b5f7-8710c217bc53"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="b4d42f74-8cc2-4553-9d1f-7107c264adb6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="a26dc71a-278b-4084-880d-c4db4672c620" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3652e794-3a79-41d9-940c-60923a236bad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="153d4f93-bcb5-46c0-b010-8c11e21416de"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="2c7ed784-6181-4f82-88ed-be8e474108a2"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="40d50ad4-ac50-4d6d-a241-d73a060a25ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="e82aa3fb-92cb-4c8b-a0dc-096fcdd13e4c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="b0286862-7aa0-44ff-be9e-7ffddd281ed7" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>02B898522B3A40C8B9D70F4EC49F989C</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMfI1gCcwAzi0pKS5QNKcvGSMvAYltuRYsiH8+iMZcIFcDu158mi9+vbbi3b3lAdJbHldziEThNHaMokp90ppW8sz6rGAE+7RIAHuCeyNuxcjz6obXrC9otWGflt7jKBhW8aJrTuADd1xWqE+tVxXt6dgTs2WEYWNSKpynsOQchFQ0dYsw3R1w9EtZ2K0PMPyDKNuN5wHrXYHGZfYUqVuaBtSS97W5kKkHkKLxaK+sOssmyHLMEx0fzEa4zkkgdY5XXtUGso6G31cDwFDHOM6Zgk6RXs6pyH3xmRGA5FnsLEVfmTLQEYLSZ2Qk9kXrboL4ZBGrDz2A8oowUFMVoGKzwWIOQtr3XjGMiLmyYdOmIYC1mGJdWw69IuG9qkdCbTHMOOBzueBucG6gQgyoBhqtzfDtvbluKyVVydZQHnEsoTvH/+MD9ACYpZCqPOtWxtqxwO+E6nOKWBvSHGcc1LAT1WsaYCBb7IJ+Hio2lUGEVmOCJcFuuSKHdqld3BcR8MnM+DibxK0k5w1yF0Q59Bp0nOn/zJrWr3Cde8Wl/x6EF/8ujgJ57N2SWBXuRRUqV0fD4qyKqL1jetzcmunrRfSmwwWkW3kUDyv0GV+NW2trHu4S9FJZj0UPwbfblvno0Z/aF88TeEbI6hIJ8mC5SxN4rPR1x/+r/B8uMiWVq+5errFiFlFiqYP/op+/z58HY4fmHs+uMXXvWJiGe7YMvon0Y9BPLjr21fR6jo4vxxfo8bZQwOcQbR8vv/nqdn9avqr/uD7k4+jBntuV+7s8N+Xbd/8OJ8+ARbboyqDoV8byCwF4vNmpiQk1KNS1UtV8+ECqNA66pbqHV4u2x0JPZnD9dl0Gq7bG3Qtt3vWsHzzzHBto9FqmQOj2/Jtf9tk1iwOKPYZjYiypVruumw+J4gTjwMNIdMLlstOx7VPEP1ABLUhvZGPgFEOEybbs7lkC7qyMrZ6NuYsesrnznwBs9jSaj+ZuKSXWTcSkO31ZNPa68k3gElKQDVuVddcFjYXMhYvQZGL2KwXQZ1CLlt7prqsZzlNF3GSpDEopihhYR5DPZ2nZWQQX38tPcC8lN6cTcrX9qFfh/+2IZA6IVEKXPnSA5lGeDNcTM/dOvLG4ZN3h9AWvpuHRD0sGU+REbxmsv/rd5mo+qhqxB91x1db0pXuH9x97I8fzb8EGP1fAJmPtzfRJzFBh+moDIUF2TG73RzkDJJdq7MtppfArL/U86LIy/pxHBtlEh6pRCLDQmPAueyrrxP2DBRVKOioIVYRPzBeyfcp5mJOxyIQkMh6r5XHI7aWMXC1tQzlQ10euxLtmZShE7AU78n6sdy4FONPlzLsYaUnxVfys2BZ+Dtj72Dt2JF+yqVFEDpTJzXAXj+oC8wkLJGtl2W74O8BvGd8X1gFueIiZEFNcwEf/6mpntrWAoxZTsXQ10rBbp8veYrXFLzfSm9gylFS7Zbkv5dLnZQlgEFupJyU+GpF8NQToLOdWbExejguThpu76zRtKyePSjHhbsZF4OmXQVlj13njfitZCdOhzXe+Rc=</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>14755BFA264172D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)}</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>righstokenid</con:name><con:value>141711</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-02 19:54:37.356</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-03 19:54:37.356</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-03 19:54:37.356</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-02 19:54:37.356</con:value></con:property><con:property><con:name>bstreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_023445</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:02B898522B3A40C8B9D70F4EC49F989C</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7832B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AF72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:14755BFA264172D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2011/03/13 12:53:29</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1475675BE78A2B3FE05305991F0A9F83</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2c7ed784-6181-4f82-88ed-be8e474108a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_21050 - StreamRenew - DLPCS - StreamNotActive - Stream handle supplied in 'deleted' status yet not expired - 403 Forbidden_MIGRATED" searchProperties="true" id="9e1a4f8e-f442-4928-9f0a-43fe8edaa11c"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a stream handle that is in 'deleted' status.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1827a45b-631b-4097-bd1e-cdc96861415b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="d570b9ef-b5f4-4a80-97ef-762b6bb9f197"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c7a82f94-b57b-4b95-aa5b-5b4821a10aec" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="fab9829a-f852-4020-9d1e-f081bd8b339c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="61ee4661-fe09-40cf-8bd8-e85103207be1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="27a27b94-95e3-49d1-8392-c3164b7d8a7f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="09101518-2fe3-4efd-bd19-dc6900ed6064"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="867cae37-71ab-42e8-a667-5d256c17a8c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="a4f029e6-f449-40ac-af44-a05dd7270b47" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="b1a8fc67-1a84-4129-9e72-dca322dedd36" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="2c4eb907-98d8-405c-a108-bbaebeac34ec" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="803e5024-723b-4a22-9b85-2a52f3bf3272" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMfI1gCcwAzi0pKS5QNKcvGSMvAYltuRYsiH8+iMZcIFcDu158mi9+vbbi3b3lAdJbHldziEThNHaMokp90ppW8sz6rGAE+7RIAHuCeyNuxcjz6obXrC9otWGflt7jKBhW8aJrTuADd1xWqE+tVxXt6dgTs2WEYWNSKpynsOQchFQ0dYsw3R1w9EtZ2K0PMPyDKNuN5wHrXYHGZfYUqVuaBtSS97W5kKkHkKLxaK+sOssmyHLMEx0fzEa4zkkgdY5XXtUGso6G31cDwFDHOM6Zgk6RXs6pyH3xmRGA5FnsLEVfmTLQEYLSZ2Qk9kXrboL4ZBGrDz2A8oowUFMVoGKzwWIOQtr3XjGMiLmyYdOmIYC1mGJdWw69IuG9qkdCbTHMOOBzueBucG6gQgyoBhqtzfDtvbluKyVVydZQHnEsoTvH/+MD9ACYpZCqPOtWxtqxwO+E6nOKWBvSHGcc1LAT1WsaYCBb7IJ+Hio2lUGEVmOCJcFuuSKHdqld3BcR8MnM+DibxK0k5w1yF0Q59Bp0nOn/zJrWr3Cde8Wl/x6EF/8ujgJ57N2SWBXuRRUqV0fD4qyKqL1jetzcmunrRfSmwwWkW3kUDyv0GV+NW2trHu4S9FJZj0UPwbfblvno0Z/aF88TeEbI6hIJ8mC5SxN4rPR1x/+r/B8uMiWVq+5errFiFlFiqYP/op+/z58HY4fmHs+uMXXvWJiGe7YMvon0Y9BPLjr21fR6jo4vxxfo8bZQwOcQbR8vv/nqdn9avqr/uD7k4+jBntuV+7s8N+Xbd/8OJ8+ARbboyqDoV8byCwF4vNmpiQk1KNS1UtV8+ECqNA66pbqHV4u2x0JPZnD9dl0Gq7bG3Qtt3vWsHzzzHBto9FqmQOj2/Jtf9tk1iwOKPYZjYiypVruumw+J4gTjwMNIdMLlstOx7VPEP1ABLUhvZGPgFEOEybbs7lkC7qyMrZ6NuYsesrnznwBs9jSaj+ZuKSXWTcSkO31ZNPa68k3gElKQDVuVddcFjYXMhYvQZGL2KwXQZ1CLlt7prqsZzlNF3GSpDEopihhYR5DPZ2nZWQQX38tPcC8lN6cTcrX9qFfh/+2IZA6IVEKXPnSA5lGeDNcTM/dOvLG4ZN3h9AWvpuHRD0sGU+REbxmsv/rd5mo+qhqxB91x1db0pXuH9x97I8fzb8EGP1fAJmPtzfRJzFBh+moDIUF2TG73RzkDJJdq7MtppfArL/U86LIy/pxHBtlEh6pRCLDQmPAueyrrxP2DBRVKOioIVYRPzBeyfcp5mJOxyIQkMh6r5XHI7aWMXC1tQzlQ10euxLtmZShE7AU78n6sdy4FONPlzLsYaUnxVfys2BZ+Dtj72Dt2JF+yqVFEDpTJzXAXj+oC8wkLJGtl2W74O8BvGd8X1gFueIiZEFNcwEf/6mpntrWAoxZTsXQ10rBbp8veYrXFLzfSm9gylFS7Zbkv5dLnZQlgEFupJyU+GpF8NQToLOdWbExejguThpu76zRtKyePSjHhbsZF4OmXQVlj13njfitZCdOhzXe+Rc=</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>1475675BE87D2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>100</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>CD69E9B88A544D44942F16DD6F1604A6</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_023445</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:CD69E9B88A544D44942F16DD6F1604A6</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7832B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AF72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1475675BE87D2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1475675BE78A2B3FE05305991F0A9F83</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>09101518-2fe3-4efd-bd19-dc6900ed6064</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22071 - StreamRenew - DLPCS - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of suspended cannot be renewed - 403 Forbidden_MIGRATED" searchProperties="true" id="554285c1-ec67-46ef-930b-75ec33276e05"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9d4c6309-fbea-4b20-907f-10155c2d744d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="b6d1559a-3a87-4c2e-a061-b4bf6dfb39ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="a496d189-8a7c-4625-8d6e-9a1813a87988" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b20f8e97-4f33-4348-b38a-6576f4040d0b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="d0c81904-750e-4022-8324-210186e0303a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="379cf0d2-edb8-4d7c-84b8-1cf5b58adcec"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to suspended" id="b820791d-39bd-42db-9941-3a243a88850b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert b.rightsTokenSetStatusSuspended(tC.getPropertyValue("rightstokenid")) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="e62a550d-ad72-4875-8b06-c7f3828b16fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="9061e9fe-805e-4c14-b34f-611e3a84b138" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="0d6ca97f-01ad-40e2-bd7c-a3261d967179" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="e9a88d45-07f9-4a7c-91ac-197c55585b68" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_023445</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:2C792351C9DC4D459D6F8812683FCB6A</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:14756FF438DE60E8E05305991F0A28A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7832B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AF72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMfI1gCcwAzi0pKS5QNKcvGSMvAYltuRYsiH8+iMZcIFcDu158mi9+vbbi3b3lAdJbHldziEThNHaMokp90ppW8sz6rGAE+7RIAHuCeyNuxcjz6obXrC9otWGflt7jKBhW8aJrTuADd1xWqE+tVxXt6dgTs2WEYWNSKpynsOQchFQ0dYsw3R1w9EtZ2K0PMPyDKNuN5wHrXYHGZfYUqVuaBtSS97W5kKkHkKLxaK+sOssmyHLMEx0fzEa4zkkgdY5XXtUGso6G31cDwFDHOM6Zgk6RXs6pyH3xmRGA5FnsLEVfmTLQEYLSZ2Qk9kXrboL4ZBGrDz2A8oowUFMVoGKzwWIOQtr3XjGMiLmyYdOmIYC1mGJdWw69IuG9qkdCbTHMOOBzueBucG6gQgyoBhqtzfDtvbluKyVVydZQHnEsoTvH/+MD9ACYpZCqPOtWxtqxwO+E6nOKWBvSHGcc1LAT1WsaYCBb7IJ+Hio2lUGEVmOCJcFuuSKHdqld3BcR8MnM+DibxK0k5w1yF0Q59Bp0nOn/zJrWr3Cde8Wl/x6EF/8ujgJ57N2SWBXuRRUqV0fD4qyKqL1jetzcmunrRfSmwwWkW3kUDyv0GV+NW2trHu4S9FJZj0UPwbfblvno0Z/aF88TeEbI6hIJ8mC5SxN4rPR1x/+r/B8uMiWVq+5errFiFlFiqYP/op+/z58HY4fmHs+uMXXvWJiGe7YMvon0Y9BPLjr21fR6jo4vxxfo8bZQwOcQbR8vv/nqdn9avqr/uD7k4+jBntuV+7s8N+Xbd/8OJ8+ARbboyqDoV8byCwF4vNmpiQk1KNS1UtV8+ECqNA66pbqHV4u2x0JPZnD9dl0Gq7bG3Qtt3vWsHzzzHBto9FqmQOj2/Jtf9tk1iwOKPYZjYiypVruumw+J4gTjwMNIdMLlstOx7VPEP1ABLUhvZGPgFEOEybbs7lkC7qyMrZ6NuYsesrnznwBs9jSaj+ZuKSXWTcSkO31ZNPa68k3gElKQDVuVddcFjYXMhYvQZGL2KwXQZ1CLlt7prqsZzlNF3GSpDEopihhYR5DPZ2nZWQQX38tPcC8lN6cTcrX9qFfh/+2IZA6IVEKXPnSA5lGeDNcTM/dOvLG4ZN3h9AWvpuHRD0sGU+REbxmsv/rd5mo+qhqxB91x1db0pXuH9x97I8fzb8EGP1fAJmPtzfRJzFBh+moDIUF2TG73RzkDJJdq7MtppfArL/U86LIy/pxHBtlEh6pRCLDQmPAueyrrxP2DBRVKOioIVYRPzBeyfcp5mJOxyIQkMh6r5XHI7aWMXC1tQzlQ10euxLtmZShE7AU78n6sdy4FONPlzLsYaUnxVfys2BZ+Dtj72Dt2JF+yqVFEDpTJzXAXj+oC8wkLJGtl2W74O8BvGd8X1gFueIiZEFNcwEf/6mpntrWAoxZTsXQ10rBbp8veYrXFLzfSm9gylFS7Zbkv5dLnZQlgEFupJyU+GpF8NQToLOdWbExejguThpu76zRtKyePSjHhbsZF4OmXQVlj13njfitZCdOhzXe+Rc=</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>14756FF438DE60E8E05305991F0A28A1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>2C792351C9DC4D459D6F8812683FCB6A</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81357</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1475675BE78A2B3FE05305991F0A9F83</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>379cf0d2-edb8-4d7c-84b8-1cf5b58adcec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22072 - StreamRenew - DLPCS - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of other cannot be renewed - 403 Forbidden_MIGRATED" searchProperties="true" id="8a285e7b-fe15-4bbf-948b-fe307d119602"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2b2cb02d-1dfa-449f-8f54-def4960d1f84"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="b351d898-1b8b-41a0-a171-d71a78288bf0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="1aa25267-8b28-47ea-b8a9-2e4259fd3205" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="cab2e70b-996b-4ac2-8346-59ccd6e3588c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="5eb3b694-5a83-4d6f-b9ef-7e7ed435ee91"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="3de34506-a7b1-446a-b523-6c5187c117fd"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to other" id="138ab01c-c17e-4fd0-bbb3-878e94b2aec2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert b.rightsTokenSetStatusOther(tC.getPropertyValue("rightstokenid")) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6f7f2d0e-ba93-494e-9c87-6ede0ce52cc6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e9e91374-056c-4e6a-a592-083368d10abb" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="e3457bad-cd6d-4e20-ab4c-9399ecfac010" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" disabled="true" id="47e8161c-7091-4797-8076-8b4363613981"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="faf94b3e-7823-43a7-a043-1ab80bb4799e" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_023445</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:EBF62BDA4C594AB586C9EA95E0271D2D</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1475675BE88B2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7832B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AF72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMfI1gCcwAzi0pKS5QNKcvGSMvAYltuRYsiH8+iMZcIFcDu158mi9+vbbi3b3lAdJbHldziEThNHaMokp90ppW8sz6rGAE+7RIAHuCeyNuxcjz6obXrC9otWGflt7jKBhW8aJrTuADd1xWqE+tVxXt6dgTs2WEYWNSKpynsOQchFQ0dYsw3R1w9EtZ2K0PMPyDKNuN5wHrXYHGZfYUqVuaBtSS97W5kKkHkKLxaK+sOssmyHLMEx0fzEa4zkkgdY5XXtUGso6G31cDwFDHOM6Zgk6RXs6pyH3xmRGA5FnsLEVfmTLQEYLSZ2Qk9kXrboL4ZBGrDz2A8oowUFMVoGKzwWIOQtr3XjGMiLmyYdOmIYC1mGJdWw69IuG9qkdCbTHMOOBzueBucG6gQgyoBhqtzfDtvbluKyVVydZQHnEsoTvH/+MD9ACYpZCqPOtWxtqxwO+E6nOKWBvSHGcc1LAT1WsaYCBb7IJ+Hio2lUGEVmOCJcFuuSKHdqld3BcR8MnM+DibxK0k5w1yF0Q59Bp0nOn/zJrWr3Cde8Wl/x6EF/8ujgJ57N2SWBXuRRUqV0fD4qyKqL1jetzcmunrRfSmwwWkW3kUDyv0GV+NW2trHu4S9FJZj0UPwbfblvno0Z/aF88TeEbI6hIJ8mC5SxN4rPR1x/+r/B8uMiWVq+5errFiFlFiqYP/op+/z58HY4fmHs+uMXXvWJiGe7YMvon0Y9BPLjr21fR6jo4vxxfo8bZQwOcQbR8vv/nqdn9avqr/uD7k4+jBntuV+7s8N+Xbd/8OJ8+ARbboyqDoV8byCwF4vNmpiQk1KNS1UtV8+ECqNA66pbqHV4u2x0JPZnD9dl0Gq7bG3Qtt3vWsHzzzHBto9FqmQOj2/Jtf9tk1iwOKPYZjYiypVruumw+J4gTjwMNIdMLlstOx7VPEP1ABLUhvZGPgFEOEybbs7lkC7qyMrZ6NuYsesrnznwBs9jSaj+ZuKSXWTcSkO31ZNPa68k3gElKQDVuVddcFjYXMhYvQZGL2KwXQZ1CLlt7prqsZzlNF3GSpDEopihhYR5DPZ2nZWQQX38tPcC8lN6cTcrX9qFfh/+2IZA6IVEKXPnSA5lGeDNcTM/dOvLG4ZN3h9AWvpuHRD0sGU+REbxmsv/rd5mo+qhqxB91x1db0pXuH9x97I8fzb8EGP1fAJmPtzfRJzFBh+moDIUF2TG73RzkDJJdq7MtppfArL/U86LIy/pxHBtlEh6pRCLDQmPAueyrrxP2DBRVKOioIVYRPzBeyfcp5mJOxyIQkMh6r5XHI7aWMXC1tQzlQ10euxLtmZShE7AU78n6sdy4FONPlzLsYaUnxVfys2BZ+Dtj72Dt2JF+yqVFEDpTJzXAXj+oC8wkLJGtl2W74O8BvGd8X1gFueIiZEFNcwEf/6mpntrWAoxZTsXQ10rBbp8veYrXFLzfSm9gylFS7Zbkv5dLnZQlgEFupJyU+GpF8NQToLOdWbExejguThpu76zRtKyePSjHhbsZF4OmXQVlj13njfitZCdOhzXe+Rc=</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>1475675BE88B2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>EBF62BDA4C594AB586C9EA95E0271D2D</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81358</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1475675BE78A2B3FE05305991F0A9F83</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3de34506-a7b1-446a-b523-6c5187c117fd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22073 - StreamRenew - DLPCS - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of pending cannot be renewed - 403 Forbidden_MIGRATED" searchProperties="true" id="978b6be2-27aa-4615-a671-49a00cab2361"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="bd4b2e0d-cdd1-40a5-b533-c0c4d01a9d78"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="4b942463-5bb2-4a95-b1ac-28311366917d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="eedb01fa-4b75-4ab7-ac3e-56df43126229" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="6a76fab2-1ff1-4a46-893e-8e9a0604841f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="def62e1b-637f-4781-a36c-98286760c0af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="f1d852aa-8396-40b4-bfdf-fb26693cb70d"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to pending" id="c0ac8e7a-2b79-424a-a9a9-3a3111130277"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert b.rightsTokenSetStatusPending(tC.getPropertyValue("rightstokenid")) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="5457665b-83c4-40fb-9c91-2eb63c918415"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b749ccbe-7ff0-40d8-8652-e92b80b1eb4f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="b5fdae7b-c253-4375-802b-e4cf08f3e12a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" disabled="true" id="0c93ea7f-3713-4719-ae0c-976ee1bed33f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="42944a1c-c802-425f-8f6b-76b57503e4fa" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_023445</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FF22EA2F06044AEA8EFFB9CAF5495B02</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:14756FF438EB60E8E05305991F0A28A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7832B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AF72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMfI1gCcwAzi0pKS5QNKcvGSMvAYltuRYsiH8+iMZcIFcDu158mi9+vbbi3b3lAdJbHldziEThNHaMokp90ppW8sz6rGAE+7RIAHuCeyNuxcjz6obXrC9otWGflt7jKBhW8aJrTuADd1xWqE+tVxXt6dgTs2WEYWNSKpynsOQchFQ0dYsw3R1w9EtZ2K0PMPyDKNuN5wHrXYHGZfYUqVuaBtSS97W5kKkHkKLxaK+sOssmyHLMEx0fzEa4zkkgdY5XXtUGso6G31cDwFDHOM6Zgk6RXs6pyH3xmRGA5FnsLEVfmTLQEYLSZ2Qk9kXrboL4ZBGrDz2A8oowUFMVoGKzwWIOQtr3XjGMiLmyYdOmIYC1mGJdWw69IuG9qkdCbTHMOOBzueBucG6gQgyoBhqtzfDtvbluKyVVydZQHnEsoTvH/+MD9ACYpZCqPOtWxtqxwO+E6nOKWBvSHGcc1LAT1WsaYCBb7IJ+Hio2lUGEVmOCJcFuuSKHdqld3BcR8MnM+DibxK0k5w1yF0Q59Bp0nOn/zJrWr3Cde8Wl/x6EF/8ujgJ57N2SWBXuRRUqV0fD4qyKqL1jetzcmunrRfSmwwWkW3kUDyv0GV+NW2trHu4S9FJZj0UPwbfblvno0Z/aF88TeEbI6hIJ8mC5SxN4rPR1x/+r/B8uMiWVq+5errFiFlFiqYP/op+/z58HY4fmHs+uMXXvWJiGe7YMvon0Y9BPLjr21fR6jo4vxxfo8bZQwOcQbR8vv/nqdn9avqr/uD7k4+jBntuV+7s8N+Xbd/8OJ8+ARbboyqDoV8byCwF4vNmpiQk1KNS1UtV8+ECqNA66pbqHV4u2x0JPZnD9dl0Gq7bG3Qtt3vWsHzzzHBto9FqmQOj2/Jtf9tk1iwOKPYZjYiypVruumw+J4gTjwMNIdMLlstOx7VPEP1ABLUhvZGPgFEOEybbs7lkC7qyMrZ6NuYsesrnznwBs9jSaj+ZuKSXWTcSkO31ZNPa68k3gElKQDVuVddcFjYXMhYvQZGL2KwXQZ1CLlt7prqsZzlNF3GSpDEopihhYR5DPZ2nZWQQX38tPcC8lN6cTcrX9qFfh/+2IZA6IVEKXPnSA5lGeDNcTM/dOvLG4ZN3h9AWvpuHRD0sGU+REbxmsv/rd5mo+qhqxB91x1db0pXuH9x97I8fzb8EGP1fAJmPtzfRJzFBh+moDIUF2TG73RzkDJJdq7MtppfArL/U86LIy/pxHBtlEh6pRCLDQmPAueyrrxP2DBRVKOioIVYRPzBeyfcp5mJOxyIQkMh6r5XHI7aWMXC1tQzlQ10euxLtmZShE7AU78n6sdy4FONPlzLsYaUnxVfys2BZ+Dtj72Dt2JF+yqVFEDpTJzXAXj+oC8wkLJGtl2W74O8BvGd8X1gFueIiZEFNcwEf/6mpntrWAoxZTsXQ10rBbp8veYrXFLzfSm9gylFS7Zbkv5dLnZQlgEFupJyU+GpF8NQToLOdWbExejguThpu76zRtKyePSjHhbsZF4OmXQVlj13njfitZCdOhzXe+Rc=</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>14756FF438EB60E8E05305991F0A28A1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FF22EA2F06044AEA8EFFB9CAF5495B02</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81359</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1475675BE78A2B3FE05305991F0A9F83</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f1d852aa-8396-40b4-bfdf-fb26693cb70d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22087 - StreamRenew - DLPCS - Can renew MD_BASIC CID status of 'other'-200 OK" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e10a9b16-2456-442b-a06d-e749802129c2" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d62b8702-1ad5-4490-b424-860803afb386"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="7aa92215-7a3d-4cdc-ae8e-35c85c603b4d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="64d5768d-a008-4e1c-b1ad-bbead28b6cc9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="fa0aba4f-94b0-4a0c-89a5-02bebf68fbca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="c64006c6-a2a4-421a-8d60-297839680d3e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'other'" id="92031b1f-0f0b-4950-8a39-7387bb18f4bc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusOther(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="687ae753-2c02-40a5-a45b-6436349f34b9"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6fcc6ab9-ee77-43ad-ad68-1065ab0e5659"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="4221da2b-89f1-4e6d-98cb-7cbcbee20636"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="a89cbdfa-24d0-449d-9d9e-4a381866686d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="1caabe5f-295c-4712-94fe-b6b14f6b2c24"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="5f61394a-a185-497d-aa80-d25907332f61"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f7f79ff1-52f6-47d2-90a2-371f39de14b8"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZc6pME773V1iey1TCJm6VpGpYJKiorC53CKOgCMiAoL/+GzAak5OTc97vImWm6eWZ7md6ep6RvQ/oHkAIJqkfhXVZeGmsWqRLsrTzyHTt5mPToanHldNqPXba9nq9ttdux2026jJCGZRDlNph+tKgSYp6JJlHijEoqkc3e1Tzqdlhlo26BROEPWOVJ7JRL/ZBiHpV1JdGloS9yEY+6oX2HqJe6vR0oIx6WLNnXyE1Xp8vIKuAyauXpnGPIJwnFzowCJwnJ9oTz8QnnWcX9XR/E9pplsD3mC56abzb5nn+lDNPUbIhaJIkCbJLYB0X+Ztfjdfa1Ri6criOLmveDqPQd+zAP9slKAWmXuTWQbCJEj/19n9wTREUWbp+hIXz6FDN8FeD+AhQoftHT59AJsh+RJ5NXZ1pcA0TGDqwbmryS+PXPxXwYmokdojWUbJHX9b/DREMjzCIYug+ouvGruD+3eM32Xp9hk5PDp0gQ/4RjkuWxLYDUX2awLVfjHyEueeielX9eoGuBIPOf6nIM3GPE8MmvsmM4G8gSv+fct2X6uLFsoMMvuqt07qw5m1i1tKlhUtIp0muxfaiG8ovFYR75QuoW6Xf1195eqPVu9Fwvcvgw14Z2IPpcSoEIM6KxUCgCcOSAps9hH2ZOZ3G5iSxnPWbRwFpfPJMtj1eyEtregbW3NLNYfg2D6bLGlzx5xUY2p3mPOYJAF1/yEDKiCaDbHVgzBnnNzldH7CGdBygE6vsovlRkLfD4ZJhvBDwA+d03qkO8otxp7Y1mWXK7tFEb42UiBeVk/Lysaf7PZT7GsJTtcny/zlLdgU7tW8LvmwUa3w6U/iqyLKQnXkenPQNyGUObPDfFoy5ze7g7Xypm5McUNU+EHgu2IojBewkQJki5ym8ZSkFfwYDbjO2sKFRA8GSUzQxF/KFYKnqm5h7hitZp5UUZMuzOFYAqox5TxE10RI0Q1QUEF1khSKspGKr6Eouqwuhhh0IYhGfXambQqnwHVpmFZ2lFzqbLecWlvdPo/34uDLEQOEVidcPki6vGEEVB0BbzBy6n2Hb82gfR7WFyd0ZDWK4BbCfkzgmOCvGLlcMkx4Lml3JjM8yRZYGiopyXq12JdXEfGCZ549c8JzCu3uxEA0wveTCMfj+mFzOB8iesaGigVzYVMZDMXcnVyCKSuY1/pKrkZhromaO+4om5yKoZIKYB2hFj72V5B0dRi0GBtjeF4ZXxVk/xN9D7eic2EPNlvpgtbcoh9E8x2d9ex7lm2UnF9TFYBgtZexmDFSR41SAAZGg3BrOPwdGnMVOYr9L+3C07kd76CU1hYqGu+O5IDs+M9lMxzNWWO/aU8mfMrbrEXLg0FtmB2QZukPKU21XWxCaEPrn1mRozqGfLM7pmFWplt9ha9osM+dCFLTdt/nCHD4UC0c1JlPdnE3PRTE+bDvnIH2bcG+JPlCEzWQM4RQ5DwRp9zmjI7D84m2L+bTWSMjWwEbhAJC2m43oYwJzb9sLCd80RcTkBQqfS/yMl3QgSQ+izAmquu571NSRrMykxoosugFO02kx14LakucEXCnSni3jBd0nlwZwK2dqU+xvVJN9GMzhUh0HhpWCPLbWIUWRUqy+rZV84yglA1w51zl8irhaJgPTnsQDshhaLZI6qG4w0LvAZAqd3hUTb7M87TbLHS7K4u7oLAwQWMYdx2RMsVlNNURNAZ3LeSsU2WS0wNkX8WrvFIKBa1YZRwYnan2VNAtBAMOLDBmALtDiLG4VXqzsa6BQbEyL42ruoUU49ieGmGHSZnd02a5o8q8cKylW+8yxAw9U8JVj4oVjIlgfHuSOQCG2xcdolm84STyobWs06MakOh/tatxDn9ikftCchJ3cGD7MqFPe9rbqbNaVBY9/CNcLj1mlHGmfHRUOdm3J13ZC2GoGJ2WkqKzpE8GJ3MJDjka1sUyFIpOe+0Q3yR64/dLfn89Mkzb3Uz07yqY9RNTJWx1m3Xw7fWsRRCKd2HN7eVT788hZXO6Rr03yJry0UeK+wX7qwNfRS89WW+ik12V5D8tCvY8vRzv9eYwrJb77uK5Ue3E5C6IUhmnjtbQqR7hehgc93+3hm/Oy7nKtFkuzHOi32iTFciLZJKk+CUi2223SPLjOehcUXyDyUbj2y1jlMHu5rH8G6Ox7K2gnMGn84KnMU10ONTx9RCGCRvTS6HA01W4zJOBJsot/hFanzbRAh21yGHS33aiPo3QSThKwTmFyNyA3vw7IGnT82IflFP0+S6AUJ+JgH7M0oJ6O9lMIMzxmJ+Wkiy07bJUAws32sYM/4O6WxBFKn2IvroaZP27j67frjrGO65cKqATNQVwt+M1IT14R/7Yz+tvR/+oeZK5fziw4fWniOxcknz99sKGkwY0KZJdqXjHfVP/NtEtRrd9NiR8QEV+TcYvkHv27uNeHCZ618ThWvUcQLtrBfjo8ZcdjVpWpTZI0kWD3BEWQhA6dDI+LJyPawZC4eSD+ZVC/Yf4S9yb/jC5LvVBP8SnfY0bVq+XfH2mfrHECUlik38n4AD/LyuA/vtycnlPqYfEU/+RR4n7k/Rtfd3Ew5LJD+eGmXJUT9ulzed9PQs+JsFcfN6kouff9nf13sT8Lb+m6QUkxK1ZZCv/8pV52n5eG7ThRFqay0KgE9x2xwpyeYtj7UPrNTTXivr9ZCvTHN8tcGemOB/d246br/1350a8K70BshfwKy0ujwK9vHDzc3HXgd4B/aMLsT034805efxP/LrnL6Vdmv/4P</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6DAEE820A7466AE0401F0A0799416D</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6DAEF2551F5DCDE0401F0A07994167</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>687ae753-2c02-40a5-a45b-6436349f34b9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_22150 - StreamRenew - DLPCS - StreamOwnerMismatch - DLPCS cannot renew same Organization DLP Stream Handle - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f5661f09-bdff-4806-99a3-406c752b9cf1"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b36c944a-1e18-465f-a46d-3c1c8d2a4058"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="466be57b-dd40-45c7-b6e8-93719de8cbc9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="dd07c2cb-1e85-41ce-b1aa-477877609e61" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="04fd65d4-8b7b-4858-a97b-ca6285612ea4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="fb8be2c0-37c0-4d12-80a3-a4c51d73ecf4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="bcfb88db-a313-4265-8840-8eebf6ae9ac9"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment DLP" id="1b3ff970-b7a0-486e-bb78-662b484d0b95"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6ec29954-0501-4b78-9dfb-47a5fbeee68e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="db132206-f8ef-432e-a27e-9310884beec1" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="ca00d19a-31c6-46cd-a69c-5ebb718bbfe4" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="963e0fac-4ee2-46bf-87a6-f1e9a5cea166" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="8a7d5bba-3a93-453d-871b-388b02db5a70" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_023445</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:ADB6CA9328A84536B273D66BB2A03533</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1475814A31B4293AE05305991F0AD226</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7832B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AF72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMfI1gCcwAzi0pKS5QNKcvGSMvAYltuRYsiH8+iMZcIFcDu158mi9+vbbi3b3lAdJbHldziEThNHaMokp90ppW8sz6rGAE+7RIAHuCeyNuxcjz6obXrC9otWGflt7jKBhW8aJrTuADd1xWqE+tVxXt6dgTs2WEYWNSKpynsOQchFQ0dYsw3R1w9EtZ2K0PMPyDKNuN5wHrXYHGZfYUqVuaBtSS97W5kKkHkKLxaK+sOssmyHLMEx0fzEa4zkkgdY5XXtUGso6G31cDwFDHOM6Zgk6RXs6pyH3xmRGA5FnsLEVfmTLQEYLSZ2Qk9kXrboL4ZBGrDz2A8oowUFMVoGKzwWIOQtr3XjGMiLmyYdOmIYC1mGJdWw69IuG9qkdCbTHMOOBzueBucG6gQgyoBhqtzfDtvbluKyVVydZQHnEsoTvH/+MD9ACYpZCqPOtWxtqxwO+E6nOKWBvSHGcc1LAT1WsaYCBb7IJ+Hio2lUGEVmOCJcFuuSKHdqld3BcR8MnM+DibxK0k5w1yF0Q59Bp0nOn/zJrWr3Cde8Wl/x6EF/8ujgJ57N2SWBXuRRUqV0fD4qyKqL1jetzcmunrRfSmwwWkW3kUDyv0GV+NW2trHu4S9FJZj0UPwbfblvno0Z/aF88TeEbI6hIJ8mC5SxN4rPR1x/+r/B8uMiWVq+5errFiFlFiqYP/op+/z58HY4fmHs+uMXXvWJiGe7YMvon0Y9BPLjr21fR6jo4vxxfo8bZQwOcQbR8vv/nqdn9avqr/uD7k4+jBntuV+7s8N+Xbd/8OJ8+ARbboyqDoV8byCwF4vNmpiQk1KNS1UtV8+ECqNA66pbqHV4u2x0JPZnD9dl0Gq7bG3Qtt3vWsHzzzHBto9FqmQOj2/Jtf9tk1iwOKPYZjYiypVruumw+J4gTjwMNIdMLlstOx7VPEP1ABLUhvZGPgFEOEybbs7lkC7qyMrZ6NuYsesrnznwBs9jSaj+ZuKSXWTcSkO31ZNPa68k3gElKQDVuVddcFjYXMhYvQZGL2KwXQZ1CLlt7prqsZzlNF3GSpDEopihhYR5DPZ2nZWQQX38tPcC8lN6cTcrX9qFfh/+2IZA6IVEKXPnSA5lGeDNcTM/dOvLG4ZN3h9AWvpuHRD0sGU+REbxmsv/rd5mo+qhqxB91x1db0pXuH9x97I8fzb8EGP1fAJmPtzfRJzFBh+moDIUF2TG73RzkDJJdq7MtppfArL/U86LIy/pxHBtlEh6pRCLDQmPAueyrrxP2DBRVKOioIVYRPzBeyfcp5mJOxyIQkMh6r5XHI7aWMXC1tQzlQ10euxLtmZShE7AU78n6sdy4FONPlzLsYaUnxVfys2BZ+Dtj72Dt2JF+yqVFEDpTJzXAXj+oC8wkLJGtl2W74O8BvGd8X1gFueIiZEFNcwEf/6mpntrWAoxZTsXQ10rBbp8veYrXFLzfSm9gylFS7Zbkv5dLnZQlgEFupJyU+GpF8NQToLOdWbExejguThpu76zRtKyePSjHhbsZF4OmXQVlj13njfitZCdOhzXe+Rc=</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>1475814A31B4293AE05305991F0AD226</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>ADB6CA9328A84536B273D66BB2A03533</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81373</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE78A2B3FE05305991F0A9F83</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>bcfb88db-a313-4265-8840-8eebf6ae9ac9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24801 - StreamRenew - DLPCS - AccountNotActive - ACCOUNT.STATUS of deleted - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="39e07178-b8af-4a01-be08-0221b0b349a5"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9539ce5c-6fa4-41a5-8d96-aecc106167b6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="23269882-99e6-4a6c-a60c-bde6500e0aa2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="6fa6c908-a92c-4913-a7db-8a4a6371c601" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="ee4124c4-d4a9-4d71-a915-76ea412b4760"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="b92095a0-b00f-4ed4-a033-4931fbc791b2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to deleted" id="0a95e585-cd2f-4a9c-a0be-b2b494cfa8a8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="5aa1c7e0-8448-44cb-9be3-fb8f22072d1c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="4e07fb76-f9ca-4ec0-bf3c-e0a785939998"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="4f72bddf-7f4d-41b3-8154-86cec1f6f007"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="0619b0a7-59e1-4902-bfc4-1b749bc2aedd" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81391</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_023445</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7832B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AF72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMfI1gCcwAzi0pKS5QNKcvGSMvAYltuRYsiH8+iMZcIFcDu158mi9+vbbi3b3lAdJbHldziEThNHaMokp90ppW8sz6rGAE+7RIAHuCeyNuxcjz6obXrC9otWGflt7jKBhW8aJrTuADd1xWqE+tVxXt6dgTs2WEYWNSKpynsOQchFQ0dYsw3R1w9EtZ2K0PMPyDKNuN5wHrXYHGZfYUqVuaBtSS97W5kKkHkKLxaK+sOssmyHLMEx0fzEa4zkkgdY5XXtUGso6G31cDwFDHOM6Zgk6RXs6pyH3xmRGA5FnsLEVfmTLQEYLSZ2Qk9kXrboL4ZBGrDz2A8oowUFMVoGKzwWIOQtr3XjGMiLmyYdOmIYC1mGJdWw69IuG9qkdCbTHMOOBzueBucG6gQgyoBhqtzfDtvbluKyVVydZQHnEsoTvH/+MD9ACYpZCqPOtWxtqxwO+E6nOKWBvSHGcc1LAT1WsaYCBb7IJ+Hio2lUGEVmOCJcFuuSKHdqld3BcR8MnM+DibxK0k5w1yF0Q59Bp0nOn/zJrWr3Cde8Wl/x6EF/8ujgJ57N2SWBXuRRUqV0fD4qyKqL1jetzcmunrRfSmwwWkW3kUDyv0GV+NW2trHu4S9FJZj0UPwbfblvno0Z/aF88TeEbI6hIJ8mC5SxN4rPR1x/+r/B8uMiWVq+5errFiFlFiqYP/op+/z58HY4fmHs+uMXXvWJiGe7YMvon0Y9BPLjr21fR6jo4vxxfo8bZQwOcQbR8vv/nqdn9avqr/uD7k4+jBntuV+7s8N+Xbd/8OJ8+ARbboyqDoV8byCwF4vNmpiQk1KNS1UtV8+ECqNA66pbqHV4u2x0JPZnD9dl0Gq7bG3Qtt3vWsHzzzHBto9FqmQOj2/Jtf9tk1iwOKPYZjYiypVruumw+J4gTjwMNIdMLlstOx7VPEP1ABLUhvZGPgFEOEybbs7lkC7qyMrZ6NuYsesrnznwBs9jSaj+ZuKSXWTcSkO31ZNPa68k3gElKQDVuVddcFjYXMhYvQZGL2KwXQZ1CLlt7prqsZzlNF3GSpDEopihhYR5DPZ2nZWQQX38tPcC8lN6cTcrX9qFfh/+2IZA6IVEKXPnSA5lGeDNcTM/dOvLG4ZN3h9AWvpuHRD0sGU+REbxmsv/rd5mo+qhqxB91x1db0pXuH9x97I8fzb8EGP1fAJmPtzfRJzFBh+moDIUF2TG73RzkDJJdq7MtppfArL/U86LIy/pxHBtlEh6pRCLDQmPAueyrrxP2DBRVKOioIVYRPzBeyfcp5mJOxyIQkMh6r5XHI7aWMXC1tQzlQ10euxLtmZShE7AU78n6sdy4FONPlzLsYaUnxVfys2BZ+Dtj72Dt2JF+yqVFEDpTJzXAXj+oC8wkLJGtl2W74O8BvGd8X1gFueIiZEFNcwEf/6mpntrWAoxZTsXQ10rBbp8veYrXFLzfSm9gylFS7Zbkv5dLnZQlgEFupJyU+GpF8NQToLOdWbExejguThpu76zRtKyePSjHhbsZF4OmXQVlj13njfitZCdOhzXe+Rc=</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">554D833B2DBF4CC59D9C7FB22B979ECC</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475814A31DD293AE05305991F0AD226</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1475814A31DD293AE05305991F0AD226</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:554D833B2DBF4CC59D9C7FB22B979ECC</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5aa1c7e0-8448-44cb-9be3-fb8f22072d1c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24806 - StreamRenew - DLPCS - AccountNotActive - ACCOUNT.STATUS of blocked:tou - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3f0a1e40-598d-420a-bd7d-3affc6b7e04d"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="819f1088-23e1-4a1c-abee-1dc93251a92e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="173011b0-5288-420d-b06a-44a6658d61be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="9978b576-8ce9-4e99-a9eb-21948d215d42" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="95b3bee6-44f5-4490-8258-6ec8fceb5637"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="39c444b6-f65b-4cb9-a84d-2c30b15c84da"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked:tou" id="8d85dbcb-8c2e-43ea-86e1-7cf7768c9570"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "blocked:tou");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="367cf379-c99e-46b2-a544-8bd0ad1fb1cd"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="da605735-3acc-4c8b-be46-a71c501598ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="7835c87c-8a5f-4542-9ecc-20e34251c285"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="f1bd8138-329d-44b0-9240-92740ee44d8d" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_023445</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7832B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AF72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMfI1gCcwAzi0pKS5QNKcvGSMvAYltuRYsiH8+iMZcIFcDu158mi9+vbbi3b3lAdJbHldziEThNHaMokp90ppW8sz6rGAE+7RIAHuCeyNuxcjz6obXrC9otWGflt7jKBhW8aJrTuADd1xWqE+tVxXt6dgTs2WEYWNSKpynsOQchFQ0dYsw3R1w9EtZ2K0PMPyDKNuN5wHrXYHGZfYUqVuaBtSS97W5kKkHkKLxaK+sOssmyHLMEx0fzEa4zkkgdY5XXtUGso6G31cDwFDHOM6Zgk6RXs6pyH3xmRGA5FnsLEVfmTLQEYLSZ2Qk9kXrboL4ZBGrDz2A8oowUFMVoGKzwWIOQtr3XjGMiLmyYdOmIYC1mGJdWw69IuG9qkdCbTHMOOBzueBucG6gQgyoBhqtzfDtvbluKyVVydZQHnEsoTvH/+MD9ACYpZCqPOtWxtqxwO+E6nOKWBvSHGcc1LAT1WsaYCBb7IJ+Hio2lUGEVmOCJcFuuSKHdqld3BcR8MnM+DibxK0k5w1yF0Q59Bp0nOn/zJrWr3Cde8Wl/x6EF/8ujgJ57N2SWBXuRRUqV0fD4qyKqL1jetzcmunrRfSmwwWkW3kUDyv0GV+NW2trHu4S9FJZj0UPwbfblvno0Z/aF88TeEbI6hIJ8mC5SxN4rPR1x/+r/B8uMiWVq+5errFiFlFiqYP/op+/z58HY4fmHs+uMXXvWJiGe7YMvon0Y9BPLjr21fR6jo4vxxfo8bZQwOcQbR8vv/nqdn9avqr/uD7k4+jBntuV+7s8N+Xbd/8OJ8+ARbboyqDoV8byCwF4vNmpiQk1KNS1UtV8+ECqNA66pbqHV4u2x0JPZnD9dl0Gq7bG3Qtt3vWsHzzzHBto9FqmQOj2/Jtf9tk1iwOKPYZjYiypVruumw+J4gTjwMNIdMLlstOx7VPEP1ABLUhvZGPgFEOEybbs7lkC7qyMrZ6NuYsesrnznwBs9jSaj+ZuKSXWTcSkO31ZNPa68k3gElKQDVuVddcFjYXMhYvQZGL2KwXQZ1CLlt7prqsZzlNF3GSpDEopihhYR5DPZ2nZWQQX38tPcC8lN6cTcrX9qFfh/+2IZA6IVEKXPnSA5lGeDNcTM/dOvLG4ZN3h9AWvpuHRD0sGU+REbxmsv/rd5mo+qhqxB91x1db0pXuH9x97I8fzb8EGP1fAJmPtzfRJzFBh+moDIUF2TG73RzkDJJdq7MtppfArL/U86LIy/pxHBtlEh6pRCLDQmPAueyrrxP2DBRVKOioIVYRPzBeyfcp5mJOxyIQkMh6r5XHI7aWMXC1tQzlQ10euxLtmZShE7AU78n6sdy4FONPlzLsYaUnxVfys2BZ+Dtj72Dt2JF+yqVFEDpTJzXAXj+oC8wkLJGtl2W74O8BvGd8X1gFueIiZEFNcwEf/6mpntrWAoxZTsXQ10rBbp8veYrXFLzfSm9gylFS7Zbkv5dLnZQlgEFupJyU+GpF8NQToLOdWbExejguThpu76zRtKyePSjHhbsZF4OmXQVlj13njfitZCdOhzXe+Rc=</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C3A670E0544C4A32939736CD461924E9</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475814A31E9293AE05305991F0AD226</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1475814A31E9293AE05305991F0AD226</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:C3A670E0544C4A32939736CD461924E9</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>367cf379-c99e-46b2-a544-8bd0ad1fb1cd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24807 - StreamRenew - DLPCS - AccountNotActive - ACCOUNT.STATUS of blocked - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ec7ccd80-2d16-4818-b7ab-f4e2f08cc428"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c2283e92-d158-4d9f-ba3f-3412a138ad06"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="204a5954-6d5e-420a-a17a-75a8ee65fa51"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="4fdc290e-f8a4-4828-83bc-224c78fcc948" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="1d26c2ed-c94d-41f9-823c-3e27b9c8bb8a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="44a46802-85f4-456d-ac83-b1387580b3fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked" id="e6f4cc32-1bc0-4824-92bb-8a0e681c73a3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "blocked");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="1dbbd197-57cc-4bdd-8667-5fe33fc3e01c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="25787978-33af-4220-b776-a74e993ae9fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="7adac2e0-8123-4299-ab16-c41ecd608a0f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c9f58a22-f52b-4d6f-be58-8306e7e0ac10" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81397</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_023445</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7832B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AF72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMfI1gCcwAzi0pKS5QNKcvGSMvAYltuRYsiH8+iMZcIFcDu158mi9+vbbi3b3lAdJbHldziEThNHaMokp90ppW8sz6rGAE+7RIAHuCeyNuxcjz6obXrC9otWGflt7jKBhW8aJrTuADd1xWqE+tVxXt6dgTs2WEYWNSKpynsOQchFQ0dYsw3R1w9EtZ2K0PMPyDKNuN5wHrXYHGZfYUqVuaBtSS97W5kKkHkKLxaK+sOssmyHLMEx0fzEa4zkkgdY5XXtUGso6G31cDwFDHOM6Zgk6RXs6pyH3xmRGA5FnsLEVfmTLQEYLSZ2Qk9kXrboL4ZBGrDz2A8oowUFMVoGKzwWIOQtr3XjGMiLmyYdOmIYC1mGJdWw69IuG9qkdCbTHMOOBzueBucG6gQgyoBhqtzfDtvbluKyVVydZQHnEsoTvH/+MD9ACYpZCqPOtWxtqxwO+E6nOKWBvSHGcc1LAT1WsaYCBb7IJ+Hio2lUGEVmOCJcFuuSKHdqld3BcR8MnM+DibxK0k5w1yF0Q59Bp0nOn/zJrWr3Cde8Wl/x6EF/8ujgJ57N2SWBXuRRUqV0fD4qyKqL1jetzcmunrRfSmwwWkW3kUDyv0GV+NW2trHu4S9FJZj0UPwbfblvno0Z/aF88TeEbI6hIJ8mC5SxN4rPR1x/+r/B8uMiWVq+5errFiFlFiqYP/op+/z58HY4fmHs+uMXXvWJiGe7YMvon0Y9BPLjr21fR6jo4vxxfo8bZQwOcQbR8vv/nqdn9avqr/uD7k4+jBntuV+7s8N+Xbd/8OJ8+ARbboyqDoV8byCwF4vNmpiQk1KNS1UtV8+ECqNA66pbqHV4u2x0JPZnD9dl0Gq7bG3Qtt3vWsHzzzHBto9FqmQOj2/Jtf9tk1iwOKPYZjYiypVruumw+J4gTjwMNIdMLlstOx7VPEP1ABLUhvZGPgFEOEybbs7lkC7qyMrZ6NuYsesrnznwBs9jSaj+ZuKSXWTcSkO31ZNPa68k3gElKQDVuVddcFjYXMhYvQZGL2KwXQZ1CLlt7prqsZzlNF3GSpDEopihhYR5DPZ2nZWQQX38tPcC8lN6cTcrX9qFfh/+2IZA6IVEKXPnSA5lGeDNcTM/dOvLG4ZN3h9AWvpuHRD0sGU+REbxmsv/rd5mo+qhqxB91x1db0pXuH9x97I8fzb8EGP1fAJmPtzfRJzFBh+moDIUF2TG73RzkDJJdq7MtppfArL/U86LIy/pxHBtlEh6pRCLDQmPAueyrrxP2DBRVKOioIVYRPzBeyfcp5mJOxyIQkMh6r5XHI7aWMXC1tQzlQ10euxLtmZShE7AU78n6sdy4FONPlzLsYaUnxVfys2BZ+Dtj72Dt2JF+yqVFEDpTJzXAXj+oC8wkLJGtl2W74O8BvGd8X1gFueIiZEFNcwEf/6mpntrWAoxZTsXQ10rBbp8veYrXFLzfSm9gylFS7Zbkv5dLnZQlgEFupJyU+GpF8NQToLOdWbExejguThpu76zRtKyePSjHhbsZF4OmXQVlj13njfitZCdOhzXe+Rc=</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F7EEE01EF08D48F7AEADF05320EA741A</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475C0F0C60601DDE05305991F0AA40B</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1475C0F0C60601DDE05305991F0AA40B</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F7EEE01EF08D48F7AEADF05320EA741A</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1dbbd197-57cc-4bdd-8667-5fe33fc3e01c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24841 - StreamRenew - DLPCS - ACCOUNT_USER.STATUS of deleted - 200 OK_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0cef8cc1-5753-41d1-9f85-4c199f4d1878"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6e55cbd3-d80d-4bfd-ae09-090ffb984e7d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="0a38c169-1213-428f-aa15-ddce5aea13a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="c6983c3b-6bbd-4876-bf31-ff8a55c127ea" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="97f4941d-45d4-4979-8906-79acb76b0580"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="bdc402de-2271-46ad-b2f5-ec77b5de9c76"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="bfaa181a-0c9b-43f5-95f0-66c8540ae180"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="f2d2164c-bf4e-40f7-9c14-622bcf175052"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to deleted" id="cb95e1d8-9eca-4b03-aa9b-7d4a1676debc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="5b71ad80-8721-42fe-b522-127ed2bdf572"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="58b87dda-3888-4db4-ae86-966ebca00124"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="3a1b8e21-9a90-4f2a-8746-f56b46837bb3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="1ecf22dd-06ee-4942-8de4-25cccb972218" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81399</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_023445</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7832B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AF72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMfI1gCcwAzi0pKS5QNKcvGSMvAYltuRYsiH8+iMZcIFcDu158mi9+vbbi3b3lAdJbHldziEThNHaMokp90ppW8sz6rGAE+7RIAHuCeyNuxcjz6obXrC9otWGflt7jKBhW8aJrTuADd1xWqE+tVxXt6dgTs2WEYWNSKpynsOQchFQ0dYsw3R1w9EtZ2K0PMPyDKNuN5wHrXYHGZfYUqVuaBtSS97W5kKkHkKLxaK+sOssmyHLMEx0fzEa4zkkgdY5XXtUGso6G31cDwFDHOM6Zgk6RXs6pyH3xmRGA5FnsLEVfmTLQEYLSZ2Qk9kXrboL4ZBGrDz2A8oowUFMVoGKzwWIOQtr3XjGMiLmyYdOmIYC1mGJdWw69IuG9qkdCbTHMOOBzueBucG6gQgyoBhqtzfDtvbluKyVVydZQHnEsoTvH/+MD9ACYpZCqPOtWxtqxwO+E6nOKWBvSHGcc1LAT1WsaYCBb7IJ+Hio2lUGEVmOCJcFuuSKHdqld3BcR8MnM+DibxK0k5w1yF0Q59Bp0nOn/zJrWr3Cde8Wl/x6EF/8ujgJ57N2SWBXuRRUqV0fD4qyKqL1jetzcmunrRfSmwwWkW3kUDyv0GV+NW2trHu4S9FJZj0UPwbfblvno0Z/aF88TeEbI6hIJ8mC5SxN4rPR1x/+r/B8uMiWVq+5errFiFlFiqYP/op+/z58HY4fmHs+uMXXvWJiGe7YMvon0Y9BPLjr21fR6jo4vxxfo8bZQwOcQbR8vv/nqdn9avqr/uD7k4+jBntuV+7s8N+Xbd/8OJ8+ARbboyqDoV8byCwF4vNmpiQk1KNS1UtV8+ECqNA66pbqHV4u2x0JPZnD9dl0Gq7bG3Qtt3vWsHzzzHBto9FqmQOj2/Jtf9tk1iwOKPYZjYiypVruumw+J4gTjwMNIdMLlstOx7VPEP1ABLUhvZGPgFEOEybbs7lkC7qyMrZ6NuYsesrnznwBs9jSaj+ZuKSXWTcSkO31ZNPa68k3gElKQDVuVddcFjYXMhYvQZGL2KwXQZ1CLlt7prqsZzlNF3GSpDEopihhYR5DPZ2nZWQQX38tPcC8lN6cTcrX9qFfh/+2IZA6IVEKXPnSA5lGeDNcTM/dOvLG4ZN3h9AWvpuHRD0sGU+REbxmsv/rd5mo+qhqxB91x1db0pXuH9x97I8fzb8EGP1fAJmPtzfRJzFBh+moDIUF2TG73RzkDJJdq7MtppfArL/U86LIy/pxHBtlEh6pRCLDQmPAueyrrxP2DBRVKOioIVYRPzBeyfcp5mJOxyIQkMh6r5XHI7aWMXC1tQzlQ10euxLtmZShE7AU78n6sdy4FONPlzLsYaUnxVfys2BZ+Dtj72Dt2JF+yqVFEDpTJzXAXj+oC8wkLJGtl2W74O8BvGd8X1gFueIiZEFNcwEf/6mpntrWAoxZTsXQ10rBbp8veYrXFLzfSm9gylFS7Zbkv5dLnZQlgEFupJyU+GpF8NQToLOdWbExejguThpu76zRtKyePSjHhbsZF4OmXQVlj13njfitZCdOhzXe+Rc=</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">522E3C47CC214DC3BF9C4B766FAEC33D</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475814A35AB293AE05305991F0AD226</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1475814A35AB293AE05305991F0AD226</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:522E3C47CC214DC3BF9C4B766FAEC33D</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5b71ad80-8721-42fe-b522-127ed2bdf572</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_24845 - StreamRenew - DLPCS - ACCOUNT_USER.STATUS of blocked - 200 OK_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="54cdc965-143a-4eda-8b93-6029232a89ef"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="37b90a98-c78f-4c2f-bd7f-d51b737b3c57"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="4be3a122-65dc-4ae9-bfdb-790af9f1cebd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="18dcce5d-30a4-4bd2-8767-fb4da8787b99" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="601b1bcf-b7d7-4e16-af91-08e1b1e1bda9"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="33eef89a-4248-47e9-b86d-d43cecaab8fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="eeb968ee-534a-43c4-93de-b99d75f718c3"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="d4f5a7bc-cd71-45ee-9b7c-099dfcf0f5a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to blocked" id="6c814a61-8148-4e38-b969-b99eb3380b19"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "blocked");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="dd807d07-857a-4cac-8a4e-8845037ec657"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="98647ed6-9424-49ba-a4ed-8df349417e7b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="f96cf06f-415c-4c65-a20f-02962779c7e9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="9bc0770d-d71c-4ecc-b31a-2adbfd3c65b1" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81403</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_023445</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7832B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AF72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc9o6EP4rjPvYMfI1gCcwAzi0pKS5QNKcvGSMvAYltuRYsiH8+iMZcIFcDu158mi9+vbbi3b3lAdJbHldziEThNHaMokp90ppW8sz6rGAE+7RIAHuCeyNuxcjz6obXrC9otWGflt7jKBhW8aJrTuADd1xWqE+tVxXt6dgTs2WEYWNSKpynsOQchFQ0dYsw3R1w9EtZ2K0PMPyDKNuN5wHrXYHGZfYUqVuaBtSS97W5kKkHkKLxaK+sOssmyHLMEx0fzEa4zkkgdY5XXtUGso6G31cDwFDHOM6Zgk6RXs6pyH3xmRGA5FnsLEVfmTLQEYLSZ2Qk9kXrboL4ZBGrDz2A8oowUFMVoGKzwWIOQtr3XjGMiLmyYdOmIYC1mGJdWw69IuG9qkdCbTHMOOBzueBucG6gQgyoBhqtzfDtvbluKyVVydZQHnEsoTvH/+MD9ACYpZCqPOtWxtqxwO+E6nOKWBvSHGcc1LAT1WsaYCBb7IJ+Hio2lUGEVmOCJcFuuSKHdqld3BcR8MnM+DibxK0k5w1yF0Q59Bp0nOn/zJrWr3Cde8Wl/x6EF/8ujgJ57N2SWBXuRRUqV0fD4qyKqL1jetzcmunrRfSmwwWkW3kUDyv0GV+NW2trHu4S9FJZj0UPwbfblvno0Z/aF88TeEbI6hIJ8mC5SxN4rPR1x/+r/B8uMiWVq+5errFiFlFiqYP/op+/z58HY4fmHs+uMXXvWJiGe7YMvon0Y9BPLjr21fR6jo4vxxfo8bZQwOcQbR8vv/nqdn9avqr/uD7k4+jBntuV+7s8N+Xbd/8OJ8+ARbboyqDoV8byCwF4vNmpiQk1KNS1UtV8+ECqNA66pbqHV4u2x0JPZnD9dl0Gq7bG3Qtt3vWsHzzzHBto9FqmQOj2/Jtf9tk1iwOKPYZjYiypVruumw+J4gTjwMNIdMLlstOx7VPEP1ABLUhvZGPgFEOEybbs7lkC7qyMrZ6NuYsesrnznwBs9jSaj+ZuKSXWTcSkO31ZNPa68k3gElKQDVuVddcFjYXMhYvQZGL2KwXQZ1CLlt7prqsZzlNF3GSpDEopihhYR5DPZ2nZWQQX38tPcC8lN6cTcrX9qFfh/+2IZA6IVEKXPnSA5lGeDNcTM/dOvLG4ZN3h9AWvpuHRD0sGU+REbxmsv/rd5mo+qhqxB91x1db0pXuH9x97I8fzb8EGP1fAJmPtzfRJzFBh+moDIUF2TG73RzkDJJdq7MtppfArL/U86LIy/pxHBtlEh6pRCLDQmPAueyrrxP2DBRVKOioIVYRPzBeyfcp5mJOxyIQkMh6r5XHI7aWMXC1tQzlQ10euxLtmZShE7AU78n6sdy4FONPlzLsYaUnxVfys2BZ+Dtj72Dt2JF+yqVFEDpTJzXAXj+oC8wkLJGtl2W74O8BvGd8X1gFueIiZEFNcwEf/6mpntrWAoxZTsXQ10rBbp8veYrXFLzfSm9gylFS7Zbkv5dLnZQlgEFupJyU+GpF8NQToLOdWbExejguThpu76zRtKyePSjHhbsZF4OmXQVlj13njfitZCdOhzXe+Rc=</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0F6A33903F054927ADA4661BA74A4936</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475D4F4119F3AE7E05307991F0A42B3</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1475675BE78A2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1475D4F4119F3AE7E05307991F0A42B3</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:0F6A33903F054927ADA4661BA74A4936</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>dd807d07-857a-4cac-8a4e-8845037ec657</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="LinkedLASPCustomerServiceTestCases_P1" id="a5edc94d-5b89-4234-ba82-6183a55ddf2d"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00000 - StreamRenew - LLPCS - StreamHandleInvalid - Test Suite Staging" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b97618bd-e317-4895-80d5-67dcb97982d1"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0f3962c9-493e-4c21-a117-8124d461844f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="40f4abed-83bb-43a0-90df-d16dc8b2450a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="e92a7713-fba1-4576-b568-79d7b16a2d7e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="7e885439-6990-4949-ae50-46532fe3e64c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="1ff78d0d-86a5-48c9-80bb-b2fba2f35a1f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="64e54fde-3564-4072-9226-e49eb2682da3" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="1ec3d7f0-b163-497f-94e4-f2dcc7a50902" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030533</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E8B004F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714B8F85DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdc9o6EP0rjPvYMZaNDcETmCG4tDQkBEyatC8dIa9BiZGJJAPh11cywQFCcmnvk0fr1dmzH9rdc4FnieO3hAAuacpKq1nChJ9LG0bGmZ9iQYXP8AyEL4kftq56vlNGPt5eMUrdoGH8Hrt2DRNSN+HsDJtuteaZY/dsbMae7eIqduouIKUqRAZdJiRmsmE4yPZM5Jp2dYRqPvJ8t1ZGFfuXUfoBXChspVJWtzakVqJhTKWc+5a1XC7Ly0o55RPLQci27q96IZnCDBvN841HuSHefNEn5QgIJAkpk3RmnVt7OueR8EM6YVhmHF5sRe/ZQhaqW0onEnTyySjuQtRlcZof25iljBKc0DXW8bkCOU2jUiuZpJzK6exdJ2ykgU1YEZPYLvtkWPvUTgTaY8gFNsUU2y9YQ4iBAyNQuh12G8an07KWXx1xzESc8pnYP/4dH2ALSNI5RKbYuvVC7XTAI5FqngPxu4wkmaALuNbFOscExEs2gZwOVbrhENNVjwpVoCuh2Vm79A6Om2gEdAJC/kuCdpKzAfmBkwyaIPtP9z/6v0aDu/Xd7dTLvn+9X9/W0ksyaOQEdpVzQZHazfGgKIsi2twIOstf/fBhMvppDR+jweXi+uY2nKB+MIgXMfrcD5wv6c9eL7hE1QGsZa2SVNte4MXh08N4dJd9jcIHvFpleJ2ltJ91YPiVQ4V8b0c8vLyvPXUvqtb4Jlrc3A9uBzNUW4YVXq/2l0tw6LUdBwF++Fz/OW7z+rx2QZ8D/G26XNw5PTzKJvX13dXgW8+xvz8H8TDuNgp3dvjvy7ZvPszGD0Dk9qjLoBuUOipLWH7czLSERmacq/pz3XyEBCaNpr6le4efqXZHI1/lcHO2K0EF1Wz34qxT8wIVMORVkFev2x3UQq7jbpvMhsUBxXbKYqpt6Za7KZuPCZKZL4BFwM1FmqlOJ4wPEAMscanLhuoRpEzAKFXt2UZLRnlWQ4/88cF2JnhiL9fEizzVv69T2Wd93ool8L2mbKO9pjwEQucUdOfWhS1UZQupgvGEF5lM7PIClxlkqrdz3WZ9xz3zLEFn8wQ0VWuWRlkC5fl0nofGEpuvY2Iicunwyyh/bu86dvhvGwOlE1GtILQvF6DyCEemS2XryBuHq0en0Ba+lUVUvywVUMkp2TDZ//VaJ7pAiiIJeq3wZku60P2Lu7/b4W/7HwF6/xdA5ePtTeuDmFiH6SgMRQu6Y3a7OqghpNpWc1tMT9guP5WzxSLL68d1KxZX8JZOpIUcKwSSqcb6PEofgVkFinXSFCuIHxgv5PsUMzllocQSZqreS/nxhLUlBKHXlq56qatTd6I9kyp0ElbymKydqJVLM/5wKyM+0XpKfKM+y5RHrxk7grVjR/mpthZJ2USf9AR7fqcuSKpgqeq9Kd8FPwZwzPi+sAhywUWqghpnEt7/U9JNtWGo0KYZk93AyAW7jT7nKZ/n4L8qvYHJZ0mxXNL/3i5NmpcAAbWSCprj6x3B10+ATXaGxYvRg3nhtDuB/eWs1UFup57Pi9pmXrgXqF0EZY9d8434rWQnToc13vwD</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714B8F75DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714B8F75DD2E05305991F0A0424</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E8AF04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2CFD1E8AF04F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD1E8B704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2CFD1E8B704F9E05307991F0A4B0C</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81502</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_41000 - StreamRenew - LLPCS - StreamHandleInvalid - Stream handle malformed_MIGRATED" searchProperties="true" id="5119175c-0eaf-4af0-8f30-ef61ba3ac7fe"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="47437535-7474-47cb-b2b1-0adf92d13779"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("loopuntil","6");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_VALID");

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="259df348-1731-4b01-b01d-f6bfae467440"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
tP.setPropertyValue("StreamCreateCount","12");

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="301519ca-fe58-4619-a873-b9842c80e69d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="datasource" name="Grid of maliformed stream handles" id="7f93672b-adc7-4c2a-a4a4-ca915ad76d3a"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:B&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:aaaaaaBBBBBcccccc&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:!!!!&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:1000-a&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:streamhandleid:org:dece:aa39999&lt;/con:entry></row></con:configuration></con:dataSource><con:property>streamhandle</con:property><con:startRow/><con:endRow/><con:trimValues>true</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="02860e04-0d77-48cb-a88d-3e7eec75a3ca"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>streamhandle</con:name><con:sourceType>streamhandle</con:sourceType><con:sourceStep>Grid of maliformed stream handles</con:sourceStep><con:sourcePath/><con:targetType>streamhandleFULL_body</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="35f99d95-e786-4529-9ffa-7622e002a1df"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="c21d6e00-720e-4715-a538-e3331cbfdda5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Process next stream handle in Grid" id="02c63ac3-d6af-44ad-a1c3-63c6d1bfadc1"><con:settings/><con:config><dataSourceStep>Grid of maliformed stream handles</dataSourceStep><targetStep>Property Transfer</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="a10e74c2-d511-42a2-96ad-c81a3538836c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>13D2F17B3C214E9AE05305991F0A2702</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVbbcuI4EP0VyvOYMr6b4ApUORBYdghhgCQzeUkJuQ1KbJlYMph8/UgGHCCXZWafXGq3Th91t476gqE4Mj2fMUg5SWgljyPKvMLaULKUeglihHkUxcA8jr2xf933zKruod0WpdJrN5RHM6zbdRtNVagFrmrXz111Gk5DNZiGxrlTM7AbWsKVsQx6lHFEeUMxdcNRdVs13Ile8wzT052qbjsPSuUOUiawhUtVV7akctZQ5pwvPE1brVbVlVVN0plm6rqh/bzuj/EcYqQ0LzYnKgKlza0/rgaAIYpwFSexdqEd+FwEzBuTGUU8S2EbK/gslq7pdU34BIzMvinlXgh6NEyKZQvRhBKMIvKKZH6ugc+ToOJHsyQlfB5/eghDl8Aq5FjFhk2/KdohtROBDhimDKlsjowt1ghCSIFiqNyOeg3l22lVK7ZOUkRZmKQxO1z+GR+gS4iSBQQq2x1rS+10wA8y1bwA7PUojjJGljCQzbpAGNi2moBPh6oMUwhJ3idMNGjOJDttn97RcpONNpkB439ToL3ibEDuUJRBk6yms6ur8242DsMWzFGOsPlv2P51f3/bKAjsOxeGsrSb5VFTlk202bHCN0a8Ho4d98Yata5Tt+/azzR5RlfLYOJOQDduz1bjwBpktfp9t3+u/6CW3x2QTjbJYpOjfDj4njsjlPgWX2ezu7tJt5azYYvfWq8P/uCfOApHdNoZxa/63Rr6tduz9pn24+F1ZfzKz7pd311Z9HL9fO28/rTaqDv77k7OpnrtZTLrDqbz4eDM7+UTS798aK8a5XH2+B/adnd+nE2fAPPdUrZBr13piCoh/rWYSQsJ1LBw9RZSfBgHypWm3CW1w8uE3JHAEzXcrA2rLQg67vmlZbm1dudKdyzdqdeNju63Ok5tJzIbFkcUWwkNiYwlJXfTNl8TxLHHgAaQqsskE0rHlC8Q24ijSo+OxCVIKINJIuQ5nwXcDpxIaOTScJZP6yh0n55MO1Uqg4Tf0JvUDzmkB5ps6AeaPAJMFgSkcMu+ZqKxGRe5eEHLjEdGdYmqFDIh7alUWc+0zx2NkXgRgWSqxUmQRVBdzBdFZjS2+Zoqwqywjq4mxW379FzH/3YpED4BkQ5MnuUSRBnh3eNieM7uIO8O7H74CO3g/Swg8mKJfPKU4A2Tw19vbSL7o+yRdt8fD3ekS98/2PvYGj8afwnQ/78Aoh7vd2pf5EQ7LkcZKFiSvbC7yUG8QUK1mrtmekFG9aWaLZdZ0T+2bWmpgNdkITXd1MaAM6Gr60nyDFQrUbSTHrGS+FHw0n5IMeNzOuaIQyz6vVIsT5haxsDk1NITFzU/dSQ6CClSxyHnH9lakZi4JOMvhzLsYeknzEPxWSVp8FaxD7D24ohziqGFEzqTK/mArT/pC5wIWCKkN0n3wT8C+Cj4obFMcsmFi4aaZhw+/1ORmtpQEMZJRnmvrRSGfZ0vePL1Arw3p3cwxVNSzpbkv4dLlRQtgEFMpIwU+HJE8OQVoLO9t2Ib9Oi5MDtG7dJqmbp9Vff3nwuzpptlUg7YNd+Z31v28nTc483f</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D2F17B3C204E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D2F17B3C204E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D30B568B3367DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D30B568B3367DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_VALID</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>6</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81503</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>13D2F17B3C284E9AE05305991F0A2702</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:13D2F17B3C284E9AE05305991F0A2702</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D318B718191CC6E05305991F0A0258</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D318B718191CC6E05305991F0A0258</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>streamhandleFULL_body</con:name><con:value>urn:dece:streamhandleid:org:dece:aa39999</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_031148</con:value></con:property><con:property><con:name>useroid</con:name><con:value>13D30B568B3467DFE05305991F0ACF57</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>35f99d95-e786-4529-9ffa-7622e002a1df</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_41001 - StreamRenew - LLPCS - StreamNotFound - Stream handle does not exist_MIGRATED" searchProperties="true" id="22180bee-e81a-4c1d-a240-39851babde0f"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a nonexistent stream handle.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f33b761a-61b6-43b2-9c6e-ae0a982bc61c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="064f7dd4-d6a6-453f-aa7b-7dee1557312d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="a8dd9ecd-02f5-42c7-9f0f-2507e0ec9a14" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log);
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Create nonexistent stream handle" id="6ffa3da2-1b6e-4203-98f5-8c215158e424"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new generalUtils.generalUtils(log);

String x = a.randomHexString(40);
String b = tP.getPropertyValue("urnstream") + x;

tC.setPropertyValue("streamhandleFULL_body",x);


this.log.info "a[$a] b[$b] x[$x]";</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="4e4dccb9-2400-4d5f-9663-4cac300a3d17"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="adecd770-7865-4955-a7ee-abb8c99a485a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="96245555-0037-456d-bdf3-64bd4ff79249" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log);
b = new dbUtils.dbStreams(log);

assert a.streamGetStreamDataRowCount(acct) == 0;
assert b.streamGetStreamDataHistoryRowCount(acct) == 0;</script></con:config></con:testStep><con:testStep type="groovy" name="Generate another request if necessary" id="9413a24d-b459-42c8-b682-3ee6f3e57825"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();
def loopuntil = tC.getPropertyValue("loopuntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
	tC.setPropertyValue("counter",counter.toString());
	testRunner.gotoStepByName("Create nonexistent stream handle");
}</script></con:config></con:testStep><con:properties><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>3</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPY5xLm1kCnMBAIlXVo4wOntZcc4Btwmdho7XPrr1w4lBXo57J6njBVZ+iR9lnTBYRJbns85zgRhtLJOYsq9QtrQ8ox6DHLCPQoTzD2BvLF/3fesKvDg7opWCYOG9gs4junUoKNHkXmuOzaw9Wm9HukWdBw8RbaDAJCqnOc4pFxAKhqaBUxXB45unk3AuQdqHnCrZ1b9Uavc4oxL21KlKm9tQa15Q1sIkXqGsVqtqiu7yrK5YQFgGvfX/TFa4ARqzYttRIWjrPmmj6oRRjiOURWxxLgwDnQuIu6NyZxCkWf4zVf0lS9ggLohdSJO5j+08i6OQjpjxbENKaMEwZi8QpWfaywWLKr48ZxlRCySL4MwgTKs4zXSkenQH5pxCO1EQwcIMw51voDmm60RnuEMU4Qr/47ChvbjtKoVVycZpHzGsoQfHv8MD6ZLHLMURzrfhfUG7XSDn2SqeYGRF1IU55ws8Y0iawoR5m/VxOh0U5Vhhmdk3SdcEnTNFTpjH97RcZuNgMwxF39ToL3ibI3cwjjHzZuaf91+CdliSe6RPRvUnw2j01t0Lt3rRgFgX7kQlKXdHo9IWZJoe0P8DGp5L2p32eSyt9o8uRvLHj22/ZuXpEvuskc76A57Y2Bm5sC9dPNwPQLO4mozgQ+R/TC6GrK7JO+MzNnAr6fP4Q2Zp4v7f6Z9+7511XdmrJ30XwavWU9YZz5uDer+tBa6I59dgk7083Vd6966Ftkk/WST9oLMCPhV0ho6r083YIN7+Sq4Fe2Hq7uz+7w3nDfKcPbwH8p2b36cT58wErujokEYVLqySlB838yUhET6rFD1UtV8uMBUaE11S/UOL5ftjkSerOH2bNqBDc5Np9Vyz90gsDrAtYFbr5td4APHcnZNZoviCGKb0RlRvlTL3dLme4Ao8TimEc70Jctlp+PaNxYDKGAlpCP5CBjleMJkez5L19biufbqYghMEb2adi2K2XT9pFVumBjQQebPBM4OerIJDnryCCOSEqwat+I1l8TmQubiBS5zEZvVJaxSnMvWnqku61lOzTU4SdIYK6RGwqI8xtV0kRaZMfj2a+kQ8UI66kyK1/ZlXMf/dimQOhFRClzF0sKyjPjDcDn33F0gHwI++3QI7cz7eUTUw5L5FBlBWySHv95povhRciTo++PhDnSp+wd3f7XHv8y/NND/vwZkPT7eNL7JiXFcjtJRtCR7bnebg5xBsms1d2R6gWb1pZovl3nBH8exjUyaN1QhDWAZY4xy2Vc3E/aMqVFaMU4aYiXwI+el/BBiLhZ0LKDAieR7pTiesLWMMVdbSygf6vrUlejApUydwGvxmawdy41LIf52KUMeUnpSPJSfFcui94p9YmvPj4xTLi2C0Lk6qQG2+YIXiEmzRLZelu0b/8zAZ84PhWWSSyxCEmqaC/z1n4rqqQ0NIsRyKsJAKwT7fb7AKTYp9t6VPpgpRkm5W5L/Xi51UlAAYbmRclLYVyuCp54Ane/NijenR+PCancDq9bqdECn2y3Gxfl2XHQs852fB+iaH8QfJXt5OuZ48zc=</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>3</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>100</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>bstreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEF0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB585DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>25</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81504</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>streamhandleFULL_body</con:name><con:value>ECBAFFD8E17EA98A59FA2AE2DAE7CD3CEEB65577</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4e4dccb9-2400-4d5f-9663-4cac300a3d17</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_41049 - StreamRenew - LLPCS - StreamNotActive - StreamRenew attempt after StreamDelete API invocation" searchProperties="true" id="a76144f0-f162-4611-8e84-a8a51bee0d42"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a stream handle that is in 'deleted' status.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a12ddce2-4a5c-4d9c-8ecc-37e7ce609850"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","deleted");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="793a53fa-9a2c-4d68-8aa3-687a6f7d3133"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="2d0eed48-fd77-4fdd-8ae9-a33784547714" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d111f725-def1-4895-bc5f-0a4d34928cf5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="e2f28a66-80cd-4d47-9a16-ca3853075759"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamDelete" id="6d2355fa-5333-4fe2-a0db-8f47522e2fec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamDelete")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="e990d572-93cd-4ce8-b4de-3c78f0f13903"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="18ae82bf-f2fc-4b6c-ac20-155d9879b5a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="64813f4e-b5fc-4904-8cf4-d54caac2995a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="76edfd26-6969-4950-80a0-a0ebc7651d11" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="6c920e7f-b8aa-425b-a9bd-23e003080197" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="595a9876-8740-4b64-9a8a-101b2b7d60eb" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEF0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPY5xLm1kCnMBAIlXVo4wOntZcc4Btwmdho7XPrr1w4lBXo57J6njBVZ+iR9lnTBYRJbns85zgRhtLJOYsq9QtrQ8ox6DHLCPQoTzD2BvLF/3fesKvDg7opWCYOG9gs4junUoKNHkXmuOzaw9Wm9HukWdBw8RbaDAJCqnOc4pFxAKhqaBUxXB45unk3AuQdqHnCrZ1b9Uavc4oxL21KlKm9tQa15Q1sIkXqGsVqtqiu7yrK5YQFgGvfX/TFa4ARqzYttRIWjrPmmj6oRRjiOURWxxLgwDnQuIu6NyZxCkWf4zVf0lS9ggLohdSJO5j+08i6OQjpjxbENKaMEwZi8QpWfaywWLKr48ZxlRCySL4MwgTKs4zXSkenQH5pxCO1EQwcIMw51voDmm60RnuEMU4Qr/47ChvbjtKoVVycZpHzGsoQfHv8MD6ZLHLMURzrfhfUG7XSDn2SqeYGRF1IU55ws8Y0iawoR5m/VxOh0U5Vhhmdk3SdcEnTNFTpjH97RcZuNgMwxF39ToL3ibI3cwjjHzZuaf91+CdliSe6RPRvUnw2j01t0Lt3rRgFgX7kQlKXdHo9IWZJoe0P8DGp5L2p32eSyt9o8uRvLHj22/ZuXpEvuskc76A57Y2Bm5sC9dPNwPQLO4mozgQ+R/TC6GrK7JO+MzNnAr6fP4Q2Zp4v7f6Z9+7511XdmrJ30XwavWU9YZz5uDer+tBa6I59dgk7083Vd6966Ftkk/WST9oLMCPhV0ho6r083YIN7+Sq4Fe2Hq7uz+7w3nDfKcPbwH8p2b36cT58wErujokEYVLqySlB838yUhET6rFD1UtV8uMBUaE11S/UOL5ftjkSerOH2bNqBDc5Np9Vyz90gsDrAtYFbr5td4APHcnZNZoviCGKb0RlRvlTL3dLme4Ao8TimEc70Jctlp+PaNxYDKGAlpCP5CBjleMJkez5L19biufbqYghMEb2adi2K2XT9pFVumBjQQebPBM4OerIJDnryCCOSEqwat+I1l8TmQubiBS5zEZvVJaxSnMvWnqku61lOzTU4SdIYK6RGwqI8xtV0kRaZMfj2a+kQ8UI66kyK1/ZlXMf/dimQOhFRClzF0sKyjPjDcDn33F0gHwI++3QI7cz7eUTUw5L5FBlBWySHv95povhRciTo++PhDnSp+wd3f7XHv8y/NND/vwZkPT7eNL7JiXFcjtJRtCR7bnebg5xBsms1d2R6gWb1pZovl3nBH8exjUyaN1QhDWAZY4xy2Vc3E/aMqVFaMU4aYiXwI+el/BBiLhZ0LKDAieR7pTiesLWMMVdbSygf6vrUlejApUydwGvxmawdy41LIf52KUMeUnpSPJSfFcui94p9YmvPj4xTLi2C0Lk6qQG2+YIXiEmzRLZelu0b/8zAZ84PhWWSSyxCEmqaC/z1n4rqqQ0NIsRyKsJAKwT7fb7AKTYp9t6VPpgpRkm5W5L/Xi51UlAAYbmRclLYVyuCp54Ane/NijenR+PCancDq9bqdECn2y3Gxfl2XHQs852fB+iaH8QfJXt5OuZ48zc=</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>0</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeleteddBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2CFD28CD30EFFE05307991F0AE210</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD28CD30EFFE05307991F0AE210</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2010/12/19 12:32</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>F709DF0B13284AC994C611C92278C293</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:F709DF0B13284AC994C611C92278C293</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>100</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030748</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB585DD2E05305991F0A0424</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81516</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e990d572-93cd-4ce8-b4de-3c78f0f13903</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_42051 - StreamRenew - LLPCS - Stream renewal allowed for 'controlled' userId_MIGRATED" searchProperties="true" id="92acfc40-9c7a-44b6-a423-15b5fe233105"><con:description>This test case will verify that a controlled userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a79f2e50-98c0-4d67-b701-a9bb5d5985aa"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="c23d9629-c198-476d-b7b9-57dfd602d9b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="43988902-dcd3-4eba-a553-74feeb4597fd" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="58f9012b-4e23-4103-8e6f-738b5626b33b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="1627c216-6fa3-4559-b78c-2cac280f74aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="86949a96-a7f7-4602-909e-912c8c275a68"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="e7ab69a7-4c14-493e-92ea-d8909483b05e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="ef11d88f-5e95-4080-b3b5-5aca70ff0fce" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="aca65bc3-fe01-4ace-8943-324d8673f2c9" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="f7ab3792-09f4-428d-bb88-fc9b073ed3cf" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="85c4e687-0933-4bb8-8b3c-7c52fc81fadd" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>D316B246027342EC84644B5798678FC2</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdc9o6EP0rjPuYMZKNMeAJzBCME6bQJkBJmpeOIstYrZEcSwaSX1/JgAuE5NLeJ9B6dfbsh3b3UqBFYntdIUgmKWeV9SJhwiukbSPPmMeRoMJjaEGEJ7E36Y6Gnl2FHtpdMSoDv238cOpNO4Qtx0SNums6rq3+kVrDtIlTbyHoRIggpSpETgZMSMRk27ChVTehY1ruFDY82PQsWG3WnUejMiOZUNhKpQqNLam1aBuxlKkHwGq1qq5qVZ7NgQ2hBR5GwwmOyQIZncuNR4WhrLPVx9WQYJIkuIr5AlyCA53LUHgTOmdI5hnZ2grfswUBbAGlEwo6/2SUd0k4YBEvjj3EOKMYJfQV6fiMiIx5WOkmc55RGS/edcKCGtgka2xiy2GfDHBI7UygA4aZQKaIkbXFGpOIZIRhUvk2HrSNT+dlrbg6zRATEc8W4vD4d3wIW5KEpyQ0xc6tLbXzAU9EqnNJsDdgOMkFXZIvulhThInYZpPg86EqtxmJ6HpIhSrQtdDswD69o+MmGj6dEyH/JUF7ydmAzFCSk84viS5m3B24ERdBi6bxZ7e5Cuqtbn/ULgjsKxeCMrWb41FRlkW0uTG0xxfis3x8eXy6GX9bNYPW5C5PgPvKx7x38xA072dL9MJu5p/BKIwdFPZi5E7vXv3udW/mx/D6K/3+K/vZu52OWRBGInrq9i9m40m/Sb+PXpNler96DurdWhish4n9EA6CiyjtssdFFl8/hHB+n70ur2/zlduMR3jWu3N/YjuNQUrs6NvdwL+/fgA308lseM/n7dKdPf6Hst2bn+RPPwmWu6Mug4FfCVSWkPy4mWkJDc2oUPVS3XyEJEwaHX1L9w4vV+2Ohp7K4eZs1fwabFjO1VXQq/u+3Yf1Gqy3WlYAu9CxnV2T2bA4otjjLKLalm65m7L5mCBeeIKwkGTmkueq0wnjA0QfSVQZsLF6BJwJMuWqPbe4SxpPq4bDYcjsRnMdtvLWi2sblS9cfmVfs24kSXbQki140JLHBNOUEt23dVkLVddCqlA8o2UuE6u6RFVGctXZM91kPdtp1oGgizQhmihY8DBPSDWN0yIwQGx+bRNhUUjH/Wnx2N516/jbLgJKJ6RaQWhfrojKIjkxW+DOkTcOuydn0A6+m4dUvysVTplRvGFy+OlPlejyKEvEH3YntzvSpe5f3P3Rm/yw/hFg+H8BVD7e3gQfxAQcp6M0FC7pntnd4qBGkGpanV0xPSOr+lzNl8u8qB/HqYFMwQOdSABtMCE4V231Zcp/EQZKFHDWDCuJHxkv5YcUcxmziUSSLFS9V4rjGUvLhAi9tAzUO12fuxEdmFShk2QtT8l6iVq4NOMPdzLsYa2nxLfqZ8Wz8E/GTmDt2VF+qp1FUjbXJz2/Xt6pC8wVLFWdl2f74KcAThk/FJZBLrlIVVBPuSTvf6nolto2EMY8Z3LgG4Vgv80XPOVLSrw/Sm9giklSrpb0v3dLkxYlgIlaSAUt8PWG4OknwOZ7o2Jr9Gha2L3At5tX/T7sB0ExLRqbadG3LVgG5YBd5434rWQvTsc13vkN</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2DF5E6CF75D94E05307991F0A13B0</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:28:07</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:23:07.102</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:28:07.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:23:07.102Z</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:09:36.769</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:09:36.769</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:09:37</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:09:36.769</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030749</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:D316B246027342EC84644B5798678FC2</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2DF5E6CF75D94E05307991F0A13B0</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEF0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BBFD5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714BBFC5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BBFC5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B65694912BCFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>86949a96-a7f7-4602-909e-912c8c275a68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_42052 - StreamRenew - LLPCS - Stream renewal allowed for 'basic' userId__MIGRATED" searchProperties="true" id="6261b456-5ddf-49a6-bd57-3f8ea9d0c27c" disabled="true"><con:description>This test case will verify that a controlled userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="167c7e26-635b-4532-afc1-1be718a8fe0c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="b024b2bc-85d2-496a-b605-47ab1e21e93e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="09be28b2-5f08-49e1-8a8b-552342e3305b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="34b2a2d9-3058-4918-947a-1f53299d9611"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="adedbfb8-61bd-4bee-b484-0d2567bd39c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="e9771b72-0ccf-4f33-ae63-9f43a2e7efde"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as Basic User" id="3c396050-7e83-4da8-93e3-ea26e79f38fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  As my full account user created the stream, i will
*  need to save it's useroid for STREAM table row
*  validations
*/
String useroid = tC.getPropertyValue("useroid");

tC.setPropertyValue("username",tP.getPropertyValue("UserName_BAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userBasic1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("useroid", useroid);


</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="2bbee16f-58e0-47fc-86b5-4a7d55549093"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="be3de198-3b3a-44e3-b04f-1ddb2faca523" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="6a68fbc1-78f7-4830-a3c1-54b1995e872a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="69212bc1-f7d5-4152-9cd0-1bbdb17af693" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="e5633736-6053-4f9e-ae14-37a9f105ab3b" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030751</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:DE01EEA25FA842A28AD086DFBA45E8E8</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2DF5E6D035D94E05307991F0A13B0</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BB290015BE0401F0A059942CA</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2DF5E6D035D94E05307991F0A13B0</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>DE01EEA25FA842A28AD086DFBA45E8E8</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3c396050-7e83-4da8-93e3-ea26e79f38fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e9771b72-0ccf-4f33-ae63-9f43a2e7efde</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_42054 - StreamRenew - LLPCS - UserIdUnmatched - Full user cannot renew standard-user created stream_MIGRATED" searchProperties="true" id="c43a3025-a0bc-48dc-aa92-67c14372b148"><con:description>This test case will verify that a basic userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="579373c5-7692-4d7a-bcf2-26b75396fd80"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="be110f2b-6d00-4a51-9fc7-89d49d1b2f5a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="0d40c9a0-f5c3-479c-b9c9-e1290eadd677" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="ca3bc8a3-8f1d-4e34-b905-20b658ea6313"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="14a1aad7-f394-4013-9161-8e036f747243"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as Full User" id="56288b46-0c28-41b0-9633-31d0299e9e4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  As my full account user created the stream, i will
*  need to save it's useroid for STREAM table row
*  validations
*/
String useroid = tC.getPropertyValue("useroid");

tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("useroid", useroid);


</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="d653d896-7e63-4e01-aec3-5fad0a85ad32"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="8e84a022-699a-46c3-a0e7-160932d5f5d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="8409ed53-9556-4755-aa13-9229ea255578" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="4612379f-76a6-4aa8-8b98-1eef0084cf5d" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>E824928A89C4406E89E23A2A3B5A43F4</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPY5xLm1kCnMBAIlXVo4wOntZcc4Btwmdho7XPrr1w4lBXo57J6njBVZ+iR9lnTBYRJbns85zgRhtLJOYsq9QtrQ8ox6DHLCPQoTzD2BvLF/3fesKvDg7opWCYOG9gs4junUoKNHkXmuOzaw9Wm9HukWdBw8RbaDAJCqnOc4pFxAKhqaBUxXB45unk3AuQdqHnCrZ1b9Uavc4oxL21KlKm9tQa15Q1sIkXqGsVqtqiu7yrK5YQFgGvfX/TFa4ARqzYttRIWjrPmmj6oRRjiOURWxxLgwDnQuIu6NyZxCkWf4zVf0lS9ggLohdSJO5j+08i6OQjpjxbENKaMEwZi8QpWfaywWLKr48ZxlRCySL4MwgTKs4zXSkenQH5pxCO1EQwcIMw51voDmm60RnuEMU4Qr/47ChvbjtKoVVycZpHzGsoQfHv8MD6ZLHLMURzrfhfUG7XSDn2SqeYGRF1IU55ws8Y0iawoR5m/VxOh0U5Vhhmdk3SdcEnTNFTpjH97RcZuNgMwxF39ToL3ibI3cwjjHzZuaf91+CdliSe6RPRvUnw2j01t0Lt3rRgFgX7kQlKXdHo9IWZJoe0P8DGp5L2p32eSyt9o8uRvLHj22/ZuXpEvuskc76A57Y2Bm5sC9dPNwPQLO4mozgQ+R/TC6GrK7JO+MzNnAr6fP4Q2Zp4v7f6Z9+7511XdmrJ30XwavWU9YZz5uDer+tBa6I59dgk7083Vd6966Ftkk/WST9oLMCPhV0ho6r083YIN7+Sq4Fe2Hq7uz+7w3nDfKcPbwH8p2b36cT58wErujokEYVLqySlB838yUhET6rFD1UtV8uMBUaE11S/UOL5ftjkSerOH2bNqBDc5Np9Vyz90gsDrAtYFbr5td4APHcnZNZoviCGKb0RlRvlTL3dLme4Ao8TimEc70Jctlp+PaNxYDKGAlpCP5CBjleMJkez5L19biufbqYghMEb2adi2K2XT9pFVumBjQQebPBM4OerIJDnryCCOSEqwat+I1l8TmQubiBS5zEZvVJaxSnMvWnqku61lOzTU4SdIYK6RGwqI8xtV0kRaZMfj2a+kQ8UI66kyK1/ZlXMf/dimQOhFRClzF0sKyjPjDcDn33F0gHwI++3QI7cz7eUTUw5L5FBlBWySHv95povhRciTo++PhDnSp+wd3f7XHv8y/NND/vwZkPT7eNL7JiXFcjtJRtCR7bnebg5xBsms1d2R6gWb1pZovl3nBH8exjUyaN1QhDWAZY4xy2Vc3E/aMqVFaMU4aYiXwI+el/BBiLhZ0LKDAieR7pTiesLWMMVdbSygf6vrUlejApUydwGvxmawdy41LIf52KUMeUnpSPJSfFcui94p9YmvPj4xTLi2C0Lk6qQG2+YIXiEmzRLZelu0b/8zAZ84PhWWSSyxCEmqaC/z1n4rqqQ0NIsRyKsJAKwT7fb7AKTYp9t6VPpgpRkm5W5L/Xi51UlAAYbmRclLYVyuCp54Ane/NijenR+PCancDq9bqdECn2y3Gxfl2XHQs852fB+iaH8QfJXt5OuZ48zc=</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D318B717FB1CC6E05305991F0A0258</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:28:25</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:23:25.955</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:28:25.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:23:25.955Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:19:27.56</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:19:27.56</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:19:27</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:19:27.56</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:E824928A89C4406E89E23A2A3B5A43F4</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D318B717FB1CC6E05305991F0A0258</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEF0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BBFD5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81537</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d653d896-7e63-4e01-aec3-5fad0a85ad32</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_42054 - StreamRenew - LLPCS - Standard user can renew standard-user created stream_MIGRATED" searchProperties="true" id="03ecfc35-f5f8-421c-a94f-8fa9f66334ea"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f25dd00a-0008-4c33-860d-18c0f179300a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="b555145c-d498-488a-bfdd-3c08ca93df97"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d5ba0f24-5443-472d-8d1a-3c28da76f387" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="e0d547b3-123a-4965-ac22-a9ecce46429b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="bf6f19b7-ff60-4596-aeab-f773e9f4c775"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="42a86268-c297-4454-bcba-9c4b135afc35"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="215aef46-f0f9-4c6d-83e2-661d8dcfd843"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="66ef90bd-6a0c-42d2-88e4-1b5da46ceea5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="ea32762a-47e6-4e1c-a163-d308e5eb23af" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="b96ad72a-af5b-4d7b-900d-e3f95a261dc0" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="5ae1f97b-740c-4cc1-9e41-4a6100df0bc8" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>3BA32B9B418B459B87F7D2B486B1F8C0</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdc9o6EP0rjPuYMZKNMeAJzBCME6bQJkBJmpeOIstYrZEcSwaSX1/JgAuE5NLeJ9B6dfbsh3b3UqBFYntdIUgmKWeV9SJhwiukbSPPmMeRoMJjaEGEJ7E36Y6Gnl2FHtpdMSoDv238cOpNO4Qtx0SNums6rq3+kVrDtIlTbyHoRIggpSpETgZMSMRk27ChVTehY1ruFDY82PQsWG3WnUejMiOZUNhKpQqNLam1aBuxlKkHwGq1qq5qVZ7NgQ2hBR5GwwmOyQIZncuNR4WhrLPVx9WQYJIkuIr5AlyCA53LUHgTOmdI5hnZ2grfswUBbAGlEwo6/2SUd0k4YBEvjj3EOKMYJfQV6fiMiIx5WOkmc55RGS/edcKCGtgka2xiy2GfDHBI7UygA4aZQKaIkbXFGpOIZIRhUvk2HrSNT+dlrbg6zRATEc8W4vD4d3wIW5KEpyQ0xc6tLbXzAU9EqnNJsDdgOMkFXZIvulhThInYZpPg86EqtxmJ6HpIhSrQtdDswD69o+MmGj6dEyH/JUF7ydmAzFCSk84viS5m3B24ERdBi6bxZ7e5Cuqtbn/ULgjsKxeCMrWb41FRlkW0uTG0xxfis3x8eXy6GX9bNYPW5C5PgPvKx7x38xA072dL9MJu5p/BKIwdFPZi5E7vXv3udW/mx/D6K/3+K/vZu52OWRBGInrq9i9m40m/Sb+PXpNler96DurdWhish4n9EA6CiyjtssdFFl8/hHB+n70ur2/zlduMR3jWu3N/YjuNQUrs6NvdwL+/fgA308lseM/n7dKdPf6Hst2bn+RPPwmWu6Mug4FfCVSWkPy4mWkJDc2oUPVS3XyEJEwaHX1L9w4vV+2Ohp7K4eZs1fwabFjO1VXQq/u+3Yf1Gqy3WlYAu9CxnV2T2bA4otjjLKLalm65m7L5mCBeeIKwkGTmkueq0wnjA0QfSVQZsLF6BJwJMuWqPbe4SxpPq4bDYcjsRnMdtvLWi2sblS9cfmVfs24kSXbQki140JLHBNOUEt23dVkLVddCqlA8o2UuE6u6RFVGctXZM91kPdtp1oGgizQhmihY8DBPSDWN0yIwQGx+bRNhUUjH/Wnx2N516/jbLgJKJ6RaQWhfrojKIjkxW+DOkTcOuydn0A6+m4dUvysVTplRvGFy+OlPlejyKEvEH3YntzvSpe5f3P3Rm/yw/hFg+H8BVD7e3gQfxAQcp6M0FC7pntnd4qBGkGpanV0xPSOr+lzNl8u8qB/HqYFMwQOdSABtMCE4V231Zcp/EQZKFHDWDCuJHxkv5YcUcxmziUSSLFS9V4rjGUvLhAi9tAzUO12fuxEdmFShk2QtT8l6iVq4NOMPdzLsYa2nxLfqZ8Wz8E/GTmDt2VF+qp1FUjbXJz2/Xt6pC8wVLFWdl2f74KcAThk/FJZBLrlIVVBPuSTvf6nolto2EMY8Z3LgG4Vgv80XPOVLSrw/Sm9giklSrpb0v3dLkxYlgIlaSAUt8PWG4OknwOZ7o2Jr9Gha2L3At5tX/T7sB0ExLRqbadG3LVgG5YBd5434rWQvTsc13vkN</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2DF5E6D105D94E05307991F0A13B0</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>zVdZd6rKEn73V7jcj1mGQUmiK/GsZhBRUUHA4Y2hGZRBaRDk159Wo9tkZ0/33of7kBW7qOGrqq+7q1//KaOwfoApCpL4rUE9ko06jO3ECWLvraFr/eZL459e7RWZUUh3AUIwzbBmXeLfGq5lOQ5N0k27bZvNNmSem1aLNpsUSWJpoy4hlEMpRpkZZ28NmqTIJvnUpBmNancZukuTj9TLy7pRN67R6VN0jCdG3XO8t0aext3ERAHqxmYEUTezu3Mgj7tYs2tewTR67/DOAVOi9+qg7jzwYjPLU/ju0EFvDT/Ldl2CKIrisWg9JqlH0CRJEmSHwDoOCrxvDZzquzF0pNhNLmvOjJM4sM0wqMxTRBlmfuLUQeglaZD50U9cUwRFnlw3YWk3baodf2sQ3wOc0f2hpw8gU2Q2kW9SV2cqdGGKmwbruiq9Nb79pi8XIy01Y+QmaYQ+rf8OC4wPMEx20Gmia0pXWH/u8Ys69V6h3ZViO8xRcICTU/N3pg1RfZZCNyjHAcKUclD93Ph6ia68gfbf9OKVuMeJYRNfVIYPPIiy/6RR9026eDHMMIe9XUkSnbHeWs4iv9Q2yVFOBlsrYrVn4e0M4V75AurW4/f1Z4beCPVu5MyNdcsrHBsVNiQGnLoaz81CtHhqSYhUQpqW20bT4iHoT5dT85hxxrTUGIV294yV5az7zIViW6Ce9GqCasKSPDLLZD+mt9IMyEaHMlJtzA8OB6MFwNO845rsoWVR8r6kJ53RwTnYwTjkaEi7D3t7V3nPPFPBOIz8WVJ7Svw1yR3zuFz4es623a389j2n+xxOeY3g8Zzk6feSITu8mZm3BXfa/y7elxnsyZLE5xXHgePcA4XEAg//bcCE9bZ7fxuInYJkgaL0Ac+x4UYYy2ArAkoXWF/mDEMuuQoMWW9iYEOtBsI1K6tCwRcr3lCUgVD4miMaR0sM83UlTGSAzsacLwuqYPCqJsgySC6yUuYtsdzIc7mQlBVfww54odxVjtjJoFgGNi0x8pyhV3MmXy8NLO8fx9HkYGlCKHOyyM334lyyWrwiDIG6Wth0P8e21TjaJbWVzt4ZDXdwA2C/IHFMUMnatpA1nZ7wqnmWaR9lsiQOZQUVnHLOSqwJxdDQq++14FiZcyKhFDQwu9TC1rj+hFwvh8hcMLGsgoL3zsYjoXCmVyCyQhY17lKrsVCogqpP+rIqFQI4y3ihCJFFT3xL9A92SymHGtjcN4ZThEU/xt9j9WAfmX3NFPvAigzKbqm+HTCBuUwKb/1S8MpqOErWEnYzAYrAsgrAgEhwSg3XnwVj1mCmu6BDB3Ds9pMI+mlNppLR9lCV5EvQmnqzyYLh3e3zTAxmLdPxCSm06U1rCyQJOiPKV0xHXREqHwfV03SkL2GQrqpswijUU/DC1NRFri/5JHx2BsuVPnooV7aiTWdzfTGrynKy37xUYTaYsoN0PpR5bzqBcIbsB4I0+6z2wjPcarDBfHJVEjI14MksAOLG84QAE5gdbC4kHKiygMkLZK4QuQUnzoEoPggSyyuK2/epmS0auU5NZElwQlym42qphrU1x/K4U6S5WO9WdJ9ca8A5O1PaQt9TdOZhuIRrZRJqRgaKneHGFEWKO2XgyoVnyycGOFIxZ/EuYmu5BHRzuhuS5ch4Iqm94oTDeQforXJOb8up762PW2+9xU1Z3W2dlQZCQ7vjmIQptqgpmqDK4OWy30pZ0ltqaEflzorsktdwz87GicYKal8h9ZLnwegiQxqgS7SqhI3MCWf7GihlE9PiYC19tIonwVQTckza/I4uG4smf8uxE8VqHzm254ACPnNMuHBMAO7+QXrhKcQ8cTu0KDxWFPbKszEednakshxva+xDn/CyIGxP45dCGz0sqGPx7G+UxaIj8T73ELsrv2VlLGlWtgKH22cxULd8/NQOj/JYVhg9IMIjuYH7Ao1rE4mKhVZW9YlOmj+w0TqIqqrVpvVoNs8Pkm6OEHX0rf2iU2xmgyeCSMUjUz2vD0p/mdiryz3y+ZC8CS/HKHF/wH44ga8T1Ty3NtDOrsvTPSzx9T6+HM3s59MZ9UidJYHTdM+q3TxGO2hjGNBp9NwUOskrce/yUzwuid3gZHgaNS83769nQTvqWtBMYdr4hadT0nUpVvEokcQIaslbA+ETIo+DfY6x+viCbdQnSTaNpylwM5ieh1bq66FVxensAniabO8GAVia0S6Ej3YSEaZtJ3mcIfwDnWeNnwL7/O2aA9ZxgpMCOsFiIS4m/DxIt5hu+4rpD7Ff3YPcCU4jBS5Ilgb2BcnHT7333FDmQHtvHswd9XgwH2OY46k+Pad5xX4z+Sz44J74nNktonMI7Bvvbg8NiceTTw+wHC/c/H789tkCz8An8Qk4wsgxbnjDawUVcXs2oH/wI8a0bAf+4Pndx03+EVue+fE8w/spwu2vn5e/f+V8sMbpZ7DMvpJxIQZ4Cv7Lp4/dtU96WDzD/4okdb5X/QtfX338KLzlc8OU4aZZeQZ//qV+2rtvjXeeB07jLLgeDne74r78vMAJBLiYSHzjB6fn2e99mC9/9majiKU8nts+jMzGTTf4vXIzOPfJxvsc63ez4w7jL/FrEwePvUaPoltt5laXD5B6P4h/lPwXRUyv8/3flFEV+v93JQR9nuVwHfFV1Wr/T0r5eXP2/gU=</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030749</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:3BA32B9B418B459B87F7D2B486B1F8C0</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2DF5E6D105D94E05307991F0A13B0</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEF0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BBFD5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714BBFC5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BBFC5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B65694912BCFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81539</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>42a86268-c297-4454-bcba-9c4b135afc35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_42055 - StreamRenew - LLPCS - UserIdUnmatched - Standard user cannot renew full-user created stream_MIGRATED" searchProperties="true" id="8bc4d0c5-cac7-470b-97e9-67cbd0dc24f2"><con:description>This test case will verify that a basic userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c17e6c57-5761-4888-9223-7b3b2afb3a37"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="2a68e77b-b6f0-43dc-b182-7644710d5a65"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="be06bd53-288e-442e-83d8-2c34a623127d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3e3fb353-9f27-4e46-8160-9aba5122a635"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="04b1c394-9645-4678-8a72-6f9275c4371d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as Standard User" id="7bb6e84a-4878-4c85-ba9a-2f07c80a20a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  As my full account user created the stream, i will
*  need to save it's useroid for STREAM table row
*  validations
*/
String useroid = tC.getPropertyValue("useroid");

tC.setPropertyValue("username",tP.getPropertyValue("UserName_SAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userStandard1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("useroid", useroid);


</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="01ba8675-a166-4b39-b12c-80690f1192c3"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f63a2bd4-fc69-479d-919f-54ad79efdf6b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="f868aa98-6353-43f5-ad3b-9e8f377571b5"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="66aa3695-6991-4d4b-991d-0d949f5b3a62" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="36ed6d2b-f1ad-4d2c-8c67-646f52a34c3f" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>B523D17354B8495D842C54E30CD77857</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdc9o6EP0rjPuYMZKNMeAJzBCME6bQJkBJmpeOIstYrZEcSwaSX1/JgAuE5NLeJ9B6dfbsh3b3UqBFYntdIUgmKWeV9SJhwiukbSPPmMeRoMJjaEGEJ7E36Y6Gnl2FHtpdMSoDv238cOpNO4Qtx0SNums6rq3+kVrDtIlTbyHoRIggpSpETgZMSMRk27ChVTehY1ruFDY82PQsWG3WnUejMiOZUNhKpQqNLam1aBuxlKkHwGq1qq5qVZ7NgQ2hBR5GwwmOyQIZncuNR4WhrLPVx9WQYJIkuIr5AlyCA53LUHgTOmdI5hnZ2grfswUBbAGlEwo6/2SUd0k4YBEvjj3EOKMYJfQV6fiMiIx5WOkmc55RGS/edcKCGtgka2xiy2GfDHBI7UygA4aZQKaIkbXFGpOIZIRhUvk2HrSNT+dlrbg6zRATEc8W4vD4d3wIW5KEpyQ0xc6tLbXzAU9EqnNJsDdgOMkFXZIvulhThInYZpPg86EqtxmJ6HpIhSrQtdDswD69o+MmGj6dEyH/JUF7ydmAzFCSk84viS5m3B24ERdBi6bxZ7e5Cuqtbn/ULgjsKxeCMrWb41FRlkW0uTG0xxfis3x8eXy6GX9bNYPW5C5PgPvKx7x38xA072dL9MJu5p/BKIwdFPZi5E7vXv3udW/mx/D6K/3+K/vZu52OWRBGInrq9i9m40m/Sb+PXpNler96DurdWhish4n9EA6CiyjtssdFFl8/hHB+n70ur2/zlduMR3jWu3N/YjuNQUrs6NvdwL+/fgA308lseM/n7dKdPf6Hst2bn+RPPwmWu6Mug4FfCVSWkPy4mWkJDc2oUPVS3XyEJEwaHX1L9w4vV+2Ohp7K4eZs1fwabFjO1VXQq/u+3Yf1Gqy3WlYAu9CxnV2T2bA4otjjLKLalm65m7L5mCBeeIKwkGTmkueq0wnjA0QfSVQZsLF6BJwJMuWqPbe4SxpPq4bDYcjsRnMdtvLWi2sblS9cfmVfs24kSXbQki140JLHBNOUEt23dVkLVddCqlA8o2UuE6u6RFVGctXZM91kPdtp1oGgizQhmihY8DBPSDWN0yIwQGx+bRNhUUjH/Wnx2N516/jbLgJKJ6RaQWhfrojKIjkxW+DOkTcOuydn0A6+m4dUvysVTplRvGFy+OlPlejyKEvEH3YntzvSpe5f3P3Rm/yw/hFg+H8BVD7e3gQfxAQcp6M0FC7pntnd4qBGkGpanV0xPSOr+lzNl8u8qB/HqYFMwQOdSABtMCE4V231Zcp/EQZKFHDWDCuJHxkv5YcUcxmziUSSLFS9V4rjGUvLhAi9tAzUO12fuxEdmFShk2QtT8l6iVq4NOMPdzLsYa2nxLfqZ8Wz8E/GTmDt2VF+qp1FUjbXJz2/Xt6pC8wVLFWdl2f74KcAThk/FJZBLrlIVVBPuSTvf6nolto2EMY8Z3LgG4Vgv80XPOVLSrw/Sm9giklSrpb0v3dLkxYlgIlaSAUt8PWG4OknwOZ7o2Jr9Gha2L3At5tX/T7sB0ExLRqbadG3LVgG5YBd5434rWQvTsc13vkN</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D30714BD245DD2E05305991F0A0424</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:28:25</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:23:25.955</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:28:25.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:23:25.955Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:19:27.56</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:19:27.56</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:19:27</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:19:27.56</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030749</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:B523D17354B8495D842C54E30CD77857</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D30714BD245DD2E05305991F0A0424</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEF0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB585DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714BBFC5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BBFC5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B65694912BCFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81540</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>01ba8675-a166-4b39-b12c-80690f1192c3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_42070 - StreamRenew - LLPCS - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of deleted cannot be renewed" searchProperties="true" id="b4f46938-5bbb-42ef-abd7-cc2e0d3c5987" disabled="true"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="fa983b9f-4ca4-48af-a8ee-c8c6cdc14cde"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="72504dfd-daab-427b-96ad-f3e0f3f30da0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="e9435abe-d354-4b02-82c6-37a59ba08897" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="c2ffe581-30aa-4008-996e-4e1cdb027a0b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="82f8d9c1-9b99-4f69-bc83-cedb5611b61b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="e4da826f-9927-406a-8b4e-538e78697080"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to deleted" id="acdf66cf-cf9f-43ae-9842-c1d2f846e909"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

b = new dbUtils.dbRightsToken(log);

assert b.rightsTokenSetStatusDeleted(tC.getPropertyValue("rightstokenid")) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="a0a720a9-4c7d-4dde-adcf-e86e45370257"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b914514e-31e9-42db-b5c2-dc5e769a9757" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="3cf96df8-7d77-465e-b5c5-f585f59659b1" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="ad6dc104-fb45-4abf-a316-3ab2043e2437" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6DD195E3C4013CE0401F0A07992E32</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6DD1957E33E828E0401F0A07992E40</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81545</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e4da826f-9927-406a-8b4e-538e78697080</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_42095 - StreamRenew - LLPCS - StreamRightsNotGranted - PURCHASE_PROFILE.STREAM value of  'N'_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9157a014-255a-403c-995a-1f47b5080c84"><con:description>This test case will verify proper StreamCreate behavior when the PURCHASE_PROFILE.STREAM value associated with the RightsToken is 'N'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7fd0ea36-e94a-4110-a09d-7a1d422ca28c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","CID_NOT_GRANTED");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="e708d51e-2cba-48e9-bb8e-24d0d0383f3d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="534067c6-b809-4a90-a6ab-5fb6e52f8c06" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="bcb80b7b-5819-4789-b2df-a5e4e28690cf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="f1b377ed-24e7-46c7-a78b-125333944d4a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken PURCHASE_PROFILE.STREAM to 'N'" id="ff10c565-ec47-4653-a8ad-fe249c3e9065"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsPurchaseProfileStreamOff(rt) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="8f8d7d6d-aad5-4924-beaf-9f5e4dd80117"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="a2085477-309e-4aac-8e83-6875472abbce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e4d780e8-71b6-4628-9dda-93372c4afea8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="39d53ca3-5bde-4db4-867f-f32fbb52fba5" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="7af4292b-5f02-4154-a0d6-eb7424251bae" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken PURCHASE_PROFILE.STREAM to 'Y'" id="6538bdc8-0022-420a-b9da-5fb75ca565ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def rt = tC.getPropertyValue("rightstokenid");

a = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert a.rightsPurchaseProfileStreamOn(rt) >= 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="e7e880c3-b0d9-48ed-948b-6309ea13201a" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>rightstokenid</con:name><con:value>13D2DF5E6D1D5D94E05307991F0A13B0</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPCSuuid_member}</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DB4C516C4AB74213A5F85F6DCAD1C0A4</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountid</con:name><con:value>900</con:value></con:property><con:property><con:name>userid</con:name><con:value>600</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPY5xLm1kCnMBAIlXVo4wOntZcc4Btwmdho7XPrr1w4lBXo57J6njBVZ+iR9lnTBYRJbns85zgRhtLJOYsq9QtrQ8ox6DHLCPQoTzD2BvLF/3fesKvDg7opWCYOG9gs4junUoKNHkXmuOzaw9Wm9HukWdBw8RbaDAJCqnOc4pFxAKhqaBUxXB45unk3AuQdqHnCrZ1b9Uavc4oxL21KlKm9tQa15Q1sIkXqGsVqtqiu7yrK5YQFgGvfX/TFa4ARqzYttRIWjrPmmj6oRRjiOURWxxLgwDnQuIu6NyZxCkWf4zVf0lS9ggLohdSJO5j+08i6OQjpjxbENKaMEwZi8QpWfaywWLKr48ZxlRCySL4MwgTKs4zXSkenQH5pxCO1EQwcIMw51voDmm60RnuEMU4Qr/47ChvbjtKoVVycZpHzGsoQfHv8MD6ZLHLMURzrfhfUG7XSDn2SqeYGRF1IU55ws8Y0iawoR5m/VxOh0U5Vhhmdk3SdcEnTNFTpjH97RcZuNgMwxF39ToL3ibI3cwjjHzZuaf91+CdliSe6RPRvUnw2j01t0Lt3rRgFgX7kQlKXdHo9IWZJoe0P8DGp5L2p32eSyt9o8uRvLHj22/ZuXpEvuskc76A57Y2Bm5sC9dPNwPQLO4mozgQ+R/TC6GrK7JO+MzNnAr6fP4Q2Zp4v7f6Z9+7511XdmrJ30XwavWU9YZz5uDer+tBa6I59dgk7083Vd6966Ftkk/WST9oLMCPhV0ho6r083YIN7+Sq4Fe2Hq7uz+7w3nDfKcPbwH8p2b36cT58wErujokEYVLqySlB838yUhET6rFD1UtV8uMBUaE11S/UOL5ftjkSerOH2bNqBDc5Np9Vyz90gsDrAtYFbr5td4APHcnZNZoviCGKb0RlRvlTL3dLme4Ao8TimEc70Jctlp+PaNxYDKGAlpCP5CBjleMJkez5L19biufbqYghMEb2adi2K2XT9pFVumBjQQebPBM4OerIJDnryCCOSEqwat+I1l8TmQubiBS5zEZvVJaxSnMvWnqku61lOzTU4SdIYK6RGwqI8xtV0kRaZMfj2a+kQ8UI66kyK1/ZlXMf/dimQOhFRClzF0sKyjPjDcDn33F0gHwI++3QI7cz7eUTUw5L5FBlBWySHv95povhRciTo++PhDnSp+wd3f7XHv8y/NND/vwZkPT7eNL7JiXFcjtJRtCR7bnebg5xBsms1d2R6gWb1pZovl3nBH8exjUyaN1QhDWAZY4xy2Vc3E/aMqVFaMU4aYiXwI+el/BBiLhZ0LKDAieR7pTiesLWMMVdbSygf6vrUlejApUydwGvxmawdy41LIf52KUMeUnpSPJSfFcui94p9YmvPj4xTLi2C0Lk6qQG2+YIXiEmzRLZelu0b/8zAZ84PhWWSSyxCEmqaC/z1n4rqqQ0NIsRyKsJAKwT7fb7AKTYp9t6VPpgpRkm5W5L/Xi51UlAAYbmRclLYVyuCp54Ane/NijenR+PCancDq9bqdECn2y3Gxfl2XHQs852fB+iaH8QfJXt5OuZ48zc=</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>nickname</con:name><con:value/></con:property><con:property><con:name>beforeAPIstreamrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>beforeAPIstreamhistoryrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>afterAPIstreamhistoryrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>afterAPIstreamrowcount</con:name><con:value>0</con:value></con:property><con:property><con:name>nodertraccountid</con:name><con:value>100102</con:value></con:property><con:property><con:name>nodertruserid</con:name><con:value>100202</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpuuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>llpuuid</con:name><con:value>${#Project#assertLLPuuid}</con:value></con:property><con:property><con:name>rtruuid</con:name><con:value>${#Project#assertRTRuuid}</con:value></con:property><con:property><con:name>streamcntbefore</con:name><con:value>10</con:value></con:property><con:property><con:name>streamcntafter</con:name><con:value>10</con:value></con:property><con:property><con:name>streamhistorybefore</con:name><con:value>0</con:value></con:property><con:property><con:name>streamhistoryafter</con:name><con:value>0</con:value></con:property><con:property><con:name>rtraccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>rtruserid</con:name><con:value>600</con:value></con:property><con:property><con:name>rtrorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeorgid</con:name><con:value>3</con:value></con:property><con:property><con:name>llpnodeaccountid</con:name><con:value>910600</con:value></con:property><con:property><con:name>llpassert</con:name><con:value>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</con:value></con:property><con:property><con:name>llpaccountid</con:name><con:value>3</con:value></con:property><con:property><con:name>llpuserid</con:name><con:value>3</con:value></con:property><con:property><con:name>llpnodeid</con:name><con:value>910</con:value></con:property><con:property><con:name>llpnodeuserid</con:name><con:value>100600</con:value></con:property><con:property><con:name>llporgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpnodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpnodeuserid</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpaccountid</con:name><con:value/></con:property><con:property><con:name>dlpuserid</con:name><con:value/></con:property><con:property><con:name>dlpnodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>dlporgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>interations</con:name><con:value>3</con:value></con:property><con:property><con:name>streamhandle_2</con:name><con:value>13370</con:value></con:property><con:property><con:name>streamhandle_3</con:name><con:value>13372</con:value></con:property><con:property><con:name>streamhandle_1</con:name><con:value>13364</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>errorRespType</con:name><con:value>CID_NOT_GRANTED</con:value></con:property><con:property><con:name>coorcsnodeuserid</con:name><con:value>10060007</con:value></con:property><con:property><con:name>streamdeletenodeaccount</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>llpcsnodeaccountid</con:name><con:value>9109115</con:value></con:property><con:property><con:name>coorcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>llpaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>orgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>dlpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value>912</con:value></con:property><con:property><con:name>portOrg1Full1_nodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>portalnodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>portOrg1Basic1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>streamcreateassert</con:name><con:value>zVdJk6LKFt77Kwx6WVEFaFEOUXojGURUVBCcdgzJoAhKgqC//iZY2lpdPb33Fm9hSJ48w3emzJPv/+S7oHqEMfKjsEPQLxRRhaEV2X7odghd6z03iX+6lXdk7IJaGyAE4wRzViW+Q0SxSz/TFPVGvRJVCaEUSiFKjDDpEDWKpp6p5nOtrtH1Nt1oM8wLQ7fWRHV+NVUrTGHjIWqXyjtEGoftyEA+aofGDqJ2YrVnQB61MWfbuFomuh9YSoMx2X23UXvmu6GRpDH8UGijDuElyb5NklmWvWT1F4yVrFEURVItEvPYyHe/EdivD2FoS6ETXdacEUahbxmBfzYKizJMvMiugsCNYj/xdj9RTZM0Vah+hrn1bNGv4TeC/G6gRPeHmh5Axsh4Rp5BX5Wp0IExzhCs6qrUIb7dJ+HCocVGiJwo3qFP678zDMMjDKI9tJ/RFf8Vw59r/CIo3XdotaXQClLkH+G4yPTesCCqTmPo+PnIR7h+bFQts1zN0bVIoPU3gX8n73Fi2OQXkeF9F6LkP8nKfUYuWuZGkMKuziFOEQQntLneri8fVJ0i+6fasRkonRLCPfMF1C2hH+vP5Xirng+hUUK3/IHE1U8NwQGOylJNcxTuthNxuFL44VY3ksO8aToJZyUNmDanTtiv5dEGmDQKRZ3Zns5qa4PMzdiBFXa1GsgzxlyLRpPWUdpIJ57TmNe0MTgs9wCYi6NE19/OLbVxpJiNiKAhRiO/P1Ty9Ss1Sg8HGcKDYMlOa1xhB84WCG/iBmiCTRqHeOt2vvt070Ph1xCeSieL7yVDtXgjMW4Lrmh2BzdhAruyJPHpmePAaeaCTGKBi38bMGbd7cHb+mIro1igKD3Ac2ywEUYy2IqA1gXWk7n5XM65Mxiw7niOBbUKCNasrAoZn634uaL0hczTbHF+MsUgXZ+FsQxQKcx5sqAKc17VBFkG0YWWy7wp5ht5JmeSsuIrWAEv5PuzLbYSKOa+VZMYHM3aasak6+Uc03un0W58NDUhkDlZ5GYHcSaZdV4RBkBdLaxaL8Wy59FuH1VWOnsnNNjDDYC9jMI2wVnWtpms6bUxrxolTXukyZI4kBWUcUrplVgRssFcP3+PBcfKnL0TckED00ssLI3rjan1coCMBRPKKsh4txQeCpk9uQKRFSqrcJdYjYRMFVR93JNVKRNASeOFLEBmbeyZone06ko+0MDmPjG4Gxa9EO+H6tE6MYeKIfaAuZvTVl31LJ/xjWWUuetmxiurwTBaS1jNGCgCyyoAA6JA4RqOPwtG7JyZ7P1WzYcjpxftoBdXZDoabo/nnGr69Yk7HS8Y3tk2pqI/rRu2R0qBVdvUt0CSoD2kPcWw1RWp8qF/fpsM9SX049U5GTMK/eY3mYq6SPUlHwUNu79c6cOnfGUp2mQ60xfTc56PD5vmOUj6E7YfzwYy707GEE6R9URSRo/VmjzDrfobXE+OSkGmAlyZBUDcuK7g4wJm+5tLEfZVWcDFC2QuE7kFJ86AKD4JEssritPz6KklzlOdHsuSYAc4TKfVUg0qa47lcaYoY7Her2o9aq0Bu1SmvAo9V9GZp8ESrpVxoM0TkO3nTkjTlLhX+o6cuZZcVIAtZTMWdxFbSSWgG5P9gMqH8zeKPih2MJi1gF7PZ7VtPvHc9Wnrrrc4Kau71llpIJhrdzUm4RJbVBRNUGXQvPRbLkt6XQ2sXb43d1bOazhnpXCksYLaUyg953kwvNCQBmo5Wp2FjcwJpXwF5LKBy+JoLj20Csf+RBNSXLTpXblszBr12xorSqzyWGMHDijgc40JlxoTgHN4kpo8jZg3bo8WmcuKwkFpzEeD1p5SlqNthX3qkW7iB6+TsJlpw6cFfcoa3kZZLFoS73FPobPy6mbCUsbZUuBg2xB9dcuHb6/BSR7JCqP7ZHCiNvCQoVFlLNGhUE/OPbIVp0/sbu3vzuf6a03fTWfpUdKNIaJPnnlYtLLNtP9GkrF4Ys6N9VHpLSNrdblHPh+SN+LlGCXvD9iHE/g6Ps1ScwOt5Los7mGJr/bw5WgkPx/F6Be6pPj2s1OyttMQ7aGFYUCb6DoxtKN38l7lJ3tcFDp+IVgMkZeb99eDn7Vrm9CIYUz8QlPhdFUKVTxKRCGCWtQhED4h0tA/pBirhy9YojqOkkk4iYGTwLicUOmvJ1QVu7P3YTHG3g0CMDd2+wC+WNGONCwrSsME4Q9Uzho/BfZ57+oD5rH9ggEVsFiIgwk/T80U3aavmP4Q+1U9SG2/GClwQJLYty5IHre6H76hxIbWwTgae/rlaLyEMMUjfFy6ecV+E/lMeFBPfvbsZtE++tat7m5PCInHk08XsBwv3PQ+7n2WwANvQS6AI4wc44Y3vKZ/Jm9vBPQPfp4YpmXDHzR/6LjRH7GliRfOEtxPO5z+arn8/ZPmQRq7n8A8+YrGBRhgYfyX7xyrbRV8mDzFf1kU29+j/oWurzYfiTd/bpgSnDQzTeDPd6pF73aIjzr3baIkXA+Hu664Dz8vcAIJLiIST/ygtJz9Pob5/GcPNJpcyqOZ5cGdQdx4/d8zP/tlnizc55i/nZz2GH+On5bYeOgSXbpWf2VucXmA1P2B/CPlvwhifJ3v/yaMqtD7vwsh6PEsh+OIr6r66/8klJ+bs/sv</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB585DD2E05305991F0A0424</con:value></con:property><con:property><con:name>portalnodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_10550 - StreamCreate - FUNC - DLP - StreamRightsNotGranted - PURCHASE_PROFILE.STREAM value of  'N'</con:value></con:property><con:property><con:name>dlpOrg1Full1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Basic1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Full1_nodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>dlpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Standard1_useroid</con:name><con:value>602</con:value></con:property><con:property><con:name>portOrg1Full1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeuserid</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeuserid</con:name><con:value>1006042</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>portaluserid</con:name><con:value>600</con:value></con:property><con:property><con:name>coorcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>portalaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>portalassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreaterequestuser</con:name><con:value>100604</con:value></con:property><con:property><con:name>streamcreatrequestuser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>llpcsorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeuserid</con:name><con:value>10060210</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpcsnodeuserid</con:name><con:value>10060016</con:value></con:property><con:property><con:name>portOrg1Full1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>dlpOrg1Basic1_useroid</con:name><con:value>604</con:value></con:property><con:property><con:name>portalnodeuserid</con:name><con:value>10060010</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeuserid</con:name><con:value>1006044</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEF0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>dlpOrg1Full1_nodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>dlpcsnodeid</con:name><con:value>9116</con:value></con:property><con:property><con:name>usernodeid</con:name><con:value/></con:property><con:property><con:name>rtrnodeaccountid</con:name><con:value>910602</con:value></con:property><con:property><con:name>portOrg1Basic1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>coorcsnodeid</con:name><con:value>9107</con:value></con:property><con:property><con:name>dlpOrg1Basic1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>streamdeleterequestuser</con:name><con:value>100604</con:value></con:property><con:property><con:name>dlpOrg1Standard1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpOrg1Full1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>coorcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Basic1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>portOrg1Full1_useroid</con:name><con:value>600</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>coorcsaccountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>portOrg1Standard1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>dlpOrg1Standard1_nodeaccountid</con:name><con:value>910604</con:value></con:property><con:property><con:name>dlpOrg1Full1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>dlpOrg1Basic1_nodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>dlpOrg1Standard1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>dlpOrg1Full1_useroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Full1_assert</con:name><con:value>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</con:value></con:property><con:property><con:name>llpcsuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Basic1_useroid</con:name><con:value>604</con:value></con:property><con:property><con:name>streamcreateuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>skipRemoveStreamsFlag</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>llpcsnodeuserid</con:name><con:value>10060015</con:value></con:property><con:property><con:name>coorcsnodeaccountid</con:name><con:value>9109107</con:value></con:property><con:property><con:name>rtrnodeuserid</con:name><con:value>100602</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>llpcsnodeid</con:name><con:value>9115</con:value></con:property><con:property><con:name>dlpcsnodeaccountid</con:name><con:value>9109116</con:value></con:property><con:property><con:name>dlpOrg1Basic1_orgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpcsassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreatenodeaccount</con:name><con:value>910604</con:value></con:property><con:property><con:name>portOrg1Basic1_nodeuserid</con:name><con:value>10060410</con:value></con:property><con:property><con:name>portOrg1Standard1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>dlpOrg1Standard1_useroid</con:name><con:value>602</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>llpuseroid</con:name><con:value>600</con:value></con:property><con:property><con:name>portOrg1Full1_nodeaccountid</con:name><con:value>9109110</con:value></con:property><con:property><con:name>portOrg1Standard1_nodeid</con:name><con:value>9110</con:value></con:property><con:property><con:name>streamdeleteassert</con:name><con:value>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</con:value></con:property><con:property><con:name>portalorgid</con:name><con:value>1000</con:value></con:property><con:property><con:name>llpcsaccountid</con:name><con:value>900</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>dlpOrg1Standard1_accountoid</con:name><con:value>900</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>CID_NOT_GRANTED</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:DB4C516C4AB74213A5F85F6DCAD1C0A4</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2DF5E6D1D5D94E05307991F0A13B0</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>CID_NOT_GRANTED</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8f8d7d6d-aad5-4924-beaf-9f5e4dd80117</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44800 - StreamRenew - LLPCS - AccountNotActive - ACCOUNT.STATUS of pending_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2edfa89a-8473-4f31-9474-0dd96ca4cb2f"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6ac80470-1635-4f24-83de-c71db6e146cd"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="89e992fd-fd45-4947-bbb2-3b9db171e07f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="6e382e1a-27ce-44e1-a8d0-9ffc62fbb71a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="92937b01-ee3b-4f4f-8d93-e0d9e0f73fa5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="86bd6319-dadf-4dab-b1f9-65aa36d8571f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to pending" id="c15cae2a-a8fd-436f-8f3f-9b5d7db563b5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "pending");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="13842b07-a431-4622-9c2b-df1ac46bcf30"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="05ceb6e3-b3b2-41f5-b17e-fb33312cffac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="aaf966fa-a399-4a25-8f92-718b7f68973f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="685c409d-fc01-4fff-abc0-e14d7cb2dde8" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81579</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEF0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB585DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPY5xLm1kCnMBAIlXVo4wOntZcc4Btwmdho7XPrr1w4lBXo57J6njBVZ+iR9lnTBYRJbns85zgRhtLJOYsq9QtrQ8ox6DHLCPQoTzD2BvLF/3fesKvDg7opWCYOG9gs4junUoKNHkXmuOzaw9Wm9HukWdBw8RbaDAJCqnOc4pFxAKhqaBUxXB45unk3AuQdqHnCrZ1b9Uavc4oxL21KlKm9tQa15Q1sIkXqGsVqtqiu7yrK5YQFgGvfX/TFa4ARqzYttRIWjrPmmj6oRRjiOURWxxLgwDnQuIu6NyZxCkWf4zVf0lS9ggLohdSJO5j+08i6OQjpjxbENKaMEwZi8QpWfaywWLKr48ZxlRCySL4MwgTKs4zXSkenQH5pxCO1EQwcIMw51voDmm60RnuEMU4Qr/47ChvbjtKoVVycZpHzGsoQfHv8MD6ZLHLMURzrfhfUG7XSDn2SqeYGRF1IU55ws8Y0iawoR5m/VxOh0U5Vhhmdk3SdcEnTNFTpjH97RcZuNgMwxF39ToL3ibI3cwjjHzZuaf91+CdliSe6RPRvUnw2j01t0Lt3rRgFgX7kQlKXdHo9IWZJoe0P8DGp5L2p32eSyt9o8uRvLHj22/ZuXpEvuskc76A57Y2Bm5sC9dPNwPQLO4mozgQ+R/TC6GrK7JO+MzNnAr6fP4Q2Zp4v7f6Z9+7511XdmrJ30XwavWU9YZz5uDer+tBa6I59dgk7083Vd6966Ftkk/WST9oLMCPhV0ho6r083YIN7+Sq4Fe2Hq7uz+7w3nDfKcPbwH8p2b36cT58wErujokEYVLqySlB838yUhET6rFD1UtV8uMBUaE11S/UOL5ftjkSerOH2bNqBDc5Np9Vyz90gsDrAtYFbr5td4APHcnZNZoviCGKb0RlRvlTL3dLme4Ao8TimEc70Jctlp+PaNxYDKGAlpCP5CBjleMJkez5L19biufbqYghMEb2adi2K2XT9pFVumBjQQebPBM4OerIJDnryCCOSEqwat+I1l8TmQubiBS5zEZvVJaxSnMvWnqku61lOzTU4SdIYK6RGwqI8xtV0kRaZMfj2a+kQ8UI66kyK1/ZlXMf/dimQOhFRClzF0sKyjPjDcDn33F0gHwI++3QI7cz7eUTUw5L5FBlBWySHv95povhRciTo++PhDnSp+wd3f7XHv8y/NND/vwZkPT7eNL7JiXFcjtJRtCR7bnebg5xBsms1d2R6gWb1pZovl3nBH8exjUyaN1QhDWAZY4xy2Vc3E/aMqVFaMU4aYiXwI+el/BBiLhZ0LKDAieR7pTiesLWMMVdbSygf6vrUlejApUydwGvxmawdy41LIf52KUMeUnpSPJSfFcui94p9YmvPj4xTLi2C0Lk6qQG2+YIXiEmzRLZelu0b/8zAZ84PhWWSSyxCEmqaC/z1n4rqqQ0NIsRyKsJAKwT7fb7AKTYp9t6VPpgpRkm5W5L/Xi51UlAAYbmRclLYVyuCp54Ane/NijenR+PCancDq9bqdECn2y3Gxfl2XHQs852fB+iaH8QfJXt5OuZ48zc=</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">B73CC04AD81840FA90B6CB3420A5B555</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BD305DD2E05305991F0A0424</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D30714BD305DD2E05305991F0A0424</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:B73CC04AD81840FA90B6CB3420A5B555</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>13842b07-a431-4622-9c2b-df1ac46bcf30</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44840 - StreamRenew - LLPCS - ACCOUNT_USER.STATUS of pending" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="765991e0-b552-4461-b8b1-22d246354f42" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5937e1c6-9970-48ad-84a8-67f48bb51a29"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="37ddd8c4-ee43-41cc-8643-41b6918286f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="394786c5-303e-4eef-98fa-1ff75c4c478b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="bb31b444-872f-403a-a221-150fb8e9e321"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="618a29c0-f5d8-47f8-8959-fb4c65e52c43"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to pending" id="ec651fd1-a8c2-4c77-ba90-32d54b523a90"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "pending");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="48c28570-8397-4d79-85bc-4cc4ceb81da7"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="e3be729b-5842-495f-a1d8-b1fb43da9f7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="d2fedb82-10b3-4a51-b3a7-ba7a92a1ae7c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="1f0b6c24-ee81-407f-b930-c5d9c8255737" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6DD194BCE72B8BE0401F0A07992E2E</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6DD18FFD456A15E0401F0A07992E3C</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81587</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48c28570-8397-4d79-85bc-4cc4ceb81da7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44846 - StreamRenew - LLPCS - ACCOUNT_USER.STATUS of blocked:tou" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bd050378-b3b2-4d4f-a424-c0deec219964" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8faefd14-6c53-4a34-8297-2118b5e28e84"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="383ce160-fd57-4d51-88ba-500c2c65d4b2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="60b500ec-67fa-4403-8997-ac7f64dedbb4" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="866a6cd2-31fd-4d85-9093-1a60013573bb"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="650f0479-a3a4-4276-a865-260801271840"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="53a325ff-e5b8-4123-b930-0293dcaa16ab"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="257f7423-2963-4f50-96c4-ef1b22eace65"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to blocked:tou" id="d32d0926-ea7f-41b9-a51e-cbc1d4c374f6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "blocked:tou");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="f995ca4f-44e0-4149-af98-a374cc3f1f26"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="5205ec40-24a7-4f57-9d73-663fbf65438f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="09231447-d417-4b30-ba9d-2033cea07468"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="dcdd1146-c42d-43ac-bf01-79836e2d7366" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6DD18FFD496A15E0401F0A07992E3C</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6DD17E98F30A5FE0401F0A07992E26</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f995ca4f-44e0-4149-af98-a374cc3f1f26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44851 - StreamRenew - LLPCS - Stream_renew _by_LLPCS_Manage account consent present - 200 OK_MIGRATED" searchProperties="true" id="16e3ea05-bebb-4da7-aa1a-d499a66a482a"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="144fa17f-e852-4f1a-b2c8-6e765d742166"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="7f2b86bc-c492-453b-b672-256dca87c6bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="8dd84475-c6f6-4d5e-aa03-b87e04f2e7c3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="6507d778-99bf-4efc-838e-16725f4a9461"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="58a61fd4-e912-4650-8b30-fe167ad4991d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="c39d8969-90ed-41e3-b414-5d2ff7cc84f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="c22803ef-041d-46f9-9322-d7d288160887"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="e3982008-191e-4543-ad2c-ce32083f9a70"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="b1c28291-029a-47a6-b183-2c37d6d94fc3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="17161506-938a-4c75-a159-3d9a83391d49" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="0ce78e61-6326-47b5-aa2e-bb8e9c91853a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="c1a23e7d-580b-48a0-bbf9-651afdd03927" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="f8b8c694-dbeb-4389-81c1-c6a66e88f5eb" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>76331C1EEFF2408BB56F4EB875DBBFD8</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPY5xLm1kCnMBAIlXVo4wOntZcc4Btwmdho7XPrr1w4lBXo57J6njBVZ+iR9lnTBYRJbns85zgRhtLJOYsq9QtrQ8ox6DHLCPQoTzD2BvLF/3fesKvDg7opWCYOG9gs4junUoKNHkXmuOzaw9Wm9HukWdBw8RbaDAJCqnOc4pFxAKhqaBUxXB45unk3AuQdqHnCrZ1b9Uavc4oxL21KlKm9tQa15Q1sIkXqGsVqtqiu7yrK5YQFgGvfX/TFa4ARqzYttRIWjrPmmj6oRRjiOURWxxLgwDnQuIu6NyZxCkWf4zVf0lS9ggLohdSJO5j+08i6OQjpjxbENKaMEwZi8QpWfaywWLKr48ZxlRCySL4MwgTKs4zXSkenQH5pxCO1EQwcIMw51voDmm60RnuEMU4Qr/47ChvbjtKoVVycZpHzGsoQfHv8MD6ZLHLMURzrfhfUG7XSDn2SqeYGRF1IU55ws8Y0iawoR5m/VxOh0U5Vhhmdk3SdcEnTNFTpjH97RcZuNgMwxF39ToL3ibI3cwjjHzZuaf91+CdliSe6RPRvUnw2j01t0Lt3rRgFgX7kQlKXdHo9IWZJoe0P8DGp5L2p32eSyt9o8uRvLHj22/ZuXpEvuskc76A57Y2Bm5sC9dPNwPQLO4mozgQ+R/TC6GrK7JO+MzNnAr6fP4Q2Zp4v7f6Z9+7511XdmrJ30XwavWU9YZz5uDer+tBa6I59dgk7083Vd6966Ftkk/WST9oLMCPhV0ho6r083YIN7+Sq4Fe2Hq7uz+7w3nDfKcPbwH8p2b36cT58wErujokEYVLqySlB838yUhET6rFD1UtV8uMBUaE11S/UOL5ftjkSerOH2bNqBDc5Np9Vyz90gsDrAtYFbr5td4APHcnZNZoviCGKb0RlRvlTL3dLme4Ao8TimEc70Jctlp+PaNxYDKGAlpCP5CBjleMJkez5L19biufbqYghMEb2adi2K2XT9pFVumBjQQebPBM4OerIJDnryCCOSEqwat+I1l8TmQubiBS5zEZvVJaxSnMvWnqku61lOzTU4SdIYK6RGwqI8xtV0kRaZMfj2a+kQ8UI66kyK1/ZlXMf/dimQOhFRClzF0sKyjPjDcDn33F0gHwI++3QI7cz7eUTUw5L5FBlBWySHv95povhRciTo++PhDnSp+wd3f7XHv8y/NND/vwZkPT7eNL7JiXFcjtJRtCR7bnebg5xBsms1d2R6gWb1pZovl3nBH8exjUyaN1QhDWAZY4xy2Vc3E/aMqVFaMU4aYiXwI+el/BBiLhZ0LKDAieR7pTiesLWMMVdbSygf6vrUlejApUydwGvxmawdy41LIf52KUMeUnpSPJSfFcui94p9YmvPj4xTLi2C0Lk6qQG2+YIXiEmzRLZelu0b/8zAZ84PhWWSSyxCEmqaC/z1n4rqqQ0NIsRyKsJAKwT7fb7AKTYp9t6VPpgpRkm5W5L/Xi51UlAAYbmRclLYVyuCp54Ane/NijenR+PCancDq9bqdECn2y3Gxfl2XHQs852fB+iaH8QfJXt5OuZ48zc=</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D30714BD3C5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:76331C1EEFF2408BB56F4EB875DBBFD8</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D30714BD3C5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEF0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB585DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>daad333d-0ced-4a2f-b6b0-f66bb6e171fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58a61fd4-e912-4650-8b30-fe167ad4991d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e3982008-191e-4543-ad2c-ce32083f9a70</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44853 - StreamRenew - LLPCS - Stream_Renew_By_DLP_ManageAccountConsentPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f9049f22-b9cf-49bf-a393-c3a3a55a1d0a"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d43ddfc9-7d60-4a92-a559-c7f047162466"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="a8a9452d-fdd0-4deb-ba77-7bba163f02cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="5e18e864-1b00-4b7d-ae27-fd6731deb390" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="abc457f0-bd67-4bd6-bffd-573e255be3fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7941fa39-ef65-43f1-88cc-f50dbc00c3e0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="5ee83e99-d8f3-4f6d-b866-af4296813e65"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLP" id="a5aa8533-2109-4d2b-aac5-d77652667c51"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="c03ab711-e69f-4317-8c49-9d08c5104cd2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="ad9aec35-2208-4ce2-b91d-287b066c1fe5" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="881755d8-6fd1-4bfe-b395-96251fd7029c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="63ba9f0d-2454-49d3-bf45-313446162b36" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="962ce5c7-8350-4b9b-b781-20c76e8a3a03" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="3aa9a345-25eb-42b0-a9de-590882780ef2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="dba7ce62-1418-4203-a649-1d52fdd849bb" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:25DC52547515417EBE83DE99AC7D93B8</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD28CF80EFFE05307991F0AE210</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEF0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB585DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPY5xLm1kCnMBAIlXVo4wOntZcc4Btwmdho7XPrr1w4lBXo57J6njBVZ+iR9lnTBYRJbns85zgRhtLJOYsq9QtrQ8ox6DHLCPQoTzD2BvLF/3fesKvDg7opWCYOG9gs4junUoKNHkXmuOzaw9Wm9HukWdBw8RbaDAJCqnOc4pFxAKhqaBUxXB45unk3AuQdqHnCrZ1b9Uavc4oxL21KlKm9tQa15Q1sIkXqGsVqtqiu7yrK5YQFgGvfX/TFa4ARqzYttRIWjrPmmj6oRRjiOURWxxLgwDnQuIu6NyZxCkWf4zVf0lS9ggLohdSJO5j+08i6OQjpjxbENKaMEwZi8QpWfaywWLKr48ZxlRCySL4MwgTKs4zXSkenQH5pxCO1EQwcIMw51voDmm60RnuEMU4Qr/47ChvbjtKoVVycZpHzGsoQfHv8MD6ZLHLMURzrfhfUG7XSDn2SqeYGRF1IU55ws8Y0iawoR5m/VxOh0U5Vhhmdk3SdcEnTNFTpjH97RcZuNgMwxF39ToL3ibI3cwjjHzZuaf91+CdliSe6RPRvUnw2j01t0Lt3rRgFgX7kQlKXdHo9IWZJoe0P8DGp5L2p32eSyt9o8uRvLHj22/ZuXpEvuskc76A57Y2Bm5sC9dPNwPQLO4mozgQ+R/TC6GrK7JO+MzNnAr6fP4Q2Zp4v7f6Z9+7511XdmrJ30XwavWU9YZz5uDer+tBa6I59dgk7083Vd6966Ftkk/WST9oLMCPhV0ho6r083YIN7+Sq4Fe2Hq7uz+7w3nDfKcPbwH8p2b36cT58wErujokEYVLqySlB838yUhET6rFD1UtV8uMBUaE11S/UOL5ftjkSerOH2bNqBDc5Np9Vyz90gsDrAtYFbr5td4APHcnZNZoviCGKb0RlRvlTL3dLme4Ao8TimEc70Jctlp+PaNxYDKGAlpCP5CBjleMJkez5L19biufbqYghMEb2adi2K2XT9pFVumBjQQebPBM4OerIJDnryCCOSEqwat+I1l8TmQubiBS5zEZvVJaxSnMvWnqku61lOzTU4SdIYK6RGwqI8xtV0kRaZMfj2a+kQ8UI66kyK1/ZlXMf/dimQOhFRClzF0sKyjPjDcDn33F0gHwI++3QI7cz7eUTUw5L5FBlBWySHv95povhRciTo++PhDnSp+wd3f7XHv8y/NND/vwZkPT7eNL7JiXFcjtJRtCR7bnebg5xBsms1d2R6gWb1pZovl3nBH8exjUyaN1QhDWAZY4xy2Vc3E/aMqVFaMU4aYiXwI+el/BBiLhZ0LKDAieR7pTiesLWMMVdbSygf6vrUlejApUydwGvxmawdy41LIf52KUMeUnpSPJSfFcui94p9YmvPj4xTLi2C0Lk6qQG2+YIXiEmzRLZelu0b/8zAZ84PhWWSSyxCEmqaC/z1n4rqqQ0NIsRyKsJAKwT7fb7AKTYp9t6VPpgpRkm5W5L/Xi51UlAAYbmRclLYVyuCp54Ane/NijenR+PCancDq9bqdECn2y3Gxfl2XHQs852fB+iaH8QfJXt5OuZ48zc=</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2CFD28CF80EFFE05307991F0AE210</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>25DC52547515417EBE83DE99AC7D93B8</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a9dfb74b-ba76-47cb-9841-c8aad635d15c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4e1ddd55-6d5c-4e64-82ea-9b4627d19389</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5ee83e99-d8f3-4f6d-b866-af4296813e65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44852 - StreamRenew - LLPCS - Stream_Renew_By_LLPCS_ManageAccountConsentPresent_diffOrg - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d5dbeb87-d8a5-4216-8a0d-70fbba787815" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="74136112-8df5-4755-8a70-392d77b70a09"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="72703f3f-c203-4c92-b34a-1f26a801cfbb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d7de5052-cf69-4a4b-917d-3160e366c8ac" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4a7f2f70-8005-43ef-be3d-1e35fb617ba2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4eb07d97-c059-41c1-9614-8abd5db151cf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="5196b68d-4085-4200-88ad-b8aa34c66fd2"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to LLPCS" id="c5139fdd-513e-4629-962b-d256d9564c37"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="a930c509-94cd-490c-bfe7-81331af5f98b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="4e1ddd55-6d5c-4e64-82ea-9b4627d19389" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="687e8047-485d-4019-b0ed-d4624796f989"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="93d94cff-44a9-42da-b759-f630d56c0c3f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="cb6239fb-cf2b-49d9-9b48-319d44ee96d6" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="6ab856e9-7bc7-4215-bb06-622333a53198" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="43cfc51a-63c5-4805-83a6-b32dd7153056" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6DD1958230E828E0401F0A07992E40</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6DD1952A084439E0401F0A07992E38</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4e1ddd55-6d5c-4e64-82ea-9b4627d19389</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5196b68d-4085-4200-88ad-b8aa34c66fd2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44854 - StreamRenew - LLPCS - Stream_Renew_By_DLPCS_ManageAccountConsentPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8b1bf0eb-cd46-4600-b9de-4dd482a04dd9"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1e01284f-9bd5-4116-a041-f34bd584ba89"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="af3536ee-77e0-4f28-bd21-6402963b5a40"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="a9c9954d-c0c0-409c-baf2-13e878b1c97a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d939b427-64cf-48e6-94bc-1af59ae220c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="88cd5e84-979c-439e-b327-fe7c4ea0c02f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="73a3ad66-abb0-4188-855c-74d11bbccb04"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="deda127d-b423-4c7a-9140-3eea27c9a13f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="5a9a6ed9-9791-468f-a4d4-a37e12e4e9d5" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="85239de2-f74a-4d5b-bf5e-56f516b123ec" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="50f604c0-e043-4554-9b30-58d41f9da43b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="b134164b-6577-4eac-bdcd-09356b7b612f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="426df5ba-7a5a-478e-8446-508226e043d3" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="bd8983fe-1337-462c-8a60-e843e086c95a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="31e71362-fb47-48d0-a495-e3a572740b21" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:26BF52B4ABD74F31B9CE7754A249C47F</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D30714BD495DD2E05305991F0A0424</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEF0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB585DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPY5xLm1kCnMBAIlXVo4wOntZcc4Btwmdho7XPrr1w4lBXo57J6njBVZ+iR9lnTBYRJbns85zgRhtLJOYsq9QtrQ8ox6DHLCPQoTzD2BvLF/3fesKvDg7opWCYOG9gs4junUoKNHkXmuOzaw9Wm9HukWdBw8RbaDAJCqnOc4pFxAKhqaBUxXB45unk3AuQdqHnCrZ1b9Uavc4oxL21KlKm9tQa15Q1sIkXqGsVqtqiu7yrK5YQFgGvfX/TFa4ARqzYttRIWjrPmmj6oRRjiOURWxxLgwDnQuIu6NyZxCkWf4zVf0lS9ggLohdSJO5j+08i6OQjpjxbENKaMEwZi8QpWfaywWLKr48ZxlRCySL4MwgTKs4zXSkenQH5pxCO1EQwcIMw51voDmm60RnuEMU4Qr/47ChvbjtKoVVycZpHzGsoQfHv8MD6ZLHLMURzrfhfUG7XSDn2SqeYGRF1IU55ws8Y0iawoR5m/VxOh0U5Vhhmdk3SdcEnTNFTpjH97RcZuNgMwxF39ToL3ibI3cwjjHzZuaf91+CdliSe6RPRvUnw2j01t0Lt3rRgFgX7kQlKXdHo9IWZJoe0P8DGp5L2p32eSyt9o8uRvLHj22/ZuXpEvuskc76A57Y2Bm5sC9dPNwPQLO4mozgQ+R/TC6GrK7JO+MzNnAr6fP4Q2Zp4v7f6Z9+7511XdmrJ30XwavWU9YZz5uDer+tBa6I59dgk7083Vd6966Ftkk/WST9oLMCPhV0ho6r083YIN7+Sq4Fe2Hq7uz+7w3nDfKcPbwH8p2b36cT58wErujokEYVLqySlB838yUhET6rFD1UtV8uMBUaE11S/UOL5ftjkSerOH2bNqBDc5Np9Vyz90gsDrAtYFbr5td4APHcnZNZoviCGKb0RlRvlTL3dLme4Ao8TimEc70Jctlp+PaNxYDKGAlpCP5CBjleMJkez5L19biufbqYghMEb2adi2K2XT9pFVumBjQQebPBM4OerIJDnryCCOSEqwat+I1l8TmQubiBS5zEZvVJaxSnMvWnqku61lOzTU4SdIYK6RGwqI8xtV0kRaZMfj2a+kQ8UI66kyK1/ZlXMf/dimQOhFRClzF0sKyjPjDcDn33F0gHwI++3QI7cz7eUTUw5L5FBlBWySHv95povhRciTo++PhDnSp+wd3f7XHv8y/NND/vwZkPT7eNL7JiXFcjtJRtCR7bnebg5xBsms1d2R6gWb1pZovl3nBH8exjUyaN1QhDWAZY4xy2Vc3E/aMqVFaMU4aYiXwI+el/BBiLhZ0LKDAieR7pTiesLWMMVdbSygf6vrUlejApUydwGvxmawdy41LIf52KUMeUnpSPJSfFcui94p9YmvPj4xTLi2C0Lk6qQG2+YIXiEmzRLZelu0b/8zAZ84PhWWSSyxCEmqaC/z1n4rqqQ0NIsRyKsJAKwT7fb7AKTYp9t6VPpgpRkm5W5L/Xi51UlAAYbmRclLYVyuCp54Ane/NijenR+PCancDq9bqdECn2y3Gxfl2XHQs852fB+iaH8QfJXt5OuZ48zc=</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D30714BD495DD2E05305991F0A0424</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>26BF52B4ABD74F31B9CE7754A249C47F</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a9dfb74b-ba76-47cb-9841-c8aad635d15c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4e1ddd55-6d5c-4e64-82ea-9b4627d19389</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>73a3ad66-abb0-4188-855c-74d11bbccb04</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_20041 - StreamRenew - LLPCS - AccountIdUnmatched - Full user can renew full-user created stream - 403 Forbidden_MIGRATED" searchProperties="true" id="c6345837-be35-48dc-ae5a-c780ad6b482b"><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a110e927-9a3d-405f-9b17-ce575543eda5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_ACCOUNTID_MISMATCH");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamView","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="4024dd9a-cda5-47b6-bd9c-abff08c93bc9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="48ebf8b2-d023-4c87-a7d3-d1575001d2ca" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="3b2d51a9-a10a-45b6-9b36-ae661f6a92aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="189651db-8b5d-4614-ba37-1e3c2c336b64"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamView" id="cd0d2d90-40a5-43a1-99f0-8c8affd0352c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamView")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="de218eb1-de76-4ec6-89f6-933c914cd784"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Change the assertionAccountIdFULL value" id="5c31be77-b29e-4137-a2e5-1fef9e963384"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String a = tP.getPropertyValue("urnaccount");

tC.setPropertyValue("assertionAccountIdFULL","${a}100100");</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="9a770d56-e35d-45ad-9e06-7cbe5e00b7f1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="abf44a0a-4dec-4390-bf67-6b3f7aa9d9a4" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="1fc7b0d4-a20d-40ec-94eb-a2245a79ba11" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>3660D2D00B2B446DB7EF0B6F41C0F2E1</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPY5xLm1kCnMBAIlXVo4wOntZcc4Btwmdho7XPrr1w4lBXo57J6njBVZ+iR9lnTBYRJbns85zgRhtLJOYsq9QtrQ8ox6DHLCPQoTzD2BvLF/3fesKvDg7opWCYOG9gs4junUoKNHkXmuOzaw9Wm9HukWdBw8RbaDAJCqnOc4pFxAKhqaBUxXB45unk3AuQdqHnCrZ1b9Uavc4oxL21KlKm9tQa15Q1sIkXqGsVqtqiu7yrK5YQFgGvfX/TFa4ARqzYttRIWjrPmmj6oRRjiOURWxxLgwDnQuIu6NyZxCkWf4zVf0lS9ggLohdSJO5j+08i6OQjpjxbENKaMEwZi8QpWfaywWLKr48ZxlRCySL4MwgTKs4zXSkenQH5pxCO1EQwcIMw51voDmm60RnuEMU4Qr/47ChvbjtKoVVycZpHzGsoQfHv8MD6ZLHLMURzrfhfUG7XSDn2SqeYGRF1IU55ws8Y0iawoR5m/VxOh0U5Vhhmdk3SdcEnTNFTpjH97RcZuNgMwxF39ToL3ibI3cwjjHzZuaf91+CdliSe6RPRvUnw2j01t0Lt3rRgFgX7kQlKXdHo9IWZJoe0P8DGp5L2p32eSyt9o8uRvLHj22/ZuXpEvuskc76A57Y2Bm5sC9dPNwPQLO4mozgQ+R/TC6GrK7JO+MzNnAr6fP4Q2Zp4v7f6Z9+7511XdmrJ30XwavWU9YZz5uDer+tBa6I59dgk7083Vd6966Ftkk/WST9oLMCPhV0ho6r083YIN7+Sq4Fe2Hq7uz+7w3nDfKcPbwH8p2b36cT58wErujokEYVLqySlB838yUhET6rFD1UtV8uMBUaE11S/UOL5ftjkSerOH2bNqBDc5Np9Vyz90gsDrAtYFbr5td4APHcnZNZoviCGKb0RlRvlTL3dLme4Ao8TimEc70Jctlp+PaNxYDKGAlpCP5CBjleMJkez5L19biufbqYghMEb2adi2K2XT9pFVumBjQQebPBM4OerIJDnryCCOSEqwat+I1l8TmQubiBS5zEZvVJaxSnMvWnqku61lOzTU4SdIYK6RGwqI8xtV0kRaZMfj2a+kQ8UI66kyK1/ZlXMf/dimQOhFRClzF0sKyjPjDcDn33F0gHwI++3QI7cz7eUTUw5L5FBlBWySHv95povhRciTo++PhDnSp+wd3f7XHv8y/NND/vwZkPT7eNL7JiXFcjtJRtCR7bnebg5xBsms1d2R6gWb1pZovl3nBH8exjUyaN1QhDWAZY4xy2Vc3E/aMqVFaMU4aYiXwI+el/BBiLhZ0LKDAieR7pTiesLWMMVdbSygf6vrUlejApUydwGvxmawdy41LIf52KUMeUnpSPJSfFcui94p9YmvPj4xTLi2C0Lk6qQG2+YIXiEmzRLZelu0b/8zAZ84PhWWSSyxCEmqaC/z1n4rqqQ0NIsRyKsJAKwT7fb7AKTYp9t6VPpgpRkm5W5L/Xi51UlAAYbmRclLYVyuCp54Ane/NijenR+PCancDq9bqdECn2y3Gxfl2XHQs852fB+iaH8QfJXt5OuZ48zc=</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2CFD28D040EFFE05307991F0AE210</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030748</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:3660D2D00B2B446DB7EF0B6F41C0F2E1</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2CFD28D040EFFE05307991F0AE210</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEF0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB585DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_ACCOUNTID_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:100100</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D2CFD28BF60EFFE05307991F0AE210</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c8d9f205-8ea3-49e9-ae2b-8ffe3972bd14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>218c136d-d1b9-496a-8355-29e9f2f4ed84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="LinkedLASPCustomerServiceTestCases_P1_without_MAC" id="5fdc3879-d7a2-4704-8a3e-ff1cd30532ab"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44855 - StreamRenew - LLPCS - Stream_renew _by_LLPCS_Manage account consent not present_sameOrg - 200 OK_MIGRATED" searchProperties="true" id="10878e3d-6a93-4566-bb38-df4a89a68aa6"><con:description>This test case will verify that a full userId can invoked the StreamRenew API without Manage user consent policy.</con:description><con:settings/><con:testStep type="groovy" name="Establish data and LLP without MAC" id="495ea620-c030-4137-8a8a-d9d11bda77ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("E_2_E_without_MAC");

def runnerTS = myTS.run( null , false )

assert runnerTS.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="874113c9-80ec-4d71-8b75-8adf357d6aaa"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="6e988e89-d609-40c0-ba63-9a8dd3b7a545"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9b74c45e-f2ed-4270-84e7-6eda51e81829" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="ddae20e0-c8c4-4c5d-8407-609b600f7d7b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="dc1da96b-869a-4da5-86b8-9a0a1292993f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a45482bc-d513-4c42-aee7-bb025b89a084"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="68007950-1e8a-413e-8ed0-8ab155c63b50"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="1489a050-4351-4f7c-9ee5-839d3caa784c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="73ad4c34-1134-4619-9575-7e16f09888a3" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="35f6a6c5-753c-4b73-96b7-e616a5fdaada" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="edbc3424-dd6d-458e-b6f3-e66c23c20b6a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="70e7afe6-e29b-4382-83c1-fa1222c07d88" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>4E6E924BC21A4FCD94815882945D52C2</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc6JKEP4rFnlMIRcVlYpWsRJPPDE30cTdl9Q4NDoKAzKDmv31ZwaVVXM57u4TNU3P119fpruvGIpC03YYg5STmJY2UUiZnUtbSpZSO0aMMJuiCJjNse05d33bLOs22l9RSj23pbw2girGvmWogaVbanVi1NVmo+GrRq1an5iVoGE1J0KVsQx6lHFEeUsxdaOm6lXVsIZ63TZ1W6+Uzab5Qyk9Q8oEtlAp68qO1Ia1lBnnia1p6/W6vK6U43SqmbpuaOO7vodnECGlfbX1KDeUtnf6uOwDhjDEZRxH2pV2pHPlM9sjU4p4lsLOlv+ZLV3Tm5rQ8RmZXijFXfB7NIjzYwfRmBKMQvITyfjcAZ/FfskJp3FK+Cz61AlDl8AqbLCKjSq9ULRjamcCHTFMGVLZDBk7rAEEkALFUBoNei3l4rys5VeHKaIsiNOIHR9/jw/QFYRxAr7K9m7tqJ0P+EGk2leA7R7FYcbICu5lsSYIA9tlE/D5UKXHFAKy6RMmCnTDJDvtkN7JcRsNl0yB8T9J0EFytiDPKMyg/eB/f8oGaDS8aYxXz5FnLU02mfdvn56qrZzAoXIuKFK7PZ4UZVFE2xseAGJW4o8XxL3c4HmWpY4x33Tn950QLTvoeVnpZ6PHpyUbkyAdJ+nwZdXVv/f7nvNz0rmsVxcDvBjejvmUTC+X8Vx7aFTum7dvb1Z/xDrGYOnEqxc9mU2H4+e6e/3y9MNzmy/uoLqGy+vVzU39kTT//c6CH84/jZv0qWnpeBHdNwa9kTHjQTJyzM5iDCNMF06rcOeA/7Fs/+a9bDIHzPdHWQY9t9QVWUL862YmJcRXg1zVTmTzYRwoV9ryluwddibaHfFtkcPt2ai4Zteof6u4tU71uulc67WKXms2ja7umHXd3DeZLYsTip2YBkTaki13WzZfE8SRzYD6kKqrOBOdjilfILqIo1KPDsQjiCmDYSzaM57TdJNYU51lU2isdRQYNZjHc6V0H/MH+pA6AYf0qCUb+lFLHgAmCQHZt2VZM1HXjItQLNEq46FRXqEyhUx09lQ2WdusNmoaI1ESgiSqRbGfhVBOZkkeGI1tv6aKMMulg+th/tg+dev03z4CQscnUoFJX76ByCKczhajadf2jrxz2PpwBu3hncwn8l2JcPKU4C2T41+/qkSWR1Eibt/xHvekC93fuPva8V6NPwTo/4Xx/t8aF7l8f1P7Ip7aaSoLQ/6KHJjdLx1ifImG194X4hIZ5WU5W62yvPaq1YqWCnhNFoGmm5oHOBMt+W0YL4BqBYp21vwriJ8YL+THFDM+ox5HHCLxVkr58YyFxwMmF56eeOObc7epI5MidBw2/COZ6OmMScZf7nPYxlJPiB/FZx2n/q+MfYB1YEf4KfYdTuhUnuTse/ukLnAsYIno2nF6CP4RwEfGj4VFkAsuXBTUJOPw+Z+SbMctBWEcZ5T3XCUXHI6InCd/S8D+pfQOJp9CxVpK/n8vVUleAhjEMstIji+3C1s+ATo9GDM7oyeTpqJ/q1mNTse16m73cNJ0urV6EZQjdu134veSgzid1nj7Pw==</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D30714BFA25DD2E05305991F0A0424</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_031946</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:4E6E924BC21A4FCD94815882945D52C2</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D30714BFA25DD2E05305991F0A0424</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCE67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5D4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CD567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B568CD567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81253</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>daad333d-0ced-4a2f-b6b0-f66bb6e171fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8d3479a4-b4de-47cb-bcb1-69dee997188c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6507d778-99bf-4efc-838e-16725f4a9461</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>68007950-1e8a-413e-8ed0-8ab155c63b50</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44858 - StreamRenew - LLPCS - Stream_Renew_By_DLPCS_ManageAccountConsentnotPresent_sameOrg - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6d8635ed-89e7-4308-92b9-a8952c54cc10"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="802dd8ea-3361-4bb1-b747-791d07cb48a7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="5a8d987a-b789-47bd-985c-3df747047700"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="76f0e73d-2c8e-443f-9cb8-13204f3fce08" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="89003f0e-05f7-40b6-b3a6-9dc835e0ddf9" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="d5376120-48fd-4e1a-9edc-7c18b651aa3d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="26b64d4a-c29e-41c5-95b2-56c2e7f9435d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="7237bff1-89ca-4bac-b1e4-f86f34209974"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="a7247f54-a5cc-437b-b87c-b7713220cfbf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid13").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="5d6981ea-e002-4a17-bae9-4ba07e205deb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="e63ce26b-3574-4805-8703-5462d0d072e0" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="1ee2988b-2d3f-41e2-aa6b-550c78462692" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="d9fc0fba-cf57-4b8b-8ae7-50dc22043393" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="6d77abf9-7faa-4b40-8828-1f2ca527cf14" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_031946</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:804667AA01244128B746E98938970C4B</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D2F17B3D734E9AE05305991F0A2702</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCE67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5D4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc6JKEP4rFnlMIRcVlYpWsRJPPDE30cTdl9Q4NDoKAzKDmv31ZwaVVXM57u4TNU3P119fpruvGIpC03YYg5STmJY2UUiZnUtbSpZSO0aMMJuiCJjNse05d33bLOs22l9RSj23pbw2girGvmWogaVbanVi1NVmo+GrRq1an5iVoGE1J0KVsQx6lHFEeUsxdaOm6lXVsIZ63TZ1W6+Uzab5Qyk9Q8oEtlAp68qO1Ia1lBnnia1p6/W6vK6U43SqmbpuaOO7vodnECGlfbX1KDeUtnf6uOwDhjDEZRxH2pV2pHPlM9sjU4p4lsLOlv+ZLV3Tm5rQ8RmZXijFXfB7NIjzYwfRmBKMQvITyfjcAZ/FfskJp3FK+Cz61AlDl8AqbLCKjSq9ULRjamcCHTFMGVLZDBk7rAEEkALFUBoNei3l4rys5VeHKaIsiNOIHR9/jw/QFYRxAr7K9m7tqJ0P+EGk2leA7R7FYcbICu5lsSYIA9tlE/D5UKXHFAKy6RMmCnTDJDvtkN7JcRsNl0yB8T9J0EFytiDPKMyg/eB/f8oGaDS8aYxXz5FnLU02mfdvn56qrZzAoXIuKFK7PZ4UZVFE2xseAGJW4o8XxL3c4HmWpY4x33Tn950QLTvoeVnpZ6PHpyUbkyAdJ+nwZdXVv/f7nvNz0rmsVxcDvBjejvmUTC+X8Vx7aFTum7dvb1Z/xDrGYOnEqxc9mU2H4+e6e/3y9MNzmy/uoLqGy+vVzU39kTT//c6CH84/jZv0qWnpeBHdNwa9kTHjQTJyzM5iDCNMF06rcOeA/7Fs/+a9bDIHzPdHWQY9t9QVWUL862YmJcRXg1zVTmTzYRwoV9ryluwddibaHfFtkcPt2ai4Zteof6u4tU71uulc67WKXms2ja7umHXd3DeZLYsTip2YBkTaki13WzZfE8SRzYD6kKqrOBOdjilfILqIo1KPDsQjiCmDYSzaM57TdJNYU51lU2isdRQYNZjHc6V0H/MH+pA6AYf0qCUb+lFLHgAmCQHZt2VZM1HXjItQLNEq46FRXqEyhUx09lQ2WdusNmoaI1ESgiSqRbGfhVBOZkkeGI1tv6aKMMulg+th/tg+dev03z4CQscnUoFJX76ByCKczhajadf2jrxz2PpwBu3hncwn8l2JcPKU4C2T41+/qkSWR1Eibt/xHvekC93fuPva8V6NPwTo/4Xx/t8aF7l8f1P7Ip7aaSoLQ/6KHJjdLx1ifImG194X4hIZ5WU5W62yvPaq1YqWCnhNFoGmm5oHOBMt+W0YL4BqBYp21vwriJ8YL+THFDM+ox5HHCLxVkr58YyFxwMmF56eeOObc7epI5MidBw2/COZ6OmMScZf7nPYxlJPiB/FZx2n/q+MfYB1YEf4KfYdTuhUnuTse/ukLnAsYIno2nF6CP4RwEfGj4VFkAsuXBTUJOPw+Z+SbMctBWEcZ5T3XCUXHI6InCd/S8D+pfQOJp9CxVpK/n8vVUleAhjEMstIji+3C1s+ATo9GDM7oyeTpqJ/q1mNTse16m73cNJ0urV6EZQjdu134veSgzid1nj7Pw==</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D2F17B3D734E9AE05305991F0A2702</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>804667AA01244128B746E98938970C4B</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B568CD567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CD567DFE05305991F0ACF57</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>bc8d8670-a420-46f9-af0e-7335976768fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a9a6ed9-9791-468f-a4d4-a37e12e4e9d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7237bff1-89ca-4bac-b1e4-f86f34209974</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44857 - StreamRenew - LLPCS - Stream_Renew_By_DLPCS_ManageAccountConsentnotPresent_diffOrg - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b4ac58c3-3af8-45cf-9a54-87933a095235" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f0456754-d0fe-4daf-bb8b-b5cfc3ea9c4b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="3b9b65d2-7ce3-4fad-9274-49c744b783d7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="55c2f925-2e8c-407a-bda0-d0160f3cb4a6" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="1f0ba3e8-1712-4750-88d4-dd6e82d99347"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="c98efcec-e1a0-4d6d-9e85-38380d26febf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4bff68ba-57be-47a5-a6d7-d64b0a637581"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="3612a7e8-6585-482a-bdbf-32340d9c34da"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to DLPCS" id="4bf9e574-aa1a-4dc0-a13e-3ffa62a40124"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid30").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="f33253f5-9320-44c3-b4f6-787c8d3e881e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="9379bef1-43fa-4c84-9113-76fff4660870" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="3bcb6878-52a8-4100-977e-d7a5b1874adc" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="e04d0c20-1032-429d-88ad-47d169995ca0" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="49391e07-b4ca-42a0-9c39-b100b18a33aa" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6DD17E99070A5FE0401F0A07992E26</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6DD18FFD666A15E0401F0A07992E3C</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>bc8d8670-a420-46f9-af0e-7335976768fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a930c509-94cd-490c-bfe7-81331af5f98b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3612a7e8-6585-482a-bdbf-32340d9c34da</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44856 - StreamRenew - LLPCS - Stream_Renew_By_LLPCS_ManageAccountConsentnotPresent_diffOrg - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2b19026c-3702-4a12-a72b-265c511ed0bd" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1832a840-66fa-4e47-893b-b4a1372cab08"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f8b740c0-7383-4380-bbe9-6c35dfa56876"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="1afd1004-3f23-4560-b160-fe73a221a397" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Manage Account Consent" id="fdd1fb7f-dbcd-4661-aa6f-c8c2e13f3f4f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="bd9c5b85-543b-45a1-ab45-07768403e56d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="a26f5414-952a-47d3-916c-11f86b9739f8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="be17790d-f0e5-4b85-8da3-c03d76527af1"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to LLPCS" id="c19f5d30-5ccb-4cb2-95c2-07c462f28088"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Manage Account Consent" id="4b99a866-a67c-4489-9035-0027517ad6ee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Manage account consent policy")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="d56686a0-b8d7-48d2-a73c-f3196ede3dec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="c49aa80f-b3de-4e58-9a40-6330aeea658c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="628941b5-dae4-4c2b-957d-8659f8ba9700" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="d483aefb-37fd-45ab-847e-6b475ef6b83f" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="1c91b734-6c56-46ec-bb18-d44234d72421" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6DD194BCF82B8BE0401F0A07992E2E</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6DD18FFD566A15E0401F0A07992E3C</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81279</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>bc8d8670-a420-46f9-af0e-7335976768fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c03ab711-e69f-4317-8c49-9d08c5104cd2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>be17790d-f0e5-4b85-8da3-c03d76527af1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4b99a866-a67c-4489-9035-0027517ad6ee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>495ea620-c030-4137-8a8a-d9d11bda77ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="LinkedLASPCustomerServiceTestCases_P2" id="83898b9e-6d46-45a8-a4dc-f553bc86336e"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Documents and Settings\ashwin.tikle\Desktop\Reports\Reports R3_E\LP1_R3\Stream Renew</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00000 - StreamRenew - LLPCS - StreamHandleInvalid - Test Suite Staging" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d7d24bc8-46ee-4497-a25a-3918cec9efb3"><con:description> This test case will verify the proper response from the Application Tier layer with malformed stream handle values. </con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="090ff395-3110-491a-9c23-4dfe07728125"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL","urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_NOT_FOUND");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="0ecedc2a-0280-4334-9434-b1f7a3a6cb9e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update MD_BASIC_RATING_SET.IS_ADULT to 'N'" id="398a62db-d0b9-4ff6-adb3-d14afcfb9515"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String cid = tP.getPropertyValue("cid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.sqlSetIsAdult(cid,"N") == 1;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="4519f5c3-5d7c-4ab7-bfbd-7b77bed3084c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken ASSET_MAP_LP.STATUS to 'active'" id="ee0ddc27-7eff-476b-b737-3c144930ab32"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetAssetMapStatusActive(cid, alid,) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Remove all Parental Control Policies" id="62c4b610-9270-4dcb-996c-f1546e3472f4" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="7cddeeea-b6b4-4f16-a559-fc65f814c00d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_031946</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:973A15CDA87B7C93E0401F0A059969A1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCE67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5D4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc6JKEP4rFnlMIRcVlYpWsRJPPDE30cTdl9Q4NDoKAzKDmv31ZwaVVXM57u4TNU3P119fpruvGIpC03YYg5STmJY2UUiZnUtbSpZSO0aMMJuiCJjNse05d33bLOs22l9RSj23pbw2girGvmWogaVbanVi1NVmo+GrRq1an5iVoGE1J0KVsQx6lHFEeUsxdaOm6lXVsIZ63TZ1W6+Uzab5Qyk9Q8oEtlAp68qO1Ia1lBnnia1p6/W6vK6U43SqmbpuaOO7vodnECGlfbX1KDeUtnf6uOwDhjDEZRxH2pV2pHPlM9sjU4p4lsLOlv+ZLV3Tm5rQ8RmZXijFXfB7NIjzYwfRmBKMQvITyfjcAZ/FfskJp3FK+Cz61AlDl8AqbLCKjSq9ULRjamcCHTFMGVLZDBk7rAEEkALFUBoNei3l4rys5VeHKaIsiNOIHR9/jw/QFYRxAr7K9m7tqJ0P+EGk2leA7R7FYcbICu5lsSYIA9tlE/D5UKXHFAKy6RMmCnTDJDvtkN7JcRsNl0yB8T9J0EFytiDPKMyg/eB/f8oGaDS8aYxXz5FnLU02mfdvn56qrZzAoXIuKFK7PZ4UZVFE2xseAGJW4o8XxL3c4HmWpY4x33Tn950QLTvoeVnpZ6PHpyUbkyAdJ+nwZdXVv/f7nvNz0rmsVxcDvBjejvmUTC+X8Vx7aFTum7dvb1Z/xDrGYOnEqxc9mU2H4+e6e/3y9MNzmy/uoLqGy+vVzU39kTT//c6CH84/jZv0qWnpeBHdNwa9kTHjQTJyzM5iDCNMF06rcOeA/7Fs/+a9bDIHzPdHWQY9t9QVWUL862YmJcRXg1zVTmTzYRwoV9ryluwddibaHfFtkcPt2ai4Zteof6u4tU71uulc67WKXms2ja7umHXd3DeZLYsTip2YBkTaki13WzZfE8SRzYD6kKqrOBOdjilfILqIo1KPDsQjiCmDYSzaM57TdJNYU51lU2isdRQYNZjHc6V0H/MH+pA6AYf0qCUb+lFLHgAmCQHZt2VZM1HXjItQLNEq46FRXqEyhUx09lQ2WdusNmoaI1ESgiSqRbGfhVBOZkkeGI1tv6aKMMulg+th/tg+dev03z4CQscnUoFJX76ByCKczhajadf2jrxz2PpwBu3hncwn8l2JcPKU4C2T41+/qkSWR1Eibt/xHvekC93fuPva8V6NPwTo/4Xx/t8aF7l8f1P7Ip7aaSoLQ/6KHJjdLx1ifImG194X4hIZ5WU5W62yvPaq1YqWCnhNFoGmm5oHOBMt+W0YL4BqBYp21vwriJ8YL+THFDM+ox5HHCLxVkr58YyFxwMmF56eeOObc7epI5MidBw2/COZ6OmMScZf7nPYxlJPiB/FZx2n/q+MfYB1YEf4KfYdTuhUnuTse/ukLnAsYIno2nF6CP4RwEfGj4VFkAsuXBTUJOPw+Z+SbMctBWEcZ5T3XCUXHI6InCd/S8D+pfQOJp9CxVpK/n8vVUleAhjEMstIji+3C1s+ATo9GDM7oyeTpqJ/q1mNTse16m73cNJ0urV6EZQjdu134veSgzid1nj7Pw==</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_NOT_FOUND</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CD567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B568CD567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81502</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_41009 - StreamRenew - LLPCS - StreamOwnerMismatch - Stream handle same account/user CREATED_BY different LASP_MIGRATED" searchProperties="true" id="fe59e0c6-58a2-4b14-b2d8-963872f6a21d"><con:description> This test case will verify the proper response from the Application Tier layer when the API is invoked with a stream handle owned by the same account but a different LASP</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="97105834-007f-43f0-9975-3b9687cf181d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","STREAM_OWNER_MISMATCH");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="f00405ba-a613-4408-9f0d-4727ee753dec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="82fa7486-97ff-4187-bbac-61ffef4b7878" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="10dbdc88-17cb-45ab-bd38-c7d2711a6ba1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7ea13223-36f4-4fd1-a825-e1287610e118"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="93cfa7c2-262e-4f2f-aed1-ccaef06b9092"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment to LLPCS" id="9b8f6c2b-e660-4590-a463-95242206375b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="380fa081-dc7f-461a-8a23-a9777ad3f1ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="fb24acdc-b3e2-4838-8182-4f62c82435d0" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>411154E0ED7A4A4FB13019F0384DFDCC</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc6JKEP4rFnlMIRcVlYpWsRJPPDE30cTdl9Q4NDoKAzKDmv31ZwaVVXM57u4TNU3P119fpruvGIpC03YYg5STmJY2UUiZnUtbSpZSO0aMMJuiCJjNse05d33bLOs22l9RSj23pbw2girGvmWogaVbanVi1NVmo+GrRq1an5iVoGE1J0KVsQx6lHFEeUsxdaOm6lXVsIZ63TZ1W6+Uzab5Qyk9Q8oEtlAp68qO1Ia1lBnnia1p6/W6vK6U43SqmbpuaOO7vodnECGlfbX1KDeUtnf6uOwDhjDEZRxH2pV2pHPlM9sjU4p4lsLOlv+ZLV3Tm5rQ8RmZXijFXfB7NIjzYwfRmBKMQvITyfjcAZ/FfskJp3FK+Cz61AlDl8AqbLCKjSq9ULRjamcCHTFMGVLZDBk7rAEEkALFUBoNei3l4rys5VeHKaIsiNOIHR9/jw/QFYRxAr7K9m7tqJ0P+EGk2leA7R7FYcbICu5lsSYIA9tlE/D5UKXHFAKy6RMmCnTDJDvtkN7JcRsNl0yB8T9J0EFytiDPKMyg/eB/f8oGaDS8aYxXz5FnLU02mfdvn56qrZzAoXIuKFK7PZ4UZVFE2xseAGJW4o8XxL3c4HmWpY4x33Tn950QLTvoeVnpZ6PHpyUbkyAdJ+nwZdXVv/f7nvNz0rmsVxcDvBjejvmUTC+X8Vx7aFTum7dvb1Z/xDrGYOnEqxc9mU2H4+e6e/3y9MNzmy/uoLqGy+vVzU39kTT//c6CH84/jZv0qWnpeBHdNwa9kTHjQTJyzM5iDCNMF06rcOeA/7Fs/+a9bDIHzPdHWQY9t9QVWUL862YmJcRXg1zVTmTzYRwoV9ryluwddibaHfFtkcPt2ai4Zteof6u4tU71uulc67WKXms2ja7umHXd3DeZLYsTip2YBkTaki13WzZfE8SRzYD6kKqrOBOdjilfILqIo1KPDsQjiCmDYSzaM57TdJNYU51lU2isdRQYNZjHc6V0H/MH+pA6AYf0qCUb+lFLHgAmCQHZt2VZM1HXjItQLNEq46FRXqEyhUx09lQ2WdusNmoaI1ESgiSqRbGfhVBOZkkeGI1tv6aKMMulg+th/tg+dev03z4CQscnUoFJX76ByCKczhajadf2jrxz2PpwBu3hncwn8l2JcPKU4C2T41+/qkSWR1Eibt/xHvekC93fuPva8V6NPwTo/4Xx/t8aF7l8f1P7Ip7aaSoLQ/6KHJjdLx1ifImG194X4hIZ5WU5W62yvPaq1YqWCnhNFoGmm5oHOBMt+W0YL4BqBYp21vwriJ8YL+THFDM+ox5HHCLxVkr58YyFxwMmF56eeOObc7epI5MidBw2/COZ6OmMScZf7nPYxlJPiB/FZx2n/q+MfYB1YEf4KfYdTuhUnuTse/ukLnAsYIno2nF6CP4RwEfGj4VFkAsuXBTUJOPw+Z+SbMctBWEcZ5T3XCUXHI6InCd/S8D+pfQOJp9CxVpK/n8vVUleAhjEMstIji+3C1s+ATo9GDM7oyeTpqJ/q1mNTse16m73cNJ0urV6EZQjdu134veSgzid1nj7Pw==</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D34AAE636D2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)}</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>righstokenid</con:name><con:value>141711</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-02 19:54:37.356</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-03 19:54:37.356</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-03 19:54:37.356</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-02 19:54:37.356</con:value></con:property><con:property><con:name>bstreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>bstreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>astreamhistcnt</con:name><con:value>0</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_031946</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:411154E0ED7A4A4FB13019F0384DFDCC</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCE67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5D4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>STREAM_OWNER_MISMATCH</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D34AAE636D2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2011/03/13 12:53:29</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CD567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B568CD567DFE05305991F0ACF57</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>93cfa7c2-262e-4f2f-aed1-ccaef06b9092</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_42050 - StreamRenew - LLPCS - Stream renewal allowed for 'full' userId_MIGRATED" searchProperties="true" id="8afff4a1-a006-4047-8a08-92f9ec4442f8" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This test case will verify that a full userId can invoked the StreamRenew API.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="841e37ba-ed49-4a8c-a999-8b1f4a43d617"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="82450c1f-f693-43fb-b0f9-c26defe19f8f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="953136cb-425a-45e3-8c76-888804eaf262" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="fc325597-4c42-4801-9269-5bb753965821"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="54da189e-83cb-44b3-84cf-c95da2328461"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="95468fb6-7b76-4753-b1bf-969ff637ad8c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="249f9f88-1fdb-433f-bc1b-71517daaf0f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="67451d30-9c4a-40ff-ab04-61a2668c04ea" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="c0bf23f1-9307-4333-9375-3dd7a5f32859" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="1bc92cd8-502e-4ac0-ac1e-dea58fd7543d" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="428ea71e-89bf-40c1-a4e9-bf269d2e5876" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>streamhandle</con:name><con:value>5248A52FF29340F79EB95A9F6C4B3FDC</con:value></con:property><con:property><con:name>userid</con:name><con:value>4</con:value></con:property><con:property><con:name>accountid</con:name><con:value>4</con:value></con:property><con:property><con:name>uuid</con:name><con:value>${#Project#assertDLPuuid}</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc6JKEP4rFnlMIRcVlYpWsRJPPDE30cTdl9Q4NDoKAzKDmv31ZwaVVXM57u4TNU3P119fpruvGIpC03YYg5STmJY2UUiZnUtbSpZSO0aMMJuiCJjNse05d33bLOs22l9RSj23pbw2girGvmWogaVbanVi1NVmo+GrRq1an5iVoGE1J0KVsQx6lHFEeUsxdaOm6lXVsIZ63TZ1W6+Uzab5Qyk9Q8oEtlAp68qO1Ia1lBnnia1p6/W6vK6U43SqmbpuaOO7vodnECGlfbX1KDeUtnf6uOwDhjDEZRxH2pV2pHPlM9sjU4p4lsLOlv+ZLV3Tm5rQ8RmZXijFXfB7NIjzYwfRmBKMQvITyfjcAZ/FfskJp3FK+Cz61AlDl8AqbLCKjSq9ULRjamcCHTFMGVLZDBk7rAEEkALFUBoNei3l4rys5VeHKaIsiNOIHR9/jw/QFYRxAr7K9m7tqJ0P+EGk2leA7R7FYcbICu5lsSYIA9tlE/D5UKXHFAKy6RMmCnTDJDvtkN7JcRsNl0yB8T9J0EFytiDPKMyg/eB/f8oGaDS8aYxXz5FnLU02mfdvn56qrZzAoXIuKFK7PZ4UZVFE2xseAGJW4o8XxL3c4HmWpY4x33Tn950QLTvoeVnpZ6PHpyUbkyAdJ+nwZdXVv/f7nvNz0rmsVxcDvBjejvmUTC+X8Vx7aFTum7dvb1Z/xDrGYOnEqxc9mU2H4+e6e/3y9MNzmy/uoLqGy+vVzU39kTT//c6CH84/jZv0qWnpeBHdNwa9kTHjQTJyzM5iDCNMF06rcOeA/7Fs/+a9bDIHzPdHWQY9t9QVWUL862YmJcRXg1zVTmTzYRwoV9ryluwddibaHfFtkcPt2ai4Zteof6u4tU71uulc67WKXms2ja7umHXd3DeZLYsTip2YBkTaki13WzZfE8SRzYD6kKqrOBOdjilfILqIo1KPDsQjiCmDYSzaM57TdJNYU51lU2isdRQYNZjHc6V0H/MH+pA6AYf0qCUb+lFLHgAmCQHZt2VZM1HXjItQLNEq46FRXqEyhUx09lQ2WdusNmoaI1ESgiSqRbGfhVBOZkkeGI1tv6aKMMulg+th/tg+dev03z4CQscnUoFJX76ByCKczhajadf2jrxz2PpwBu3hncwn8l2JcPKU4C2T41+/qkSWR1Eibt/xHvekC93fuPva8V6NPwTo/4Xx/t8aF7l8f1P7Ip7aaSoLQ/6KHJjdLx1ifImG194X4hIZ5WU5W62yvPaq1YqWCnhNFoGmm5oHOBMt+W0YL4BqBYp21vwriJ8YL+THFDM+ox5HHCLxVkr58YyFxwMmF56eeOObc7epI5MidBw2/COZ6OmMScZf7nPYxlJPiB/FZx2n/q+MfYB1YEf4KfYdTuhUnuTse/ukLnAsYIno2nF6CP4RwEfGj4VFkAsuXBTUJOPw+Z+SbMctBWEcZ5T3XCUXHI6InCd/S8D+pfQOJp9CxVpK/n8vVUleAhjEMstIji+3C1s+ATo9GDM7oyeTpqJ/q1mNTse16m73cNJ0urV6EZQjdu134veSgzid1nj7Pw==</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>13D30714C0085DD2E05305991F0A0424</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>${=(int)(Math.random()*10000)</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>dbaccountid</con:name><con:value>5</con:value></con:property><con:property><con:name>dbrightstoken</con:name><con:value>3</con:value></con:property><con:property><con:name>dbuserid</con:name><con:value/></con:property><con:property><con:name>dbcreatedby</con:name><con:value>4</con:value></con:property><con:property><con:name>dbcreatedate</con:name><con:value>2010-06-11 00:00:00</con:value></con:property><con:property><con:name>dbexpiredate</con:name><con:value>2010-06-17 15:15:53</con:value></con:property><con:property><con:name>dbnickname</con:name><con:value>aaaa</con:value></con:property><con:property><con:name>rtrassert</con:name><con:value>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</con:value></con:property><con:property><con:name>streamcreateedate</con:name><con:value>2010-07-02 17:27:43</con:value></con:property><con:property><con:name>streamcreatecdate</con:name><con:value>2010-07-02 17:22:43.768</con:value></con:property><con:property><con:name>streamrenewedate</con:name><con:value>2010-07-02T23:27:43.000Z</con:value></con:property><con:property><con:name>streamrenewcdate</con:name><con:value>2010-07-02T17:22:43.768Z</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>beforeCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>beforeEXPIRATION_DATE</con:name><con:value>2010-08-04 21:28:40.829</con:value></con:property><con:property><con:name>afterEXPIRATION_DATE</con:name><con:value>2010-08-04 19:28:41</con:value></con:property><con:property><con:name>afterCREATED_DATE</con:name><con:value>2010-08-03 21:28:40.829</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_031946</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:5248A52FF29340F79EB95A9F6C4B3FDC</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D30714C0085DD2E05305991F0A0424</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCE67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5D4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CD567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B568CD567DFE05305991F0ACF57</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>95468fb6-7b76-4753-b1bf-969ff637ad8c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_42071 - StreamRenew - LLPCS - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of suspended cannot be renewed" searchProperties="true" id="29ebefef-e0ee-4cc3-9c06-dad7b54309e1" disabled="true"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e6835823-7446-40aa-aa2b-ef52654ace80"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="21c67ed0-8bbe-4030-ae29-32efadf989c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="26383fb7-a594-4bd2-9031-b2259ec79e00" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="e647eea3-30da-483f-8ab7-8af46e733df9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="4454cb1d-1d0e-4819-8c76-eed5529463ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="08257908-9b89-4215-9318-d3a9e1b34e8c"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to suspended" id="137f024f-ebf7-4206-9b7a-6067e9559ca9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert b.rightsTokenSetStatusSuspended(tC.getPropertyValue("rightstokenid")) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="31bc8bf1-d7e2-48da-9595-09d7e9e84c32"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="8529b97e-f913-47cc-b8a5-6977a46fe8fe" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="3913e564-cbf8-4717-be93-e5df97c76137" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="05410569-324e-488a-bcdf-6b07b72be803" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6DD195F103013CE0401F0A07992E32</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6DD19531574439E0401F0A07992E38</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81546</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>08257908-9b89-4215-9318-d3a9e1b34e8c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_42072 - StreamRenew - LLPCS - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of other cannot be renewed" searchProperties="true" id="95a9cb9b-1fc3-43f7-b0ea-c9db8e0b8547" disabled="true"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e635895f-d285-4ec7-8b03-cdef90fe9a77"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="bb389ceb-3e09-4983-b44b-af3af2c5cf1a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="49200bd8-2d3e-4366-ae8f-9e8ebfc375b2" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="c95076f5-3620-4e97-9010-2f7b23f0bbcc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="8783b22b-fb1d-4f4b-b347-e1b86f30b890"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="d5b5b7e7-322b-4b31-8107-98bcb886e51f"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to other" id="6f37decb-9449-4bd6-b60c-646f574f764c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert b.rightsTokenSetStatusOther(tC.getPropertyValue("rightstokenid")) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="5b0d99d1-37f7-4ba2-a271-664f5c750779"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="27118500-af4c-4926-8b08-b58f368868b9" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="7bb267dc-72ea-4025-bef2-ed23ae06e333" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" disabled="true" id="9e0d5b27-779d-4808-9669-a070d953d48f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="0433d110-38f0-4e62-b5e3-7e17013015fd" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6DD195F110013CE0401F0A07992E32</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6DD1958948E828E0401F0A07992E40</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81547</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d5b5b7e7-322b-4b31-8107-98bcb886e51f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_42073 - StreamRenew - LLPCS - RightsTokenNotActive - RIGHTS_TOKEN.STATUS_ID of pending cannot be renewed" searchProperties="true" id="0810c7f9-5892-460d-ac94-88cc77ac9d07" disabled="true"><con:description>This test case will verify that an expired RightsToken has no impact on the renewal of the stream handle associated with it</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1cb0c9cb-f861-407a-b71f-8525f0b90075"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","RT_NOT_ACTIVE");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="be34a23f-3c8a-4c75-88af-9fddae361877"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="d378314c-097d-4476-8b9f-0227ac241451" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="fb69d576-ceea-429b-84ab-69951837a23f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="1842d943-6e3c-4be3-9e13-b3fc4a46a95a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="a37988f9-6e04-40a4-aa54-1244e690d107"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Set RIGHTS_TOKEN.STATUS_ID to pending" id="57d9cab1-b401-42fc-b40c-d98a1393b752"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

assert b.rightsTokenSetStatusPending(tC.getPropertyValue("rightstokenid")) == 1;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="c0cb2799-bb65-49a8-9a15-8bfefdc01189"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="21d558a8-40a9-472f-8535-2e56240f2dd8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="42884a0b-bc27-47d2-a6ee-dffd5005f439" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" disabled="true" id="623e1eee-0c6b-45d4-9911-144c80df3d98"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="1906b027-fc2d-42f1-ac23-ccfb0e18ce0c" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_ACTIVE</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6DD194C77C2B8BE0401F0A07992E2E</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6DD195894DE828E0401F0A07992E40</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81548</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a37988f9-6e04-40a4-aa54-1244e690d107</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_42087 - StreamRenew - LLPCS - MD_BASIC CID status of 'other'" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2c699001-73a7-42ba-8154-f1ae8b373879" disabled="true"><con:description>This test case will verify proper response when the StreamCreate API has a RightsTokenID who references an MD_BASIC CID that has a status of 'deleted'.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2b7928af-bae6-4d6c-bbec-781a35ad2e77"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("streamhandleFULL"," ");
tC.setPropertyValue("rightstokenidFULL","");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireAfterRenew",null);

tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
//tC.setPropertyValue("expectErrTypeStreamRenew","CID_NOT_ACTIVE");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
/* Stream Row Validations */
tC.setPropertyValue("expectDBStatus","active");
tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectDBDeletedBy","1");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="30540969-ad89-4fec-81bb-895101a7cd5d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="1de2b9a5-5190-435c-8e95-407fdff92610"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4145fc9c-20d7-4646-b800-cfbd9e3ab367"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="cb0b1da5-5809-4236-b070-53a47a6da07d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'other'" id="4d1f6f5e-f69c-437b-bf76-6bb70111ff64"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusOther(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="005affec-9da1-4f9a-95b1-13bb0affff19"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="9440d2a2-26f6-4fd4-9125-ceaf94995f67"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="46136e3b-d0f8-436b-a241-333ebee1158d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acct    = tC.getPropertyValue("accountoid");

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

assert a.streamGetStreamDataRowCount(acct) == 1;
assert b.streamGetStreamDataHistoryRowCount(acct) == 2;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA row" id="49809bab-50fa-4a27-8f78-2aa74f03a2ba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA_HISTORY row" id="afd76575-800e-439f-889e-47ac504a27c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Verification of STREAM_DATA_HISTORY row")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="Update RightsToken MD_BASIC.STATUS to 'active'" id="7ee76fd3-bbfe-49c8-a5fd-b084330739b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def cid = tP.getPropertyValue("cid");
def alid = tP.getPropertyValue("alid");

a = new dbUtils.dbCID(log,tP.getPropertyValue("targetSystem"));

assert a.cidSetStatusActive(cid) == 1;</script></con:config></con:testStep><con:testStep type="groovy" name="Post Test Execution cleanup" id="efef3e0d-dfb7-4fa0-ad16-894879b1f2e5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
b = new dbUtils.dbRightsToken(log,tP.getPropertyValue("targetSystem"));

a.streamDeleteHandle(tC.getPropertyValue("streamhandle"));
b.rightsTokenDeleteByHandle(tC.getPropertyValue("rightstokenid"));

</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value> </con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>1</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>FC6DD1958961E828E0401F0A07992E40</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FC6DD194C7892B8BE0401F0A07992E2E</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>005affec-9da1-4f9a-95b1-13bb0affff19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44801 - StreamRenew - LLPCS - AccountNotActive - ACCOUNT.STATUS of deleted_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5c5040d9-1e83-491f-9aab-c31883719cc4"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="c517ab83-b287-4951-bb9b-340193a4d807"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="e33f674d-1814-49e0-95c7-5c8c3fc79a4c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="9d198eb4-2dc6-4788-bf3a-83621751b32f" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="ec03b98e-0501-4698-8809-fa05b81d692c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="7936e808-efed-4fcc-b693-80798e7cd2ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to deleted" id="1cf625de-6f5f-41dd-a612-a220736a7372"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="91511cea-a01a-48a6-8f6f-fe3ef599aa04"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="db92f9c5-c4fb-4f0c-a365-482b69a4b9ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="a10aad37-56ed-4f74-acc9-ae412c24beac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="dd0b2e50-0fad-4cd7-9439-ddae501ddd3e" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_031946</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCE67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5D4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc6JKEP4rFnlMIRcVlYpWsRJPPDE30cTdl9Q4NDoKAzKDmv31ZwaVVXM57u4TNU3P119fpruvGIpC03YYg5STmJY2UUiZnUtbSpZSO0aMMJuiCJjNse05d33bLOs22l9RSj23pbw2girGvmWogaVbanVi1NVmo+GrRq1an5iVoGE1J0KVsQx6lHFEeUsxdaOm6lXVsIZ63TZ1W6+Uzab5Qyk9Q8oEtlAp68qO1Ia1lBnnia1p6/W6vK6U43SqmbpuaOO7vodnECGlfbX1KDeUtnf6uOwDhjDEZRxH2pV2pHPlM9sjU4p4lsLOlv+ZLV3Tm5rQ8RmZXijFXfB7NIjzYwfRmBKMQvITyfjcAZ/FfskJp3FK+Cz61AlDl8AqbLCKjSq9ULRjamcCHTFMGVLZDBk7rAEEkALFUBoNei3l4rys5VeHKaIsiNOIHR9/jw/QFYRxAr7K9m7tqJ0P+EGk2leA7R7FYcbICu5lsSYIA9tlE/D5UKXHFAKy6RMmCnTDJDvtkN7JcRsNl0yB8T9J0EFytiDPKMyg/eB/f8oGaDS8aYxXz5FnLU02mfdvn56qrZzAoXIuKFK7PZ4UZVFE2xseAGJW4o8XxL3c4HmWpY4x33Tn950QLTvoeVnpZ6PHpyUbkyAdJ+nwZdXVv/f7nvNz0rmsVxcDvBjejvmUTC+X8Vx7aFTum7dvb1Z/xDrGYOnEqxc9mU2H4+e6e/3y9MNzmy/uoLqGy+vVzU39kTT//c6CH84/jZv0qWnpeBHdNwa9kTHjQTJyzM5iDCNMF06rcOeA/7Fs/+a9bDIHzPdHWQY9t9QVWUL862YmJcRXg1zVTmTzYRwoV9ryluwddibaHfFtkcPt2ai4Zteof6u4tU71uulc67WKXms2ja7umHXd3DeZLYsTip2YBkTaki13WzZfE8SRzYD6kKqrOBOdjilfILqIo1KPDsQjiCmDYSzaM57TdJNYU51lU2isdRQYNZjHc6V0H/MH+pA6AYf0qCUb+lFLHgAmCQHZt2VZM1HXjItQLNEq46FRXqEyhUx09lQ2WdusNmoaI1ESgiSqRbGfhVBOZkkeGI1tv6aKMMulg+th/tg+dev03z4CQscnUoFJX76ByCKczhajadf2jrxz2PpwBu3hncwn8l2JcPKU4C2T41+/qkSWR1Eibt/xHvekC93fuPva8V6NPwTo/4Xx/t8aF7l8f1P7Ip7aaSoLQ/6KHJjdLx1ifImG194X4hIZ5WU5W62yvPaq1YqWCnhNFoGmm5oHOBMt+W0YL4BqBYp21vwriJ8YL+THFDM+ox5HHCLxVkr58YyFxwMmF56eeOObc7epI5MidBw2/COZ6OmMScZf7nPYxlJPiB/FZx2n/q+MfYB1YEf4KfYdTuhUnuTse/ukLnAsYIno2nF6CP4RwEfGj4VFkAsuXBTUJOPw+Z+SbMctBWEcZ5T3XCUXHI6InCd/S8D+pfQOJp9CxVpK/n8vVUleAhjEMstIji+3C1s+ATo9GDM7oyeTpqJ/q1mNTse16m73cNJ0urV6EZQjdu134veSgzid1nj7Pw==</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2544888607554EFABE2EAD817D6BF348</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D351A0DA733A10E05307991F0AB9EF</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D351A0DA733A10E05307991F0AB9EF</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:2544888607554EFABE2EAD817D6BF348</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81580</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B568CD567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CD567DFE05305991F0ACF57</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>91511cea-a01a-48a6-8f6f-fe3ef599aa04</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44806 - StreamRenew - LLPCS - AccountNotActive - ACCOUNT.STATUS of blocked:tou_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="953be108-8791-4e97-b0ed-6dacf8ae47a7"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ca2c613a-0122-4dfd-9c5b-e366bd5df582"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="1084a539-1922-44b8-a805-e4a1718d2153"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="a2245f40-5058-4e5e-a096-1c45e16117ff" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="938e39ec-ffc4-4469-b797-60ec097d5a6e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="c21f75db-ebd3-4a59-b68a-e75e62cf2d4a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked:tou" id="fa4b0cd0-afb3-48c4-a9bc-f2df9277eb06"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "blocked:tou");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="65403085-15e5-493a-b707-b228121def63"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="006eef46-8de6-43b0-87fc-e58a5a2deaa2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="6798b301-d73d-45ce-8eff-a4e6b5e4e42e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="a1ceab49-fd1f-4668-a7bc-7c2fb9a0fe98" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_031946</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCE67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5D4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc6JKEP4rFnlMIRcVlYpWsRJPPDE30cTdl9Q4NDoKAzKDmv31ZwaVVXM57u4TNU3P119fpruvGIpC03YYg5STmJY2UUiZnUtbSpZSO0aMMJuiCJjNse05d33bLOs22l9RSj23pbw2girGvmWogaVbanVi1NVmo+GrRq1an5iVoGE1J0KVsQx6lHFEeUsxdaOm6lXVsIZ63TZ1W6+Uzab5Qyk9Q8oEtlAp68qO1Ia1lBnnia1p6/W6vK6U43SqmbpuaOO7vodnECGlfbX1KDeUtnf6uOwDhjDEZRxH2pV2pHPlM9sjU4p4lsLOlv+ZLV3Tm5rQ8RmZXijFXfB7NIjzYwfRmBKMQvITyfjcAZ/FfskJp3FK+Cz61AlDl8AqbLCKjSq9ULRjamcCHTFMGVLZDBk7rAEEkALFUBoNei3l4rys5VeHKaIsiNOIHR9/jw/QFYRxAr7K9m7tqJ0P+EGk2leA7R7FYcbICu5lsSYIA9tlE/D5UKXHFAKy6RMmCnTDJDvtkN7JcRsNl0yB8T9J0EFytiDPKMyg/eB/f8oGaDS8aYxXz5FnLU02mfdvn56qrZzAoXIuKFK7PZ4UZVFE2xseAGJW4o8XxL3c4HmWpY4x33Tn950QLTvoeVnpZ6PHpyUbkyAdJ+nwZdXVv/f7nvNz0rmsVxcDvBjejvmUTC+X8Vx7aFTum7dvb1Z/xDrGYOnEqxc9mU2H4+e6e/3y9MNzmy/uoLqGy+vVzU39kTT//c6CH84/jZv0qWnpeBHdNwa9kTHjQTJyzM5iDCNMF06rcOeA/7Fs/+a9bDIHzPdHWQY9t9QVWUL862YmJcRXg1zVTmTzYRwoV9ryluwddibaHfFtkcPt2ai4Zteof6u4tU71uulc67WKXms2ja7umHXd3DeZLYsTip2YBkTaki13WzZfE8SRzYD6kKqrOBOdjilfILqIo1KPDsQjiCmDYSzaM57TdJNYU51lU2isdRQYNZjHc6V0H/MH+pA6AYf0qCUb+lFLHgAmCQHZt2VZM1HXjItQLNEq46FRXqEyhUx09lQ2WdusNmoaI1ESgiSqRbGfhVBOZkkeGI1tv6aKMMulg+th/tg+dev03z4CQscnUoFJX76ByCKczhajadf2jrxz2PpwBu3hncwn8l2JcPKU4C2T41+/qkSWR1Eibt/xHvekC93fuPva8V6NPwTo/4Xx/t8aF7l8f1P7Ip7aaSoLQ/6KHJjdLx1ifImG194X4hIZ5WU5W62yvPaq1YqWCnhNFoGmm5oHOBMt+W0YL4BqBYp21vwriJ8YL+THFDM+ox5HHCLxVkr58YyFxwMmF56eeOObc7epI5MidBw2/COZ6OmMScZf7nPYxlJPiB/FZx2n/q+MfYB1YEf4KfYdTuhUnuTse/ukLnAsYIno2nF6CP4RwEfGj4VFkAsuXBTUJOPw+Z+SbMctBWEcZ5T3XCUXHI6InCd/S8D+pfQOJp9CxVpK/n8vVUleAhjEMstIji+3C1s+ATo9GDM7oyeTpqJ/q1mNTse16m73cNJ0urV6EZQjdu134veSgzid1nj7Pw==</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ACE26648EBE64003BF42FB47AEAB3D1A</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714C0165DD2E05305991F0A0424</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B568CD567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CD567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D30714C0165DD2E05305991F0A0424</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:ACE26648EBE64003BF42FB47AEAB3D1A</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>65403085-15e5-493a-b707-b228121def63</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44807 - StreamRenew - LLPCS - AccountNotActive - ACCOUNT.STATUS of blocked_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3d27aa4a-4088-4926-9dd5-99444ce1815c"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2d0770d5-98a9-44ce-88d7-444e763fec73"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","AccountNotActive");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="94ce9def-b9b4-4805-8385-2ec049139d0d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="ad82152e-79f3-4676-9164-e759bf3ded64" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="3483f60a-2858-49f6-8e33-b3513df989fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="9b4e7ba5-4798-4585-b65b-192f21cd4972"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to blocked" id="debcbb97-e5ce-4e09-b453-d96ad806f6d1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "blocked");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="2bbd3d51-e062-45f7-bd1a-9365104b486a"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="8fb9842b-2f8a-49fa-ac00-a3d32564779a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT.STATUS to active" id="20772f2e-6e69-4cf6-ae96-4362b8a208c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	dbUtils.accountSetStatus(tC.getPropertyValue("accountoid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.accountSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="0e5897f0-9168-4531-9a4c-920a52e45525" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81586</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_031946</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCE67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5D4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc6JKEP4rFnlMIRcVlYpWsRJPPDE30cTdl9Q4NDoKAzKDmv31ZwaVVXM57u4TNU3P119fpruvGIpC03YYg5STmJY2UUiZnUtbSpZSO0aMMJuiCJjNse05d33bLOs22l9RSj23pbw2girGvmWogaVbanVi1NVmo+GrRq1an5iVoGE1J0KVsQx6lHFEeUsxdaOm6lXVsIZ63TZ1W6+Uzab5Qyk9Q8oEtlAp68qO1Ia1lBnnia1p6/W6vK6U43SqmbpuaOO7vodnECGlfbX1KDeUtnf6uOwDhjDEZRxH2pV2pHPlM9sjU4p4lsLOlv+ZLV3Tm5rQ8RmZXijFXfB7NIjzYwfRmBKMQvITyfjcAZ/FfskJp3FK+Cz61AlDl8AqbLCKjSq9ULRjamcCHTFMGVLZDBk7rAEEkALFUBoNei3l4rys5VeHKaIsiNOIHR9/jw/QFYRxAr7K9m7tqJ0P+EGk2leA7R7FYcbICu5lsSYIA9tlE/D5UKXHFAKy6RMmCnTDJDvtkN7JcRsNl0yB8T9J0EFytiDPKMyg/eB/f8oGaDS8aYxXz5FnLU02mfdvn56qrZzAoXIuKFK7PZ4UZVFE2xseAGJW4o8XxL3c4HmWpY4x33Tn950QLTvoeVnpZ6PHpyUbkyAdJ+nwZdXVv/f7nvNz0rmsVxcDvBjejvmUTC+X8Vx7aFTum7dvb1Z/xDrGYOnEqxc9mU2H4+e6e/3y9MNzmy/uoLqGy+vVzU39kTT//c6CH84/jZv0qWnpeBHdNwa9kTHjQTJyzM5iDCNMF06rcOeA/7Fs/+a9bDIHzPdHWQY9t9QVWUL862YmJcRXg1zVTmTzYRwoV9ryluwddibaHfFtkcPt2ai4Zteof6u4tU71uulc67WKXms2ja7umHXd3DeZLYsTip2YBkTaki13WzZfE8SRzYD6kKqrOBOdjilfILqIo1KPDsQjiCmDYSzaM57TdJNYU51lU2isdRQYNZjHc6V0H/MH+pA6AYf0qCUb+lFLHgAmCQHZt2VZM1HXjItQLNEq46FRXqEyhUx09lQ2WdusNmoaI1ESgiSqRbGfhVBOZkkeGI1tv6aKMMulg+th/tg+dev03z4CQscnUoFJX76ByCKczhajadf2jrxz2PpwBu3hncwn8l2JcPKU4C2T41+/qkSWR1Eibt/xHvekC93fuPva8V6NPwTo/4Xx/t8aF7l8f1P7Ip7aaSoLQ/6KHJjdLx1ifImG194X4hIZ5WU5W62yvPaq1YqWCnhNFoGmm5oHOBMt+W0YL4BqBYp21vwriJ8YL+THFDM+ox5HHCLxVkr58YyFxwMmF56eeOObc7epI5MidBw2/COZ6OmMScZf7nPYxlJPiB/FZx2n/q+MfYB1YEf4KfYdTuhUnuTse/ukLnAsYIno2nF6CP4RwEfGj4VFkAsuXBTUJOPw+Z+SbMctBWEcZ5T3XCUXHI6InCd/S8D+pfQOJp9CxVpK/n8vVUleAhjEMstIji+3C1s+ATo9GDM7oyeTpqJ/q1mNTse16m73cNJ0urV6EZQjdu134veSgzid1nj7Pw==</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C1DEC44CEF9944CD9DC3B31D171E8DD7</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE637A2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>AccountNotActive</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CCD67DFE05305991F0ACF57</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2F17B3D5C4E9AE05305991F0A2702</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B568CD567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568CD567DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D34AAE637A2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:C1DEC44CEF9944CD9DC3B31D171E8DD7</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2bbd3d51-e062-45f7-bd1a-9365104b486a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44841 - StreamRenew - LLPCS - ACCOUNT_USER.STATUS of deleted" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7855f320-1682-4d1d-81b3-82c9a0094931" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="265dad26-67e2-4715-b5b5-b50b0681f63a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="d6486703-ffa3-4a59-9d3d-e6118102ff51"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="76d5fc78-d0bc-4b87-af17-41e15b5603e4" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="2e8530fc-44c7-4ad5-b83d-611b17c52764"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="e406bc2c-05d5-44be-95d8-68ca504c251e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="8bf50e2f-a011-4c00-8f59-1f53ecf764ad"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="1aa78594-59f3-4dec-91a2-76c6fc2adc13"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to deleted" id="6b2dd86e-fb58-4497-aa7c-833996e51b14"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "deleted");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="4c1bb81d-3ce0-4e8a-b49d-050f334653a2"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="bfd83ce4-5eba-4328-8218-ac6151a19477"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="b2e3e2cf-d279-4400-a909-b9081236d53c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="1c3d35e4-2c47-49d2-b745-9222144286e7" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6E3CDE48418A9FE0401F0A05997546</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6E3CDF6C70A4B3E0401F0A05997558</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81588</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4c1bb81d-3ce0-4e8a-b49d-050f334653a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_44845 - StreamRenew - LLPCS - ACCOUNT_USER.STATUS of blocked" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7b4d6b58-ca88-4140-9b52-713a6558e07c" disabled="true"><con:description>This test case will verify an account that has no active streams associated with it can establish a stream handle via a full userId.</con:description><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="66e58f5d-dcd0-412a-bd41-4be941399954"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","llpcs");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("counter","1");
tC.setPropertyValue("loopuntil","1");
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="4f66e9bf-4817-4e36-bc1e-4a2b3f9f111e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Account's StreamHandles" id="fc946ff4-0704-4c85-9fee-689e487da66b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="8cc89987-240d-4dc2-a031-b91e98888a99"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate" id="d35a536f-609b-4fdb-adbc-f90ddabd6031"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def counter = tC.getPropertyValue("counter").toInteger();



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;




</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="7dbbe17d-9636-4cc8-a252-8ffa108a2d8b"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate" id="ddf44dd0-94dc-4d4f-8fbd-9b716745ee54"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to blocked" id="28660557-1583-4ba9-a22c-aad935839a12"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "blocked");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours" id="67dc0378-9f46-45ab-b66e-c8e782c7bb54"><con:settings/><con:config><script>import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="058ac7d7-69eb-424a-a73f-1146b6a8fce7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Update ACCOUNT_USER.STATUS to active" id="dac49cb3-a754-47f4-b6de-38520dbb8ad5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	dbUtils.userSetStatus(tC.getPropertyValue("useroid"), "active");
} catch (Throwable e) {
	log.info "ERROR - dbUtils.userSetStatus - $e";
	assert 1 == 2;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STREAM_DATA and STREAM_DATA_HISTORY row counts" id="0cf9f6c9-fafc-4fa9-9551-fc26f304dbaf" disabled="true"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

try {
	dbUtils = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR! - dbStreams - $e";
}
finally {
	assert dbUtils.streamGetStreamDataRowCount(tC.getPropertyValue("accountoid")) == 1;
	assert dbUtils.streamGetStreamDataHistoryRowCount(tC.getPropertyValue("accountoid")) == 1;
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81592</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>llpcs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140806_01040</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC6E3D3F25E4BD52E0401F0A05997550</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FC6E3D4B1E1E8926E0401F0A0599753C</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>LLASP_CS_1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>67dc0378-9f46-45ab-b66e-c8e782c7bb54</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Node Permission and some negative Test Cases" id="7a5671e0-5cc8-4aa2-b053-2983d45d515f"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00101 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with COORDINATOR - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="aea483a0-dbc9-4365-86ec-c9e83ca69e61"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="84a0735f-8718-4544-b932-b42a05b5cb92"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","1");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdCoo"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdCoo")+";");






</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="05c3e4b6-6fa7-4d32-9555-886541deee10"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="63434c27-2177-4fc0-94f9-203195e300ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="52418f18-155b-471a-9517-0b29794403e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="e1b91a8a-5323-4c49-9d72-4ddec4492ce1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="9b07c0f3-c027-4c99-8023-990bdf29d476"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="187b6368-64bc-44d3-8444-4803e8534630"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="7e836998-9de9-4fc0-a993-1e7dd834286e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="68234674-0f27-4620-a5bc-890025a93166"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="54488545-963b-4c73-b6f5-84edbb3f614a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4eeff716-6611-49b3-b781-80b53200763a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="43543265-d448-44a0-97d6-b9d58695127f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as COORDINATOR" id="5a0bcb67-4323-4ade-8787-99ca2b0b23f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="cf7122fa-ad9d-4ee2-a6a9-3691114527f7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>COO</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_033611</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14762CA318A154DAE05307991F0A656A</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14762E14874A5474E05305991F0ABD36</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZZb+o6EP4rKH28CtkLRAUpBXrKaaEt0NL25co4EzBNHIgdlv76YwdIWUov90hIyJNZvln8ea4YikLT9RiDhJOYFpZRSJmbSatKmlA3Rowwl6IImMux2/Pa965Z1F20NVEKrUZV+RcQoJJRLqmAkKPaZsVSh8gK1KDsl/Wy4wRmaShUGUuhRRlHlFcVUzccVbdV0+4buqtb4lcsX1rvSuEFEiZ8C5WirmxALVlVGXM+dTVtsVgUF1YxTkaaqeuG9tq+7+ExREipXa0zygIltY0+LvqAIQxxEceRdqXt6Vz5zO2REUU8TWATyz8VS9f0iiZ0fEZGF0puC36LBnF2rCMaU4JRSD6RrE8b+Dj2C144ihPCx9HJJAxdOlZhiVVs2PRC0fahneloD2HCkMrGyNj46kIACVAMheduq6pcnNe1zLSfIMqCOInY/vH/4QE6hzCegq+ybVobaOc7/KZStSvAboviMGVkDh05rFOEgW26Cfh8V4XHBAKyvCdMDOiSSXTaLryD47oaDTICxv+mQTvNWTt5QWEKtff5080Ds7rXvYneGfTRL/qRvNlPXXOhVzMAu8qZIG/t+ngwlPkQrS288YgskrtK0DfvbrXG3ao+IB32zp2Pu6bev53Ac+iBTZLx4MmE5cyePd3G6ecvNgonvZfFoN4ovbVuwsavUjhxOmGZkSV5/ygt/xncT+wOaT93+uFrax58LGfBrF1p+FHlOYJupTerl7vm++/W3Wd3Nfw9Hzj6a3na0bS3lHz26+aqO+6NxrRp9dvD5mt42ySkWc3T2cG/L9ve+V46nADm26Mcg1ajcCO6hPjPZCYlxFeDTNWdSvJhHChXatJKcoebCrojvit6uD4bdunSbBp2uWRXHLtkN3XH0p1KxbjRveuGdbklmTWKA4j1mAZExpKUux6bnwHiyGVAfUjUeZwKpmPKDx4biKNCi3bFJYgpg34s6NmYjOIZCmdGKaarz5Hl+xVsrPxUKXRi/kAfEi/gkOxTsrVHyV3AZEpA8rYcaybmmnFRihmapzw0inNUpJAKZk8kybqmXXY0RqJpCBKoFsV+GkJxOp5mhdHY+t9UEWaZtNvsZ5ftZFqH37YVEDo+kQpM5nINootw9LaYrrNN5HTCl7sJb917qU/kvRLl5AnBayT7n76mRI5HPiL1h4ct5FzzPMvGvdd7/EtbUcdjS+2HXLTDMuaB/DnZCbt98MXTIcimth2CGTKKs2I6n6dZ323b0hLhXpOF1XRT6wFOBR2u+vEHUC33op319uTAD4Ln8n2IKR/THkccIjGnhex4xrLRAyaXjZa4X8tzN5m9kKJ0HJb8O1k9FIuSRPzjLoVdLPWE+FH8LeLE/+rYN7524og8xa7BCR3Jk3x3VifmAsfCLRGMGSe7zr9z8F3wfWFe5BwLFwM1TDmc/lKQVFhVEMZxSnmroWSCXXrOcPLVFNwvpSM32QuQr4Tkv3dClWQjgEEskoxk/uXL7sorQEc7FL8JesTydc8yyp7u2A0vY/nSmuUvnUsvL8oeutqR+FiyU6fDGa/9AQ==</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">59008F35B4554BECA7C2E0FFE9B5FF0A</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147645B85B1953A7E05305991F0A2CEE</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14762E1487495474E05305991F0ABD36</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14762CA318A054DAE05307991F0A656A</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:59008F35B4554BECA7C2E0FFE9B5FF0A</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14762E1487495474E05305991F0ABD36</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14762CA318A054DAE05307991F0A656A</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14762CA318A854DAE05307991F0A656A</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:14762CA318A854DAE05307991F0A656A</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:147645B85B1953A7E05305991F0A2CEE</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00102 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with RETAILER - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="eb75bd90-9b0f-443e-8cf7-d7c4bb7a1ae4"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="a29de577-d03e-4437-8fd1-16269c6c9ede"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","1");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";");






</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="87a6fd2c-d808-4288-a74a-aa0d4ccccfb4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="bc5d4d0f-f2a1-4575-b5a5-36b52d4331cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="6aff23cb-3b0d-4e1e-9b9f-2cc3a968cda6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="aaf4f347-c3ce-44b1-adfa-eedc415fbf0f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="be8e8849-fdfb-4571-b017-a703eb72596c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="fc8814b2-9af2-459d-8d63-1ba59a0e2361"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="a8071e20-3dda-4aff-a27f-2d3476002ec9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="234bd972-7565-4069-bb55-7416dbf572c7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="6c84617a-aa47-4cc4-9dcb-2fdb0c64b23d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="ad949d29-a2fa-46dd-9175-ea8a34a5d480" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a380c73c-7070-4cce-8552-cb62026d3ec8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="6c944cce-1480-4c49-8b26-44466794adf6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as RETAILER" id="188ed480-7d7d-4b6b-b9ce-5460fd6a3393"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="0b870a8b-4bef-4535-af79-cc11b99e1726"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_03283</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568EB167DFE05305991F0ACF57</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714C24F5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZrc7I6EP4rDv3YQQiCtUx1xkvbl16t2tb2y5kYVkmFoCSg7a9/E1Sq9nI85xOzy2b32Uue7BnHUWi5Tc4hETRmpWUUMu7m2rqWJsyNMafcZTgC7gri9pu3N65VNl28OaKVvE5d+8fBaFzFyNerhIx1G5lEHyG7op/gikNqACNi1qQp5yl4jAvMRF2zTOTopq2j6sA8ca2ai1C5UrVftdITJFz6liZlU1uDWvK6Fggxcw1jsViUF5VynEwMyzSRMby96ZMAIqw1zlYZ5YGSxtqelH0gEIakTOLIODN2bM587vbphGGRJrCO5f8UyzTMU0Pa+JxOjrTiLPgeG8e52MYsZpTgkH5gVZ9bEEHsl5rhJE6oCKIfk0CmcqzDkugE2exIM3ahHehoB2HCsc4DjNa+ejCGBBiB0mPPq2tHh3UtPzpIMOPjOIn4rvjf8ADLIIxn4Ot8k9Ya2uEOv6lU4wyI6zESppxmcKeGdYYJ8HU3gRzuqtRNYEyXN5TLAV1yhc7YhrcnrqrRoRPg4v80aKs5KydPOEyhgcXQf558IHvRp61HnsYf5mh4+3rsHT/UcwDbxrmiaO1K3BvKYohWJ4Khc+Vcd15fusvLoeCLtjfPBsOa82zwt17YZzTCD8hftFveO++aob/4E90OZ+itG10Or2pJdjm+6z1fLY+NtzvehePax7X39lJ7mv4ZXfqZibuoNg/80VX68PR6MRlcIxqjfo8/Wua0uuhM+xNxN72IgjQysunH1XQpeNWK/qDrwfnjaW/eay2rleB+IW79auulXqSzhX9Xt7nz/XT0BkRsRDUGXqd0IbuExe9kpjTU18e5qTtT5MMFMKE11CnFHW4q6Y76ruzhSkaVTsU8QXbbss+dTsc6N52K6ZyeoguzadqWvSGZFYo9iO2YjamKpSh3NTa/AySRy4H5kOhZnEqm49ovHjtY4JLHevISxIzDIJb0jE6ddOxPnDfhBO/gzCdBNg5OHf6ule5icc/uk+ZYQLLDycjc4eQeEDqjoIhbzTWXg82FrMUcZ6kIUTnDZQappPZEsaxr2TXH4DSahaCQGlHspyGUZ8Esr4zBV19Lx4Tn2t75IL9tP+a1/29TAmnjU2XAVS4tkG2Ebx4Xc5PIzwlXthPeuG+mPlUXS9ZTJJSskOz++hwTNR/FjHRumv3uBnRhe9hZWY2vJ41fEBn7xSgC+RndCrt5t+ULIDmjsWnlHKPyvJxmWZp3z7YrRiLdG6o8hmkZfSCpZLX3QTwFZhRejIOekAL4XvBCvwsxFQHrCywgktNWysUDdoY+cLUzePKaLA9dSHZCytIJWIrvdO1Q7jsK8a8rEXGJspPqrvws4sT/7Ng3vrbiyDzlyiAomyhJPR/vP8wFiaVbKokvTradf+fgu+C7yqLIBRYhB2qUCvj5T0kxWl3DhMQpE15HyxXbLJvjFO8zcD+NvrjJibzY7Oi/r3Y6zUeAgNwHOc39qwfaVVeATbaYeh30C1m3nGrtvGVWTzoX22TdvnBOiqLsoGt8UX/VbNVpf8YbfwE=</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7F90F3F3A6B144DE9E04F9AA84EC42A2</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE656F2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714C24E5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D30B568EB067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:7F90F3F3A6B144DE9E04F9AA84EC42A2</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714C24E5DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568EB067DFE05305991F0ACF57</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568EB867DFE05305991F0ACF57</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D30B568EB867DFE05305991F0ACF57</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D34AAE656F2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00103 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with COORDINATOR CS - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5ff48cf4-67c5-43a8-b7cb-72db0d053527"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="758b4b73-51c0-473b-971e-7d9296bf6862"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","2");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";");

tP.setPropertyValue("nodeoid20",tP.getPropertyValue("nodeIdCoordCS"));
tP.setPropertyValue("audiencelist2","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdCoordCS"));




</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="ab69b581-72fe-415d-b168-38ca77e5f2b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="afc4bd02-45da-4f3c-a07f-d4889da1d70d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="5edbab5d-9b6a-4622-8bf8-93d14733e9f8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="fc208e66-6e18-4b69-966e-c12ee8e7c224"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="5cc2b874-e8dd-4c66-bd9f-6eeebd36a2ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="19668f94-90d3-4243-bb86-d19199f01fa0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="8dfcc44b-cb62-4e40-8ed5-35fa67ea92ab"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop if necessary" id="c6921f81-e23d-41a9-b306-5ac057c38252"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunner;
import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunContext;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int loopuntil = tP.getPropertyValue("loop").toInteger();
int counter   = tP.getPropertyValue("Count").toInteger();


if (counter &lt; loopuntil) {
	counter++;
    tP.setPropertyValue("Count",counter.toString());
    log.info "==========================================================";
    testRunner.gotoStepByName("Set NodeID and counter");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="b4904274-e805-4ade-8336-d86576c1bde8"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="6863148b-8bf5-40e9-82d6-560f0edecaa1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="11970180-600c-438d-9a93-d5f9e71a606d" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="47c74d23-5698-4f30-85fb-347c664d6e13"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="cd8e822f-5f55-43a2-a00d-3a9c32ead3aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as COORDINATOR CS" id="a6dbb091-c315-4906-b9b5-ed47c4ffb212"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="6ddba2e3-5c8e-479d-a459-034939f35e08"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_032818</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE657F2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65932E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbbcuI4EP0VyvM4ZXyJudgVqCIQEiYwSYBcX7YUuQ2a2BJIMpB8/UgGHExIlt0nl9qt06cvOtKpQEnsBi0hgEvCaGmVxFQEmbVhpJwGDAkiAooSEIHEwag16Adu2Q7QdotR6nUaxj8R8t2o6tgmRlFkeu5LZL54kWNizw7dqFatQRgpVyFS6FEhEZUNw7Wdiml7plMd27XArQdurey7lWejdA9cKGzlUraNDamVaBhTKWeBZS2Xy/LypMz4xHJt27EeB/0RnkKCjObpOqMsEG9u/HE5BAxxjMuYJdapVfA5DUUwIhOKZMphEyv8KpZt2b6lfEJBJj+MfC+EPRqxbNlGlFGCUUzeka7PAOSUhaVWPGGcyGnyZRKOrYFNWGETOx79YVhFakcCFRhygUwxRc4GawgRcKAYSnfDXsP4cVzXsq1jjqiIGE9Ecfnf+ABdQMxmEJpim9aG2vGAByrVPAUc9CiOU0EW8FsP6wxhEJtuAj4eqnTDISKrPhFqQFdCs7N26e0t19XokAkI+X8atNOcNcg9ilNoXr3znw9/FqIPPyMxTVdP9UlCOzBx/7BGRmDXOTPkrV0v94YyH6L1jrn96J/9vr765Y/jG3ExroS4Pq8zPB/3ZNTqntX8q8ebUdtzLysj/+Fs2L0h7fPb2nR5Wb17fZv1h8997+29Rbzbe7/ytPBfrh9sjBhcVMcKAmFPiJmV3KIuugzvz5/u/Nc5rw3YQ33ZeRkMpqv2Rb9n8Z9j0r+97shfCe97w2d4F8uJ/VyhoWSC17udi1tHDBp5Ojv8i7btmR+lL38Ay+1Sj0GvU+qqLiH5vZhpCwnNKHMNZlp8hAQqjabepbUjSJXckTBQPVyvnZPOiddqnVcrvu2eO2fnduXErvi+07Vbte5ZZSsyaxZ7FNuMRkTH0pK7HpvvCeIkEEBD4OaCpUrphPENYgdJVOrRoToEjAoYMyXPjl+NptF7HPurd4/5NYwcqQ5ITRil30xe02veiiTwgiY7dkGTh4DJjIAWbj3XQg22kKoWc7RIZeyUF6hMIVXSzrXKBq5Xr1iCJLMYNFMrYWEaQ3k2nWWVscT665oIi8yKGeNhgNdH7svk9v9t66B8QqIdhE7oDFQv4cAN42yz+ZR19eBNtIVvpSHRp0sVVXKC10yKvz5mRQ9JPijbtLa8c/d9QwHa2s8qjxYuCM5HPr+4lZ4rBWhuGzNHTnleTheLNOuF551YXMFbuh6W7VojwKnSqLcxewVq5SjWURdCTnwveG4vUkzllI4kkpCo2SllyyNeACMQ+gXQU0O/OvZ5UQipSidhJQ/Z2rF6vWjG3z5wcIC1nzLfqM9SdfGjYwewduKoPNUDQBI60St9Gbx9NxxEyRjju+CHAA4FLxrzIudcpBqol1TC139KWp8aBsKYpVT2OkZm2NXMjKd8m0Hw4fQJJpPl/J1G/v2hZpJsBDCo150gGb6+bgN9BOhkR3c3QQ9Lb639nfQW2TU/mT9bduq0P+PNvw==</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">03DF805CDA094E80A405BC4793E6A324</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65A22E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D34AAE65902E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D34AAE657C2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:03DF805CDA094E80A405BC4793E6A324</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65902E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE657C2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65862E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D34AAE65862E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D34AAE65A22E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c6921f81-e23d-41a9-b306-5ac057c38252</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00104 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with RETAILER CS - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6482ed7e-c981-42ef-a65d-9ef263e9dbeb"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="d2321aeb-712b-4073-97b4-da34a0801dc9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","1");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdRTLCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS")+";");






</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="eb8cf483-65fd-4058-bff1-d947b5878de0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="531ade67-1f99-455b-aabb-7bc01230f74b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="9d94b349-9501-4294-aebf-21f3405f7126"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="26f56144-6368-4e90-85ee-7e3438d39c9b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="6867dedb-9a78-4b1b-8ce6-13e76e38b16a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="03896996-664f-4dd8-9b27-4a1889a0bd7d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="cdd808f7-45f4-4597-b102-f63e1bb795b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="d4ae08e4-74a7-485a-8335-806d793a2285"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="80ea4382-ac99-4e25-a6d7-3033aaf3c18b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="20d3ca6a-9f5a-47ad-9144-46531ed53ec5" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="16aedfa0-979f-4dc6-a7a3-0edb3338d625"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="ca4cab22-22f3-458c-8469-699ff5aecaf7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as RETAILER CS" id="028fc2be-5ce1-4772-b5b9-f993ff577b3b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="0a5b874b-8c39-4e98-a2a6-2a0e5c7d781c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_032833</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65B22E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65BE2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbdcto8EH0Vxr3sGPmPAJ7ADARIPElIAiRtuckIeQGltgSWDISnr2TABRLy8fXKs+vV7tkfHe2lwHHk+A0hIJGUs8IqjpjwM23NSBPmcyyo8BmOQfiS+P3G/Z3vFC0f744YhaBVM15Lnu2Vy45n4lFYNj3LsczRRQimbVUrVShXPadKlKkQKQRMSMxkzXAsu2RanmlfDKyy71R8zy5WXW9oFF4gEcq3MilaxhbUStSMqZQzH6HlcllcukWeTJBjWTb6eX/XJ1OIsVG/3GSUBUrqW3tSDIFAFJEi4TG6RAc2l6Hw+3TCsEwT2MYKT8WykFVFyiYUdPLNyM9CGLAxz8QrzDijBEd0jXV97kFOeVhoRBOeUDmNTyZhW9qxCStiEttj3wx0CO1MRwcIE4FNMcX21lcPxpAAI1B47gU149t5XcuODhLMxJgnsTgU/x8eYAuI+AxCU+zS2kI73+EnlapfAvEDRqJU0AV09bDOMAGx7SaQ810VHhMY09UdFWpAV0KjQ/vwjsRNNVp0AkL+S4P2mrNx8oKjFOrj55v3lde9+b5Ew4U97IX0fticy/JbtVLLAOwbZ4q8tRvxaCjzIdqc+FEJ1289J262Hp6msJqrLyq9oU6nIcqxNwiFWIxa17E7XwxtNOadKW7fWhXZGL3NY/Z8T5rPE5S83brdEXZv0xnm1Xmpl97duFX7+lfaDe6eRjhyQ+h2Oy98vV5ZpafrpyFNpqMgeBzxWTy+Hsbt9cvADn5dTb+PpRus42HUeex9Z/zHz9n4uR154uaieb2s5ens4T/U7e58Px29AZE7UY9B0Cp0VJew/JrMtIaG5jgz9WeafIQEJo26PqW5w08V3dHQVz3cyLbbcr1Go31Raractt1sWyXXKlWrdsdqlDvN0o5kNiiOIF5xNqY6lqbczdh8DZDEvgAWQmIueKqYThhfeGxhiQsB66lLwJmAAdf0vCpJvkhpJaoKm12k8Tr5bdHKHBuFLpcP7CFpjCUkB5xsWwec3ANCZxQ0ceu5FmqwhVS1mONFKiO7uMBFBqmi9kSzrO94lRISNJ5FoJGimIdpBMXZdJZVBonN1zExEZm21x5kt+1kXsf/diVQNiHVBkLn0gTVRvjkcXF3iZxO2N1PeOe+kYZUXyxVT5lQskFy+OvvmOj5yGekddfoP+5A57bnnVXV+PeTr1f9V/vjcfRFQui4lnm0cEH3Yu+effWAKMqp7yZhju3ivJguFmnWfM9zUaLcI11dZDmoDyRVpPg+4L+BodwLOusFyoEfBc/1hxBTOWV9iSXEalgLmXjGytEHoVeOQN2y1bn7zEFIVToJK/mZ7ipS65JG/OVGRXyi7ZT6UX2WPAn/duwTX3txVJ5q45CUTbSkX5/3E8NBuHJLFW/yZN/5Zw4+C36ozIucY5FqoEaphNN/CpoQawYmhKdMBi0jU+yTdIZTvs/A/2v0wU32DuSLIf3vzdCk2QgQUOukoJl//b77+gqwyR7Rb4Oe4Hr7K64/RFf/oP6o2avT8YzX/wA=</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">B0F28F332CD54F68800D0B4EBF52506A</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30B568F9367DFE05305991F0ACF57</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D34AAE65BD2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D34AAE65B12E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:B0F28F332CD54F68800D0B4EBF52506A</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65BD2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65B12E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65B92E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D34AAE65B92E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D30B568F9367DFE05305991F0ACF57</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00105 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with CONTENT PROVIDER - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0d808211-da7e-4c91-aa06-d4ca84b634ac"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="590b04a7-fb8d-454c-be54-52dda1ea0f5d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","1");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdCON"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdCON")+";");






</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="c6644b93-fede-416d-8836-3e671e12a191"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="7401ed61-874c-4102-af5a-fbed311e7f45"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="1e97d86d-4932-4470-bc7c-21056accb054"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="377a0c54-5ba3-4db1-ab83-3368d0e82bc6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="6bec175c-16f1-4ff9-88b9-bce16b5f7307"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="65445c20-6c9e-4697-984e-b5e5652097d6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="ce25401f-90d4-4dea-831a-05e2b1205cec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="e1a11662-50d0-442f-8ab4-3d58e7d83585"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="7fb7be0f-c83c-405b-9e63-9ee0c4513ee8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="06542272-8df8-4cb7-816e-b89ec4eded4e" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="b96f9ab3-dc1a-4341-8116-1fdf2b09dc1c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="c83faa44-bc27-4ce5-a8c9-0f39447cba96"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as CONTENT PROVIDER" id="0f857cf6-9ecf-444d-8290-027e228378eb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="87d5f0cc-36e5-4e1e-a71e-d6d9bd12aa33"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>CON</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_032850</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65E52E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65F12E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbbcuI4EP0VyvOYMrKNHYIrUAUBZpz7hGRmdl62hNyAgi0ZSXZIvn4lAx4gJMvuk6vbre7TFx31ucRp4oVdKUEoylltmSZMhqW2beWChRxLKkOGU5ChIuGoe3MdenUnxJsjVi3qt62/mwS7geu69rg5mdh+7LfssYdbNm5itwVnjWYrJtpUyhwiJhVmqm15jhvYjm+7p49OM/TOwuCs7jf931btBwipfWuTumOtQS1l25oplYUIvby81F8adS6myHMcF/26uR6RGaTY6pyvMioDic7antRjIJAkpE54is7Rjs15LMMRnTKscgHrWPFHsRzktJC2iSWdfrGqsxBHbMJL8QIzzijBCX3Dpj43oGY8rnWTKRdUzdIPk3Ad49iGJbGJ67MvFtqFdqSjHYRCYlvOsLv29QATEMAI1J4eorb15biulUcfBWZywkUqd8X/hgdYAQnPILblJq01tOMdHqhU5xxIGDGS5JIWcGuGNcME5LqbQI53VbsXMKHLayr1gC6lQYe24e2Jq2r06RSk+j8N2mrOyskPnOTQCTIvnUQnb2eXr4HjnhDJ757hLvl1e3XTLgFsG5eKqrUrcW8oqyFanZjfXz05T8/f8fwrXZws5OXT4LJozkfjn4vh8PLt4i37VZxmvaj79faRop93vLg/nbZGg14rYqddLtwoYNfoCaQ4uwf5c3kyl14yH/d+iEDkc+fm97A5FhL1lnz+NhBO8L0YfkNX/TvUpOPn56e++JYX46+9fPG9S2C2yBe9tEghF/wikkPZv43S1ohMF82/FrJdpbOFf1e3ufOjfPwMRG1EMwZRvzbUXcLqczIzGhrbk9I0zAz5SAVMWR1zynBHmGu6o3Goe7iS3Ua/4Xe7g9Ng6HgDtzdwgoYTtFru0Ok2h71gQzIrFHsQLzibUBPLUO5qbD4HSNJQAotB2AXPNdNJ6xOPfaxwLWIP+hJwJuGRa3p2p/mz1yCNwpevzKV8NnvxWo3sNbFqt1zdsTvRnSgQO5zsOjuc/ACEZhQMcZu5lnqwpdK1WOAiV4lbL3CdQa6pXRiWDT3/LECSplkCBilKeZwnUM9mWVkZJFdfz8ZEltqHwWN52z7Ma//fpgTaJqbGQJpceqDbCAceF3+TyMcJN7YT3rjv5jE1F0vXUwlKVkh2f/0ZEzMf1Yz0r7uj+w3oyva4s7oa70+iTxCh/WJUgeKCboXdvNv6BdCc0dm0coHd+qKeF0Veds/3G0ho98iUBzkeGgHJNau9PvI5MFR5QUc9IRXwveCVfhdirmZspLCCVE9brRSP2BlGIM3OEOlrsjx2IdkJqUunYKkO6S4Sve8YxJ+uRCQkxk6r7/XnhYv4T8cO+NqKo/PUK4OibGok83y8fjAXhGu3VBMfF9vODzk4FHxXWRW5wqL0QI1zBR//qRlGa1uYEJ4zFfWtUrHNsiVO9ZpB+MfonZuSyKvNjv77amfTcgQI6H1Q0tK/eaBDcwXYdIup10EPk/XA/4ysd9F13qnfa7bqtD/jnX8A</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FF637318F9D949529A402157FE6CA4CA</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE662E2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D34AAE65F02E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D34AAE65E42E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FF637318F9D949529A402157FE6CA4CA</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65F02E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65E42E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE65EC2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D34AAE65EC2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D34AAE662E2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00106 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with CONTENT PROVIDER CS - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9e20e541-9f8b-4db7-9a92-219fe4e5ceb0"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="db7e238d-6afe-471f-bc75-e17ac5915219"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","1");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdCONCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdCONCS")+";");






</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="ce5610e1-e6aa-4280-89c6-d4752096423b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="8117bc27-1c93-4b7c-966a-75748ec1efb1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="5984bab3-917d-4a23-ae57-d1bb1b4243c7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="95d45378-d7ac-4487-90fd-efa46e307cb4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="d5462852-7599-47c6-a52c-058d62db2449"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="379dd190-7c78-4a7d-b347-66ad85e6f236"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="473b2df7-6a8a-439e-8aa6-d5bfab6b9f97"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="2a9482c0-ac51-426f-a5a3-f3a8ad0a0b4b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="679aac3c-0392-4c92-8b2d-10f58725eb0c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="7d86fbdd-10c1-494a-8fdf-2c6a7d1499ac" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="22d27c7a-3c96-4278-942b-7097b6ae0b93"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="df8ccd99-26ac-4d58-a51b-9d836c3066e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as CONTENT PROVIDER CS" id="a9ca2adc-2b27-450a-ba22-905c36f6dee7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="ff03d1ba-d1b5-4d7c-bf26-1f8281a3c982"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>userrowoid</con:name><con:value>96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>useroid</con:name><con:value>1475D4D36CD943E0E05307991F0A3EF6</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_031043</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:5C3F1AB4703543B1999C821E1A617A24</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>5C3F1AB4703543B1999C821E1A617A24</con:value></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:14760516BE0D582AE05307991F0A1433</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>14760516BE0D582AE05307991F0A1433</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value>urn:dece:rightslockerid:org:dece:1475E7FAB0942CC5E05307991F0A2F80</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>1475E7FAB0942CC5E05307991F0A2F80</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:1475D4D36CD843E0E05307991F0A3EF6</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>1475D4D36CD843E0E05307991F0A3EF6</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:1475E7FAB08C2CC5E05307991F0A2F80</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>1475E7FAB08C2CC5E05307991F0A2F80</con:value></con:property><con:property><con:name>assertid</con:name><con:value/></con:property><con:property><con:name>assert</con:name><con:value>nVbbcuI4EP0VyvOYMpaNCcYVqCIYdsiQSQLkMnnZUuQGK2PLRpK55OtXMuABcll2n1zdbnWfvuioLwROYsfvCAFc0pRVVknMhF9oW0bOmZ9iQYXPcALCl8Qfd66HvlNFPt4dMSqDoGX83XDqXqOBa2YdATJdr+6YTdeems1piJF3Dp6HPGUqRA4DJiRmsmU4yK6byDUdd4Kafq3hu6jacOvPRuUBuFC+lUkVGVtQK9EyIikz37KWy2V1WaumfGY5CNnW0/VwTCJIsNG+2GRUBOLtrT2phkAgjkmVpIl1YR3YXITCH9MZwzLnsI0VfhYLWahpKZtQ0Nk3ozwL4YBN00LsYpYySnBM37CuzzXIKA0rnXiWciqj5NMkbKQdm7AiJrFd9s2wDqGd6OgAIRfYFBG2t75GMAUOjEDlfjRoGd9O61pxdMIxE9OUJ+JQ/G94gC0gTjMITbFLawvtdIcfVKp9AcQfMBLngi7gpx7WDBMQ224COd1V5ZbDlK6GVKgBXQmNztqHdyRuqhHQGQj5fxq015yNkwcc59CWTmSdBUN6sxR33GqI+nhNlz8mv5sPv1sFgH3jQlG2diMeDWU5RJsTvfQ8f729ejq3u09ByF6n3qU7w6v53fez1VMvoBP75oXfR5e3d6TLB/b3Z/nX1axH4NHznGB+lnTTX2+X1z9V/c7W92f1DI363nw0RL+sRy4eM5LzCKJfw7f6cOKGd3QW4vsFzsgAjfD12htlo6u3hZzPev2nm8fOo9uZzN3+Td61naj/9PzQeL3Kmv0fr8/P3VvRKtPZw3+o2935cf7yCkTuRD0Gg6DSV13C8msy0xoamtPC1M80+QgJTBptfUpzh58ruqOhr3q4kW23UQ/coHbeDTy31kM9VK+hRrNp91Gn1uuf70hmg+IIYjdlU6pjacrdjM3XAEniC2AhcHOR5orphPGFxwBLXBmwkboEKRMwSRU9NxtRY53UMsbOkf2y4FDjMRELMjMqP1N5w254ZyqBH3Cy7Rxw8ggIzSho4tZzLdRgC6lqMceLXMZ2dYGrDHJF7VyzrO8oNrEETbIYNFIrScM8hmoWZUVlLLH5OiYmotCOepPitn2a1/G/XQmUTUi1gdC5XIJqI3zwuNR2iXyecH0/4Z37Th5SfbFUPSWnZIPk8NefMdHzUc5IMOyMb3egS9vTzqpqvD9pfYHIOi5GGShc0L2wu3dbvQCKM9q7Vs6xXZ1X88UiL7rnujWLK/eWLo+FHGsM6lZTuZ6kv4FZpRfrpCekBH4UvNQfQsxlxMYSS0jUtFUK8YSdYQxC7wwDdU1Wpy4kByFV6SSs5Ee6bqz2HY34y5WI+ETbKfWt+ixTHv7p2Ae+9uKoPNXKICmbaUk/H+tP5oKkyi1VxJfyfecfOfgo+KGyLHKJRaqBesklfP6nohmtZWBC0pzJQWAUin2WLXDKdQb+H6N3bgoiLzc7+u+rnUmLESCg9kFBC//6gfb1FWCzPabeBj0m616j37lEXtfpduv7ZO30PVQW5QBd+536vWavTscz3v4H</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>1475E7FAB08D2CC5E05307991F0A2F80</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00107 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with DSP - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0a1a0c57-f6e3-463a-ae6f-3105e2bfdf7c"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="110b480e-f0e6-4a91-b91c-c8cb8a0d76d5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","1");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdDSP"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDSP")+";");






</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="cc7a88f4-b34e-4dd7-a75e-302dd0679442"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="b511758b-66c9-43ac-bc20-79e3859720c1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="eaf9264b-4cc5-49d1-a69a-8e3a72904420"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="85a75835-3a45-4d8f-919c-53c3ed46f86e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="04210d6a-c9c6-4fc5-a164-39e6493eb188"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="0c224c90-cc80-494b-8dbe-baf5acae54e9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="c8a28b68-24e9-405f-9548-d505dde4494d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="900313af-7e44-43f3-a235-e51dfc7c5779"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="55ff682d-bc0b-4c53-95b2-8e360e3a9f6a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="31075ae7-6510-4ad6-bc2d-8d53816f210b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="4004467e-4892-4b34-9440-cab34283a55c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="07470a55-3cfa-4791-a15a-d65ed42bc5ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DSP" id="2d9fc792-0479-4f74-b45c-9780b04b3562"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="cf990f2d-07f0-4fce-9cf0-7daecaca7909"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DSP</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_032921</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D318B71A391CC6E05305991F0A0258</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE66982E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbbbuo6EP0VlD5WITcuISpItNAeuiltgV52X44cexLcJg6NnUD79dsOkAK9HM6WkJAn45k1M8vLPuEojmyvyzmkgiassowjxr3C2taylHkJ4pR7DMXAPYG9Sfdq6NlV00ObLVpl0Gtr/9ZcN6jXTKz7fsvRa7iBdRcTR7drvhOQZgt8HEhXzjMYMC4QE23NNq26btZ0qzE1m57dkr+q7TaftMo9pFzGli5VU1uDWvK2NhNi7hnGYrGoLpxqkoaGbZqW8Xg1nOAZxEjrnKwqKhKlnbU/rhLAEEW4ipPYODF2fE4I9yY0ZEhkKaxzke9ymYbZMqQP4TQ80sq9QAYsSIrlGWIJoxhF9B2p/lyBmCWk0o3CJKViFn9bhGWqwDossY6tGjvSjF1oBwbaQZhypPMZstaxxhBACgxD5W48aGtHh02t2DpNEeNBksZ8d/n/8ADLIUrmQHS+KWsN7fCAX3SqcwLYGzAcZZzmMFJknSMMfD1NwIeHqtykENDlkHJJ0CVX6IxteHvLVTd6NAQu/mZAW8NZBblHUQad9yd0e2xcjmq3gRPIYnrk+B7/9sM3CNsFgG3nwlCOdrXcI2VJotWOnvSOby8eZmneXCLihARGz627p9k5Gs/PbX9pvIxeQ5j6pFs/nV4mkes8PveTS7eVjtHQun2qLxrMfPQHo4eR6GfXY9abHv9z8WCIKzN8HMhsg9gfRnkOJpoGV07NeVi+4ov5+Mq99W/9CfllOo8Ukbvm87t72Zj6w2fnOGulyRCf/Rof3+XxIo2fJsHvsN8uy9nCv2vbnPlJ5j8DFpulosGgVzmXU0LiZzFTFkr0oHD15kp8uAAmtI7apbTDy6TcUeLJGa7WltNzat1uv9FoNe2+ddo3645Zb7Wsc7PbPD+tb0RmhWIP4lnCAqpyKcld0eZngDj2ODACqZ4nmVQ6rv0QsYcEqgzYWPImYRymiZRnki84wnbDrYf1JpnhMH+2Xhq2VO9RIq7ZddoNBKQ7kmyZO5I8BkznFJRuK1pzyWsuZCteUZ6JyKrmqMogk8qeKpH17JpbNziN5xEooEackCyC6nw2Lxpj8NW/rSPMC+u4Py0O27dl7X/bdED6EKocuKrlFOQU4Yu7xdoU8n3BznbBm/DdjFB1rmQ7RUrxCsnupw+WKHqUFOkNu5ObDejS98C9f71T9vHzTuOHWoz9NpaJSE630m4ufHl1SPnobEjwiqzqazXL86yYe63mGKkMb6jGGqZtTABnUg7fpskLMKOMYhx095TA95KX9l2ImZixiUACYsnTSrE84LExAa4eGwN5vpaHvmR2UsrWCViKr2xnkXwoKcQ/vqWwh5WfNN/Iv0WSko+JfRFrK4+sU741BGWhWql75+0bXuBEhqVSMZN0O/hXAb5Kvmssm1xiEZJQfibg+y8VJYVtDWGcZEwMelph2JbnAqd4m4P34fQpTHEDlE9C+t9vQp0WFMAgH5KcFvHVze6pI8DCLYlfJ91Xecs9bVpdx7XOzhrbKm/adbdsyg66zifzZ8tWn/Y53vkD</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5792DCBB4E0847B6A265815EEEF93D7C</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE66A72E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D34AAE66972E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D318B71A381CC6E05305991F0A0258</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:5792DCBB4E0847B6A265815EEEF93D7C</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE66972E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D318B71A381CC6E05305991F0A0258</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D318B71A401CC6E05305991F0A0258</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D318B71A401CC6E05305991F0A0258</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D34AAE66A72E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00108 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with DSP CS - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="1b7e3fa3-7bd2-462a-b9f0-cc1d16509f2d"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="fd1e3eda-19ad-4c68-a2c2-69274393718d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","1");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdDSPCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDSPCS")+";");






</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="14a67900-a7d4-4b71-95c5-e85be2793334"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="a1e61b62-9089-4035-bdbc-55e6c8a16a6a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="e2401afe-bd69-4e26-9e56-c34284573ff8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="b6085336-e271-48ae-8b9a-7abe7d00cd42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="712f1e65-6fce-460b-9abb-fddfe4bfc746"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="758096e5-2cb8-43e3-95d6-690d45eb2b0b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="2520dcd4-44a8-452a-b318-b790a2749409"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="78180112-77a7-4cc0-8fdb-72f237253bfe"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="9acefc86-a2d3-4898-826f-fa9126eeee1b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="3c832f35-3129-4637-896b-bb2517959d9c" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="a37fdb32-b9ac-4357-915f-631ec9afd3c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="8e254cde-5593-4718-80af-9de95a9e636d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DSP CS" id="839c173c-ca96-4308-a2d6-44ca094f4d1a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="62b7b83d-7fe5-478e-99d0-6aeb0a3ff029"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_032937</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE66CD2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D318B71A861CC6E05305991F0A0258</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbZcuI6EP0VyvN4y3jBZnEFqgyEDAlJCGSbvEwpchtrYsuOJBsyX38lAx4gy+XOk6vbre7Ti476hKMktj2fc2CCpLS2SmLKvVLb1XJGvRRxwj2KEuCewN7cv5x4dt300PaIVhsPu9pPF1pBJ3Q7etNtmLqDnI7+3LZdHSPctJuu2QDbkqac5zCmXCAqupptWq5uOrrVvDVbnt3xHLfeMs0nrXYPjEvf0qRuahtQK97VIiEyzzCWy2V92ainbGHYpmkZj5eTOY4gQVrvZJ1RGYj1Nva4HgCGOMZ1nCbGibFncxJwb04WFImcwSZW8Fks0zA7hrQJOFl806qzEIxpmJbiANGUEoxi8hup+lyCiNKg5seLlBERJZ8mYZnKsQ4rrGPLod80Yx/akY72EDKOdB4ha+NrBiEwoBhqd7NxV/t2XNfKo7cMUR6mLOH74v/DA7SAOM0g0Pk2rQ204x1+UKneCWBvTHGcc1LAlRrWDGHgm24CPt5VbcogJKsJ4XJAV1yhM3bhHYjragzJArj4mwbtNGft5B7FOfTuxy/O/DFhxUWcNEPzIbyYfrfa987i1OmWAHaNS0XV2rV4MJTVEK1PjJyzc8e+ii6w83Bz85Q8WEbQ70zyXz9m339PneGKDdyn9v31+cuY3Fk39tx5QFkUnL02f0dn5y0+mlHj8pZa19+56Rj2eXGGsWnj53MaNf4ZFS+QuWc39z/gqhkmfboUs+UkQgs6jR6nrUEr+XX3dLNIfoxORceIIvTamrKEnrF+6E/YKp6tcvIQuEbsNyHyu1U6O/j3dds7P8+ffwEWW1GNwXhYG8kuIfE1mSkNCfSwNPUyRT5cABVaT51S3OHlku5I4MkermWrMWxY7X7L8tuuNRg0T015g9xOxxqZvmm77S3JrFEcQBykNCQqlqLc9dh8DRAnHgcaANOLNJdMx7UvPA6RQLUxnclLkFIOt6mk53RpFm4rQILljsXfMnOxCGnGC6bVrlJxTa+ZHwpge5xsmXucPANMMgKKuNVccznYXMhavKIiF7FVL1CdQi6pnSmW9Wyn7RqcJFkMCqmRpEEeQz2LsrIyBl9/bR1hXmpnp7flbfs0r8N/2xJIm4AoA65y6YNsI3zwuDS2iXyecGM34a17Pw+IuliynoIRvEay/+vPmKj5qGZkOPHn0y3oyvbIs/Ppz8H8p/WXx2Ux3580vkjIOKxlFSgoyE7Y7bMvHxBJOb3tJLwiq/5az4siL5vvOA2DSfeGqq5h2sYccC5J8e02fQFqVF6Mo16gCvhB8Eq/DzEXEZ0LJCCRw1orxSNWjjlwtXKM5S1bHbvP7IWUpROwEh/pBrFclxTiLzcq7GFlJ9VT+VmmLPjTsQ987cSRecqNQxC6UJJ6fd4+mQucSrdE8mbKdp1/5OCj4PvKqsgVFiEH6jkX8PmfmiLEroYwTnMqxkOtVOySdIlTvGXg/TF656Z8B6rFkPz3ZqiTcgQwyHWSk9K/et89dQXoYofoN0EPud7x/dNmczCwT63+Lte3Rn23Ksoeut479XvNTp0OZ7z3Lw==</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AB83256D4C5F43F990CA95B341770CC0</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D318B71A951CC6E05305991F0A0258</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D318B71A851CC6E05305991F0A0258</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D34AAE66CC2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:AB83256D4C5F43F990CA95B341770CC0</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D318B71A851CC6E05305991F0A0258</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE66CC2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE66D42E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D34AAE66D42E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D318B71A951CC6E05305991F0A0258</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00109 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with DECE CS - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="be4de5bc-c298-4498-838b-5df1bf09c9eb"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="6a63e37b-cf4d-4c4e-8f2e-7e6b13e29fe4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","2");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";");

tP.setPropertyValue("nodeoid20",tP.getPropertyValue("nodeIdDECECS"));
tP.setPropertyValue("audiencelist2","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDECECS"));




</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="2fec2418-6845-4a57-9c69-efdf6cd86ce4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="f6328b9e-de39-467d-a77d-5bc1474871dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="5b5848cd-cb0d-49e5-8cdd-8557691e275d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="59bb1b16-0a4c-4df7-9087-27668041e703"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="e1c40177-82a1-487d-8328-93823ecd10c2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="b8049f90-e9a5-4d67-9b9f-d76ea3cc17b1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="62c43d0f-6eb2-4b9c-8af7-8f2793eca184"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop if necessary" id="90fd7bf0-f21b-409b-9eeb-0f019cd9cc7d"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunner;
import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunContext;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int loopuntil = tP.getPropertyValue("loop").toInteger();
int counter   = tP.getPropertyValue("Count").toInteger();


if (counter &lt; loopuntil) {
	counter++;
    tP.setPropertyValue("Count",counter.toString());
    log.info "==========================================================";
    testRunner.gotoStepByName("Set NodeID and counter");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="ccc11e8e-6d4a-4ec4-86c1-802f552a574f"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="2aa2b64f-a32a-4231-97bf-1ec0c54369c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="dae1d96b-2eac-49fa-9cf5-abe69df49499" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="ce5afec3-28fd-466a-b23a-15c80f8802fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="2399d1fd-7e2e-4380-991c-3cc992f0c464"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DECE CS" id="f7ed05c7-8dfc-4824-bccc-1067145cb368"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid20").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="4b7634d0-9c80-4950-8cc5-cde3e2b21b75"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_032952</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE671E2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D353F90D234378E05307991F0AAAF5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdb+o4EP0rKPdxFfJNICpIKZSWCkpvya3avqyMM4BL4qSxk0J//doBcgm37bL7FHkynjkzc3zsC4biyPR8xiDjJKGNTRxR5pXWrpJn1EsQI8yjKAbmcezN/MnYM5u6hw5blMZo0FX+Dlumg0wTqwsXW6qN2pY6R05b7Rg61h2903L1uXBlLIcRZRxR3lVM3XBU3VaNVqC7nqV7ervp2uaL0niEjInYwqWpK3tQG9ZVVpynnqa9v783361mki01U9cN7WkynuEVxEjpXewqKhNlvb0/boaAIYpwEyexdqHVfC5C5s3IkiKeZ7DPFX6VS9f0jiZ8QkaWP5RqL4QjukjKZR/RhBKMIvKBZH8mwFdJ2PCjZZIRvoq/LMLQZWAVNljFhk1/KFod2pmBaggzhlS2QsY+1gMsIAOKofHrYdRVfpw3tXJrkCHKFkkWs/ryv+EBWkCUpBCq7FDWHtr5AT/pVO8CsDeiOMoZKeBOkjVFGNh+moDPD9W4z2BBNmPCBEE3TKLTjuGdLHfdGJAlMP5/BnQ0nF2QRxTl0AsLwx5p7rbNUgvc8dXty8127WQdtra7JYBj59JQjXa3PCFlRaLdjqDz1Bo/vg2zdjzlQJxHI/CN9Ru9uWs7Hy9kevNIoXh6vmvjn7q7xp2ncTB1bjezNXb+mt73b6LnzWvR/3kZrl+zIRpSU7ve3j/QfkAu18+TeTGd367u7lrhmhWaH+Qvk4fC/cjZ6+z6pt2f2NH1DUfXCXuLfhnFYnF5HSSv43zqBpPg0UqxFeYvo8BctjQyWnerco7w122HMz/L56+A+WEpaTAaNIZiSoh/L2bSQkJ1Ubp6qRQfxoFypSd3Se3wciF3JPTEDHdrwxpYjjXs6ANjaFtu+0p3LN3tdIyh7vv+0DmIzA7FCcR+QhdE5pKSu6PN9wBx7DGgIWRqkeRC6ZjyTcQB4qgxog/iECSUQZAIeTay1E63r2Seo0VuICtcvH+EBsdRrDTuEj6l08xfcMhqomzoNVF+AExSAlK5JbGZYDbjohlvqMh5ZDQL1KSQC23PpMx6pt12NEbiNAIJVYuTMI+gma7SsjUa231NFWFWWsu+4t2R+7K403+HPgifkEgHJuu5BDFLOL1hzI7nHIr5omj35CY6hPfzkMjTJZrKM4J3SOq/fnNFkqQiyr6qA+zK+9RQi6ydFlUlCwuCK8ZX97aQcyEAvcNY3pDRfGvmRZGXk7BtS8tEeE2WqemmNgOcC4naBskaqFZF0c66DyrgJ8krex1izld0xhGHWDCnUS7PeADMgMkHwEhwfnPu66KWUrSOw4Z/ZutH4vEiEX/7vsEeln7CfC8+70kW/p7YJ7GO8og6xf3PCV3KlbwLtl9wAyciLBEqlmTHwT8L8FnyurFqcoWFC0LNcw5f/2lIeeoqCOMkp3w0UErDsWSWOPk2Be+30x9hSlWunmnk399pKikpgEE87hgp48vb1pNHgC6PZHef9FR5bd+/armGb14Zl6XyOjvldYeXlfLW0fX+MP9pOerTKcd7/wA=</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CD6B100DA32249E2BF93C2D5A98F2394</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE67312E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D353F90D1F4378E05307991F0AAAF5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D34AAE671A2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:CD6B100DA32249E2BF93C2D5A98F2394</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D353F90D1F4378E05307991F0AAAF5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE671A2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE67252E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D34AAE67252E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D34AAE67312E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c6921f81-e23d-41a9-b306-5ac057c38252</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00110 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with ACCESSPORTAL - 403 Forbidden" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="04a05fd4-43a6-4319-93a2-d150ddebdd00"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="63f4b61c-dafc-44ea-adb3-8869594d4fbd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","1");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdAccportal"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdAccportal")+";");






</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="edb3f18a-909b-4e6b-8711-481f120867f3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="707fb8a2-12a4-4617-88ad-5002d196ce06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="f764b17b-3b62-4d77-ab03-b6b68939f4f8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="69fdd252-0d8a-45e4-a297-ec6247afc421"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="2585d351-ae12-4c21-bc60-842411363fc8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="a7bbb6b7-f568-4a0f-95f1-4832e0f16052"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="793309a7-0914-44aa-bc3a-ae16f3ab9025"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="c0cc1a20-5125-4304-9f11-327f7341f6bc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="2c6ab305-9420-4d85-9d4b-815c255d7e8e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="3ed12574-e34f-47ff-b8f1-5f2f00c1a6c8" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="43f2e7a9-cae5-40bd-8e62-a61a414c6deb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7294b39b-537b-4666-82bd-64b174177e25"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as ACCESSPORTAL" id="77dd4d5f-c7bc-4199-91e8-eaa6eee30a89"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="e8b248af-fd4e-4e97-8289-ee02db54b862"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_033018</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D351A0DC6C3A10E05307991F0AB9EF</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE67462E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZZc+I4EP4rlOcxZXxyuQJVBpMJtZADQ7I7L1uK3AYltmwsmevXj2TAAXIsO0+ubre6vz70qa8ZiiPTcRmDjJOEVtZxRJlTaNtKnlEnQYwwh6IYmMOx47ujoWNWdQcdjiiVgddW/g2h2UCGDSo2gpZqNzGozVazplp2q9GwQmi81F+EKWM5DCjjiPK2YupGTdVt1ahP9IZj6Y5Zr7aa+i+l8gQZE76FSVVX9qDWrK3MOU8dTVutVtWVVU2ymWbquqH9PRr6eA4xUjrXu4yKQFlnb4+rAWCIIlzFSaxdayc21wFzfDKjiOcZ7GMFX8XSNb2lCZuAkdkPpTwLwYCGSSH2EE0owSgiWyTrMwI+T4KKG82SjPB5/GUShi4dq7DGooY2/aFop9AudHSCMGNIZXNk7H2NIYQMKIbKdDxoKz8u61pxdJIhysIki9mp+P/wAF1ClKQQqOyQ1h7a5Q4/qVTnGrAzoDjKGVnCnRzWFGFg+24CvtxV5SGDkKyHhIkBXTOJTjuGdybuquGRGTD+Jw06as7OyROKcuiEL+Rhi7zJZF7f/vNojp+mCJlMewvwtF0AODYuFGVrd+LZUJZDtDsxtc3naAOpTvgo8eOuO2pukJGaqyezdbPlLPLceNnd1EbPOn1mUz3ybu9qb92u1/jFX35OHs2l1mD5LTe6+S15fB359iwcrsbjq/Hs3h7T9YJMw+XrJrTrj3c9v7m8crVGuh4+RrnpeZu3Zm+ebvBD0+323NETYsO/4q3n9RPLnr5uV4vepn6V/fQefXCtVbtM5wj/qe5w5/385RUwP4hyDAZe5UZ0CfHvyUxqSKCGhamTSvJhHChXOvKU5A4nF3RHAkf0cCcblmfZrtuvN+ya2Te6fb1m6bVWy7jR3cZNt3YgmR2KM4i9hIZExpKUuxub7wHi2GFAA8jUZZILpmPKNx49xFFlQMfiEiSUwSQR9GwbtAEWqdtGUDdyWJBwtt6gbJErlbuE39P7zA05ZCecbOgnnDwGTFICkrjlXDMx2IyLWizQMueRUV2iKoVcUHsmWdYx7WZNYyROI5BItTgJ8giq6TwtKqOx3ddUEWaFdtyfFLfty7zO/x1KIGwCIg2YzKULoo3wyeNiHBL5OmHrOOGDezcPiLxYop48I3iH5PTX+5jI+ShnxO31+r5/QF0aX3bYG7r+wx+eFaX8eFL7Jh3tvJJloGBJjsIeHn3xfAjC6RzmYIGM6qKaL5d50XrbtrRMuNdkbTXd1HzAuaDEzSR5A6qVXrSL3p8S+FnwUn8KMedz6nPEIRajWinECxYOH5hcOAbijq0v3WZOQorScVjzz3S9SCxLEvG3+xR2sLQT6gfxWSVZ8N6xT3wdxRF5in2DEzqTknx7Nl/MBU6EWyJYM8mOnX/m4LPgp8qyyCUWLgbqJefw9Z+KpMO2gjBOcsoHnlIojim6wMk3KTjvRh/cFK9AuRaS/94LVVKMAAaxTDJS+JevuyOvAJ0d0fw+6DnT1wxX93r1ruUaesH0jR3Td1v9m7IoJ+g6H9QfNUd1Op/xzm8=</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">49DDBA9BB0A849139BB5380C19A1228F</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D366A9AC343445E05305991F0A3CDF</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D34AAE67452E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D351A0DC6B3A10E05307991F0AB9EF</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:49DDBA9BB0A849139BB5380C19A1228F</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE67452E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D351A0DC6B3A10E05307991F0AB9EF</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D351A0DC733A10E05307991F0AB9EF</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D351A0DC733A10E05307991F0AB9EF</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D366A9AC343445E05305991F0A3CDF</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00111 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with ACCESSPORTAL_CS - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="69db2067-3cd9-44a5-becd-0a9d01b84623"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="017e23bc-e258-4a3a-b090-3364da868955"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","1");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdAccportalCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdAccportalCS")+";");






</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="5aab8eab-791b-4b7a-afb6-6a493e5294e7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="fae41388-ea8f-48ac-b0bb-f7812e2ab535"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="e5e522b1-d46f-4918-b908-18d214ad1121"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="e0747537-9553-492d-8569-49f11154d491"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="7b6018fa-fb9d-4dfc-b42d-fc6c4f6a9a86"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="425ab648-cc16-499c-8e3f-bf3fa448313a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="0aaced87-cf3d-4e14-80b8-63af473048b9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="021a6e3a-3274-4397-8ef4-4702265ffe99"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="efc8b56f-a809-4e82-a14c-016e35173f2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9b3f3b0b-a447-44de-bc39-7b6849252d0b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="10121f2f-190b-421e-bb52-d6e74ff2a94d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="ae211ed4-1fd5-4dd9-8dee-49baf1296076"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as ACCESSPORTAL_CS" id="36636af2-f46c-4c39-ae7e-fe62fdc9cc16"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="4cb9309f-39fc-48fb-84c9-bb9aec53e596"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_033036</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D318B71B581CC6E05305991F0A0258</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE675A2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbZcuI6EP0VyvOYMl6wWVyBKtYMM2wBJkPm5ZaQ2yCwZbBklnz9lQw4QEIud55c3W51n1501I8MBb7pVBmDiJOQZnaBT5mTaMtKHFEnRIwwh6IAmMOxM6p2O46Z1R10OqJk2o2y8o9b8EpF1y2ploVt1ZqaljrVc5aa86Z5TzctO58vCVPGYmhTxhHlZcXUDVvVLdXIj/WCk9Mdy8oaheIfJfMCERO+hUlWV46gdqyszDlfOZq23W6z21w2jGaaqeuGNul2RngOAVIqj4eMkkBR5WiPsy5g8H2cxWGgPWoXNo8uc0ZkRhGPIzjGcm/F0jW9pAkbl5HZNyU9C26bemEi1hENKcHIJ29I1qcLfB66mao/CyPC58HNJAxdOlZhh1VsWPSbol1Cu9PRBcKIIZXNkXH0NQQPIqAYMr+G7bLy7b6uJUfHEaLMC6OAXYr/Dw/QDfjhClyVndI6Qrvf4SeVqjwCdtoU+zEjG+jJYV0hDOzYTcD3u8oMIvDIrkOYGNAdk+i0c3hX4qEaDTIDxv+mQWfNOTh5QX4Mle/R5Om139ksR/tab+cvt5bZ8Wqz9VNjWU4AnBsnirS1B/FqKNMhOpyY9qPZL9Rg3qK1nuyfoc6M3fdC352M25236bz5gsa9fbc3wCGvP7+9deaTsO0/46bJvc3Q+4203fRnp1MaDlymkQ22J93W6/ItF8+ecr3VrOZuVn8e9N9eqc88bk+H08EP+tAD4i2W3dXkIYpe0bihF91BezxwC6PFePqydeutSavnGTMSPO30TrPUe12YPzq4nKZzhv9Sd7rzo3i6AMxPohyDdiPTEl1C/Gsykxriql5i6qwk+TAOlCsVeUpyhxMLuiOuI3p4kI1cI2dVq818wS6ZTaPW1O2cbpdKRkuvFlo1+0QyBxRXEOsh9YiMJSn3MDZfA8SBw4C6EKmbMBZMx5QvPDYQR5k2HYpLEFIG41DQszFnobEsTv2tby/WWI/NxSIPQZEpmV7I+7QfVT0O0QUnG/oFJw8BkxUBSdxyrpkYbMZFLdZoE3PfyG5QlkIsqD2SLOuYVtHWGAlWPkikWhC6sQ/Z1XyVVEZjh6+pIswS7bA5Tm7bzbyu/51KIGxcIg2YzKUGoo3wyeOSOyVyO+HcecIn99XYJfJiiXryiOADkstf72Mi5yOdkWq93hzVRyfYqfV9pxud6mjwl2dFLT+e1L7IR7suZRrI3ZCzsKdXX7wfgnEqp0FYIyO7zsabTZz03rJyWiTca7K4mm5qI8Cx4MT9OFwC1VIv2l0PUAr8Kniqv4QY8zkdccQhELOaScQ7No4RMLlxtMUl2927zlyEFKXjsOOf6eq+2JYk4i8XKuxgaSfUA/HZhpH73rFPfJ3FEXmKhYMTOpOSfHz2N+YCh8ItEbQZRufOP3PwWfBLZVrkFAsXAzWNOdz+k5F8WFYQxmFMebuhJIpzjk5w8v0KnHejD26SZyDdC8l/L4YqSUYAg9gmGUn8y+fdkVeAzs54/hj0muqNYq1g1OyCUa/nz6leN+1iWpQLdJUP6o+aszpdz3jlXw==</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">03AF3248B3CA49C4BE0790440DA19631</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE67692E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D34AAE67592E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D318B71B571CC6E05305991F0A0258</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:03AF3248B3CA49C4BE0790440DA19631</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE67592E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D318B71B571CC6E05305991F0A0258</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D318B71B5F1CC6E05305991F0A0258</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D318B71B5F1CC6E05305991F0A0258</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D34AAE67692E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00112 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with DEVICE - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="aa6a7f22-9746-4dab-9216-125a955f8b13"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="80cf660c-ec1b-400a-acc8-0697b84dfeb0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","1");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdDEV"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDEV")+";");






</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="a667e4ae-ee98-48f8-8d3e-ffb8f06847ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="88c35e3b-878f-475b-ae34-60a071322074"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="c67b2b37-9db3-4972-a745-bb7567cdad76"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="c32175af-88c6-4555-9403-aa0657aeff4a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="c09a646b-1bb2-4853-878b-7ca366b40b3f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="99144570-6289-489c-84b9-76536f7854a4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="ad34a5ec-7e06-4376-82fb-d99093d3fba5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="00caaddb-c9ad-4a22-94b8-b6a6fce32371"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="98f53ba6-18ed-4ce8-a389-52dbb2c2ce8b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="54b91449-b950-4bec-ae1b-411a8a80a271" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="fd5133b8-af0e-446a-99de-cbae35e38455"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="d6393706-32db-417b-87b5-b1d381b5d26c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DEVICE" id="dc09b4e2-511d-4240-86e4-0d6d3e765e51"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="1d3f75df-c0b6-41ea-9013-c828655f1d06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_033052</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FE1788F366FC477FA0AB3A53AE2217DA</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE677A2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FE1788F366FC477FA0AB3A53AE2217DA</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D34AAE677A2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00113 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with DEVICE_CS - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="954cab1e-d325-49bf-8cdd-8b25d25ef106"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="a9d62917-a8f3-4d9e-9e89-e50eb3d24426"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","1");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdDEVCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDEVCS")+";");






</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="46f625c7-ce21-436b-b117-36027fe4c521"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="ba81c25f-3061-4df3-bc41-0bf78fd813f8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="564913c9-c8b8-4f52-aab9-106d33b1add6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="ce2bdd65-74e8-4f8f-a367-2e1ff8d85c20"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="e58d0916-76ec-4319-ba50-2b0e2269f402"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="3e831f20-4fd7-455d-a1fe-90ca4ef947d8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="6c77427d-655e-4930-83f1-63abb5c6306f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="9cad7f8f-7232-4715-aea4-6388b5b292e2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="d4407b45-a343-4656-a318-88b9437582c6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="c5bb6a5a-715b-455b-a22e-0fa95215069a" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="ae33d6e6-cc45-40ac-b89e-2973bbc353a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="7f8a2911-943e-412c-8e62-61e710fcdef0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DEVICE_CS" id="4346876c-0311-410c-a0fd-f0f30b54567f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="4b499d64-7df1-4468-952f-9d228217481d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_033149</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE68832E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D366A9AE2E3445E05305991F0A3CDF</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbZcuI6EP0VyvOYMl7ZXIEqJ4YJZCHDkkzmZUrIDYixJWPJQPL1VzLgAbJc7n1ydbvVfXrRUV9yFEe253MOqSCMljZxRLmXa5tallKPIU64R1EM3BPYG/r3d55dNj20P6KVukFT+226k3q1Vrd10wxD3cXuRG/YjqOjsApOOK26NahJU84z6FIuEBVNzTatim66ulUdmTXPsbxKrVy13V9a6QlSLn1Lk7Kp7UBteFObC5F4hrFer8trp8zSmWGbpmX8vL8b4jnESGtdbjPKA6WtnT0uh4AhinAZs9i4NI5sLkPuDcmMIpGlsIsVfhbLNMyGIW1CTmbftOIshF06Zbl4jSijBKOIvCFVn3sQcxaW/GjGUiLm8adJWKZyrMMG69hy6TfNOIZ2pqMjhClHOp8ja+drAFNIgWIojQfdpvbtvK7lR0cponzK0pgfi/8ND9AVRCyBUOf7tHbQznf4QaVal4C9LsVRxskKHtSwJggD33UT8PmuSo8pTMnmjnA5oBuu0BmH8E7EbTUCMgMu/k+DDpqzdfKEogxasPgZZBfddbv/ElVu8Xj4tpr2hXtBV2YzB3BonCuK1m7Fk6Eshmh7Iukx93b6Ur+dIufa5jfjl9va0s1C5y3uVTFph9bNpsoM42b5HI/W/ib40Wg/x91q4zEYzxpJesMyazK/Gj6ntdrC6fXDtD/vu2Tmu98fesuOa12538fWqHYx/27+ChqCra4e05cRvejFPxaDxS96N+m4HA0HKwPquNN7wqS/6S5unsPB8/3P3vjPw+TttYJf4WXcLNI5wH+s29/5YTZZABZ7UY1BNyh1ZJeQ+JrMlIaE+jQ39RJFPlwAFVpLnVLc4WWS7kjoyR5uZcsJnGrVb/htO3Bct9I2K45ZaTSsjuk710FnTzJbFCcQrxmdEhVLUe52bL4GiGOPAw0h1Vcsk0zHtS88BkigUpcO5CVglMOISXq2zPo8WS4yuz6dJZbpmPht8gdvYmRrpQcm+rSf+lMB6REpW+YRKQ8Ak4SAYm412FxONheyGEu0ykRklVeoTCGT3J4qmvVst14xOImTCBRUI2ZhFkE5mSd5aQy+/do6wjzXDtqj/Lp9mtjpv30NpE1IlAFXuVyB7CN88Lq4+0Q+T9g5THjv3s9Com6WLKhICd4iOf71d07UgBRDErSffl8Pf1t73IX5mcfv/OHj/zwri/n+pPFFQsZpLYtA4YochN2/+/IFkZzT2k/CElnlZTlbrbK8+a7rGKl0b6jqGqZtDAFnkhVfR+wPUKPwYpz1BBXAT4IX+mOImZjToUACYjmspVw8Y+cYAlc7R1des825C81RSFk6ARvxke46kvuSQvzlSoU9rOyk+lF+1iwN/3bsA18HcWSecuUQhM6UpJ6f10/mAjPplkjiZOmh848cfBT8WFkUucAi5EBNMgGf/ykpRmxqCGOWUdENtFxxyNI5TvGagPfX6J2b/CEoNkPy76uhTvIRwCD3SU5y/+qB99QVoLMDpt8FPSV71/fb1XrdttvW1SHZ1zpXlaIoR+ha79TvNQd1Op3x1j8=</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7D5AC0D1594D48D493BCD2CF00F413A6</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D366A9AE3D3445E05305991F0A3CDF</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D366A9AE2D3445E05305991F0A3CDF</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D34AAE68822E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:7D5AC0D1594D48D493BCD2CF00F413A6</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D366A9AE2D3445E05305991F0A3CDF</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE68822E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE688A2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D34AAE688A2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D366A9AE3D3445E05305991F0A3CDF</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00114 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with DECE - 403 Forbidden_MIGRATED" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d781dd6a-3028-4578-8a24-7254aafc7bc1"><con:description> This test case will verify that the Application Tier properly responses to a /StreamListView invocation when the requesting node is a coordinator. </con:description><con:settings/><con:testStep type="groovy" name="Set Initial Values" id="eddd42f1-7a3d-4407-8a8d-afb0abd9332d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","1");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdDECE"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDECE")+";");




</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter" id="180b1aa8-173e-43b3-87ae-13b3774555fd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName" id="b573c5ef-cb41-47a7-88a4-1258dc4dd24c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" id="68936d50-d8f3-42e1-b8ca-01897000b54e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers" id="139b7ff6-c029-4ffc-9f1c-1e5555704923"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1" id="1b432b69-55ea-43ad-8a7c-c5c7cdbbd166"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1" id="aca38cd3-290b-400e-b9ff-adc4b386a4bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1" id="cf58dea0-e194-4cc3-9d29-123738c4ef5e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = true;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = true;

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

myTC.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent").disabled = false;
myTC.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent").disabled = false;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="ba5a9a61-b81e-4f86-803a-63c4113db3ce"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype","dlp");
tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid11").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertid",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("loopuntil","25");
tC.setPropertyValue("expectErrTypeSTS","SUCCESS");
tC.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
tC.setPropertyValue("expectErrTypeStreamRenew","API_NOT_AUTH");
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="17b73a15-dd01-4aa3-aa6f-47392b1753cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Remove account's stream handles" id="9c16894d-9f89-4c15-97d5-3ff58d5b7d94" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
a = new dbUtils.dbStreams(log,"LP1");
a.streamDeleteAccountOid(tC.getPropertyValue("accountoid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate" id="f2003138-3ef5-4e94-8ad4-aa1099f48ba0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("RightsTokenCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamCreate" id="61d2673a-f6ab-471b-98ff-62ab939a4120"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment as DECE" id="8c149dd6-48cf-4e9c-8a47-b7bb7ba19522"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid12").toString());
tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call StreamRenew" id="d932554e-362f-4206-bd50-10c7963b566e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("StreamRenew")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DECE</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_03325</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE68CF2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D366A9AE4D3445E05305991F0A3CDF</con:value></con:property><con:property><con:name>assertid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbZcuI6EP0VynlMGa8QcAWqWGc8SSYEE7K83FLkBjTYElgyOPn6KxlwgCyXO0+ubre6Ty866kuO4sj2WpxDIgijpSyOKPdybUNLE+oxxAn3KIqBewJ7Qevm2rPLpod2R7SS321o/7iWW7UcF+t2FWq6W70IdVSbgD4xay/2RdV2qlWQppyn4FMuEBUNzTatim66ulUdmReeY3uWXa5ZtWetNIaES9/SpGxqW1AZb2gzIRaeYazX6/LaKbNkatimaRmPN9cBnkGMtOblJqM8UNLc2uNyCBiiCJcxi41L48DmMuReQKYUiTSBbazwq1imYdYNaRNyMj3TirMQ+nTCcrGDKKMEo4i8IVWfGxAzFpZa0ZQlRMziL5OwTOVYhwzr2HLpmWYcQjvR0QHChCOdz5C19TWECSRAMZTuh35DOzuta/nRUYIon7Ak5ofi/8MDdAURW0Co811aW2inO/ykUs1LwJ5PcZRysoLfalgXCAPfdhPw6a5KgwQmJLsmXA5oxhU6Yx/ekbipRpdMgYu/adBeczZOxihKobluDZ7qK5+8Rcx467Gf9q0/qxkPYcb9Rg5g3zhXFK3diEdDWQzR5kTWz9ZZtVe/dR7XmP7sos7Dlf2Dkfg5qF4vf3Z+Zffj1/sfg2crfB5a7eese3tz/kSNwd2jwV6DQbiM70bj4Xm7n/WReJ3XY1yN69fzwXh5G1faickthud3T5PZauz7N/cvo8GCzNP1j+qv9RKcYdAOhjBiLwm/WqHZ/cvqz9XsGbrCtuwlHvZTKzh/+BWPK083tUaRzh7+Q93uzgfpyx/AYieqMfC7pb7sEhLfk5nSkFCf5KbeQpEPF0CF1lSnFHd4qaQ7EnqyhxvZcrrycrTqrZ7bcVy30jMrjlmp162+2XI63f6OZDYojiB2GJ0QFUtR7mZsvgeIY48DDSHRVyyVTMe1bzx2kUAlnw7lJWCUyzpLerbWwv0Tzdy5XX+zLEicbL6wTR6ziVb6zcQtvU1aEwHJASlb5gEpDwGTBQHF3GqwuZxsLmQxlmiVisgqr1CZQiq5PVE069lurWJwEi8iUFCNmIVpBOXFbJGXxuCbr60jzHPtsDfKr9uXiR3/29VA2oREGXCVSxtkH+GT18XcJfJ1ws5+wjv3rTQk6mbJgoqE4A2Sw1/vc6IGpBiSbq/T22EuTE88et0KBn95Vhby40njm2SM4zoWgcIV2Qu7e/Pl6yH5prmbgiWyystyulqleeNd1zES6d5QlTVM2wgAp5IRX0dsDtQovBgnPT8F8KPghf4QYipmNBBIQCwHtZSLJ+wbAXC1b/jyimWnLjMHIWXpBGTiM10nkruSQvztOoU9rOykeiA/a5aE7x37xNdeHJmnXDcEoVMlqafn9Yu5wEy6JZI0WbLv/DMHnwU/VBZFLrAIOVAvqYCv/5QUGzY0hDFLqfC7Wq7YZ+gcp3hdgPdu9MFN/ggUWyH577VQJ/kIYLmBSvvcv3rcPXUF6HSP5bdBj4nebbV61VqnZ/es9j7RX/TblaIoB+iaH9QfNXt1Op7x5r8=</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D7FF82630C6349FDA85CA376473D6C50</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D366A9AE5C3445E05305991F0A3CDF</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorRespTypeStreamCreate</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">96D720451F854F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D366A9AE4C3445E05305991F0A3CDF</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D34AAE68CE2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value>96D720451F834F56E0401F0A079921A9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>savedrole</con:name><con:value>urn:dece:role:lasp:dynamic</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:D7FF82630C6349FDA85CA376473D6C50</con:value></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D366A9AE4C3445E05305991F0A3CDF</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE68CE2E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D34AAE68D62E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81196</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:13D34AAE68D62E1BE05305991F0A7FB5</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:13D366A9AE5C3445E05305991F0A3CDF</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>54488545-963b-4c73-b6f5-84edbb3f614a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4eeff716-6611-49b3-b781-80b53200763a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43543265-d448-44a0-97d6-b9d58695127f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>84a0735f-8718-4544-b932-b42a05b5cb92</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63434c27-2177-4fc0-94f9-203195e300ae</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>52418f18-155b-471a-9517-0b29794403e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e1b91a8a-5323-4c49-9d72-4ddec4492ce1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d81dec31-7a9b-4bc6-a0f4-8e68bcd8715d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b07c0f3-c027-4c99-8023-990bdf29d476</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>187b6368-64bc-44d3-8444-4803e8534630</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a0bcb67-4323-4ade-8787-99ca2b0b23f0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05c3e4b6-6fa7-4d32-9555-886541deee10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Cases Containing APIs" disabled="true" id="7949b172-79ad-427f-bdde-97fc734158c3"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API" searchProperties="true" id="a3ca1214-bd95-46db-92ad-d5471b6f568f" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5d1046de-82e2-48ae-a41b-80d2dd4fed41"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="c90169e1-c954-424d-b116-d1e8b791961d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="e7c43eae-3e83-4573-8ce7-3d737b2e71bc"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("POST - STS");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0910":  // LLP
		keyStorePath = "I:\\deceAPI\\certs\\910_concat.pem";
	break;
	case "0914":  // DLP
		keyStorePath = "I:\\deceAPI\\certs\\914_concat.pem";
	break;
	case "0912":  // RTR
		keyStorePath = "I:\\deceAPI\\certs\\912_concat.pem";
	break;
	case "1910":  // LLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1910.pem";
	break;
	case "1912":  // RTR Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1912.pem";
	break;
	case "1914":  // DLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1914_concat.pem";
	break;
	case "0701":
		keyStorePath = "I:\\deceAPI\\certs\\999.pem";
	break;
	case "80080010":
	default:
		keyStorePath = "I:\\deceAPI\\certs\\80080010_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS" id="3de63cbf-5104-4bcb-aa6b-4d480e44500a"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" sslKeystore="912_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="http://www.decellc.org/schema/2010/10/dece">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="15c0fc3c-7522-4a91-836b-6fae27cf981d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('POST - STS');

String expXML = null;
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";

if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="886560c0-00b0-48e5-b001-e0bf11a3256e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTS");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest  = url + "/rest/$major/$minor/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

log.info "major[$major] - minor[$minor]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="7773d381-2e31-4182-bc84-9941e03daad4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true" id="921388b4-a9a1-4e7f-8437-427b552d05b6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties 1" id="ead3f0b4-001d-4ce9-bc46-1b4d9d0609c7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid","0912");
tC.setPropertyValue("rtrnodeid","0912");
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="93f73e6e-ec36-4dc2-aa3c-8374e2b6a756"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL", callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("cid", callTC.getPropertyValue("cid"));
tC.setPropertyValue("alid", callTC.getPropertyValue("alid"));

if (tC.getPropertyValue("alid") == "null" || tC.getPropertyValue("alid") == null) {
	tC.setPropertyValue("alid", tP.getPropertyValue("alid"));
}
if (tC.getPropertyValue("cid") == "null" || tC.getPropertyValue("cid") == null) {
	tC.setPropertyValue("cid", tP.getPropertyValue("cid"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity as RTR Consumer" id="a4ee7114-c986-4106-a7f8-89022422836a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="3b40bc2a-a1a4-4596-9821-344d7914dc26"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId    = testCase.getPropertyValue("nodeid");
String rtrnodeId = testCase.getPropertyValue("rtrnodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("POST - RightsTokenCreate");

/* 
*  if the rtrnodeid is set that means override the default
*  nodeid extracted.
*/
if (rtrnodeId.length() > 0 &amp;&amp; rtrnodeId != "") {
	nodeId = rtrnodeId;
}

switch (nodeId) {
	case "1912":  // DLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1912.pem";
	break;
	case "0912":
		keyStorePath = "I:\\deceAPI\\certs\\912_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - RightsTokenCreate" id="77700114-23a0-4c4f-b847-c82fcd3299d1"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/${#TestCase#assertionAccountIdFULL}/RightsToken" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - RightsTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="912_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2011/06/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#alid}" ContentID="${#TestCase#cid}">
                <ns4:SoldAs>
                                <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
                                <ns4:ContentID>${#Project#CID}</ns4:ContentID>
                </ns4:SoldAs>
                <ns4:RightsProfiles>
                                <ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                </ns4:RightsProfiles>
                <ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc>
                <ns4:FulfillmentWebLoc ContentProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentWebLoc ContentProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentManifestLoc ContentProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>
                                <ns4:Preference>3</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:FulfillmentManifestLoc ContentProfile="urn:dece:type:mediaprofile:highdefinition" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:PurchaseInfo>
                                <ns4:NodeID>urn:dece:org:org:dece:${#TestCase#nodeid}</ns4:NodeID>
                                <ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction>
                                <ns4:PurchaseAccount>${#TestCase#assertionAccountIdFULL}</ns4:PurchaseAccount>
                                <ns4:PurchaseUser>${#TestCase#assertionUserIdFULL}</ns4:PurchaseUser>
                                <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>
                </ns4:PurchaseInfo>
</ns4:RightsTokenData>
]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Handle from API Result" id="c0853b4a-3b72-41be-8cda-69253f635322"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def targetHost = testProject.getPropertyValue("targetHost");
def nodeaccountId = testCase.getPropertyValue("assertionAccountIdFULL");
def urnRightsToken = testProject.getPropertyValue("urnRightsToken");
def urnAcct = testProject.getPropertyValue("urnaccount");
def tStep  = testCase.getTestStepByName('POST - RightsTokenCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String rightsid = null;
String rightsidfull = null;
String contentLocation = null;
String major = testProject.getPropertyValue("VersionMajor");
String minor = testProject.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
	}
}

def b = contentLocation.toURL();
def urlStr = b.getPath();

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
assert b.getPath().matches("/rest/$major/$minor/Account/$nodeaccountId/RightsToken/$urnRightsToken[0-9, A-F]*");


//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

int lastColon = urlStr.lastIndexOf(':');
int lastSlash = urlStr.lastIndexOf('/');
rightsid     = urlStr.substring(lastColon + 1);
rightsidfull = urlStr.substring(lastSlash + 1);

this.log.info "rightsid[$rightsid] - rightsidfull[$rightsidfull]";

testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidfull);



</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="932296fb-ada9-454a-85cd-3f715c6484db"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="groovy" name="Return RightsToken to calling Test Case" id="b1b9bc26-be94-4695-b5d7-b3f35d716b95"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("rightstokenid",tC.getPropertyValue("rightstokenid"));
callTC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL"));</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">fc976555-dca4-4e0b-bc03-89ef6a35cb2d</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7002/rest/1/0/SecurityToken/Assertion/fc976555-dca4-4e0b-bc03-89ef6a35cb2d</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/plain; charset=UTF-8</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="Forbidden">
       <Reason>Forbidden</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET API" searchProperties="true" id="0d14930d-5afc-4c75-9527-3edd573da514" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e0c17819-07c4-4a73-9c93-3e8c9721b41e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="786a8093-a978-4deb-8226-ea7de07c5e6c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="bfab7bef-cad4-45e4-ace9-8c28f705ba34"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0910":
		keyStorePath = "I:\\deceAPI\\certs\\910_concat.pem";
	break;
	case "9115":  // LLPCS
		keyStorePath = "I:\\deceAPI\\certs\\9115_concat.pem";
	break;
	case "9116":  // DLPCS
		keyStorePath = "I:\\deceAPI\\certs\\9116_concat.pem";
	break;
	case "0912":
		keyStorePath = "I:\\deceAPI\\certs\\912_concat.pem";
	break;
	case "0914":
		keyStorePath = "I:\\deceAPI\\certs\\914_concat.pem";
	break;
	case "1910":  // LLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1910.pem";
	break;
	case "1912":  // RTR Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1912.pem";
	break;
	case "1914":  // DLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1914_concat.pem";
	break;
	case "666":
		keyStorePath = "I:\\deceAPI\\certs\\666_concat.pem";
	break;
	case "0999":
		keyStorePath = "C:\\Temp\\peter.pem";
	break;
	case "80080010":
	default:
		keyStorePath = "I:\\deceAPI\\certs\\80080010_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - GET" id="ea51f7fe-050d-4725-b201-59070cca8fbc"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="912_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="0a34d0ba-f9d8-42be-a30c-dcc3e3837ef9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
		 	status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="f9901345-70be-4b58-ba8a-6c45526719d0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest  = url + "/rest/$major/$minor/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#");
		if (expectErrType == "SUCCESS") {
			// Verify response sizes...
			this.log.info "Assertion size: " + myXML.size();

			/*
			assert myXML."saml2:Assertion".size() == 1;
			assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
			assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
			*/
			assert myXML.size() == 1;
			assert myXML."ds:Signature".size() == 1;
			assert myXML."ds:Signature"."ds:SignedInfo".size()   == 1;
			assert myXML."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
			assert myXML."ds:Signature"."ds:SignatureValue".size()  == 1;
			assert myXML."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
			assert myXML."saml2:Subject"."saml2:NameID".size() == 1;

			def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
		} else {
			// ErrorCode
			this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
			assert myXML.Error.@ErrorID.toString() == errorID;
	
			// ErrorReason
			this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
			assert myXML.Error.Reason.toString() == errorReason;

			// ErrorLink
			this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId" id="fb14a53b-a0c0-4c0a-babe-5a133b56744a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";

			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			tC.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			tC.setPropertyValue("assertionAccountIdFULL",accountId);
			tC.setPropertyValue("assertionUserId",userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			tC.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="7ca274ed-f043-4ba5-85b3-acdf2b66df74"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="bfe4d5b3-e756-4886-b866-55ddb6d76c98"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",tC.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",tC.getPropertyValue("assert"));
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionAccountId",tC.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",tC.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue("assertionUserIdFULL"));</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>fc976555-dca4-4e0b-bc03-89ef6a35cb2d</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="fc976555-dca4-4e0b-bc03-89ef6a35cb2d" IssueInstant="2011-03-14T11:35:20.398Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#fc976555-dca4-4e0b-bc03-89ef6a35cb2d">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>6DexyurGLqSowU+Y9X0cA5GOCYI=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
ARjU3UquhujWTJxfLbm+5AN7XKShkQ53+KgDZs+8HnnVJxIEjGTiuvzRrd0+QUu0LP0H3WQ5GkMp
4DQGLdcqAslwMQoeFhWyuRJDpIVAV0PN12FAuDKcF0pzNqJSYOSsG60FcPV/3XzYGHJznAJZbZCq
UeeJGqAqQGh2l+3r++E=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:9B4E7893991CB1C5E0401F0A0599216F</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData InResponseTo="2357E245F6274DB5468DE1D15A084A29" NotOnOrAfter="2011-03-15T11:35:20.398Z" Recipient="http://stdecqavutl1.va.neustar.com:2485/saml/dumpcustomerpost.php"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2011-03-14T11:35:10.398Z" NotOnOrAfter="2012-03-14T11:35:20.398Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:0912</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:1912</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/rest/1/0/SecurityToken/Assertion/fc976555-dca4-4e0b-bc03-89ef6a35cb2d</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2011-03-14T11:35:20.398Z"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=ISO-8859-1</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>4278</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertId</con:name><con:value>fc976555-dca4-4e0b-bc03-89ef6a35cb2d</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate" searchProperties="true" id="ee86d2a4-ae72-437a-a234-b581a0c086ae"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="06f43687-5328-4bee-a745-4169db9ac896"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeoid10").toString());
tC.setPropertyValue("rtrnodeid",tP.getPropertyValue("nodeoid10").toString());
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="713e6140-72b7-4e01-b419-ec3abb78087d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL", callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId", callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("cid", callTC.getPropertyValue("cid"));
tC.setPropertyValue("alid", callTC.getPropertyValue("alid"));

if (tC.getPropertyValue("alid") == "null" || tC.getPropertyValue("alid") == null) {
	tC.setPropertyValue("alid", tP.getPropertyValue("alid"));
}
if (tC.getPropertyValue("cid") == "null" || tC.getPropertyValue("cid") == null) {
	tC.setPropertyValue("cid", tP.getPropertyValue("cid"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Requesting Entity Environment" id="42c9ebca-e766-4f03-9bd1-3b6bf3c3952b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity as RTR Consumer" id="22dd9232-85ec-4a2e-aa18-53d99515a96a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("username",tP.getPropertyValue("UserName_FAU1").toString());
//tC.setPropertyValue("password",tP.getPropertyValue("userFull1Org1Password"));
def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="d8bd999b-6dd8-48f5-ba88-49e5c36bcfe7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - RightsTokenCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - RightsTokenCreate" id="2eba1a83-84df-4c2d-bed3-dce4cd8f32a6"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/${#TestCase#assertionAccountIdFULL}/RightsToken" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - RightsTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#Project#alid}" ContentID="${#Project#CID}">
                <ns4:SoldAs>
                                <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
                                <ns4:ContentID>${#Project#CID}</ns4:ContentID>
                </ns4:SoldAs>
                <ns4:RightsProfiles>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                
                </ns4:RightsProfiles>
                <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>
                                <ns4:Preference>3</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
				<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">   
                                <ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location>                                
                                <ns4:Preference>3</ns4:Preference> 
</ns4:StreamWebLoc> 
<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">    
                                <ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location>                                
                                <ns4:Preference>3</ns4:Preference> 
</ns4:StreamWebLoc>

                <ns4:PurchaseInfo>
                                <ns4:NodeID>urn:dece:org:org:dece:${#TestCase#nodeid}</ns4:NodeID>
                                <ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction>
                                <ns4:PurchaseAccount>urn:dece:accountid:org:dece:${#TestCase#assertionAccountId}</ns4:PurchaseAccount>
                                <ns4:PurchaseUser>urn:dece:userid:org:dece:${#TestCase#assertionUserId}</ns4:PurchaseUser>
                                <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>
                </ns4:PurchaseInfo>
</ns4:RightsTokenData>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Handle from API Result" id="9a14002c-7a4b-4ff5-abe8-793ea0e6d152"><con:settings/><con:config><script>import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def targetHost = testProject.getPropertyValue("targetHost");
def nodeaccountId = testCase.getPropertyValue("assertionAccountIdFULL");
def urnRightsToken = testProject.getPropertyValue("urnRightsToken");
def urnAcct = testProject.getPropertyValue("urnaccount");
def tStep  = testCase.getTestStepByName('POST - RightsTokenCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String rightsid = null;
String rightsidfull = null;
String contentLocation = null;
String major = testProject.getPropertyValue("VersionMajor");
String minor = testProject.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
	}
}

def b = contentLocation;
//def urlStr = b.getPath();
def urlStr = b;
//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/rest/$major/$minor/Account/$nodeaccountId/RightsToken/$urnRightsToken[0-9, A-F]*");

if(testProject.getPropertyValue("V2") == testProject.getPropertyValue("versionUrlEncode"))
{
int lastColon = urlStr.lastIndexOf('%');
int lastSlash = urlStr.lastIndexOf('/');
rightsid = urlStr.substring(lastColon + 3);
rightsidFULL = urlStr.substring(lastSlash + 1);
testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidFULL);
}
else
{
int lastColon = urlStr.lastIndexOf(':');
int lastSlash = urlStr.lastIndexOf('/');
rightsid = urlStr.substring(lastColon + 1);
rightsidFULL = urlStr.substring(lastSlash + 1);
testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidFULL);
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Return RightsToken to calling Test Case" id="76fa974f-2974-4e2c-bdc6-d733d9435d74"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("rightstokenid",tC.getPropertyValue("rightstokenid"));
callTC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL"));</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14762CA318A154DAE05307991F0A656A</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZZb+o6EP4rKH28CtkLRAUpBXrKaaEt0NL25co4EzBNHIgdlv76YwdIWUov90hIyJNZvln8ea4YikLT9RiDhJOYFpZRSJmbSatKmlA3Rowwl6IImMux2/Pa965Z1F20NVEKrUZV+RcQoJJRLqmAkKPaZsVSh8gK1KDsl/Wy4wRmaShUGUuhRRlHlFcVUzccVbdV0+4buqtb4lcsX1rvSuEFEiZ8C5WirmxALVlVGXM+dTVtsVgUF1YxTkaaqeuG9tq+7+ExREipXa0zygIltY0+LvqAIQxxEceRdqXt6Vz5zO2REUU8TWATyz8VS9f0iiZ0fEZGF0puC36LBnF2rCMaU4JRSD6RrE8b+Dj2C144ihPCx9HJJAxdOlZhiVVs2PRC0fahneloD2HCkMrGyNj46kIACVAMheduq6pcnNe1zLSfIMqCOInY/vH/4QE6hzCegq+ybVobaOc7/KZStSvAboviMGVkDh05rFOEgW26Cfh8V4XHBAKyvCdMDOiSSXTaLryD47oaDTICxv+mQTvNWTt5QWEKtff5080Ds7rXvYneGfTRL/qRvNlPXXOhVzMAu8qZIG/t+ngwlPkQrS288YgskrtK0DfvbrXG3ao+IB32zp2Pu6bev53Ac+iBTZLx4MmE5cyePd3G6ecvNgonvZfFoN4ovbVuwsavUjhxOmGZkSV5/ygt/xncT+wOaT93+uFrax58LGfBrF1p+FHlOYJupTerl7vm++/W3Wd3Nfw9Hzj6a3na0bS3lHz26+aqO+6NxrRp9dvD5mt42ySkWc3T2cG/L9ve+V46nADm26Mcg1ajcCO6hPjPZCYlxFeDTNWdSvJhHChXatJKcoebCrojvit6uD4bdunSbBp2uWRXHLtkN3XH0p1KxbjRveuGdbklmTWKA4j1mAZExpKUux6bnwHiyGVAfUjUeZwKpmPKDx4biKNCi3bFJYgpg34s6NmYjOIZCmdGKaarz5Hl+xVsrPxUKXRi/kAfEi/gkOxTsrVHyV3AZEpA8rYcaybmmnFRihmapzw0inNUpJAKZk8kybqmXXY0RqJpCBKoFsV+GkJxOp5mhdHY+t9UEWaZtNvsZ5ftZFqH37YVEDo+kQpM5nINootw9LaYrrNN5HTCl7sJb917qU/kvRLl5AnBayT7n76mRI5HPiL1h4ct5FzzPMvGvdd7/EtbUcdjS+2HXLTDMuaB/DnZCbt98MXTIcimth2CGTKKs2I6n6dZ323b0hLhXpOF1XRT6wFOBR2u+vEHUC33op319uTAD4Ln8n2IKR/THkccIjGnhex4xrLRAyaXjZa4X8tzN5m9kKJ0HJb8O1k9FIuSRPzjLoVdLPWE+FH8LeLE/+rYN7524og8xa7BCR3Jk3x3VifmAsfCLRGMGSe7zr9z8F3wfWFe5BwLFwM1TDmc/lKQVFhVEMZxSnmroWSCXXrOcPLVFNwvpSM32QuQr4Tkv3dClWQjgEEskoxk/uXL7sorQEc7FL8JesTydc8yyp7u2A0vY/nSmuUvnUsvL8oeutqR+FiyU6fDGa/9AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14762CA318A054DAE05307991F0A656A</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14762E1487495474E05305991F0ABD36</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147645B85B1953A7E05305991F0A2CEE</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:147645B85B1953A7E05305991F0A2CEE</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>sName</con:name><con:value>Node Permission and some negative Test Cases</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00101 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with COORDINATOR - 403 Forbidden_MIGRATED</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_033611</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14762E14874A5474E05305991F0ABD36</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowid</con:name><con:value>9B4E7893991BB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14762E1487495474E05305991F0ABD36</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B4E7893991DB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14762CA318A054DAE05307991F0A656A</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14762CA318A854DAE05307991F0A656A</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightslockerid:org:dece:14762CA318A854DAE05307991F0A656A</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81155</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A14762CA318A054DAE05307991F0A656A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>42c9ebca-e766-4f03-9bd1-3b6bf3c3952b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b58db208-1b7f-4625-bece-3a57de3e4e35"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5a1fd1fc-5e04-4c88-bc94-1dd51ef2b4da"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="6a73c04c-11e7-45df-b4e9-5d732c66776b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="cf48510f-b3cb-47c4-b253-aec994100a70"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="27bb0869-7820-41ef-8e49-5f3309be5f75"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="441801_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="9ae9c8d3-7594-4cbb-935b-176e23429d33"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="357e93d4-b53e-4767-8a6c-46e91b70de40"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="8a5b4aa9-7ca3-4e42-bf5f-3d0363291477"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish Parental Control Rating</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>441801</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVdbk6K8Fn33V1jOY5fNRfFW010VrqKignh9OYUhAoqABAT99Sfg6Ng9PfPNd85Dl53N3jtr76wkK9+xdfTZHsAYxYkXBlVVfKv9Z8fZTWa77dSbsNGsN9t0s25ZDavONhqtFoRch27CWlXFOEVqgBMrSN5qLM2wdYap022TYXoc22uwrw2mualVFyjGJDVxeaVr1fzoB7hXTvtWS+OgF1rYw73AOiLcS2BvBrRRj3j2rDum2vv3G8pywvjdTZKoR1Hw1UYQ+T58heGR+k598Plu497McwIrSWP0Y04bv9V+xGZZ9po1XsPYoViapim6SxEfG3vOt9p75R6MbDXYhbexYAVh4EHL965WAUpDiRvaVeA7Yewl7vE3qRmKoYvUdZTDOmSawbca9XOCEt1fZvoAMsZWHbsWc09moB2KUQBRdW6ob7Vvf7eCt1gztgK8C+Mj/jT+d5BQcEZ+GCG7ju+V3dH9fcYv2vX+HcGeGkA/xd4ZjQuaRBZEuDqN0c7LRx4m5LNxtVz+ao7vDEPw3yzJd+oZJ4FNfdEZ0XMQTv6X9Xpeq1uWheWn6H1qpfu1tR2pFPey2WZiorbC1Vmdwz18KyE8O99APZb6x/gzUR+8+hEkTkaRspraYqS0oxYYLOhO+yLT8nq3ZlfWWh+GVxh3qXhy9Jmd1OjQ1/5uMIi6XDJo55q+Y8QJNWZP3kp23UokHdqj005g5ZeReGFarKPj07Gfs6JKy+wiMQfA7mznDeiYPNxexFO7j3W8uK5Zt8ukh01z5+lzw5gNXTGphFPRW8Xy9Br3py8W257x0tvPmp5rKOoaoktZZPH/iqO7opVYj4FQnBQ7sj0T9K6pqpheBQFcZg7IVB445G8PxrxzOLkHT+lmNA90XQaiwPt7aaSBgwKYucS7mrBYaLlwBQPeGS9IoFkB/obXDCkTs7W40PW+lLmmrSwuW8VPN1dprAFcBguuJhnSQjRMSdNAeLPlmrhV8r020zJVX4sVkkCU8uhqK90EKbkHWZXTZhy7nnHpZrUgdvkyOo7PW1PyNUFThNlJmanbhqhLA2Csl5CVUxJ7HR2jsLKe809BgwjtAZIzmswJrpp5yDRzzo5Fwypt5kebpioDTceZoJdVKRUpGyzm15+9EHhNsI9SLplgeusFNAV5TG9WA2wtuUAzQCY6ZfBQyuzJHYim01lFuPVqJGWGZMzHsmaomQRKmyhlPt6yY3eruGfY0POBCfbPCyPo0lIOyPfAOMMLd6pYigy2xwUDG4YLPc6zVmHmbDqZqK8Hw3CjkjRjoEs8rwMCiAZFaaT/PBjxC24SeV3WQ6OdHB6RG1c0Jhweztec7niNiTMdLzlxd2hPFW/asGyXUn3I7hsHoKrIHjKubtnGmjLEwLu2JsP5Cnnx+pqMOZ1peR2uYizT+UoM/bbdX63nw5d8DXVzMp3Nl9Nrno9P+87VT/oTvh/PBproTMYITTF8oWhL5s2OyAnr/p7waWfQiKsAR+MBUPaOI3mEwHx/fyNh39AkQl6gCZkiLAVlBhTlRVJ5Udd3sstMobJI58xYUyXbJ226rFeGX9kIvEhWiraWm2jNyvTGBHaZTG9KsqPPuZfBCm30sW8uEpBFi13AMLQS6f2dljlQKxhgq9mMJ7uIr6QqmFuTaEDnw0WLZk667Q9mXTBv5DP2kE9cZ3M5OJsDWZT109ZZm8BfmE8cUwnFlhXdlAwNdG77LdfUecPw4TGPtkeYiyZZszI4NHnJkHV6nosiGN5s2ARsjtdXaa8JUhlfAblmEVqctysXr4OxNzGllJA2faLLfsvS/8ixgmKVjxw7CUAHnzkm3Tgmgd3pRe2IDOZaQoSXmcMr0klvL0aDbkTrq9Ghwr/IlJN4fnMSdDJz+LJkLlnb3evLZVcVXeEl2K3dxjbhaesKdTQ4tBXPOIhBq+lftJGmc3OP8i/0Hp0yPKqMVSaQGslVprpx+sIfN97xem002flxOkvJXWENMXNxt6dlN9tP+y2KipULd21vzrq8CuH6do98PiQfxtsxSj0fsB9O4Lv2mqXbPYLJfVjcw6pYlcnlaCV/1nGFxbPru9K1FxViECcoSGrvRVSh4XopUXqe3SM3520siFK7wbdorsGIQqfJSnSTZmQa0Fy3S7dZ8S72big+QRTCYOcVcxVy9nZZ/xkgPPYwCmwU189hCl2Ea3/IWPSrqgYGUSFhgJEZErncanTklijLHVYU6aYk0HK7JbXERqvdlIHUkmrVcZhMgkkMdgmKP0rl5gepbCDoRR4q9HQhKjBRFTghLTlZ5zTxmdez9RqglCjuuBC9PbbZ4SjsHSMfFYCpY2inPnqN3KhsEIVvv2zdgri0NptMh6ZLvfPbCj9/uzeD+Nhe4YCLcnhEFhR9IfvZey2fa2a/fh7c04PU9gpZQzqbxB68Ifn46SdhCqY82HIr6o764fwvgpn/J5j9NZj6Q0nU524+5rLP3tPM99cPEfRE8r3f6XCyXk+v6fmclgRoF3I2JukphqJZaoZgSjTpxQwPKKAeKai/eg48UH+a+WH/iC9N3GCWkLPkSOhaLYd/8RacIVy8BVWy3fK/fWh+mJL0LUF58pVN8MmTsUD8x1cl7MHCj5in5CcLY/vncn2R62keUmdxeHqBU4wK8X/5DS9gSNJ65AAN4+fkXyX4avKPxkeTH1gSwqZtmqDff6kWJ+NbzYIwTINEFWul4fm0LnEmlwj1fjr9kqaU3z/eUzn+7XtqpY1m5Nw8WrWHr/fPznWvpAtEJAp7JZa3Wo57xV4JnKfb4QfAXy4IRiIs6dAtRuaeL4h2s/m4ID5W8v6L+VfLU08/74f3/wI=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:CDE731E3368061F5E0401F0A0599744D</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:CDE73B60531DC842E0401F0A0599072D</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyInfoInURLNotValid">
      <Reason Language="en">The policy information in the URL is not valid.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3ACDE731E3368061F5E0401F0A0599744D/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest1/07/error/en/ErrorList.html#Policy:PolicyInfoInURLNotValid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>815</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81156</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ACDE731E3368061F5E0401F0A0599744D</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamView" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7228e9a7-1592-45cf-a960-e1da09572f63"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f727bb83-3473-4835-be32-c64de892ea61"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamView",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="7e527f3e-5bb0-4897-b3f4-d9bb339e9cc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectErrTypeStreamView",callTC.getPropertyValue("expectErrTypeStreamView"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "null") {
	tC.setPropertyValue("expectDBStatus","active");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="0c145cc4-d7ea-448c-ad05-e86e26490c6d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - StreamView");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" id="11499fd4-d46a-44bb-83cb-2b4cf51c10a8"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{SH}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" mediaType="application/xml" sslKeystore="DLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="af9a25d6-3c10-4f23-8f97-8def8df48a4c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="a82f50d0-96e4-42d9-86b8-12ad26e33055"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamView") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamView")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="ac8a593f-336b-46e2-92d6-b6c309a06224"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamView");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;


this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
/*//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	assert tC.getPropertyValue("httpContentLength").toInteger() == 20;
} else {
	assert tC.getPropertyValue("httpContentLength").toInteger() > 20;
}*/

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String Value = myXML.ResourceStatus.Current.Value;

		if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 200 OK")
		{
		String ExpirationDateTime = myXML.ExpirationDateTime;
		tP.setPropertyValue("ExpirationDateTime",ExpirationDateTime);
		}
	
			log.info "RequestingUserID[$RequestingUserID] - Expect[" + tC.getPropertyValue("assertionUserIdFULL") + "]";
			assert RequestingUserID == tC.getPropertyValue("assertionUserIdFULL");
	
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == tC.getPropertyValue("rightstokenidFULL");

		//Value (status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
	}
} 

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtc+I4DP4rTPZjJzhvvCRTmAHCdui0lALlevtlxzgKeEkciB0K/fVnB8gCpT32ji+MFVl6JD2WdMtxHFlei3NIBU1YaRNHjHu5tKFlKfMSzCn3GI6Be4J4o9bjg2eVDQ8frmilnt/Qfk7rBuAwxHrFqju640wret2pOjq2wmqlWnWJi0Gqcp5Bj3GBmWholmFWdMPRLWdsVD2j7tn1slWt/9BKE0i5tC1Vyoa2B7XhDW0uxNJD6O3trfxml5N0hizDMNHr48OIzCHGWvN2F1HuKG3u9Uk5AAJRRMokidEtOtG5Dbg3ojOGRZbC3lfwmS8DGS6SOgGns29acReCHguT/NjBLGGU4Ii+Y5WfRxDzJCi1olmSUjGPPw3CNJRhHTZEJ6bDvmnoFNqVhk4QphzrfI7Nva0hhJACI1B6GfYa2rfrqpZfHaeY8TBJY356/DM8wNYQJUsIdH4Iaw/teoMXMtW8BeL1GIkyTtfQV2RdYgJ8X00g15sqDVII6eaBcknQDVfo0DG8s+MuGz6dARf/pUBHxdkZmeAog2aULZ5709iNRsFddzXY3osbMb8JZyjkjRzAsXIuKEq7O56RsiDR7say/RjaAPbGZ+9bvh7bz+9o02H9wWKwwfTppR/fj6ZOul3Ru0F10e8ymrqjRxO9PL8a/afXyf2TP2m7cHMfvm7QWzurDaoiDLcTAS+bYDvJfnUGPXPg+sZLNUiq9rN46fV/9P2ATqad4dNde7pKW/BX/PdwWF8HtV/PBnf997k/ttCS3TD7xziMFlk72N4tFo0inCP8p7LDmx9l019AxOGoaNDzS99llbD4upkpCQ30MFf1lqr5cAFMaE11S/UOL5PtjgaerOHubDo127Qqbr1i12tuu9U1KrZRcV3zu9GqSWYdmswOxRnETsJCqnyplrujzdcASexxYAGk+jrJZKfj2hcWfSxwqceG8hEkjMM4ke3ZjI3tolqLK0FgZBWLrAJhm0DrQiv1E/HEntJWKCA97cnuSU8eAqFLCqpxK15zSWwuZC5WeJ2JyCyvcZlBJlt7qrqsZzn1CuI0XkagkKI4CbIIysv5Ms8M4rt/S8eE59Jhd5y/tk/jOv92SIHUCahS4CqWNsgywoXhYh0C+RBw9eIQOphvZQFVD0vmU6SU7JCcfvpNE8WPgiP+Q2s0OIAudP/g7s/O6Kf5Hw08/F8Dsh4fb6IvcoLOy1E4Ctb0yO1hc5AzSHat5oFMK2yWV+Vsvc5y/jiOjVJpHqlCIsNCIyCZ7KvbcbIAhgor6KohVgA/c17ITyFmYs5GAguIJd9L+fGKrWUEXG0tPflQN9euRCcuZeoEbMQlWSeSG5dC/OVSRjyi9KR4IP/ekjT4XbELto78yDjl0iIom6mTGmDbT3hBEmmWytabpMfGLxm45PxUWCS5wCIkoaaZgM+/lFRPbWiYkCRjoudrueC4z+c4xXYJ3m+lD2byUVLslvTfl0ud5hQgco+V+rl9tSJ46gmw2dGs2Dv9MC7MTlf+WrZvdfNxUduNi++1rl8k5QRd84P4o+QoT+ccb/4D</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">147311CEEEEA3D2EE05307991F0AF7ED</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:147311CEEEEA3D2EE05307991F0AF7ED</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ACDE731E3368061F5E0401F0A0599744D</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14731259853879BAE05305991F0A7001</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14731259853879BAE05305991F0A7001</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81157</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:1473126A4E8A734BE05307991F0AC196</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases_P1</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:6889ED16943E4CF8BF0C8A0E273A3E66</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3ADE4F27425F386C62E0401F0A07997352</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_12051 - StreamRenew - DLP - Stream renewal allowed for 'controlled' userId-200 OK_MIGRATED</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_114046</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:6889ED16943E4CF8BF0C8A0E273A3E66" xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <StreamClientNickname>Ultraviolet4.0</StreamClientNickname>
   <RequestingUserID>urn:dece:userid:org:dece:14731259853879BAE05305991F0A7001</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:1473126A4E8A734BE05307991F0AC196</RightsTokenID>
   <TransactionID>StreamsProject</TransactionID>
   <ExpirationDateTime>2015-04-24T12:20:24.881Z</ExpirationDateTime>
   <ResourceStatus>
      <Current CreationDate="2015-04-24T06:20:24.881Z" CreatedBy="urn:dece:org:org:dece:DLASP">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
   </ResourceStatus>
</Stream>]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="149b2681-6e69-4521-b659-1a85ccd94ad4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7bed9898-efe2-41de-a887-61587e1a566a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="ba6da321-2249-42b3-9ebb-9854fcb757e0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="78fb61f7-9b83-497a-9931-eb1c77b8d555"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7","us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvpgRatingsreasoncodesUS = ["us:tvpg:v","us:tvpg:s","us:tvpg:l","us:tvpg:d","us:tvpg:fv"];
fabUS = ["us:fab:c","us:fab:f","us:fab:pd","us:fab:pd-m","us:fab:em","us:fab:ao"];
fabreasoncodesUS = ["us:fab:violence","us:fab:frightening","us:fab:sexual","us:fab:mildlang","us:fab:stronglang","us:fab:substance","us:fab:intense","us:fab:bnudity","us:fab:fnudity","us:fab:explicit","us:fab:erotica"];
esrbgamesUS = ["us:esrb:ec","us:esrb:e","us:esrb:e10+","us:esrb:t","us:esrb:m","us:esrb:ao","us:esrb:rp"];
mpaattrailersUS = ["us:mpaat:gb","us:mpaat:rb"];
tvmovieRatingsGB = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18"];
chvrsRatingsCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r"];
cbscRatingsCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+"];
filmtvifcoIE = ["ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
filmtvncsAU = ["au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
filmtvoflcNZ = ["nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
MocRatingFR = ["FR:MOC:U","FR:MOC:10","FR:MOC:12","FR:MOC:16","FR:MOC:18"];
FSKRatingDE = ["DE:FSK:0","DE:FSK:6","DE:FSK:12","DE:FSK:16","DE:FSK:18"];
FSKRatingAT = ["AT:FSK:0","AT:FSK:6","AT:FSK:12","AT:FSK:16","AT:FSK:18"];
FSKRatingCH = ["CH:FSK:0","CH:FSK:6","CH:FSK:12","CH:FSK:16","CH:FSK:18"];
KijwijzerRatingBE= ["BE:KIJWIJZER:AL","BE:KIJWIJZER:6","BE:KIJWIJZER:9","BE:KIJWIJZER:12","BE:KIJWIJZER:16"];
MocRatingLU = ["LU:MOC:U","LU:MOC:10","LU:MOC:12","LU:MOC:16","LU:MOC:18"];
FSKRatingLU= ["LU:FSK:0","LU:FSK:6","LU:FSK:12","LU:FSK:16","LU:FSK:18"];
KijwijzerRatingNL= ["NL:KIJWIJZER:AL","NL:KIJWIJZER:6","NL:KIJWIJZER:9","NL:KIJWIJZER:12","NL:KIJWIJZER:16"];


String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:g":
	case "${urnRating}us:mpaa:pg":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:nc-17":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	//case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}us:tvpg:v":
	case "${urnRating}us:tvpg:s":
	case "${urnRating}us:tvpg:l":
	case "${urnRating}us:tvpg:d":
	case "${urnRating}us:tvpg:fv":
		for (rating in tvpgRatingsreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:c":
	case "${urnRating}us:fab:f":
	case "${urnRating}us:fab:pd":
	case "${urnRating}us:fab:pd-m":
	case "${urnRating}us:fab:em":
	case "${urnRating}us:fab:ao":
        	for (rating in fabUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:violence":
	case "${urnRating}us:fab:frightening":
	case "${urnRating}us:fab:sexual":
	case "${urnRating}us:fab:mildlang":
	case "${urnRating}us:fab:stronglang":
        case "${urnRating}us:fab:substance":
	case "${urnRating}us:fab:intense":
	case "${urnRating}us:fab:bnudity":
	case "${urnRating}us:fab:fnudity":
	case "${urnRating}us:fab:explicit":
	case "${urnRating}us:fab:erotica":
		for (rating in fabreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:esrb:ec":
	case "${urnRating}us:esrb:e":
	case "${urnRating}us:esrb:e10+":
	case "${urnRating}us:esrb:t":
	case "${urnRating}us:esrb:m":
	case "${urnRating}us:esrb:ao":
        case "${urnRating}us:esrb:rp":
        	for (rating in esrbgamesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:mpaat:gb":
        case "${urnRating}us:mpaat:rb":
        	for (rating in mpaattrailersUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
   
     //case "${urnRating}gb:bbfc:e":  
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        //case "${urnRating}ca:chvrs:e":   
        case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r": 
	//case "${urnRating}ca:chvrs:e":
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        //case "${urnRating}ca:cbsc:e": 
        case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
        case "${urnRating}ca:cbsc:18+":
      	//case "${urnRating}ca:cbsc:e":
      		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}ie:ifco:e": 
        case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
      		for (rating in filmtvifcoIE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}au:ncs:e": 
        case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
      		for (rating in filmtvncsAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
        //case "${urnRating}nz:oflc:e": 
        case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
        case "${urnRating}nz:oflc:r16": 
        case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
	      		for (rating in filmtvoflcNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
       case "${urnRating}FR:MOC:U":
	case "${urnRating}FR:MOC:10":
	case "${urnRating}FR:MOC:12":
	case "${urnRating}FR:MOC:16":
	case "${urnRating}FR:MOC:18":
      		for (rating in MocRatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

	case "${urnRating}DE:FSK:0":
	case "${urnRating}DE:FSK:6":
	case "${urnRating}DE:FSK:12":
	case "${urnRating}DE:FSK:16":
	case "${urnRating}DE:FSK:18":
      		for (rating in FSKRatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}AT:FSK:0":
	case "${urnRating}AT:FSK:6":
	case "${urnRating}AT:FSK:12":
	case "${urnRating}AT:FSK:16":
	case "${urnRating}AT:FSK:18":
      		for (rating in FSKRatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}CH:FSK:0":
	case "${urnRating}CH:FSK:6":
	case "${urnRating}CH:FSK:12":
	case "${urnRating}CH:FSK:16":
	case "${urnRating}CH:FSK:18":
      		for (rating in FSKRatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}BE:KIJWIJZER:AL":
	case "${urnRating}BE:KIJWIJZER:6":
	case "${urnRating}BE:KIJWIJZER:9":
	case "${urnRating}BE:KIJWIJZER:12":
	case "${urnRating}BE:KIJWIJZER:16":
      		for (rating in KijwijzerRatingBE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:FSK:0":
	case "${urnRating}LU:FSK:6":
	case "${urnRating}LU:FSK:12":
	case "${urnRating}LU:FSK:16":
	case "${urnRating}LU:FSK:18":
      		for (rating in FSKRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:MOC:U":
	case "${urnRating}LU:MOC:10":
	case "${urnRating}LU:MOC:12":
	case "${urnRating}LU:MOC:16":
	case "${urnRating}LU:MOC:18":
      		for (rating in MocRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}NL:KIJWIJZER:AL":
	case "${urnRating}NL:KIJWIJZER:6":
	case "${urnRating}NL:KIJWIJZER:9":
	case "${urnRating}NL:KIJWIJZER:12":
	case "${urnRating}NL:KIJWIJZER:16":
      		for (rating in KijwijzerRatingNL) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
   
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);
]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="d8dd7ce5-990a-4994-bfb5-9b956341fe6c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate User");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate User" id="d753fc64-8eda-4145-a870-801593de94a7"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate User" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="bf817b37-f41a-4e23-985c-d3272ee4a3a7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('POST - PolicyCreate User');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="5c14a658-fcff-438c-9ce2-63d3484c3539"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZZT+s6EH7nV0Th8SjNQrokopVC0vakrCKFA7wg47itaWK3sdOFX3/slJRucOFcqVLlyXjmm8XfzCkDaWK5HmMo45gSJQya6vOg8YLgwIm12GxUNRs6L9pLzQGaVX+xTGgZhuk0VCVkLEchYRwQ3lQtw7Q1o6ZZVt+0XNtyDbti10+eVOUeZUyYFioVQ1UWaUKYW7htqnlGXAoYZi4BKWIuh27kXV64QtMFJSa1dbpCWTjMWiPOJ66uw0qMIEoSWIE01U/1LZ3TmLkRHhLA8wy9+4xZU32/O5/PK/OTCs2GuojG0A1HFzoxw8NjtXVUXkZxSAZ0dfYBoQRDkOA3IEFdIj6iseIlQ5phPko/MW3qpiFNa2gBNWja5FjVPxwU6L5paQtkxoDGRsAsjd2iAcoQgUi5uw2b6vH3Kri6288AYQOapWzn/DNIiMxQQico1lgZWYnu+xYPpKt1iqAbEpjkDM/QlWyTCYCIKTcZGuDFBWai+WKmFOVXFkz8cNllCP6kLKf6JlYBXT+QnQAPEeP/UrPNeq2s3IMkR60H2o1Dpx1ZvenCNFPD8a/uvOVct51hs4CwqbwCtS73+3m3Wde99X4pQj3r2v/zAMZP3fvH320jsOMncBN7vx6vjM7JLzBOqqF/Zk39J0pm5uugdnmXd83Io6Pzew936z3rHMyDtHfbmBy9NUBe7Vq9xhsbdc8DY3n3NsfxZZfGN7XO4nfjDDqj5TKoGv6TYUT9wXx8H9DRIzMfgvT1Mb5L5rj2p9eod+dV6yjvh+OTfA4BD8Zj2HGuF2HzI6bNGLaFJSVE+csrgrw8yvYIA6Uj6gX41/QiJTjWBoWqO5EcxTgiXG3JW5Ja3FwQEI5dUczVuePXfC9o1+s1z7Yto9E2bMPsGJ5RdRzb9J2Sg1YodiD6lAyw9CVZdtU/XwOEqcsQiVGmzWgOR4ipX1gMAAdKSG7F46CEoT4VLG4OwWuDZtORiWxknqTOgA1r08mYLVTlivJrcp15A46ybe6ubnH3LYJ4gpEkeNnhTLQ44yIZUzDLeWJWZqBCUC5GQCZZ2LXsRlVnOJ0kSELVUxrnCapMRpMiNTpb/VsagKyQ3rb7xcv7NLDdb2UOhE6MpQKTsZwhUUe0N4RMt1oGshdw9eCwKs17eYzlAxMJ5RmGKyTbnz76RDbIukmCCy+6KUGvdX9w99mPns1/NHDxfw2Ieuzf1L/Iib5bjrWjeIY33JbDXMwnwV6tspmmoDKt5LNZXrRPXTJzJszrgqBNPUIwF/S67NMxIvrahP6t6bZGveN5Ld/Gl/MRiTjgKBXNrhTHb6w2EWJytQnFM118d2/acinyxtGCH5L5idiAJOIvlyToQqknxDfib06z+KNcB2xt+BFxin2GYzKUJznHlp80BaTCLBbES7NN44cMHHK+LVwneY2Fi256yTn6/IsiGbWpAghpTngYqIVgk+ULnHw5Qe6H0p6ZYpK8rwYL9ulq8HB5EQm+TYG61sX/razhol0gUuUGUmBpqgux6QrnZLgxVd4B7g+WjtEO2t5Jw6/tDJZgncCtSFp74n3JRk5330PrLw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6CADF0EDEA38C6E0401F0A059941CD/User/urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9/Policy/urn:dece:type:policy:UserDataUsageConsent</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserDataUsageConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9&lt;/dece:Resource></con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81162</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E8D795B2AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE114E8D795B4AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamRenew" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fc7b8b9d-34f8-4223-9c7d-cf0282761be9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="92c9347f-2340-4c25-84a5-8d5cfd01df85"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("streamhandleFULL_body",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBUpdatedBy",null);
tC.setPropertyValue("streamHistoryRows",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	testRunner.testCase.getTestStepByName( "PUT - StreamRenew" ).disabled = true;
	testRunner.testCase.getTestStepByName( "Extract Response Body for PUT" ).disabled = true;
}
else
{
	testRunner.testCase.getTestStepByName( "GET - StreamRenew" ).disabled = true;
	testRunner.testCase.getTestStepByName( "Extract Response Body for GET" ).disabled = true;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="60d6553f-6c21-4216-a98f-889d58dd4090"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBUpdatedBy",callTC.getPropertyValue("expectDBUpdatedBy"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

try {
	tC.setPropertyValue("streamhandleFULL_body",callTC.getPropertyValue("streamhandleFULL_body"));
	streamhandleFULL_body=tC.getPropertyValue("streamhandleFULL_body");
	if(streamhandleFULL_body!=null)
	  log.info "values set"
	 else
	 tC.setPropertyValue("streamhandleFULL_body",callTC.getPropertyValue("streamhandleFULL"))
}
catch(Throwable e) {
	log.info e; 
	tC.setPropertyValue("streamhandleFULL_body",callTC.getPropertyValue("streamhandleFULL"))
}


if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "null") {
	tC.setPropertyValue("expectDBStatus","active");
} 
if (tC.getPropertyValue("expectDBUpdatedBy") == null || tC.getPropertyValue("expectDBUpdatedBy") == "null") {
	tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} 
if (tC.getPropertyValue("nodetype") == null || tC.getPropertyValue("nodetype") == "null") {
	tC.setPropertyValue("nodetype","dlp");
} 
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "") {
	tC.setPropertyValue("counter","1");
} </script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="5fa093d7-cde4-47ab-8ace-606c68569492"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamCreate") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$sh')""";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="c59e7b84-c504-422f-af15-e52afd617a63"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PUT - StreamRenew");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - StreamRenew");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA.EXPIRATION before API invocation" id="f75c2369-7030-42e0-8ee7-c281481b3f27"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireBeforeRenew", a.streamGetExpireDate(tC.getPropertyValue("streamhandle")));



</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - StreamRenew" id="0efd52ce-dd41-473a-9a87-7cfb70dbd8cc"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - StreamRenew" mediaType="application/xml" postQueryString="false" sslKeystore="COO_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" StreamHandleID="${#TestCase#streamhandleFULL_body}">       
<StreamClientNickname>Release 4</StreamClientNickname>        
<RequestingUserID>urn:dece:userid:org:dece:${#TestCase#assertionUserId}</RequestingUserID>       
<RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#rightstokenid}</RightsTokenID>        
<TransactionID>Sprint 4.1</TransactionID>
<ExpirationDateTime>${#Project#ExpirationDateTime}</ExpirationDateTime>
<SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation> 
</Stream>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body for PUT" id="ada61512-3f68-4daa-808b-bc019a51f1f6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamRenew" id="b2bbedfb-cc8e-46f1-aa94-92b9bb031624"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/Renew" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamRenew" mediaType="application/xml" id="5002a010-eb0d-4c0d-82bd-04c3cb5bbfbb" sslKeystore="COO_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body for GET" id="8cbd24d4-5d25-4c7f-8a37-61a593e9e5f5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA.EXPIRATION after API invocation" id="94702db2-1cc2-4217-88b8-f2268d946c5b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("streamExpireAfterRenew", a.streamGetExpireDate(tC.getPropertyValue("streamhandle")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="0a2739fe-5db4-461e-b203-f10b18179a7a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamRenew") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamRenew")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_VALID":
		errId = "RightsTokenIDNotValid";
		break;	
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "Policy:RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_VALID":
		errId = "StreamHandleIDNotValid";
		break;	
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
	break;
	case "STREAM_EXPIRATION_DATE_TIME_EXCEEDS_MAXIMUM_RENEWAL_TIME_ALLOWED":
		errId = "StreamExpirationDateTimeExceedsMaximumRenewalTimeAllowed";
	break;
	case "STREAM_EXPIRATION_DATE_TIME_BELOW_LOWER_BOUNDARY":
		errId = "StreamExpirationDateTimeBelowLowerBoundary";
	break;
	case "STREAM_EXPIRATION_DATE_TIME_EXCEEDS_UPPER_BOUNDARY":
		errId = "StreamExpirationDateTimeExceedsUpperBoundary";
	break;
	case "SECURITY_TOKEN_LIFE_LESS_THAN_EXISTING_STREAM_EXPIRATION_DATE_TIME":
		errId = "SecurityTokenLifeLessThanExistingStreamExpirationDateTime";
	break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamRenew").toString();
		break;
}

log.info "errId [$errId]";
try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="d61bcd3c-a2ca-4d1b-a8f3-b1e007fd6969"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamRenew");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag = true;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectDescription = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectStreamStatus = tC.getPropertyValue("expectDBStatus");
String received;

switch (expectStreamStatus) {
	case "active":
		expectDescription = "active"; break;
	case "deleted":
		expectDescription = "deleted"; break;
	default:
		expectDescription = "active"; break;
}		


this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;
	
     case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "Assertion_Not_Found":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Invalid Assertion";
		errorReason = "Assertion_Not_Found";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "NotFound":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		XMLbodynull = true;
		errorReason = "The supplied StreamHandleID was not found.";
		errorID = "urn:dece:errorid:org:dece:StreamNotFound";		
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NotFound";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
//if (XMLbodynull) {
//	assert tC.getPropertyValue("httpContentLength").toInteger() == 20;
//} else {
//	assert tC.getPropertyValue("httpContentLength").toInteger() > 20;
//}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type

if(errorRespType == "NotFound"){
expectHTTPcontenttype = "text/xml";
}
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
				
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			//assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		String assertionUserIdFULL = "";
		String recvStreamHandle = myXML.@StreamHandleID.text();
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String recvExpirationDateTime = myXML.ExpirationDateTime;
		String Value = myXML.ResourceStatus.Current.Value;
		String recvDescription = myXML.ResourceStatus.Current.Description;
		String recvCreatedBy = myXML.ResourceStatus.Current.@CreatedBy.text();
		String recvModifiedBy = myXML.ResourceStatus.Current.@ModifiedBy.text();
		String recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();

		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		// StreamHandle ID
		log.info "recvStreamHandle[$recvStreamHandle] - Expect["+"urn:dece:streamhandleid:org:dece:"+tC.getPropertyValue("streamhandle") + "]";
		assert recvStreamHandle == "urn:dece:streamhandleid:org:dece:"+tC.getPropertyValue("streamhandle");
		
		//RequestingUserID
		/*
		*  For llp and llpcs the requestinguserID element 
		*  should not be returned.  
		*/
		
		
//			assertionUserIdFULL = "urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId");
//		
//		log.info "RequestingUserID[$RequestingUserID] - nodetype[$nodetype] - Expect[$assertionUserIdFULL]";
//		assert RequestingUserID == assertionUserIdFULL;
		
		//RightsTokenID
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == "urn:dece:rightstokenid:org:dece:"+tC.getPropertyValue("rightstokenid");
		//ExpirationDate
		log.info "recvExpirationDateTime[$recvExpirationDateTime] - Size is " + recvExpirationDateTime.size();
		assert recvExpirationDateTime.size() > 0;

		//Value (status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		log.info "recvDescription[$recvDescription] - Expect[$expectDescription]";
		assert recvDescription == expectDescription;
		log.info "recvCreatedBy[$recvCreatedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBCreatedBy") + "]";
		assert recvCreatedBy == urnnode + tC.getPropertyValue("expectDBCreatedBy");
		log.info "recvModifiedBy[$recvModifiedBy] - Expect[" + urnnode + tC.getPropertyValue("nodeid") + "]";
		assert recvModifiedBy == urnnode + tC.getPropertyValue("nodeid");

		/*
		*  History validation
		*/
		if (tC.getPropertyValue("streamHistoryRows") != null) {
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		log.info "-------------HISTORY-----------------";
		log.info "Row Count is $rCnt";
		log.info "&lt;History> Row Count is " + myXML.ResourceStatus.History.size();

		assert myXML.ResourceStatus.History.Prior.size() == rCnt;

		for (int i = 0; i &lt; rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;
		}
	}
} 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Assert STREAM_DATA.EXPIRATION_DATE changed/unchanged based on API result" id="ac9b2d77-ab23-47a5-8907-0b8f955e4e54" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	a = new generalUtils.generalUtils(log);

	int w = a.dateDiff(tC.getPropertyValue("streamExpireBeforeRenew"),tC.getPropertyValue("streamExpireAfterRenew"));
	int y = tP.getPropertyValue("streamRenewTimeHours").toInteger();

	//assert w == y;
	/*
	*  hack
	*/
	assert w -1 &lt;= y;
	assert w >= y - 1;
} else {
	/*
	*  If the API was not successful then STREAM_DATA.EXPIRATION_DATE should
	*  not have been modified...
	*/
	assert tC.getPropertyValue("streamExpireBeforeRenew") == tC.getPropertyValue("streamExpireAfterRenew");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Enable test steps" id="16c35512-a0c4-493b-8306-2db4c2bbf97d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

	testRunner.testCase.getTestStepByName( "PUT - StreamRenew" ).disabled = false;
	testRunner.testCase.getTestStepByName( "Extract Response Body for PUT" ).disabled = false;


	testRunner.testCase.getTestStepByName( "GET - StreamRenew" ).disabled = false;
	testRunner.testCase.getTestStepByName( "Extract Response Body for GET" ).disabled = false;
</script></con:config></con:testStep><con:testStep type="groovy" name="Assert different between returned Create/Expire time less than 24 hours" id="314bcf2c-5330-46d7-ace4-80c1f804f090" disabled="true"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
			cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
			cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
	String cDate = "";
	String eDate = "";
	int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
	
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than  hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">The API call is not authorized.</Reason>
      <OriginalRequest>http://qa1.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:14762CA318A054DAE05307991F0A656A/Stream/urn:dece:streamhandleid:org:dece:59008F35B4554BECA7C2E0FFE9B5FF0A</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_033611</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00101 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with COORDINATOR - 403 Forbidden_MIGRATED</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_body</con:name><con:value>urn:dece:streamhandleid:org:dece:59008F35B4554BECA7C2E0FFE9B5FF0A</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AE461645BAC8BFC19E0401F0A07997218</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:59008F35B4554BECA7C2E0FFE9B5FF0A</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">59008F35B4554BECA7C2E0FFE9B5FF0A</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2015/04/24 16:03:03</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value>2015/04/24 16:03:03</con:value></con:property><con:property><con:name>sName</con:name><con:value>Node Permission and some negative Test Cases</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:147645B85B1953A7E05305991F0A2CEE</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>147645B85B1953A7E05305991F0A2CEE</con:value></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>recvCreationDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81158</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>COO</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/COO_concat.pem</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>API_NOT_AUTH</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>COO</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>errorReason</con:name><con:value>The API call is not authorized.</con:value></con:property><con:property><con:name>errorID</con:name><con:value>Security:RoleInvalid</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:14762E1487495474E05305991F0ABD36</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>14762E1487495474E05305991F0ABD36</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E8D795B2AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:14762CA318A054DAE05307991F0A656A</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>14762CA318A054DAE05307991F0A656A</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVZZb+o6EP4rKH28CtkLRAUpBXrKaaEt0NL25co4EzBNHIgdlv76YwdIWUov90hIyJNZvln8ea4YikLT9RiDhJOYFpZRSJmbSatKmlA3Rowwl6IImMux2/Pa965Z1F20NVEKrUZV+RcQoJJRLqmAkKPaZsVSh8gK1KDsl/Wy4wRmaShUGUuhRRlHlFcVUzccVbdV0+4buqtb4lcsX1rvSuEFEiZ8C5WirmxALVlVGXM+dTVtsVgUF1YxTkaaqeuG9tq+7+ExREipXa0zygIltY0+LvqAIQxxEceRdqXt6Vz5zO2REUU8TWATyz8VS9f0iiZ0fEZGF0puC36LBnF2rCMaU4JRSD6RrE8b+Dj2C144ihPCx9HJJAxdOlZhiVVs2PRC0fahneloD2HCkMrGyNj46kIACVAMheduq6pcnNe1zLSfIMqCOInY/vH/4QE6hzCegq+ybVobaOc7/KZStSvAboviMGVkDh05rFOEgW26Cfh8V4XHBAKyvCdMDOiSSXTaLryD47oaDTICxv+mQTvNWTt5QWEKtff5080Ds7rXvYneGfTRL/qRvNlPXXOhVzMAu8qZIG/t+ngwlPkQrS288YgskrtK0DfvbrXG3ao+IB32zp2Pu6bev53Ac+iBTZLx4MmE5cyePd3G6ecvNgonvZfFoN4ovbVuwsavUjhxOmGZkSV5/ygt/xncT+wOaT93+uFrax58LGfBrF1p+FHlOYJupTerl7vm++/W3Wd3Nfw9Hzj6a3na0bS3lHz26+aqO+6NxrRp9dvD5mt42ySkWc3T2cG/L9ve+V46nADm26Mcg1ajcCO6hPjPZCYlxFeDTNWdSvJhHChXatJKcoebCrojvit6uD4bdunSbBp2uWRXHLtkN3XH0p1KxbjRveuGdbklmTWKA4j1mAZExpKUux6bnwHiyGVAfUjUeZwKpmPKDx4biKNCi3bFJYgpg34s6NmYjOIZCmdGKaarz5Hl+xVsrPxUKXRi/kAfEi/gkOxTsrVHyV3AZEpA8rYcaybmmnFRihmapzw0inNUpJAKZk8kybqmXXY0RqJpCBKoFsV+GkJxOp5mhdHY+t9UEWaZtNvsZ5ftZFqH37YVEDo+kQpM5nINootw9LaYrrNN5HTCl7sJb917qU/kvRLl5AnBayT7n76mRI5HPiL1h4ct5FzzPMvGvdd7/EtbUcdjS+2HXLTDMuaB/DnZCbt98MXTIcimth2CGTKKs2I6n6dZ323b0hLhXpOF1XRT6wFOBR2u+vEHUC33op319uTAD4Ln8n2IKR/THkccIjGnhex4xrLRAyaXjZa4X8tzN5m9kKJ0HJb8O1k9FIuSRPzjLoVdLPWE+FH8LeLE/+rYN7524og8xa7BCR3Jk3x3VifmAsfCLRGMGSe7zr9z8F3wfWFe5BwLFwM1TDmc/lKQVFhVEMZxSnmroWSCXXrOcPLVFNwvpSM32QuQr4Tkv3dClWQjgEEskoxk/uXL7sorQEc7FL8JesTydc8yyp7u2A0vY/nSmuUvnUsvL8oeutqR+FiyU6fDGa/9AQ==</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ada61512-3f68-4daa-808b-bc019a51f1f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2bbedfb-cc8e-46f1-aa94-92b9bb031624</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8cbd24d4-5d25-4c7f-8a37-61a593e9e5f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>16c35512-a0c4-493b-8306-2db4c2bbf97d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bcc79614-1594-4bca-923c-5515bf3b466f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f61274ed-53cf-45ca-ad98-3419cd6de911"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamDelete",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="9e9c296c-48ea-4879-85eb-0aed139a0100"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectErrTypeStreamDelete",callTC.getPropertyValue("expectErrTypeStreamDelete"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypeStreamDelete") == null || tC.getPropertyValue("expectErrTypeStreamDelete") == "null") {
	tC.setPropertyValue("expectErrTypeStreamDelete", "SUCCESS");
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="1afc95d0-801b-4fdf-a9a4-0ec4abe10e80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - StreamDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - StreamDelete" id="a66908d9-c4ff-4ee9-b6c2-016128cee778"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - StreamDelete" mediaType="application/xml" sslKeystore="DLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="eca724dd-210b-4497-aee1-721972c313c7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - StreamDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="39f9a00a-fe24-49a7-b0b7-263ae2138b9a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamDelete[" + tC.getPropertyValue("expectErrTypeStreamDelete") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamDelete")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="da23e386-ca5f-4fca-9888-a55215bc5705"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid        = tC.getPropertyValue("nodeid");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamDelete");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;






this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 

]]></script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZbc9o6EP4rjPvYMfI1gCcwAzi0pKS5QNKcvGSMvAYltuRYsiH8+iMZcIFcDu158mi9+vbbi3b3lAdJbHldziEThNHaMokp90ppW8sz6rGAE+7RIAHuCeyNuxcjz6obXrC9otWGflt7jKBhW8aJrTuADd1xWqE+tVxXt6dgTs2WEYWNSKpynsOQchFQ0dYsw3R1w9EtZ2K0PMPyDKNuN5wHrXYHGZfYUqVuaBtSS97W5kKkHkKLxaK+sOssmyHLMEx0fzEa4zkkgdY5XXtUGso6G31cDwFDHOM6Zgk6RXs6pyH3xmRGA5FnsLEVfmTLQEYLSZ2Qk9kXrboL4ZBGrDz2A8oowUFMVoGKzwWIOQtr3XjGMiLmyYdOmIYC1mGJdWw69IuG9qkdCbTHMOOBzueBucG6gQgyoBhqtzfDtvbluKyVVydZQHnEsoTvH/+MD9ACYpZCqPOtWxtqxwO+E6nOKWBvSHGcc1LAT1WsaYCBb7IJ+Hio2lUGEVmOCJcFuuSKHdqld3BcR8MnM+DibxK0k5w1yF0Q59Bp0nOn/zJrWr3Cde8Wl/x6EF/8ujgJ57N2SWBXuRRUqV0fD4qyKqL1jetzcmunrRfSmwwWkW3kUDyv0GV+NW2trHu4S9FJZj0UPwbfblvno0Z/aF88TeEbI6hIJ8mC5SxN4rPR1x/+r/B8uMiWVq+5errFiFlFiqYP/op+/z58HY4fmHs+uMXXvWJiGe7YMvon0Y9BPLjr21fR6jo4vxxfo8bZQwOcQbR8vv/nqdn9avqr/uD7k4+jBntuV+7s8N+Xbd/8OJ8+ARbboyqDoV8byCwF4vNmpiQk1KNS1UtV8+ECqNA66pbqHV4u2x0JPZnD9dl0Gq7bG3Qtt3vWsHzzzHBto9FqmQOj2/Jtf9tk1iwOKPYZjYiypVruumw+J4gTjwMNIdMLlstOx7VPEP1ABLUhvZGPgFEOEybbs7lkC7qyMrZ6NuYsesrnznwBs9jSaj+ZuKSXWTcSkO31ZNPa68k3gElKQDVuVddcFjYXMhYvQZGL2KwXQZ1CLlt7prqsZzlNF3GSpDEopihhYR5DPZ2nZWQQX38tPcC8lN6cTcrX9qFfh/+2IZA6IVEKXPnSA5lGeDNcTM/dOvLG4ZN3h9AWvpuHRD0sGU+REbxmsv/rd5mo+qhqxB91x1db0pXuH9x97I8fzb8EGP1fAJmPtzfRJzFBh+moDIUF2TG73RzkDJJdq7MtppfArL/U86LIy/pxHBtlEh6pRCLDQmPAueyrrxP2DBRVKOioIVYRPzBeyfcp5mJOxyIQkMh6r5XHI7aWMXC1tQzlQ10euxLtmZShE7AU78n6sdy4FONPlzLsYaUnxVfys2BZ+Dtj72Dt2JF+yqVFEDpTJzXAXj+oC8wkLJGtl2W74O8BvGd8X1gFueIiZEFNcwEf/6mpntrWAoxZTsXQ10rBbp8veYrXFLzfSm9gylFS7Zbkv5dLnZQlgEFupJyU+GpF8NQToLOdWbExejguThpu76zRtKyePSjHhbsZF4OmXQVlj13njfitZCdOhzXe+Rc=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>expectErrTypeStreamDelete</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:1475675BE87D2B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Customer Service Test Cases_P2</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>97397C14A82BFA4CE0401F0A07996491</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:CD69E9B88A544D44942F16DD6F1604A6</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_21050 - StreamRenew - DLPCS - StreamNotActive - Stream handle supplied in 'deleted' status yet not expired - 403 Forbidden_MIGRATED</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_023445</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81159</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AE460F8FB1F2E764AE0401F0A05994434</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E8D795B2AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>1475675BE7822B3FE05305991F0A9F83</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>14755BFA25AE72D1E05307991F0A9D3D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamCreate" searchProperties="true" id="97494bd7-b393-4421-a45f-bd21752d2d85"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ef81d255-c40e-4c9c-8c7c-b322b514313b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("transactionid",null);
tC.setPropertyValue("requestBody",null);
tC.setPropertyValue("sCbodyRequestingUserSetting",null);
tC.setPropertyValue("sCbodyTransactionIDSetting",null);
tC.setPropertyValue("expectErrTypeStreamCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="c1d2fad8-3e44-4b92-9692-3c22261469fd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid",callTC.getPropertyValue("transactionid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectErrTypeStreamCreate",callTC.getPropertyValue("expectErrTypeStreamCreate"));
tC.setPropertyValue("sCbodyRequestingUserSetting",callTC.getPropertyValue("sCbodyRequestingUserSetting"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("sCbodyTransactionIDSetting",callTC.getPropertyValue("sCbodyTransactionIDSetting"));

if (tC.getPropertyValue("expectErrTypeStreamCreate") == null || tC.getPropertyValue("expectErrTypeStreamCreate") == "") {
	tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
}
if (tC.getPropertyValue("nodetype") == null || tC.getPropertyValue("nodetype") == "") {
	tC.setPropertyValue("nodetype","dlp");
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Construct the StreamCreate request Body" id="790fa91f-fb76-4126-9580-5021d8ca7863" disabled="true"><con:settings/><con:config><script><![CDATA[def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String transStr = "";
String b = "";
String c = "";
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema").toString();
String assertionUserIdFULL = tC.getPropertyValue("assertionUserIdFULL").toString();
String assertionUserId = tC.getPropertyValue("assertionUserId").toString();
String SchemaNameSpace = tP.getPropertyValue("SchemaNameSpace").toString();
String rightstokenidFULL = tC.getPropertyValue("rightstokenidFULL").toString();
String rightstokenid= tC.getPropertyValue("rightstokenid").toString();
String transactionid = tC.getPropertyValue("transactionid").toString();
String nickname = tC.getPropertyValue("nickname").toString();
String sCbodyRequestingUserSetting = tC.getPropertyValue("sCbodyRequestingUserSetting");
String sCbodyTransactionidSetting = tC.getPropertyValue("sCbodyTransactionidSetting");

if (transactionid == "null") {
	transactionid = "";
}
if (nickname == "null") {
	nickname = "";
}
if (rightstokenidFULL == "null") {
	rightstokenidFULL = "";
}
if (assertionUserIdFULL == "null") {
	assertionUserIdFULL = "";
}

log.info "transactionid[$transactionid]";

String xmlBody = """<Stream xmlns="$coordinatorSchema" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
      <StreamClientNickname>$nickname</StreamClientNickname> 
      %%REQUESTINGUSER%%
      <RightsTokenID>urn:dece:rightstokenid:org:dece:$rightstokenid</RightsTokenID>
      %%TRANSACTIONID%%
</Stream>""";

log.info "sCbodyRequestingUserSetting[$sCbodyRequestingUserSetting]";
log.info "sCbodyTransactionidSetting[$sCbodyTransactionidSetting]";

switch (sCbodyTransactionidSetting) {
	case "exclude":
		transStr = "";
		break;
	case "nullContent":
		transStr = "<TransactionID></TransactionID>";
		break;
	default:
		transStr = "<TransactionID>" + transactionid + "</TransactionID>";
		break;
}

switch (sCbodyRequestingUserSetting) {
	case "exclude":
		b = "";
		break;
	case "nullContent":
		b = "<RequestingUserID></RequestingUserID>";
		break;
	default:
		b = "<RequestingUserID>urn:dece:userid:org:dece:$assertionUserId</RequestingUserID>";
		break;
}

requestBody = xmlBody.replaceAll("%%REQUESTINGUSER%%", b);

log.info xmlBody;

tC.setPropertyValue("requestBody", xmlBody);

]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="d163948d-19cc-463b-a9d8-64378094d1c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - StreamCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - StreamCreate" id="8ff16994-5ad9-46a2-96c2-63aee3c8cd18"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - StreamCreate" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
      <StreamClientNickname>Ultraviolet4.0</StreamClientNickname> 
      <RequestingUserID>urn:dece:userid:org:dece:${#TestCase#assertionUserId}</RequestingUserID>
      <RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#rightstokenid}</RightsTokenID>
      <TransactionID>StreamsProject</TransactionID>
</Stream>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="a7d0bdfe-b2a5-42e7-8c8a-ccde77d5200d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - StreamCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);


if(status=="HTTP/1.1 201 Created")
  {  int StreamCreateCount=Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));
   log.info "StreamCreateCount : "+StreamCreateCount;
   StreamCreateCount++;
    log.info "StreamCreateCount : "+StreamCreateCount;
     tP.setPropertyValue("StreamCreateCount", StreamCreateCount.toString());
  }</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="f6bd877f-8fec-4051-9fb8-15029a3a9f89"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamCreate[" + tC.getPropertyValue("expectErrTypeStreamCreate") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamCreate")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
	break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="dc358237-bd0e-4bd0-b850-80a2e35559f2"><con:settings/><con:config><script><![CDATA[import java.net.URLDecoder;
import java.net.URLEncoder;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");
def urnnode   = tP.getPropertyValue("urnNode");

def sh            = tC.getPropertyValue("streamhandleFULL");
def nodeid        = tC.getPropertyValue("nodeid");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
String urnErr = tP.getPropertyValue("urnError");





this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}
//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Return the streamhandle" id="478838f8-3b36-47be-bc70-1e4bfd725fb4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle"));
callTC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL"));
callTC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_033611</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00101 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with COORDINATOR - 403 Forbidden_MIGRATED</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:59008F35B4554BECA7C2E0FFE9B5FF0A</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">59008F35B4554BECA7C2E0FFE9B5FF0A</con:value></con:property><con:property><con:name>sName</con:name><con:value>Node Permission and some negative Test Cases</con:value></con:property><con:property><con:name>sCbodyTransactionIDSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sCbodyRequestingUserSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:147645B85B1953A7E05305991F0A2CEE</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>147645B85B1953A7E05305991F0A2CEE</con:value></con:property><con:property><con:name>requestBody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81160</con:value></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9AAD6886B417B607E0401F0A0599673B</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZd6JKEH73V3icR0/CoridJOc0qxhRQcTlDaFZFEFpEPTX3wajMctk5s5Dli5q+brq6+rqJ2TuAroHEIJx4kdhVeafa81mB9JOm3kwW6T50GQs8mHdphr4F2w2adhtdGi6VpURSqEcosQMk+caTVLUA0k90C2davaoVo9iHrGfVa1qwBhhz1jlkaxV810Qol4Z9bmWxmEvMpGPeqG5g6iXWL0pUIY9rNkzr5BqL08XkGXA+MVLkn2PIKxHG1owCKxHK9oRT8QHnScb9aa+G5pJGsO3mDZ6rr3ZZln2mDUeo9glaJIkCbJLYB0b+e6v2kvlagxtOXSiy5ozwyj0LTPwz2YBSoGJF9lVELhR7Cfe7jeuKYIiC9cPMLceLKoZ/qoR7wFKdH/p6QPIGJkPyDOpqzMNOjCGoQWrM01+rv36qwJeTPXYDJETxTv0af3/EMHwCINoD+0HdN3YFdzfe/wmWy9P0OrJoRWkyD/CUcGSvWlBVJ3E0PHzoY8w92xULatfzdGVYND6PxV5Iu5xYtjEN5nhfRei5F/KdV+qixfDDFL4YozsNeufwm3mR+mJVYR6MGQygtHU2XMJ4V75AupW6bf1Z57eaPVmxJ4kIWYHwNmAhAANZ77ZuwMrc9rT6YyORMZZdLOtaszrqdpXaKKLbA9GCjNthhtr3CEdrj0M+TG1WUsrUBmcyMOGTiKaFB23Th40G7DsLIr7y1Nruc8WuSNC9exSEu/RGZ0eUndsOIOQHzWNIQ36ou5qEeNrRK7XjYq7MQICdiTrdMiZKbFVFfT8vqf7PRT7eoWncpPF/wuG7PJmYt4WXNEoHHw6E/iiyDKfnjkOnKYuyGQWuPhnA0asuz14W1/qZiQLVFUEPMcGG2GogK0EqJnAegpnGErOncGAdUcGNtQrIFixiiZkfLbkDVXtC5mn25JxWktBujoLIwWg0pjzFEETDF7TBUUB0UWWK/xayjfKVMlkdclXsANeyPdnW+omUMp9i5YZZcrQyymTrhYGloun4W50XOtCoHCKxE0P0lReN3hVGABtObdoMcW25+FuH1WWM/bOaLCHGwDFjMQxwVnRt5miz+gRr5mlTP8oU2RpoKgo49RyV1JFyAbG7PyeC45VOHsn5IIOJpdcWDonjsjVYoDMORMqGsh4tzR+FTJ7fAWiqGRW4S65GgqZJmizkahociaAUsYLWYDW9MhbS97Raqj5QAeb+8JwqjAXQ/w91I7WiTlUTEkE651BWQ3Ns3zGNxdR5q46Ga8uB6/RSsZuRkAVWFYFGBAJiq3h/LNgyBrMeO93aR8OHTHaQS+uKFT0uj2ec7LjN8buZDRneGfbnkj+pGHaHiEHFr1pbIEsQ/uV8lTT1paExof+uTV+nS2gHy/PyYhRqZbfYSraPJ0t+Cho2/3FcvZaz5eWqo8n09l8cs7z0WHTOQdJf8z24+lA4d3xCMIJsuoEaYqs3uEZbtnfYD45GgmZCnAVFgBp47qCjwnM9jcXEvY1RcDkBQqXSdyck6ZAkuqCzPKq6ogeNbEkI51RI0UW7ACn6bRcaEFlxbE8rhRpzlf7JS2SKx3YpTO1KYiuOmPqgwVcqaNANxKQ7Q0npChS2qt9R8lcSykYYMvZlMWniK2kMpiZ4/2AzF+NFkkdVDsYTLtg1sin9DYfe+7qtHVXW1yU5d3RWeogMPQ7jsmYYvOKqguaAjqX85Yr8qyhBdYu3693Vs7ruGalcaSzgiaq5CznefB6kSEd0DlanoWNwgmlfQXkiolpcVwvPLQMR/5YF1JM2vSOLps1Tf6RYwXFKh85duCACj5zTLhwTADOoS53eAoxLW6P5pnLSsJBbRvDQXdPqovhtsLWRcJN/KA5DjuZ/lqfU6es7W3U+bwr8x5XD52l11gnLGmeLRUOtm3J17Z82GoGJ2WoqMzMJ4ITuYGHDA0rI5kKhUZyFolunNbZ3crfnc+NJj3bTabpUZ6Zr4g6eevDvJttJv0WQcTSiTm3V0dVXETW8nKPfG6SN+GljRL3DfZDB76OXtN0vYFWcl0W97DMV0V8OZrJz2NcIfHtB6dU7e2LWRAlMExqL4VVMcL1Ujzo+XYP35yXdRcAvtXptNgm1WZbZFsgmyQlkoBkut1Wu8FeZ70Lik8QuSh0/CJWMcxeLuufAVq73hqaMYxrP3gq8lSVQw1PH1GIoB491xoMA7pNsdPstBi2wzFNttUSAUt36Sbd4pqtWnUUJeNwHAMngfHdgNz+PCBr0PL3Piym6LdZAiU4EQfzmCYB9Xg0H0OY4jE7LibdHt3sMGUCCDvd7S38AXe3eB+h5HHv7cth5rfb+PztumOsY/uFAipAsxBXC34z0pNXxF92Rn87+l/dg9T2i5kFpy+JfeuC5OOndzYUNLhRgexS5BXzTfWvTel/N23+o2mXoph/N219NSV+SCHxuXq3SPbRv4t7fUnhxwGeH8sHFMIsO5iPh8f0eExLXrVJkiZi7J4giS4xhVaK59uTHm1hSNw8EH/zsrhh/hT3Jv+ILk28cJrgtrTDR6BaLv/8qvxgjROQwDz5TsYF+B1ZBP/xqWn1rEIPiyf4TxbF9nvev/F1FwdDLlqqH7rFqngSnD6W9+3o9qwIe/VxV43ie9/f2X8X+6Pwlq4blASzYp0m8PdfqkW7fK6ZlhWlYSLztVJw38JLzMlpD3vvSl/clDP52yMrR799ZC2U4dTy4M6s3XT9Pys/+GXhLYitkF9iea7lqFdwPnTvrow3gL+5NZifbo2PO3n5Iv4qucvpZ2a//Ac=</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_concat.pem</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:14762CA318A054DAE05307991F0A656A/Stream/urn:dece:streamhandleid:org:dece:59008F35B4554BECA7C2E0FFE9B5FF0A</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7002/dece/Account/urn:dece:accountid:org:dece:96D720451F824F56E0401F0A079921A9/Stream/urn:dece:streamhandleid:org:dece:98F5525959D92153E0401F0A07993F6C</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:14762E1487495474E05305991F0ABD36</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14762E1487495474E05305991F0ABD36</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E8D795B2AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:14762CA318A054DAE05307991F0A656A</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">14762CA318A054DAE05307991F0A656A</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZZb+o6EP4rKH28CtkLRAUpBXrKaaEt0NL25co4EzBNHIgdlv76YwdIWUov90hIyJNZvln8ea4YikLT9RiDhJOYFpZRSJmbSatKmlA3Rowwl6IImMux2/Pa965Z1F20NVEKrUZV+RcQoJJRLqmAkKPaZsVSh8gK1KDsl/Wy4wRmaShUGUuhRRlHlFcVUzccVbdV0+4buqtb4lcsX1rvSuEFEiZ8C5WirmxALVlVGXM+dTVtsVgUF1YxTkaaqeuG9tq+7+ExREipXa0zygIltY0+LvqAIQxxEceRdqXt6Vz5zO2REUU8TWATyz8VS9f0iiZ0fEZGF0puC36LBnF2rCMaU4JRSD6RrE8b+Dj2C144ihPCx9HJJAxdOlZhiVVs2PRC0fahneloD2HCkMrGyNj46kIACVAMheduq6pcnNe1zLSfIMqCOInY/vH/4QE6hzCegq+ybVobaOc7/KZStSvAboviMGVkDh05rFOEgW26Cfh8V4XHBAKyvCdMDOiSSXTaLryD47oaDTICxv+mQTvNWTt5QWEKtff5080Ds7rXvYneGfTRL/qRvNlPXXOhVzMAu8qZIG/t+ngwlPkQrS288YgskrtK0DfvbrXG3ao+IB32zp2Pu6bev53Ac+iBTZLx4MmE5cyePd3G6ecvNgonvZfFoN4ovbVuwsavUjhxOmGZkSV5/ygt/xncT+wOaT93+uFrax58LGfBrF1p+FHlOYJupTerl7vm++/W3Wd3Nfw9Hzj6a3na0bS3lHz26+aqO+6NxrRp9dvD5mt42ySkWc3T2cG/L9ve+V46nADm26Mcg1ajcCO6hPjPZCYlxFeDTNWdSvJhHChXatJKcoebCrojvit6uD4bdunSbBp2uWRXHLtkN3XH0p1KxbjRveuGdbklmTWKA4j1mAZExpKUux6bnwHiyGVAfUjUeZwKpmPKDx4biKNCi3bFJYgpg34s6NmYjOIZCmdGKaarz5Hl+xVsrPxUKXRi/kAfEi/gkOxTsrVHyV3AZEpA8rYcaybmmnFRihmapzw0inNUpJAKZk8kybqmXXY0RqJpCBKoFsV+GkJxOp5mhdHY+t9UEWaZtNvsZ5ftZFqH37YVEDo+kQpM5nINootw9LaYrrNN5HTCl7sJb917qU/kvRLl5AnBayT7n76mRI5HPiL1h4ct5FzzPMvGvdd7/EtbUcdjS+2HXLTDMuaB/DnZCbt98MXTIcimth2CGTKKs2I6n6dZ323b0hLhXpOF1XRT6wFOBR2u+vEHUC33op319uTAD4Ln8n2IKR/THkccIjGnhex4xrLRAyaXjZa4X8tzN5m9kKJ0HJb8O1k9FIuSRPzjLoVdLPWE+FH8LeLE/+rYN7524og8xa7BCR3Jk3x3VifmAsfCLRGMGSe7zr9z8F3wfWFe5BwLFwM1TDmc/lKQVFhVEMZxSnmroWSCXXrOcPLVFNwvpSM32QuQr4Tkv3dClWQjgEEskoxk/uXL7sorQEc7FL8JesTydc8yyp7u2A0vY/nSmuUvnUsvL8oeutqR+FiyU6fDGa/9AQ==</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2adeabc1-1785-4cfb-b032-0c28f0c1dc43"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a6599df7-c78a-4f19-9532-da80e02d4d1b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="9b72755e-2f84-4514-af54-3c9841b60084"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="8a902d07-d4c1-41fb-bcc7-faacedef5201"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17", "US:MPAA:NR",
	"US:MPAA:M", "US:MPAA:GP", "US:MPAA:SMA","US:MPAA:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}US:MPAA:M":
	case "${urnRating}US:MPAA:NC-17":
	case "${urnRating}US:MPAA:R":
	case "${urnRating}US:MPAA:PG-13":
	case "${urnRating}US:MPAA:PG":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "&lt;dece:Resource>$rating&lt;/dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
	break;
	default:
		resourceXml = "&lt;dece:Resource>$resource&lt;/dece:Resource>";
	break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="2af42cdb-6d9e-440b-a3bf-c276d48ab968"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate Account" id="79d224a2-42a8-444e-a3ef-d0e5d14e1d3b"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate Account" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="ac7671da-37f9-4f59-bf21-9d54925f563c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="bf3b5320-4783-4800-a41d-28e61d424b95"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPY5xLm1kCnMBAIlXVo4wOntZcc4Btwmdho7XPrr1w4lBXo57J6njBVZ+iR9lnTBYRJbns85zgRhtLJOYsq9QtrQ8ox6DHLCPQoTzD2BvLF/3fesKvDg7opWCYOG9gs4junUoKNHkXmuOzaw9Wm9HukWdBw8RbaDAJCqnOc4pFxAKhqaBUxXB45unk3AuQdqHnCrZ1b9Uavc4oxL21KlKm9tQa15Q1sIkXqGsVqtqiu7yrK5YQFgGvfX/TFa4ARqzYttRIWjrPmmj6oRRjiOURWxxLgwDnQuIu6NyZxCkWf4zVf0lS9ggLohdSJO5j+08i6OQjpjxbENKaMEwZi8QpWfaywWLKr48ZxlRCySL4MwgTKs4zXSkenQH5pxCO1EQwcIMw51voDmm60RnuEMU4Qr/47ChvbjtKoVVycZpHzGsoQfHv8MD6ZLHLMURzrfhfUG7XSDn2SqeYGRF1IU55ws8Y0iawoR5m/VxOh0U5Vhhmdk3SdcEnTNFTpjH97RcZuNgMwxF39ToL3ibI3cwjjHzZuaf91+CdliSe6RPRvUnw2j01t0Lt3rRgFgX7kQlKXdHo9IWZJoe0P8DGp5L2p32eSyt9o8uRvLHj22/ZuXpEvuskc76A57Y2Bm5sC9dPNwPQLO4mozgQ+R/TC6GrK7JO+MzNnAr6fP4Q2Zp4v7f6Z9+7511XdmrJ30XwavWU9YZz5uDer+tBa6I59dgk7083Vd6966Ftkk/WST9oLMCPhV0ho6r083YIN7+Sq4Fe2Hq7uz+7w3nDfKcPbwH8p2b36cT58wErujokEYVLqySlB838yUhET6rFD1UtV8uMBUaE11S/UOL5ftjkSerOH2bNqBDc5Np9Vyz90gsDrAtYFbr5td4APHcnZNZoviCGKb0RlRvlTL3dLme4Ao8TimEc70Jctlp+PaNxYDKGAlpCP5CBjleMJkez5L19biufbqYghMEb2adi2K2XT9pFVumBjQQebPBM4OerIJDnryCCOSEqwat+I1l8TmQubiBS5zEZvVJaxSnMvWnqku61lOzTU4SdIYK6RGwqI8xtV0kRaZMfj2a+kQ8UI66kyK1/ZlXMf/dimQOhFRClzF0sKyjPjDcDn33F0gHwI++3QI7cz7eUTUw5L5FBlBWySHv95povhRciTo++PhDnSp+wd3f7XHv8y/NND/vwZkPT7eNL7JiXFcjtJRtCR7bnebg5xBsms1d2R6gWb1pZovl3nBH8exjUyaN1QhDWAZY4xy2Vc3E/aMqVFaMU4aYiXwI+el/BBiLhZ0LKDAieR7pTiesLWMMVdbSygf6vrUlejApUydwGvxmawdy41LIf52KUMeUnpSPJSfFcui94p9YmvPj4xTLi2C0Lk6qQG2+YIXiEmzRLZelu0b/8zAZ84PhWWSSyxCEmqaC/z1n4rqqQ0NIsRyKsJAKwT7fb7AKTYp9t6VPpgpRkm5W5L/Xi51UlAAYbmRclLYVyuCp54Ane/NijenR+PCancDq9bqdECn2y3Gxfl2XHQs852fB+iaH8QfJXt5OuZ48zc=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210/Policy/urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:org:org:dece:LLASP_CS_1</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210&lt;/dece:Resource></con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish Manage account consent policy</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81161</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E25E319930F9E0401F0A05990E71</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/LLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ba8aea65-c545-4cca-8cbe-d5b1c891661d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="86c99414-ecbe-4cd2-96a2-19c97fa8c4e0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="2549aa87-aec1-47e0-a7c6-6fed32e43559"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="ae90d111-2d8f-4a7e-8b1f-e333ca0ca003"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet Account");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet Account" id="1286d587-5d96-48bf-8d70-0c2ed2217e3a"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet Account" mediaType="application/xml" sslKeystore="LLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="60dd99ec-4c61-49ad-8521-411bd8e2b212"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="ec1c43f9-b381-4439-8213-4874f0d45ade"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}

tC.setPropertyValue("policyExists", policyWasFound);

log.info "policyExists setting is " + tC.getPropertyValue("policyExists");</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="2f560670-8436-4e9c-941f-a389a741e87d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));

//if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
//}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Establish Manage account consent policy</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPY5xLm1kCnMBAIlXVo4wOntZcc4Btwmdho7XPrr1w4lBXo57J6njBVZ+iR9lnTBYRJbns85zgRhtLJOYsq9QtrQ8ox6DHLCPQoTzD2BvLF/3fesKvDg7opWCYOG9gs4junUoKNHkXmuOzaw9Wm9HukWdBw8RbaDAJCqnOc4pFxAKhqaBUxXB45unk3AuQdqHnCrZ1b9Uavc4oxL21KlKm9tQa15Q1sIkXqGsVqtqiu7yrK5YQFgGvfX/TFa4ARqzYttRIWjrPmmj6oRRjiOURWxxLgwDnQuIu6NyZxCkWf4zVf0lS9ggLohdSJO5j+08i6OQjpjxbENKaMEwZi8QpWfaywWLKr48ZxlRCySL4MwgTKs4zXSkenQH5pxCO1EQwcIMw51voDmm60RnuEMU4Qr/47ChvbjtKoVVycZpHzGsoQfHv8MD6ZLHLMURzrfhfUG7XSDn2SqeYGRF1IU55ws8Y0iawoR5m/VxOh0U5Vhhmdk3SdcEnTNFTpjH97RcZuNgMwxF39ToL3ibI3cwjjHzZuaf91+CdliSe6RPRvUnw2j01t0Lt3rRgFgX7kQlKXdHo9IWZJoe0P8DGp5L2p32eSyt9o8uRvLHj22/ZuXpEvuskc76A57Y2Bm5sC9dPNwPQLO4mozgQ+R/TC6GrK7JO+MzNnAr6fP4Q2Zp4v7f6Z9+7511XdmrJ30XwavWU9YZz5uDer+tBa6I59dgk7083Vd6966Ftkk/WST9oLMCPhV0ho6r083YIN7+Sq4Fe2Hq7uz+7w3nDfKcPbwH8p2b36cT58wErujokEYVLqySlB838yUhET6rFD1UtV8uMBUaE11S/UOL5ftjkSerOH2bNqBDc5Np9Vyz90gsDrAtYFbr5td4APHcnZNZoviCGKb0RlRvlTL3dLme4Ao8TimEc70Jctlp+PaNxYDKGAlpCP5CBjleMJkez5L19biufbqYghMEb2adi2K2XT9pFVumBjQQebPBM4OerIJDnryCCOSEqwat+I1l8TmQubiBS5zEZvVJaxSnMvWnqku61lOzTU4SdIYK6RGwqI8xtV0kRaZMfj2a+kQ8UI66kyK1/ZlXMf/dimQOhFRClzF0sKyjPjDcDn33F0gHwI++3QI7cz7eUTUw5L5FBlBWySHv95povhRciTo++PhDnSp+wd3f7XHv8y/NND/vwZkPT7eNL7JiXFcjtJRtCR7bnebg5xBsms1d2R6gWb1pZovl3nBH8exjUyaN1QhDWAZY4xy2Vc3E/aMqVFaMU4aYiXwI+el/BBiLhZ0LKDAieR7pTiesLWMMVdbSygf6vrUlejApUydwGvxmawdy41LIf52KUMeUnpSPJSfFcui94p9YmvPj4xTLi2C0Lk6qQG2+YIXiEmzRLZelu0b/8zAZ84PhWWSSyxCEmqaC/z1n4rqqQ0NIsRyKsJAKwT7fb7AKTYp9t6VPpgpRkm5W5L/Xi51UlAAYbmRclLYVyuCp54Ane/NijenR+PCancDq9bqdECn2y3Gxfl2XHQs852fB+iaH8QfJXt5OuZ48zc=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210/Policy/urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81163</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E25E319930F9E0401F0A05990E71</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/LLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="66586be9-a512-43c4-b35d-cdd204766418"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3d909fd5-522a-4f6f-8915-7346a46d3344"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="38c5b21a-6e64-401d-97b5-a862e60221d6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="adf04daa-a89c-4c27-832b-d90c6e0a084e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet User");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet User" id="f9a9e377-6158-4e4f-9578-09a71b974927"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet User" mediaType="application/xml" sslKeystore="DLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#policyClass}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="9a427a9a-a933-4214-ac18-aae4cfb8ff65"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet User');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="610994ab-384f-49a8-af2f-28764f50bd61"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

Boolean policyError = false;
String policyWasFound = false;
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass[0].text();
}

switch (httpStatus) {
	case "HTTP/1.1 200 OK":
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	break;
	case "HTTP/1.1 404 Not Found":
		policyWasFound = "false";
		break;
	default:
		policyError = true;
		break;
}

if (policyError) {
	log.info "ERROR - Bad HTTP Status Code in API! - $httpStatus";
	assert 1 == 2;
} 

tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="5a68bc66-430c-41a2-b731-edcbe037abd1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));

if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyClass</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[Unauthorized request with Authorization value too short
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
<Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
       <Reason Language="en">The request is not authorized.</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>558</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81164</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6D195263E4E3B5E0401F0A059949B4</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E8D795B2AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE114E8D795B4AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/DLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2aeb2df6-3fdb-4ff7-979a-90f937abd398"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="32f24d21-4639-4f8d-9246-20607598f0fc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="fcf273dc-356e-43b2-a41d-756d35dca40a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="fbb694d7-20ea-4b36-8eff-d250b3146b9f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete User");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete User" id="88e91dce-aa2a-42cf-b83a-a023472e8f13"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete User" mediaType="application/xml" sslKeystore="3610_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicy}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="23574971-d04f-4377-a93e-cc3005130029"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete User');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="fdb0899d-efc0-405b-8a85-f63877b50bb4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="38d400ae-938a-4267-9160-c93ff2e7f989"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3610</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E114E25E319930F9E0401F0A05990E71</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:E114E25E319B30F9E0401F0A05990E71</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<html><head><title>JBoss Web/2.1.3.GA - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 412 - </h1><HR size="1" noshade="noshade"><p><b>type</b> Status report</p><p><b>message</b> <u></u></p><p><b>description</b> <u>A specified precondition has failed for this request ().</u></p><HR size="1" noshade="noshade"><h3>JBoss Web/2.1.3.GA</h3></body></html>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 412 Precondition Failed</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>text/html;charset=utf-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>388</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81165</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:E403E26556717E64E0401F0A0599765F</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E25E319930F9E0401F0A05990E71</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE114E25E319B30F9E0401F0A05990E71</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE403E26556717E64E0401F0A0599765F</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamRenew1" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="acc66aa7-d0f5-4105-8a34-8a8c0b8c76bd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="aad5fcab-5bc3-4e30-a09c-2ab990e08b03"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBUpdatedBy",null);
tC.setPropertyValue("streamHistoryRows",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="8dbbe436-f411-4b3a-a836-82d926c42c2f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBUpdatedBy",callTC.getPropertyValue("expectDBUpdatedBy"));

if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "null") {
	tC.setPropertyValue("expectDBStatus","active");
} 
if (tC.getPropertyValue("expectDBUpdatedBy") == null || tC.getPropertyValue("expectDBUpdatedBy") == "null") {
	tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} 
if (tC.getPropertyValue("nodetype") == null || tC.getPropertyValue("nodetype") == "null") {
	tC.setPropertyValue("nodetype","dlp");
} 
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "") {
	tC.setPropertyValue("counter","1");
} </script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="232edc38-e1e1-47bf-b89b-1e77fc2562b2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamCreate") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh')""";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="52ecb628-457e-492f-b37a-4dac5435edf7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PUT - StreamRenew");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA.EXPIRATION before API invocation" id="1fa81763-a61c-4cdc-8d66-575b7ad4b4c5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireBeforeRenew", a.streamGetExpireDate(tC.getPropertyValue("streamhandle")));



</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - StreamRenew" id="f4243990-6620-4df0-bcf6-39ab9e67306f"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - StreamRenew" mediaType="application/xml" postQueryString="false" sslKeystore="0914_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA.EXPIRATION after API invocation" id="e1004fa3-0354-44a2-9064-19007125affc"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("streamExpireAfterRenew", a.streamGetExpireDate(tC.getPropertyValue("streamhandle")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="c1e7c3c8-60c4-427f-9bba-e7924fbcd486"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="74b4578e-b1ea-4876-aa71-c36d0eb51332"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamRenew") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamRenew")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "Policy:RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
	break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamRenew").toString();
		break;
}

log.info "errId [$errId]";
try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="829732ae-5394-4f2c-9be4-94004d722e75"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamRenew");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag = true;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectDescription = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectStreamStatus = tC.getPropertyValue("expectDBStatus");
String received;

switch (expectStreamStatus) {
	case "active":
		expectDescription = "active"; break;
	case "deleted":
		expectDescription = "deleted"; break;
	default:
		expectDescription = "active"; break;
}		


this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;
	

     case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "Assertion_Not_Found":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Invalid Assertion";
		errorReason = "Assertion_Not_Found";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "NotFound":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		XMLbodynull = true;
		errorReason = "The supplied StreamHandleID was not found.";
		errorID = "urn:dece:errorid:org:dece:StreamNotFound";		
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NotFound";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/${account}/Stream/$urnstream[0-9, A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type

if(errorRespType == "NotFound"){
expectHTTPcontenttype = "text/xml";
}
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
				
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		String assertionUserIdFULL = "";
		String recvStreamHandle = myXML.@StreamHandleID.text();
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String recvExpirationDateTime = myXML.ExpirationDateTime;
		String Value = myXML.ResourceStatus.Current.Value;
		String recvDescription = myXML.ResourceStatus.Current.Description;
		String recvCreatedBy = myXML.ResourceStatus.Current.@CreatedBy.text();
		String recvModifiedBy = myXML.ResourceStatus.Current.@ModifiedBy.text();
		String recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();

		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		// StreamHandle ID
		log.info "recvStreamHandle[$recvStreamHandle] - Expect[" + tC.getPropertyValue("streamhandleFULL") + "]";
		assert recvStreamHandle == tC.getPropertyValue("streamhandleFULL");
		
		//RequestingUserID
		/*
		*  For llp and llpcs the requestinguserID element 
		*  should not be returned.  
		*/
		
		if (nodetype == "llp" || nodetype == "llpcs") {
			assertionUserIdFULL = "";
		} else {
			assertionUserIdFULL = tC.getPropertyValue("assertionUserIdFULL");
		}
		log.info "RequestingUserID[$RequestingUserID] - nodetype[$nodetype] - Expect[$assertionUserIdFULL]";
		assert RequestingUserID == assertionUserIdFULL;
		
		//RightsTokenID
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == tC.getPropertyValue("rightstokenidFULL");
		//ExpirationDate
		log.info "recvExpirationDateTime[$recvExpirationDateTime] - Size is " + recvExpirationDateTime.size();
		assert recvExpirationDateTime.size() > 0;

		//Value (status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		log.info "recvDescription[$recvDescription] - Expect[$expectDescription]";
		assert recvDescription == expectDescription;
		log.info "recvCreatedBy[$recvCreatedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBCreatedBy") + "]";
		assert recvCreatedBy == urnnode + tC.getPropertyValue("expectDBCreatedBy");
		log.info "recvModifiedBy[$recvModifiedBy] - Expect[" + urnnode + tC.getPropertyValue("nodeid") + "]";
		assert recvModifiedBy == urnnode + tC.getPropertyValue("nodeid");

		/*
		*  History validation
		*/
		if (tC.getPropertyValue("streamHistoryRows") != null) {
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		log.info "-------------HISTORY-----------------";
		log.info "Row Count is $rCnt";
		log.info "&lt;History> Row Count is " + myXML.ResourceStatus.History.size();

		assert myXML.ResourceStatus.History.Prior.size() == rCnt;

		for (int i = 0; i &lt; rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;
		}
	}
} 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Assert STREAM_DATA.EXPIRATION_DATE changed/unchanged based on API result" id="ad99ef26-f752-479b-9c10-49b06f65534f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	a = new generalUtils.generalUtils(log);

	int w = a.dateDiff(tC.getPropertyValue("streamExpireBeforeRenew"),tC.getPropertyValue("streamExpireAfterRenew"));
	int y = tP.getPropertyValue("streamRenewTimeHours").toInteger();

	//assert w == y;
	/*
	*  hack
	*/
	assert w -1 &lt;= y;
	assert w >= y - 1;
} else {
	/*
	*  If the API was not successful then STREAM_DATA.EXPIRATION_DATE should
	*  not have been modified...
	*/
	assert tC.getPropertyValue("streamExpireBeforeRenew") == tC.getPropertyValue("streamExpireAfterRenew");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Assert different between returned Create/Expire time less than 24 hours" id="f5064f6b-30eb-4fc6-bfad-e5d10b441d01"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
			cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
			cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
	String cDate = "";
	String eDate = "";
	int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
	
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than  hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_44850 - StreamRenew - DLP - Stream renew using q host</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CC471A4126DF4EB3E0401F0A07997EFF</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:CC471A4126DF4EB3E0401F0A07997EFF</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1029c393-6b62-44e3-ba8e-e9ce35d27fb1</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:CC471A4126D34EB3E0401F0A07997EFF</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2012/10/18 09:16:18</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value>2012/10/18 15:16:18</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:CC471A4126DF4EB3E0401F0A07997EFF" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:CC471A4126D34EB3E0401F0A07997EFF</RightsTokenID>
   <TransactionID>${=(int)(Math.random()*10000)</TransactionID>
   <ExpirationDateTime>2012-10-18T15:16:18.000Z</ExpirationDateTime>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0914" CreationDate="2012-10-17T19:16:11.804Z" ModifiedBy="urn:dece:org:org:dece:0914" ModificationDate="2012-10-17T19:16:23.556Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
      <History>
         <Prior ModifiedBy="urn:dece:org:org:dece:0914" ModificationDate="2012-10-17T19:16:11.804Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Prior>
      </History>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1313</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>recvCreationDate</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012-10-17T19:16:11.804Z</con:value></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2012-10-18T15:16:18.000Z</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81158</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="7454ab44-8e42-4b4a-ab6c-4a073e7d4805"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="88735341-67be-4ecc-8461-db833f1e67df"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="8f52e3d7-9107-448d-9151-f0d230212024"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" id="af72047f-fd04-4749-9106-7cfc6a3728d8"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7"/*,"us:tvpg:tv-y7-fv"*/,"us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvpgRatingsreasoncodesUS = ["us:tvpg:v","us:tvpg:s","us:tvpg:l","us:tvpg:d","us:tvpg:fv"];
fabUS = ["us:fab:c","us:fab:f","us:fab:pd","us:fab:pd-m","us:fab:em","us:fab:ao"];
fabreasoncodesUS = ["us:fab:violence","us:fab:frightening","us:fab:sexual","us:fab:mildlang","us:fab:stronglang","us:fab:substance","us:fab:intense","us:fab:bnudity","us:fab:fnudity","us:fab:explicit","us:fab:erotica"];
esrbgamesUS = ["us:esrb:ec","us:esrb:e","us:esrb:e10+","us:esrb:t","us:esrb:m","us:esrb:ao","us:esrb:rp"];
mpaattrailersUS = ["us:mpaat:gb","us:mpaat:rb"];
tvmovieRatingsGB = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18"];
chvrsRatingsCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r"];
cbscRatingsCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+"];
filmtvifcoIE = ["ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
filmtvncsAU = ["au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
filmtvoflcNZ = ["nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
MocRatingFR = ["FR:MOC:U","FR:MOC:10","FR:MOC:12","FR:MOC:16","FR:MOC:18"];
FSKRatingDE = ["DE:FSK:0","DE:FSK:6","DE:FSK:12","DE:FSK:16","DE:FSK:18"];
FSKRatingAT = ["AT:FSK:0","AT:FSK:6","AT:FSK:12","AT:FSK:16","AT:FSK:18"];
FSKRatingCH = ["CH:FSK:0","CH:FSK:6","CH:FSK:12","CH:FSK:16","CH:FSK:18"];
KijkwijzerRatingBE= ["BE:KIJKWIJZER:AL","BE:KIJKWIJZER:6","BE:KIJKWIJZER:9","BE:KIJKWIJZER:12","BE:KIJKWIJZER:16"];
MocRatingLU = ["LU:MOC:U","LU:MOC:10","LU:MOC:12","LU:MOC:16","LU:MOC:18"];
FSKRatingLU= ["LU:FSK:0","LU:FSK:6","LU:FSK:12","LU:FSK:16","LU:FSK:18"];
KijkwijzerRatingNL= ["NL:KIJKWIJZER:AL","NL:KIJKWIJZER:6","NL:KIJKWIJZER:9","NL:KIJKWIJZER:12","NL:KIJKWIJZER:16"];


String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:g":
	case "${urnRating}us:mpaa:pg":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:nc-17":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	//case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}us:tvpg:v":
	case "${urnRating}us:tvpg:s":
	case "${urnRating}us:tvpg:l":
	case "${urnRating}us:tvpg:d":
	case "${urnRating}us:tvpg:fv":
		for (rating in tvpgRatingsreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:c":
	case "${urnRating}us:fab:f":
	case "${urnRating}us:fab:pd":
	case "${urnRating}us:fab:pd-m":
	case "${urnRating}us:fab:em":
	case "${urnRating}us:fab:ao":
        	for (rating in fabUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:violence":
	case "${urnRating}us:fab:frightening":
	case "${urnRating}us:fab:sexual":
	case "${urnRating}us:fab:mildlang":
	case "${urnRating}us:fab:stronglang":
        case "${urnRating}us:fab:substance":
	case "${urnRating}us:fab:intense":
	case "${urnRating}us:fab:bnudity":
	case "${urnRating}us:fab:fnudity":
	case "${urnRating}us:fab:explicit":
	case "${urnRating}us:fab:erotica":
		for (rating in fabreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:esrb:ec":
	case "${urnRating}us:esrb:e":
	case "${urnRating}us:esrb:e10+":
	case "${urnRating}us:esrb:t":
	case "${urnRating}us:esrb:m":
	case "${urnRating}us:esrb:ao":
        case "${urnRating}us:esrb:rp":
        	for (rating in esrbgamesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:mpaat:gb":
        case "${urnRating}us:mpaat:rb":
        	for (rating in mpaattrailersUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
   
     //case "${urnRating}gb:bbfc:e":  
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        //case "${urnRating}ca:chvrs:e":   
        case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r": 
	//case "${urnRating}ca:chvrs:e":
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        //case "${urnRating}ca:cbsc:e": 
        case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
        case "${urnRating}ca:cbsc:18+":
      	//case "${urnRating}ca:cbsc:e":
      		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}ie:ifco:e": 
        case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
      		for (rating in filmtvifcoIE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        //case "${urnRating}au:ncs:e": 
        case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
      		for (rating in filmtvncsAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
        //case "${urnRating}nz:oflc:e": 
        case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
        case "${urnRating}nz:oflc:r16": 
        case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
	      		for (rating in filmtvoflcNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
       case "${urnRating}FR:MOC:U":
	case "${urnRating}FR:MOC:10":
	case "${urnRating}FR:MOC:12":
	case "${urnRating}FR:MOC:16":
	case "${urnRating}FR:MOC:18":
      		for (rating in MocRatingFR) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

	case "${urnRating}DE:FSK:0":
	case "${urnRating}DE:FSK:6":
	case "${urnRating}DE:FSK:12":
	case "${urnRating}DE:FSK:16":
	case "${urnRating}DE:FSK:18":
      		for (rating in FSKRatingDE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}AT:FSK:0":
	case "${urnRating}AT:FSK:6":
	case "${urnRating}AT:FSK:12":
	case "${urnRating}AT:FSK:16":
	case "${urnRating}AT:FSK:18":
      		for (rating in FSKRatingAT) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}CH:FSK:0":
	case "${urnRating}CH:FSK:6":
	case "${urnRating}CH:FSK:12":
	case "${urnRating}CH:FSK:16":
	case "${urnRating}CH:FSK:18":
      		for (rating in FSKRatingCH) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}BE:KIJKWIJZER:AL":
	case "${urnRating}BE:KIJKWIJZER:6":
	case "${urnRating}BE:KIJKWIJZER:9":
	case "${urnRating}BE:KIJKWIJZER:12":
	case "${urnRating}BE:KIJKWIJZER:16":
      		for (rating in KijkwijzerRatingBE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:FSK:0":
	case "${urnRating}LU:FSK:6":
	case "${urnRating}LU:FSK:12":
	case "${urnRating}LU:FSK:16":
	case "${urnRating}LU:FSK:18":
      		for (rating in FSKRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}LU:MOC:U":
	case "${urnRating}LU:MOC:10":
	case "${urnRating}LU:MOC:12":
	case "${urnRating}LU:MOC:16":
	case "${urnRating}LU:MOC:18":
      		for (rating in MocRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}NL:KIJKWIJZER:AL":
	case "${urnRating}NL:KIJKWIJZER:6":
	case "${urnRating}NL:KIJKWIJZER:9":
	case "${urnRating}NL:KIJKWIJZER:12":
	case "${urnRating}NL:KIJKWIJZER:16":
      		for (rating in KijkwijzerRatingNL) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
   
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);
]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="84cfc44c-f6b2-4a68-ab89-69b6d824ea52"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="9441c628-3fb6-401a-b46f-64660fa0b470"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnParentalControlRating}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="69fa8d3a-4acf-449c-b023-3f3592595060"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="ec027da5-155b-4fea-9292-5fada24baf02"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZZT+s6EH7nV0Th8SjNQrokopVC0vakrCKFA7wg47itaWK3sdOFX3/slJRucOFcqVLlyXjmm8XfzCkDaWK5HmMo45gSJQya6vOg8YLgwIm12GxUNRs6L9pLzQGaVX+xTGgZhuk0VCVkLEchYRwQ3lQtw7Q1o6ZZVt+0XNtyDbti10+eVOUeZUyYFioVQ1UWaUKYW7htqnlGXAoYZi4BKWIuh27kXV64QtMFJSa1dbpCWTjMWiPOJ66uw0qMIEoSWIE01U/1LZ3TmLkRHhLA8wy9+4xZU32/O5/PK/OTCs2GuojG0A1HFzoxw8NjtXVUXkZxSAZ0dfYBoQRDkOA3IEFdIj6iseIlQ5phPko/MW3qpiFNa2gBNWja5FjVPxwU6L5paQtkxoDGRsAsjd2iAcoQgUi5uw2b6vH3Kri6288AYQOapWzn/DNIiMxQQico1lgZWYnu+xYPpKt1iqAbEpjkDM/QlWyTCYCIKTcZGuDFBWai+WKmFOVXFkz8cNllCP6kLKf6JlYBXT+QnQAPEeP/UrPNeq2s3IMkR60H2o1Dpx1ZvenCNFPD8a/uvOVct51hs4CwqbwCtS73+3m3Wde99X4pQj3r2v/zAMZP3fvH320jsOMncBN7vx6vjM7JLzBOqqF/Zk39J0pm5uugdnmXd83Io6Pzew936z3rHMyDtHfbmBy9NUBe7Vq9xhsbdc8DY3n3NsfxZZfGN7XO4nfjDDqj5TKoGv6TYUT9wXx8H9DRIzMfgvT1Mb5L5rj2p9eod+dV6yjvh+OTfA4BD8Zj2HGuF2HzI6bNGLaFJSVE+csrgrw8yvYIA6Uj6gX41/QiJTjWBoWqO5EcxTgiXG3JW5Ja3FwQEI5dUczVuePXfC9o1+s1z7Yto9E2bMPsGJ5RdRzb9J2Sg1YodiD6lAyw9CVZdtU/XwOEqcsQiVGmzWgOR4ipX1gMAAdKSG7F46CEoT4VLG4OwWuDZtORiWxknqTOgA1r08mYLVTlivJrcp15A46ybe6ubnH3LYJ4gpEkeNnhTLQ44yIZUzDLeWJWZqBCUC5GQCZZ2LXsRlVnOJ0kSELVUxrnCapMRpMiNTpb/VsagKyQ3rb7xcv7NLDdb2UOhE6MpQKTsZwhUUe0N4RMt1oGshdw9eCwKs17eYzlAxMJ5RmGKyTbnz76RDbIukmCCy+6KUGvdX9w99mPns1/NHDxfw2Ieuzf1L/Iib5bjrWjeIY33JbDXMwnwV6tspmmoDKt5LNZXrRPXTJzJszrgqBNPUIwF/S67NMxIvrahP6t6bZGveN5Ld/Gl/MRiTjgKBXNrhTHb6w2EWJytQnFM118d2/acinyxtGCH5L5idiAJOIvlyToQqknxDfib06z+KNcB2xt+BFxin2GYzKUJznHlp80BaTCLBbES7NN44cMHHK+LVwneY2Fi256yTn6/IsiGbWpAghpTngYqIVgk+ULnHw5Qe6H0p6ZYpK8rwYL9ulq8HB5EQm+TYG61sX/razhol0gUuUGUmBpqgux6QrnZLgxVd4B7g+WjtEO2t5Jw6/tDJZgncCtSFp74n3JRk5330PrLw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6CADF0EDEA38C6E0401F0A059941CD/User/urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:CH:FSK:16</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish Parental Control Rating</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value><![CDATA[<dece:Resource>urn:dece:type:rating:CH:FSK:0</dece:Resource>
<dece:Resource>urn:dece:type:rating:CH:FSK:6</dece:Resource>
<dece:Resource>urn:dece:type:rating:CH:FSK:12</dece:Resource>
<dece:Resource>urn:dece:type:rating:CH:FSK:16</dece:Resource>
]]></con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6CADE776A44208E0401F0A059941C9</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalConrolRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="f8da0068-b88d-4eee-bb5b-9d23a74a8044"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="348f155b-3047-4806-a0fe-0092970a3794"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="9daac22d-7df9-4859-bdfa-8e4712be2451"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="85d64caa-6a9d-4c47-a1f3-266119b88b48"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="92840355-f92e-4787-9a85-b45bcc62aacc"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="DLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnParentalControlRating}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="04312149-bd0c-4cc8-a10e-139d60134dc1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="a56940ea-a164-47ae-b96b-a8aaf946c07c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK" ) {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	
} else {
	log.info "ERROR!";
	assert 1 == 2;
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="e385b848-53d0-46fb-b249-cb5b8e8e853c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvM4ZbyAIXYFqgyEDBMIaxbykhJyA0psGSyZJV8/kgGHLbnM3CeX2q3Tpxd19zVDgW86LmMQcRLSzCrwKXMSaUmJI+qEiBHmUBQAczh2+m6r6ZhZ3UG7K0qmUSsprwVUsDwPsHpVGOtq3rZN1R7ppgo5HYGd90ZGvihUGYuhQRlHlJcUUzcsVc+rhjUwdEcvOGY+e2UVX5TMI0RMYAuVrK5sSa1YSZlyPnM0bblcZpe5bBhNNFPXDe251ezjKQRIKV9vPEoMReWtPs4KZuD7OIvDQLvWDnSuPeb0yYQiHkewteV9ZUvXdFsTOh4jkx9Kehe8Bh2HybGKaEgJRj75QDI+LeDT0Mu4/iSMCJ8GXzph6BJYhRVWsZGnPxTtkNqFQAcMI4ZUNkXGFqsHY4iAYsg89Bol5cdlWUuuDiJE2TiMAnZ4/Ds+QBfghzPwVLZza0vtcsAzkSpfA3YaFPsxIwu4l8U6QxjYNpuAL4fKdCIYk1WTMFGgKybZafv0jo6baNTIBBj/lwTtJWcD8oj8GMpeYU31t4Hb/d1+e/+o3HTbBYvfjae9zlUpIbCvnAjS1G6OR0WZFtEWftzV7s2FWx268+jRn1ZaL4XbHB8+2C8t6+cgh1yTrVYde+2vOiOzvSKDh5cA6sHzbSdom0PeHC6e3VaRvhfad+6vKaWDYesnMZvr30bFD0fzcd2GOnmiepc1One40WvW/W7tcd7rtKrGr7F162qjofHQDwPetp59t/dsvLRmw2hU15a8/9Tqihe6bhWf2P17KXVnj/+hbPfm+/HoDTDfHWUZNGqZusgS4t83MykhnjpOVJ2ZbD6MA+VKWd6SvcOJRbsjniNyuDkbuaph1nNuTbcs3batG93K6ZZtG3XdtWs31V2T2bA4olgN6ZhIW7Llbsrme4I4cBhQDyJ1Ecai0zHlG8Qa4ijToD3xCELKYBCK9myYH5PiajSB0QhGhp2bQ1h4Yx95+qZk7kPepu3IHXOIDpty7qAp9wCTGQHZuWVhM1HZjItgzNEi5r6RXaAshVj09ki2WXHvytIYCWY+SKpaEHqxD9nZdJaERmObr6kizBJp72aQPLcvHTv+t4uB0PGIVGDSlwqIPMKZ6WLsHDlxuHB2Cu3g3dgj8mWJgPKI4A2Tw1+fdSILJC2SWtPtd3akU92/uPta7b8a/wjQ/L8AIh+nN7VvYqIdpyM15C3Intnd6iCGkGhb5V0xzZGRnWfjxSJO6iefz2mRgNdkIjXd1PqAY9FY14PwHaiWomgXTbGU+JHxVH5IMeZT2ueIQyDqPZMcL1hb+sDk2tIQL3V16U50YFKEjsOKn5NVfbFyScbfbmXYwVJPiDviswwj7zNjZ7D27Ag/xdbCCZ3Ik5xg6y/qAocClojeG0b74OcAzhk/FKZBTrlwUVCjmMPXfzKyqZYUhHEYU96oKYlgv9EnPPl6Bs6n0glMMkvS5ZL893apkqQEMIiVlJEEX+4IjnwCdLI3LLZGT+eFZdm1q0rBtGr788KsFK00KAfsyifiU8lenI5rvPwH</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13C12F559D8B625DE05305991F0A2B75</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13C12F3AD0550995E05305991F0A9DEC</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:13C12F559D8B625DE05305991F0A2B75/User/urn:dece:userid:org:dece:13C12F3AD0550995E05305991F0A9DEC/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6E3D3F278DBD52E0401F0A05997550</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C12F559D8B625DE05305991F0A2B75</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C12F3AD0550995E05305991F0A9DEC</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlRating" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="a1545ea1-731b-4709-86d1-2bea475fdc0a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e264e04d-6c29-4c78-b25f-6c5a7312c367"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="1f3e890c-a31b-43c0-ad9c-00c9f9ccf54a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="1fb16ddd-4f78-4ead-a51b-c855878c310c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="52cac0fe-073b-41ac-a8fb-7b8253d5e6f4"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="LLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="27f2151d-e0a3-4531-b3db-41669358d8a0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="4ffa4992-e36c-48fe-9fb4-c24a13f16649"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="c1c963c9-34e4-4ed2-994b-cf9e03d89c48"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZZT+s6EH7nV0Th8SjNQrokopVC0vakrCKFA7wg47itaWK3sdOFX3/slJRucOFcqVLlyXjmm8XfzCkDaWK5HmMo45gSJQya6vOg8YLgwIm12GxUNRs6L9pLzQGaVX+xTGgZhuk0VCVkLEchYRwQ3lQtw7Q1o6ZZVt+0XNtyDbti10+eVOUeZUyYFioVQ1UWaUKYW7htqnlGXAoYZi4BKWIuh27kXV64QtMFJSa1dbpCWTjMWiPOJ66uw0qMIEoSWIE01U/1LZ3TmLkRHhLA8wy9+4xZU32/O5/PK/OTCs2GuojG0A1HFzoxw8NjtXVUXkZxSAZ0dfYBoQRDkOA3IEFdIj6iseIlQ5phPko/MW3qpiFNa2gBNWja5FjVPxwU6L5paQtkxoDGRsAsjd2iAcoQgUi5uw2b6vH3Kri6288AYQOapWzn/DNIiMxQQico1lgZWYnu+xYPpKt1iqAbEpjkDM/QlWyTCYCIKTcZGuDFBWai+WKmFOVXFkz8cNllCP6kLKf6JlYBXT+QnQAPEeP/UrPNeq2s3IMkR60H2o1Dpx1ZvenCNFPD8a/uvOVct51hs4CwqbwCtS73+3m3Wde99X4pQj3r2v/zAMZP3fvH320jsOMncBN7vx6vjM7JLzBOqqF/Zk39J0pm5uugdnmXd83Io6Pzew936z3rHMyDtHfbmBy9NUBe7Vq9xhsbdc8DY3n3NsfxZZfGN7XO4nfjDDqj5TKoGv6TYUT9wXx8H9DRIzMfgvT1Mb5L5rj2p9eod+dV6yjvh+OTfA4BD8Zj2HGuF2HzI6bNGLaFJSVE+csrgrw8yvYIA6Uj6gX41/QiJTjWBoWqO5EcxTgiXG3JW5Ja3FwQEI5dUczVuePXfC9o1+s1z7Yto9E2bMPsGJ5RdRzb9J2Sg1YodiD6lAyw9CVZdtU/XwOEqcsQiVGmzWgOR4ipX1gMAAdKSG7F46CEoT4VLG4OwWuDZtORiWxknqTOgA1r08mYLVTlivJrcp15A46ybe6ubnH3LYJ4gpEkeNnhTLQ44yIZUzDLeWJWZqBCUC5GQCZZ2LXsRlVnOJ0kSELVUxrnCapMRpMiNTpb/VsagKyQ3rb7xcv7NLDdb2UOhE6MpQKTsZwhUUe0N4RMt1oGshdw9eCwKs17eYzlAxMJ5RmGKyTbnz76RDbIukmCCy+6KUGvdX9w99mPns1/NHDxfw2Ieuzf1L/Iib5bjrWjeIY33JbDXMwnwV6tspmmoDKt5LNZXrRPXTJzJszrgqBNPUIwF/S67NMxIvrahP6t6bZGveN5Ld/Gl/MRiTjgKBXNrhTHb6w2EWJytQnFM118d2/acinyxtGCH5L5idiAJOIvlyToQqknxDfib06z+KNcB2xt+BFxin2GYzKUJznHlp80BaTCLBbES7NN44cMHHK+LVwneY2Fi256yTn6/IsiGbWpAghpTngYqIVgk+ULnHw5Qe6H0p6ZYpK8rwYL9ulq8HB5EQm+TYG61sX/razhol0gUuUGUmBpqgux6QrnZLgxVd4B7g+WjtEO2t5Jw6/tDJZgncCtSFp74n3JRk5330PrLw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6E3D3F278DBD52E0401F0A05997550</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6CADE776A44208E0401F0A059941C9</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="144a1229-ed25-4249-9a5a-d577dadd766b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="70b5b3f0-bd40-4dd3-9d4f-ff30b838d222"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="78252ac4-22fd-4777-a382-78e365585ccf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="15b74c44-6b94-4f4e-aa34-0ae133b7390f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="da90f73b-babd-4555-9dc0-b2cd4d56501e"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnParentalControlBlockUnratedContent}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="12dd2023-865d-400b-87a0-cdb52b05355b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="3644bf23-bff5-4af1-a8d9-8c67bbdc3054"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZZT+s6EH7nV0Th8SjNQrokopVC0vakrCKFA7wg47itaWK3sdOFX3/slJRucOFcqVLlyXjmm8XfzCkDaWK5HmMo45gSJQya6vOg8YLgwIm12GxUNRs6L9pLzQGaVX+xTGgZhuk0VCVkLEchYRwQ3lQtw7Q1o6ZZVt+0XNtyDbti10+eVOUeZUyYFioVQ1UWaUKYW7htqnlGXAoYZi4BKWIuh27kXV64QtMFJSa1dbpCWTjMWiPOJ66uw0qMIEoSWIE01U/1LZ3TmLkRHhLA8wy9+4xZU32/O5/PK/OTCs2GuojG0A1HFzoxw8NjtXVUXkZxSAZ0dfYBoQRDkOA3IEFdIj6iseIlQ5phPko/MW3qpiFNa2gBNWja5FjVPxwU6L5paQtkxoDGRsAsjd2iAcoQgUi5uw2b6vH3Kri6288AYQOapWzn/DNIiMxQQico1lgZWYnu+xYPpKt1iqAbEpjkDM/QlWyTCYCIKTcZGuDFBWai+WKmFOVXFkz8cNllCP6kLKf6JlYBXT+QnQAPEeP/UrPNeq2s3IMkR60H2o1Dpx1ZvenCNFPD8a/uvOVct51hs4CwqbwCtS73+3m3Wde99X4pQj3r2v/zAMZP3fvH320jsOMncBN7vx6vjM7JLzBOqqF/Zk39J0pm5uugdnmXd83Io6Pzew936z3rHMyDtHfbmBy9NUBe7Vq9xhsbdc8DY3n3NsfxZZfGN7XO4nfjDDqj5TKoGv6TYUT9wXx8H9DRIzMfgvT1Mb5L5rj2p9eod+dV6yjvh+OTfA4BD8Zj2HGuF2HzI6bNGLaFJSVE+csrgrw8yvYIA6Uj6gX41/QiJTjWBoWqO5EcxTgiXG3JW5Ja3FwQEI5dUczVuePXfC9o1+s1z7Yto9E2bMPsGJ5RdRzb9J2Sg1YodiD6lAyw9CVZdtU/XwOEqcsQiVGmzWgOR4ipX1gMAAdKSG7F46CEoT4VLG4OwWuDZtORiWxknqTOgA1r08mYLVTlivJrcp15A46ybe6ubnH3LYJ4gpEkeNnhTLQ44yIZUzDLeWJWZqBCUC5GQCZZ2LXsRlVnOJ0kSELVUxrnCapMRpMiNTpb/VsagKyQ3rb7xcv7NLDdb2UOhE6MpQKTsZwhUUe0N4RMt1oGshdw9eCwKs17eYzlAxMJ5RmGKyTbnz76RDbIukmCCy+6KUGvdX9w99mPns1/NHDxfw2Ieuzf1L/Iib5bjrWjeIY33JbDXMwnwV6tspmmoDKt5LNZXrRPXTJzJszrgqBNPUIwF/S67NMxIvrahP6t6bZGveN5Ld/Gl/MRiTjgKBXNrhTHb6w2EWJytQnFM118d2/acinyxtGCH5L5idiAJOIvlyToQqknxDfib06z+KNcB2xt+BFxin2GYzKUJznHlp80BaTCLBbES7NN44cMHHK+LVwneY2Fi256yTn6/IsiGbWpAghpTngYqIVgk+ULnHw5Qe6H0p6ZYpK8rwYL9ulq8HB5EQm+TYG61sX/razhol0gUuUGUmBpqgux6QrnZLgxVd4B7g+WjtEO2t5Jw6/tDJZgncCtSFp74n3JRk5330PrLw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6CADF0EDEA38C6E0401F0A059941CD/User/urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:US:MPAA:G</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - General Policy Establishment</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6CADE776A44208E0401F0A059941C9</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="5b0078c5-515d-4bc1-affb-ee0e84c3c8ad"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ad35817e-09d2-4980-b826-f10448296361"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="ada93987-4f24-4c2e-9a39-4ec473a48477"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="9a86e548-f496-4c97-89cb-6671a13bf681"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="34a78c6e-2613-4181-b92c-90aeb389e12e"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="DLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnParentalControlBlockUnratedContent}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="00a459e5-84ee-4aea-94e6-c1bffc952c2a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="cb050320-d7a6-4f07-ae3e-b40cac665236"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	//tC.setPropertyValue("policyExists", policyWasFound);
} else {
	log.info "ERROR!";
	assert 1 == 2;
}




tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="bb1d319b-f985-4d00-9f22-7c20668866d3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvM4ZbyAIXYFqgyEDBMIaxbykhJyA0psGSyZJV8/kgGHLbnM3CeX2q3Tpxd19zVDgW86LmMQcRLSzCrwKXMSaUmJI+qEiBHmUBQAczh2+m6r6ZhZ3UG7K0qmUSsprwVUsDwPsHpVGOtq3rZN1R7ppgo5HYGd90ZGvihUGYuhQRlHlJcUUzcsVc+rhjUwdEcvOGY+e2UVX5TMI0RMYAuVrK5sSa1YSZlyPnM0bblcZpe5bBhNNFPXDe251ezjKQRIKV9vPEoMReWtPs4KZuD7OIvDQLvWDnSuPeb0yYQiHkewteV9ZUvXdFsTOh4jkx9Kehe8Bh2HybGKaEgJRj75QDI+LeDT0Mu4/iSMCJ8GXzph6BJYhRVWsZGnPxTtkNqFQAcMI4ZUNkXGFqsHY4iAYsg89Bol5cdlWUuuDiJE2TiMAnZ4/Ds+QBfghzPwVLZza0vtcsAzkSpfA3YaFPsxIwu4l8U6QxjYNpuAL4fKdCIYk1WTMFGgKybZafv0jo6baNTIBBj/lwTtJWcD8oj8GMpeYU31t4Hb/d1+e/+o3HTbBYvfjae9zlUpIbCvnAjS1G6OR0WZFtEWftzV7s2FWx268+jRn1ZaL4XbHB8+2C8t6+cgh1yTrVYde+2vOiOzvSKDh5cA6sHzbSdom0PeHC6e3VaRvhfad+6vKaWDYesnMZvr30bFD0fzcd2GOnmiepc1One40WvW/W7tcd7rtKrGr7F162qjofHQDwPetp59t/dsvLRmw2hU15a8/9Tqihe6bhWf2P17KXVnj/+hbPfm+/HoDTDfHWUZNGqZusgS4t83MykhnjpOVJ2ZbD6MA+VKWd6SvcOJRbsjniNyuDkbuaph1nNuTbcs3batG93K6ZZtG3XdtWs31V2T2bA4olgN6ZhIW7Llbsrme4I4cBhQDyJ1Ecai0zHlG8Qa4ijToD3xCELKYBCK9myYH5PiajSB0QhGhp2bQ1h4Yx95+qZk7kPepu3IHXOIDpty7qAp9wCTGQHZuWVhM1HZjItgzNEi5r6RXaAshVj09ki2WXHvytIYCWY+SKpaEHqxD9nZdJaERmObr6kizBJp72aQPLcvHTv+t4uB0PGIVGDSlwqIPMKZ6WLsHDlxuHB2Cu3g3dgj8mWJgPKI4A2Tw1+fdSILJC2SWtPtd3akU92/uPta7b8a/wjQ/L8AIh+nN7VvYqIdpyM15C3Intnd6iCGkGhb5V0xzZGRnWfjxSJO6iefz2mRgNdkIjXd1PqAY9FY14PwHaiWomgXTbGU+JHxVH5IMeZT2ueIQyDqPZMcL1hb+sDk2tIQL3V16U50YFKEjsOKn5NVfbFyScbfbmXYwVJPiDviswwj7zNjZ7D27Ag/xdbCCZ3Ik5xg6y/qAocClojeG0b74OcAzhk/FKZBTrlwUVCjmMPXfzKyqZYUhHEYU96oKYlgv9EnPPl6Bs6n0glMMkvS5ZL893apkqQEMIiVlJEEX+4IjnwCdLI3LLZGT+eFZdm1q0rBtGr788KsFK00KAfsyifiU8lenI5rvPwH</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13C12F559D8B625DE05305991F0A2B75</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13C12F3AD0550995E05305991F0A9DEC</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:13C12F559D8B625DE05305991F0A2B75/User/urn:dece:userid:org:dece:13C12F3AD0550995E05305991F0A9DEC/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6E3D3FE2A8C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C12F559D8B625DE05305991F0A2B75</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C12F3AD0550995E05305991F0A9DEC</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlBlockUnratedContent" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="f1c31fa9-73c8-4821-81d4-f37421f5f31f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9756699d-1378-4698-82cc-c21467fe6ec9"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="e10d0cf1-39e8-43b6-a7ba-2e444fdc8fe7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="ded27bc4-3b10-4f6b-b8db-bf24b9511e7d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="f0bb24c9-f8f9-463e-b1a1-18fc157bef06"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="LLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="7ebfcc4d-5afe-4c87-a351-47cc39f408a1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="77076462-b82f-470f-a851-2ac167c847db"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="6293ff71-4898-43e9-9ae5-7246cd0fce4f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZZT+s6EH7nV0Th8SjNQrokopVC0vakrCKFA7wg47itaWK3sdOFX3/slJRucOFcqVLlyXjmm8XfzCkDaWK5HmMo45gSJQya6vOg8YLgwIm12GxUNRs6L9pLzQGaVX+xTGgZhuk0VCVkLEchYRwQ3lQtw7Q1o6ZZVt+0XNtyDbti10+eVOUeZUyYFioVQ1UWaUKYW7htqnlGXAoYZi4BKWIuh27kXV64QtMFJSa1dbpCWTjMWiPOJ66uw0qMIEoSWIE01U/1LZ3TmLkRHhLA8wy9+4xZU32/O5/PK/OTCs2GuojG0A1HFzoxw8NjtXVUXkZxSAZ0dfYBoQRDkOA3IEFdIj6iseIlQ5phPko/MW3qpiFNa2gBNWja5FjVPxwU6L5paQtkxoDGRsAsjd2iAcoQgUi5uw2b6vH3Kri6288AYQOapWzn/DNIiMxQQico1lgZWYnu+xYPpKt1iqAbEpjkDM/QlWyTCYCIKTcZGuDFBWai+WKmFOVXFkz8cNllCP6kLKf6JlYBXT+QnQAPEeP/UrPNeq2s3IMkR60H2o1Dpx1ZvenCNFPD8a/uvOVct51hs4CwqbwCtS73+3m3Wde99X4pQj3r2v/zAMZP3fvH320jsOMncBN7vx6vjM7JLzBOqqF/Zk39J0pm5uugdnmXd83Io6Pzew936z3rHMyDtHfbmBy9NUBe7Vq9xhsbdc8DY3n3NsfxZZfGN7XO4nfjDDqj5TKoGv6TYUT9wXx8H9DRIzMfgvT1Mb5L5rj2p9eod+dV6yjvh+OTfA4BD8Zj2HGuF2HzI6bNGLaFJSVE+csrgrw8yvYIA6Uj6gX41/QiJTjWBoWqO5EcxTgiXG3JW5Ja3FwQEI5dUczVuePXfC9o1+s1z7Yto9E2bMPsGJ5RdRzb9J2Sg1YodiD6lAyw9CVZdtU/XwOEqcsQiVGmzWgOR4ipX1gMAAdKSG7F46CEoT4VLG4OwWuDZtORiWxknqTOgA1r08mYLVTlivJrcp15A46ybe6ubnH3LYJ4gpEkeNnhTLQ44yIZUzDLeWJWZqBCUC5GQCZZ2LXsRlVnOJ0kSELVUxrnCapMRpMiNTpb/VsagKyQ3rb7xcv7NLDdb2UOhE6MpQKTsZwhUUe0N4RMt1oGshdw9eCwKs17eYzlAxMJ5RmGKyTbnz76RDbIukmCCy+6KUGvdX9w99mPns1/NHDxfw2Ieuzf1L/Iib5bjrWjeIY33JbDXMwnwV6tspmmoDKt5LNZXrRPXTJzJszrgqBNPUIwF/S67NMxIvrahP6t6bZGveN5Ld/Gl/MRiTjgKBXNrhTHb6w2EWJytQnFM118d2/acinyxtGCH5L5idiAJOIvlyToQqknxDfib06z+KNcB2xt+BFxin2GYzKUJznHlp80BaTCLBbES7NN44cMHHK+LVwneY2Fi256yTn6/IsiGbWpAghpTngYqIVgk+ULnHw5Qe6H0p6ZYpK8rwYL9ulq8HB5EQm+TYG61sX/razhol0gUuUGUmBpqgux6QrnZLgxVd4B7g+WjtEO2t5Jw6/tDJZgncCtSFp74n3JRk5330PrLw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6E3D3FE2A8C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6CADE776A44208E0401F0A059941C9</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="3cd6e4af-217d-45eb-9148-b10084bc9874"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3c74cc63-6ef4-49c8-94ac-fcfa4ad13cd6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="261f8271-4e33-436a-a7c3-50e7642e9d29"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="fd2835ea-88ee-4c65-a1eb-23c8ce82c497"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - PolicyCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate" id="2496d737-6315-4932-8f7b-7a36bd1831b4"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#policyClass}</dece:PolicyClass>  
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#assertionUserId}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnParentalControlAllowAdult}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="d4760247-3a31-44c4-a704-77b095d4ed21"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="7cd94ce8-2b7c-4d71-8323-b09c8d1663df"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZZT+s6EH7nV0Th8SjNQrokopVC0vakrCKFA7wg47itaWK3sdOFX3/slJRucOFcqVLlyXjmm8XfzCkDaWK5HmMo45gSJQya6vOg8YLgwIm12GxUNRs6L9pLzQGaVX+xTGgZhuk0VCVkLEchYRwQ3lQtw7Q1o6ZZVt+0XNtyDbti10+eVOUeZUyYFioVQ1UWaUKYW7htqnlGXAoYZi4BKWIuh27kXV64QtMFJSa1dbpCWTjMWiPOJ66uw0qMIEoSWIE01U/1LZ3TmLkRHhLA8wy9+4xZU32/O5/PK/OTCs2GuojG0A1HFzoxw8NjtXVUXkZxSAZ0dfYBoQRDkOA3IEFdIj6iseIlQ5phPko/MW3qpiFNa2gBNWja5FjVPxwU6L5paQtkxoDGRsAsjd2iAcoQgUi5uw2b6vH3Kri6288AYQOapWzn/DNIiMxQQico1lgZWYnu+xYPpKt1iqAbEpjkDM/QlWyTCYCIKTcZGuDFBWai+WKmFOVXFkz8cNllCP6kLKf6JlYBXT+QnQAPEeP/UrPNeq2s3IMkR60H2o1Dpx1ZvenCNFPD8a/uvOVct51hs4CwqbwCtS73+3m3Wde99X4pQj3r2v/zAMZP3fvH320jsOMncBN7vx6vjM7JLzBOqqF/Zk39J0pm5uugdnmXd83Io6Pzew936z3rHMyDtHfbmBy9NUBe7Vq9xhsbdc8DY3n3NsfxZZfGN7XO4nfjDDqj5TKoGv6TYUT9wXx8H9DRIzMfgvT1Mb5L5rj2p9eod+dV6yjvh+OTfA4BD8Zj2HGuF2HzI6bNGLaFJSVE+csrgrw8yvYIA6Uj6gX41/QiJTjWBoWqO5EcxTgiXG3JW5Ja3FwQEI5dUczVuePXfC9o1+s1z7Yto9E2bMPsGJ5RdRzb9J2Sg1YodiD6lAyw9CVZdtU/XwOEqcsQiVGmzWgOR4ipX1gMAAdKSG7F46CEoT4VLG4OwWuDZtORiWxknqTOgA1r08mYLVTlivJrcp15A46ybe6ubnH3LYJ4gpEkeNnhTLQ44yIZUzDLeWJWZqBCUC5GQCZZ2LXsRlVnOJ0kSELVUxrnCapMRpMiNTpb/VsagKyQ3rb7xcv7NLDdb2UOhE6MpQKTsZwhUUe0N4RMt1oGshdw9eCwKs17eYzlAxMJ5RmGKyTbnz76RDbIukmCCy+6KUGvdX9w99mPns1/NHDxfw2Ieuzf1L/Iib5bjrWjeIY33JbDXMwnwV6tspmmoDKt5LNZXrRPXTJzJszrgqBNPUIwF/S67NMxIvrahP6t6bZGveN5Ld/Gl/MRiTjgKBXNrhTHb6w2EWJytQnFM118d2/acinyxtGCH5L5idiAJOIvlyToQqknxDfib06z+KNcB2xt+BFxin2GYzKUJznHlp80BaTCLBbES7NN44cMHHK+LVwneY2Fi256yTn6/IsiGbWpAghpTngYqIVgk+ULnHw5Qe6H0p6ZYpK8rwYL9ulq8HB5EQm+TYG61sX/razhol0gUuUGUmBpqgux6QrnZLgxVd4B7g+WjtEO2t5Jw6/tDJZgncCtSFp74n3JRk5330PrLw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC6CADF0EDEA38C6E0401F0A059941CD/User/urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Allow Adult Policy Establishment</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6CADE776A44208E0401F0A059941C9</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="ca4f431c-01ab-4054-a5e5-e43f0c92ea58"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1bfeb590-de28-4861-a571-167b1e7ea2bf"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="46acb471-4b11-49dd-9855-caa2af365cba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));

tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="d982e29e-352c-426e-b0ab-425a95c75303"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet" id="06868568-8c23-4247-9acc-e824af983785"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet" mediaType="application/xml" sslKeystore="LLASP_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnParentalControlAllowAdult}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="37863a3d-4a8d-470d-ad8b-e0eb409e207a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="24db9f37-0c17-4703-9f84-862d66d4138b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema")

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK") {
	def myXML1 = new XmlSlurper().parseText(XMLbody);
	def PolicyIDFull = myXML1.Policy.@PolicyID.text().toString();
	int lastColon = PolicyIDFull.lastIndexOf(':');
	PolicyID     = PolicyIDFull.substring(lastColon + 1);
	log.info"=========="+PolicyID
	policyWasFound = "true";
	tC.setPropertyValue("PolicyID",PolicyID);
	
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
	//tC.setPropertyValue("policyExists", policyWasFound);
} else {
	log.info "ERROR!";
	assert 1 == 2;
}




tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="f5f72be4-794d-42b9-a3f7-a2bfe34c80f0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));


if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Allow Adult Policy Establishment</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[Unauthorized request with Authorization value too short
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
<Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
       <Reason Language="en">The request is not authorized.</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>558</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6E3CE067EBD388E0401F0A07990932</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for ParentalControlAllowAdult" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="847927bd-80d1-49e1-b052-fe25c1af25c0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="213a5dc1-26cf-4d6e-8428-fe5c471d706e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="e1b2b486-6a34-4604-a9cf-0120cd11152e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="3033b0f7-8b86-4874-9e35-3e5e38f7914d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete" id="d0549d7b-fc06-4554-9c91-0cf1148b9c78"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="LLASP_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="POLICYCLASS" value="${#Project#urnPolicyID}${#TestCase#PolicyID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="95898e79-4786-4cad-b3c3-0da0359364bd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers" id="4c76a0e4-4809-4512-9d24-0d928d0dbd93"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case" id="54f71381-5b6a-4385-8679-8f669594825b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove Allow Adult Policy</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>pVZZT+s6EH7nV0Th8SjNQrokopVC0vakrCKFA7wg47itaWK3sdOFX3/slJRucOFcqVLlyXjmm8XfzCkDaWK5HmMo45gSJQya6vOg8YLgwIm12GxUNRs6L9pLzQGaVX+xTGgZhuk0VCVkLEchYRwQ3lQtw7Q1o6ZZVt+0XNtyDbti10+eVOUeZUyYFioVQ1UWaUKYW7htqnlGXAoYZi4BKWIuh27kXV64QtMFJSa1dbpCWTjMWiPOJ66uw0qMIEoSWIE01U/1LZ3TmLkRHhLA8wy9+4xZU32/O5/PK/OTCs2GuojG0A1HFzoxw8NjtXVUXkZxSAZ0dfYBoQRDkOA3IEFdIj6iseIlQ5phPko/MW3qpiFNa2gBNWja5FjVPxwU6L5paQtkxoDGRsAsjd2iAcoQgUi5uw2b6vH3Kri6288AYQOapWzn/DNIiMxQQico1lgZWYnu+xYPpKt1iqAbEpjkDM/QlWyTCYCIKTcZGuDFBWai+WKmFOVXFkz8cNllCP6kLKf6JlYBXT+QnQAPEeP/UrPNeq2s3IMkR60H2o1Dpx1ZvenCNFPD8a/uvOVct51hs4CwqbwCtS73+3m3Wde99X4pQj3r2v/zAMZP3fvH320jsOMncBN7vx6vjM7JLzBOqqF/Zk39J0pm5uugdnmXd83Io6Pzew936z3rHMyDtHfbmBy9NUBe7Vq9xhsbdc8DY3n3NsfxZZfGN7XO4nfjDDqj5TKoGv6TYUT9wXx8H9DRIzMfgvT1Mb5L5rj2p9eod+dV6yjvh+OTfA4BD8Zj2HGuF2HzI6bNGLaFJSVE+csrgrw8yvYIA6Uj6gX41/QiJTjWBoWqO5EcxTgiXG3JW5Ja3FwQEI5dUczVuePXfC9o1+s1z7Yto9E2bMPsGJ5RdRzb9J2Sg1YodiD6lAyw9CVZdtU/XwOEqcsQiVGmzWgOR4ipX1gMAAdKSG7F46CEoT4VLG4OwWuDZtORiWxknqTOgA1r08mYLVTlivJrcp15A46ybe6ubnH3LYJ4gpEkeNnhTLQ44yIZUzDLeWJWZqBCUC5GQCZZ2LXsRlVnOJ0kSELVUxrnCapMRpMiNTpb/VsagKyQ3rb7xcv7NLDdb2UOhE6MpQKTsZwhUUe0N4RMt1oGshdw9eCwKs17eYzlAxMJ5RmGKyTbnz76RDbIukmCCy+6KUGvdX9w99mPns1/NHDxfw2Ieuzf1L/Iib5bjrWjeIY33JbDXMwnwV6tspmmoDKt5LNZXrRPXTJzJszrgqBNPUIwF/S67NMxIvrahP6t6bZGveN5Ld/Gl/MRiTjgKBXNrhTHb6w2EWJytQnFM118d2/acinyxtGCH5L5idiAJOIvlyToQqknxDfib06z+KNcB2xt+BFxin2GYzKUJznHlp80BaTCLBbES7NN44cMHHK+LVwneY2Fi256yTn6/IsiGbWpAghpTngYqIVgk+ULnHw5Qe6H0p6ZYpK8rwYL9ulq8HB5EQm+TYG61sX/razhol0gUuUGUmBpqgux6QrnZLgxVd4B7g+WjtEO2t5Jw6/tDJZgncCtSFp74n3JRk5330PrLw==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:FC6CADE776A44208E0401F0A059941C9</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6E3CE067EBD388E0401F0A07990932</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>assertionUserIdFULLEncoded</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE68F7AD0B700B174E0401F0A0799424D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/LLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>FC6CADF0EDEA38C6E0401F0A059941CD</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>FC6CADE776A44208E0401F0A059941C9</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamRenew_ParameterValidations" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="75c848d4-d5e8-48f6-964f-de30bffeb17f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3faa97ee-8367-4ee9-bdba-45ac97d44d47"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("counter",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("streamhandleFULLHeader",null);
tC.setPropertyValue("streamhandleFULLBody",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBUpdatedBy",null);
tC.setPropertyValue("streamHistoryRows",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("RequestingUserIdTagPresent",null)
tC.setPropertyValue("RightsTokenIdTagPresent",null)

if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	testRunner.testCase.getTestStepByName( "PUT - StreamRenew" ).disabled = true;
	testRunner.testCase.getTestStepByName( "Extract Response Body for PUT" ).disabled = true;
}
else
{
	testRunner.testCase.getTestStepByName( "GET - StreamRenew" ).disabled = true;
	testRunner.testCase.getTestStepByName( "Extract Response Body for GET" ).disabled = true;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="24935267-4660-4c19-98fe-f7564e7179f3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandleFULLHeader",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandleFULLBody",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBUpdatedBy",callTC.getPropertyValue("expectDBUpdatedBy"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("RequestingUserIdTagPresent",callTC.getPropertyValue("RequestingUserIdTagPresent"));
tC.setPropertyValue("RightsTokenIdTagPresent",callTC.getPropertyValue("RightsTokenIdTagPresent"));

if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "null") {
	tC.setPropertyValue("expectDBStatus","active");
} 
if (tC.getPropertyValue("expectDBUpdatedBy") == null || tC.getPropertyValue("expectDBUpdatedBy") == "null") {
	tC.setPropertyValue("expectDBUpdatedBy",tC.getPropertyValue("nodeid"));
} 
if (tC.getPropertyValue("nodetype") == null || tC.getPropertyValue("nodetype") == "null") {
	tC.setPropertyValue("nodetype","dlp");
} 
if (tC.getPropertyValue("counter") == null || tC.getPropertyValue("counter") == "") {
	tC.setPropertyValue("counter","1");
}
if(callTC.getPropertyValue("expectedStreamHandleIDHeader") == "Invalid")
{
	tC.setPropertyValue("streamhandleFULLHeader",callTC.getPropertyValue("streamhandleFULLInvalid"));
	tC.setPropertyValue("streamhandleFULLBody",callTC.getPropertyValue("streamhandleFULL"));
}
if(callTC.getPropertyValue("expectedStreamHandleIDBody") == "Invalid")
{
	tC.setPropertyValue("streamhandleFULLHeader",callTC.getPropertyValue("streamhandleFULL"));
	tC.setPropertyValue("streamhandleFULLBody",callTC.getPropertyValue("streamhandleFULLInvalid"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row if Required" id="caef8f17-f177-4e8d-afac-2b2e71c95d42"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamCreate") == "SUCCESS") {
	a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

	String sh = tC.getPropertyValue("streamhandle");
	String results = null;
	String sql = """select 
 	 to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
	  to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
	  to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
	  to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
	  to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
 	 TRANSACTION_ID,
	  STATUS,
	  STREAM_CLIENT_NICKNAME,
	  EXPIRATION_DATE,
	  CLOSED_DATE,
	  CLOSED_BY_ORG_ID,
	  CREATED_DATE,
	  to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
	  from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw( '$hsh')""";

	results = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem").toString());
	log.info results;

	/*
	*  If zero length, no need to continue;
	*/
	assert results.length() > 0;

	try {
		def myXML = new XmlSlurper().parseText(results);
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		assert myXML.ResultSet.Row.size() >= 1;
	}
	catch(Throwable e) {
		log.info e; 
		assert 1 == 2;
	}
	finally {
		tC.setPropertyValue("streamHistoryRows", results);
	}
}

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="b35a9e6a-c082-4edf-a502-4f7da5936c08"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PUT - StreamRenew");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - StreamRenew");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA.EXPIRATION before API invocation" id="0f72b31b-62e9-4f52-a263-65cb618d65e6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("streamExpireBeforeRenew",null);
tC.setPropertyValue("streamExpireBeforeRenew", a.streamGetExpireDate(tC.getPropertyValue("streamhandle")));



</script></con:config></con:testStep><con:testStep type="groovy" name="set rights token id and requesting user id in request" id="ea0d5eb0-b36f-46e9-97a3-583e19ff0940"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tC.getPropertyValue("RequestingUserIdTagPresent") == "no")
{
	tC.setPropertyValue("RequestingUserIdTag","")
}
else
{
	tC.setPropertyValue("RequestingUserIdTag","&lt;RequestingUserID>"+tC.getPropertyValue("assertionUserIdFULL")+"&lt;/RequestingUserID>")
}
if(tC.getPropertyValue("RightsTokenIdTagPresent") == "no")
{
	tC.setPropertyValue("RightsTokenIdTag","")
}
else
{
	tC.setPropertyValue("RightsTokenIdTag","&lt;RightsTokenID>"+tC.getPropertyValue("rightstokenidFULL")+"&lt;/RightsTokenID>")
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - StreamRenew" id="c1bdc8cd-457e-4e61-ac6c-93c0a0a96d36"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - StreamRenew" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" StreamHandleID="${#TestCase#streamhandleFULLBody}">       
<StreamClientNickname>Release 4</StreamClientNickname>        
${#TestCase#RequestingUserIdTag}
${#TestCase#RightsTokenIdTag}        
<TransactionID>Sprint 4.1</TransactionID>
<ExpirationDateTime>${#Project#ExpirationDateTime}</ExpirationDateTime>
<SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="1" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation> 
</Stream>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="STREAM" value="${#TestCase#streamhandleFULLHeader}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body for PUT" id="a64f810a-39b3-4bd5-b727-bce306fbf97f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamRenew" id="0880fe60-9cfa-4ba0-8329-ff03b01c5dbf"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/Renew" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamRenew" mediaType="application/xml" id="5002a010-eb0d-4c0d-82bd-04c3cb5bbfbb" sslKeystore="DLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body for GET" id="3286ec81-6e03-4a0d-b204-dc422fff14ff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamRenew');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA.EXPIRATION after API invocation" id="e3de4f6a-db22-4b49-bad4-ff7076ad7936"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbStreams(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("streamExpireAfterRenew",null);
tC.setPropertyValue("streamExpireAfterRenew", a.streamGetExpireDate(tC.getPropertyValue("streamhandle")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="4ffc5a2a-c255-45a5-84a4-e7249e7103c4"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamView[" + tC.getPropertyValue("expectErrTypeStreamRenew") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamRenew")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_VALID":
		errId = "RightsTokenIDNotValid";
		break;	
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "Policy:RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_VALID":
		errId = "StreamHandleIDNotValid";
		break;	
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
	break;
	case "STREAM_EXPIRATION_DATE_TIME_EXCEEDS_MAXIMUM_RENEWAL_TIME_ALLOWED":
		errId = "StreamExpirationDateTimeExceedsMaximumRenewalTimeAllowed";
	break;
	case "STREAM_EXPIRATION_DATE_TIME_BELOW_LOWER_BOUNDARY":
		errId = "StreamExpirationDateTimeBelowLowerBoundary";
	break;
	case "STREAM_EXPIRATION_DATE_TIME_EXCEEDS_UPPER_BOUNDARY":
		errId = "StreamExpirationDateTimeExceedsUpperBoundary";
	break;
	case "SECURITY_TOKEN_LIFE_LESS_THAN_EXISTING_STREAM_EXPIRATION_DATE_TIME":
		errId = "SecurityTokenLifeLessThanExistingStreamExpirationDateTime";
	break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamRenew").toString();
		break;
}

log.info "errId [$errId]";
try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="11eb8974-58d1-4b45-863a-842092ac2d10"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("recvCreationDate",null);
tC.setPropertyValue("recvExpirationDateTime",null);

def url = tP.getPropertyValue("targetHost");
def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct = tC.getPropertyValue("nodeaccountid");
def urnnode = tP.getPropertyValue("urnNode");
def urnErr = tP.getPropertyValue("urnError");
def sh = tC.getPropertyValue("streamhandleFULL");
def nodeid  = tC.getPropertyValue("nodeid");
def account = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamRenew");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodetype = tC.getPropertyValue("nodetype");

boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag = false;
boolean XMLbodynull = false;
boolean httpLocationHeader = false;
boolean processXMLFlag = true;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectDescription = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expectStreamStatus = tC.getPropertyValue("expectDBStatus");
String received;

switch (expectStreamStatus) {
	case "active":
		expectDescription = "active"; break;
	case "deleted":
		expectDescription = "deleted"; break;
	default:
		expectDescription = "active"; break;
}		


this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		XMLbodynull = false;
		httpLocationHeader = false;
	break;
	
     case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "Assertion_Not_Found":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Invalid Assertion";
		errorReason = "Assertion_Not_Found";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "NotFound":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		XMLbodynull = true;
		errorReason = "The supplied StreamHandleID was not found.";
		errorID = "urn:dece:errorid:org:dece:StreamNotFound";		
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NotFound";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
if(tC.getPropertyValue("httpStatus") == "HTTP/1.1 400 Bad Request")
{
	expectHTTPconnection = "close";
}
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	assert tC.getPropertyValue("httpContentLength").toInteger() == 20;
} else {
	assert tC.getPropertyValue("httpContentLength").toInteger() > 20;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type

if(errorRespType == "NotFound"){
expectHTTPcontenttype = "text/xml";
}
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
				
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		String assertionUserIdFULL = "";
		String recvStreamHandle = myXML.@StreamHandleID.text();
		String RequestingUserID = myXML.RequestingUserID;
		String RightsTokenID = myXML.RightsTokenID;
		String recvExpirationDateTime = myXML.ExpirationDateTime;
		String Value = myXML.ResourceStatus.Current.Value;
		String recvDescription = myXML.ResourceStatus.Current.Description;
		String recvCreatedBy = myXML.ResourceStatus.Current.@CreatedBy.text();
		String recvModifiedBy = myXML.ResourceStatus.Current.@ModifiedBy.text();
		String recvCreationDate = myXML.ResourceStatus.Current.@CreationDate.text();

		tC.setPropertyValue("recvCreationDate",recvCreationDate);
		tC.setPropertyValue("recvExpirationDateTime",recvExpirationDateTime);
		
		// StreamHandle ID
		log.info "recvStreamHandle[$recvStreamHandle] - Expect["+"urn:dece:streamhandleid:org:dece:"+tC.getPropertyValue("streamhandle") + "]";
		assert recvStreamHandle == "urn:dece:streamhandleid:org:dece:"+tC.getPropertyValue("streamhandle");
		
		//RequestingUserID
		/*
		*  For llp and llpcs the requestinguserID element 
		*  should not be returned.  
		*/
		
		if (nodetype == "llpcs" || nodetype == "dlpcs") {
			assertionUserIdFULL = "";
		} else {
			assertionUserIdFULL = "urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId");
		}
		log.info "RequestingUserID[$RequestingUserID] - nodetype[$nodetype] - Expect[$assertionUserIdFULL]";
		assert RequestingUserID == assertionUserIdFULL;
		
		//RightsTokenID
		log.info "RightsTokenID[$RightsTokenID] - Expect[" + tC.getPropertyValue("rightstokenidFULL") + "]";
		assert RightsTokenID == "urn:dece:rightstokenid:org:dece:"+tC.getPropertyValue("rightstokenid");
		//ExpirationDate
		log.info "recvExpirationDateTime[$recvExpirationDateTime] - Size is " + recvExpirationDateTime.size();
		assert recvExpirationDateTime.size() > 0;

		//Value (status)
		log.info "Value[$Value] - Expect[" + tC.getPropertyValue("expectDBStatus") + "]";
		if (tC.getPropertyValue("expectDBStatus") == "active") {
			assert Value == "urn:dece:type:status:active";
		} else {
			assert Value == "urn:dece:type:status:deleted";
		}
		
		log.info "recvDescription[$recvDescription] - Expect[$expectDescription]";
		assert recvDescription == expectDescription;
		log.info "recvCreatedBy[$recvCreatedBy] - Expect[" + urnnode + tC.getPropertyValue("expectDBCreatedBy") + "]";
		assert recvCreatedBy == urnnode + tC.getPropertyValue("expectDBCreatedBy");
		log.info "recvModifiedBy[$recvModifiedBy] - Expect[" + urnnode + tC.getPropertyValue("nodeid") + "]";
		assert recvModifiedBy == urnnode + tC.getPropertyValue("nodeid");

		/*
		*  History validation
		*/
		if (tC.getPropertyValue("streamHistoryRows") != null) {
		def myHistoryXML = new XmlSlurper().parseText(tC.getPropertyValue("streamHistoryRows"));

		int rCnt = myHistoryXML.ResultSet.Row.size();

		log.info "-------------HISTORY-----------------";
		log.info "Row Count is $rCnt";
		log.info "&lt;History> Row Count is " + myXML.ResourceStatus.History.size();

		assert myXML.ResourceStatus.History.Prior.size() == rCnt;

		for (int i = 0; i &lt; rCnt; i++) {
			String hrecvModifiedBy = myXML.ResourceStatus.History.Prior[i].@ModifiedBy.text();
			String hexpectModifiedBy = urnnode + myHistoryXML.ResultSet.Row[i].CREATED_BY_NODE_OID.text();
			log.info "$i --> hrecvModifiedBy[$hrecvModifiedBy] - hexpectModifiedBy[$hexpectModifiedBy]";
			assert hrecvModifiedBy == hexpectModifiedBy;

			String hrecvStatus = myXML.ResourceStatus.History.Prior[i].Value;
			String hexpectStatus = myHistoryXML.ResultSet.Row[i].STATUS.text();
			log.info "$i --> hrecvStatus[$hrecvStatus] - hexpectStatus[$hexpectStatus]";
			if (hexpectStatus == "active") {
				assert hrecvStatus == "urn:dece:type:status:active";
			} else {
				assert hrecvStatus == "urn:dece:type:status:deleted";
			}
			
			String hrecvDescription = myXML.ResourceStatus.History.Prior[i].Description;
			switch (hexpectStatus) {
				case "active": hexpectDescription = "active"; break;
				case "deleted": hexpectDescription = "deleted"; break;
				default: hexpectDescription = "deleted"; break;
			}
			log.info "$i --> hrecvDescription[$hrecvDescription] - hexpectDescription[$hexpectDescription]";
			assert hrecvDescription == hexpectDescription;
		}
	}
} 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Assert STREAM_DATA.EXPIRATION_DATE changed/unchanged based on API result" disabled="true" id="9da7ea5c-34b8-45ac-a3f6-2f127d7f88e2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	a = new generalUtils.generalUtils(log);

	int w = a.dateDiff(tC.getPropertyValue("streamExpireBeforeRenew"),tC.getPropertyValue("streamExpireAfterRenew"));
	int y = tP.getPropertyValue("streamRenewTimeHours").toInteger();

	//assert w == y;
	/*
	*  hack
	*/
	assert w -1 &lt;= y;
	assert w >= y - 1;
} else {
	/*
	*  If the API was not successful then STREAM_DATA.EXPIRATION_DATE should
	*  not have been modified...
	*/
	assert tC.getPropertyValue("streamExpireBeforeRenew") == tC.getPropertyValue("streamExpireAfterRenew");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Enable test steps" id="33a5f306-ac04-49c2-88b8-75d4c61181eb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

	testRunner.testCase.getTestStepByName( "PUT - StreamRenew" ).disabled = false;
	testRunner.testCase.getTestStepByName( "Extract Response Body for PUT" ).disabled = false;


	testRunner.testCase.getTestStepByName( "GET - StreamRenew" ).disabled = false;
	testRunner.testCase.getTestStepByName( "Extract Response Body for GET" ).disabled = false;
</script></con:config></con:testStep><con:testStep type="groovy" name="Assert different between returned Create/Expire time less than 24 hours" disabled="true" id="6086d31a-0aba-4df3-8626-0f90bde0fa51"><con:settings/><con:config><script>import java.util.regex.Matcher;
import java.util.regex.Pattern;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def formatDate(recvDate) {
	try {
		String dateHolder = "";
		Pattern datePattern = Pattern.compile("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})");
		Matcher cdateMatcher = datePattern.matcher(recvDate);
		if (cdateMatcher.find()) {
			dateHolder = cdateMatcher.group(1) + "/" + cdateMatcher.group(2) + "/" +
			cdateMatcher.group(3) + " " + cdateMatcher.group(4) + ":" +
			cdateMatcher.group(5) + ":" + cdateMatcher.group(6);
			log.info "dateHolder[$dateHolder]";	
		}
	} 
	catch (Throwable e) {
		log.info "Matcher Failure!  recvDate[$recvDate] ERROR - " + e;
	} 
	finally {
		return dateHolder;	
	}
}

if (tC.getPropertyValue("expectErrTypeStreamRenew") == "SUCCESS") {
	String recvCdate = tC.getPropertyValue("recvCreationDate").toString();
	String recvEdate = tC.getPropertyValue("recvExpirationDateTime");
	String cDate = "";
	String eDate = "";
	int streamMaxCreateExpireTimeDiffhours = tP.getPropertyValue("streamMaxCreateExpireTimeDiffhours").toInteger();

	try {
	
		log.info "recvCdate[$recvCdate]";
		log.info "recvEdate[$recvEdate]";
	
		cDate = formatDate(recvCdate);
		eDate = formatDate(recvEdate);

		def a = new generalUtils.generalUtils(log);
		def j = a.dateDiff(cDate,eDate);
	
		log.info "cDate[$cDate]";
		log.info "eDate[$eDate]";
		log.info "j[$j]";
	}
	catch (Throwable e) {
		log.info "Matcher Failure: " + e;
	}
	finally {
		/*
		*  Assert the difference between Creation Time and Expire Time
		*  is less than  hours.
		*/
		assert j &lt;= streamMaxCreateExpireTimeDiffhours;
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00120 - StreamRenew - RightsTokenIDNotValid - Stream Renew by DLP with RightsTokenID not found in DB - 400 Bad Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>Node Permission and some negative Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">7851C25FB4EB341091C60B349481F9A8</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:7851C25FB4EB341091C60B349481F9A8</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C751BEAEB4EB341091C60B349481F9A8</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assert</con:name><con:value>nVZbb+I6EH7vr4iyj1XIhaSEqCClXLR0oWWBst2+HBlnAqaJA7EDtL9+7dBQoLTLHqkS9WQ8883F38w1Q3FkeT5jkHKSUKXTrKn/IWMyMR3D1sJgUtFsfBVqyAgsrVK2QoSs0AqNQFU6jGXQoYwjymuqZZi2ZpiaVR4ZrucYnu2WXNd4UpUxpEyYFiolQ1U2cUSZl7utqVlKvQQxwjyKYmAex97Q73U9oemhApNav96izB2m9RnnC0/XcSkADFGESziJ9Wv9QOc6YN6QTCniWQpvPgNWU9/urtfr0rpcStKpbhmGoRtVXegEjEy/qfWL4jIEHRom23MD0YQSjCLyiiSoHvBZEih+NE1SwmfxJ6ZN3TSkaQ02WMOmTb+p+ruDHN2Zlg5ApgxpbIbMwtgAQkiBYlAeBp2a+u28Cm7vjlJEWZikMTs6/xskoCuIkgUEGisiK9Cdb/FEuurXgL0OxVHGyAruZJssEAam9FMIyaZLmGi+gCl5+ZUNE3+k6DLA/1KWa30fq4Cun8hOk0yB8f9Ts/16ba2MUZRB/T5qW2Fj4D8+9Y2qj9bWQ3fubsLXu8eftRzCvvIW1K7cb+fjZt311tsl+L16GTyS0WA+ganNnm67XdRaT0N2ucQxKleIvp77g6Dy2g9fx2HL/j5Jx3duoi8W/eXa/TW+dH5cPcPktbv8/XwxQXa8WHX7vx5u53TevrT6LRxeOlGl1Sk/r3tR6/Z7cJ+1Hsqj9mOH3ERLaEa37dD84WMW9jBCP6PH59cXd96a4YvL8SWLbLhJ73/2Wj2Kx0239h7TfgyHwoIShtlkDpgXR9kenabSFvVC/Gt6kRISaGGu6i0kRzEOlKt1eUtSi5cJAiKBJ4q5PZfLjmmZbePGbt2UbdOomo0rQ/xXtV2zXfXdgoO2KI4gNhIaEulLsuy2f74GiGOPAQ0g1VZJhmfA1C8sNhFHSocOxONIKINRIli8IoD6rtMwq0al0biyfMO8sltVxzFcq9p0Gqpyl/B7ep/6IYf0gMFN84DBB4DJgoCkednnTDQ64yIlS7TKeGSWVqhEIRODIJVc7Fm26+iMxIsIJGA9ToIsgtJitsgTpLPtr6UhzHLpoDXK39+n4R1/KzIhdAIiFZiM5QZENeHEKCoXgXwI2Dk5sgrzfhYQ+cxEWnlK8BbJ4af3bpFtsmuVZtcf9gvQO93z7opsfLypf4FIP07GzlGwIntui4EqZoRgkHpRyiUqLUvZapXlxatIdkyFeV2QpKkPAWeC4l5GyTNQfWdCP2vC7FAfed7JD/FlfEaHHHGIRasp+fGM9WIITK4XHfFUNufuLgcuRd44bPgpWSMSW4hE/OWigj0s9YS4L37WSfoe+Clbe35EnGKn4IRO5UnOkpdPmgInwiwR5Jek+8ZPGTjl/FC4S/IOCxfdNMk4fP5FkaxWUxHGSUZ5p6nmgn2mzXHylwV470ofzORs/jaeN+zT8fzY6w4F58VI3emSvytrJG8XDKrcAnIsNXUjtk3hnE73mP0N4D65VyzHdMxKy/8LuR9GUv8g/ijZy+nxe6j/AQ==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:7251517EA4EB341091C60B349481F9A8</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:335121F0B4EB341091C60B349481F9A8</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>RT_NOT_VALID</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DLASP</con:value></con:property><con:property><con:name>expectDBUpdatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>streamHistoryRows</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140123_022233</con:value></con:property><con:property><con:name>password</con:name><con:value/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:12821BDE33E2A28CD6B79D75FEAFD63D99177F95</con:value></con:property><con:property><con:name>streamExpireBeforeRenew</con:name><con:value>2014/01/23 14:51:25</con:value></con:property><con:property><con:name>streamExpireAfterRenew</con:name><con:value>2014/01/23 14:51:25</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:RightsTokenIDNotValid">
      <Reason Language="en">The rights token ID is not valid.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:7251517EA4EB341091C60B349481F9A8/Stream/urn:dece:streamhandleid:org:dece:7851C25FB4EB341091C60B349481F9A8</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#RightsTokenIDNotValid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>779</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>errorReason</con:name><con:value>The rights token ID is not valid.</con:value></con:property><con:property><con:name>errorID</con:name><con:value>RightsTokenIDNotValid</con:value></con:property><con:property><con:name>recvCreationDate</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>recvExpirationDateTime</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81158</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AE461645BAC8BFC19E0401F0A07997218</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E8D795B2AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>7251517EA4EB341091C60B349481F9A8</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>335121F0B4EB341091C60B349481F9A8</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/DLASP_concat.pem</con:value></con:property><con:property><con:name>streamhandleFULLHeader</con:name><con:value>urn:dece:streamhandleid:org:dece:7851C25FB4EB341091C60B349481F9A8</con:value></con:property><con:property><con:name>streamhandleFULLBody</con:name><con:value>urn:dece:streamhandleid:org:dece:7851C25FB4EB341091C60B349481F9A8</con:value></con:property><con:property><con:name>RequestingUserIdTagPresent</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsTokenIdTagPresent</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RequestingUserIdTag</con:name><con:value>&lt;RequestingUserID>urn:dece:userid:org:dece:335121F0B4EB341091C60B349481F9A8&lt;/RequestingUserID></con:value></con:property><con:property><con:name>RightsTokenIdTag</con:name><con:value>&lt;RightsTokenID>urn:dece:rightstokenid:org:dece:12821BDE33E2A28CD6B79D75FEAFD63D99177F95&lt;/RightsTokenID></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ada61512-3f68-4daa-808b-bc019a51f1f6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2bbedfb-cc8e-46f1-aa94-92b9bb031624</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8cbd24d4-5d25-4c7f-8a37-61a593e9e5f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>16c35512-a0c4-493b-8306-2db4c2bbf97d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamCreate_ParameterValidations" searchProperties="true" id="910f40d9-b760-47a7-851f-0ae704597daf"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="70226c59-72a4-4841-822e-8f5d5e776c8a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("nickname",null);
tC.setPropertyValue("transactionid",null);
tC.setPropertyValue("requestBody",null);
tC.setPropertyValue("sCbodyRequestingUserSetting",null);
tC.setPropertyValue("sCbodyTransactionIDSetting",null);
tC.setPropertyValue("expectErrTypeStreamCreate",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="e009f3c6-0bc2-4a83-93a1-6ab106cc23a3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("transactionid",callTC.getPropertyValue("transactionid"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectErrTypeStreamCreate",callTC.getPropertyValue("expectErrTypeStreamCreate"));
tC.setPropertyValue("sCbodyRequestingUserSetting",callTC.getPropertyValue("sCbodyRequestingUserSetting"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("sCbodyTransactionIDSetting",callTC.getPropertyValue("sCbodyTransactionIDSetting"));

if (tC.getPropertyValue("expectErrTypeStreamCreate") == null || tC.getPropertyValue("expectErrTypeStreamCreate") == "") {
	tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
}
if (tC.getPropertyValue("nodetype") == null || tC.getPropertyValue("nodetype") == "") {
	tC.setPropertyValue("nodetype","dlp");
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Construct the StreamCreate request Body" disabled="true" id="b09aa011-36c8-4100-9b78-33e90325c2be"><con:settings/><con:config><script><![CDATA[def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String transStr = "";
String b = "";
String c = "";
String coordinatorSchema = tP.getPropertyValue("coordinatorSchema").toString();
String assertionUserIdFULL = tC.getPropertyValue("assertionUserIdFULL").toString();
String assertionUserId = tC.getPropertyValue("assertionUserId").toString();
String SchemaNameSpace = tP.getPropertyValue("SchemaNameSpace").toString();
String rightstokenidFULL = tC.getPropertyValue("rightstokenidFULL").toString();
String rightstokenid= tC.getPropertyValue("rightstokenid").toString();
String transactionid = tC.getPropertyValue("transactionid").toString();
String nickname = tC.getPropertyValue("nickname").toString();
String sCbodyRequestingUserSetting = tC.getPropertyValue("sCbodyRequestingUserSetting");
String sCbodyTransactionidSetting = tC.getPropertyValue("sCbodyTransactionidSetting");

if (transactionid == "null") {
	transactionid = "";
}
if (nickname == "null") {
	nickname = "";
}
if (rightstokenidFULL == "null") {
	rightstokenidFULL = "";
}
if (assertionUserIdFULL == "null") {
	assertionUserIdFULL = "";
}

log.info "transactionid[$transactionid]";

String xmlBody = """<Stream xmlns="$coordinatorSchema" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
      <StreamClientNickname>$nickname</StreamClientNickname> 
      %%REQUESTINGUSER%%
      <RightsTokenID>urn:dece:rightstokenid:org:dece:$rightstokenid</RightsTokenID>
      %%TRANSACTIONID%%
</Stream>""";

log.info "sCbodyRequestingUserSetting[$sCbodyRequestingUserSetting]";
log.info "sCbodyTransactionidSetting[$sCbodyTransactionidSetting]";

switch (sCbodyTransactionidSetting) {
	case "exclude":
		transStr = "";
		break;
	case "nullContent":
		transStr = "<TransactionID></TransactionID>";
		break;
	default:
		transStr = "<TransactionID>" + transactionid + "</TransactionID>";
		break;
}

switch (sCbodyRequestingUserSetting) {
	case "exclude":
		b = "";
		break;
	case "nullContent":
		b = "<RequestingUserID></RequestingUserID>";
		break;
	default:
		b = "<RequestingUserID>urn:dece:userid:org:dece:$assertionUserId</RequestingUserID>";
		break;
}

requestBody = xmlBody.replaceAll("%%REQUESTINGUSER%%", b);

log.info xmlBody;

tC.setPropertyValue("requestBody", xmlBody);

]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="0bc556f7-c52b-4266-a0a7-55fe51735dab"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - StreamCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - StreamCreate" id="bada8bf8-c3f6-4f72-9b28-4aadd663c496"><con:settings/><con:config service="StreamDelete" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - StreamCreate" mediaType="application/xml" postQueryString="false" sslKeystore="LLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" 
     xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
      <StreamClientNickname>Ultraviolet4.0</StreamClientNickname>       
      <RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#rightstokenid}</RightsTokenID>
      <TransactionID>StreamsProject</TransactionID>
</Stream>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="33b42d73-6bbd-416b-ac63-d45a9c2fbd41"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - StreamCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="771921b6-36eb-4668-a62e-affc9c1a8b3d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamCreate[" + tC.getPropertyValue("expectErrTypeStreamCreate") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamCreate")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
	break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="2d5823cf-6f64-4ab1-bc57-ae6b0d1f67e0"><con:settings/><con:config><script><![CDATA[import java.net.URLDecoder;
import java.net.URLEncoder;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");
def urnnode   = tP.getPropertyValue("urnNode");

def sh            = tC.getPropertyValue("streamhandleFULL");
def nodeid        = tC.getPropertyValue("nodeid");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("VersionMajor");
String minor = tP.getPropertyValue("VersionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
String urnErr = tP.getPropertyValue("urnError");





this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	//assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = a;
	//def urlStr = b.getPath();
	def urlStr = b;

	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 3);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
	else
	{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
	}
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}
//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Return the streamhandle" id="7a995305-64ad-42dd-9797-0bdf518de9b5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle"));
callTC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL"));
callTC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20140109_070510</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00126 - StreamRenew - Stream Renew by LLP with &lt;RequestingUserId> tag not present during creation also not provided during renewal - 200 OK</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:EF92FAF590A845F6E0401F0A07997668</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EF92FAF590A845F6E0401F0A07997668</con:value></con:property><con:property><con:name>sName</con:name><con:value>Node Permission and some negative Test Cases</con:value></con:property><con:property><con:name>sCbodyRequestingUserSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:EF8FAF481511E49FE0401F0A05996490</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EF8FAF481511E49FE0401F0A05996490</con:value></con:property><con:property><con:name>requestBody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9AAD6886B417B607E0401F0A0599673B</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZd6JKEH73V3icR0/CoridJOc0qxhRQcTlDaFZFEFpEPTX3wajMctk5s5Dli5q+brq6+rqJ2TuAroHEIJx4kdhVeafa81mB9JOm3kwW6T50GQs8mHdphr4F2w2adhtdGi6VpURSqEcosQMk+caTVLUA0k90C2davaoVo9iHrGfVa1qwBhhz1jlkaxV810Qol4Z9bmWxmEvMpGPeqG5g6iXWL0pUIY9rNkzr5BqL08XkGXA+MVLkn2PIKxHG1owCKxHK9oRT8QHnScb9aa+G5pJGsO3mDZ6rr3ZZln2mDUeo9glaJIkCbJLYB0b+e6v2kvlagxtOXSiy5ozwyj0LTPwz2YBSoGJF9lVELhR7Cfe7jeuKYIiC9cPMLceLKoZ/qoR7wFKdH/p6QPIGJkPyDOpqzMNOjCGoQWrM01+rv36qwJeTPXYDJETxTv0af3/EMHwCINoD+0HdN3YFdzfe/wmWy9P0OrJoRWkyD/CUcGSvWlBVJ3E0PHzoY8w92xULatfzdGVYND6PxV5Iu5xYtjEN5nhfRei5F/KdV+qixfDDFL4YozsNeufwm3mR+mJVYR6MGQygtHU2XMJ4V75AupW6bf1Z57eaPVmxJ4kIWYHwNmAhAANZ77ZuwMrc9rT6YyORMZZdLOtaszrqdpXaKKLbA9GCjNthhtr3CEdrj0M+TG1WUsrUBmcyMOGTiKaFB23Th40G7DsLIr7y1Nruc8WuSNC9exSEu/RGZ0eUndsOIOQHzWNIQ36ou5qEeNrRK7XjYq7MQICdiTrdMiZKbFVFfT8vqf7PRT7eoWncpPF/wuG7PJmYt4WXNEoHHw6E/iiyDKfnjkOnKYuyGQWuPhnA0asuz14W1/qZiQLVFUEPMcGG2GogK0EqJnAegpnGErOncGAdUcGNtQrIFixiiZkfLbkDVXtC5mn25JxWktBujoLIwWg0pjzFEETDF7TBUUB0UWWK/xayjfKVMlkdclXsANeyPdnW+omUMp9i5YZZcrQyymTrhYGloun4W50XOtCoHCKxE0P0lReN3hVGABtObdoMcW25+FuH1WWM/bOaLCHGwDFjMQxwVnRt5miz+gRr5mlTP8oU2RpoKgo49RyV1JFyAbG7PyeC45VOHsn5IIOJpdcWDonjsjVYoDMORMqGsh4tzR+FTJ7fAWiqGRW4S65GgqZJmizkahociaAUsYLWYDW9MhbS97Raqj5QAeb+8JwqjAXQ/w91I7WiTlUTEkE651BWQ3Ns3zGNxdR5q46Ga8uB6/RSsZuRkAVWFYFGBAJiq3h/LNgyBrMeO93aR8OHTHaQS+uKFT0uj2ec7LjN8buZDRneGfbnkj+pGHaHiEHFr1pbIEsQ/uV8lTT1paExof+uTV+nS2gHy/PyYhRqZbfYSraPJ0t+Cho2/3FcvZaz5eWqo8n09l8cs7z0WHTOQdJf8z24+lA4d3xCMIJsuoEaYqs3uEZbtnfYD45GgmZCnAVFgBp47qCjwnM9jcXEvY1RcDkBQqXSdyck6ZAkuqCzPKq6ogeNbEkI51RI0UW7ACn6bRcaEFlxbE8rhRpzlf7JS2SKx3YpTO1KYiuOmPqgwVcqaNANxKQ7Q0npChS2qt9R8lcSykYYMvZlMWniK2kMpiZ4/2AzF+NFkkdVDsYTLtg1sin9DYfe+7qtHVXW1yU5d3RWeogMPQ7jsmYYvOKqguaAjqX85Yr8qyhBdYu3693Vs7ruGalcaSzgiaq5CznefB6kSEd0DlanoWNwgmlfQXkiolpcVwvPLQMR/5YF1JM2vSOLps1Tf6RYwXFKh85duCACj5zTLhwTADOoS53eAoxLW6P5pnLSsJBbRvDQXdPqovhtsLWRcJN/KA5DjuZ/lqfU6es7W3U+bwr8x5XD52l11gnLGmeLRUOtm3J17Z82GoGJ2WoqMzMJ4ITuYGHDA0rI5kKhUZyFolunNbZ3crfnc+NJj3bTabpUZ6Zr4g6eevDvJttJv0WQcTSiTm3V0dVXETW8nKPfG6SN+GljRL3DfZDB76OXtN0vYFWcl0W97DMV0V8OZrJz2NcIfHtB6dU7e2LWRAlMExqL4VVMcL1Ujzo+XYP35yXdRcAvtXptNgm1WZbZFsgmyQlkoBkut1Wu8FeZ70Lik8QuSh0/CJWMcxeLuufAVq73hqaMYxrP3gq8lSVQw1PH1GIoB491xoMA7pNsdPstBi2wzFNttUSAUt36Sbd4pqtWnUUJeNwHAMngfHdgNz+PCBr0PL3Piym6LdZAiU4EQfzmCYB9Xg0H0OY4jE7LibdHt3sMGUCCDvd7S38AXe3eB+h5HHv7cth5rfb+PztumOsY/uFAipAsxBXC34z0pNXxF92Rn87+l/dg9T2i5kFpy+JfeuC5OOndzYUNLhRgexS5BXzTfWvTel/N23+o2mXoph/N219NSV+SCHxuXq3SPbRv4t7fUnhxwGeH8sHFMIsO5iPh8f0eExLXrVJkiZi7J4giS4xhVaK59uTHm1hSNw8EH/zsrhh/hT3Jv+ILk28cJrgtrTDR6BaLv/8qvxgjROQwDz5TsYF+B1ZBP/xqWn1rEIPiyf4TxbF9nvev/F1FwdDLlqqH7rFqngSnD6W9+3o9qwIe/VxV43ie9/f2X8X+6Pwlq4blASzYp0m8PdfqkW7fK6ZlhWlYSLztVJw38JLzMlpD3vvSl/clDP52yMrR799ZC2U4dTy4M6s3XT9Pys/+GXhLYitkF9iea7lqFdwPnTvrow3gL+5NZifbo2PO3n5Iv4qucvpZ2a//Ac=</con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:EF8FAF481282E49FE0401F0A05996490/Stream/urn:dece:streamhandleid:org:dece:EF92FAF590A845F6E0401F0A07997668</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7002/dece/Account/urn:dece:accountid:org:dece:96D720451F824F56E0401F0A079921A9/Stream/urn:dece:streamhandleid:org:dece:98F5525959D92153E0401F0A07993F6C</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:EF935B9B2418791FE0401F0A05992DB7</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:EF8FAF481282E49FE0401F0A05996490</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVZbc9o6EH7vr/C4jx1j2ZgEewIz5uLiFlIKlLZ5OSNkGdTYMkgyEH79kUxMgJAcemaYYbRe7X570bd7x2Ga2J7POWaCZFQLOw39Hwu4tw66cYy6a9uGE90gw4W1mVGNnLo9w249sm1dCznPcUi5gFQ0dBtYjgEswwITADxQ8+xqpVoFD7o2xYxL01KlAnRtmyaUe4Xbhp4z6mWQE+5RmGLuCeSN/UHfk5oeLDHpzbs9ysIhay6EWHqmiSoRRjhJUAVlqXlnnujcRdwbkzmFImf42WfEG/rz3c1mU9lUKxmbmzYAwASuKXUiTuYf9eaH8jKOQhpn+3Mb0owSBBOygwrUAItFFml+Ms8YEYv0DdOWaQFl2sBbZCDLoR9188VBge5KSycgGYcGX0CrNDbCMWaYIqz9GIUN/eN1FdzfnTBIeZyxlJ+d/w4SpmucZEscGbyMrER3vcUL6WreYeSFFCU5J2t8r9pkCRHm2pDhmGz7hMvmi7hWlF/bcvkjZZdh9DdluTOPsUro5oXsdMgcc/F/anZcr72VKUxy3Pz6pZ/Ow+l84PfYer7OfvqP362ncNBhvFFAOFbegzqU+/l83qyH3nq+tK321hnega0dt4dmx9pN+jvnRyu0H3670WQVsu6X9CYIh92VPVyOhnGPfv4Wrh77vSH+1bY2pBpPfbDq7Abb/vTDp9nOXwR2NZh9v3968Def08euGICnKaS9TaeX52i3qOLWpP9zF7C1xXoJAr18eo8/9Sarr73v04dHEP+h8e/Rw+5DYpvWDIGvtbYv4l/TyQ8AGi8xHcdwKiwpYZzP/mAkyqNqj7CjBbJeULxPL0pCIiMuVL2l4iguMBV6U91S1OLlkoBI5Mli7s/dwK3WWm7Ldqz6rWsFXeAAKwA+qLmu3Wndlhy0R3EGsZ3RmChfimX3/fM+QJR6HNMIM2Od5WiBuf6OxQ4UUAvpSD6OjHI8ySSLu7WgY0mIwK/51SBotfy27zudVu225bhtt61r95n4Rr8xPxaYnTJ49YTBRxiRJcGK5lWfc9noXMiUrOA6F4lVWcMKxbkcBExxsWc79ZrJSbpMsAJsplmUJ7iyXCyLBJl8/28bEPFCOupOivf3Znjn38pMSJ2IKAWuYmlhWU18YRRZZSCvAq5dHFmleT+PiHpmMq2CEbRHcvrppVtUmxxapd/3x8MS9EH3ursyG69vmu8gMs+TcXAUrcmR23KgyhkhGaRZlnIFK6tKvl7nRfFuFTsyad6UJGmZY4xySXFPk+wRU/NgwrxqwhxQn3k+yE/x5WJBxwIKnMpW04rjFevFGHO1XoTyqWyv3V1OXMq8CbwVl2TtRG4hCvG7iwrykNKT4qH822QseinXBVtHfmSccqcQhM7VSc2SpzeaAmXSLJHkl7Fj45cMXHJ+Kjwk+YBFyG6a5QK//UVTrNbQIUJZTkXY0QvBMdMWOMXTEnsvSq/MFGz+PJ63/M3x/GvQH0vOS6F+0CX/rWyQol0Q1tUWUGBp6Fu5bUrndH7E7M8AT8m9HviBU7fsut113BNyv3FccEjgSSTNV+LXkqOcnr+H5r8=</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81160</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE114E8D795B2AF0BE0401F0A079904CD</con:value></con:property><con:property><con:name>sCbodyTransactionIDSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>EF8FAF481282E49FE0401F0A05996490</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>EF935B9B2418791FE0401F0A05992DB7</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certificates//LLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Configuration/Setup" disabled="true" id="9de6c846-c749-4670-8165-38ed0c8cb13c"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authentication Contexts" searchProperties="true" id="32aa94a5-ac92-4229-a86c-315ead0c0dc2"><con:settings/><con:testStep type="groovy" name="Data Setup when Stream Count Greater then 12 for Stream Service ON" id="d8bffa81-c036-42ea-b90a-1026da5ea3b1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

int StreamCreateCount = Integer.parseInt(tP.getPropertyValue("StreamCreateCount"));

log.info "Stream Count from Proejct level......:" + StreamCreateCount;
log.info "Not required to create test data...."

def temp_username = callTC.getPropertyValue("username");

log.info "temp_username ... " + temp_username;

	if (temp_username == tP.getPropertyValue("UserName_FAU1"))
	{
		tC.setPropertyValue("UserName_Property","UserName_FAU1");
	}
	else if (temp_username == tP.getPropertyValue("UserName_FAU2"))
	{
		tC.setPropertyValue("UserName_Property","UserName_FAU2");
	}
	else if (temp_username == tP.getPropertyValue("UserName_SAU1"))
	{
		tC.setPropertyValue("UserName_Property","UserName_SAU1");
	}
	else if (temp_username == tP.getPropertyValue("UserName_SAU2"))
	{
		tC.setPropertyValue("UserName_Property","UserName_SAU2");
	}
	else if (temp_username == tP.getPropertyValue("UserName_BAU1"))
	{
		tC.setPropertyValue("UserName_Property","UserName_BAU1");
	}
	else if (temp_username == tP.getPropertyValue("UserName_BAU2"))
	{
		tC.setPropertyValue("UserName_Property","UserName_BAU2");
	}

log.info "UserName property from Test Case ... " + tP.getPropertyValue(tC.getPropertyValue("UserName_Property"));

//run E2E when Stream count reached to 12 in the Account

if(StreamCreateCount>=12)
{     

	StreamCreateCount = 0;

	//update StreamCreateCount to Zero at project level.
	tP.setPropertyValue("StreamCreateCount",StreamCreateCount.toString())
		 
	def myTS = tP.getTestSuiteByName("E_2_E");
	
	def runnerTS = myTS.run( null , false )
	
	assert runnerTS.status == Status.FINISHED;
}

//Setting the desired user from the testcase
tC.setPropertyValue("username",tP.getPropertyValue(tC.getPropertyValue("UserName_Property")));

log.info tC.getPropertyValue("username");

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Properties from calling test case" id="bf13351b-3e06-4058-95a3-754cdad51e2b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC;

tC.setPropertyValue("nodeid", null);
//tC.setPropertyValue("username", null);

try {
	callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

	tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
//	tC.setPropertyValue("username",callTC.getPropertyValue("username"));
}
catch(Throwable e) {
	log.info "ERROR during getTestCaseByName - $e";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Authentication Context" id="ec432529-551f-48fa-8ece-896d4a0022cb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def dbAcct;

int lastColon;
def nodeID = tC.getPropertyValue("nodeid");
String userID = tC.getPropertyValue("username").toString();
String rturn = tP.getPropertyValue("urnRightsLocker").toString();
String useroid = "";
String acctoid = "";
String uuid = "";
String assertionAccountIdFULL = "";
String assertionUserIdFULL = "";
String assertion = "";
String rightslocker;

assert nodeID.length() > 0;
assert userID.length() > 0;

try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	useroid = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}
/*
*  Null calling test cases current Properties
*/
callTC.setPropertyValue("assert",null);
callTC.setPropertyValue("assertId",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionAccountIdFULL",null);
callTC.setPropertyValue("assertionAccountId",null);
callTC.setPropertyValue("assertionUserIdFULL",null);
callTC.setPropertyValue("assertionUserId",null);
callTC.setPropertyValue("accountoid",null);
callTC.setPropertyValue("useroid",null);
callTC.setPropertyValue("rightslockerFULL",null);
callTC.setPropertyValue("rightslocker",null);

/*
*  LP2 security contexts
*/

log.info "---- PROCESSING nodeID[$nodeID] userID[$userID]";

	switch (nodeID) {
		case tP.getPropertyValue("nodeoid10"):  // Retailer node
		case tP.getPropertyValue("nodeoid11"):	//LLASPCS node
		case tP.getPropertyValue("nodeoid12"):	//DLASP node
		case tP.getPropertyValue("nodeoid13"):	//DLASPCS node		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_1").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_1").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_1").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_1").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;

          case tP.getPropertyValue("nodeoid30"):
          case tP.getPropertyValue("nodeoid31"): // Dynamic lasp and his/her customer service node		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_3").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_3").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_3").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_3").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
          
          case tP.getPropertyValue("nodeoid20"):
          case tP.getPropertyValue("nodeoid21"): // Linked lasp and his/her customer service node		
		if (userID == tP.getPropertyValue("UserName_FAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLFAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLSAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU1").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLBAU1_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU1_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_FAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLFAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDFAU2_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_SAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLSAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDSAU2_2").toString()
			} else if (userID == tP.getPropertyValue("UserName_BAU2").toString()) {				
				assertionAccountIdFULL = tP.getPropertyValue("NODEACCOUNTID_2").toString();
				assertion = tP.getPropertyValue("SAMLBAU2_2").toString();
				assertionUserIdFULL = tP.getPropertyValue("NODEUSERIDBAU2_2").toString()
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;

		default:
			log.info "ERROR - NodeID supplied is not configured!";
			assert 1 == 2;
			break;
	}

log.info "---- PROCESSING COMPLETE";
/*
*  Get the account's rightslocker
*/
try {
	dbAcct = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbAccount - $e";
	assert 1 == 2;
}
finally {
	try {
		rightslocker = dbAcct.accountGetRightsLockerId(acctoid);

		log.info "rightslocker: $rightslocker";
	}
	catch(Throwable e) {
		log.info "ERROR - dbAcct.accountGetRightsLockerId - $e";
		assert 1 == 2;
	}
	finally {
		assert rightslocker.length() > 0;
	}
}
/*
*  If we are here then we lived.  Now we will populate all the other 
*  generic values everyone gets.
*/
callTC.setPropertyValue("accountoid",acctoid);
callTC.setPropertyValue("useroid",useroid)
callTC.setPropertyValue("assertId",uuid);
callTC.setPropertyValue("assertionUUID",uuid);
callTC.setPropertyValue("assertionAccountIdFULL",assertionAccountIdFULL);
callTC.setPropertyValue("assertionUserIdFULL",assertionUserIdFULL);
callTC.setPropertyValue("assert",assertion);
callTC.setPropertyValue("rightslocker",rightslocker);
callTC.setPropertyValue("rightslockerFULL", rturn + rightslocker);

if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
lastColon = assertionAccountIdFULL.lastIndexOf('%');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 3));
lastColon = assertionUserIdFULL.lastIndexOf('%');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 3));
}
else
{
lastColon = assertionAccountIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 1));
lastColon = assertionUserIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 1));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish other account/user related data" disabled="true" id="387f5c42-e377-499f-a96a-79bf45329848"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctoid = tC.getPropertyValue("accountoid").toString();
String nodeID = tC.getPropertyValue("nodeid").toString();
String userID = tC.getPropertyValue("username").toString();
String rightslocker = "";
String useroid = "";
String accountoid = "";

assert acctoid.length() > 0;

/*
*  useroid
*/
try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	useroid = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}

try {
	def a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
	rightslocker = a.accountGetRightsLockerId(acctoid);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}
finally {
	callTC.setPropertyValue("rightslocker",null);
	callTC.setPropertyValue("rightslockerFULL",null);
	
	log.info "rightslocker[$rightslocker]";

	callTC.setPropertyValue("rightslocker",rightslocker);
	callTC.setPropertyValue("rightslockerFULL",tP.getPropertyValue("urnRightsLocker").toString() + rightslocker);
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00101 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with COORDINATOR - 403 Forbidden_MIGRATED</con:value></con:property><con:property><con:name>sName</con:name><con:value>Node Permission and some negative Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>COO</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150424_033611</con:value></con:property><con:property><con:name>synced</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>81166</con:value></con:property><con:property><con:name>UserName_Property</con:name><con:value>UserName_FAU1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d8bffa81-c036-42ea-b90a-1026da5ea3b1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authorization Information Extraction via STS" searchProperties="true" id="ae21e503-93f7-4647-9978-f99057e924f1" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Properties" id="20d9a3ad-d4f8-4e94-adae-55fbf17cee63"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("userrowoid",null);
tC.setPropertyValue("accountrowoid",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properities" id="64b86003-5897-439b-be20-759805d52be6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish whether login is necessary for node/user combo" id="8bea740b-5442-4e17-89a7-b3a0fbaf0169"><con:settings/><con:config><script>def tC    = testRunner.getTestCase();
def tS    = tC.getTestSuite();
def tP    = tS.getProject();
def today = new Date();

String node      = tC.getPropertyValue("nodeid");
String user      = tC.getPropertyValue("username");
String propAssertion  = node + "_" + user + "_assertion";
String propAssertUUID = node + "_" + user + "_assertUUID";
String propUser       = node + "_" + user;
String propAccountoid = node + "_" + user + "_accountoid";
String propUseroid    = node + "_" + user + "_accountoid";
String propassertionAccountId = node + "_" + user + "_assertionAccountId";
String propassertionAccountIdFULL = node + "_" + user + "_assertionAccountIdFULL";
String propassertionUserId = node + "_" + user + "_assertionUserId";
String propassertionUserIdFULL = node + "_" + user + "_assertionUserIdFULL";
String prop      = tC.getPropertyValue(propUser);
String asstuuid  = tC.getPropertyValue(propAssertUUID);
String assbinary = tC.getPropertyValue(propAssertion);
String assAccountId = tC.getPropertyValue(propAssertion);
String assUserId = tC.getPropertyValue(propassertionUserId);
String assAccountIdFULL = tC.getPropertyValue(propassertionAccountIdFULL);
String assUserIdFULL = tC.getPropertyValue(propassertionUserIdFULL);
String tday = String.format('%tY/%&lt;tm/%&lt;td',today);

this.log.info "Date[$tday] - prop[$prop] - asstuuid[$asstuuid] - assbinary[$assbinary]";
this.log.info "propAssertion[$propAssertion] - propAssertUUID[$propAssertUUID] - propUser[$propUser]";

if (prop == null) {
	tC.setPropertyValue("doSTS","true");
	tC.setPropertyValue(propUser,tday);
	tC.setPropertyValue(propAssertUUID,null);
	tC.setPropertyValue(propAssertion,null);
	tC.setPropertyValue(propAccountoid,null);
	tC.setPropertyValue(propUseroid,null);
	tC.setPropertyValue(propassertionAccountId,null);
	tC.setPropertyValue(propassertionUserId,null);
	tC.setPropertyValue(propassertionAccountIdFULL,null);
	tC.setPropertyValue(propassertionUserIdFULL,null);
	} else if (prop != tday) {
	tC.setPropertyValue("doSTS","true");
	tC.setPropertyValue(propUser,tday);
	tC.setPropertyValue(propAssertUUID,null);
	tC.setPropertyValue(propAssertion,null);
	tC.setPropertyValue(propAccountoid,null);
	tC.setPropertyValue(propUseroid,null);
	tC.setPropertyValue(propassertionAccountId,null);
	tC.setPropertyValue(propassertionUserId,null);
	tC.setPropertyValue(propassertionAccountIdFULL,null);
	tC.setPropertyValue(propassertionUserIdFULL,null);
	tC.setPropertyValue("nodeuserid",null);
} else {
	// Check the UUID property
	if (asstuuid == null || asstuuid == "") {
		log.info "assertionUUID is null/empty";
		tC.setPropertyValue("doSTS","true");
		tC.setPropertyValue(propAssertion,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAccountoid,null);
		tC.setPropertyValue(propUseroid,null);
		tC.setPropertyValue(propassertionAccountId,null);
		tC.setPropertyValue(propassertionUserId,null);
		tC.setPropertyValue(propassertionAccountIdFULL,null);
		tC.setPropertyValue(propassertionUserIdFULL,null);
	// Check the assertion binary property
	} else if (assbinary == null || assbinary == "") {
		tC.setPropertyValue("doSTS","true");
		tC.setPropertyValue(propAssertion,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAccountoid,null);
		tC.setPropertyValue(propUseroid,null);
		tC.setPropertyValue(propassertionAccountId,null);
		tC.setPropertyValue(propassertionUserId,null);
		tC.setPropertyValue(propassertionAccountIdFULL,null);
		tC.setPropertyValue(propassertionUserIdFULL,null);
	} else {
		int lastSlash = assUserIdFULL.lastIndexOf(':');
		
		tC.setPropertyValue("doSTS","false");
		tC.setPropertyValue("assertionUUID",asstuuid);
		tC.setPropertyValue("assert",assbinary);
		tC.setPropertyValue("accountoid",propAccountoid);
		tC.setPropertyValue("useroid", propUseroid);
		tC.setPropertyValue("assertionAccountId",assAccountId);
		tC.setPropertyValue("assertionUserId",assUserId);
		tC.setPropertyValue("assertionAccountIdFULL",assAccountIdFULL);
		tC.setPropertyValue("assertionUserIdFULL",assUserIdFULL);
		tC.setPropertyValue("nodeuserid",assUserIdFULL.substring(lastSlash + 1));
	}
}
log.info "doSTS is " + tC.getPropertyValue("doSTS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="598c836d-2882-41b1-ac19-9ec5e1947321"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propAssertion  = node + "_" + user + "_assertion";
String propAssertUUID = node + "_" + user + "_assertUUID";
String propUser = node + "_" + user;

log.info "propUser[$propUser] - propAssertion[$propAssertion] - propAssertUUID[$propAssertUUID]";

def doSTS = tC.getPropertyValue("doSTS");

if (doSTS == "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS API")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	if (runnerTC.status != Status.FINISHED) {
		tC.setPropertyValue(propUser,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAssertion,null);
	} 

	assert runnerTC.status == Status.FINISHED;
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS GET" id="8dbebe99-b3df-47dc-801a-dd797e53f1a6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def doSTS = tC.getPropertyValue("doSTS");

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propassertionAccountId = node + "_" + user + "_assertionAccountId";
String propassertionAccountIdFULL = node + "_" + user + "_assertionAccountIdFULL";
String propassertionUserId = node + "_" + user + "_assertionUserId";
String propassertionUserIdFULL = node + "_" + user + "_assertionUserIdFULL";

if (doSTS == "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS GET API")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
	
	tC.setPropertyValue(propassertionAccountId,tC.getPropertyValue("assertionAccountId"));
	tC.setPropertyValue(propassertionAccountIdFULL,tC.getPropertyValue("assertionAccountIdFULL"));
	tC.setPropertyValue(propassertionUserId,tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue(propassertionUserIdFULL,tC.getPropertyValue("assertionUserIdFULL"));
} 


</script></con:config></con:testStep><con:testStep type="groovy" name="Store assertionUID for the node/user" id="ebb7ea1c-22ea-4896-98b8-33695fae2745"><con:settings/><con:config><script>def tC    = testRunner.getTestCase();
def tS    = tC.getTestSuite();
def tP    = tS.getProject();
def today = new Date();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String prop = tC.getPropertyValue(node + "_" + user);
String asst = tC.getPropertyValue(node + "_" + user + "_assertUUID");
String tday = String.format('%tY/%&lt;tm/%&lt;td',today);

this.log.info "Date[$tday] - prop[$prop] - asst[$asst]";

if (prop == tday) {
	tC.setPropertyValue(node + "_" + user + "_assertUUID", tC.getPropertyValue("assertionUUID"));
	tC.setPropertyValue(node + "_" + user + "_assertion", tC.getPropertyValue("assert"));
} else {
	tC.setPropertyValue(node + "_" + user,null)
	tC.setPropertyValue(node + "_" + user + "_assertUUID",null);
	tC.setPropertyValue(node + "_" + user + "_assertion",null);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract OID level User/Account Information" id="6b07ef83-33c9-4c81-a87e-a2ec0797a365"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());


String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID, to_char(rawtohex(a.USER_OID)) USER_OID, 
to_char(rawtohex(b.NODE_USER_ID)) NODE_USER_ID, to_char(rawtohex(c.NODE_ACCOUNT_ID)) NODE_ACCOUNT_ID, 
to_char(rawtohex(b.ROW_OID)) ROW_OID, to_char(rawtohex(c.ROW_OID)) ROW_OID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = '$uname'
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = '$nodeid'""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);

	accountoid = myXML.ResultSet.Row[0].ACCOUNT_OID.text();
	useroid = myXML.ResultSet.Row[0].USER_OID.text();
	nodeUser = myXML.ResultSet.Row[0].NODE_USER_ID.text();
	nodeAccount = myXML.ResultSet.Row[0].NODE_ACCOUNT_ID.text();
	userRowId = myXML.ResultSet.Row[0].ROW_OID[0].text();
	acctRowId = myXML.ResultSet.Row[0].ROW_OID[1].text();
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	log.info "accountoid[$accountoid]";
	log.info "useroid[$useroid]";
	log.info "nodeUser[$nodeUser]";
	log.info "nodeAccount[$nodeAccount]";
	log.info "userRowId[$userRowId]";
	log.info "acctRowId[$acctRowId]";

	tC.setPropertyValue("accountoid", accountoid);
	tC.setPropertyValue("useroid", useroid);
	tC.setPropertyValue("userrowid", userRowId);
	tC.setPropertyValue("accountrowid", acctRowId);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store the ACCOUNT.ACCOUNT_OID lockerId" id="a3f68e5c-edbb-430b-ba87-13965e3ad27b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propAccountoid = node + "_" + user + "_accountoid";
String propUseroid = node + "_" + user + "_useroid";

tC.setPropertyValue(propAccountoid,tC.getPropertyValue("accountoid"));
tC.setPropertyValue(propUseroid,tC.getPropertyValue("useroid"));

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

def x = a.accountGetRightsLockerId(tC.getPropertyValue("accountoid"));

this.log.info "x[$x]";

tC.setPropertyValue("rightslocker",tP.getPropertyValue("urnLocker") + x);


</script></con:config></con:testStep><con:testStep type="groovy" name="Setup base node-level information based on calling Node type" id="b3708838-c263-45d8-9fef-c6dfad05475f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def baseNodeType = tC.getPropertyValue("nodetype");

//
//  Establish project-defined properties at the test case
//  level
//
tC.setPropertyValue("cid",tP.getPropertyValue("cid"));
tC.setPropertyValue("alid",tP.getPropertyValue("alid"));
tC.setPropertyValue("deceorgid",tP.getPropertyValue("deceorgid"));

if (tP.getPropertyValue("targetPort") == "443") {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
} else {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
}
//
//  Establish the basic nodeaccountid, nodeuserid, etc.. by 
//  nodetype
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));
tC.setPropertyValue("nodeaccountid",tC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("nodeuserid",tC.getPropertyValue("assertionUserId"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Promote variables to calling TestCase" id="61c35a89-a0c0-4274-a772-40570639a6d7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def toTCName = tC.getPropertyValue("tName");
def toTSName = tC.getPropertyValue("sName")

String usernodeConcat = tC.getPropertyValue("nodeid") + "_" + tC.getPropertyValue("username");
String usernodeUUIDConcat = tC.getPropertyValue("nodeid") + "_" + tC.getPropertyValue("username") +	"_assertUUID";

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = tC.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "assert":
			case "assertionAccountId":
			case "assertionAccountIdFULL":
			case "assertionUserId":
			case "assertionUserIdFULL":
			case "assertionUUID":
			case "cid":
			case "deceorgid":
			case "rightslocker":
			case "targetURL":
			case "useroid":
			case "accountoid":
			case "nodeaccountid":
			case "nodeuserid":
					toTC.setPropertyValue(testCasePropertyKey,tC.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>0910_pjgorg1full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0910_pjgorg1full1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0910_pjgorg1full1_assertionAccountId</con:name><con:value>9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgorg1full1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgorg1full1_assertionUserId</con:name><con:value>9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgorg1full1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgorg1full1_assertUUID</con:name><con:value>43a2ee03-3fe6-4b79-8b47-0a0096fc38d4</con:value></con:property><con:property><con:name>0910_pjgorg1full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionAccountId</con:name><con:value>9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionUserId</con:name><con:value>9B630FEB48949993E0401F0A05995D5F</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B630FEB48949993E0401F0A05995D5F</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_assertUUID</con:name><con:value>672aaea0-a1d6-4d72-8722-dede46e212c0</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1_useroid</con:name><con:value>0604</con:value></con:property><con:property><con:name>0912_pjgorg1full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0912_pjgorg1full1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0912_pjgorg1full1_assertionAccountId</con:name><con:value>9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgorg1full1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgorg1full1_assertionUserId</con:name><con:value>9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgorg1full1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgorg1full1_assertUUID</con:name><con:value>fc976555-dca4-4e0b-bc03-89ef6a35cb2d</con:value></con:property><con:property><con:name>0912_pjgorg1full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionAccountId</con:name><con:value>9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionUserId</con:name><con:value>9B6294BDB283209BE0401F0A07995359</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B6294BDB283209BE0401F0A07995359</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_assertUUID</con:name><con:value>dc4f7916-304b-4331-a232-b0e0166b2ae4</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1_useroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionAccountId</con:name><con:value>9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionUserId</con:name><con:value>9B66525BB290015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BB290015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_assertUUID</con:name><con:value>dacf14f1-39e1-4fd8-a13e-416b0ce396bf</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1_useroid</con:name><con:value>0604</con:value></con:property><con:property><con:name>0914_pjgorg1full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertionAccountId</con:name><con:value>9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertionUserId</con:name><con:value>9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1full1_assertUUID</con:name><con:value>7a21532f-8ba0-481b-8a2a-7b62f6f82097</con:value></con:property><con:property><con:name>0914_pjgorg1full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>0914_pjgorg1full2_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0914_pjgorg1full2_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgorg1full2_assertionAccountId</con:name><con:value>9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1full2_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1full2_assertionUserId</con:name><con:value>9C687F959B4B13ABE0401F0A059957EB</con:value></con:property><con:property><con:name>0914_pjgorg1full2_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9C687F959B4B13ABE0401F0A059957EB</con:value></con:property><con:property><con:name>0914_pjgorg1full2_assertUUID</con:name><con:value>335a05a4-2979-4f2a-9887-b969e7358157</con:value></con:property><con:property><con:name>0914_pjgorg1full2_useroid</con:name><con:value>1600</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertion</con:name><con:value>nVdZc6pME773V1iey1TCoqhYJ6kaVlFHZXG9QxgWRVAWQX/9N2A0Jidneb+LlJmml2e6n+np+ZmY+4DugSRBcepHYV0RXhs0bXaatEM/b9oO+dyiaeaZdWz0bFEsImnKNEmz3agrSZIhJUxSM0yxDUlRz2TzmWoaFNVjmj2q+dJiyHWjPkdxgj1jlReyUS/2QZj0qqivjSwOe5GZ+EkvNPco6aVWTwdw1MOaPfMGqfH28wqyChi/eWl66BGE9WIjCwWB9WJFe+In8Unnp530dN8NzTSL0XtMO3ltvNvmef6SN1+i2CVokiQJkiWwjp347o/GW+1mjGwldKLrmjfDKPQtM/AvZgkKotSL7DoI3Cj2U2//G9cUQZGl62dUWDh9rfBHg/gIUKH7R0+fQMaJ+Zx4JnVzpiEHxSi0UH2mKa+NH/9UwKupEZth4kTxPvmy/m+IUHhCQXRA9nNy29gN3L97/CZbbz+R1VNCK8gS/4TGJUsOpoWS+jRGjl+M/ARzz07qVfXrRXIjGLL+S0V+Eo84MWzim8wIvouS9P8p12Oprl7mZpCht5nurvx0t/Q6RoIg1+nAbD/P6bUetl4rCI/KV1D3Sr+vv/L0Tqt3o5gmhjZBuj6whdY+6OqxpCnkKD3OQrMbqao/15SFo8ssPeXldDmlOsi5cNDgBw4XOi0j9JpLd7ti3R1QayBlpeFOL/pPSwsy7IYyl7zWNdY7OJyTU4rhTNlld8NTf8NApXMeQ24/GDnHvjYGfLBj0Xb6JE5a8UhurbIaUNLcdPaOwB+d40UWRHr2+rGnxz2U+xqic7XJ8v8lQ7KCmZr3BV82CgefzhS9QUURsgvPg7PuglzhgIv/tmDMubujt/NlNic5oKoSEHgu2IojCHYyoGYi50F+PocFfwEDzh3PsaFRA8Gag5qYC/lKmKtqX8w9w5bn540cZOuLOIYgqYx5D4qaOBc0Q4QQRFdZAYWNXGyhDnNFXQk17EAQi8PFltkUyYVv0QoDdYZe6Uy2Xs6xXDqP9uPTxhADyEOZ14+yrmyagioOgLZaWLSUYdvLaH+IaqsZ92A0OKAtQFJO4pjgAo1dDo0ZPRY0s5IZn2VQkQdQTXJerXYl18R8MJ9dPnLBc5C392IhGmB6zYVl8NKYXC8HiblgQqiBXHAr46GY25MbEKiSeY2/5mok5pqozcYS1JRcBJVMEPMg2dBjbyN7J6upFgMDbB8Lw6viQgrx91A7WWfmWDNlCWz2c8pqap7lM765jHJ33c0FdTUYRmsFuxkDVeQ4FWBAJCi3hvPPgRE3ZyYHn6V9NHKkaI+8uAapaLg7XQqy6zcn7nS8YARn15nK/rRp2h6hBBa9be6AoiB7SHmqaWsrQhNC/9KeDGdL5MerSzpmVKrtd5matshmSyEKOnZ/uZoNn4qVpRqTqT5bTC9FMT5uu5cg7U+4fqwPoOBOxghNE+uJIE2JM7oCw6/6W8wnRyMRUwMu5ACQt64r+pjAXH97JWFfgyImL4B8LvMLXtaBLD+JCieoqiN51NSS59mMGkNFtAOcpvNqqQW1Nc8JuFKkuVgfVrRErg1gV87Ulii56ox5GizRWh0HxjwF+WHuhBRFyge178DctWDJAFvJdQ6fIq6WKWBmTg4DshjO2yR1VO1goLNg1ix0eldMPHd93rnrHS7K6uHorAwQzI0HjimYYouaaogaBN3reSugMmtqgbUvDpu9VQgGrlllHBmcqEkqOSsEAQyvssQAdJGsLuIW8mJlXwMFNDEtTpull6zCsT8xxAyTNnugy3ZDk3/lWEmx2meOHXmggq8cE68cE4FzfFK6ApUwbf6QLHKXk8Wj2pmPBuyBVJejXY17kgg39YPWJOzmxvBpQZ3zjrdVFwtWETz+KXRWXnOTcqR5sVQ02HVkX9sJYbsVnOEIqszMJ4IzuUXHPBnVxgoVis30IhFsnD1x+7W/v1yaLXq2n+rZSZmZw4Q6e5vjgs23036bIGL5zFw665MqLSNrdb1HvjbJu/DaRonHBvupA99GLz3bbJGV3pblPawIdQlfjmb65zGulPj2s1Op9g7lLJikKEwbb6VVOcL1Mjzo+XYP35zXNcu1mTbbYima4ySRbotki6QkEpAdlm1z7fZt1rui+AKRj0LHL2OVw+z1sv4zQGvf2yAzRnHjD57KPNWVUMPTRxQmyIheGxINhCbT6TACAFyr1aLbLNfBODstfOZErtOoj6N0Ek5i4KQofhiQW18HZA1Z/sFH5RT9PkskKU7E0TxlaUC9nMyXEGV4zI7LSbdHt7pMlQDCzvYHC3/A3S0+REn6cvAO1TDz2218/XbbMdax/VIhKUFzCFcLfTPSkzfEv+yM/nb0v7kHme2XMwtOXxr71hXJ508fbChpcKcCyVKtG+a76r+ZshTV/tWU+AMi4msy7pHsk/8Q9/YwwbM2Hseq90iCi3Y0X44v2emUVWXqkCRNxNg9QREkoSMrw+Pi2Yh2KCTuHoh/GdTvmL/Evcs/o8tSL9RTfMr3mFH1avn3R9ona5yAFBXpdzI+wM+yMvgfX25Wzyr1sHiKf/Iotj/y/o2vhzgYctmh/NAtV+WEff5c3veT0LMi7NXHTSqKH31/Z/9d7M/Ce7ruUFLMik2Wot9/qZfd57VhWlaUhakiNCrBY0esMKfnA+p9KP3iphpx398sRfLbN8sSjnTLQ3uzcdf1/6787FeFtxC2SvwKy2ujwK9vHDx0HzrwO8AvTbjN0AwHpDZD4tH+3oQZlm3RPLgn8NNO3n4R/yp5yOlXZr/9Dw==</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionAccountId</con:name><con:value>9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionUserId</con:name><con:value>9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B65694912BBFE26E0401F0A07996B66</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_assertUUID</con:name><con:value>22a732f2-b6f0-4225-9fde-c19e021aa0a6</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1_useroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>1914_pjgorg1full1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertionAccountId</con:name><con:value>9B630FEB48529993E0401F0A05995D5F</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B630FEB48529993E0401F0A05995D5F</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertionUserId</con:name><con:value>9AAF3967D142A00FE0401F0A059925BE</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9AAF3967D142A00FE0401F0A059925BE</con:value></con:property><con:property><con:name>1914_pjgorg1full1_assertUUID</con:name><con:value>4356ff1f-e3a9-4826-950e-951734046b6e</con:value></con:property><con:property><con:name>1914_pjgorg1full1_useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>910_null_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>910_null_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>910_null_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>910_null_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>910_null_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_assertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>9116_pjgOrg1Standard1_assertUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B4E7893991BB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>fc976555-dca4-4e0b-bc03-89ef6a35cb2d</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>doSTS</con:name><con:value>false</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZc6pME773V1ieSythUdwqSdWwiooKgtsdDiOgCMgi6K//BozG5OTknPe7SJlpenm6+6HpeYnNg0f3QByjKHEDvyrzr7Ut7LZbDMM8WdBsPjURuXnaQLLx1OmibctsMHBDW7WqHMcpkv04Mf3ktUaTFPWEdaimTlG9BtOjyedGt7OuVecoirFnrPJM1qr5wfPjXhn1tZZGfi8wYzfu+eYBxb0E9mZAGfWwZs+8Qaq9vVxBlgGjNydJwh5BwGcLQeR58BkGB+KF+KTzYsW9mWv7ZpJG6D2mFb/W3m2zLHvOGs9BZBM0SZIE2SWwjhW79q/aW+VmjCzZ3wbXM2f6ge9C03MvZgFKQYkTWFXg2UHkJs7hD64pgiIL108oh0+Qavq/asRHgBLdP3r6BDKKzafYMambMw1tUYR8iKqGJr/Wfv1TA6+memT68TaIDvGX839DhPwT8oIQWU/xLbEbuH/3+E213l4Q7Mk+9NLYPaFxwZLQhCiuTiO0dfORG2PuWXG17H41j28EQ/C/dOSFeMSJYRPfVIZ3bRQn/0+7Hlt19TI3vRS9tXiUn9NIGh1nQWbUV90lCQEjTbiV/FpCeFS+grp3+v38lad3Wr0bAW1nNIxj6qS7hT7It6PNoc6AcXs5nDl7lWnUhza/juudvu/PB7ks7CTdTU8XLbLIumqk5GhK9hsLlZH2Slhp8qo0suARxF6mqAESncU51QZ8KM/BnJyOKVoEKT+EIhlexsfBbDWZxVKLFOF0TjSWl5XUH1x8MFhv1tyxYiA0kI7gqEoO7dUbUb0uvH7k9JhDkdcQncski/+XDNnlzcS8H7hiUGzx25mgN0WW+fTCceA8s0Ems8DGfzswZu390dm7UjcjWaCqIuA51tsJIwXsJUAZAuso3Hyu5NwFDFh7PMeGegV4a1bRhIzPVvxcVftC5uiWND9vJC9dX4SxAuLSmHMUQRPmvKYLigKCqyxX+I2U75SZksnqiq9gB7yQhxdL6iZIyl1Iy4wyY+jVjEnXyzmWi+fRYXza6IKncIrEzY7STN40eFUYAG21gLSYYtvL6BAGlZXBPhgNQrQDSMxIHBNcFH2fKbpBj3nNLGX6Z5kiSwNFjTNOLbOSKkI2mBuXj1pwrMJZByEXdDC91gLqnDgm18tBbC4YX9FAxtul8VDIrMkNiKKSWYW71mokZJqgGWNR0eRMAKWMFzIv3tBjZyM5J9hQ84EOdo+N4VRhIfr4ua+d4Jk5VkxJBJvDnIINzYEu45rLILPXnYxXV4NhsJaxmzFQBZZVAQZEgiI1XH8WjNg5MwndLu2i0VYMDsiJKgoVDPenS0523MbEno4XDL/dt6eSO22YlkPIHqR3jT2QZWQNKUc1LW1FaLzvXlqTobFEbrS6JGNGpVpuh6loi9RY8oHXtvrLlTGs5yuo6pPpzFhML3k+Pu46Fy/pT9h+NBsovD0ZIzSNYZ0gTZHVOzzDrfo7zKetRiKmAmyFBUDa2bbgYgKz/d2VhH1NETB5gcJlErfgpBmQpLogs7yqbkWHmkJpnhrUWJEFy8NlOq+WmldZcyyPO0Wai3W4okVyrQOrdKY2BdFWDaY+WKK1Ovb0eQKycL71KYqUQrW/VTIbKgUDLDmbsfgtYiupDAxzEg7IfDhvkdRRtbzBrAuMRj6j9/nEsdfnvb3e46asHl6dlQ68uf7AMRlTbFFRdUFTQOf6vuWKbDQ0Dx7ycHOAOa/jnpXGgc4KmqiSRs7zYHiVxTqg83h1EXYKJ5T2FZArJqbFabN04pU/die6kGLSpg902W1o8q8cKyhW+cyxIwdU8JVjwpVjAtge63KHp2KmxYXxIrNZSTiq7flo0A1JdTnaV9i6SNiJ6zUnfifTh/UFdc7azk5dLLoy73B1f7tyGpuEJc0LVNFg35Zcbc/7raZ3VkaKyhgu4Z3JHTpm8agylilfaCQXkehGaZ09rN3D5dJo0sZhOktPsmEOY+rsbI6Lbrab9lsEEUln5tJen1RxGcDV9TvydUjehdcxSjwO2E8T+LZ6zdLNDsHkdiy+wzJfFfHH0Ux+XuMKiWs9bUvVXljsgnGC/KT2VlgVK1wvxYuea/Xwl/N67rJNod3pNrpdimMpjhHIJkmJJCCZbpemWuJt17ui+AKRC/ytW8Qqltnrx/pngPDQ2yAzQlHtB09Fnaqyr+HtI/BjpAd4m20wbYFuMmKLbjd5lmm2OrxA8RQDyE4T0N1adRwkE38SgW2CoocFmfm6IGsIuqGLii36fZeIE1yIo3lKE496PpnPPkrxmh0Vm26PbnaYsgCElR5CiB/g6RaFQZw8h05YLjN/TOPrs1vGWMdyC4W4AM0i3C30zUpP3RD/lhn97ep/cw9Syy12Fly+JHLhFcnnRx9sKGhwpwLZpegb5rvqv5lS35oSPyAivhbjHsk6uQ9xbxcTvGvjday8j8S4aUfz+ficnk5p2aY2SdJEhN0TFEESMwRTvC6e9WCPfOLugfiXRf2O+Uvcu/wzujRx/FmC3/IDZlS1PP79kvbJGhcgQXnynYzz8LWsCP7jzQ32YKGHxVP8kwXRRw7f+XqIgyEXE8r17eJUbNjnz+19fxN6MMBeXTykgujR93f238X+LLyX6w4lwazYpAn685NqMX1eayaEQeonMl8rBY8TscScnEPU+1D6zU254r7fWfL4j3eWpTKaQQcdzNpd1/278pNbNh4ibBW7JZbXWo5v3zi4bz9M4HeAfxjC4Kch/DmTt9/Ev0seavqV2W//Aw==</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0912</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value>null0900</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tName</con:name><con:value>RightsTokenCreate</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>userrowid</con:name><con:value>9B4E7893991DB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>0914_pjgorg1full1</con:name><con:value>2011/03/14</con:value></con:property><con:property><con:name>0912_pjgorg1full1</con:name><con:value>2011/03/14</con:value></con:property><con:property><con:name>0914_pjgOrg1Standard1</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0912_pjgOrg1Standard1</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0914_pjgOrg1Basic1</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0912_pjgOrg1Basic1</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0914_pjgorg1basic2</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_assertUUID</con:name><con:value>da82db4c-1b57-4df2-9fe8-f85459a6a872</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_assertionAccountId</con:name><con:value>9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_assertionUserId</con:name><con:value>9CDFDA6C0B79F3ADE0401F0A05996EAE</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9CDFDA6C0B79F3ADE0401F0A05996EAE</con:value></con:property><con:property><con:name>0914_pjgorg1basic2_useroid</con:name><con:value>1604</con:value></con:property><con:property><con:name>0912_pjgorg1basic2</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_assertUUID</con:name><con:value>2cdcc7b9-2025-439e-b55d-995e55b38d45</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_assertionAccountId</con:name><con:value>9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_assertionUserId</con:name><con:value>9D1D45A45534E4E5E0401F0A059975E3</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9D1D45A45534E4E5E0401F0A059975E3</con:value></con:property><con:property><con:name>0912_pjgorg1basic2_useroid</con:name><con:value>1604</con:value></con:property><con:property><con:name>0910_pjgorg1full1</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0914_pjgorg1full2</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_assertUUID</con:name><con:value>6e70c902-e5e8-49cc-857f-14eda7025fab</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_assertion</con:name><con:value>nVdZc6pME773V1iey1TCoqhYJ6kaFgkqKogL3uEwAoqgDAj6678Bo9GcnOX9qpJKpunlme5nenp+YnsXsB2AMYoTPwqrqvRaa6IWDXmafUYcaj83eAif21xr/cw0kGO3aJZb26taVcU4RWqIEztMXmsszTDPdP2ZqZsM02GZDtd4aTWby1p1hmJMPBOVF7pWzXdBiDtl1NdaGoedyMY+7oT2DuFOAjsToA06RLNjXyHV3n5eQJYB4zcvSfYdioIvDoIoCOALjHbUT+pB56eDOxPfDe0kjdFHTAe/1j5ssyx7yeovUexSLE3TFM1TRMfBvvuj9la5GiNHDdfRZS3aYRT60A78s12A0lDiRU4VBG4U+4m3+41rhmLowvUzyuEzZBrhjxr1GaBE94+eHkDG2H7Gns1cnRlojWIUQlSdGupr7cc/FfBiasZ2iNdRvMNf1v8NEQqPKIj2yHnG141dwf27x2+y9fYTwY4awiDF/hENC5bsbYhwdRyjtZ8PfEy45+BqWf1qjq8EQ/C/VOQndY+TwKa+yYzkuwgn/0+57kt18TKzgxS9raMR3EitPiXj40FObTXpMQ3tfcG9w9cSwr3yBdSt0h/rrzy90erDyGlllndYtacqRuOwvW1nohQMoGWkTZFJOXXLbDltH+nUxpq02SVqGTtj2G63ulZX6klcz7O003jsilpj41WAaxwdmMZwOns6oJSvNxfLUI0EyfB7gI+4yXyG3dMaH7ij6ZnymZ4wtD6graApUOG+gX2/Jwc58TzIV5XQq69hapwFzmysg51N76avn3u630Oxrz46lZss/l9wNC/ZiX1biEWjWJPTmaA3TVWl9CyK4DRxQaYKwCW/GzAU3O3B2/oKn9EC0PUukEQh2MgDDWwVwExlwdPE2UzLxTPoCe5wRgzNCgiWgmbImZRZ0kzX3+XMMx1ldlopQbo8y0MN4NJY9DTZkGeSYcqaBqKLLNeklZJvtImWqbolVYgDSc73Z0fhE6TkPmRVTptwrDXh0uViRuTd02A3PK5MOdBETREnB2WiruqSLveAYc0h202J7Xmw20cVayrcGfX2aANQN6NJTHDWzG2mmVN2KBl2KTMfZZqq9DQdZ6Je7kqpyFlvNj1/5kIUNNHZyblsgvElF9AUu0N6uehhe86FmgEyyS2N+3LmjK5ANJ3OKuIlVwM5M2RjOuxqhprJoJRJchbgFTv0Vop3hHU975lgc18YUZfn3ZB8D40jPHGHiq10wWo3Y2Dd8KDP+fYiytxlO5N0q9ePlipxMwS6LAg6IIBoUGyN5F8AA2HGjfY+z/posO5GO+TFFY2J+tvjOafbfn3kjodzTlpvW2PFH9dtx6PUALKb+haoKnL6jKfbjmFRhhT65+aoP10gP7bOyZDTmabf5irGPJ0upChoOe8La9p/yi2om6PxZDofn/N8eNi0z0HyPhLe40lPk9zREKExhk8UbXcFsy1xovW+IXxaGzTiyMHSBACUjevKPiGw8L65kPDd0GRCXqCJmSLORWUCFOVJVgVJ19ddjxlDZZZOmaGmyk5A0nSyFkZQWYqCRCpF2/Pl3mK79NIETulMb8hdV59yT70FWurDwJwlINvP1iHD0Mpef19rmQu1ggGOmk0EcoqESqqCqT3a9+i8P2vSzEF3gt6EB9N6PmG3+chzl6etu9ySolh3R8cyQTAz7zimEorNK7opGxpoX85brqnTuhHAXb5f7WAumaRmpXFkCrLR1elpLkmgf5FhE7A5ts7yRhPl0r4Ccs0mtDiuFh62wqE/MuWUkDa9o8tmxdJ/5VhBscojxw4i0MFXjskXjslgfXhS2xKDuaa4x/PMFRT5oLdmgx6/p/XFYFsRnrqUm/hBYxS2M7P/NGdOWcvb6PM5r0qe+BSuLa++SgTaPkMd9bYtxTe2UthsBCdtoOnc1KeCE71BhwwPKkOVCeV6cu5SfJw+Cbulvzuf6w12uhtP0qM6tfuYOXmrw5zPNuP3JkXFyok7t5ZHvbuIoHW5R742yZvw0kap+wb70IGvo9ckXW0QTK7L4h5WpWqXXI528ucxrpD4zvO6VO3si1kQJyhMam+FVTHCdVIy6PlOh9yclzUvtPgmL8u8DJhWixZlukEzXRrQLZ6v0wBcZ70Lii8QxShc+0WsYpi9XNZ/Bgh3nRWyYxTX/uCpyFNVDQ0yfUQhRmb0WqPZOs3IdQnw3ZZIfrguwzQZmhXqbF1sc2KtOoySUTiKwTpB8d2A3Pg6IBsI+nsfFVP0xyyBE5KIg31Mk4B5OdovIUrJmB0Xk26HbbS5MgGUk+72kHwg3S3eRzh52Xv7cpj57Ta+frvumOg4fqGAC9ACItVC34z0jSviX3bGfjv6X92D1PGLmYWkL4l9eEHy+OmTDQUNblSgeYa+Yr6p/pspzzDcr6bUHxBRX5Nxi+Qc/bu414cJmbXJOFa+RzAp2sF+Obykx2NalqlF0ywVE/cUQ9HUBJGxyU9OZrRFIXXzQP3LoH7D/CXuTf6ILk28cJKQU74jjKqWy78/0h6sSQISlCffycSAPMuK4H98ucEOLPSIeEz+ZFHsfOb9G193cQjkokP5oVusign79Fjej5PQgRHx6pMmFcX3vr+z/y72o/CWrhuUhLBilSbo91+qRfd5rdkQRmmYqFKtFNx3xBJzctqjzqfSL27KEffjzZLj375ZFtpgAj20s2s3Xf/vys9+WXiIiBX2SyyvtZy8vknw0L3rwB8AH5twkwN8SxB5SZBF9rMJczzfAi3+lsCHnbz9Iv5VcpfTr8x++x8=</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_assertionAccountId</con:name><con:value>9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_assertionUserId</con:name><con:value>9B7969EE9EA1770CE0401F0A079930AA</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B7969EE9EA1770CE0401F0A079930AA</con:value></con:property><con:property><con:name>0910_pjgOrg1Standard1_useroid</con:name><con:value>0602</con:value></con:property><con:property><con:name>0910_pjgorg1full2</con:name><con:value>2011/03/13</con:value></con:property><con:property><con:name>0910_pjgorg1full2_assertUUID</con:name><con:value>a53e480a-f98d-4754-8c8a-97599ea35418</con:value></con:property><con:property><con:name>0910_pjgorg1full2_assertion</con:name><con:value>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</con:value></con:property><con:property><con:name>0910_pjgorg1full2_accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>0910_pjgorg1full2_assertionAccountId</con:name><con:value>9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgorg1full2_assertionUserId</con:name><con:value>9DD0CB55ED027BCEE0401F0A07993B89</con:value></con:property><con:property><con:name>0910_pjgorg1full2_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>0910_pjgorg1full2_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9DD0CB55ED027BCEE0401F0A07993B89</con:value></con:property><con:property><con:name>0910_pjgorg1full2_useroid</con:name><con:value>1600</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA row" searchProperties="true" id="04cf3a40-a001-45ca-a16c-feaec4757dbd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="126722ce-4118-47e5-a512-1e96c1e0b551"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBRenewedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);
tC.setPropertyValue("expectErrTypeStreamRenew",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="e1cdfeb0-d97d-4266-a8b7-b9e9b48660fd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));
tC.setPropertyValue("expectDBRenewedBy",callTC.getPropertyValue("expectDBRenewedBy"));
tC.setPropertyValue("expectErrTypeStreamRenew",callTC.getPropertyValue("expectErrTypeStreamRenew"));

if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBRenewedBy") == "" || tC.getPropertyValue("expectDBRenewedBy") == null) {
		tC.setPropertyValue("expectDBRenewedBy",tC.getPropertyValue("nodeid"));
}
if (tC.getPropertyValue("expectErrTypeStreamRenew") == "" || tC.getPropertyValue("expectErrTypeStreamRenew") == null) {
		tC.setPropertyValue("expectErrTypeStreamRenew","SUCCESS");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA row" id="8326f67b-375c-4116-b553-0d48d558cf8d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String sh = tC.getPropertyValue("streamhandle");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select 
to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.USER_OID)) USER_OID,
TRANSACTION_ID,
STATUS,
STREAM_CLIENT_NICKNAME,
EXPIRATION_DATE,
CLOSED_DATE,
CLOSED_BY_ORG_ID,
CREATED_DATE,
to_char(rawtohex(a.CREATED_BY)) CREATED_BY,
UPDATED_DATE,
to_char(rawtohex(a.UPDATED_BY)) UPDATED_BY 
from STREAM_DATA a where STREAM_HANDLE_OID = hextoraw('$sh')""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Assert difference between EXPIRATION_DATE and CREATED_DATE not greater 24 hours" id="b2bdd228-42e4-4f09-9c85-9120527dd61e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def streamhandle = tC.getPropertyValue("streamhandle");

a = new dbUtils.dbStreams(log);

assert a.streamHandleVerifyExpiration(streamhandle) &lt;= 24;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify DB Row Data" id="c74bfc5b-b184-4640-ae98-7e634ee16250"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode   = tP.getPropertyValue("urnNode");
def acct      = tC.getPropertyValue("nodeaccountid");

String XMLbody = tC.getPropertyValue("dbxmlresponse");
String expectStreamHandle = tC.getPropertyValue("streamhandle");
String expectAccountOID   = tC.getPropertyValue("accountoid");
String expectRightsToken  = tC.getPropertyValue("rightstokenid");
String expectUserOID      = tC.getPropertyValue("expectDBCreateUser");
String expectStatus       = tC.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = tC.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy = "null";
if (tC.getPropertyValue("expectDBDeletedBy").toString() != "") {
	expectDBClosedBy   = urnnode + tC.getPropertyValue("expectDBDeletedBy");
}

String streamCreateNodeType = tC.getPropertyValue("expectDBCreatedByNodeType");
String expectErrTypeStreamRenew = tC.getPropertyValue("expectErrTypeStreamRenew");
String expectDBUpdatedBy  = tC.getPropertyValue("expectDBRenewedBy");
String strcrtnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBCreatedBy")
a = new dbUtils.dbNode(log);
String nodeoidcreate = a.nodeGetNodeId(strcrtnodeid);
tC.setPropertyValue("expectDBCreatedBy",nodeoidcreate);

String strdelnodeid = "urn:dece:org:org:dece:"+tC.getPropertyValue("expectDBDeletedBy")
b = new dbUtils.dbNode(log);
String nodeoiddelete = b.nodeGetNodeId(strdelnodeid);
tC.setPropertyValue("expectDBDeletedBy",nodeoiddelete);

expectDBCreatedBy    = tC.getPropertyValue("expectDBCreatedBy");
expectDBUpdatedBy    = tC.getPropertyValue("expectDBCreatedBy");
expectDBDeletedBy = tC.getPropertyValue("expectDBDeletedBy");
if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	assert myXML.ResultSet.Row.UPDATED_DATE.size() == 1;
	assert myXML.ResultSet.Row.UPDATED_BY.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	String dbUpdatedDate  = myXML.ResultSet.Row.UPDATED_DATE.text();
	String dbUpdatedBy    = myXML.ResultSet.Row.UPDATED_BY.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle.toUpperCase() == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	/*if (streamCreateNodeType == "llpcs" || streamCreateNodeType == "dlpcs") {
		expectUserOID = "null";
	} */
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID] - streamCreateNodeType[$streamCreateNodeType]";
	assert dbUserOid == expectUserOID;
	
	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "null";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedDate == "null";
	} else {
		assert dbClosedDate.length() > 0;
	}

	//UPDATED_DATE
	this.log.info "dbUpdatedDate length " + dbUpdatedDate.length();
	if (expectErrTypeStreamRenew == "SUCCESS") {
		assert dbUpdatedDate.length() > 0;
	} else {
		assert dbUpdatedDate == "null";
	}

	//UPDATED_BY
	if (expectErrTypeStreamRenew != "SUCCESS") {
		expectDBUpdatedBy = "null";
	} 
	this.log.info "dbUpdatedBy[$dbUpdatedBy] expectDBUpdatedBy[$expectDBUpdatedBy]";
	assert dbUpdatedBy == expectDBUpdatedBy;
} else {
	assert 1 == 2;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1116423CEBC92ECBE05307991F0A891F</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HANDLE_OID>A3CBED38235F428AB0A4CBED3E456015</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>1116AE3739155842E05305991F0A8416</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>1116423CEBC92ECBE05307991F0A891F</ACCOUNT_OID>
      <USER_OID>111641972AC10796E05305991F0A8B37</USER_OID>
      <TRANSACTION_ID>StreamsProject</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>Ultraviolet4.0</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2015-03-12 17:50:57.317</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2015-03-12 11:50:57.317</CREATED_DATE>
      <CREATED_BY>C0CEF8E08CDCC7D6E0401F0A0599120B</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>C0CEF8E08CDCC7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">111641972AC10796E05305991F0A8B37</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">01</con:value></con:property><con:property><con:name>expectDBDeleteUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">111641972AC10796E05305991F0A8B37</con:value></con:property><con:property><con:name>expectDBRenewedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value>CID_NOT_GRANTED</con:value></con:property><con:property><con:name>expectJDBCSQL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectSQLDefault</con:name><con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>975DA31F89B0B21EE0401F0A059979D9</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>975DA31F899FB21EE0401F0A059979D9</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>0900</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>2010-12-15 11:29:52.337</EXPIRATION_DATE>             <CLOSED_DATE>2010-12-14 11:29:53.657</CLOSED_DATE>             <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:0910</CLOSED_BY_ORG_ID>             <CREATED_DATE>2010-12-14 11:29:52.335</CREATED_DATE>             <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results>]]></con:value></con:property><con:property><con:name>expectSQLDefaultLLP</con:name><con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>*</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>${#TestCase#expectDBStatus}</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results> ]]></con:value></con:property><con:property><con:name>expectSQLwithNickname</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNicknameLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithTransaction</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithTransactionLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81167</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>1116AE3739155842E05305991F0A8416</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases_P1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>A3CBED38235F428AB0A4CBED3E456015</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_12095 - StreamRenew - DLP - StreamRightsNotGranted - PURCHASE_PROFILE.STREAM value of  'N'-403 Forbidden</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">111641972AC10796E05305991F0A8B37</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA_HISTORY row" searchProperties="true" id="f754ac22-d249-4b42-85cb-be752a318b9e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0b32f9a0-d916-4f84-8f9d-b7130ccbc721"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="45f47edf-95ac-48e7-907c-47d69183b373"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));


if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract STREAM_DATA_HISTORY row" id="82ce6577-70f8-4549-a5b6-b2211bd56921"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());

String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String sh = tC.getPropertyValue("streamhandle");
String status = tC.getPropertyValue("expectDBStatus");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select 
to_char(rawtohex(a.STREAM_HISTORY_OID)) STREAM_HISTORY_OID,
to_char(rawtohex(a.STREAM_HANDLE_OID)) STREAM_HANDLE_OID,
to_char(rawtohex(a.RIGHTS_TOKEN_OID)) RIGHTS_TOKEN_OID,
to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID,
to_char(rawtohex(a.CREATED_BY_USER_OID)) CREATED_BY_USER_OID,
TRANSACTION_ID,
STATUS,
STREAM_CLIENT_NICKNAME,
EXPIRATION_DATE,
CLOSED_DATE,
CLOSED_BY_ORG_ID,
CREATED_DATE,
to_char(rawtohex(a.CREATED_BY_NODE_OID)) CREATED_BY_NODE_OID 
from STREAM_DATA_HISTORY a where STREAM_HANDLE_OID =hextoraw('$sh') 
 and STATUS = '$status'""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;


try {
	def myXML = new XmlSlurper().parseText(results);
	log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
	assert myXML.ResultSet.Row.size() >= 1;
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	tC.setPropertyValue("dbxmlresponse", results);
}

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1116423CEBC92ECBE05307991F0A891F</con:value></con:property><con:property><con:name>dbxmlresponse</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STREAM_HISTORY_OID>1116AE6696887AF5E05307991F0AC485</STREAM_HISTORY_OID>
      <STREAM_HANDLE_OID>A3CBED38235F428AB0A4CBED3E456015</STREAM_HANDLE_OID>
      <RIGHTS_TOKEN_OID>1116AE3739155842E05305991F0A8416</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>1116423CEBC92ECBE05307991F0A891F</ACCOUNT_OID>
      <CREATED_BY_USER_OID>111641972AC10796E05305991F0A8B37</CREATED_BY_USER_OID>
      <TRANSACTION_ID>StreamsProject</TRANSACTION_ID>
      <STATUS>active</STATUS>
      <STREAM_CLIENT_NICKNAME>Ultraviolet4.0</STREAM_CLIENT_NICKNAME>
      <EXPIRATION_DATE>2015-03-12 17:50:57.317</EXPIRATION_DATE>
      <CLOSED_DATE>null</CLOSED_DATE>
      <CLOSED_BY_ORG_ID>null</CLOSED_BY_ORG_ID>
      <CREATED_DATE>2015-03-12 11:50:57.317</CREATED_DATE>
      <CREATED_BY_NODE_OID>C0CEF8E08CDCC7D6E0401F0A0599120B</CREATED_BY_NODE_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>expectDBCreatedByNodeType</con:name><con:value>dlp</con:value></con:property><con:property><con:name>expectDBCreateUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">111641972AC10796E05305991F0A8B37</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property><con:property><con:name>expectDBDeleteUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">111641972AC10796E05305991F0A8B37</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectJDBCSQL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectSQLDefault</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLDefaultLLP</con:name><con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>             <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_BY/>             <UPDATED_DATE/>         </Row>     </ResultSet> </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNickname</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithNicknameLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>       <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithTransaction</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectSQLwithTransactionLLP</con:name><con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value></con:property><con:property><con:name>expectStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>1116AE3739155842E05305991F0A8416</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases_P1</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A3CBED38235F428AB0A4CBED3E456015</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_12095 - StreamRenew - DLP - StreamRightsNotGranted - PURCHASE_PROFILE.STREAM value of  'N'-403 Forbidden</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">111641972AC10796E05305991F0A8B37</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81168</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish SharedMediaConsent.old" searchProperties="true" id="b82e6540-7ea0-4abb-ad2c-117cf16c0ed6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="84c8c0b2-ae05-4ad3-b47b-691b98d42b47"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass", "urn:dece:type:policy:ShareMediaHistory");
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="30706f5c-cae2-4cc8-947c-c24bc89bf26e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyResource") == null || tC.getPropertyValue("policyResource") == "") {
	tC.setPropertyValue("policyResource","urn:dece:rightslockerid:org:dece:0900");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}
if (tC.getPropertyValue("policyRequestEntity") == null || tC.getPropertyValue("policyRequestEntity") == "") {
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ShareMediaHistory" id="1906dbad-3e46-48c9-9b94-49e8da4c0b2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate ShareMediaHistory if necessary" id="4892b68b-2e47-484d-a6a3-45eca06a7384"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def exists = tC.getPropertyValue("policyExists");

if (exists != "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_04152 - StreamRenew - DLP - Policy - AllowAdult - US - MMPA - AdultContentNotAllowed - Without policy cannot renew IS_ADULT = 'Y'</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic (DLP) Test Cases SR</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ShareMediaHistory</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:rating:US:MPAA:G</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81169</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove all Parental Control Policies.old" searchProperties="true" id="2ee320e6-34d2-4dcf-8759-c4d00e9fedd8"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="8c8c745d-d54d-4636-a52a-9f8554670d17"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="1798cece-012a-47b4-b530-b49e8b32802e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="971abbba-925f-46fe-be96-924b96b12867"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" id="a707d091-cbf4-4457-8ff4-628f07c8f008"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" id="28076d77-c2b9-4ba4-9c5c-a0fa4bdb6edc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" id="7a115efd-60b2-4344-b37b-fea44721a7fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="8625d3b5-a92a-42e2-95b0-ba59fa0582c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="d67c7d0c-fa5c-4ef1-aa8b-7991d0401895"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Request:PolicyClassNotValid">
      <Reason>Request PolicyClass is not valid</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A9B66525BAF65015BE0401F0A059942CA/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A9B66525BAF67015BE0401F0A059942CA/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Request:PolicyClassNotValid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic (DLPCS) Customer Service Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_01000 - StreamRenew - DLPCS - StreamHandleInvalid - Stream handle malformed</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81170</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Parental Control Rating.old" searchProperties="true" id="54833957-eb03-44c8-babe-dd353a9d4f05"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="17127c16-a79d-4467-a712-a95585dc5aac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:RatingPolicy");
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="3bd15bbd-8eab-4f9b-ade4-8c17c76a3afb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="0a891668-00ff-4afd-b0f2-644aec668946"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy if necessary" id="ea4f8518-ba86-4d35-bdb0-3c5bdc6683a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ParentalControl:RatingPolicy" id="246dc646-13e9-4375-a269-4cf418cbf96b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("policyRequestEntity",tC.getPropertyValue("assertionUserIdFULL"));
//tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//tC.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Request:PolicyClassNotValid">
      <Reason>Request PolicyClass is not valid</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A9B66525BAF65015BE0401F0A059942CA/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A9B66525BAF67015BE0401F0A059942CA/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Request:PolicyClassNotValid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:US:MPAA:R</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic (DLP) Test Cases SR</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_04152 - StreamRenew - DLP - Policy - AllowAdult - US - MMPA - AdultContentNotAllowed - Without policy cannot renew IS_ADULT = 'Y'</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81171</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - General Policy Establishment.old" searchProperties="true" id="560afb75-d7cf-4f11-9a9b-84114dcb7f55"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4ca19661-8019-4c84-83be-40a64a03771a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="b6c92fb9-06ea-4ace-a632-a73536c8f350"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy" id="3b7b5147-b197-4ebe-9ba5-d20181935331"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="2104b77d-e0f5-4113-8ba7-b6130d37789c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy" id="98f47fd3-c713-4b73-ba48-4e39239af11c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("policyRequestEntity",tC.getPropertyValue("assertionUserIdFULL"));
//tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//tC.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Request:PolicyClassNotValid">
      <Reason>Request PolicyClass is not valid</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A9B66525BAF65015BE0401F0A059942CA/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A9B66525BAF67015BE0401F0A059942CA/Policy/urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Request:PolicyClassNotValid</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LASP Dynamic (DLP) Test Cases SR</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_04151 - StreamRenew - DLP - Policy - AllowAdult - US - MMPA - Can renew stream that IS_ADULT = 'N'</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81172</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node.old" searchProperties="true" id="6e194537-b474-4724-a1a3-96676ad1dd82"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f1f727df-a37d-4209-93b5-b48992c63ece"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="874f5b2a-2d5a-4aff-81ce-fac52782badb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" id="2f3e0d35-6b16-4f88-bdc6-2af9729bebae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" id="eccb440e-f38e-4a5c-83a9-d4161fb4ccec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent" id="365980cd-b15b-4de6-ba96-a26c9378da4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary" id="e9fb656b-1eb0-4c13-a1d5-c1587e250907"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" id="a64aa9ef-e2d4-4bb1-9a04-edd4bb0838e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" id="1f72de5e-5e5b-4433-b48d-11459bd1b1ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" id="fabbcfe4-c3ab-497d-a3e3-bb2a46319a12"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" id="746c68a6-5d86-446a-bb1b-ee653bd323ee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" id="fdb6a12d-0c5b-44df-8a0f-d9d184feed22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" id="315e650b-b54a-45d9-a731-3eb697028e38"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_14052 - StreamRenew - DLP - Policy - Verification ParentalControl:RatingPolicy - US - MMPA - PG-13 rating - Full User</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:UserDataUsageConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node" searchProperties="true" id="93dbc176-9461-47e1-9d3f-ffe76a1a8c10"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0a1f5a5c-1e32-4407-9e81-8cea2f819642"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="73a34216-b678-4ffb-a080-9f0d02b4cf3a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent" id="392af331-0a22-4294-882b-355c20c01efa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary" id="054ac925-e612-460b-b2cc-00c8e367b8c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true" id="972f9863-2307-4a00-926c-b8e19b7acd7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="7563f153-8017-4ed1-b360-41d0710fa95d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent" id="2e83d8e9-14c5-4efa-a77e-2ed1639637b7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary" id="aacccf29-f5a4-4c08-a374-1fbb7db0e1f3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass","ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true" id="c2a20639-16fc-49a5-b14d-25590ff41272"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true" id="1e40f06f-d264-4c86-bd98-0a456b2285f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true" id="46818b6e-6cf9-49dc-b026-de1336538eb4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true" id="548afec8-1ddd-4b18-8370-e0a6989f01fb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" id="799879d5-12a7-425a-9ff5-ba4b6b77069d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" id="3e99bc6b-b600-47ec-ad42-ba6c8d7f1785"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass","UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity","urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_14051 - StreamRenew - DLP - Policy - Verification ParentalControl:RatingPolicy - US - MMPA - PG rating - Full User</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases_P2</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>UserLinkConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6D195263E4E3B5E0401F0A059949B4</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove all Parental Control Policies" searchProperties="true" id="bc5f5b48-ce4e-4273-8dc0-6039c3cbdc6d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f4f9e403-e42a-4139-b660-037a5d1d1b73"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="7eff408a-4bba-41e7-8e02-183b59865131"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="6fbcdeda-1913-45b8-9d96-309c538303e0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalConrolRating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" id="185600f4-10bf-4675-9396-e9a1a9b76e0b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" id="3c31b303-ea03-4759-8f07-bcda40b8685b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlBlockUnratedContent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" id="e099bc6c-0d8b-46a7-a921-c3630e9a5767"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="e30a83c0-32c4-4597-9887-5c47017894be" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="a3a76d2c-bbd5-4f77-8b55-85032355b122" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="remove policies" disabled="true" id="f0023a30-5953-4f53-bb9f-c17be9d5e890"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));
log.info "useroid"+useroid;
//a.policyDelete(105,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(302,useroid,"deleted")</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVbZcuI6EP0VyvM4ZbyAIXYFqgyEDBMIaxbykhJyA0psGSyZJV8/kgGHLbnM3CeX2q3Tpxd19zVDgW86LmMQcRLSzCrwKXMSaUmJI+qEiBHmUBQAczh2+m6r6ZhZ3UG7K0qmUSsprwVUsDwPsHpVGOtq3rZN1R7ppgo5HYGd90ZGvihUGYuhQRlHlJcUUzcsVc+rhjUwdEcvOGY+e2UVX5TMI0RMYAuVrK5sSa1YSZlyPnM0bblcZpe5bBhNNFPXDe251ezjKQRIKV9vPEoMReWtPs4KZuD7OIvDQLvWDnSuPeb0yYQiHkewteV9ZUvXdFsTOh4jkx9Kehe8Bh2HybGKaEgJRj75QDI+LeDT0Mu4/iSMCJ8GXzph6BJYhRVWsZGnPxTtkNqFQAcMI4ZUNkXGFqsHY4iAYsg89Bol5cdlWUuuDiJE2TiMAnZ4/Ds+QBfghzPwVLZza0vtcsAzkSpfA3YaFPsxIwu4l8U6QxjYNpuAL4fKdCIYk1WTMFGgKybZafv0jo6baNTIBBj/lwTtJWcD8oj8GMpeYU31t4Hb/d1+e/+o3HTbBYvfjae9zlUpIbCvnAjS1G6OR0WZFtEWftzV7s2FWx268+jRn1ZaL4XbHB8+2C8t6+cgh1yTrVYde+2vOiOzvSKDh5cA6sHzbSdom0PeHC6e3VaRvhfad+6vKaWDYesnMZvr30bFD0fzcd2GOnmiepc1One40WvW/W7tcd7rtKrGr7F162qjofHQDwPetp59t/dsvLRmw2hU15a8/9Tqihe6bhWf2P17KXVnj/+hbPfm+/HoDTDfHWUZNGqZusgS4t83MykhnjpOVJ2ZbD6MA+VKWd6SvcOJRbsjniNyuDkbuaph1nNuTbcs3batG93K6ZZtG3XdtWs31V2T2bA4olgN6ZhIW7Llbsrme4I4cBhQDyJ1Ecai0zHlG8Qa4ijToD3xCELKYBCK9myYH5PiajSB0QhGhp2bQ1h4Yx95+qZk7kPepu3IHXOIDpty7qAp9wCTGQHZuWVhM1HZjItgzNEi5r6RXaAshVj09ki2WXHvytIYCWY+SKpaEHqxD9nZdJaERmObr6kizBJp72aQPLcvHTv+t4uB0PGIVGDSlwqIPMKZ6WLsHDlxuHB2Cu3g3dgj8mWJgPKI4A2Tw1+fdSILJC2SWtPtd3akU92/uPta7b8a/wjQ/L8AIh+nN7VvYqIdpyM15C3Intnd6iCGkGhb5V0xzZGRnWfjxSJO6iefz2mRgNdkIjXd1PqAY9FY14PwHaiWomgXTbGU+JHxVH5IMeZT2ueIQyDqPZMcL1hb+sDk2tIQL3V16U50YFKEjsOKn5NVfbFyScbfbmXYwVJPiDviswwj7zNjZ7D27Ag/xdbCCZ3Ik5xg6y/qAocClojeG0b74OcAzhk/FKZBTrlwUVCjmMPXfzKyqZYUhHEYU96oKYlgv9EnPPl6Bs6n0glMMkvS5ZL893apkqQEMIiVlJEEX+4IjnwCdLI3LLZGT+eFZdm1q0rBtGr788KsFK00KAfsyifiU8lenI5rvPwH</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13C12F559D8B625DE05305991F0A2B75</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13C12F3AD0550995E05305991F0A9DEC</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:13C12F559D8B625DE05305991F0A2B75/User/urn:dece:userid:org:dece:13C12F3AD0550995E05305991F0A9DEC/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>P0 Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00000 - StreamRenew - DLP - Test Suite Staging</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81175</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6E3D3FE2A8C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C12F3AD0550995E05305991F0A9DEC</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13C12F559D8B625DE05305991F0A2B75</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Parental Control Rating" searchProperties="true" id="7e4a6097-39b3-478f-a855-e64b11f72da5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4f978ff5-868e-43db-984d-bb492c8d558e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:RatingPolicy");
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="842cc9cf-4264-4ddb-afc7-89a5c8fa3265"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" id="865a0aa5-6e99-4349-b00c-7e0b74dcaa47"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalConrolRating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy if necessary" id="655574e7-ef36-4a0f-a96e-68c948f1f9a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalConrolRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ParentalControl:RatingPolicy" id="796549aa-1cb0-4c3c-bcdc-419a72dafbab"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass","ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlRating")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[Unauthorized request with Authorization value too short
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
<Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
       <Reason Language="en">The request is not authorized.</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:nz:oflc:r18</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases_P2</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_34725 - StreamRenew - DLP - Policy - Verification ParentalControl:RatingPolicy - NZ - OFLC - R18 rating - Full User</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81176</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6E3D3F278DBD52E0401F0A05997550</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - General Policy Establishment" searchProperties="true" id="22b9824c-4d2a-46a4-aa5f-d2223dbc3ce4"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9c89a892-9a73-43d8-ad85-bf5b335134c1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="144e80c7-c2c4-4636-a65a-bc97bacfd98d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy" id="884a22a4-b1aa-477b-a057-bcb4d93d689c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlBlockUnratedContent")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="db8bb675-b0c7-4522-8a90-d9a6e7dfd431"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy" id="7b74de03-acee-495f-b752-c8cd906804c3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass", "ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlBlockUnratedContent")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[Unauthorized request with Authorization value too short
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
<Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
       <Reason Language="en">The request is not authorized.</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:US:MPAA:G</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases_P2</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_14083 - StreamRenew - DLP - Policy - BlockUnratedContent - US - MMPA - R - Verification unrated/unknown content blocked</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81177</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6E3D3FE2A8C1A8E0401F0A0599755E</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true" id="938c7843-07fb-436c-8388-f4efdec5e96d"><con:settings/><con:testStep type="groovy" name="Rename Test Cases" id="ce864e1e-1fbf-4b85-9b16-a3147b990c03"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Linked LASP Customer Service Test Cases";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		//newTestCaseName = oldTestCaseName.replace(" ", "");
		//newTestCaseName = newTestCaseName.replace("_POST_", "_GET_");
		//newTestCaseName = newTestCaseName.replace("_RTL_", "_RTL_CS_");
		newTestCaseName = oldTestCaseName.replace(" LLP ", " LLPCS ");	
		/*	
		if (TCNum.toString().length() == 1)
			newTestCaseName = "TC_DECE_0000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 2)
			newTestCaseName = "TC_DECE_000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 3)
			newTestCaseName = "TC_DECE_00" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 4)
			newTestCaseName = "TC_DECE_0" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
			*/
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true" id="979b505c-9074-4272-8520-9db1877ab5ab"><con:settings/><con:testStep type="groovy" name="Set a Property" id="bbcf12c8-c099-4365-9705-c18cd855e1af"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "LASP Dynamic (DLPCS) Customer Service Test Cases";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "synced";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>FUNC_USER_CONSENT_POLICIES</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>NumberOfPolicyRequestingEntities</con:value></con:property><con:property><con:name>PropertyValue</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Count Test Cases" searchProperties="true" disabled="true" id="a2a73f7a-f740-4da3-8864-cc45ae529e42"><con:settings/><con:testStep type="groovy" name="Count" id="52aae690-30ec-4aba-ace5-f92dee46dd90"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;

mySoapUIUtils = new soapUIUtils(log);

def tcCount = mySoapUIUtils.countTestCases("StreamCreate");
log.info tcCount;</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true" id="bf0a17f6-d35d-48a1-9593-b285fb2f8b81"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="6b1aa24e-504d-47c1-9ac8-89c5a355a11f"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "LinkedLASPCustomerServiceTestCases_P2"; 

def oldString = """def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Date d=new Date(new Date().getTime()+7200000);

String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);
""";
def newString = """import org.apache.commons.lang.SystemUtils;
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
Date d;
if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
d=new Date(new Date().getTime()+7200000);
	}
else
	{
d=new Date(new Date().getTime()+50400000);
	}
	
String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);
""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "Set ExpirationDateTime for Stream Renew Request sysdate + 2 hours") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					stepScript = testStepList[j].getScript();
					stepScript = stepScript.replace(oldString, newString);
					targetTestStep.setScript(stepScript);		

					/*
					*  Delete a step
					*/
					//targetTestCase.removeTestStep(targetTestStep);

					/*
					*  Replaces step's script completely
					*/
					//stepScript = """""";
					//targetTestStep.setScript(stepScript);		
				}

			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Step for all Testcases in a Suite" searchProperties="true" disabled="true" id="eb65e842-ad42-484b-98e7-e0141c3649e2"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="5cec7bff-9da4-431b-abbf-fdcdb35d47d0"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Node Authorization Test Cases"; 
def stepName  = "Save node's current role";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove Manage account consent policy" searchProperties="true" id="a23b4d6b-16d9-45ef-b114-d30bff7f2272"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0366b0c6-b432-425f-a466-48d1f1984db2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("username",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="176d216b-01c0-4f2d-a2d7-20a555939c50"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" disabled="true" id="a4c19c34-c223-46fb-bf95-9ce86725f069"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" disabled="true" id="77e12d76-b708-4a83-805c-fa3a9630f0bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" disabled="true" id="80428614-bfea-4efe-83cb-5879d24f50ff"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" disabled="true" id="55f503b2-7f0f-4ff1-b11f-d1e7d2a26650"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" disabled="true" id="b517082c-bc12-4dc1-a1fd-84c008fdd5f2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" disabled="true" id="808ff68c-91f6-4806-8554-f4023ddf86a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Manage Account Consent" id="fd56b5be-b3e7-4fba-abf7-eb810c9f8621"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ManageAccountConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="remove policies" id="04f019e6-7e4c-42a3-a65e-e1af2f4fefa8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def responseXML = tC.getPropertyValue("policyGetXML");
def policyOid=null;

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));

def myXML = null;
if(responseXML != null)
{
                try
                {
                                myXML = new XmlSlurper().parseText(responseXML);
                }
                catch(Throwable e)
                {
                                log.info e;                                                                            
                }
}

// Assert that policyListSize is 2 (EMUC and MAC)

log.info myXML.Policy.size()
for(i = 0; i &lt; myXML.Policy.size(); i++)
{        
	policyOid = myXML.Policy[i].@PolicyID.toString().split(':')[5]; 
log.info policyOid;

a.policySetDeleted(policyOid)
//a.sqlPolicyStatus(policyOid,'deleted')
               
}</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPY5xLm1kCnMBAIlXVo4wOntZcc4Btwmdho7XPrr1w4lBXo57J6njBVZ+iR9lnTBYRJbns85zgRhtLJOYsq9QtrQ8ox6DHLCPQoTzD2BvLF/3fesKvDg7opWCYOG9gs4junUoKNHkXmuOzaw9Wm9HukWdBw8RbaDAJCqnOc4pFxAKhqaBUxXB45unk3AuQdqHnCrZ1b9Uavc4oxL21KlKm9tQa15Q1sIkXqGsVqtqiu7yrK5YQFgGvfX/TFa4ARqzYttRIWjrPmmj6oRRjiOURWxxLgwDnQuIu6NyZxCkWf4zVf0lS9ggLohdSJO5j+08i6OQjpjxbENKaMEwZi8QpWfaywWLKr48ZxlRCySL4MwgTKs4zXSkenQH5pxCO1EQwcIMw51voDmm60RnuEMU4Qr/47ChvbjtKoVVycZpHzGsoQfHv8MD6ZLHLMURzrfhfUG7XSDn2SqeYGRF1IU55ws8Y0iawoR5m/VxOh0U5Vhhmdk3SdcEnTNFTpjH97RcZuNgMwxF39ToL3ibI3cwjjHzZuaf91+CdliSe6RPRvUnw2j01t0Lt3rRgFgX7kQlKXdHo9IWZJoe0P8DGp5L2p32eSyt9o8uRvLHj22/ZuXpEvuskc76A57Y2Bm5sC9dPNwPQLO4mozgQ+R/TC6GrK7JO+MzNnAr6fP4Q2Zp4v7f6Z9+7511XdmrJ30XwavWU9YZz5uDer+tBa6I59dgk7083Vd6966Ftkk/WST9oLMCPhV0ho6r083YIN7+Sq4Fe2Hq7uz+7w3nDfKcPbwH8p2b36cT58wErujokEYVLqySlB838yUhET6rFD1UtV8uMBUaE11S/UOL5ftjkSerOH2bNqBDc5Np9Vyz90gsDrAtYFbr5td4APHcnZNZoviCGKb0RlRvlTL3dLme4Ao8TimEc70Jctlp+PaNxYDKGAlpCP5CBjleMJkez5L19biufbqYghMEb2adi2K2XT9pFVumBjQQebPBM4OerIJDnryCCOSEqwat+I1l8TmQubiBS5zEZvVJaxSnMvWnqku61lOzTU4SdIYK6RGwqI8xtV0kRaZMfj2a+kQ8UI66kyK1/ZlXMf/dimQOhFRClzF0sKyjPjDcDn33F0gHwI++3QI7cz7eUTUw5L5FBlBWySHv95povhRciTo++PhDnSp+wd3f7XHv8y/NND/vwZkPT7eNL7JiXFcjtJRtCR7bnebg5xBsms1d2R6gWb1pZovl3nBH8exjUyaN1QhDWAZY4xy2Vc3E/aMqVFaMU4aYiXwI+el/BBiLhZ0LKDAieR7pTiesLWMMVdbSygf6vrUlejApUydwGvxmawdy41LIf52KUMeUnpSPJSfFcui94p9YmvPj4xTLi2C0Lk6qQG2+YIXiEmzRLZelu0b/8zAZ84PhWWSSyxCEmqaC/z1n4rqqQ0NIsRyKsJAKwT7fb7AKTYp9t6VPpgpRkm5W5L/Xi51UlAAYbmRclLYVyuCp54Ane/NijenR+PCancDq9bqdECn2y3Gxfl2XHQs852fB+iaH8QfJXt5OuZ48zc=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ManageAccountConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:13D318B717D41CC6E05305991F0A0258">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</Resource>
      <RequestingEntity>urn:dece:org:org:dece:RET</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T07:08:02.000Z" CreatedBy="urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D2CFD1EA8604F9E05307991F0A4B0C">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP_CS_1</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T07:08:03.000Z" CreatedBy="urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D2CFD1EA8E04F9E05307991F0A4B0C">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T07:08:04.000Z" CreatedBy="urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D30B568A7267DFE05305991F0ACF57">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP_CS_1</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T07:08:05.000Z" CreatedBy="urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D30714BCB35DD2E05305991F0A0424">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</Resource>
      <RequestingEntity>urn:dece:org:org:dece:LLASP_CS_2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T07:08:23.000Z" CreatedBy="urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
   <Policy PolicyID="urn:dece:policyid:org:dece:13D2F17B3C0F4E9AE05305991F0A2702">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</Resource>
      <RequestingEntity>urn:dece:org:org:dece:DLASP_CS_2</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-04-16T07:08:29.000Z" CreatedBy="urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LinkedLASPCustomerServiceTestCases_P1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_44851 - StreamRenew - LLPCS - Stream_renew _by_LLPCS_Manage account consent present - 200 OK</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81175</con:value></con:property><con:property><con:name>useroid</con:name><con:value>13D30714BB585DD2E05305991F0A0424</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150416_030748</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fd56b5be-b3e7-4fba-abf7-eb810c9f8621</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Manage account consent policy" searchProperties="true" id="716294dd-90ac-4928-bd41-90fc3d2def46"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e2eafd86-b1bd-46bd-8401-d2706c35c7aa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="452ca012-8849-4c6b-872f-f61682045109"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent" disabled="true" id="e487c010-1bee-4c4c-9e8e-0fbbe2673482"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary" disabled="true" id="886503a4-aa3d-4f49-8fa2-38ae778c269b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true" id="70799986-9f55-4b53-8b08-bb6bf7acb57e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true" id="4dbc46e0-4043-4b43-914d-4c3e7acf461c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageAccountConsent" id="d015c9a5-e7ca-4fa5-87f6-76745e518923"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass","ManageAccountConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageAccountConsent if necessary" id="e1945d5d-c40b-4994-b694-027ee20a64ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "ManageAccountConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource","urn:dece:accountid:org:dece:"+tC.getPropertyValue("assertionAccountId"));
	tC.setPropertyValue("policyCreator","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true" id="87e62daa-db74-4f53-8fe4-1e588689fb74"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true" id="c2f3faff-33f9-45c7-8929-f3f54a47f49f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true" id="a8cf8659-6319-472d-bf97-7839c3677813"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true" id="1d287749-f021-4064-9c9d-75f3618dbc0c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" disabled="true" id="76194422-48e5-4a92-b4d3-90786aec6b7c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" disabled="true" id="b07f2b51-3af0-492e-aa5f-4c523c87f26f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_44851 - StreamRenew - LLPCS - Stream_renew _by_LLPCS_Manage account consent present - 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>LinkedLASPCustomerServiceTestCases_P1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZbc+I6DP4rTPY5xLm1kCnMBAIlXVo4wOntZcc4Btwmdho7XPrr1w4lBXo57J6njBVZ+iR9lnTBYRJbns85zgRhtLJOYsq9QtrQ8ox6DHLCPQoTzD2BvLF/3fesKvDg7opWCYOG9gs4junUoKNHkXmuOzaw9Wm9HukWdBw8RbaDAJCqnOc4pFxAKhqaBUxXB45unk3AuQdqHnCrZ1b9Uavc4oxL21KlKm9tQa15Q1sIkXqGsVqtqiu7yrK5YQFgGvfX/TFa4ARqzYttRIWjrPmmj6oRRjiOURWxxLgwDnQuIu6NyZxCkWf4zVf0lS9ggLohdSJO5j+08i6OQjpjxbENKaMEwZi8QpWfaywWLKr48ZxlRCySL4MwgTKs4zXSkenQH5pxCO1EQwcIMw51voDmm60RnuEMU4Qr/47ChvbjtKoVVycZpHzGsoQfHv8MD6ZLHLMURzrfhfUG7XSDn2SqeYGRF1IU55ws8Y0iawoR5m/VxOh0U5Vhhmdk3SdcEnTNFTpjH97RcZuNgMwxF39ToL3ibI3cwjjHzZuaf91+CdliSe6RPRvUnw2j01t0Lt3rRgFgX7kQlKXdHo9IWZJoe0P8DGp5L2p32eSyt9o8uRvLHj22/ZuXpEvuskc76A57Y2Bm5sC9dPNwPQLO4mozgQ+R/TC6GrK7JO+MzNnAr6fP4Q2Zp4v7f6Z9+7511XdmrJ30XwavWU9YZz5uDer+tBa6I59dgk7083Vd6966Ftkk/WST9oLMCPhV0ho6r083YIN7+Sq4Fe2Hq7uz+7w3nDfKcPbwH8p2b36cT58wErujokEYVLqySlB838yUhET6rFD1UtV8uMBUaE11S/UOL5ftjkSerOH2bNqBDc5Np9Vyz90gsDrAtYFbr5td4APHcnZNZoviCGKb0RlRvlTL3dLme4Ao8TimEc70Jctlp+PaNxYDKGAlpCP5CBjleMJkez5L19biufbqYghMEb2adi2K2XT9pFVumBjQQebPBM4OerIJDnryCCOSEqwat+I1l8TmQubiBS5zEZvVJaxSnMvWnqku61lOzTU4SdIYK6RGwqI8xtV0kRaZMfj2a+kQ8UI66kyK1/ZlXMf/dimQOhFRClzF0sKyjPjDcDn33F0gHwI++3QI7cz7eUTUw5L5FBlBWySHv95povhRciTo++PhDnSp+wd3f7XHv8y/NND/vwZkPT7eNL7JiXFcjtJRtCR7bnebg5xBsms1d2R6gWb1pZovl3nBH8exjUyaN1QhDWAZY4xy2Vc3E/aMqVFaMU4aYiXwI+el/BBiLhZ0LKDAieR7pTiesLWMMVdbSygf6vrUlejApUydwGvxmawdy41LIf52KUMeUnpSPJSfFcui94p9YmvPj4xTLi2C0Lk6qQG2+YIXiEmzRLZelu0b/8zAZ84PhWWSSyxCEmqaC/z1n4rqqQ0NIsRyKsJAKwT7fb7AKTYp9t6VPpgpRkm5W5L/Xi51UlAAYbmRclLYVyuCp54Ane/NijenR+PCancDq9bqdECn2y3Gxfl2XHQs852fB+iaH8QfJXt5OuZ48zc=</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:LLASP_CS_1</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value/></con:property><con:property><con:name>assertionUserId</con:name><con:value>13D30714BB575DD2E05305991F0A0424</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>13D2CFD28BEE0EFFE05307991F0AE210</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>http://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:13D2CFD28BEE0EFFE05307991F0AE210/Policy/urn:dece:type:policy:ManageAccountConsent</OriginalRequest>
      <ErrorLink>https://qa1.q.uvvu.com/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove Allow Adult Policy" searchProperties="true" id="6cd2ad5c-c14f-485b-86cd-1f7cc52f9766"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="0206fe8f-6a71-4a6c-a555-2b62e07c4595"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="469609ac-c3ba-4f4a-97bf-3f46c7da13ba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" id="62a24a2a-c035-4011-94db-c37cb80ce01f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlAllowAdult")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" id="8536a6a2-44e4-4b84-a521-c3c2f1852e9c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="remove policies" disabled="true" id="26442d83-d995-4231-8fe6-571010ee6871"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetSystem"));
log.info "useroid"+useroid;
//a.policyDelete(105,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(302,useroid,"deleted")</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[Unauthorized request with Authorization value too short
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
<Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
       <Reason Language="en">The request is not authorized.</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LinkedLASPCustomerServiceTestCases_P2</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_44150 - StreamRenew - LLPCS - Policy - AllowAdult - US - MMPA - Can renew stream that IS_ADULT = 'y'</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81175</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6E3CE067EBD388E0401F0A07990932</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Allow Adult Policy Establishment" searchProperties="true" id="081c8ef5-e5c1-47f3-8a8a-62aba90bc069"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3f7d3f31-8fff-4c14-a07c-ce42bd8076e6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountId",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties" id="630a764a-a390-4462-949d-2100b69d9838"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserId",callTC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy" id="860c084d-576c-463b-9b2f-d98887ec32fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for ParentalControlAllowAdult")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary" id="2b453121-8e2e-4ca2-bcb2-a3b0c06e6ace"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy" id="42da2ebc-8a8d-4e7e-aecf-d1970da5223c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyRequestEntity","urn:dece:userid:org:dece:"+tC.getPropertyValue("assertionUserId"));
tC.setPropertyValue("policyClass", "ParentalControl:AllowAdult");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for ParentalControlAllowAdult")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[Unauthorized request with Authorization value too short
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
<Error ErrorID="urn:dece:errorid:org:dece:securitycontext:unauthorized">
       <Reason Language="en">The request is not authorized.</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>LinkedLASPCustomerServiceTestCases_P2</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_44150 - StreamRenew - LLPCS - Policy - AllowAdult - US - MMPA - Can renew stream that IS_ADULT = 'y'</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>81177</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>FC6E3CE067EBD388E0401F0A07990932</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Setup" disabled="true" id="a46914ae-c3af-4eaa-8ea9-aa9a59a6c3b8"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccName_Gen" searchProperties="true" id="22783bc4-6400-4317-8d8c-0b8a3952b49d"><con:settings/><con:testStep type="datagen" name="AccName" id="9bf26b6d-5575-4202-a34f-f93b7b118ecd"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Ashwin_Acc_Create_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>AccName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="c1aa5e47-da23-4f91-8dbc-878d16b0659c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>AccName</con:sourceType><con:sourceStep>AccName</con:sourceStep><con:targetType>AccountDisplayName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get_User_Details" searchProperties="true" id="353f546b-a379-4e6c-9dfa-b203605afdb5"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="986cdefe-568c-4017-a530-9e1113ba97c3"><con:settings/><con:config><script>String userid;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//def targetHost = testProject.getPropertyValue("targetHost");
//def nodeaccountId = testCase.getPropertyValue("nodertraccountid");

def a = testRunner.testCase.getTestStepByName('User_Create').httpRequest.response.responseHeaders["Content-Location"];
def b = a.toURL();
def urlStr = b.getPath();

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
//assert b.getPath().matches("/dece/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9]*" );
//this.log.info "b is " + b.getPath();


//this.log.info "urlStr is " +urlStr;

int lastSlash = urlStr.lastIndexOf(':');
accountid = urlStr.substring(lastSlash + 1);

//this.log.info "lastSlash is " +lastSlash + "and user id is " + userid ;

testProject.setPropertyValue("NODEUSERID",userid);
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserName_Gen" searchProperties="true" id="4d5c31e1-6609-4b1d-a173-8e012440c196"><con:settings/><con:testStep type="datagen" name="UserName" id="34b5e764-b798-4e9d-b808-fdd7afe1b2c4"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "stream_renew_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>UserName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="6840a499-2899-4979-9c24-3959f7e3a4e0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>UserName</con:sourceType><con:sourceStep>UserName</con:sourceStep><con:targetType>UserName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:dece</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Delete" searchProperties="true" id="40ffd973-8b3e-4e23-9986-9ca5541fcd41"><con:settings/><con:testStep type="jdbc" name="Delete_User" id="c56e7c2f-4e65-4a53-8a76-6f52e82cb7be"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>DECLARE
MyAccount ACCOUNT.ACCOUNT_OID%TYPE;
MyUser ACCOUNT_USER.USER_OID% TYPE;
num NUMBER;
BEGIN
SELECT count(*) into num FROM ACCOUNT_USER where ACCOUNT_OID = (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}');
IF (num > 0)
THEN
for MyUser in (SELECT USER_OID FROM ACCOUNT_USER where ACCOUNT_OID= (select ACCOUNT_OID from NODE_ACCOUNT where NODE_ACCOUNT_ID = '${#Project#NODEACCID}'))
LOOP
Select ACCOUNT_OID into MyAccount from ACCOUNT_USER where USER_OID = MyUser.USER_OID;
--delete from node_user_saml_assertion where NODE_USER_OID = (select NODE_USER_OID from node_user where USER_OID = MyUser.USER_OID) ;
delete from node_user where USER_OID = MyUser.USER_OID;
delete from user_address where USER_OID = MyUser.USER_OID;
delete from user_alt_email where USER_OID = MyUser.USER_OID;
delete from user_language where USER_OID = MyUser.USER_OID;  
delete from user_status_history where USER_OID = MyUser.USER_OID;
delete from user_security_questions where USER_OID = MyUser.USER_OID;
delete from email_notification where USER_OID = MyUser.USER_OID;
delete from account_user_avatar where USER_OID = MyUser.USER_OID;
delete from NEWSFEED_PARM_VAL where NEWSFEED_EVENT_OID in (select NEWSFEED_EVENT_OID from NEWSFEED_EVENT where ACCOUNT_OID = 
MyAccount);
delete from NEWSFEED_EVENT where ACCOUNT_OID = MyAccount;
delete from account_user where USER_OID = MyUser.USER_OID;
commit;
END LOOP;
END IF;
END;
</con:query><con:storedProcedure>false</con:storedProcedure><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set_PEM" searchProperties="true" id="d707bc36-0dc8-4e81-a866-9dbc949a2214"><con:settings/><con:testStep type="groovy" name="Set_Pem_File" id="1c930ee5-dc18-4671-8e96-4d92487de06e"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Node_Setup for streams" searchProperties="true" id="2b05fd69-4fca-48b9-beb3-94639c720269"><con:settings/><con:testStep type="jdbc" name="Update_Node_Role" id="64683bb4-5976-42ba-8ffd-f37acbb8c293"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" maxRows="" fetchSize="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>update NODE_ROLE set ROLE = '${#TestCase#Node_Value}' where NODE_OID = '${#TestCase#Node_OID}'</con:query><con:storedProcedure>false</con:storedProcedure><con:assertion type="JDBC Status"/><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:lasp:linked</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>C381F9C22E4A41E6E0401F0A0599030B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="End_To_End" disabled="true" id="271e0208-3a9c-44f1-9982-d6da8bd9b330"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountNameGeneration" searchProperties="true" id="9cae0a72-c324-4a9b-b90c-05fde3fc4e51"><con:settings/><con:testStep type="calltestcase" name="AccName" id="34c9a213-ccf1-418a-a573-58ed063f061b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>22783bc4-6400-4317-8d8c-0b8a3952b49d</con:targetTestCase><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name></con:property><con:property><con:name>sName</con:name></con:property></con:properties><con:returnProperties><con:entry>synced</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E2E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0697308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate" searchProperties="true" id="25b124d8-e7d2-47e0-a094-69722a58ef19"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Set pem" id="f9460fdf-1ac0-48dc-9e34-20089ed6d452"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="460723e3-59b6-48e6-b6ed-d0f930239dd0"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="discardResponse">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="03ecb40c-96be-49ac-b978-5200b11706c0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="cfcb2716-fc90-423c-bf26-44eb11d79790"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="2ae24391-7ffb-4b72-a685-6a11e5ec11eb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def nodeacc = context.expand( '${#Project#NODEACCID}' )
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     if(minor == tP.getPropertyValue("versionUrlEncode"))
     {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeaccountid     = urlStr.substring(lastSlash + 1);
	accountid = urlStr.substring(lastColon + 3);
	
	tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",nodeaccountid);
     }
     else
     {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeaccountid     = urlStr.substring(lastSlash + 1);
	accountid = urlStr.substring(lastColon + 1);
	
	tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",nodeaccountid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:14762CA318A054DAE05307991F0A656A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>500500</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00101 - StreamRenew - PERM - SecurityRoleInvalid - Invocation with COORDINATOR - 403 Forbidden_MIGRATED</con:value></con:property><con:property><con:name>sName</con:name><con:value>Node Permission and some negative Test Cases</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39da0c46-7f38-4527-b6be-af58fbc91aba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf0fa3e3-b1e7-4bf9-9635-da2c55ceeed9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0696f15b-f3ce-463e-b03b-33fc4c9d061d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserNameGeneration" searchProperties="true" id="93af9c8d-5f2b-4d9d-9080-a9b61e4cc85b"><con:settings/><con:testStep type="groovy" name="SetCounter" id="104468d8-aea4-480d-9c74-f7de83d7801a"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("UserNameCounter","1");
testCase.setPropertyValue("LoopUntil","6");</script></con:config></con:testStep><con:testStep type="calltestcase" name="Get_UserName" id="9f7a9588-6c88-497e-9b28-bc535a3b744c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>4d5c31e1-6609-4b1d-a173-8e012440c196</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="Delay" id="d30b6e68-2a47-490a-871f-9d34953b4889"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="SetUserNames" id="796a34b7-52f1-4960-81fa-f70bd4f674be"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def UserName = testProject.getPropertyValue("UserName");

def count = testCase.getPropertyValue("UserNameCounter").toInteger();

if(count == 1)
{
	testProject.setPropertyValue("UserName_FAU1",UserName);
	log.info "==============="
}
if(count == 2)
{
	testProject.setPropertyValue("UserName_SAU1",UserName);
	log.info "==============="
}
if(count == 3)
{
	testProject.setPropertyValue("UserName_BAU1",UserName);
	log.info "==============="
}
if(count == 4)
{
	testProject.setPropertyValue("UserName_FAU2",UserName);
	log.info "==============="
}
if(count == 5)
{
	testProject.setPropertyValue("UserName_SAU2",UserName);
	log.info "==============="
}
if(count == 6)
{
	testProject.setPropertyValue("UserName_BAU2",UserName);
	log.info "==============="
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop again if necessary" id="88e6dc82-2fec-449a-a087-93ddd18cc477"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def counter = testCase.getPropertyValue("UserNameCounter").toInteger();
def loopuntil = testCase.getPropertyValue("LoopUntil").toInteger();

counter++;

if (counter &lt;= loopuntil) {
    testCase.setPropertyValue("UserNameCounter",counter.toString());
    testRunner.gotoStepByName("Get_UserName");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>UserNameCounter</con:name><con:value>6</con:value></con:property><con:property><con:name>LoopUntil</con:name><con:value>6</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0697308-b6c8-47f7-96a0-bcb6977b8f38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate" searchProperties="true" id="1986561c-c195-4f4b-9401-ff82c4321a94"><con:settings/><con:testStep type="groovy" name="Set properties from calling test case" id="65d7c030-1974-4dff-baa0-49077451164c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="632c318c-e328-4c54-978d-c6ee1c301e76"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="6b257344-8b32-461f-b2a7-9263c2679057"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account" methodName="AccountUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
	<DisplayName>${#Project#AccountDisplayName}</DisplayName>
	<Country>${#Project#Country}</Country>
	<UserList>
<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>uvtc_user</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>testing@uvvutesting.biz</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing1@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>testing</Password> 
	</Credentials>
</User>
</UserList>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="26d877fc-83db-4ad2-bb8b-0bf9e033bc58"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="44189932-0d64-4136-bf68-ffd2521a7050"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

                if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
                {                              
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");                             
                } else {
                                assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
                }

                urlStr = URLDecoder.decode(urlStr);
                def arrayString = urlStr.split("Account/");
      arrayString= arrayString[1].split("/User/");
      log.info "Node_User_ID=="+arrayString[1]
      log.info "Node_Account_ID=="+arrayString[0]


      

       int lastColon = arrayString[1].lastIndexOf(':');
       accountid     = arrayString[0].substring(lastColon+4);
       userid     = arrayString[1].substring(lastColon +1);
       def useridfull = arrayString[1];    
       def accountidfull = arrayString[0];     
       log.info useridfull  
                                         
       
 
     tP.setPropertyValue("ACCOUNTID",accountid);
	tP.setPropertyValue("NODEACCOUNTID",accountidfull);                           
	tP.setPropertyValue("USERID",userid);
	tP.setPropertyValue("USERIDFULL",useridfull);
	tP.setPropertyValue("NODEUSERID",useridfull);
	

     }
 else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:188C6CCD549DDF22E0533E991F0A1DD3/User/urn:dece:userid:org:dece:188C6CCD549EDF22E0533E991F0A1DD3</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_renew_20150615_034252</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Standard" searchProperties="true" id="f58dfd6a-8ec9-4e7e-b686-57ed698b508e"><con:settings/><con:testStep type="groovy" name="Set properties for User" id="c738477b-c397-48d6-939c-8532268ee9cf"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));
testCase.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
testCase.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded)
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="7c381184-8c5e-4b43-ac19-cacc5eee84cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="3ca78a59-5f45-4483-82c8-699358040097"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="${#TestCase#UserClass}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>sau</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#primaryemail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
      <LegalGuardian>${#TestCase#NODEUSERIDDecoded}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="2883bc5d-9fb4-4624-8b20-a5227b9eb661"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="bf717d6a-0fbe-44b8-8e30-18737abbc70f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");	
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
     }
     else
     {
     assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
     }
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:188C6CCD549DDF22E0533E991F0A1DD3/User/urn:dece:userid:org:dece:188C6CCD5900DF22E0533E991F0A1DD3</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_renew_20150615_034256</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB93D9108325E854E0401F0A0799736D</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E461D82DF0911A0CE0401F0A059929E3</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForFirstUser" searchProperties="true" id="48f85906-581b-4d49-a920-fd9cf97d5f7a"><con:settings/><con:testStep type="groovy" name="Set pem" id="957e7b71-b163-4355-856a-ee0eea79ca50"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("userIndex","0");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
//this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="b98d7b89-eb7d-48c0-b74b-96fd7c4f10c8"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;



if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)

//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;	
}



</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="5216568d-e179-4482-b408-2a341bdbfb3f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="7b718197-2b64-4398-977e-65b234947712"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="fa22a7f9-575c-4534-a83b-56079c967123"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="6727db4b-6e86-43c7-8e21-81d59a82b165"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="bec738ff-6c9d-4987-bc66-5a464e56db22"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="28fc1319-99f3-4bea-9cef-e6e67437f221"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c31e517-f3d1-4b5b-8698-6d855054e184</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForStandardUser" searchProperties="true" id="981a4631-c248-4b38-a89e-6e58e0761fac"><con:settings/><con:testStep type="groovy" name="Set pem" id="5c440fb0-6e7a-4886-9f7e-9a8b36361073"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="4a7921b7-4097-464e-bb57-f671f438a36c"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)
//
//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="e0a0c981-f257-48ab-afd6-6a887a8b4112"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="be2dcfee-1dfa-41a8-b78d-a46766123005"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="bb78f383-d308-4a2a-9062-579270d31d3d"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="e80b4fad-82b2-4d1b-805a-c22bc451a81a"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="04bc7730-2d0a-4cac-9259-426d44a0428a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="101c6a74-e0d7-4f94-9946-054590f7f985"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B98D77DD7311E0401F0A05991189</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95c44820-dc3d-41b1-aaeb-046ed883cdd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bebf0d96-3664-4297-8a60-39c898da110e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae07363f-1c5d-48de-93f1-d5ae9ad79a72</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="STS" searchProperties="true" id="9bf04a26-beef-4b3f-8224-c4cf3c04ebbf" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4db725a4-5eea-4c68-baeb-3d81286bc0c3"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));

if(testProject.getPropertyValue("V2") == testProject.getPropertyValue("versionUrlEncode"))
{
	def audienceList = URLEncoder.encode(testProject.getPropertyValue("audienceList"),"UTF-8");
	testCase.setPropertyValue("audienceList",audienceList);
	def tokentype = URLEncoder.encode(testProject.getPropertyValue("tokentype"),"UTF-8");
	testCase.setPropertyValue("tokentype",tokentype);
}
else
{
	def audienceList = URLDecoder.decode(testProject.getPropertyValue("audienceList"),"UTF-8");
	testCase.setPropertyValue("audienceList",audienceList);
	def tokentype = URLDecoder.decode(testProject.getPropertyValue("tokentype"),"UTF-8");
	testCase.setPropertyValue("tokentype",tokentype);
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem1" id="703d0266-2588-4a04-b79a-f3f8991119a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("STS - POST");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");
def keyStorePath = tC.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="554720c8-f9b9-456d-8e67-4cce3f46da51"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#UserName}</Username> 
  <Password>${#TestCase#Password}</Password> 
</Credentials>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="fa7995e8-03c8-4191-840e-4453f03b89e4"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Rerun STS Post"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");
def tStep = testCase.getTestStepByName("STS - POST");

log.info "#########################IN RERUN ######################" + tStep.getName();
String status = tStep.httpRequest.response.responseHeaders["#status#"]; 


if(!status.contains("201 Created"))
{
	log.info "STS Post not Sucessful Retrying...!";
	testRunner.runTestStepByName(tStep.getName());
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="c1d0cf4c-d0db-485c-bfb5-9ce91ae6b286">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

tC.setPropertyValue("status",status[0]);
//tC.setPropertyValue("connection", connection[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
tC.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="847d9319-bc96-487f-829b-e8a18ed2873f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def major = tP.getPropertyValue("VersionMajor");
def minor = tP.getPropertyValue("VersionMinor");
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS" id="3f989a29-38bb-45d4-a354-6cc7d7132b09"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/SecurityToken/Assertion/{ASSERTION}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="31743bc4-b3c6-4521-8732-aa46248b343c"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="f6c5755d-45e7-41d0-830a-47968823bd42"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def callTSname = tC.getPropertyValue("sName");
//def callTCname = tC.getPropertyValue("tName");
//
//def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = tC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
//tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
//tC.setPropertyValue("contentLength", contentLength);
//tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="f565414e-21d1-4187-87d8-275fd63b8965"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);

//tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("Count")+"1", "SAML2 Assertion="+base64encodeStr);
tP.setPropertyValue("SAML",base64encodeStr);

//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store Account and User Info based on Assertion UUID" id="7b5471f5-baac-4590-810f-75f8d5b87d4e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

if(tP.getPropertyValue("count") != "1"){
if (expectErrType == "" || expectErrType == "SUCCESS") {
                if (XMLbody.length() > 0) {
                                def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

                                                // Verify response sizes...
                                                assert myXML.size() == 1;

                                                /*
                                                String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
                                                String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
                                                */
                                                String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
                                                String userId    = myXML."saml2:Subject"."saml2:NameID";
                                                
                                                this.log.info "accountId [$accountId]";
                                                this.log.info "userId [$userId]";

                                                tC.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
                                                tC.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
                                                tC.setPropertyValue("assertionAccountIdFULL",accountId);
                                                tC.setPropertyValue("assertionUserIdFULL",userId);
                                                tP.setPropertyValue("NODEACCOUNTID",accountId);
                                                tP.setPropertyValue("NODEUSERID",userId);

                                                def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID"); 
                                                int lastColon = nodeaccountid.lastIndexOf(':');
                                                def accountid = nodeaccountid.substring(lastColon + 1);
                                                tP.setPropertyValue("ACCOUNTID",accountid);
                                                def nodeuserid = tP.getPropertyValue("NODEUSERID"); 
                                                int lastSlash = nodeuserid.lastIndexOf(':');
                                                def userid = nodeuserid.substring(lastSlash + 1);
                                                tP.setPropertyValue("USERID",userid);
									     if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
										{
											def nodeacctid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
										     tP.setPropertyValue("NODEACCOUNTID",nodeacctid);
										     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
										     tP.setPropertyValue("NODEUSERID",nodeuseridfull);
										}
										else
										{
											def nodeaccid = tP.getPropertyValue("NODEACCOUNTID");
										     tP.setPropertyValue("NODEACCOUNTID",nodeaccid);
										     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
										     tP.setPropertyValue("NODEUSERID",nodeuseridfull);
										}
                                                this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
                                                this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
                } else {
                                return false;
                }
}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0F1A1CC2F69345E0401F0A07990CC5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZtc6I6FP4rDv24gwFERaY6Y6Wd5VZbV922u186aYiQLSRIgmJ//U1QWbW21937icnh5DnPeck555LDJLbcPuc4E4TRWpHElLultKvlGXUZ5IS7FCaYuwK50/5o6Fp1w4W7K1rN97rac+BYLcNw5rozN5Fut1pz/eUFmXoDB46DLGQ5TlOqcp5jn3IBqehqlmE2daOlm82Zabim6Zqdescwf2q1B5xxiS1V6oa2JVXwrhYJkboArFar+qpRZ1kILMMwwdNoOEURTqDWu9x4VBrKelt9VA8wwnGM6ogl4BIc6FwG3J2SkEKRZ3hrK/jIlgGMDpA6ASfhhVbdxYFP56w8DiBllCAYkzeo4jPCImJBrR+HLCMiSj50wjQUsI4LpCPTphcaOKR2JtABw4xDnUfQ3GJN8BxnmCJc+z7xu9rFeVkrr84ySPmcZQk/PP4ZH0yXOGYpDnS+c2tL7XzAE5HqXWLk+hTFOSdLfKeKNYUI8202MTofqjbO8JwUQ8JlgRZcsQP79I6Om2h4JMRc/E2C9pKzAXmAcY577Yb/A6QFa4ez9Csbrf8Rd+MGW2A/d7olgX3lUlCldnM8KsqqiDY37vHoJ1+PBXHCX60Yzu6D9pdxy364HQaDG/vLMotxdGtP2p2HcSsfTJ5unYe1k95+a94j8s0Z3aJ+St5W4ePKHqXX1mgwE4sfllHcjJ2IPORPS9+3V7QwIuClTTi6Lh4XjVUydIBDo/VX55pmXm6bo0UzZFhmrPHkvAI7TH1+VYjvwdXTY/r96nE+jifJtx/dyp09/oey3Zuf5i+/MBK7oyoD36vdyCxB8XkzUxIS6PNS1U1V8+ECU6H11C3VO9xctjsSuDKHm7PpOIPWYOA1O4bh3VjWtdFsNK47HfPG6Jue19g1mQ2LI4oDRudE2VItd1M2nxNEicsxDXCmL1kuOx3XPkH0oIA1n07kI2CU4xmT7dlsr9vL1w5bmOFbEVkvyasdcaPdbmi1Oybu6X3WnwucHfbkxkFPnmBEUoJV41Z1zWVhcyFjsYDLXMRmfQnrVKZTwEx1WdeynSbgJEljrJiChAV5jOtplJaRAXzztXSIeCmdXM/K1/ahX8f/diGQOgFRClz5coVlGvGJ4WLsHHnncOvkENrB9/OAqIcl4ykygjZMDn/9LhNVH1WNeMP+dLwjXen+wd3nwfTZ/EuA4f8FkPl4fxN8EhNwnI7KULAke2Z3m4OcQbJr9XbFtIBmfVHPl8u8rB/bboBMwgOVSGBYYIpRLvvqesZeMQUVCjhriFXEj4xX8kOKuYjoVECBE1nvtfJ4xtYyxVxtLb58qMW5K9GBSRk6gQtxSjaI5calGH+6lCEXKT0pHsvPimXB74ydwNqzI/2US4sgNFQnNcDWH9QFYhKWyNbLsn3wUwCnjB8KqyBXXIQsqJdc4I//1FRP7WoQIZZT4XtaKdjv8yVPsU6x+1vpHUw5Sqrdkvz3cqmTsgQQlhspJyW+WhFc9QRouDcrtkZPjgu74302Lg7Z9d6J30v24nRc471/AQ==</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_d826008f-8f1c-466f-bbc1-3ed88c2c2885</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_d826008f-8f1c-466f-bbc1-3ed88c2c2885</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>CE0F1A1CC2F19345E0401F0A07990CC5</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3512</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>CE0FA9BFE5F30C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>stream_renew_20150615_034256</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0FA9BFE5F80C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml; charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_d826008f-8f1c-466f-bbc1-3ed88c2c2885</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_d826008f-8f1c-466f-bbc1-3ed88c2c2885" IssueInstant="2015-06-15T10:11:19.901Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_d826008f-8f1c-466f-bbc1-3ed88c2c2885"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>73IY/pxo7gTpHoMyJtNP3oqeIu8=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>OeMZsyPti8gj6laTOd7+P64VKLdCF4+vrlehK4R79VP6uCRXK8Vy8pKQ5OciQ8MKcApizwgWw4MpE2MCTtqY20xFP8hiVuXvII4wnx0h/Dp5aMExWq3wmL8/8nhyH8EnrDu41Mq5goeusi3X8k/4gpIsBxtUdBXWpUBWfPlRmQY=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:188C6CCD5900DF22E0533E991F0A1DD3</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_17y7vk9oq1gzxh2bmk4hs0773" NotOnOrAfter="2015-06-15T13:11:19.901Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-06-15T10:11:09.901Z" NotOnOrAfter="2016-06-15T10:11:19.901Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_d826008f-8f1c-466f-bbc1-3ed88c2c2885</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-06-15T10:11:19.901Z" SessionIndex="_d826008f-8f1c-466f-bbc1-3ed88c2c2885"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:188C6CCD549DDF22E0533E991F0A1DD3</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value/></con:property><con:property><con:name>assertionUserId</con:name><con:value/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>800673c1-3147-4c8c-b0c1-58e0015b4b03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>175431f8-b1ab-411a-838d-f62e6ec865f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b4251c4-b0c9-4524-b11d-58f032477794</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad58565a-ea44-49b7-aab1-812ed0ed9584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c7be09-e6de-4048-88a8-4093708a9d7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a41302e2-c2f1-4384-92f7-153edc9522ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2fe33502-92b9-4bc5-9cab-1083378ddd6c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1adab77f-1cd6-4d9f-ac40-f99f00ddbb94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af3889f5-e9ad-4a18-837c-7ead87c1caed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdb00829-308f-406e-9775-a6c8de3621f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98f48738-f6c6-4056-be18-f24b60c6a023</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb39d541-2f26-4a00-9fc8-5a5ea810f40b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Basic" searchProperties="true" id="103cb904-d5e6-4280-b6d7-346eb7fcce8c"><con:settings/><con:testStep type="groovy" name="Set properties for user" id="21a74e9c-c550-4ffd-abbb-e3d543d9d476"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded)
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="d4f459af-49cf-4078-9233-95f2321af52d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tP.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="049fd687-b69b-4bb9-99ae-57e4b0d2a181"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:basic" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>bau</SurName>
	</Name>	
	
  <!--<DisplayImage>
        <DisplayImageData>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
ral9qbL/2Q==</DisplayImageData>-->
<!--DisplayImageData>jfdkjdkfgdgd</DisplayImageData-->
<!--DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=avatar&amp;nodeId=urn:dece:org:org:dece:500500&amp;nodeUserId=urn:dece:userid:org:dece:B2F5D0FFF1B7BEC4E0401F0A0599368E</DisplayImageURL-->
<!--DisplayImageURL>www.yahoo1.com</DisplayImageURL-->
    <!--</DisplayImage>-->
<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#primaryemail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <LegalGuardian>urn:dece:userid:org:dece:${#Project#USERIDFULL}</LegalGuardian>
       <Credentials> 

               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8ec19c93-3bf1-4caa-a49b-0e6eb7febc0b"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCOUNTID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="5b6e2599-10b5-48de-bd8b-1e864ad18add"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="23d2038a-7d82-416b-b20c-dce41308af0b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#VersionMajor}' );
String minor = context.expand( '${#Project#VersionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml; charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if(minor == tP.getPropertyValue("versionUrlEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 3);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	}
	else
	{
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	nodeuserid     = urlStr.substring(lastSlash + 1);
	userid = urlStr.substring(lastColon + 1);
     tP.setPropertyValue("NODEUSERID",nodeuserid);
	tP.setPropertyValue("USERID",userid);
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:188C6CCD549DDF22E0533E991F0A1DD3/User/urn:dece:userid:org:dece:188C794FB69CE912E0533E991F0A0FFD</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_renew_20150615_034254</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB8F0F6588921CE6E0401F0A05991E36</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E461D82DF0911A0CE0401F0A059929E3</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForBasicUser" searchProperties="true" id="5f5bf394-8aa6-4f31-b3da-5767e3c8eb12"><con:settings/><con:testStep type="groovy" name="Set pem" id="6e0560f4-90a8-4bfc-89f3-6c8603e7d433"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep1.name()]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID" id="6f4182cf-c5ca-4aa6-ba2c-e8438a60c603"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;

//def testStep1 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" )
//if( testStep1.disabled )
//  testStep1.disabled = false;

def testStep2 = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_ManageUserConsent" )
if( testStep2.disabled )
  testStep2.disabled = false;

if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)
//
//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
//testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = true;
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_ManageUserConsent" ).disabled = true;
//testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = true;
}</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies" id="59e0544b-f2bd-4093-8fb7-14137559621c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
log.info "audienceArray"+audienceArray;
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
//	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_COPPA" ).disabled = true;
//	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_CLGAttestation" ).disabled = true;
	
}
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="e66da086-867d-4381-a2a8-37b6ea95160e"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="5a50ccae-8e81-482d-92f5-d552d732c81a"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="300af6a0-af85-48a6-ac9b-e3f9ab031502"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERIDFULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary" id="529b887b-dccb-475f-afb4-768e2bfc72b2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties" id="986bda53-39cb-41f2-abb4-3cdb419dd9b1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;
</script></con:config></con:testStep><con:properties><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B98D789E7311E0401F0A05991189</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>538eac1e-267d-47ba-b194-f9953171618c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bac177f5-5586-4318-b970-cc997f810ec4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2dc8a3b-c62a-4c6a-a101-634c57a370ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>41774e16-4267-4acd-bbcd-b821f3f16b23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>300af6a0-af85-48a6-ac9b-e3f9ab031502</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="eb034ff5-ad55-4711-a0fc-42505f1914a6"><con:settings/><con:testStep type="groovy" name="Set Pem" id="f3972d36-f1a1-4286-bbc5-13313e649581"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#nodeid}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set Pem" disabled="true" id="a14aaf17-0c97-4333-b664-71ed2f3c92ef"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>STS</con:value></con:property><con:property><con:name>sName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForFirstUser_without MAC" searchProperties="true" id="02bf1b11-606e-4f99-a63a-fd7f6018628b"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("userIndex","0");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
//RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
//RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

def keyStorePath = testCase.getPropertyValue("keyStorePath");
//this.log.info "testStep [$testStep]";
//this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Encoded NodeUserID"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def testStep = testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" )
if( testStep.disabled )
  testStep.disabled = false;



if(testProject.getPropertyValue("count") != "1"){
//def NODEUSERIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEUSERID"),"UTF-8");
//testProject.setPropertyValue("NODEUSERID",NODEUSERIDEncoded)
//testProject.setPropertyValue("NODEUSERIDFAU1_Encoded",NODEUSERIDFAU1_Encoded)

//def NODEACCOUNTIDEncoded = URLEncoder.encode(testProject.getPropertyValue("NODEACCOUNTID"),"UTF-8");
//testProject.setPropertyValue("NODEACCOUNTID",NODEACCOUNTIDEncoded)

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;	
}



</script></con:config></con:testStep><con:testStep type="groovy" name="set user index and create policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def audienceArray = testProject.getPropertyValue("audienceList").toString();
if(audienceArray.contains(";"))
{
def audiencelistArray = testProject.getPropertyValue("audienceList").toString().split(";");
def l = audiencelistArray.length;
log.info "l==="+l;
def userIndex = testProject.getPropertyValue("userIndex").toInteger();
log.info "userindex====="+userIndex;


String nodeoid = testProject.getPropertyValue("nodeoid"+testProject.getPropertyValue("count")+testProject.getPropertyValue("userIndex"));
testProject.setPropertyValue("Node_OID",nodeoid.toString());

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testProject.getPropertyValue("Node_OID"));
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep0 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
//RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
//RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

def keyStorePath = testCase.getPropertyValue("keyStorePath");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep0, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
//soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
if(testProject.getPropertyValue("userIndex") != "0"){
	testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;
}
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
      <dece:Resource>${#Project#policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#USERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#VersionMajor}/${#Project#VersionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="DLASP_CS_1_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#USERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_OID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#USERID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="${#Project#urnPolicy}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Go to policy create again if necessary"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def audiencelistArray = tP.getPropertyValue("audienceList").toString().split(";");
def Length = audiencelistArray.length;
log.info "l====="+Length;
def userIndex   = tP.getPropertyValue("userIndex").toInteger();

if(Length > userIndex+1){
    userIndex++;
    log.info "========"+userIndex
    tP.setPropertyValue("userIndex",userIndex.toString());
    
    testRunner.gotoStepByName("set user index and create policies");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set the initial properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("userIndex","0");
String nodeoid = tP.getPropertyValue("nodeoid"+tP.getPropertyValue("count")+tP.getPropertyValue("userIndex"));
log.info"========"+nodeoid
tP.setPropertyValue("Node_OID",nodeoid.toString());
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/DLASP_CS_1_concat.pem</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:E682B036D956188DE0401F0A05997A50</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:E682B036DCFD188DE0401F0A05997A50</con:value></con:property><con:property><con:name>sName</con:name><con:value>E_2_E_without_MAC</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5c31e517-f3d1-4b5b-8698-6d855054e184</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="E_2_E" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="End_To_End" searchProperties="true" id="f61a1256-f948-4937-93b5-6bc5fc69ae8a"><con:settings/><con:testStep type="groovy" name="Set ALID CID Properties" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("V2") == "07")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_315037.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_315037.txt");
}
else if(tP.getPropertyValue("V2") == "11")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:RLGET_REFERENCE_R3_EXAMPLE_ALIDVersion_300133.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:RLGET_REFERENCE_R3_EXAMPLE_CIDVersion_300133.txt");
}
else if(tP.getPropertyValue("V2") == "21")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_828445.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_828445.txt");
}


if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	tP.setPropertyValue("urnParentalControlRating","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ABlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult")
	tP.setPropertyValue("urnPolicyID","urn%3Adece%3Apolicyid%3Aorg%3Adece%3A");
	tP.setPropertyValue("urnPolicy","urn%3Adece%3Atype%3Apolicy%3A");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");	
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}
else
{
	tP.setPropertyValue("urnParentalControlRating","urn:dece:type:policy:ParentalControl:RatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn:dece:type:policy:ParentalControl:BlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn:dece:type:policy:ParentalControl:AllowAdult")
	tP.setPropertyValue("urnPolicy","urn:dece:type:policy:");
	tP.setPropertyValue("urnPolicyID","urn:dece:policyid:org:dece:");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set Initial Values"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","3");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdLLASPCS"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid13",tP.getPropertyValue("nodeIdDLASPCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS")+";");

tP.setPropertyValue("nodeoid20",tP.getPropertyValue("nodeIdLLASPCS2"));
tP.setPropertyValue("audiencelist2","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS2"));

tP.setPropertyValue("nodeoid30",tP.getPropertyValue("nodeIdDLASPCS2"));
tP.setPropertyValue("audiencelist3","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS2"));





</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
			tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
		def accountid = tP.getPropertyValue("ACCOUNTID");
		tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);

if(tP.getPropertyValue("count") != "1")
{
	def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_SAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_SAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth","1997-07-01");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Standard");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridstandard = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDSAU1_"+tP.getPropertyValue("count"),nodeuseridstandard);
def useridstandard = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDSAU1_"+tP.getPropertyValue("count"),useridstandard);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_SAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_SAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
     {
     def nodeuseridstandard = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
     tP.setPropertyValue("NODEUSERIDSAU1_"+tP.getPropertyValue("count"),nodeuseridstandard);
     }
     else
     {
     def nodeuseridstandard = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDSAU1_"+tP.getPropertyValue("count"),nodeuseridstandard);
     }
     
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_SAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForStandardUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_SAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_SAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlstandard = tP.getPropertyValue("SAML");

tP.setPropertyValue("SAMLSAU1_"+tP.getPropertyValue("count"),samlstandard);
if(tP.getPropertyValue("count") != "1")
{	
     def nodeuseridstandard = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDSAU1_"+tP.getPropertyValue("count"),nodeuseridstandard);
}</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_BAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Basic");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDBAU1_"+tP.getPropertyValue("count"),nodeuseridbasic);
def useridbasic = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDBAU1_"+tP.getPropertyValue("count"),useridbasic);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
     def nodeuseridbasic = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
     tP.setPropertyValue("NODEUSERIDBAU1_"+tP.getPropertyValue("count"),nodeuseridbasic);
	}
	else
	{
     def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDBAU1_"+tP.getPropertyValue("count"),nodeuseridbasic);
	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForBasicUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlbasic = tP.getPropertyValue("SAML");

tP.setPropertyValue("SAMLBAU1_"+tP.getPropertyValue("count"),samlbasic);
if(tP.getPropertyValue("count") != "1")
{	
     def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDBAU1_"+tP.getPropertyValue("count"),nodeuseridbasic);
}</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_FAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");
tC.setPropertyValue("MeetsAgeOfMajority","true");
tC.setPropertyValue("DateOfBirth","1986-02-25");
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Standard");



myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU2_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU2_"+tP.getPropertyValue("count"),useridfull);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
     tP.setPropertyValue("NODEUSERIDFAU2_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU2_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForStandardUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_FAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");

tP.setPropertyValue("SAMLFAU2_"+tP.getPropertyValue("count"),samlfull);
if(tP.getPropertyValue("count") != "1")
{	
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU2_"+tP.getPropertyValue("count"),nodeuseridfull);
}</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_SAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_SAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth","1997-01-07");
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Standard");



myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridstandard = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDSAU2_"+tP.getPropertyValue("count"),nodeuseridstandard);
def useridstandard = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDSAU2_"+tP.getPropertyValue("count"),useridstandard);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_SAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_SAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
     def nodeuseridstandard = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
     tP.setPropertyValue("NODEUSERIDSAU2_"+tP.getPropertyValue("count"),nodeuseridstandard);
	}
	else
	{
     def nodeuseridstandard = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDSAU2_"+tP.getPropertyValue("count"),nodeuseridstandard);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_SAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForStandardUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_SAU2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_SAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlstandard = tP.getPropertyValue("SAML");

tP.setPropertyValue("SAMLSAU2_"+tP.getPropertyValue("count"),samlstandard);
if(tP.getPropertyValue("count") != "1")
{	
     def nodeuseridstandard = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDSAU2_"+tP.getPropertyValue("count"),nodeuseridstandard);
}</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_BAU2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_BAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Basic");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDBAU2_"+tP.getPropertyValue("count"),nodeuseridbasic);
def useridbasic = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDBAU2_"+tP.getPropertyValue("count"),useridbasic);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_BAU2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{	
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
     def nodeuseridbasic = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
     tP.setPropertyValue("NODEUSERIDBAU2_"+tP.getPropertyValue("count"),nodeuseridbasic);
	}
	else
	{
     def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDBAU2_"+tP.getPropertyValue("count"),nodeuseridbasic);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_BAU2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForBasicUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_BAU2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_BAU2");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def samlbasic = tP.getPropertyValue("SAML");

tP.setPropertyValue("SAMLBAU2_"+tP.getPropertyValue("count"),samlbasic);
if(tP.getPropertyValue("count") != "1")
{	
     def nodeuseridbasic = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDBAU2_"+tP.getPropertyValue("count"),nodeuseridbasic);
}</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunner;
import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunContext;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int loopuntil = tP.getPropertyValue("loop").toInteger();
int counter   = tP.getPropertyValue("Count").toInteger();


if (counter &lt; loopuntil) {
	counter++;
    tP.setPropertyValue("Count",counter.toString());
    log.info "==========================================================";
    testRunner.gotoStepByName("Set NodeID and counter");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>UserName</con:name><con:value>stream_renew_20150615_034256</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f524a7af-4278-406d-9a4d-e50ccabff836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="E_2_E_without_MAC" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="End_To_End" searchProperties="true" id="1541418f-682a-4540-af68-bbd4ed93e536"><con:settings/><con:testStep type="groovy" name="Set ALID CID Properties" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("V2") == "07")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_315037.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_315037.txt");
}
else if(tP.getPropertyValue("V2") == "11")
{
	tP.setPropertyValue("alid","urn:dece:alid:eidr-s:512F-4CA1-D6E8-D57D-5012-I");
	tP.setPropertyValue("cid","urn:dece:cid:eidr-s:512F-4CA1-D6E8-D57D-5012-I");
}
else if(tP.getPropertyValue("V2") == "21")
{
	tP.setPropertyValue("alid","urn:dece:alid:file:STREAMS_ALIDVersion_828445.txt");
	tP.setPropertyValue("cid","urn:dece:cid:file:STREAMS_CIDVersion_828445.txt");
}


if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
{
	tP.setPropertyValue("urnParentalControlRating","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ARatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3ABlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn%3Adece%3Atype%3Apolicy%3AParentalControl%3AAllowAdult")
	tP.setPropertyValue("urnPolicyID","urn%3Adece%3Apolicyid%3Aorg%3Adece%3A");
	tP.setPropertyValue("urnPolicy","urn%3Adece%3Atype%3Apolicy%3A");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");	
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}
else
{
	tP.setPropertyValue("urnParentalControlRating","urn:dece:type:policy:ParentalControl:RatingPolicy")
	tP.setPropertyValue("urnParentalControlBlockUnratedContent","urn:dece:type:policy:ParentalControl:BlockUnratedContent")
	tP.setPropertyValue("urnParentalControlAllowAdult","urn:dece:type:policy:ParentalControl:AllowAdult")
	tP.setPropertyValue("urnPolicy","urn:dece:type:policy:");
	tP.setPropertyValue("urnPolicyID","urn:dece:policyid:org:dece:");
	tP.setPropertyValue("urnAccount","urn:dece:accountid:org:dece:");
	tP.setPropertyValue("urnUser","urn:dece:userid:org:dece:");
	tP.setPropertyValue("urnNode","urn:dece:org:org:dece:");
	tP.setPropertyValue("urnRating","urn:dece:type:rating:");
	tP.setPropertyValue("urnRightsToken","urn:dece:rightstokenid:org:dece:");
	tP.setPropertyValue("urnStream","urn:dece:streamhandleid:org:dece:");
	tP.setPropertyValue("primaryemail","testing@uvvutesting.biz");
	tP.setPropertyValue("AlternateEmail","testing1@uvvutesting.biz");
	tP.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword")
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set Initial Values"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("loop","3");
tP.setPropertyValue("count","1");

tP.setPropertyValue("nodeoid10",tP.getPropertyValue("nodeIdRTL"));
tP.setPropertyValue("nodeoid11",tP.getPropertyValue("nodeIdLLASP"));
tP.setPropertyValue("nodeoid12",tP.getPropertyValue("nodeIdLLASPCS"));
tP.setPropertyValue("nodeoid13",tP.getPropertyValue("nodeIdDLASP"));
tP.setPropertyValue("nodeoid14",tP.getPropertyValue("nodeIdDLASPCS"));
tP.setPropertyValue("audiencelist1","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTL")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS")+";");

tP.setPropertyValue("nodeoid20",tP.getPropertyValue("nodeIdLLASPCS2"));
tP.setPropertyValue("audiencelist2","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS2"));

tP.setPropertyValue("nodeoid30",tP.getPropertyValue("nodeIdDLASPCS2"));
tP.setPropertyValue("audiencelist3","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS2"));







</script></con:config></con:testStep><con:testStep type="groovy" name="Set NodeID and counter"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid10"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist1"));
}
if(tP.getPropertyValue("count") == "2")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid20"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist2"));
}
if(tP.getPropertyValue("count") == "3")
{
tP.setPropertyValue("Node_OID",tP.getPropertyValue("nodeoid30"));
tP.setPropertyValue("audienceList",tP.getPropertyValue("audiencelist3"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetAccountName"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("Setup").getTestCaseByName("AccName_Gen");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
def accountid = tP.getPropertyValue("ACCOUNTID");
tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

}
</script></con:config></con:testStep><con:testStep type="groovy" name="SetUsenamesForSixUsers"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserNameGeneration");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
}</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if(tP.getPropertyValue("count") == "1"){
def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:full");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
			tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);	
		def accountid = tP.getPropertyValue("ACCOUNTID");
		tP.setPropertyValue("ACCOUNTID_"+tP.getPropertyValue("count"),accountid);	

def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
def useridfull = tP.getPropertyValue("USERID");
tP.setPropertyValue("USERIDFAU1_"+tP.getPropertyValue("count"),useridfull);

}
</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
if(tP.getPropertyValue("count") != "1")
{
	if(tP.getPropertyValue("V2") == tP.getPropertyValue("versionUrlEncode"))
	{
		def nodeaccountid = URLEncoder.encode(tP.getPropertyValue("NODEACCOUNTID"),"UTF-8");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = URLEncoder.encode(tP.getPropertyValue("NODEUSERID"),"UTF-8");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
	else
	{
		def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
	     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
	     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
	     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser_without MAC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_1Year_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tP.getPropertyValue("UserName_FAU1");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL",samlfull); 

tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("count"),samlfull);

if(tP.getPropertyValue("count") != "1")
{
	def nodeaccountid = tP.getPropertyValue("NODEACCOUNTID");
     tP.setPropertyValue("NODEACCOUNTID_"+tP.getPropertyValue("count"),nodeaccountid);
     def nodeuseridfull = tP.getPropertyValue("NODEUSERID");
     tP.setPropertyValue("NODEUSERIDFAU1_"+tP.getPropertyValue("count"),nodeuseridfull);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Increment Counter and loop if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunner;
import com.eviware.soapui.impl.wsdl.panels.support.MockTestSuiteRunContext;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int loopuntil = tP.getPropertyValue("loop").toInteger();
int counter   = tP.getPropertyValue("Count").toInteger();


if (counter &lt; loopuntil) {
	counter++;
    tP.setPropertyValue("Count",counter.toString());
    log.info "==========================================================";
    testRunner.gotoStepByName("Set NodeID and counter");
}
</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1997-01-07</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:full</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_renew_20150615_032745</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f524a7af-4278-406d-9a4d-e50ccabff836</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>AccountDisplayName</con:name><con:value>Ashwin_Acc_Create_20150615_034252</con:value></con:property><con:property><con:name>ACCOUNTID</con:name><con:value>188C6CCD549DDF22E0533E991F0A1DD3</con:value></con:property><con:property><con:name>ACCOUNTID_1</con:name><con:value>188C6CCD549DDF22E0533E991F0A1DD3</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_241580697.txt</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:534576800</con:value></con:property><con:property><con:name>APItestSuite</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>audienceList</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;</con:value></con:property><con:property><con:name>audiencelist1</con:name><con:value>urn:dece:org:org:dece:RET;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;</con:value></con:property><con:property><con:name>audiencelist2</con:name><con:value>urn:dece:org:org:dece:LLASP_CS_2</con:value></con:property><con:property><con:name>audiencelist3</con:name><con:value>urn:dece:org:org:dece:DLASP_CS_2</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa1.b.uvvu.com</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property><con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property><con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_740255950.txt</con:value></con:property><con:property><con:name>clusterNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coords</con:name><con:value>FALKY,COORD-10000,COORD-3034,COORD-2999,COORD-2509,COORD-627,UV-135,UV-340,Coord-2180</con:value></con:property><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp1db_23</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA1_APP</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa1.d.uvvu.com</con:value></con:property><con:property><con:name>disablePriority</con:name><con:value>P3,CHILD,CLG</con:value></con:property><con:property><con:name>DMR_ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>DMR_APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>DMR_BID</con:name><con:value>urn:dece:bid:org:200002</con:value></con:property><con:property><con:name>DMR_CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>enableFlakyScript</con:name><con:value>false</con:value></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>false</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>ExecutionMachine</con:name><con:value>localmachine</con:value></con:property><con:property><con:name>ExpirationDateTime</con:name><con:value>2015-04-24T16:49:38.552Z</con:value></con:property><con:property><con:name>Flaky_Disabled</con:name><con:value>true</con:value></con:property><con:property><con:name>idempotentdelaymillisecs</con:name><con:value>60000</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>loop</con:name><con:value>3</con:value></con:property><con:property><con:name>microService</con:name><con:value>ON</con:value></con:property><con:property><con:name>NODEACCOUNTID</con:name><con:value>urn:dece:accountid:org:dece:188C6CCD549DDF22E0533E991F0A1DD3</con:value></con:property><con:property><con:name>NODEACCOUNTID_1</con:name><con:value>urn:dece:accountid:org:dece:188C6CCD549DDF22E0533E991F0A1DD3</con:value></con:property><con:property><con:name>NODEACCOUNTID_2</con:name><con:value/></con:property><con:property><con:name>NODEACCOUNTID_3</con:name><con:value>urn:dece:accountid:org:dece:143A3EF710D04338E05307991F0AAE9C</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeoid10</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeoid11</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeoid12</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeoid13</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeoid14</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeoid20</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeoid21</con:name><con:value>3611</con:value></con:property><con:property><con:name>nodeoid30</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeoid31</con:name><con:value>3711</con:value></con:property><con:property><con:name>NODEUSERID</con:name><con:value>urn:dece:userid:org:dece:188C6CCD5900DF22E0533E991F0A1DD3</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_1</con:name><con:value>urn:dece:userid:org:dece:188C794FB69CE912E0533E991F0A0FFD</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_2</con:name><con:value>urn:dece:userid:org:dece:143A3F38A943433DE05307991F0A3E94</con:value></con:property><con:property><con:name>NODEUSERIDBAU1_3</con:name><con:value>urn:dece:userid:org:dece:143A07C7E0B758CDE05305991F0AE5CE</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_1</con:name><con:value>urn:dece:userid:org:dece:FC6CADFE8D4693AFE0401F0A059941FB</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_2</con:name><con:value>urn:dece:userid:org:dece:FC6CADE77A174208E0401F0A059941C9</con:value></con:property><con:property><con:name>NODEUSERIDBAU2_3</con:name><con:value>urn:dece:userid:org:dece:FC6CADE77A174208E0401F0A059941C9</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_1</con:name><con:value>urn:dece:userid:org:dece:188C6CCD549EDF22E0533E991F0A1DD3</con:value></con:property><con:property><con:name>NODEUSERIDFAU1_2</con:name><con:value/></con:property><con:property><con:name>NODEUSERIDFAU1_3</con:name><con:value>urn:dece:userid:org:dece:143A3EF710D24338E05307991F0AAE9C</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_1</con:name><con:value>urn:dece:userid:org:dece:188C6D455D00DF24E0533E991F0A0546</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_2</con:name><con:value>urn:dece:userid:org:dece:1439FD5AC55758B8E05305991F0A0024</con:value></con:property><con:property><con:name>NODEUSERIDFAU2_3</con:name><con:value>urn:dece:userid:org:dece:1439FD5AC55758B8E05305991F0A0024</con:value></con:property><con:property><con:name>NODEUSERIDFULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE461D82DF0911A0CE0401F0A059929E3</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_1</con:name><con:value>urn:dece:userid:org:dece:188C6954EC91DF1AE0533E991F0AACB2</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_2</con:name><con:value>urn:dece:userid:org:dece:143A07C7E90358CDE05305991F0AE5CE</con:value></con:property><con:property><con:name>NODEUSERIDSAU1_3</con:name><con:value>urn:dece:userid:org:dece:143A07C7E90358CDE05305991F0AE5CE</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_1</con:name><con:value>urn:dece:userid:org:dece:188C6CCD5900DF22E0533E991F0A1DD3</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_2</con:name><con:value>urn:dece:userid:org:dece:1439FD5D362C7B50E05307991F0A6AF0</con:value></con:property><con:property><con:name>NODEUSERIDSAU2_3</con:name><con:value>urn:dece:userid:org:dece:1439FD5D362C7B50E05307991F0A6AF0</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>RET</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>policy_TOU</con:name><con:value>https://qa1.c.uvvu.com/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>portalnodeid</con:name><con:value>10</con:value></con:property><con:property><con:name>primaryemail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa1.p.uvvu.com</con:value></con:property><con:property><con:name>QC_AutoMapping</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_BulkUpdate</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>QC_password</con:name><con:value>@1vijaya</con:value></con:property><con:property><con:name>QC_Project</con:name><con:value>DECE</con:value></con:property><con:property><con:name>QC_ProjectPath</con:name><con:value/></con:property><con:property><con:name>QC_ReExport</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_ResultExportLevel</con:name><con:value>on</con:value></con:property><con:property><con:name>QC_RunName</con:name><con:value/></con:property><con:property><con:name>QC_soapUI_ARGS</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value>Root\DECE_API\DECE_API_1.0.1.10.B</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value>Subject\DECE_1.0_Release\DECE_API\APIs\StreamRenew</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>StreamRenew</con:value></con:property><con:property><con:name>QC_TestType</con:name><con:value>MANUAL</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>http://stprqc01.va.neustar.com:8080/qcbin</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>sravan</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa1.q.uvvu.com</con:value></con:property><con:property><con:name>RequestingUserIdTag</con:name><con:value>&lt;RequestingUserID>urn:dece:userid:org:dece:EDF864E7D77059E6E0401F0A07994A3C&lt;/RequestingUserID></con:value></con:property><con:property><con:name>RightsTokenIdTag</con:name><con:value>&lt;RightsTokenID>urn:dece:rightstokenid:org:dece:EDF8697E09C80B2CE0401F0A07995F1C&lt;/RightsTokenID></con:value></con:property><con:property><con:name>Rights_ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>Rights_APID</con:name><con:value>urn:dece:apid:file:INTERACTIVE_MetadataDigitalCreate.txt:39983831</con:value></con:property><con:property><con:name>Rights_CID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>SAML</con:name><con:value>pVZtc6I6FP4rDv24gwFERaY6Y6Wd5VZbV922u186aYiQLSRIgmJ//U1QWbW21937icnh5DnPeck555LDJLbcPuc4E4TRWpHElLultKvlGXUZ5IS7FCaYuwK50/5o6Fp1w4W7K1rN97rac+BYLcNw5rozN5Fut1pz/eUFmXoDB46DLGQ5TlOqcp5jn3IBqehqlmE2daOlm82Zabim6Zqdescwf2q1B5xxiS1V6oa2JVXwrhYJkboArFar+qpRZ1kILMMwwdNoOEURTqDWu9x4VBrKelt9VA8wwnGM6ogl4BIc6FwG3J2SkEKRZ3hrK/jIlgGMDpA6ASfhhVbdxYFP56w8DiBllCAYkzeo4jPCImJBrR+HLCMiSj50wjQUsI4LpCPTphcaOKR2JtABw4xDnUfQ3GJN8BxnmCJc+z7xu9rFeVkrr84ySPmcZQk/PP4ZH0yXOGYpDnS+c2tL7XzAE5HqXWLk+hTFOSdLfKeKNYUI8202MTofqjbO8JwUQ8JlgRZcsQP79I6Om2h4JMRc/E2C9pKzAXmAcY577Yb/A6QFa4ez9Csbrf8Rd+MGW2A/d7olgX3lUlCldnM8KsqqiDY37vHoJ1+PBXHCX60Yzu6D9pdxy364HQaDG/vLMotxdGtP2p2HcSsfTJ5unYe1k95+a94j8s0Z3aJ+St5W4ePKHqXX1mgwE4sfllHcjJ2IPORPS9+3V7QwIuClTTi6Lh4XjVUydIBDo/VX55pmXm6bo0UzZFhmrPHkvAI7TH1+VYjvwdXTY/r96nE+jifJtx/dyp09/oey3Zuf5i+/MBK7oyoD36vdyCxB8XkzUxIS6PNS1U1V8+ECU6H11C3VO9xctjsSuDKHm7PpOIPWYOA1O4bh3VjWtdFsNK47HfPG6Jue19g1mQ2LI4oDRudE2VItd1M2nxNEicsxDXCmL1kuOx3XPkH0oIA1n07kI2CU4xmT7dlsr9vL1w5bmOFbEVkvyasdcaPdbmi1Oybu6X3WnwucHfbkxkFPnmBEUoJV41Z1zWVhcyFjsYDLXMRmfQnrVKZTwEx1WdeynSbgJEljrJiChAV5jOtplJaRAXzztXSIeCmdXM/K1/ahX8f/diGQOgFRClz5coVlGvGJ4WLsHHnncOvkENrB9/OAqIcl4ykygjZMDn/9LhNVH1WNeMP+dLwjXen+wd3nwfTZ/EuA4f8FkPl4fxN8EhNwnI7KULAke2Z3m4OcQbJr9XbFtIBmfVHPl8u8rB/bboBMwgOVSGBYYIpRLvvqesZeMQUVCjhriFXEj4xX8kOKuYjoVECBE1nvtfJ4xtYyxVxtLb58qMW5K9GBSRk6gQtxSjaI5calGH+6lCEXKT0pHsvPimXB74ydwNqzI/2US4sgNFQnNcDWH9QFYhKWyNbLsn3wUwCnjB8KqyBXXIQsqJdc4I//1FRP7WoQIZZT4XtaKdjv8yVPsU6x+1vpHUw5Sqrdkvz3cqmTsgQQlhspJyW+WhFc9QRouDcrtkZPjgu74302Lg7Z9d6J30v24nRc471/AQ==</con:value></con:property><con:property><con:name>SAMLBAU1_1</con:name><con:value>pVbrbuI8EH0VlP5cBecGJVFBogSqdGm35dJt+6dynQHcDU6IHUr36dcOkBJK+7H7SUjIk/GZMxfPzBnH88jy2pxDKmjMKqt5xLiXS5taljIvxpxyj+E5cE8Qb9i+6ntW1fDw9opWCfym9oQbDdsJTUMn5sTSnUnN0DHGjg7YPoXQDd2aWZeqnGcQMC4wE03NMsyabtR1szYyDU/+rFrVtWuPWuUOUi6xpUrV0DakVrypzYRIPIReX1+rr3Y1TqfIMgwT3V/1h2QGc6y1ztYe5YbS1kafVEMgEEWkSuI5OkMlnbOQe0M6ZVhkKWxshZ/ZMpDhIqkTcjo90Yq7EAZsEufHDmYxowRH9DdW8bkCMYvDSjuaxikVs/mnTpiGAtZhRWQMHXaioTK1I4FKDFOOdT7D5gZrABNIgRGojAdBUzs5Lmv51VGKGZ/E6ZyXj3/HB9gSojiBUOdbtzbUjgc8EKnWGRAvYCTKOF3CtSrWBBPgm2wCOR6qcpPChK76lMsCXXHFDu3S2zuuo+HTKXDxLwnaSc4a5A5HGbRGw/Bb8tj/+dAzfvYn53zGu9C4TGbjcbuZE9hVzgVFatfHvaIsimh9Y9Fd/eoH6HpsXTWsx7daEHYX4wz8YXQvet9/d4QzmkUjbt7A78hFuO72wKjdZ+R52phkhntvdN9cf4AGDyNr1CG98ehmYvvd+9vv8d3gFkf4hcA5u47Ci/rtqn/xcsn6gTm+FZe9aHlh/Aho37qcuud80K1nwqnfmc/GQ3fuiDAhKHkeLB7PL+8C8W0Qn66CZuHODv+ybPvmh9nzCxCxPaoyCPxKT2YJi6+bmZLQUJ/kql6img8XwITWUrdU7/Ay2e5o6Mkcrs9mo9E5dZ3eed3tdF3T6ho12+66rtkz2kav52+bzJrFHsVOzCZU2VItd102XxMkc48DCyHVl3EmOx3XvkD0scCVgA3kI4gZh1Es27Np2ulpcoqX4ZQuzNOVuXLs58brom5rletY/GA/0vZEQFpuynapKQ+A0ISC6tyqsLmsbC5kMBZ4mYnIrC5xlUEme3uq2qxnOY0a4nSeRKCoonkcZhFUk1mShwbx9b+lY8Jz6aA7yp/bp47tf9vGQOqEVClw5cs5yDzCgelibh354HD94BTawrezkKqXJQMqUkrWTMqf3utEFUhRJH6/PbzZki50/+LuU2f4ZP4jQP//Ash8fLyJvogJ2k9HYShc0h2z29VBDiHZtlrbYlpgs7qoZstllteP49golfBIJRIZFhoCyWRjfRvFv4ChAgUdNcUK4nvGC3mZYiZmbCiwgLms90p+PGJtGQJXa0sgX+rq2J2oZFKGTsBKHJJ1IrlyKcZfbmXEI0pPim/k32uchu8ZO4C1Y0f6KbcWQdlUndQEe/ukLkgsYansvXG6C34I4JDxsrAIcsFFyIJ6zgR8/qWimmpTw4TEGROBr+WC3Uaf8xRvCXjvSh9g8llSLJf0v7dLneYlQECupJzm+GpH8NQTYNOdYbExuj8v6p2OX3Nc3+9ZpXlh+r5dBKXErvVB/FGyE6f9Gm/9AQ==</con:value></con:property><con:property><con:name>SAMLBAU1_2</con:name><con:value>nVbbcuI4EP0VyvM4ZXzBDuAKVBFMZj0hJAGWXF5SQm6wJkZyLJnLfP1KBhzMkCy7Ty61W6dPX3SkS44Wse11OIdUEEYr60VMuZdbW1qWUo8hTrhH0QK4J7A36tz2Pbtqemi/RasEfkt7DXFjiut1R4cQY92xG0hvWPWpjtwLy52a04Zrg3TlPIOAcoGoaGm2abm66ei2NbZMz7I8y6w6F40XrTKBlEts6VI1tR2pNW9pkRCJZxir1aq6qlVZOjds07SMp9v+CEewQFr7cptRHiht7/xxNQQMcYyrmC2MS6Pkcxlyb0TmFIkshV2s8LNYpmE2DekTcjL/phV7IQzojOXLLqKMEoxi8hup+tyCiFhY6cRzlhIRLT5NwjIVsA5rrGPLod80o0ztTKASw5QjnUfI2mENYQYpUAyVv4dBS/t2XtfyreMUUT5j6YKXl/+ND9AlxCyBUOf7tHbUzgc8Uan2JWAvoDjOOFnCQA1rgjDwXTcBnw9VuU9hRtZ9wuWArrliZxzSO1puq+GTOXDxfxp00JwtyATFGbTN1bh/666X42b3e/LybF88ZOKGB1n/irdyAofOuaFo7XZ5NJTFEG13iHR1sRh3B9Hjxrjq1ZJ0YE9C9yfzf100BmS+YXe3Tfb888lwvg+/R+N+jQ/Gfp8l5PfPZGNKQs9XT/O/atebsPbw9mYPg9EkfX5ko6T2Ysd3v+gKYOZsYhjO1/HTw2za+zFZ11Bw4z/cQLCJpgO/0ehNfadj1SeJw0XPXpDgvtd5//HSDJP0YTJZirv549sgYK0inQP+Zdv+zI+y6S/AYr9UYxD4lWvZJSS+FjNlIaE+y129RIkPF0CF1la7lHZ4mZQ7Enqyh9u15dQ6Zr1b75lXdbfR9XumWzPdZtO6Njs9t9vbi8yWxRHFLqMzomIpyd2OzdcE8cLjQENI9SXLpNJx7QtEHwlUCehQHgJGOYyZlGfATYHI3GXuilhRFHJXhFhGi7TKgIk7epd2ZgLSsibXSpo8BEwSAkq41VxzOdhcyFq8o2UmYqu6RFUKmZT2VKmsZzsN1+BkkcSgmBoLFmYxVJMoyStj8O3X1hHmubXf74zuX7ujVzs/dJ+md/xvXwnpExLlwFVKVyC7CSfuGHOfzyd520d30R6+k4VEnS9ZVpESvGVS/vUxLWpMilH5SGzPvNhwbCiBG8d5FfHCJcHF2BeXt9R0qQLtfXPekVV9r2bLZZb3w3FqRirhDZWpYdrGCHAmdWozZm9AjQLFOOtSKIgfBS/sZYqZiOhIIAELOT+VfHnGK2AEXL0CAjn463OfGKWQsnQC1uKUrRvLF4xi/OUjB3tY+UnzvfysWBp+dOwE1kEcmad8BAhC52qlLoTNJ+OBmYQlUspYegh+CuBU8LKxKHLBRciBmmYCPv9TURrV0hDGLKMi8LXccKibOU+xScD7cPoDJpfm4q1G/v2xppN8BLB8F0r/HF9duZ46AnR+oL27oKfk17/23a/kt8yu/Yf5T8tBnY5nvP0P</con:value></con:property><con:property><con:name>SAMLBAU1_3</con:name><con:value>nVZdc9o6EP0rjPvYMbKxgeAJzBATWprQ0JCSNi8ZIa+NEls2lszXr7+SAQcTksu9Tx6tV7tnd4+OdMlxFNacLueQChqzyioKGXdya1vLUubEmFPuMBwBdwRxxt3hrVOrGg7eb9Eqg15be7YbltmAaUM3bauh257v69i0pzo0/enUrrWmxG5IV84zGDAuMBNtrWaYdd2w9Zr5YBqOWXOMVtU2W09aZQIpl7GlS9XQdqBWvK3NhEgchJbLZXVpVeM0QDXDMNGf4e2YzCDCWudyW1GeKO3s/EnVAwJhSKokjtAlKvlcetwZ04BhkaWwy+V9lMtARgtJH4/T4ItW7AVvwPw4X7qYxYwSHNINVv0ZgpjFXqUbBnFKxSz6sAjTUIF1WBGdmDb7oqEytDMDlRCmHOt8hs1drHvwIQVGoPL7ftDWvpw3tXzrQ4oZ9+M04uXlf8MDbAFhnICn831ZO2jnBzzRqc4lEGfASJhxuoCfiqwJJsB30wRyfqjKKAWfrm4plwRdcYUOHcI7Wm670aMBcPF/BnQwnG2QCQ4z6NzB7TJt0VFwNx6O2H3/cWUFWX/VSlbddg7g0Dk3FKPdLo9IWZBou+N1NZ0Kd+2/JDec343q41o4SV3TDZr9m8H3r4vJvMFeZ0/f/Ee0+dUd3kx+fvvlvmSphftXZsR/fbO/Pgb234Qlw5v17/B29EDWd9+/W94TB3+yIVbzx9+boWtFRvDKemb61Fpai3kXPfIlsm7ureTHxpi4rd4jabFoGfPAX8ztECVh/cefl41p9/vJ+rVbR49jo12Uc4C/bNuf+XE2fQEi9ktFg0Gv0pdTwuJzMVMW6ul+7uokSny4ACa0jtqltMPJpNxRz5Ez3K7lgekaTbd5bVw16xdu79qoW0a91TL7Rve67l7vRWaL4giiGzOfqlxKcre0+RwgiRwOzINUX8SZVDqufRKxhwWuDNi9PAQx4/AQS3nebOpg4WyTzLOGOZ0lr3Ah8KwJUpN/xuKO3aVdX0Ba1mSrpMn3QGhCQQm34jWXxOZC9mKOF5kIzeoCVxlkUtpTpbJOzb6oI06jJASFFEWxl4VQTWZJ3hnEt9+ajgnPrb3b7nj07I6fa/mh+7C843/7TkgfjyoHrkq6AjlNeHfHmE59X8+7uhsn76J9+G7mUXW+ZFtFSskWSfnXG1sUTQqqvBW2R15sODaUgqPjuop83oKSgvbF5S01XapAZz+cOTar82q2WGT5PGzbQqkMj1RHkFFDYyCZ1Kn1Q/wKDBVR0FmXQgH8KHlhL0PMxIyNBRYQSf5U8uUZr4AxcPUKGEjir859YpRSytYJWIlTNjeULxiF+NNHDnGI8pPmkfws49R7m9iJWAd5ZJ3yESAoC9RKXQjrD+hBYhmWSimL08PgpwKcSl42Fk0usAhJqGkm4OM/FaVRbQ0TEmdMDHpabjjUzRynWCfgvDm9C5NLc/FWo//+WNNpTgEC8oXHaR5fXbmOOgIsONDeXdJT8tvr9+qfyW8ZXeed+b3loE/HHO/8Aw==</con:value></con:property><con:property><con:name>SAMLBAU2_1</con:name><con:value>pVZtc9o4EP7eX+FxP3aMLTDEeAIzLobWB+QNkubypSPkBZSzZWPJhvTXn2RiAoTk0t4MM4zWq91nX/TsnnMcR3XX4xwyQROmBX5H/9kg7TOMHWQ4FiDDnjdmBrZbjtEMbdRAyMEz1NC1gPMcAsYFZqKj1y1kG1bLqNenqO7aDbfh1Jqo+aBrd5BxaVqq1Cxd28QR427ptqPnGXMTzCl3GY6Bu4K4E288cqWmiytMevd8i7J0mHWXQqSuaZJaCASiiNRIEpvn5oHOecjdCV0wLPIMnn2GvKM/312v17V1o5ZkC7NuWZZptU2pE3K6+Kx3P1WXIQzYPNmee5gljBIc0V9YgRqDWCah5kWLJKNiGb9hGpnIUqYN2BCDIJt91s0XByW6D1o6AJlxbPAlRpWxG5hDBoyAdnsTdPTPH6vg9u40w4zPkyzmR+ffgwSsgChJITR4FVmF7uMWT6Srew7EDRiJck4LuFBtkmICXLvKYE43I8pl84VcK8uvbbj80arLgPxOWc7NfawSunkiOz5dABd/UrP9em2t3OEoh67ThOgyTmcBGT6M283r+W18B84Ie+Nxp4Swr7wFtSv38/m4WXe99Xzpqb6eeZfONUobv/wzCStj9cn1yEPm2F9GK9L6G1b2fZo1A5EHD5uL/sCJw1uBAfIvI+vL5bfhj1uz1Uy+s83gU88ZTiftx7+mcD8NbtLlqjB/fDfxdHPF8tWAD4f9YTvNR9+u1498nYxu08f+/H4czdN+fegsWp59Z1rLM7S6QgX+9MDb2CMozi6ajdQXV9+zoPMS034Mh8KKEib57BGIqI6qPQJfG8h6YfE+vSgJDY15qeqmiqO4ACb0rrqlqMXNJQHR0JXF3J4HvVbP8wd9x7db7YY36Fu2hQaWZzXbbRsNvlYctEVxBLGXsDlVvhTLbvvnfYAkdjmwEDKjSHKyBK6/Y9HHAmsBu5GPI2EcpolkcYTZU+6Q2C6aqEDr4qm1OuP/xLM817WLRFyyy8ybC8gOubt5wN03QGhKQRG86nAuW5wLmYwVLnIRoVqBawxyOQIyxcJu3XaaJqdxGoGCasZJmEdQS5dpmRqTb//rBia8lN70p+XLezOw429VDqROSJUCV7F8BVlHODGE6lUgrwJunhxWlXkvD6l6YDKhIqNki+Tw00ufqAbZNYk/8iZXFeid7m/c/dmb/ER/aGD0fw3Iery+ab6TE/O4HDtHYUH33FbDXM4nyV7dqplWuLaq5UWRl+1zppg5k+ZNSdDInADJJb0+TZN/gJk7E+aHptsO9ZHnnfwQXy6WbCKwgFg2u1YeP7DaTICr1SaQz3Tz0b3pwKXMm4CNOCXrRXIDUojfXZKIS5SeFF/Jv3WShS/lOmFrz4+MU+4zgrKFOqk59vRGU5BEmqWSeJNs3/gpA6ecHwp3Sd5hEbKbZrmAt79oilE7OiYkyZkIfL0U7LN8iVM8peC+KL0yU06S59Vgw99cDe7Ho4nk2xjrO13638oGLduFgK42kBJLR9/ITVc6Z4u9qfIM8MRgsfp+32s4vdbhYOn5uwQeRNJ9JX4t2cvp8Xvo/gs=</con:value></con:property><con:property><con:name>SAMLBAU2_2</con:name><con:value>nVZdb+I6EH3vr4jSxyrkgxBIVJBYUtq00A/S9u72pTKOA94GG2wH6P76a4cmBUp7u1dCQp6MZ87MHB/7lINZ5gRdzhETmBItCtv6s2ulVj2tt4xxM/UN1/ccw089y/A86NnAH/utsaVrEec5iggXgIi27li2a1ie4Tj3thO4bmC1ao2686Rrj4hxGVq61OSu9SwjPCjStvWckYACjnlAwAzxQMAg7g4HgfQMQIlJ75xuUBYJWWcqxDwwTVhLEERZBmuQzsxTc8fnNOFBjCcEiJyht5wJb+tve1erVW1Vr1E2MR3LskzLN6VPwvHkWO8clZtREpGUbtY9QCjBEGT4D1CghkhMaaJ1swllWExnn4S2TdtSoQ20hga0XXKsm+8JCnTfjLQDknFg8Cmwy2AjlCKGCETawyhq68ffm+Bm7z0DhKeUzfje+u8gIbJEGZ2jxOBlZSW670c80K7OKYJBRGCWc7xE14omcwAR124ZSvF6gLkkX8K1YvzamssfLlmG4N+M5dTcxiqhmwe6E+IJ4uL/zGx7XpsojyDLUefyynRiMGhMcvg7WzvMomHSuhg81S8f2gWEbecNqGrcb+t9slbcets0QFa/8eRd3PPL5Sivn4Ss5z+0ltj90ePn/Xi1dh/rP29SJ+vRm18LP+rhcHJ565DFXXyd30UTh1rj/sP0vBFPx0f1JbxsXL5cmf0uH4ajfvI6XE1b/vik0XCZeRJl3sltcz7Ic8+ZnjEr5/TiNQJD/9ZfDD2TvHgXbIFvXoZP4Rgcmezcv/qHCtj/he8ez+no7KX9XtN2DbvGUhLifPwbQVEuFT2iUOvLeQHxtbwoC06MtHAN5kqjuEBE6B21S0lLkEsBwkkgh7lZ93terxueNZtdu+k6VuvMci27b3Wthu+7ds8vNWiDYg9ij5IUq1xKZTf8+RognAUckQQxY0lzOEVc/yJiCATQIjKSh4MSju6pVPGETlMP1ukq4e58gebjzF6nf5CuXVNxQ25YNxWI7Qp3Y0e4RwjiOUZK3RW9ueQ3F7ITC7DMRWbXlqBGUC71nykJDhy31TA5ns0zpHCaM5rkGarNp/OiLybf/DsGgLywDgbd+Pa5Fz87xen7tLj9b2UfpE+ClQNXJf1Acpbow0VUDxplPZ/UXd+7sMrw3TzB6pDJpgqG4QbJ7qd3riiSVER5L6xEXm3YN+wEN/frqvIlSwwr0le3tRR7KQWdcjgLUFvU8uUyL8bRVDLHZHhTqp1txgjmUqte7+kLImYVwvzWVVGh3stc2Xfx5WJKYgEEmknyaMXyG++EGHH1Togk59fffYTspJR9E2gtDtl6mXxOKMRfvjhgAJWfNN/KvxVlyfu4DsTayiPrlI8DgclErdSl8PoJNyCVYbFUMcq2gx8KcCj5rrFqcoVFSDaNc4E+/6IpeWrrAEKaExGFemHYlswCp3ido+Dd6UOYQpbf7tk1//Se/TkcxFK8ZkCvfPF/Oxu4oAuUYiX9CyxtfS2fjTI5mWxJ9BvAAyr9w+06Yavf9HZVOmxUDdyppPPB/NGy1dP989D5Fw==</con:value></con:property><con:property><con:name>SAMLBAU2_3</con:name><con:value>nVZbb+I6EH7vr4jSxwpyIdyigsSldGHpjbC97Etl7CFxNzgQO4GeX3/s0KRAaU/3SEjIk/HMNzOfP/uco0Voux3OIRY0Ytqw39Kfm6jerJmVegmc2azkOGathJp1u4Tqjj2vVBp2pdrUtSHnCQwZF4iJlm6bllOSjrY9tWzXcVzHLFedxm9du4eYy9DSpWzq2mYRMu5maVt6EjM3Qpxyl6EFcFdg1+tcjV3p6aIck94+36LMEsbtQIilaxi4TABDGOIyjhbGubHnc06461GfIZHE8JaT8Jb+tne9XpfXlXIU+4ZtmqZhNg3pQzj1T/X2Sb4ZyJDNo+26h1jEKEYh/QcpUFcggohondCPYiqCxSehLcMyVegSbHAJWw471Y33BBm6b0baAxlzVOIBsvJgE5hDDAyD9msybOmn35vgdu80RozPo3jBD9Z/BwlYCmG0BFLieWU5uu9HPNKu9jlgd8hwmHCawrWiyRJh4NptDHO6GVMuyUe4lo1f23D5oznLAP/NWM6NXawSunGkO33qAxf/Z2a789pGuUdhAm2/WpukT7h2H14vL2v3F7c3wc/Rj+rZ7/iulUHYdd6CKsb9tj4ka8Gtt02zyuOD1xzcDbrjbr3nrD0ycKbkyTtrNMVE/EwHXS8azhujoDPoptNwfLZq9ur3cWBfCe/PqEpWjxMPbmB0X+eVk3X36clwrMamP6IXXmrOX5JeI53aRrDq+tVXq+b4U9u2TX/gjF/IZdB9gF+PG372cEOm69Hsx619Z5neajW9vD47GfMZJrdxPGKb0O+Hf3DktN5r2q1h35hLgpfMXgCLfKnoMexrAzkvJL6WF2WhpDTPXN2l0igugAm9rXYpaXETKUCUuHKY2/WgV+t1+hf1eseSx8hsXJiOaQ3MjlltNh2r18w1aIviAGIvYnOqcimV3fLna4B44XJgBOJSGiU4AK5/EbGPBNKGbCIPR8Q4TCOp4taSWlICOHkJ/DmvmBVCbeI4jUTXriNxw27izlxAvC/d1T3pngCmSwpK3xXBuWQ4F7IXK5QmIrTKKSozSOQNECsRdm2nUTU4XSxDUEiNRUSSEMrLYJl1xuDbfylDmGfW/rjj3T73vGc7O3+flnf4Le+E9CFUOXBVUhfkNOHIVVTJ6/lQd/XolZWH7ySEqmMm2ypiirdI9j+9s0XRpKDKe2E58mLDoWEvuHFYV5GPpBQXtC/uayn3Ugza+XBWqLwqJ2maZOOoK6GLZXhD6p1leIATqVav0+gPMKMIYXzrsihQH2Qu7Pv4EhEwTyABC0keLVt+46XgAVcvhaFk/ea7z5C9lLJvAjbimK0XygeFQvzlmwO7WPlJ8638W0cxeR/XkVg7eWSd8nkgKPPVSl0Lr59wA0cyLJU6FsW7wY8FOJZ831g0ucAiJJtmiYDPv2hKoFo6wjhKmBj29cywK5oZTvG6BPfd6UOYTJjfbtoN//Smfbwae1K+FkgvfOl/O5doRhcMurrQMywtfSMfjjI583dE+g3gEZ3uOh273xjUa/s63a8WDdyrpP3B/NGy09PD89D+Fw==</con:value></con:property><con:property><con:name>SAMLFAU1_1</con:name><con:value>pVZZc+I4EP4rlOdxy/jkcgWqCE6yJFwDhE3yklLkBivYMrZkjvn1KxlwgJAsM/vkUrv19deHuvuKoTAwnSZjkHAS0cI6DChzMmldSRPqRIgR5lAUAnM4dkbNbscxi7qD9leUQtutK6+mjS3Lq5mq96Zbqm3WbLVaK9sqwNTQddPTEZSFKmMptCnjiPK6YupGSdXLqlEaG7qj1xyzUqxY+otSmEDCBLZQKerKjtSa1RWf84WjaavVqriyilEy00xdN7SnbmeEfQiR0rjaepQZSho7fVz0AEMQ4CKOQu1KO9K58pgzIjOKeJrAzpb3lS1d02ua0PEYmf1Q8rvgtek0yo4tRCNKMArILyTj0wXuR16hGcyihHA//NIJQ5fAKqyxig2b/lC0Y2oXAh0xTBhSmY+MHdYQppAAxVB4HLbryo/LspZdHSeIsmmUhOz4+Ht8gC4hiBbgqWzv1o7a5YBnItW4Auy0KQ5SRpbQk8W6QBjYLpuAL4cqDBKYknWHMFGgaybZaYf0To7baLhkBoz/SYIOkrMFmaAghcacJWgV1Co0md/5oa9Ngm6PuA8W6rF6RuBQORPkqd0eT4oyL6LtjY73GOP3N+vlftZ5fAo74xd7UR3140HnLUD3BrBB8rJAdtDv6B73SradtvVhN7Sin2Bv4rt5KS7d60Gt299E3YdaYJej5+S2+u6bnb9g4b7H7VJcm9yh500I/mTU7b+vhnML2v9s/OrfD60KMwaz9ST+6XX91lgft64feuvn50rP7D/dT+IXG02v2f2gs0z7Q7ueu3PA/1i2f/Oj9O0dMN8fZRm03cKtyBLi3zczKSGeOs1UnYVsPowD5UpD3pK9w0lFuyOeI3K4PRvVaqvcarklu3bj3prmjV6yrJtazbjVm4brWvsms2VxQrEV0SmRtmTL3ZbN9wRx6DCgHiTqMkpFp2PKN4gu4qjQpkPxCCLKYByJ9oxwKZyWpmnZq74b8Wz+xlerSjmkWCn0It6n/aQ55ZAc92TrqCcPAZMFAdm4ZV0zUdiMi1jEaJnywCguUZFCKlp7IrusY9rVksZIuAhAMtXCyEsDKC78RRYZjW2/poowy6TDm3H22r706/TfPgRCxyNSgUlfrkGkEc4MF2PvyCeHy2eH0B6+mXpEPiwRT54QvGVy/OujTGR95DXidpqjwZ50rvsbd19bo1fjDwE6/xdA5OPzTe2bmGin6cgNeUtyYHa/OYgZJLpWY19MMTKKcTFdLtOsfmzb0hIBr8lEarqpjQCnoq9uxtEcqJajaBcNsZz4ifFcfkwx5T4dccQhFPVeyI4XbC0jYHJraYuHur50JToyKULHYc3PyVqB2Lgk42+XMuxgqSfEA/FZRYn3kbEzWAd2hJ9iaeGEzuRJDrDNF3WBIwFLROuNkkPwcwDnjB8L8yDnXLgoqLeUw9d/CrKn1hWEcZRS3naVTHDY5zOefLMA50PpE0w2SvLdkvz3cqmSrAQwiI2UkQxfrgiOfAJ0djArdka/GBfud+PimF3jk/iz5CBOpzXe+Bc=</con:value></con:property><con:property><con:name>SAMLFAU1_2</con:name><con:value>pVZtc9o4EP4rjPvxxvgFm4AnMAOBtNxAQzFHc/nSkeU1KDGSY8kY+PUnGXCBkBxtP3m0Xu0+u/tod285Wsa21+EcUkEYrayXMeVeIW1pWUo9hjjhHkVL4J7Ant8ZDT27anrocEWrDHot7YdrB9FNGDi61XAC3bHcSG9aYOoRakIDm0GIarZU5TyDAeUCUdHSbNNydbOuW+7UbHpuzbNvqg3XedIqM0i5tC1Vqqa2B7XmLW0hROIZRp7n1bxWZencsE3TMh5HQx8vYIm09u0uosJR2t7r42oIGOIYVzFbGrfGic5tyD2fzCkSWQp7X+F7vkzDbBpSJ+Rk/kkr70I4oBErjneIMkowiskWqfyMQCxYWOnEc5YSsVi+G4RlKsM6rLGOLYd+0oxTaFcaOkGYcqTzBbL2tiYQQQoUQ+WfyaClfbquasXVaYooj1i65KfHX8MDdAUxSyDU+SGsPbTrDV7IVPsWsDegOM44WcFXRdYEYeD7agK+3lRlnEJE1kPCJUHXXKEzjuGdHXfZ6JE5cPE7BToqzs7IDMUZtCf1Vytga/wwbbLMRBzPg8W/r/nn2mTUKgAcKxeCsrS74xkpSxLtboQE+899fwLDYIK3q2YyHeUP3W7g03z63L83No2+k0dO8jIZp/PVYs2jbTL3p7HVdZ82DXeweOwH7iCAv1C/ud3Yebc2m4/zhbhzcjY26o9BDbFhJG4A9cONj2knfpx9yTrfn9CXWfxtJNbf7zcj+3X7YIPd7M7+Xhk1IuxvTnYjws/mLIu/xPHT9Hn8TZitMpwj/Keyw5v3s+AZsDgcFQ0Gvcq9rBISHzczJSGhHhWqXqKaDxdAhdZWt1Tv8DLZ7kjoyRruzlajcWc16v163er2+06tb7q1Wq/ZtO7NTsPtdw9NZofiDOIdoxFRvlTL3dHmY4B46XGgIaT6imWy03HtA4s9JFBlQCfyETDKYcpke7YW6YvLE9vabvOY1DNkv7B8bQuuVb4y8UAf0k4kID3pyZZ90pMngElCQDVuxWsuic2FzMUrWmUitqorVKWQydaeqi7r2U7DNThZJjEopMaShVkM1WSRFJkx+O5r6wjzQjrpT4vX9m5c5/8OKZA6IVEKXMXSBVlGuDBcrEMgbwKuXxxCB/OdLCTqYcl8ipTgHZLTXz9povhRcqQ37PjjA+hS9xfu/rjzf1i/aWD4B86Hf+pc1vLtTeODfBrnpSwdhSty5Pawdcj5JTte+0DEV2RVX6vZapUV3HOcmpFK84YigWHahg84kz15M2UvQI3SinHVACyBnzkv5acQM7GgvkAClvKtVIrjFRuPD1xtPAP5yNfXrlMnLmXqBKzFJdldLLc1hfjDhQ57WOlJ8Vh+cpaGPyt2wdaRHxmnXHgEoXN1UsNv8w4vMJNmiWzbLD02fsnAJeenwjLJJRYhCRVkAt7/U1H9uKUhjFlGxaCnFYLjGVHgFJsEvJ9Kb8wUY6jcS8n/L6Y6KSiAQW6znBT21XrhqSdA50dzZu/0nVHT+WjUnKJrvxG/lRzl6Zzj7f8A</con:value></con:property><con:property><con:name>SAMLFAU1_3</con:name><con:value>nVZdc9o6EP0rjPuYMZY/KMETmKFAGreQkkBa4KWjyItRa8vGkg3Jr7+SCQ4mJJd7nzxar3bP7h4d6YrjKLTcLueQChqz2jYKGXcLa1vLUubGmFPuMhwBdwVxJ93R0LXqyMX7LVrN67e131bjsUkcBDpxYKk7+PJSb7WWtt40/UffajhNGyHpynkGHuMCM9HWLGQ2dOToljk1kWs2XPNzvdlqLrTaT0i5jC1d6nLXDtSWt7WVEIlrGJvNpr6x63EaGBZCpjEbDSdkBRHWOle7iopEaefFn9R9IBCGpE7iyLgyKj5XPncnNGBYZCm85PLfy4UM1DKkj89p8Ekr94LvsWVcLHuYxYwSHNJnrPozArGK/Vo3DOKUilX0bhEmUoF12BKdmA77pBlVaGcGqiBMOdb5Cpsvse5hCSkwArWHe6+tfTpvasXWaYoZX8ZpxKvL/4YHWA5hnICv831ZL9DOD3iiU50rIK7HSJhxmsOtImuCCfCXaQI5P1RtnMKSboeUS4JuuUJnHMI7Wu660acBcPF/BnQwnF2QnzjMoJOM8kXvyz1bDVi0uMut+yG+mQ1//bn76rQLAIfOhaEc7W55RMqSRLsd8+WM2Pzh+2LOvo4a62d7woOLfLgYzL1gQyaZN+zNe1+2ubW57c9HwXTQnY1vZui5Hy0WF84oQ7er1a8sGX+7Dtkva/sQWdO7R5iiOepfPg/NQXLxfexFLbQNfv6YRon3cNvyv96tLwarh2/RmDyiSXOKBfs7uxGBxRbPjciei9lFc31j58Rbzixvtfhsr9fJOmiX5Rzgr9r2Z36SPf4BIvZLRQOvX7uWU8LiYzFTFurry8LVTZT4cAFMaB21S2mHm0m5o74rZ7hbm47dtQfXTRP1Lce2LweoYaNmq2Veo2530OrtRWaH4ghiL2ZLqnIpyd3R5mOAJHI5MB9SPY8zqXRc+yBiHwtc89i9PAQx4zCNpTybEIVA0ignrPEkid5q+Q2fOxtH6vdtLH6wH2l3KSCtirJdEeV7IDShoJRbEZtLZnMhm7HGeSZCs57jOoNManuqZNa1nMuGwWmUhKCgGlHsZyHUk1VStMbgu6+lY8ILa3/YnYx/9ya/reLUvVvf8b99K6SPT5UDVyV9ATlOOHHJoH09b+r+fPIy2ofvZj5VB0z2VaSU7JBUf73SRfGk5MprYXvk5YZjQyW4cVxXmc/PKSl5X97eUtSlDHT2w1ljs76uZ3meFfNwHNtIZXhDdcRAljEBkkmheprGf4EZZRTjrFuhBH6UvLRXIWZixSYCC4gkf2rF8oxnwAS4egZ4kvnbc98YlZSydQK24pStF8onjEL84SuHuET5SfNYfjZx6r9O7ESsgzyyTvkKEJQFaqVuhKd36EFiGZZKLYvTw+CnApxKXjWWTS6xCEmox0zA+39qSqTaGiYkzpjw+lphOBTOAqd4SsB9dXoTptDm8rFG//21ptOCAgTkE4/TIr66c111BFhwIL4vSd/RX/SR/lbRdd6Y31oO+nTM8c4/</con:value></con:property><con:property><con:name>SAMLFAU2_1</con:name><con:value>pVZbb+I6EP4rKH1chdwpRAWJEnrKlktPQ9m2L5VxBnBJHBo7AfbXrx0gC5T2sHskJOTJ+JtvLp6ZK4ai0HSbjEHCSUxLqyikzM2ldSVNqBsjRphLUQTM5dj1m72ua5Z1F+2uKKWOV1denVpwWcG1S7VmVR3VHju2igxzrFpobBsTqBoOVIQqYyl0KOOI8rpi6oaj6hXVcIaG7oqf45Qts/qilEaQMIEtVMq6siW1YnVlxvnC1bTlclleWuU4mWqmrhvaU6/r4xlESGlcbTzKDSWNrT4uB4AhDHEZx5F2pR3oXAXM9cmUIp4msLUVfGZL1/SaJnQCRqYXSnEXgg6dxPmxhWhMCUYh+YlkfHrAZ3FQaobTOCF8Fn3qhKFLYBVWWMWGTS8U7ZDamUAHDBOGVDZDxhbrASaQAMVQenzo1JWL87KWXx0miLJJnETs8PhnfIBmEMYLCFS2c2tL7XzAE5FqXAF2OxSHKSMZ9GWxLhAGts0m4POhSvcJTMiqS5go0BWT7LR9ekfHTTQ8MgXG/yZBe8nZgIxQmELDXvd6329u+vOnx8GITK2wmXy/v+5323NczwnsK+eCIrWb41FRFkW0ubF4RwPPfw6na27Om53FrREt+9UR/7Zy5p32U/tllA7821mUmj+Xwe3jLDbumTF669maY09uL+HNz1Z4/UaeW1b7n+fhnWP2X2I+H1gpb107s3/XD5e3tdXoWtd+LJeD7D5cRdx8toedWaiN3+9u7jLtOpw/1eJKOPL7P3re+1jvL4Lg7tbuvkyrs2v87Rks4/Hl8bFeuLPH/1C2e/N+On4DzHdHWQYdr3QjsoT4181MSkigTnJVdyGbD+NAudKQt2TvcFPR7kjgihxuzka12qp4tuN4uu7dmHZbdyyrXasZN3pTd+zKrslsWBxRbMV0QqQt2XI3ZfM1QRy5DGgAiZrFqeh0TPkC0UMclTr0QTyCmDIYxqI9G+ZPQsZmtrQce+lkuh1Wp2BG4VQp9WM+oIOkOeGQHPZk66AnPwAmCwKyccu6ZqKwGRexeEdZykOjnKEyhVS09kR2Wde0q47GSLQIQTLVojhIQygvZos8Mhrb/JsqwiyXPrSH+Wv71K/jb7sQCJ2ASAUmfbkGkUY4MVzsnSMfHK6cHEI7+GYaEPmwRDx5QvCGyeGn32Ui66OoEa/b9O93pAvdP7j72vJfjb8E6P5fAJGPjze1L2KiHaejMBRkZM/sbnMQM0h0rcaumN6RUX4vp1mW5vVj25aWCHhNJlLTTc0HnIq+uh7Gc6BagaKdNcQK4kfGC/khxZTPqM8Rh0jUeyk/nrG1+MDk1tIRD3V17kp0YFKEjsOKn5K1QrFxScZfLmXYxVJPiO/F3zJOgt8ZO4G1Z0f4KZYWTuhUnuQAW39SFzgWsES03jjZBz8FcMr4obAIcsGFi4Iapxw+/1KSPbWuIIzjlPKOp+SC/T6f8+TrBbi/lT7A5KOk2C3Jfy+XKslLAIPYSBnJ8eWK4MonQKd7s2Jr9MO4aLU8x655YlyY++PC8DyrCMoBu8YH8UfJXpyOa7zxCw==</con:value></con:property><con:property><con:name>SAMLFAU2_2</con:name><con:value>nVZdc9o4FP0rjPvYMZK/SvAEZgiE1rukIZikaV4yiiyDElsCSwaTX7+SAQfTJMvuk0fXV+ee+6EjnQuUJrbfE4JkknLWKNKECb+0dow8Yz5HggqfoZQIX2I/7F2NfLsJfbTfYjSCQcd4bLkwbsMnbGKHQNNtO5GJHATN2PVIq936ZjtOrFyFyEnAhERMdgwbWp4JXdO2phb0Lcu37abtwAejcUcyobCVSxMaO1KF6BhzKRc+AOv1url2mjybARtCC9xfjUI8JykyuufbjMpAWXfnj5sRwSRJcBPzFJyDms95JPyQzhiSeUZ2saKPYkEA20D5RILOvhjVXhIFLOblso8YZxSjhL4iXZ8rIuc8avSSGc+onKcfJmFBDWySQtXQctkXA9SpnQhUY5gJZIo5snZYExKTjDBMGreToGN8Oa1r5dZphpiIeZaK+vK/8SFsRRK+IJEp9mntqJ0O+E6luucE+wHDSS7oivzUw7pAmIhdNwk+HaoxzkhMixEVakALodmBQ3pHy201BnRGhPw/DTpozhbkDiU56RLGgpf01rkurBcQ31wA7/v9jUxuhhc3nZLAoXNpqFq7XR4NZTVE2x3FL/uynfbg3AvXxXjVBj9m3wDmwpPjb+083bx+5avB67w1tNfz5dRbvf7id3ORDTevT9mDLeNg+TKZLv6G923I03g4/B6d8dnw+9eHyZDdSovcPkd34x9Xv34sC7s/wptRPPudpX+N7yfDGXVHz9PbcHk1XQeWdK6vXy8303saFklLNW9MJ6sQLOgtKQKY/haiU6VzwL9u25/5MH96Jljul3oMgkFjqLqE5Odipi00MuPS1V9o8RGSMGl09S6tHX6u5I5Gvurhdm25Tns48Hp9z2t5Zxdnl9BzoNduW0PYg9B29yKzZXFEsc9ZTHUsLbnbsfmcIE59QVhEMnPFc6V0wvgEcYAkagRsog4BZ4JMuZJnawOf3U3RYhC1npfumR1lhbvGrdRo/OTyml1nvViSrK7JTk2TJwTTBSVauPVcCzXYQqpaLNEql4nVXKEmI7mS9kyrrG+7Zx4QNF0kRDMFKY/yhDQX80VZGSC2X9tEWJTW0agXjh/74aNdHroP0zv+t6+E8omodhA6pQuiukneuWOsfT4f5G0f3UV7+F4eUX2+VFllRvGWSf3X27ToMalG5S2xPfNqw7GhBg6O86riRSuKq7GvLm+l6UoFuvvmLJHVXDbz1Sov++G6DsgUPNCZAmiDkOBc6dRmyl8IAxUKOOlSqIgfBa/sdYq5nLNQIklSNT+NcnnCKyAkQr8CAjX4xalPjFpIVTpJCvmerZ+oF4xm/OkjB/tY+ynzWH3WPIveOvYO1kEclad6BEjKZnqlL4TNB+OBuYKlSsp4dgj+HsB7wevGqsgVF6kG6imX5OM/Da1RHQNhzHMmg4FRGg51s+QpNwvivzn9AVNKc/VWo//+WDNpOQKYqBeeoCW+vnJ9fQTY7EB7d0GP5LcHW/3WQGmwd9YfHMrvpde/rIpSY9f9w/yn5aBOxzPe/Qc=</con:value></con:property><con:property><con:name>SAMLFAU2_3</con:name><con:value>nVZtU+I6FP4rTPejU/oCFdsRZmqLuyjqLrh69YsTkxSytklJUl7ur79JgUoRvdz7qZPTk+c85yVPci5AlrpBKATmkjDaWGYpFUFp7RoFpwEDgoiAggyLQMJgHN4MA7dpB2C7xWgM4q7x4rdOW51W69TstM88s91BiQmSBJgQoFfftzs29nzlKkSBB1RIQGXXcG3HM+226Tr3jh04buDazdOW82w0HjAXClu5NG1jQ2opusZUyjywrMVi0Vy0moxPLNe2Heuvm+EYTnEGjN75OqMyEO9t/GETYYjTFDYhy6xzq+ZzjkQwJhMKZMHxJhb6LJZt2b6lfJAgk29GtRejAU1YuYwAZZRAkJK/ga7PDZZThhphOmGcyGn2aRKOrYFNvIQmdNr0m2HVqR0JVGPIBTDFFDgbrBFOMMcU4sbv0aBrfDuua+XWew6oSBjPRH353/hgOscpyzEyxTatDbXjAQ9UqneOYTCgMC0EmeNbPaw5gFhsuonh8VCNnxwnZDkkQg3oUmh21i69veW6GjGZYCH/T4N2mrMGeQBpgXvo6u0RRU/3kvNhm9+0i87bfRqPSJ89dUsCu86loWrterk3lNUQrXdcFovf1/GP2xM7yqyna+v2KcER4s+/Zs8nv2bZ95vMt5L47kb4RWvY53+u7BN4cctCz/Pt7A+LfnXyfkScx+ThcXiFhuHUVwf6apqI7DF5XL0OZ/np0PHzO34yXT0v8dmSg8Ebno5nl3E46l8jeAHexovv16NH6wk5aOnOMzh7G6xQFs1C/weYo5D7Bf0Oz8Julc4O/7pte+bHxesfDOV2qcdgEDcuVZeA/FrMtIUgMyldg1yLj5CYSqOnd2ntCAoldwQFqofrtdNu+ZexF0ae1/HOLs76tteyPd93Lu3Qtt32VmTWLPYoRowmRMfSkrsem68JwiwQmCLMzTkrlNIJ4wvEGEjQGNCROgSMCnzPlDw7U99ewFbaYVxMHNaBqxVnc5KDmdG4ZfKO3vEwkZjXRblVE+URhiQnWCu3HmyhJltIVYwZmBcydZpz0KS4UNrOtcwGrpIUS5AsT7GmamUMFSlu5tO8LI0l1l/XBFCU1ngYjn++ROMXtzx1n+a3/29bCuWDiHYQOqULrNqJD1wyzjafD3mfHryMtvBhgYg+YKqukhO4ZlL/9T4uek6qWXlPbMu82rBvqIFb+3lV8dCcwGruq9tbibqSgd62OTPgNGfNYj4vyn602y2LK3hLV8SyXWuMYaGEanXP3jC1KhTrqFuhIr4XvLLXKRZySscSSJyp+WmUyyOeAWMs9DNgoCZ/eewboxZSlU7ipTxki1L1hNGMv3zlwABqP2X+qT4LxtF7xw5g7cRReapXgCR0olf6Rlh9Mh6QKViitIzxXfBDAIeC141VkSsuUg3UayHx538aWqS6BoCQFVQOYqM07ApnyVOuchy8O32AKbW5eqyRf3+tmaQcAYjVE0+QEl/fuYE+AnSyI76boHv6G9qdqBMrEfbOonhXf/te1K+KUmPX+2D+aNmp0/6M9/4B</con:value></con:property><con:property><con:name>SAMLFULL</con:name><con:value>pVZZc+I4EP4rlOdxy/jkcgWqCE6yJFwDhE3yklLkBivYMrZkjvn1KxlwgJAsM/vkUrv19deHuvuKoTAwnSZjkHAS0cI6DChzMmldSRPqRIgR5lAUAnM4dkbNbscxi7qD9leUQtutK6+mjS3Lq5mq96Zbqm3WbLVaK9sqwNTQddPTEZSFKmMptCnjiPK6YupGSdXLqlEaG7qj1xyzUqxY+otSmEDCBLZQKerKjtSa1RWf84WjaavVqriyilEy00xdN7SnbmeEfQiR0rjaepQZSho7fVz0AEMQ4CKOQu1KO9K58pgzIjOKeJrAzpb3lS1d02ua0PEYmf1Q8rvgtek0yo4tRCNKMArILyTj0wXuR16hGcyihHA//NIJQ5fAKqyxig2b/lC0Y2oXAh0xTBhSmY+MHdYQppAAxVB4HLbryo/LspZdHSeIsmmUhOz4+Ht8gC4hiBbgqWzv1o7a5YBnItW4Auy0KQ5SRpbQk8W6QBjYLpuAL4cqDBKYknWHMFGgaybZaYf0To7baLhkBoz/SYIOkrMFmaAghcacJWgV1Co0md/5oa9Ngm6PuA8W6rF6RuBQORPkqd0eT4oyL6LtjY73GOP3N+vlftZ5fAo74xd7UR3140HnLUD3BrBB8rJAdtDv6B73SradtvVhN7Sin2Bv4rt5KS7d60Gt299E3YdaYJej5+S2+u6bnb9g4b7H7VJcm9yh500I/mTU7b+vhnML2v9s/OrfD60KMwaz9ST+6XX91lgft64feuvn50rP7D/dT+IXG02v2f2gs0z7Q7ueu3PA/1i2f/Oj9O0dMN8fZRm03cKtyBLi3zczKSGeOs1UnYVsPowD5UpD3pK9w0lFuyOeI3K4PRvVaqvcarklu3bj3prmjV6yrJtazbjVm4brWvsms2VxQrEV0SmRtmTL3ZbN9wRx6DCgHiTqMkpFp2PKN4gu4qjQpkPxCCLKYByJ9oxwKZyWpmnZq74b8Wz+xlerSjmkWCn0It6n/aQ55ZAc92TrqCcPAZMFAdm4ZV0zUdiMi1jEaJnywCguUZFCKlp7IrusY9rVksZIuAhAMtXCyEsDKC78RRYZjW2/poowy6TDm3H22r706/TfPgRCxyNSgUlfrkGkEc4MF2PvyCeHy2eH0B6+mXpEPiwRT54QvGVy/OujTGR95DXidpqjwZ50rvsbd19bo1fjDwE6/xdA5OPzTe2bmGin6cgNeUtyYHa/OYgZJLpWY19MMTKKcTFdLtOsfmzb0hIBr8lEarqpjQCnoq9uxtEcqJajaBcNsZz4ifFcfkwx5T4dccQhFPVeyI4XbC0jYHJraYuHur50JToyKULHYc3PyVqB2Lgk42+XMuxgqSfEA/FZRYn3kbEzWAd2hJ9iaeGEzuRJDrDNF3WBIwFLROuNkkPwcwDnjB8L8yDnXLgoqLeUw9d/CrKn1hWEcZRS3naVTHDY5zOefLMA50PpE0w2SvLdkvz3cqmSrAQwiI2UkQxfrgiOfAJ0djArdka/GBfud+PimF3jk/iz5CBOpzXe+Bc=</con:value></con:property><con:property><con:name>SAMLSAU1_1</con:name><con:value>pVZbc9o6EP4rjPvYMb4T7AnMAA7nmEJCME3TvnSELBu1tgySzCW/vpIBFwjJoT1PHq1X33570e7eMpClptdhDFGOc1LbZClhXiltKQUlXg4YZh4BGWIeh17YGQ09s6574HBFqQV+S/numqZuuLqhxhCZqu3MInUWW0C9mVkNp6mjWdRoCFXGChQQxgHhLUXccFS9oRrO1NA93fUcp+427W9K7QlRJrCFSl1X9qQ2rKXMOV94mrZer+trq57TRDN13dCeR8MQzlEGlPbtzqPSEG3v9WE9QhClKazDPNNutROd24h5IU4I4AVFe1vRW7Z0TXc1oRMxnHxQqrsoCkicl8ceIDnBEKT4Bcj4jBCf51GtkyY5xXyevemEoUtgFW2gCg2bfFC0U2pXAp0wpAyobA6MPdYExYgiAlHt8yRoKR+uy1p5dUoBYXFOM3Z6/DM+iKxQmi9QpLKDW3tq1wNeiFT7FkEvIDAtGF6he1msCwAR22cTweuhamOKYrwZYiYKdMMkO+2Y3tlxFw0fJ4jxv0nQUXJ2IE8gLVD743I+/sLNF30UbvXJcsGtL+54+pIHZtIqCRwrl4IqtbvjWVFWRbS7Md50AI1+NgZZc9CPokgrxuuZ3phPBthh9zncDgJ/kwycT5Fz05k+fPz8D33uvpirbow1qxkT94cVJo/dxqeFNR3D2O9nafL4vGb4xnbip9FzaDTWRjzMqEVmI5q6D4PHgPVGSdM2nybdbRM3l5kO+p+N7vDn11nug+29HTz9+23jDM2bBnDJgIaDr863L9He3TP+p7LDmw+L2Q8E+eEoyyDwa32RJcDfb2ZSgiM1LlW9hWw+jCPClba8JXuHV4h2hyNP5HB3NprNXsN17Luea/h9o3OnO5Z157pGX+90el3z0GR2LM4o9nISY2lLttxd2bxPEGYeQyRCVF3lheh0THkH0Qcc1AIyEY8gJwxNc9GejeIm2yytbGGmdmTMTLh2yDZPDIcrtfucP5AH2ok5oqdN2TppyhME8QIj2bllYTNR2YyLYCzBquCpUV+BOkGF6O1UtlnPtJuOxnC2SJGkqmV5VKSovpgvytBobPc1VQBZKZ3cTcvn9qZj5/8OMRA6EZYKTPrSRSKP6MJ0sQ+OvHK4cXEKHeA7RYTlyxIB5RTDHZPTX7/rRBZIVST+sBOOD6Qr3T+4+70Xfjf+EmD4fwFEPl7f1N6JiXaejspQtMJHZg+rgxhCom21D8W0BEZ9WS9Wq6KsH9u2NCrgNZlITTe1EMFCNNbtNP+JiFahaFdNsYr4mfFKfkqx4HMScsBRJuq9Vh6vWFtCxOTaEoiXurl2JzoxKULH0YZfkvVSsXJJxu9uZdCDUk+Ix+Kzzmn0O2MXsI7sCD/F1sIxSeRJTrDtG3UBcwGLRe/N6TH4JYBLxk+FVZArLlwU1Kzg6O0/NdlUWwqAMC8ID3ylFBw3+pIn3y6Q91vpFUw5S6rlEv/3dqnisgQgEispwyW+3BE8+QRIcjQs9kZfzYtez3ds1/f7pnk8Lwzft6qgnLBrvxK/lhzF6bzG278A</con:value></con:property><con:property><con:name>SAMLSAU1_2</con:name><con:value>nVZbU+o6FP4rTH3cU3oX6QgzlYsbRVCKbrcvTkgDjbZJbdKC/PqTFKgUL4dznjpZXfnWty75knMG4sh0PcZQyjEltVUcEeYW1paSpcSlgGHmEhAj5nLo+t7N0DXrugt2W5TaoNtSnmcwOLVnwZlqOTNTtQFyVGAiQw1AMzAgNC19ZgtXxjI0IIwDwluKqRuOqtuqaUwN3TUcVxfIp8aTUntAKRPYwqWuK1tSK9ZSQs4TV9OWy2V9adVputBMXTe0x5uhD0MUA6V9vsmoCJS2t/6wHiCIogjWIY21c63icx4w18cLAniWom2s4LtYuqY3NeETMLw4Ucq9KBiQOS2WHUAowRBEeA1kfW4QD2lQ86IFTTEP42+TMHQJrKIVVKFhkxNFq1I7EqjCMGVAZSEwtlgTNEcpIhDV7ieDlnJyXNeKrdMUEDanacyqy//GB5EcRTRBgcp2aW2pHQ/4RaXa5wi6AwKjjOEcjeSwJgAitu0mgsdD1W5TNMerIWZiQFdMstP26R0sN9Xo4gVi/P80aK85G5AHEGWoffrYdAIr/9MZaqPHUXY3ioZXT0t6v5j/bRUE9p0LQ9nazfJgKMsh2ux48V7X4zifamEy765Cb72+t8nA45l1bWS5MeEgCBf+/S/DiC/s/uSxGROeQDS/vJlfTW6vL2/v/KvGn/wUPiymT6vRU6P/kiTT/sMi0aaW/+suGDdXs/WDP5lev8zW+PUpMtjrxLrAL8H4dy9sst/xIBx17i/ip844WGleRB/w2pv0CVrF+Gp2AS9vJ3r4eP33tVWms8e/atudeT+bvSDId0s5BoNurS+6BPjPYiYtOFDnhaubSPFhHBGutOUuqR1uJuQOB67o4WZt2JanNzqNXlO3nLNOt6c7lu40m0Zf93pOp7cTmQ2LA4odSuZYxpKSuxmbnwnC2GWIBChVc5oJpWPKD4hdwEFtQCbiEFDC0JQKeXZOlzanFhXtAAZPGnGOl84LZQ2lNqJ8TMapN+corWqyVdHkCYI4wUgKt5xrJgabcVGLN5BnPDLqOagTlAlpT6XKuqZ95mgMx0mEJFMtpkEWoXoSJkVlNLb5miqArLAOh55/+9zxn83i0H2b3uG/XSWET4ClA5MpXSDRTfTpjrFdZ5fPN3mbB3fRDt7LAizPlygrTzHcMKn++pgWOSblqHwktmNebjg0VMC1w7zKeEGOYTn25eUtNF2oQHvXnDdg1N/qWZ5nRT9s29JSAa/JTDXd1HwEM6FT71P6iohWomhHXQol8YPgpb1KMeMh8TngKBbzUyuWR7wCfMTkK2AgBn917BOjElKUjqMV/8rWicQLRjL+8ZEDXSj9hPlWfJY0DT469gXWXhyRp3gEcEwWciUvhPdvxgNSAYuFlNF0H/wrgK+CV41lkUsuXAzULOPo+z81qVEtBUBIM8IHXaUw7OtmwZO/J8j9cPoEU0hz+VbD//5YU3ExAhCJFx7DBb68cl15BMhiT3u3QQ/l1+r1G4be1W3LOivkt7GRX6/X7JRFqbBrfzJ/tuzV6XDG2/8A</con:value></con:property><con:property><con:name>SAMLSAU1_3</con:name><con:value>nVZRc9o4EP4rjPtsLBsI4AnMEEgaeiTl4jRN89IR8hrU2JKRZHDy608y4GBCctw9ebRe7X67++mTziVOYs8fSAlCUc5qeRIz6RfWnpUJ5nMsqfQZTkD6ivjB4Gbie3Xk490WqzYe9azfqOOdzcI2sT2C2nazE3btThtFdnfWPGucedGMNCLtKmUGYyYVZqpnecht2ahpe+69i3zX8xGqt7uNJ6v2AELq2NqljqwtqFz2rIVSqe846/W6vm7UuZg7HkKu83gzCcgCEmz1zzcVFYlEf+tP6iEQiGNSJzxxzp2Kz3ko/YDOGVaZgG2u8KNcyEFdR/uEks6/WOVeCMcs4sVyiBlnlOCYvmLTnxtQCx7WBvGcC6oWyYdFuMgEtiEnNnGb7IvlVKGdGKiCUEhsywV2t7HuIAIBjEDtx924Z305bWrF1nuBmYy4SGR1+d/wAFtBzFMIbbkrawvt9IBHOtU/B+KPGYkzSVdwa8iaYgJyO00gp4eqTQVENJ9QqQmaS4PO2Yd3sNx0Y0TnINX/GdDecDZBHnCcQR/HouHdPoz/pPj1eTC9SS7+fA1Wt/zRlb0CwL5zYShHu1kekLIk0WaHwkHEbrtZR6HnWZ7PW+FVeH1GblpzJKe/Vj9ayfX0pssexsE1mjZDt50+6gM5yc/WnJPOq3yk6dPFE47+xtPZ6zfx8oLbVzz5i7HQexK/cOe6E7LJYp1G3xfu3c/OZed58m2o+HXARgmlNHhegYPSnOH2nRe3hz8n18vu60VjNbwVLciaP/iMzL52H17Y106vLGcPf9W2O/NBNvsDRO2WhgbjUe1KTwmrz8XMWGhoR4WrnxrxkQqYsvpml9EOP9NyR0Nfz3CzdpuNAWoP25eojVqd4egStRqo1e26V2hw2Rpe7kRmg+IA4pCziJpcRnI3tPkcIEl8CSwEYa94ppVOWp9EHGGFa2N2pw8BZxLuuZZnNxGL5exZ5arBm5Bny6Vkc8hQ26rdcvWdfReDSIGoanKjosl3QGhKwQi34bXUxJZK92KJV5mK3foK1xlkWtqFUVnfa3ZajqRJGoNB6iQ8zGKop4u06IwjN1/PxkQW1tFkEEx/D4PfXnHoPizv8N+uE9onpMZBmpIuQE8T3t0xrt/a1fOu7rOjd9Eu/CALqTlfuq1KULJBUv31xhZDk5Iqb4XtkJcbDg2V4M5hXWW+cEVJSfvy8taarlWgvxvOErv1ZT1brbJiHs1mwxE6vGM64iDPCYBkWqde7vkzMKeM4px0KZTAD5KX9irETC1YoLCCRPOnVixPeAUEIM0rYKyJn5/6xKik1K1TkKtjtmGsXzAG8aePHOIT46fNU/1ZcxG+TexIrL08uk79CFCUzc3KXAgvH9CDcB2WainjYj/4sQDHkleNZZNLLEoTapYp+PhPzWhUz8KE8Iyp8cgqDPu6WeBULyn4b07vwhTSXL7V6L8/1mxaUICAfuFJWsQ3V65vjgCb72nvNukx+R1djVqfyW8VXf+d+b1lr0+HHO//Aw==</con:value></con:property><con:property><con:name>SAMLSAU2_1</con:name><con:value>pVZtc6I6FP4rDv24gwFERaY6Y6Wd5VZbV922u186aYiQLSRIgmJ//U1QWbW21937icnh5DnPeck555LDJLbcPuc4E4TRWpHElLultKvlGXUZ5IS7FCaYuwK50/5o6Fp1w4W7K1rN97rac+BYLcNw5rozN5Fut1pz/eUFmXoDB46DLGQ5TlOqcp5jn3IBqehqlmE2daOlm82Zabim6Zqdescwf2q1B5xxiS1V6oa2JVXwrhYJkboArFar+qpRZ1kILMMwwdNoOEURTqDWu9x4VBrKelt9VA8wwnGM6ogl4BIc6FwG3J2SkEKRZ3hrK/jIlgGMDpA6ASfhhVbdxYFP56w8DiBllCAYkzeo4jPCImJBrR+HLCMiSj50wjQUsI4LpCPTphcaOKR2JtABw4xDnUfQ3GJN8BxnmCJc+z7xu9rFeVkrr84ySPmcZQk/PP4ZH0yXOGYpDnS+c2tL7XzAE5HqXWLk+hTFOSdLfKeKNYUI8202MTofqjbO8JwUQ8JlgRZcsQP79I6Om2h4JMRc/E2C9pKzAXmAcY577Yb/A6QFa4ez9Csbrf8Rd+MGW2A/d7olgX3lUlCldnM8KsqqiDY37vHoJ1+PBXHCX60Yzu6D9pdxy364HQaDG/vLMotxdGtP2p2HcSsfTJ5unYe1k95+a94j8s0Z3aJ+St5W4ePKHqXX1mgwE4sfllHcjJ2IPORPS9+3V7QwIuClTTi6Lh4XjVUydIBDo/VX55pmXm6bo0UzZFhmrPHkvAI7TH1+VYjvwdXTY/r96nE+jifJtx/dyp09/oey3Zuf5i+/MBK7oyoD36vdyCxB8XkzUxIS6PNS1U1V8+ECU6H11C3VO9xctjsSuDKHm7PpOIPWYOA1O4bh3VjWtdFsNK47HfPG6Jue19g1mQ2LI4oDRudE2VItd1M2nxNEicsxDXCmL1kuOx3XPkH0oIA1n07kI2CU4xmT7dlsr9vL1w5bmOFbEVkvyasdcaPdbmi1Oybu6X3WnwucHfbkxkFPnmBEUoJV41Z1zWVhcyFjsYDLXMRmfQnrVKZTwEx1WdeynSbgJEljrJiChAV5jOtplJaRAXzztXSIeCmdXM/K1/ahX8f/diGQOgFRClz5coVlGvGJ4WLsHHnncOvkENrB9/OAqIcl4ykygjZMDn/9LhNVH1WNeMP+dLwjXen+wd3nwfTZ/EuA4f8FkPl4fxN8EhNwnI7KULAke2Z3m4OcQbJr9XbFtIBmfVHPl8u8rB/bboBMwgOVSGBYYIpRLvvqesZeMQUVCjhriFXEj4xX8kOKuYjoVECBE1nvtfJ4xtYyxVxtLb58qMW5K9GBSRk6gQtxSjaI5calGH+6lCEXKT0pHsvPimXB74ydwNqzI/2US4sgNFQnNcDWH9QFYhKWyNbLsn3wUwCnjB8KqyBXXIQsqJdc4I//1FRP7WoQIZZT4XtaKdjv8yVPsU6x+1vpHUw5Sqrdkvz3cqmTsgQQlhspJyW+WhFc9QRouDcrtkZPjgu74302Lg7Z9d6J30v24nRc471/AQ==</con:value></con:property><con:property><con:name>SAMLSAU2_2</con:name><con:value>nVbbcuI4EP0VyvNIGfnGzRWo8kDIeEMm2ZhJMnmZErIATWzZ0cWBfP1KBhzMJFl2n1zdbnWfvuiozzhME8cPOMdMkIw21mlCuV9qB4Zk1M8gJ9ynMMXcF8iPgqup77QsH+6PGI1wPDB+Of25i2PYNz2745gedDxz3lPi3O14bdtzu50uVqacSxxSLiAVA8Ox7LZpeaZjz2zLt23fdVueYz0ajTvMuPKtTFqWsQO15gNjJUTuA/Dy8tJ6cVsZWwLHsmzwcDWN0Aqn0BiebTMqA7Hhzh61YoxwkqAWylJwBmo2ZzH3I7KkUEiGd7Hij2JZwOoDZRNzsvxiVGdxHNJFVoojSDNKEEzIK9T1ucJilcWNIFlmjIhV+mEStqUdm3iNTGR79IsB6tBOdFRDyDg0+QraO1+3eIEZpgg3ftyGA+PLaV0rj84YpHyRsZTXxf+GB9MCJ1mOY5Pv09pBO93hO5UanmHkhxQlkpMCf9fDmkOE+a6bGJ3uqnHD8IKsp4SrAV1zjQ4cwjsSt9UYkyXm4v806KA5Wyd3MJF4mNv5j/H117uIQJzFl73erDfxvrlej4aDEsChcamoWrsVj4ayGqLtiTGVzSyPHv+exBduwNx7e25dbto9ycCc/oXAvY1um79pdBlcPIOncxg2F97sfrb5+eigOLy/ans/mw8Xm4DfQ9lcrieLBzTvPcBzdj/qb77Jx4sfxZRI0rm76TkIPF1SuCzAZd5sUuE99VA/xC+PBUtXP+++NyfeJHoCo8cITW8Dd9k5Z71MEsZzcb1xZsGgSucAf123v/ORnP/GSOxFPQbhuDFRXYLiczLTGhKbi9LUzzX5cIGpMIb6lOYOXyq6I7GveriV1eXoT8btsdtxRt2vbevcartWt9+3J1bQCSbWnmS2KI4gjjK6IDqWptzt2HwOEKU+xzTGzCwyqZiOG594HEMBGyG9VZcgoxzPMkXPdid5ZQ5N4zV93diF/fu1u3GLDZe20fieiWt6zYKFwKxOym6NlG8xIjnBmrn1YHM12VyoYjzDQorEbhWwRbFU3M40zfqO12sDTtI8wRoqSLNYJriVr/KyNIBvv44JES+102kQ3fwaRb+c8tZ9mN/xv30plE1MtAHXKX3Fqp34nUfG2efzQd7O0WO0dx/ImOgLpuoqGEFbJPVfb+Oi56SalbfE9sirA8eKmnNwnFcVLy4Iqua+er0VqSsaGO6b8wzt1nNLFoUs++F5LmDKPdCZAssBEUZSEdVmlj1hCiov4KRXoQJ+FLzS1yFKsaKRgAKnan4apXjCGhBhrteAUE3++tQdoxZSlU7gtXhPN0rUCqMRf7rlIB9pO6W+UZ+XjMVvHXvH10EclafaAgShSy3pF2HzwXigTLklissyduj8PQfvBa8rqyJXWIQaqLkU+OM/DU1SAwMilEkqwrFRKg6Js8QpNjn234z+cFNyc7WskX/f1kxSjgBSi6GyL/3rN9fXV4AuD8h3F/SIfwOrO+qOFQm3e6Nxyb/tLf+et0fnVVFq6IZ/qP/UHNTpeMaH/wA=</con:value></con:property><con:property><con:name>SAMLSAU2_3</con:name><con:value>nVbZcuI6EP0VyvOYMt5YXYEqgrOQIcvg7C8pRW5AGVl2LNkx+forGXAwIbnc++RSu3X69KIjHXIUUtsdcA6JIBGr5SFl3C2sPS1NmBshTrjLUAjcFdj1Bxdj166bLlpv0Wojr6c9O532CwIL600ML3rDnGK907KQ3nCQ3XI60yDodKUr5ymMGBeIiZ5mm1ZTNxu6bd1YpmvZrmPVO073SavdQcIltnSpm9qKVM572lyI2DWM9/f3+rtTj5KZYZumZTxcjH08hxBp/cNlRkWgpL/yx/UAMFCK6zgKjUOj4nMYcNcnM4ZEmsAqVvBdLNMwu4b0CTiZ/dLKvRCM2DQqlkPEIkYwouQDqfpcgJhHQW1AZ1FCxDz8NgnLVMA65FjHVoP90owqtT2BKgwTjnQ+R9YKawJTSIBhqN1ORj3t135dK7beJIjxaZSEvLr8b3yAZUCjGAKdr9NaUdsfcEel+oeA3RHDNOUkg0s1rDHCwFfdBLw/VO06gSnJx4TLAc25Ymds0ttaLqvhkRlw8X8atNGcJcgdoin0Hzqn/sNiFn/ML0aDAcxQ51xkNPKu//7tFQQ2nQtD2drlcmsoyyFa7kAvnfbBBE6tBaUieGpFYpaMbXSftz4mmUWvTh7nWXzGBwep/Xt4tBh/2MO84b+2f98Fl1MgNAyFQ68nH0fxeSfqPpw9eKR1e0+Zcf0mbuhY3J3fpXaev3Ypvp/dw9Mfcfaav7f+ePTttPHavL1Nhqyb33rjs6vH88uz2w9xsLjy0f1l7mfzx/H4lJz7LXPh3LziXpnOBv+qbX3m/fTlFbBYL9UYjLzaiewSEj+LmbKQQJ8Wrm6sxIcLYELrq11KO9xUyh0JXNnD5dpqON0Tr+k5LXvYPmqax2bTMdvdrnViDlqDE3MtMksWWxSHEZsSFUtJ7nJsfiaIQ5cDCyDRsyiVSse1HxA9JFBtxCbyEESMw00k5TkWqYnfqDm1WJjRGaco7ba79EWrXUbiil0lg6mApCrJTkWSJ4BJTEDpthprLueaC1mKN5Slglr1DNUZpFLZEyWyrt3oNA1OwpiCImqEUZBSqMfzuCiMwZdfW0eYF1ZvPPCvn4f+s12cuW+z2/63LoT0CYhy4CqlI5DNhB1XjL3O50verZ1X0Rp+kAZEHS9ZVZEQvGRS/fU5LGpKykn5TGzNvNywbaiAG9t5lfGCjOBy6su7W0q6FIH+ujlvyKq/1dMsS4t+NBqOkUh4Q1XEMG3DB5xKmVrcRH+BGSWKsdedUBLfCl7aqxRTMWe+QAJCOT+1YrnHI8AHrh4BIzn3+b4vjEpIWToBudhlG1L5gFGMf3zjYBcrP2m+lp/3KAk+O7YDayOOzFO+AQRhM7VS98Him/HAkYQlUsmiZBN8F8Cu4FVjWeSSi5AD9ZIK+P5PTUlUT0MYRykTI08rDJuyWfAUixjcT6cvMIUyl0818u9vNZ0UI4BBPvA4KfDVjeuqI8BmG9K7CrqlvgOzPWx7UoKbnaFXqG9zqb7HzeFxWZQKu/4X81fLRp22Z7z/Dw==</con:value></con:property><con:property><con:name>SchemaNameSpace</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\Scripts</con:value></con:property><con:property><con:name>StreamCreateCount</con:name><con:value>2</con:value></con:property><con:property><con:name>streamlimit</con:name><con:value>12</con:value></con:property><con:property><con:name>streamMaxCreateExpireTimeDiffhours</con:name><con:value>24</con:value></con:property><con:property><con:name>streamRenewTimeHours</con:name><con:value>6</con:value></con:property><con:property><con:name>Streams_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_561393521.txt</con:value></con:property><con:property><con:name>Streams_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:242394094</con:value></con:property><con:property><con:name>Streams_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_344946277.txt</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa1.d.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa1.d.uvvu.com</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostB</con:name><con:value>qa1.b.uvvu.com</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa1.d.uvvu.com</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa1.q.uvvu.com</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>targetjdbc</con:name><con:value>jdbc:oracle:thin:DEQA1_APP/lp1db_23@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>443</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>tester</con:name><con:value>pjg</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>TOU</con:name><con:value>qa.c.uvvu.com</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>TOUUrl_06</con:name><con:value/></con:property><con:property><con:name>TOU_US</con:name><con:value>20140811</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnGenericRightsToken</con:name><con:value>urn:dece:stream:generic</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urnParentalControlAllowAdult</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>urnParentalControlBlockUnratedContent</con:name><con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>urnParentalControlRating</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>urnPolicy</con:name><con:value>urn:dece:type:policy:</con:value></con:property><con:property><con:name>urnPolicyID</con:name><con:value>urn:dece:policyid:org:dece:</con:value></con:property><con:property><con:name>urnRating</con:name><con:value>urn:dece:type:rating:</con:value></con:property><con:property><con:name>urnRightsLocker</con:name><con:value>urn:dece:rightslockerid:org:dece:</con:value></con:property><con:property><con:name>urnRightsToken</con:name><con:value>urn:dece:rightstokenid:org:dece:</con:value></con:property><con:property><con:name>urnstream</con:name><con:value>urn:dece:streamhandleid:org:dece:</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>USERID</con:name><con:value>188C6CCD5900DF22E0533E991F0A1DD3</con:value></con:property><con:property><con:name>USERIDBAU1_1</con:name><con:value>188C794FB69CE912E0533E991F0A0FFD</con:value></con:property><con:property><con:name>USERIDBAU2_1</con:name><con:value>FC6CADFE8D4693AFE0401F0A059941FB</con:value></con:property><con:property><con:name>USERIDFAU1_1</con:name><con:value>188C6CCD549EDF22E0533E991F0A1DD3</con:value></con:property><con:property><con:name>USERIDFAU2_1</con:name><con:value>188C6D455D00DF24E0533E991F0A0546</con:value></con:property><con:property><con:name>USERIDFULL</con:name><con:value>urn:dece:userid:org:dece:188C6CCD549EDF22E0533E991F0A1DD3</con:value></con:property><con:property><con:name>USERIDSAU1_1</con:name><con:value>188C6954EC91DF1AE0533E991F0AACB2</con:value></con:property><con:property><con:name>USERIDSAU2_1</con:name><con:value>188C6CCD5900DF22E0533E991F0A1DD3</con:value></con:property><con:property><con:name>userIndex</con:name><con:value>0</con:value></con:property><con:property><con:name>UserName</con:name><con:value>stream_renew_20150615_034257</con:value></con:property><con:property><con:name>UserName_BAU1</con:name><con:value>stream_renew_20150615_034254</con:value></con:property><con:property><con:name>UserName_BAU2</con:name><con:value>stream_renew_20150615_034257</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>stream_renew_20150615_034252</con:value></con:property><con:property><con:name>UserName_FAU2</con:name><con:value>stream_renew_20150615_034255</con:value></con:property><con:property><con:name>UserName_SAU1</con:name><con:value>stream_renew_20150615_034253</con:value></con:property><con:property><con:name>UserName_SAU2</con:name><con:value>stream_renew_20150615_034256</con:value></con:property><con:property><con:name>userPropertyNameArray</con:name><con:value>UserName_FAU1,UserName_SAU1,UserName_FAU2,UserName_SAU2,UserName_BAU1,UserName_BAU2</con:value></con:property><con:property><con:name>V1</con:name><con:value>2015</con:value></con:property><con:property><con:name>V2</con:name><con:value>02</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>2015</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>02</con:value></con:property><con:property><con:name>versionUrlEncode</con:name><con:value>06</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>if(testStepResult.getTestStep().config.type.toString() == "restrequest")
{
                byte [] tempByteArrRequest = testStepResult.getRawRequestData();
                String tempRequest = new String(tempByteArrRequest);

                log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Request>--------------------------------");
                log.info(tempRequest);
                log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Request>--------------------------------");

                byte [] tempByteArrResponse = testStepResult.getRawResponseData();
                String tempResponse = new String(tempByteArrResponse);


                log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
                log.info(tempResponse);
                log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
}
</con:script></con:eventHandlers><con:sensitiveInformation/></con:soapui-project>